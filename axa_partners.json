{
  "openapi": "3.0.0",
  "info": {
    "title": "AXA Partners APIs",
    "description": "Endpoints specifications.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://apis.axa-assistance.com",
      "description": "Production server"
    },
    {
      "url": "https://api-test.axa-assistance.com",
      "description": "Test server"
    }
  ],
  "paths": {
    "/assistance/home/vexp/cases": {
      "post": {
        "summary": "Creates a home case.",
        "description": "Cf. summary.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "incident": {
                    "cause": {
                      "code": "1000",
                      "description": "ENGINE NOISE"
                    },
                    "occurred_at": "2019-02-23T12:58:15Z",
                    "location": {
                      "address": {
                        "street_address": "4 Hans Avenue",
                        "postal_code": "OX12 7DB",
                        "locality": "Wantage",
                        "state": "England",
                        "country": "GB",
                        "subdivision": "Oxon"
                      },
                      "additional_information": "string"
                    },
                    "description": "I have an issue with the lock, can't open my door."
                  },
                  "policy_number": "FY89HJ90",
                  "policy_holder": {
                    "is_property_owner": true,
                    "first_name": "John",
                    "last_name": "Doe",
                    "address_postal_code": "75011",
                    "person_registration": {
                      "registration_type": "ID_CARD",
                      "value": "string"
                    }
                  },
                  "partner_reference": "A123F",
                  "contact": {
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john.doe@axa-assistance.com",
                    "phone": {
                      "international_prefix": "+44",
                      "number": "123456789"
                    },
                    "appointment_proposals": [
                      {
                        "start_at": "2019-01-24T15:30:00Z",
                        "end_at": "2019-01-24T17:30:00Z",
                        "preferred_order": 1
                      }
                    ]
                  }
                },
                "description": "All information usefull to create a home case.",
                "type": "object",
                "properties": {
                  "incident": {
                    "description": "Incident details.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "cause": {
                            "description": "Incident cause.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "code": {
                                    "description": "Breakdown diagnostic code.",
                                    "type": "string",
                                    "example": "1000",
                                    "maxLength": 20
                                  },
                                  "description": {
                                    "description": "Breakdown diagnostic description.",
                                    "type": "string",
                                    "example": "ENGINE NOISE",
                                    "maxLength": 255
                                  }
                                },
                                "required": [
                                  "code"
                                ]
                              }
                            ]
                          },
                          "occurred_at": {
                            "description": "Date-time at which the incident occurred.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "location": {
                            "description": "Location where the incident happened.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "Location address.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "example": "4 Hans Avenue",
                                            "maxLength": 255
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "example": "OX12 7DB",
                                            "maxLength": 20
                                          },
                                          "locality": {
                                            "description": "Locality.",
                                            "type": "string",
                                            "example": "Wantage",
                                            "maxLength": 100
                                          },
                                          "state": {
                                            "description": "Label of the state.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "England"
                                          },
                                          "country": {
                                            "description": "Country.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                            "type": "string",
                                            "example": "GB",
                                            "minLength": 2,
                                            "maxLength": 2
                                          },
                                          "subdivision": {
                                            "description": "Subdivision.",
                                            "type": "string",
                                            "example": "Oxon",
                                            "maxLength": 100
                                          }
                                        },
                                        "required": [
                                          "street_address"
                                        ]
                                      }
                                    ]
                                  },
                                  "additional_information": {
                                    "description": "Additional information about the location.",
                                    "type": "string",
                                    "maxLength": 2000
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            ]
                          },
                          "description": {
                            "description": "Incident description.",
                            "type": "string",
                            "example": "I have an issue with the lock, can't open my door.",
                            "maxLength": 2000
                          }
                        },
                        "required": [
                          "cause",
                          "occurred_at",
                          "location"
                        ]
                      }
                    ]
                  },
                  "policy_number": {
                    "description": "The policy number or subscription number.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "FY89HJ90"
                  },
                  "policy_holder": {
                    "description": "Information related to the holder of the policy.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_property_owner": {
                            "description": "States if the policy holder is the property owner:\n- true: the policy holder is the property owner;\n- false: the policy holder is the tenant.\n",
                            "type": "boolean"
                          },
                          "first_name": {
                            "description": "First name of the policy holder.",
                            "type": "string",
                            "example": "John",
                            "maxLength": 100
                          },
                          "last_name": {
                            "description": "Last name of the policy holder.",
                            "type": "string",
                            "example": "Doe",
                            "maxLength": 100
                          },
                          "address_postal_code": {
                            "description": "Address postal code of the policy holder.",
                            "type": "string",
                            "example": "75011",
                            "maxLength": 20
                          },
                          "person_registration": {
                            "description": "Registration of the policy holder.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.",
                                    "type": "string",
                                    "enum": [
                                      "ID_CARD",
                                      "PASSPORT",
                                      "DRIVER_LICENSE",
                                      "TAX_REGISTRATION",
                                      "RESIDENCE_PERMIT"
                                    ]
                                  },
                                  "value": {
                                    "description": "Value of the registration.",
                                    "type": "string",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "registration_type",
                                  "value"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "partner_reference": {
                    "description": "Reference of the partner.",
                    "type": "string",
                    "example": "A123F",
                    "maxLength": 50
                  },
                  "contact": {
                    "description": "Information related to the contact for the case.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "first_name": {
                            "description": "First name.",
                            "type": "string",
                            "example": "John",
                            "maxLength": 100
                          },
                          "last_name": {
                            "description": "Last name.",
                            "type": "string",
                            "example": "Doe",
                            "maxLength": 100
                          },
                          "preferred_language": {
                            "description": "Language in which the contact wish to be contacted.\nList of ISO 639-1 codes.\n",
                            "type": "string",
                            "example": "en",
                            "maxLength": 2,
                            "minLength": 2
                          },
                          "email": {
                            "description": "Email adress of the contact.",
                            "allOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "example": "jonathan.doe@mail.com"
                              }
                            ],
                            "example": "john.doe@axa-assistance.com"
                          },
                          "phone": {
                            "description": "Contact phone number.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix of the phone number.",
                                    "type": "string",
                                    "example": "+44",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number of the beneficiary (any).",
                                    "type": "string",
                                    "example": "123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "appointment_proposals": {
                            "description": "List of appointments proposed by the contact.\nN.B. If no values are defined, the appointment is considered to be as soon as possible.\n",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 20,
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "start_at": {
                                  "description": "Starting datetime of the proposed appointment.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2019-01-24T15:30:00Z"
                                },
                                "end_at": {
                                  "description": "Ending datetime of the proposed appointment.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2019-01-24T17:30:00Z"
                                },
                                "preferred_order": {
                                  "description": "The contact preferred appointment order.\nLower number, higher preference.\n",
                                  "type": "number",
                                  "format": "integer",
                                  "minimum": 1,
                                  "maximum": 20,
                                  "example": 1
                                }
                              },
                              "required": [
                                "start_at",
                                "end_at"
                              ]
                            }
                          }
                        },
                        "required": [
                          "phone"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "incident"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of a case.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Case created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "case_id": "9e162d79-c99a-4216-8fa6-8c4b274a4f22",
                    "case_reference": "HA65TV",
                    "status": "CREATED",
                    "incident": {
                      "cause": {
                        "code": "1000",
                        "description": "ENGINE NOISE"
                      },
                      "occurred_at": "2019-02-23T12:58:15Z",
                      "location": {
                        "address": {
                          "street_address": "4 Hans Avenue",
                          "postal_code": "OX12 7DB",
                          "locality": "Wantage",
                          "state": "England",
                          "country": "GB",
                          "subdivision": "Oxon"
                        },
                        "additional_information": "string"
                      },
                      "description": "I have an issue with the lock, can't open my door."
                    },
                    "policy_number": "FY89HJ90",
                    "policy_holder": {
                      "is_property_owner": true,
                      "first_name": "John",
                      "last_name": "Doe",
                      "address_postal_code": "75011",
                      "person_registration": {
                        "registration_type": "ID_CARD",
                        "value": "string"
                      }
                    },
                    "partner_reference": "A123F",
                    "contact": {
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@axa-assistance.com",
                      "phone": {
                        "international_prefix": "+44",
                        "number": "123456789"
                      },
                      "appointment_proposals": [
                        {
                          "start_at": "2019-01-24T15:30:00Z",
                          "end_at": "2019-01-24T17:30:00Z",
                          "preferred_order": 1
                        }
                      ]
                    }
                  },
                  "required": [
                    "case_id",
                    "case_reference",
                    "incident",
                    "status"
                  ],
                  "properties": {
                    "case_id": {
                      "description": "Identifier of the case.",
                      "type": "string",
                      "example": "9e162d79-c99a-4216-8fa6-8c4b274a4f22",
                      "maxLength": 150
                    },
                    "case_reference": {
                      "description": "Short and readable identifier of the case.",
                      "type": "string",
                      "maxLength": 20,
                      "example": "HA65TV"
                    },
                    "status": {
                      "description": "Status of the case:\n  - CREATED: The case has been created without any actions expected yet.\n  - ONGOING: The case has to be treated, actions are ongoing.\n",
                      "type": "string",
                      "enum": [
                        "CREATED",
                        "ONGOING"
                      ]
                    },
                    "incident": {
                      "description": "Incident details.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "cause": {
                              "description": "Incident cause.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "code": {
                                      "description": "Breakdown diagnostic code.",
                                      "type": "string",
                                      "example": "1000",
                                      "maxLength": 20
                                    },
                                    "description": {
                                      "description": "Breakdown diagnostic description.",
                                      "type": "string",
                                      "example": "ENGINE NOISE",
                                      "maxLength": 255
                                    }
                                  },
                                  "required": [
                                    "code"
                                  ]
                                }
                              ]
                            },
                            "occurred_at": {
                              "description": "Date-time at which the incident occurred.",
                              "type": "string",
                              "format": "date-time",
                              "example": "2019-02-23T12:58:15Z"
                            },
                            "location": {
                              "description": "Location where the incident happened.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Location address.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "4 Hans Avenue",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "OX12 7DB",
                                              "maxLength": 20
                                            },
                                            "locality": {
                                              "description": "Locality.",
                                              "type": "string",
                                              "example": "Wantage",
                                              "maxLength": 100
                                            },
                                            "state": {
                                              "description": "Label of the state.",
                                              "type": "string",
                                              "maxLength": 100,
                                              "example": "England"
                                            },
                                            "country": {
                                              "description": "Country.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                              "type": "string",
                                              "example": "GB",
                                              "minLength": 2,
                                              "maxLength": 2
                                            },
                                            "subdivision": {
                                              "description": "Subdivision.",
                                              "type": "string",
                                              "example": "Oxon",
                                              "maxLength": 100
                                            }
                                          },
                                          "required": [
                                            "street_address"
                                          ]
                                        }
                                      ]
                                    },
                                    "additional_information": {
                                      "description": "Additional information about the location.",
                                      "type": "string",
                                      "maxLength": 2000
                                    }
                                  },
                                  "required": [
                                    "address"
                                  ]
                                }
                              ]
                            },
                            "description": {
                              "description": "Incident description.",
                              "type": "string",
                              "example": "I have an issue with the lock, can't open my door.",
                              "maxLength": 2000
                            }
                          },
                          "required": [
                            "cause",
                            "occurred_at",
                            "location"
                          ]
                        }
                      ]
                    },
                    "policy_number": {
                      "description": "The policy number or subscription number.",
                      "type": "string",
                      "maxLength": 50,
                      "example": "FY89HJ90"
                    },
                    "policy_holder": {
                      "description": "Information related to the holder of the policy.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "is_property_owner": {
                              "description": "States if the policy holder is the property owner:\n- true: the policy holder is the property owner;\n- false: the policy holder is the tenant.\n",
                              "type": "boolean"
                            },
                            "first_name": {
                              "description": "First name of the policy holder.",
                              "type": "string",
                              "example": "John",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Last name of the policy holder.",
                              "type": "string",
                              "example": "Doe",
                              "maxLength": 100
                            },
                            "address_postal_code": {
                              "description": "Address postal code of the policy holder.",
                              "type": "string",
                              "example": "75011",
                              "maxLength": 20
                            },
                            "person_registration": {
                              "description": "Registration of the policy holder.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "PASSPORT",
                                        "DRIVER_LICENSE",
                                        "TAX_REGISTRATION",
                                        "RESIDENCE_PERMIT"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "type": "string",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "registration_type",
                                    "value"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "partner_reference": {
                      "description": "Reference of the partner.",
                      "type": "string",
                      "example": "A123F",
                      "maxLength": 50
                    },
                    "contact": {
                      "description": "Information related to the contact for the case.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "example": "John",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "example": "Doe",
                              "maxLength": 100
                            },
                            "preferred_language": {
                              "description": "Language in which the contact wish to be contacted.\nList of ISO 639-1 codes.\n",
                              "type": "string",
                              "example": "en",
                              "maxLength": 2,
                              "minLength": 2
                            },
                            "email": {
                              "description": "Email adress of the contact.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "john.doe@axa-assistance.com"
                            },
                            "phone": {
                              "description": "Contact phone number.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "international_prefix": {
                                      "description": "Prefix of the phone number.",
                                      "type": "string",
                                      "example": "+44",
                                      "maxLength": 5
                                    },
                                    "number": {
                                      "description": "Phone number of the beneficiary (any).",
                                      "type": "string",
                                      "example": "123456789",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "number"
                                  ]
                                }
                              ]
                            },
                            "appointment_proposals": {
                              "description": "List of appointments proposed by the contact.\nN.B. If no values are defined, the appointment is considered to be as soon as possible.\n",
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 20,
                              "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "start_at": {
                                    "description": "Starting datetime of the proposed appointment.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2019-01-24T15:30:00Z"
                                  },
                                  "end_at": {
                                    "description": "Ending datetime of the proposed appointment.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2019-01-24T17:30:00Z"
                                  },
                                  "preferred_order": {
                                    "description": "The contact preferred appointment order.\nLower number, higher preference.\n",
                                    "type": "number",
                                    "format": "integer",
                                    "minimum": 1,
                                    "maximum": 20,
                                    "example": 1
                                  }
                                },
                                "required": [
                                  "start_at",
                                  "end_at"
                                ]
                              }
                            }
                          },
                          "required": [
                            "phone"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.home.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/home/vexp/cases/{case_id}/attachments": {
      "post": {
        "summary": "Creates an attachment.",
        "description": "Cf. summary",
        "parameters": [
          {
            "in": "path",
            "name": "case_id",
            "description": "The case identification number.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "external_attachment_id"
                ],
                "type": "object",
                "properties": {
                  "external_attachment_id": {
                    "maxLength": 80,
                    "type": "string"
                  }
                },
                "example": {
                  "external_attachment_id": "861de88a-0e1e-42fe-8e73-84309c7b0fa2|fe4031ff-9320-477d-81e0-7d380930ea2c"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.home.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/home/vexp/cases/{case_id}/questions": {
      "post": {
        "summary": "Creates a new request to be contacted by an agent.",
        "description": "Cf. summary",
        "parameters": [
          {
            "in": "path",
            "name": "case_id",
            "description": "The case identification number.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "preferred_touch_point"
                ],
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason that leads to the contact request.",
                    "type": "string",
                    "maxLength": 50
                  },
                  "preferred_touch_point": {
                    "description": "Selected media of communication to use to be contacted back.",
                    "type": "string",
                    "enum": [
                      "VOI_PHONE",
                      "E-MAIL",
                      "SMS"
                    ]
                  },
                  "description": {
                    "description": "Free-text that describes the customer request.",
                    "type": "string",
                    "maxLength": 2000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.home.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases": {
      "post": {
        "summary": "Creates a new case.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-omnichannel-correlation-id",
            "description": "The correlation identifier used for any kind of channel (website, voicebot...).\n\nN.B. Can be filled with the call identifier when the case is created via a voicebot.\n",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "ab9de1a1dd714e78a045bbd865d338b3"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "All information usefull to create a motor case.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "partner_reference": {
                    "description": "Reference of the partner.",
                    "type": "string",
                    "example": "A123F",
                    "maxLength": 50
                  },
                  "vehicle": {
                    "description": "Customer vehicle.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "registration_number": {
                            "description": "Registration number of the damaged vehicle.",
                            "type": "string",
                            "example": "AF45P1",
                            "maxLength": 20
                          },
                          "vehicle_type": {
                            "description": "Type of the vehicle.\nThe values are :\n- 3RD_WHEELER: Third wheeler,\n- AGRICULTURAL_TRUCK: Agricultural truck\n- BIKE: Bike\n- BUS_COACHES: Bus coaches, autocar\n- CAR: Car\n- MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n- MOTORCYCLE: Motorcycle\n- MINI_CAR: Mini car, mini bus\n- TRAILER: Trailer\n- TRUCK: Truck\n- VAN: Van\n",
                            "type": "string",
                            "enum": [
                              "3RD_WHEELER",
                              "AGRICULTURAL_TRUCK",
                              "BIKE",
                              "BUS_COACHES",
                              "CAR",
                              "MOBILE_HOME_CAMPING_CAR",
                              "MOTORCYCLE",
                              "TRAILER",
                              "TRUCK",
                              "VAN"
                            ],
                            "example": "CAR"
                          },
                          "second_registration_number": {
                            "description": "Registration number of the attached vehicle.\n\nCan be truck registration number in case the damaged vehicle is a trailer, or the trailer registration number if the damage vehicle is a truck.\n\nMandatory when _vehicle_type_ is equal to _TRAILER_.\n",
                            "type": "string",
                            "example": "BV749GP",
                            "maxLength": 20
                          },
                          "brand": {
                            "description": "Vehicle brand.",
                            "type": "string",
                            "example": "AUDI",
                            "maxLength": 50
                          },
                          "model": {
                            "description": "Vehicle model.",
                            "type": "string",
                            "example": "A5",
                            "maxLength": 50
                          },
                          "color": {
                            "description": "Vehicle color.",
                            "type": "string",
                            "example": "BLUE",
                            "maxLength": 50
                          },
                          "sizes": {
                            "description": "Sizes of the vehicle.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "unit": {
                                    "description": "Unified Code for Units of Measure (UCUM) in case insensitive.\n\nAvailable values:\n\n- \\[IN_BR]: Inches;\n- M: Meter.\n",
                                    "type": "string",
                                    "enum": [
                                      "M",
                                      "[IN_BR]"
                                    ],
                                    "example": "M"
                                  },
                                  "length": {
                                    "description": "Length of the vehicle.",
                                    "type": "number",
                                    "example": 2.8
                                  },
                                  "width": {
                                    "description": "Width of the vehicle.",
                                    "type": "number",
                                    "example": 1.8
                                  },
                                  "height": {
                                    "description": "Height of the vehicle.",
                                    "type": "number",
                                    "example": 2
                                  }
                                },
                                "required": [
                                  "unit"
                                ]
                              }
                            ]
                          },
                          "volume": {
                            "description": "Volume of the vehicle.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "unit": {
                                    "description": "Unit of the measure code.\nThe possible values are :\n| Unit of measure | Description\n| --------------- | -----------\n| CM3             | Cubic centimeter\n| M3              | Cubic meter\n",
                                    "type": "string",
                                    "format": "Unified Code for Units of Measure (UCUM) in case sensitive.",
                                    "enum": [
                                      "CM3",
                                      "M3"
                                    ],
                                    "example": "M3"
                                  },
                                  "value": {
                                    "description": "Measured volume.",
                                    "type": "number",
                                    "example": 0.125
                                  }
                                },
                                "required": [
                                  "value",
                                  "unit"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "gross_weight": {
                            "description": "Maximum loaded weight of the vehicle, as determined by the manufacturer.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Measured weight.",
                                    "type": "number",
                                    "example": 1250
                                  },
                                  "unit": {
                                    "description": "Unit of the measure code. Available values:\n- KG: Kilograms;\n- \\[LB_AV]: Pound;\n- \\[STONE_AV]: Stone.\n",
                                    "type": "string",
                                    "format": "Unified Code for Units of Measure (UCUM) in case insensitive.",
                                    "enum": [
                                      "KG",
                                      "[LB_AV]",
                                      "[STONE_AV]"
                                    ],
                                    "example": "KG"
                                  }
                                },
                                "required": [
                                  "value",
                                  "unit"
                                ]
                              }
                            ]
                          },
                          "number_of_axles": {
                            "description": "Total number of axles of the vehicle.",
                            "type": "integer",
                            "minimum": 1
                          },
                          "gearbox_type": {
                            "description": "The gear box of the vehicle\nThe possible values are:\n- AUTO: Automatic gearbox\n- MANUAL: Manual gearbox\n- SEMI_AUTO: Semi automatic gearbox\n- SPEED_VARIATOR: Speed variator\n- UNKNOWN: Unkown\n",
                            "type": "string",
                            "enum": [
                              "AUTO",
                              "MANUAL",
                              "SEMI_AUTO",
                              "SPEED_VARIATOR",
                              "UNKNOWN"
                            ],
                            "example": "AUTO"
                          },
                          "fuel_type": {
                            "description": "The fuel type of the vehicle.\nThe possible values are:\n- ALCOHOL_ETHANOL: Alcohol ethanol\n- BIO_DIESEL: Biologic Diesel\n- DIESEL: Diesel\n- ELECTRIC: Electricity\n- ELECTRIC_DIESEL: Electricity and diesel hybrid\n- ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n- GASOLINE: Gasoline\n- HYDROGEN: Hydrogen\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- UNKNOWN: Unknown\n",
                            "type": "string",
                            "example": "LIQUID_PETROL_GAS",
                            "enum": [
                              "ALCOHOL_ETHANOL",
                              "BIO_DIESEL",
                              "DIESEL",
                              "ELECTRIC",
                              "ELECTRIC_DIESEL",
                              "ELECTRIC_GASOLINE",
                              "GASOLINE",
                              "HYDROGEN",
                              "LIQUID_PETROL_GAS",
                              "NATURAL_GAS",
                              "UNKNOWN"
                            ]
                          },
                          "is_four_wheel_drive": {
                            "description": "Indicates if the vehicle is a 4x4.",
                            "type": "boolean"
                          },
                          "has_a_trailer_attached": {
                            "description": "Indicates if the vehicle has a trailer attached.",
                            "type": "boolean"
                          },
                          "is_loaded": {
                            "description": "Indicates if the vehicle is loaded.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "registration_number"
                        ]
                      }
                    ]
                  },
                  "intervention_type": {
                    "description": "Type of intervention required:\n- TOW_OR_REPAIR: The vehicle needs a towing or can be repaired on spot.\n- STOP_AND_GO: The vehicles is redirected to a garage.\n",
                    "type": "string",
                    "enum": [
                      "TOW_OR_REPAIR",
                      "STOP_AND_GO"
                    ]
                  },
                  "policy_number": {
                    "description": "The policy number or subscription number.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "FY89HJ90"
                  },
                  "passengers": {
                    "description": "Passengers information.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "passengers_number": {
                            "description": "Number of passengers (including children).",
                            "type": "integer",
                            "example": 3
                          },
                          "children_number": {
                            "description": "Number of children.",
                            "type": "integer",
                            "example": 1
                          }
                        }
                      }
                    ]
                  },
                  "cause": {
                    "description": "Case cause.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "code": {
                            "description": "Breakdown diagnostic code.",
                            "type": "string",
                            "maxLength": 20
                          },
                          "description": {
                            "description": "Breakdown diagnostic description.",
                            "type": "string",
                            "example": "ENGINE NOISE",
                            "maxLength": 2000
                          }
                        },
                        "required": [
                          "code"
                        ]
                      }
                    ]
                  },
                  "initial_situation_assessment": {
                    "description": "Assessment of the situation right after the customer accident.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "is_vehicle_in_mud_or_a_ditch": {
                            "description": "Indicates if the vehicle is in the mud or in a ditch.",
                            "type": "boolean",
                            "example": false
                          },
                          "has_no_longer_wheels": {
                            "description": "Indicates if the vehicle has no longer wheels.",
                            "type": "boolean",
                            "example": false
                          },
                          "is_wheels_blocked_or_missing": {
                            "description": "Indicates that some wheels are blocked or missing.",
                            "type": "boolean",
                            "example": false
                          },
                          "is_police_called": {
                            "description": "Indicates if the police is called and are on their way or already on site",
                            "type": "boolean",
                            "example": false
                          },
                          "is_thirdparty_involved": {
                            "description": "Indicates if there is a third-party involved",
                            "type": "boolean",
                            "example": false
                          },
                          "is_anyone_injured": {
                            "description": "Indicates if there is anyone injured.",
                            "type": "boolean",
                            "example": false
                          },
                          "vehicle_damage": {
                            "description": "Indicates what part of the vehicle is damaged.\nThe possible values are:\n- CHASSIS: use it to indicate that the chassis is damaged\n- WINDSHIELD: use it indicate that the windshield is damaged\n- NO_DAMAGE: use it to indicate that no damage is found on the vehicle\n",
                            "type": "string",
                            "enum": [
                              "CHASSIS",
                              "WINDSHIELD",
                              "NO_DAMAGE"
                            ],
                            "example": "WINDSHIELD"
                          },
                          "tyre_damaged": {
                            "description": "Tyre damaged information.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "tyre"
                                ],
                                "properties": {
                                  "tyre": {
                                    "description": "All information about the tyre.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "required": [
                                          "position"
                                        ],
                                        "properties": {
                                          "position": {
                                            "description": "Position of the damaged tyre on the truck or the trailer.\nThe list of values to use is:\n- 1:  Tractor - Front axle - right 1\n- 2:  Tractor - Front axle - right 2\n- 3:  Tractor - Rear axle - right outer 1\n- 4:  Tractor - Rear axle - right inner 1\n- 5:  Tractor - Rear axle - right outer 2\n- 6:  Tractor - Rear axle - right inner 2\n- 7:  Trailer - Front axle - right outer 1\n- 8:  Trailer - Front axle - right inner 1\n- 9:  Trailer - Front axle - right outer 2\n- 10: Trailer - Front axle - right inner 2\n- 11: Trailer - Rear axle - right outer 1\n- 12: Trailer - Rear axle - right inner 1\n- 13: Trailer - Rear axle - right outer 2\n- 14: Trailer - Rear axle - right inner 2\n- 15: Trailer - Rear axle - right outer 3\n- 16: Trailer - Rear axle - right inner 3\n- 17: Tractor - Front axle - left 1\n- 18: Tractor - Front axle - left 2\n- 19: Tractor - Rear axle - left inner 1\n- 20: Tractor - Rear axle - left outer 1\n- 21: Tractor - Rear axle - left inner 2\n- 22: Tractor - Rear axle - left outer 2\n- 23: Trailer - Front axle - left inner 1\n- 24: Trailer - Front axle - left outer 1\n- 25: Trailer - Front axle - left inner 2\n- 26: Trailer - Front axle - left outer 2\n- 27: Trailer - Rear axle - left inner 1\n- 28: Trailer - Rear axle - left outer 1\n- 29: Trailer - Rear axle - left inner 2\n- 30: Trailer - Rear axle - left outer 2\n- 31: Trailer - Rear axle - left inner 3\n- 32: Trailer - Rear axle - left outer 3\n",
                                            "type": "integer",
                                            "minimum": 1,
                                            "maximum": 32,
                                            "example": 4
                                          },
                                          "brand": {
                                            "description": "Brand of the tyre.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Michelin"
                                          },
                                          "model": {
                                            "description": "Model of the tyre.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Michelin Line Energy"
                                          },
                                          "size": {
                                            "description": "Size of the tyre.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "315/80 R 22.5"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "is_tyre_repairable": {
                                    "description": "Indicate if the tyre is repairable.",
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "is_a_new_rim_required": {
                                    "description": "Indicate if a new rim is required.",
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "is_a_spare_tyre_available": {
                                    "description": "Indicate if there a spare tyre on spot.",
                                    "type": "boolean",
                                    "example": false
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "current_location": {
                    "description": "Current vehicle location when the incident happened.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "address": {
                            "description": "Location address.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "4 Hans Avenue",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "OX12 7DB",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "Wantage",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "England"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "GB",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Subdivision.",
                                    "type": "string",
                                    "example": "Oxon",
                                    "maxLength": 100
                                  }
                                },
                                "required": [
                                  "street_address"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Current vehicle GPS location.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "place_type": {
                            "description": "Place type where the vehicle is parked.",
                            "type": "string",
                            "enum": [
                              "BASEMENT",
                              "HIGHWAY",
                              "MULTISTOREY_PARK",
                              "OTHER"
                            ],
                            "example": "BASEMENT"
                          },
                          "has_a_height_restriction": {
                            "description": "Indicates if there is a height restriction on vehicle location.",
                            "type": "boolean",
                            "example": false
                          },
                          "additional_information": {
                            "description": "Additional information about vehicle location.",
                            "type": "string",
                            "maxLength": 2000
                          }
                        },
                        "required": [
                          "address",
                          "coordinates",
                          "place_type"
                        ]
                      }
                    ]
                  },
                  "customer": {
                    "description": "Customer information.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "first_name": {
                            "description": "First name.",
                            "type": "string",
                            "example": "Doe",
                            "maxLength": 100
                          },
                          "last_name": {
                            "description": "Last name.",
                            "type": "string",
                            "example": "john",
                            "maxLength": 100
                          },
                          "contact_phone": {
                            "description": "Customer phone number.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix of the phone number.",
                                    "type": "string",
                                    "example": "+44",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number of the contact (any).",
                                    "type": "string",
                                    "example": "123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "is_policy_holder": {
                            "description": "Indicates if the customer is a policy holder.",
                            "type": "boolean",
                            "example": true
                          },
                          "is_on_site": {
                            "description": "Indicates if the customer is on site.",
                            "type": "boolean",
                            "example": false
                          }
                        },
                        "required": [
                          "contact_phone"
                        ]
                      }
                    ]
                  },
                  "driver": {
                    "description": "Driver information.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "first_name": {
                            "description": "First name.",
                            "type": "string",
                            "example": "Doe",
                            "maxLength": 100
                          },
                          "last_name": {
                            "description": "Last name.",
                            "type": "string",
                            "example": "john",
                            "maxLength": 100
                          },
                          "contact_phone": {
                            "description": "Customer phone number.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix of the phone number.",
                                    "type": "string",
                                    "example": "+44",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number of the contact (any).",
                                    "type": "string",
                                    "example": "123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "contact_phone"
                        ]
                      }
                    ]
                  },
                  "policy_holder": {
                    "type": "object",
                    "description": "Policy holder summary.",
                    "additionalProperties": false,
                    "properties": {
                      "address_postal_code": {
                        "description": "Address postal code of the policy holder.",
                        "type": "string",
                        "example": "75011",
                        "maxLength": 20
                      }
                    }
                  },
                  "service_appointment": {
                    "description": "Service operation appointment.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "is_scheduled": {
                            "description": "Indicates if an appointment is scheduled.",
                            "type": "boolean",
                            "example": true
                          },
                          "scheduled_at": {
                            "description": "Date and time of appointment if it's scheduled - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-05-02T10:59:00Z"
                          }
                        },
                        "required": [
                          "is_scheduled"
                        ]
                      }
                    ]
                  },
                  "special_requirement": {
                    "description": "Customer special requirement.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "I'm on a wheelchair"
                  }
                },
                "required": [
                  "vehicle",
                  "customer"
                ]
              }
            }
          },
          "description": "Case information.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Case created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Case creation response.",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "case_id"
                  ],
                  "properties": {
                    "case_id": {
                      "description": "Case unique identifier.",
                      "type": "string",
                      "maxLength": 150,
                      "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
                    },
                    "created_at": {
                      "description": "Creation datetime of the case.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2020-10-25T12:21:26Z"
                    },
                    "services": {
                      "description": "Services of the case.",
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 50,
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "service_id",
                              "service_code"
                            ],
                            "properties": {
                              "service_id": {
                                "description": "Service identifier.",
                                "type": "string",
                                "maxLength": 50,
                                "example": "5000D000005gRJtQAM"
                              },
                              "service_code": {
                                "description": "The code of the service.\nThe possible value are :\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                                "type": "string",
                                "enum": [
                                  "TOWING",
                                  "REPAIR_ON_SPOT",
                                  "LIFTING_CRANE",
                                  "DELIVERY",
                                  "STORAGE",
                                  "REPATRIATION"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Case created and has been accepted for processing, but the processing has not been totally completed.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Case creation response.",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "case_id"
                  ],
                  "properties": {
                    "case_id": {
                      "description": "Case unique identifier.",
                      "type": "string",
                      "maxLength": 150,
                      "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
                    },
                    "created_at": {
                      "description": "Creation datetime of the case.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2020-10-25T12:21:26Z"
                    },
                    "services": {
                      "description": "Services of the case.",
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 50,
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "service_id",
                              "service_code"
                            ],
                            "properties": {
                              "service_id": {
                                "description": "Service identifier.",
                                "type": "string",
                                "maxLength": 50,
                                "example": "5000D000005gRJtQAM"
                              },
                              "service_code": {
                                "description": "The code of the service.\nThe possible value are :\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                                "type": "string",
                                "enum": [
                                  "TOWING",
                                  "REPAIR_ON_SPOT",
                                  "LIFTING_CRANE",
                                  "DELIVERY",
                                  "STORAGE",
                                  "REPATRIATION"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}": {
      "get": {
        "summary": "Retrieves case.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case detail",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Case creation response.",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "case_id"
                  ],
                  "properties": {
                    "case_id": {
                      "description": "Case unique identifier.",
                      "type": "string",
                      "maxLength": 150,
                      "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
                    },
                    "created_at": {
                      "description": "Creation datetime of the case.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2020-10-25T12:21:26Z"
                    },
                    "next_appointment": {
                      "description": "Next appointment period planned with the customer.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "from": {
                              "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                              "type": "string",
                              "format": "date-time",
                              "example": "2019-03-22T10:59:00Z"
                            },
                            "to": {
                              "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "required": [
                            "from"
                          ]
                        }
                      ],
                      "required": [
                        "to"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.read_only"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      },
      "patch": {
        "summary": "Updates partially the case.",
        "description": "Cf. summary.\n",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          },
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "current_location"
                ],
                "properties": {
                  "current_location": {
                    "description": "Current vehicle location.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "coordinates"
                        ],
                        "properties": {
                          "coordinates": {
                            "description": "Current vehicle GPS location.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the case details.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Case updates sent successfully (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/assignments": {
      "get": {
        "summary": "Gets assignments status.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "description": "Assignment.",
                    "properties": {
                      "assignment_id": {
                        "description": "Assignment identifier.",
                        "type": "string",
                        "maxLength": 50
                      },
                      "status": {
                        "description": "Assignment status",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "description": "Status code.",
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "ACCEPTED",
                                  "REFUSED",
                                  "STARTED",
                                  "COMPLETED",
                                  "CLOSED"
                                ]
                              },
                              "description": {
                                "description": "Status description.",
                                "type": "string",
                                "maxLength": 255
                              }
                            },
                            "required": [
                              "code"
                            ]
                          }
                        ]
                      },
                      "tracking_reference": {
                        "description": "Reference usefull to retrieve tracking information on the case (provider location, estimated time of arrival, ...).",
                        "type": "string",
                        "maxLength": 50,
                        "example": "HquoDPmMEjyG-jnxkWbnbg"
                      }
                    },
                    "required": [
                      "assignment_id",
                      "status"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.read_only"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/cancel": {
      "post": {
        "summary": "Cancels a case.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "reason"
                    ],
                    "properties": {
                      "reason": {
                        "description": "Cancellation reason.\n\n  - CUSTOMER_NOT_FOUND: Customer was not found or not reachable;\n  - CUSTOMER_REFUSES_SERVICE: Customer refuses to receive the services proposed;\n  - CUSTOMER_REFUSES_TOWING: Customer refuses to have their vehicle towed to the authorized workshop;\n  - CUSTOMER_REFUSES_TO_PAY: Customer refuses to pay the service;\n  - VEHICLE_REPAIRED_DURING_TOW: Vehicle was repaired during the towing process.\n",
                        "type": "string",
                        "enum": [
                          "CUSTOMER_NOT_FOUND",
                          "CUSTOMER_REFUSES_SERVICE",
                          "CUSTOMER_REFUSES_TOWING",
                          "CUSTOMER_REFUSES_TO_PAY",
                          "VEHICLE_REPAIRED_DURING_TOW"
                        ]
                      },
                      "description": {
                        "description": "Description of the cancellation reason.\n",
                        "type": "string",
                        "maxLength": 2000
                      }
                    }
                  },
                  {
                    "required": [
                      "reason",
                      "description"
                    ],
                    "properties": {
                      "reason": {
                        "description": "Cancellation reason.\n\n  - OTHER: Any other reason not listed above.\n",
                        "type": "string",
                        "enum": [
                          "OTHER"
                        ]
                      },
                      "description": {
                        "description": "Description of the cancellation reason.\n",
                        "type": "string",
                        "maxLength": 2000
                      }
                    }
                  }
                ]
              }
            }
          },
          "description": "Content of the case cancellation details.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Case cancelled successfully (No content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/communications": {
      "post": {
        "summary": "Send a message regarding the case.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "description"
                ],
                "properties": {
                  "description": {
                    "description": "Content of the message.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "We can not find the customer, we will wait for extra 5 minutes."
                  }
                }
              }
            }
          },
          "description": "Message information.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Message created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "communication_id"
                  ],
                  "properties": {
                    "communication_id": {
                      "description": "Communication identifier.",
                      "type": "string",
                      "maxLength": 150,
                      "example": "442e8def-9d5c-4b61-99c4-02ddfa766bfa"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/notification_requests": {
      "post": {
        "summary": "Creates a new request for notifications.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_reference": {
                    "description": "The reference of the device on which the customer wants to receive notifications.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "AX1144552225501"
                  }
                },
                "required": [
                  "device_reference"
                ]
              }
            }
          },
          "description": "Case information.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Request accepted (No content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.notificationrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.notificationrequests.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/policies": {
      "get": {
        "summary": "Retrieve the policies linked to the case.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "policy_id": {
                        "description": "Identifier of the policy.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "string"
                      },
                      "policy_information": {
                        "description": "Policy Contract.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "package": {
                                "description": "Product and eventual options",
                                "allOf": [
                                  {
                                    "description": "Package product and eventual options.",
                                    "type": "object",
                                    "properties": {
                                      "product_id": {
                                        "description": "Reference of the terms and conditions.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 255,
                                        "example": "string"
                                      }
                                    },
                                    "required": [
                                      "product_id"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "package"
                            ]
                          }
                        ]
                      },
                      "policy_holder": {
                        "description": "Entity holder of the policy.",
                        "allOf": [
                          {
                            "description": "Representation of the policy holder.",
                            "type": "object",
                            "properties": {
                              "address": {
                                "description": "Address of the policy holder.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address of the policy holder.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "123 Some Street Name"
                                      },
                                      "postal_code": {
                                        "description": "Postal code of the policy holder.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "75001"
                                      },
                                      "locality": {
                                        "description": "Locality.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "PARIS"
                                      },
                                      "country": {
                                        "description": "Country.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      },
                                      "state": {
                                        "description": "State.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "string"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    },
                    "required": [
                      "policy_id"
                    ]
                  },
                  "maxItems": 5
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.policies.read_only"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/services": {
      "get": {
        "summary": "Retrieves case services.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "description": "Services of the case.",
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "service_id",
                          "service_code",
                          "is_scheduled_service",
                          "created_at"
                        ],
                        "properties": {
                          "service_id": {
                            "description": "Service identifier.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "5000D000005gRJtQAM"
                          },
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are:\n- EXPERT: Expert to confirm initial incident diagnosis and overall situation\n",
                            "type": "string",
                            "enum": [
                              "EXPERT"
                            ]
                          },
                          "created_at": {
                            "description": "Creation datetime of the service.\n\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-10-25T12:21:26Z"
                          },
                          "status": {
                            "allOf": [
                              {
                                "description": "Code of the status, it can be:\n- COMPLETED: The service is completed.\n- CREATED: The service is created.\n- ONGOING: The service is ongoing.\n",
                                "type": "string",
                                "enum": [
                                  "COMPLETED",
                                  "CREATED",
                                  "ONGOING"
                                ],
                                "example": "ONGOING"
                              }
                            ]
                          },
                          "is_scheduled_service": {
                            "description": "Indicates that the service provided has been scheduled for a particular time, given a request from the client or the garage availability.",
                            "type": "boolean",
                            "example": false
                          },
                          "appointment_period": {
                            "description": "The period during which the expert will perform the assessment.\n\nN.B. This property is required when `is_scheduled_service` is equal to `true`.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "from": {
                                    "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2019-03-22T10:59:00Z"
                                  },
                                  "to": {
                                    "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time"
                                  }
                                },
                                "required": [
                                  "from"
                                ]
                              }
                            ],
                            "required": [
                              "to"
                            ]
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "service_id",
                          "service_code",
                          "created_at"
                        ],
                        "properties": {
                          "service_id": {
                            "description": "Service identifier.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "5000D000005gRJtQAM"
                          },
                          "service_code": {
                            "description": "The code of the service.\n\nThe possible value are:\n\n- ACCOMMODATION: Provide the customer with accommodation for nights\n\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n\n- LIFTING_CRANE: Lift the vehicle\n\n- RENTAL: Provide the customer(s) with one or several replacement vehicle(s)\n\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n\n- TAXI: Provide the customer(s) one or several taxi(s) for a given trip\n\n- TRAVEL_TICKET_BOAT: Book boat ticket(s) for the customer\n\n- TRAVEL_TICKET_PLANE: Book plane ticket(s) for the customer\n\n- TRAVEL_TICKET_TRAIN: Book train ticket(s) for the customer\n",
                            "type": "string",
                            "enum": [
                              "ACCOMMODATION",
                              "DELIVERY",
                              "LIFTING_CRANE",
                              "RENTAL",
                              "REPAIR_ON_SPOT",
                              "TAXI",
                              "TRAVEL_TICKET_BOAT",
                              "TRAVEL_TICKET_PLANE",
                              "TRAVEL_TICKET_TRAIN"
                            ]
                          },
                          "created_at": {
                            "description": "Creation datetime of the service.\n\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-10-25T12:21:26Z"
                          },
                          "status": {
                            "allOf": [
                              {
                                "description": "Code of the status, it can be:\n- COMPLETED: The service is completed.\n- CREATED: The service is created.\n- ONGOING: The service is ongoing.\n",
                                "type": "string",
                                "enum": [
                                  "COMPLETED",
                                  "CREATED",
                                  "ONGOING"
                                ],
                                "example": "ONGOING"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "description": "Information related to the different kind of towing.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "service_id",
                          "service_code",
                          "destination",
                          "created_at"
                        ],
                        "properties": {
                          "service_id": {
                            "description": "Service identifier.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "5000D000005gRJtQAM"
                          },
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are:\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n- STORAGE: Put the vehicle in a secure location\n- TOWING: Tow the vehicle from one place to another place\n",
                            "type": "string",
                            "enum": [
                              "REPATRIATION",
                              "STORAGE",
                              "TOWING"
                            ]
                          },
                          "created_at": {
                            "description": "Creation datetime of the service.\n\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-10-25T12:21:26Z"
                          },
                          "status": {
                            "allOf": [
                              {
                                "description": "Code of the status, it can be:\n- COMPLETED: The service is completed.\n- CREATED: The service is created.\n- ONGOING: The service is ongoing.\n",
                                "type": "string",
                                "enum": [
                                  "COMPLETED",
                                  "CREATED",
                                  "ONGOING"
                                ],
                                "example": "ONGOING"
                              }
                            ]
                          },
                          "destination": {
                            "description": "Information about destination.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of destination garage.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Towing & Cie"
                                  },
                                  "address": {
                                    "description": "Address of destination garage.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "example": "4 Hans Avenue",
                                            "maxLength": 255
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "example": "OX12 7DB",
                                            "maxLength": 20
                                          },
                                          "locality": {
                                            "description": "Locality.",
                                            "type": "string",
                                            "example": "Wantage",
                                            "maxLength": 100
                                          },
                                          "state": {
                                            "description": "Label of the state.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "England"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "GB",
                                            "minLength": 2,
                                            "maxLength": 2
                                          },
                                          "subdivision": {
                                            "description": "Subdivision.",
                                            "type": "string",
                                            "example": "Oxon",
                                            "maxLength": 100
                                          }
                                        },
                                        "required": [
                                          "street_address"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.read_only"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      },
      "post": {
        "summary": "Creates a service.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the requested service.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "destination",
                      "pickup_location"
                    ],
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "service_code"
                        ],
                        "properties": {
                          "service_code": {
                            "description": "Type of the requested service, it can be:\n- RENTAL: Provide the customer(s) with one or several replacement vehicle(s)\n- TAXI: Provide the customer(s) one or several taxi(s) for a given trip.\n",
                            "type": "string",
                            "enum": [
                              "RENTAL",
                              "TAXI"
                            ]
                          },
                          "questions_and_answers": {
                            "description": "Information related to the question and answers provided by the reporter.",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "question_id",
                                "question_text",
                                "priority",
                                "question_type"
                              ],
                              "properties": {
                                "question_id": {
                                  "description": "Identifier of the question.",
                                  "type": "string",
                                  "maxLength": 150
                                },
                                "question_text": {
                                  "description": "The text of the question.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "question_type": {
                                  "description": "The question type.",
                                  "type": "string",
                                  "enum": [
                                    "BOOLEAN",
                                    "DATE",
                                    "DATE_TIME",
                                    "DISTANCE",
                                    "ENUM",
                                    "LOCATION",
                                    "MONETARY_AMOUNT",
                                    "NUMBER",
                                    "STRING",
                                    "WEIGHT"
                                  ]
                                },
                                "priority": {
                                  "description": "The priority of the question, the lower the higher.\nN.B. 0 means that the question has no priority.\n",
                                  "type": "integer"
                                },
                                "enumeration_answers": {
                                  "description": "List of the answers.\nRequired when `question_type` is equal to `ENUM`.\n",
                                  "type": "array",
                                  "minItems": 1,
                                  "maxItems": 20,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "answer_text": {
                                        "description": "The text of the answer to be displayed to the user.",
                                        "type": "string",
                                        "maxLength": 100
                                      },
                                      "answer_id": {
                                        "description": "Identifier of the answer.",
                                        "type": "string",
                                        "maxLength": 150
                                      },
                                      "is_selected": {
                                        "description": "Indicates if the answer was selected by the reporter:\n- true: the answer was selected by the reporter;\n- false: the answer wasn't selected by the reporter.\n",
                                        "type": "boolean",
                                        "default": false
                                      }
                                    },
                                    "required": [
                                      "answer_text",
                                      "answer_id"
                                    ]
                                  }
                                },
                                "answered_text": {
                                  "description": "Text of the answer.\nRequired when `question_type` is equal to `STRING` or `LOCATION`.\n",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "answered_amount": {
                                  "description": "Answered monitary amount.\nRequired when `question_type` is equal to `MONETARY_AMOUNT`.\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "answered_distance": {
                                  "description": "Answered distance.\nRequired when `question_type` is equal to `DISTANCE`.\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Measured value.",
                                          "type": "number",
                                          "example": 50
                                        },
                                        "unit": {
                                          "description": "Unit of the measured code. Available values:\n- \\[MI_I]: Mile;\n- KM: Kilometer.\n",
                                          "type": "string",
                                          "enum": [
                                            "[MI_I]",
                                            "KM"
                                          ],
                                          "example": "KM"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "unit"
                                      ]
                                    }
                                  ]
                                },
                                "answered_boolean": {
                                  "description": "Answered boolean.\nRequired when `question_type` is equal to `BOOLEAN`.\n",
                                  "type": "boolean"
                                },
                                "answered_weight": {
                                  "description": "Answered weight.\nRequired when `question_type` is equal to `WEIGHT`.\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "description": "Measured weight.",
                                          "type": "number",
                                          "example": 1250
                                        },
                                        "unit": {
                                          "description": "Unit of the measure code. Available values:\n- KG: Kilograms;\n- \\[LB_AV]: Pound;\n- \\[STONE_AV]: Stone.\n",
                                          "type": "string",
                                          "format": "Unified Code for Units of Measure (UCUM) in case insensitive.",
                                          "enum": [
                                            "KG",
                                            "[LB_AV]",
                                            "[STONE_AV]"
                                          ],
                                          "example": "KG"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "unit"
                                      ]
                                    }
                                  ]
                                },
                                "answered_number": {
                                  "description": "Answered number.\nRequired when `question_type` is equal to `NUMBER`.\n",
                                  "type": "number"
                                },
                                "answered_date": {
                                  "description": "Answered date.\nISO 8601 format (YYYY-MM-DD).\nRequired when `question_type` is equal to `DATE`.\n",
                                  "type": "string",
                                  "format": "date"
                                },
                                "answered_date_time": {
                                  "description": "Answered date-time.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\nRequired when `question_type` is equal to `DATE_TIME`.\n",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "properties": {
                          "destination": {
                            "description": "Destination where the customer should arrived.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "Address.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "example": "4 Hans Avenue",
                                            "maxLength": 255
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "example": "OX12 7DB",
                                            "maxLength": 20
                                          },
                                          "locality": {
                                            "description": "Locality.",
                                            "type": "string",
                                            "example": "Wantage",
                                            "maxLength": 100
                                          },
                                          "state": {
                                            "description": "Label of the state.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "England"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "GB",
                                            "minLength": 2,
                                            "maxLength": 2
                                          },
                                          "subdivision": {
                                            "description": "Subdivision.",
                                            "type": "string",
                                            "example": "Oxon",
                                            "maxLength": 100
                                          }
                                        },
                                        "required": [
                                          "street_address"
                                        ]
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "GPS coordinates of the depot.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "pickup_location": {
                            "description": "Location where the client should be picked up.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "Address.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "example": "4 Hans Avenue",
                                            "maxLength": 255
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "example": "OX12 7DB",
                                            "maxLength": 20
                                          },
                                          "locality": {
                                            "description": "Locality.",
                                            "type": "string",
                                            "example": "Wantage",
                                            "maxLength": 100
                                          },
                                          "state": {
                                            "description": "Label of the state.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "England"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "GB",
                                            "minLength": 2,
                                            "maxLength": 2
                                          },
                                          "subdivision": {
                                            "description": "Subdivision.",
                                            "type": "string",
                                            "example": "Oxon",
                                            "maxLength": 100
                                          }
                                        },
                                        "required": [
                                          "street_address"
                                        ]
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "GPS coordinates of the depot.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "RENTAL": "#/components/schemas/TaxiOrRentalService",
                    "TAXI": "#/components/schemas/TaxiOrRentalService"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "service_id"
                  ],
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_id": {
                          "description": "Unique service identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "5000D000005gRJtQAM"
                        }
                      }
                    },
                    {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "destination",
                            "pickup_location"
                          ],
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "service_code"
                              ],
                              "properties": {
                                "service_code": {
                                  "description": "Type of the requested service, it can be:\n- RENTAL: Provide the customer(s) with one or several replacement vehicle(s)\n- TAXI: Provide the customer(s) one or several taxi(s) for a given trip.\n",
                                  "type": "string",
                                  "enum": [
                                    "RENTAL",
                                    "TAXI"
                                  ]
                                },
                                "questions_and_answers": {
                                  "description": "Information related to the question and answers provided by the reporter.",
                                  "type": "array",
                                  "minItems": 1,
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "question_id",
                                      "question_text",
                                      "priority",
                                      "question_type"
                                    ],
                                    "properties": {
                                      "question_id": {
                                        "description": "Identifier of the question.",
                                        "type": "string",
                                        "maxLength": 150
                                      },
                                      "question_text": {
                                        "description": "The text of the question.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "question_type": {
                                        "description": "The question type.",
                                        "type": "string",
                                        "enum": [
                                          "BOOLEAN",
                                          "DATE",
                                          "DATE_TIME",
                                          "DISTANCE",
                                          "ENUM",
                                          "LOCATION",
                                          "MONETARY_AMOUNT",
                                          "NUMBER",
                                          "STRING",
                                          "WEIGHT"
                                        ]
                                      },
                                      "priority": {
                                        "description": "The priority of the question, the lower the higher.\nN.B. 0 means that the question has no priority.\n",
                                        "type": "integer"
                                      },
                                      "enumeration_answers": {
                                        "description": "List of the answers.\nRequired when `question_type` is equal to `ENUM`.\n",
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 20,
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "answer_text": {
                                              "description": "The text of the answer to be displayed to the user.",
                                              "type": "string",
                                              "maxLength": 100
                                            },
                                            "answer_id": {
                                              "description": "Identifier of the answer.",
                                              "type": "string",
                                              "maxLength": 150
                                            },
                                            "is_selected": {
                                              "description": "Indicates if the answer was selected by the reporter:\n- true: the answer was selected by the reporter;\n- false: the answer wasn't selected by the reporter.\n",
                                              "type": "boolean",
                                              "default": false
                                            }
                                          },
                                          "required": [
                                            "answer_text",
                                            "answer_id"
                                          ]
                                        }
                                      },
                                      "answered_text": {
                                        "description": "Text of the answer.\nRequired when `question_type` is equal to `STRING` or `LOCATION`.\n",
                                        "type": "string",
                                        "maxLength": 2000
                                      },
                                      "answered_amount": {
                                        "description": "Answered monitary amount.\nRequired when `question_type` is equal to `MONETARY_AMOUNT`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "value": {
                                                "description": "Amount, numeric, with 2 or 3 decimals.",
                                                "type": "number",
                                                "example": 199.99
                                              },
                                              "currency": {
                                                "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                "type": "string",
                                                "minLength": 3,
                                                "maxLength": 3,
                                                "example": "EUR"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "currency"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_distance": {
                                        "description": "Answered distance.\nRequired when `question_type` is equal to `DISTANCE`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "value": {
                                                "description": "Measured value.",
                                                "type": "number",
                                                "example": 50
                                              },
                                              "unit": {
                                                "description": "Unit of the measured code. Available values:\n- \\[MI_I]: Mile;\n- KM: Kilometer.\n",
                                                "type": "string",
                                                "enum": [
                                                  "[MI_I]",
                                                  "KM"
                                                ],
                                                "example": "KM"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "unit"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_boolean": {
                                        "description": "Answered boolean.\nRequired when `question_type` is equal to `BOOLEAN`.\n",
                                        "type": "boolean"
                                      },
                                      "answered_weight": {
                                        "description": "Answered weight.\nRequired when `question_type` is equal to `WEIGHT`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "value": {
                                                "description": "Measured weight.",
                                                "type": "number",
                                                "example": 1250
                                              },
                                              "unit": {
                                                "description": "Unit of the measure code. Available values:\n- KG: Kilograms;\n- \\[LB_AV]: Pound;\n- \\[STONE_AV]: Stone.\n",
                                                "type": "string",
                                                "format": "Unified Code for Units of Measure (UCUM) in case insensitive.",
                                                "enum": [
                                                  "KG",
                                                  "[LB_AV]",
                                                  "[STONE_AV]"
                                                ],
                                                "example": "KG"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "unit"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_number": {
                                        "description": "Answered number.\nRequired when `question_type` is equal to `NUMBER`.\n",
                                        "type": "number"
                                      },
                                      "answered_date": {
                                        "description": "Answered date.\nISO 8601 format (YYYY-MM-DD).\nRequired when `question_type` is equal to `DATE`.\n",
                                        "type": "string",
                                        "format": "date"
                                      },
                                      "answered_date_time": {
                                        "description": "Answered date-time.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\nRequired when `question_type` is equal to `DATE_TIME`.\n",
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "destination": {
                                  "description": "Destination where the customer should arrived.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "description": "Address.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "street_address": {
                                                  "description": "Street address.",
                                                  "type": "string",
                                                  "example": "4 Hans Avenue",
                                                  "maxLength": 255
                                                },
                                                "postal_code": {
                                                  "description": "Postal code or zip code.",
                                                  "type": "string",
                                                  "example": "OX12 7DB",
                                                  "maxLength": 20
                                                },
                                                "locality": {
                                                  "description": "Locality.",
                                                  "type": "string",
                                                  "example": "Wantage",
                                                  "maxLength": 100
                                                },
                                                "state": {
                                                  "description": "Label of the state.",
                                                  "type": "string",
                                                  "maxLength": 100,
                                                  "example": "England"
                                                },
                                                "country": {
                                                  "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                  "type": "string",
                                                  "example": "GB",
                                                  "minLength": 2,
                                                  "maxLength": 2
                                                },
                                                "subdivision": {
                                                  "description": "Subdivision.",
                                                  "type": "string",
                                                  "example": "Oxon",
                                                  "maxLength": 100
                                                }
                                              },
                                              "required": [
                                                "street_address"
                                              ]
                                            }
                                          ]
                                        },
                                        "coordinates": {
                                          "description": "GPS coordinates of the depot.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "longitude": {
                                                  "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 2.3488
                                                },
                                                "latitude": {
                                                  "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 48.85341
                                                }
                                              },
                                              "required": [
                                                "longitude",
                                                "latitude"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "pickup_location": {
                                  "description": "Location where the client should be picked up.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "description": "Address.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "street_address": {
                                                  "description": "Street address.",
                                                  "type": "string",
                                                  "example": "4 Hans Avenue",
                                                  "maxLength": 255
                                                },
                                                "postal_code": {
                                                  "description": "Postal code or zip code.",
                                                  "type": "string",
                                                  "example": "OX12 7DB",
                                                  "maxLength": 20
                                                },
                                                "locality": {
                                                  "description": "Locality.",
                                                  "type": "string",
                                                  "example": "Wantage",
                                                  "maxLength": 100
                                                },
                                                "state": {
                                                  "description": "Label of the state.",
                                                  "type": "string",
                                                  "maxLength": 100,
                                                  "example": "England"
                                                },
                                                "country": {
                                                  "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                  "type": "string",
                                                  "example": "GB",
                                                  "minLength": 2,
                                                  "maxLength": 2
                                                },
                                                "subdivision": {
                                                  "description": "Subdivision.",
                                                  "type": "string",
                                                  "example": "Oxon",
                                                  "maxLength": 100
                                                }
                                              },
                                              "required": [
                                                "street_address"
                                              ]
                                            }
                                          ]
                                        },
                                        "coordinates": {
                                          "description": "GPS coordinates of the depot.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "longitude": {
                                                  "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 2.3488
                                                },
                                                "latitude": {
                                                  "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 48.85341
                                                }
                                              },
                                              "required": [
                                                "longitude",
                                                "latitude"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                          "RENTAL": "#/components/schemas/TaxiOrRentalService",
                          "TAXI": "#/components/schemas/TaxiOrRentalService"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Service created and has been accepted for processing, but the processing has not been totally completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "service_id"
                  ],
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_id": {
                          "description": "Unique service identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "5000D000005gRJtQAM"
                        }
                      }
                    },
                    {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "destination",
                            "pickup_location"
                          ],
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "service_code"
                              ],
                              "properties": {
                                "service_code": {
                                  "description": "Type of the requested service, it can be:\n- RENTAL: Provide the customer(s) with one or several replacement vehicle(s)\n- TAXI: Provide the customer(s) one or several taxi(s) for a given trip.\n",
                                  "type": "string",
                                  "enum": [
                                    "RENTAL",
                                    "TAXI"
                                  ]
                                },
                                "questions_and_answers": {
                                  "description": "Information related to the question and answers provided by the reporter.",
                                  "type": "array",
                                  "minItems": 1,
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "question_id",
                                      "question_text",
                                      "priority",
                                      "question_type"
                                    ],
                                    "properties": {
                                      "question_id": {
                                        "description": "Identifier of the question.",
                                        "type": "string",
                                        "maxLength": 150
                                      },
                                      "question_text": {
                                        "description": "The text of the question.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "question_type": {
                                        "description": "The question type.",
                                        "type": "string",
                                        "enum": [
                                          "BOOLEAN",
                                          "DATE",
                                          "DATE_TIME",
                                          "DISTANCE",
                                          "ENUM",
                                          "LOCATION",
                                          "MONETARY_AMOUNT",
                                          "NUMBER",
                                          "STRING",
                                          "WEIGHT"
                                        ]
                                      },
                                      "priority": {
                                        "description": "The priority of the question, the lower the higher.\nN.B. 0 means that the question has no priority.\n",
                                        "type": "integer"
                                      },
                                      "enumeration_answers": {
                                        "description": "List of the answers.\nRequired when `question_type` is equal to `ENUM`.\n",
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 20,
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "answer_text": {
                                              "description": "The text of the answer to be displayed to the user.",
                                              "type": "string",
                                              "maxLength": 100
                                            },
                                            "answer_id": {
                                              "description": "Identifier of the answer.",
                                              "type": "string",
                                              "maxLength": 150
                                            },
                                            "is_selected": {
                                              "description": "Indicates if the answer was selected by the reporter:\n- true: the answer was selected by the reporter;\n- false: the answer wasn't selected by the reporter.\n",
                                              "type": "boolean",
                                              "default": false
                                            }
                                          },
                                          "required": [
                                            "answer_text",
                                            "answer_id"
                                          ]
                                        }
                                      },
                                      "answered_text": {
                                        "description": "Text of the answer.\nRequired when `question_type` is equal to `STRING` or `LOCATION`.\n",
                                        "type": "string",
                                        "maxLength": 2000
                                      },
                                      "answered_amount": {
                                        "description": "Answered monitary amount.\nRequired when `question_type` is equal to `MONETARY_AMOUNT`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "value": {
                                                "description": "Amount, numeric, with 2 or 3 decimals.",
                                                "type": "number",
                                                "example": 199.99
                                              },
                                              "currency": {
                                                "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                "type": "string",
                                                "minLength": 3,
                                                "maxLength": 3,
                                                "example": "EUR"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "currency"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_distance": {
                                        "description": "Answered distance.\nRequired when `question_type` is equal to `DISTANCE`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "value": {
                                                "description": "Measured value.",
                                                "type": "number",
                                                "example": 50
                                              },
                                              "unit": {
                                                "description": "Unit of the measured code. Available values:\n- \\[MI_I]: Mile;\n- KM: Kilometer.\n",
                                                "type": "string",
                                                "enum": [
                                                  "[MI_I]",
                                                  "KM"
                                                ],
                                                "example": "KM"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "unit"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_boolean": {
                                        "description": "Answered boolean.\nRequired when `question_type` is equal to `BOOLEAN`.\n",
                                        "type": "boolean"
                                      },
                                      "answered_weight": {
                                        "description": "Answered weight.\nRequired when `question_type` is equal to `WEIGHT`.\n",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "value": {
                                                "description": "Measured weight.",
                                                "type": "number",
                                                "example": 1250
                                              },
                                              "unit": {
                                                "description": "Unit of the measure code. Available values:\n- KG: Kilograms;\n- \\[LB_AV]: Pound;\n- \\[STONE_AV]: Stone.\n",
                                                "type": "string",
                                                "format": "Unified Code for Units of Measure (UCUM) in case insensitive.",
                                                "enum": [
                                                  "KG",
                                                  "[LB_AV]",
                                                  "[STONE_AV]"
                                                ],
                                                "example": "KG"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "unit"
                                            ]
                                          }
                                        ]
                                      },
                                      "answered_number": {
                                        "description": "Answered number.\nRequired when `question_type` is equal to `NUMBER`.\n",
                                        "type": "number"
                                      },
                                      "answered_date": {
                                        "description": "Answered date.\nISO 8601 format (YYYY-MM-DD).\nRequired when `question_type` is equal to `DATE`.\n",
                                        "type": "string",
                                        "format": "date"
                                      },
                                      "answered_date_time": {
                                        "description": "Answered date-time.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\nRequired when `question_type` is equal to `DATE_TIME`.\n",
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "destination": {
                                  "description": "Destination where the customer should arrived.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "description": "Address.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "street_address": {
                                                  "description": "Street address.",
                                                  "type": "string",
                                                  "example": "4 Hans Avenue",
                                                  "maxLength": 255
                                                },
                                                "postal_code": {
                                                  "description": "Postal code or zip code.",
                                                  "type": "string",
                                                  "example": "OX12 7DB",
                                                  "maxLength": 20
                                                },
                                                "locality": {
                                                  "description": "Locality.",
                                                  "type": "string",
                                                  "example": "Wantage",
                                                  "maxLength": 100
                                                },
                                                "state": {
                                                  "description": "Label of the state.",
                                                  "type": "string",
                                                  "maxLength": 100,
                                                  "example": "England"
                                                },
                                                "country": {
                                                  "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                  "type": "string",
                                                  "example": "GB",
                                                  "minLength": 2,
                                                  "maxLength": 2
                                                },
                                                "subdivision": {
                                                  "description": "Subdivision.",
                                                  "type": "string",
                                                  "example": "Oxon",
                                                  "maxLength": 100
                                                }
                                              },
                                              "required": [
                                                "street_address"
                                              ]
                                            }
                                          ]
                                        },
                                        "coordinates": {
                                          "description": "GPS coordinates of the depot.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "longitude": {
                                                  "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 2.3488
                                                },
                                                "latitude": {
                                                  "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 48.85341
                                                }
                                              },
                                              "required": [
                                                "longitude",
                                                "latitude"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "pickup_location": {
                                  "description": "Location where the client should be picked up.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "description": "Address.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "street_address": {
                                                  "description": "Street address.",
                                                  "type": "string",
                                                  "example": "4 Hans Avenue",
                                                  "maxLength": 255
                                                },
                                                "postal_code": {
                                                  "description": "Postal code or zip code.",
                                                  "type": "string",
                                                  "example": "OX12 7DB",
                                                  "maxLength": 20
                                                },
                                                "locality": {
                                                  "description": "Locality.",
                                                  "type": "string",
                                                  "example": "Wantage",
                                                  "maxLength": 100
                                                },
                                                "state": {
                                                  "description": "Label of the state.",
                                                  "type": "string",
                                                  "maxLength": 100,
                                                  "example": "England"
                                                },
                                                "country": {
                                                  "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                  "type": "string",
                                                  "example": "GB",
                                                  "minLength": 2,
                                                  "maxLength": 2
                                                },
                                                "subdivision": {
                                                  "description": "Subdivision.",
                                                  "type": "string",
                                                  "example": "Oxon",
                                                  "maxLength": 100
                                                }
                                              },
                                              "required": [
                                                "street_address"
                                              ]
                                            }
                                          ]
                                        },
                                        "coordinates": {
                                          "description": "GPS coordinates of the depot.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "longitude": {
                                                  "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 2.3488
                                                },
                                                "latitude": {
                                                  "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                                  "type": "number",
                                                  "example": 48.85341
                                                }
                                              },
                                              "required": [
                                                "longitude",
                                                "latitude"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                          "RENTAL": "#/components/schemas/TaxiOrRentalService",
                          "TAXI": "#/components/schemas/TaxiOrRentalService"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/services/{service_id}": {
      "patch": {
        "summary": "Updates service.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          },
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "service_id",
            "description": "Service identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "5000D000005gRJtQAM"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "is_scheduled_service": {
                    "description": "Indicates that the service provided has been scheduled for a particular time, given a request from the client or the garage availability.",
                    "type": "boolean",
                    "example": false
                  },
                  "destination": {
                    "description": "The service destination address.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The service destination name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Garage du Morvan"
                          },
                          "workshop_id": {
                            "description": "Identifier of the Workshop.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "GS0010470"
                          },
                          "category": {
                            "description": "The service destination category.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "CUSTOMER_CHOICE"
                          },
                          "address": {
                            "description": "The service destination address.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "4 Hans Avenue",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "OX12 7DB",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "Wantage",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "England"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "GB",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Subdivision.",
                                    "type": "string",
                                    "example": "Oxon",
                                    "maxLength": 100
                                  }
                                },
                                "required": [
                                  "street_address"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "GPS coordinates of the service destination.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "depot": {
                    "description": "Storage location of the vehicle.",
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name",
                          "address"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the depot location.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Garage du Morvan"
                          },
                          "address": {
                            "description": "Depot address.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "4 Hans Avenue",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "OX12 7DB",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "Wantage",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "England"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "GB",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Subdivision.",
                                    "type": "string",
                                    "example": "Oxon",
                                    "maxLength": 100
                                  }
                                },
                                "required": [
                                  "street_address"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "GPS coordinates of the depot.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "phones": {
                            "description": "Phone numbers of the depot.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "object",
                              "required": [
                                "number",
                                "phone_type"
                              ],
                              "properties": {
                                "international_prefix": {
                                  "description": "Prefix to be added to be called from abroad.",
                                  "type": "string",
                                  "maxLength": 5,
                                  "example": "+44"
                                },
                                "number": {
                                  "description": "Phone number.",
                                  "type": "string",
                                  "maxLength": 20,
                                  "example": "123456789"
                                },
                                "phone_type": {
                                  "description": "Type of number.",
                                  "type": "string",
                                  "enum": [
                                    "MOBILE",
                                    "LANDLINE"
                                  ]
                                }
                              }
                            }
                          },
                          "fax_number": {
                            "description": "Fax number of the depot.",
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "number"
                                ],
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix to be added to be called from abroad.",
                                    "type": "string",
                                    "maxLength": 5,
                                    "example": "+44"
                                  },
                                  "number": {
                                    "description": "Phone number.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "123456789"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Service destination information.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted  (No content).\nThe update has been accepted for processing, but the processing has not been totally completed.\nA callback from the advisor may be required to fully complete the process.\n"
          },
          "204": {
            "description": "Service updates sent successfully (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/services/{service_id}/change_requests": {
      "post": {
        "summary": "Requests for a service change.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "service_id",
            "description": "Service identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "5000D000005gRJtQAM"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "service_code"
                ],
                "properties": {
                  "service_code": {
                    "description": "The code of the service requested.\n\nThe possible value are:\n\n- TOWING: Tow the vehicle from one place to another place\n",
                    "type": "string",
                    "enum": [
                      "TOWING"
                    ]
                  }
                }
              }
            }
          },
          "description": "Service Change request information.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Change request accepted (No content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/services/{service_id}/communications": {
      "post": {
        "summary": "Send communication related to a service for customers knowledge.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "service_id",
            "description": "Service identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "5000D000005gRJtQAM"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "required": [
                      "actual_time_arrival"
                    ],
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "communication_code"
                        ],
                        "properties": {
                          "communication_code": {
                            "type": "string",
                            "maxLength": 100
                          },
                          "description": {
                            "description": "Any complementary information about the service.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "Traffic jams on the highway."
                          }
                        }
                      },
                      {
                        "properties": {
                          "communication_code": {
                            "description": "Communication code for the Actual time arrival (ATA) on the incident location.\n",
                            "type": "string",
                            "enum": [
                              "ACTUAL_TIME_ARRIVAL"
                            ]
                          },
                          "actual_time_arrival": {
                            "description": "Actual time of arrival (ATA) on site of the provider.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-12-24T12:08:00Z"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "required": [
                      "estimated_time_arrival"
                    ],
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "communication_code"
                        ],
                        "properties": {
                          "communication_code": {
                            "type": "string",
                            "maxLength": 100
                          },
                          "description": {
                            "description": "Any complementary information about the service.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "Traffic jams on the highway."
                          }
                        }
                      },
                      {
                        "properties": {
                          "communication_code": {
                            "description": "Communication code for the Estimated time of arrival (ETA) on the incident location.\n",
                            "type": "string",
                            "enum": [
                              "ESTIMATED_TIME_ARRIVAL"
                            ]
                          },
                          "estimated_time_arrival": {
                            "description": "Estimated time of arrival (ETA) commmunicated by the provider.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-12-24T12:00:00Z"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "required": [
                      "estimated_time_of_completion"
                    ],
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "communication_code"
                        ],
                        "properties": {
                          "communication_code": {
                            "type": "string",
                            "maxLength": 100
                          },
                          "description": {
                            "description": "Any complementary information about the service.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "Traffic jams on the highway."
                          }
                        }
                      },
                      {
                        "properties": {
                          "communication_code": {
                            "description": "Communication code for the Estimated time of work completion (ETC).\n",
                            "type": "string",
                            "enum": [
                              "ESTIMATED_COMPLETION_TIME"
                            ]
                          },
                          "estimated_time_of_completion": {
                            "description": "Estimation of the povider about the service completion (ETC).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-12-24T14:23:00Z"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "required": [
                      "work_completed_at",
                      "completion_code"
                    ],
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "communication_code"
                        ],
                        "properties": {
                          "communication_code": {
                            "type": "string",
                            "maxLength": 100
                          },
                          "description": {
                            "description": "Any complementary information about the service.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "Traffic jams on the highway."
                          }
                        }
                      },
                      {
                        "properties": {
                          "communication_code": {
                            "description": "Communication code for the Actual time at which the intervention is completed (ATC).\n",
                            "type": "string",
                            "enum": [
                              "WORK_COMPLETED"
                            ]
                          },
                          "work_completed_at": {
                            "description": "Date-time the provider completed its intervention on site (ATC).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-12-24T14:21:00Z"
                          },
                          "completion_code": {
                            "description": "Code providing information on how the case was resolved.\n\n  - CANCELLED: Service was not completed;\n  - SUCCESSFUL: Vehicle has been towed or repaired succesfully;\n  - TEMPORARY: Temporary repair that enables the customer to go immediately to the nearest authorized workshop;\n  - TOWING_REQUIRED: Provider (or the agent) realized that the vehicle must be towed to nearest authorized workshop;\n  - PERMANENT: Repair carried out roadside without need to visit any authorized workshop.\n",
                            "type": "string",
                            "enum": [
                              "CANCELLED",
                              "SUCCESSFUL",
                              "TEMPORARY",
                              "TOWING_REQUIRED",
                              "PERMANENT"
                            ],
                            "example": "SUCCESSFUL"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "description": "Service Communication information.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Communication sent successfully (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.write"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/assistance/motor/vexp/cases/{case_id}/services/{service_id}/destination_qualifiers": {
      "get": {
        "summary": "Retrieves qualifiers for service destination.",
        "description": "Cf. summary.\n",
        "parameters": [
          {
            "name": "case_id",
            "description": "Unique case identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "105e4708-e1fa-4c4e-ae96-ef4607eb5c75"
            }
          },
          {
            "name": "service_id",
            "description": "Service identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150,
              "example": "5000D000005gRJtQAM"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "example": "42bbd332fa8f48e7bb382165f257a579"
            }
          },
          {
            "name": "x-environment",
            "in": "header",
            "description": "This is the list of available environments for this endpoint in staging:\n- dev --> Development environment with very frequent builds. Not guaranteed to be stable or to work.\n- test --> UAT / User Acceptance Environment.\n",
            "schema": {
              "type": "string",
              "enum": [
                "dev",
                "test"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of destination qualifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 20,
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "category",
                      "priority"
                    ],
                    "properties": {
                      "category": {
                        "description": "Destination category.",
                        "type": "string",
                        "maxLength": 50,
                        "example": "CUSTOMER_CHOICE"
                      },
                      "priority": {
                        "description": "The priority of the information. Lower number mean more priority. 0 mean no priority.\n",
                        "type": "integer",
                        "example": 0
                      },
                      "maximum_distance": {
                        "description": "Maximum Distance limit from incident location to destination.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "value": {
                                "description": "Measured value.",
                                "type": "number",
                                "example": 50
                              },
                              "unit": {
                                "description": "Unit of the measured code. Available values:\n- \\[MI_I]: Mile;\n- KM: Kilometer.\n",
                                "type": "string",
                                "enum": [
                                  "[MI_I]",
                                  "KM"
                                ],
                                "example": "KM"
                              }
                            },
                            "required": [
                              "value",
                              "unit"
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.destination_qualifiers.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.assistance.motor.cases.services.destination_qualifiers.read_only"
            ]
          }
        ],
        "tags": [
          "assistance"
        ]
      }
    },
    "/information/motor/vexp/workshops": {
      "get": {
        "summary": "Search workshops.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).\n",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "location_latitude",
            "description": "The latitude of the incident location. Latitude in WGS84 format, expressed in Decimal Degree.\nRequired if _location_longitude_ is set.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": -1.4213609640918092
            }
          },
          {
            "name": "location_longitude",
            "description": "The longitude of the incident location. Longitude in WGS84 format, expressed in Decimal Degree.\nRequired if _location_latitude_ is set.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": 51.59403759114712
            }
          },
          {
            "name": "search_radius",
            "description": "Defines the distance (in kilometers) from the location within which to return workshop results.\n\n_location_longitude_ and _location_latitude_ are required when used.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "maximum": 1000,
              "example": 10
            }
          },
          {
            "name": "name",
            "description": "Name of the workshop.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "workshop_id",
            "description": "Workshop identifier.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "postal_code",
            "description": "Postal code of the workshop's research area.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 20,
              "example": "75000"
            }
          },
          {
            "name": "locality",
            "description": "City of the workshop's research area.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100,
              "example": "Paris"
            }
          },
          {
            "name": "country",
            "description": "Country of the workshop's research area.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2,
              "minLength": 2,
              "example": "FR"
            }
          },
          {
            "name": "vehicle_brand",
            "description": "Brand of the vehicle.\n",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 2,
              "example": "Mercedes-Benz"
            }
          },
          {
            "name": "vehicle_type",
            "description": "Type of the vehicle.\nAvailable values:\n- BUS_COACHES: Busses\n- CAR: Passenger car\n- TRUCK: Trucks\n- VAN: Vans\n",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BUS_COACHES",
                "CAR",
                "TRUCK",
                "VAN"
              ],
              "example": "CAR"
            }
          },
          {
            "name": "start_index",
            "description": "A number that specifies the starting point when paging through the results list.\nThe default value is 0.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_results",
            "description": "The maximum number of results when paging through the results list.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workshops information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "workshop_id",
                      "name",
                      "address",
                      "phones",
                      "supported_vehicles"
                    ],
                    "properties": {
                      "workshop_id": {
                        "description": "Workshop unique identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "GS0044091"
                      },
                      "name": {
                        "description": "Name of the workshop.",
                        "type": "string",
                        "maxLength": 100
                      },
                      "phones": {
                        "description": "Phone numbers of the workshop.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "number",
                            "phone_type"
                          ],
                          "properties": {
                            "international_prefix": {
                              "description": "Prefix to be added to be called from abroad.",
                              "type": "string",
                              "maxLength": 5,
                              "example": "+44"
                            },
                            "number": {
                              "description": "Phone number.",
                              "type": "string",
                              "maxLength": 20,
                              "example": "123456789"
                            },
                            "phone_type": {
                              "description": "Type of number.",
                              "type": "string",
                              "enum": [
                                "MOBILE",
                                "LANDLINE"
                              ]
                            }
                          }
                        }
                      },
                      "fax_number": {
                        "description": "Fax number of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "number"
                            ],
                            "properties": {
                              "international_prefix": {
                                "description": "Prefix to be added to be called from abroad.",
                                "type": "string",
                                "maxLength": 5,
                                "example": "+44"
                              },
                              "number": {
                                "description": "Phone number.",
                                "type": "string",
                                "maxLength": 20,
                                "example": "123456789"
                              }
                            }
                          }
                        ]
                      },
                      "email": {
                        "description": "Email of the workshop.\n",
                        "allOf": [
                          {
                            "type": "string",
                            "format": "email",
                            "example": "jonathan.doe@mail.com"
                          }
                        ]
                      },
                      "address": {
                        "description": "Address of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "street_address": {
                                "description": "Street address.",
                                "type": "string",
                                "example": "4 Hans Avenue",
                                "maxLength": 255
                              },
                              "postal_code": {
                                "description": "Postal code or zip code.",
                                "type": "string",
                                "example": "OX12 7DB",
                                "maxLength": 20
                              },
                              "locality": {
                                "description": "Locality.",
                                "type": "string",
                                "example": "Wantage",
                                "maxLength": 100
                              },
                              "state": {
                                "description": "Label of the state.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "England"
                              },
                              "country": {
                                "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                "type": "string",
                                "example": "GB",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "subdivision": {
                                "description": "Subdivision.",
                                "type": "string",
                                "example": "Oxon",
                                "maxLength": 100
                              }
                            },
                            "required": [
                              "street_address"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "description": "GPS coordinates of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "longitude": {
                                "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                "type": "number",
                                "example": 2.3488
                              },
                              "latitude": {
                                "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                "type": "number",
                                "example": 48.85341
                              }
                            },
                            "required": [
                              "longitude",
                              "latitude"
                            ]
                          }
                        ]
                      },
                      "distance": {
                        "description": "Distance from the specified location.",
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "value",
                              "unit"
                            ],
                            "properties": {
                              "value": {
                                "description": "Measured mileage",
                                "type": "number",
                                "example": 213
                              },
                              "unit": {
                                "description": "Unit of the measure code from Unified Code for Units of Measure (UCUM) in case insensitive.\nAvailable values:\n- KM: kilometer.\n",
                                "type": "string",
                                "enum": [
                                  "KM"
                                ],
                                "example": "KM"
                              }
                            }
                          }
                        ]
                      },
                      "supported_vehicles": {
                        "description": "List of the vehicle supported by the workshop.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "required": [
                            "brand",
                            "vehicle_types"
                          ],
                          "properties": {
                            "brand": {
                              "description": "Brand of the vehicle.",
                              "type": "string",
                              "maxLength": 20,
                              "example": "Mercedes Benz"
                            },
                            "vehicle_types": {
                              "description": "Types of the supported vehicle.\nAvailable values:\n- BUS_COACHES: Busses\n- CAR: Passenger car\n- TRUCK: Trucks\n- VAN: Vans\n",
                              "type": "array",
                              "maxItems": 5,
                              "items": {
                                "type": "string",
                                "uniqueItems": true,
                                "enum": [
                                  "BUS_COACHES",
                                  "CAR",
                                  "TRUCK",
                                  "VAN"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial list of workshops.",
            "headers": {
              "Content-Range": {
                "description": "Range of the returned resources formated as <range-start>-<range-end>/<size>, with:\n- range-start: the index of the first resource in the list;\n- range-end: the index of the last resource in the list;\n- size: the total number of available resources (or '*' if unknown).\nexample: 200-300/67589\n",
                "schema": {
                  "type": "string",
                  "maxLength": 20
                }
              },
              "Accept-Ranges": {
                "description": "The base unit of the list items.\nexample: Workshop\n",
                "schema": {
                  "type": "string",
                  "maxLength": 20
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "workshop_id",
                      "name",
                      "address",
                      "phones",
                      "supported_vehicles"
                    ],
                    "properties": {
                      "workshop_id": {
                        "description": "Workshop unique identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "GS0044091"
                      },
                      "name": {
                        "description": "Name of the workshop.",
                        "type": "string",
                        "maxLength": 100
                      },
                      "phones": {
                        "description": "Phone numbers of the workshop.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "number",
                            "phone_type"
                          ],
                          "properties": {
                            "international_prefix": {
                              "description": "Prefix to be added to be called from abroad.",
                              "type": "string",
                              "maxLength": 5,
                              "example": "+44"
                            },
                            "number": {
                              "description": "Phone number.",
                              "type": "string",
                              "maxLength": 20,
                              "example": "123456789"
                            },
                            "phone_type": {
                              "description": "Type of number.",
                              "type": "string",
                              "enum": [
                                "MOBILE",
                                "LANDLINE"
                              ]
                            }
                          }
                        }
                      },
                      "fax_number": {
                        "description": "Fax number of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "number"
                            ],
                            "properties": {
                              "international_prefix": {
                                "description": "Prefix to be added to be called from abroad.",
                                "type": "string",
                                "maxLength": 5,
                                "example": "+44"
                              },
                              "number": {
                                "description": "Phone number.",
                                "type": "string",
                                "maxLength": 20,
                                "example": "123456789"
                              }
                            }
                          }
                        ]
                      },
                      "email": {
                        "description": "Email of the workshop.\n",
                        "allOf": [
                          {
                            "type": "string",
                            "format": "email",
                            "example": "jonathan.doe@mail.com"
                          }
                        ]
                      },
                      "address": {
                        "description": "Address of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "street_address": {
                                "description": "Street address.",
                                "type": "string",
                                "example": "4 Hans Avenue",
                                "maxLength": 255
                              },
                              "postal_code": {
                                "description": "Postal code or zip code.",
                                "type": "string",
                                "example": "OX12 7DB",
                                "maxLength": 20
                              },
                              "locality": {
                                "description": "Locality.",
                                "type": "string",
                                "example": "Wantage",
                                "maxLength": 100
                              },
                              "state": {
                                "description": "Label of the state.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "England"
                              },
                              "country": {
                                "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                "type": "string",
                                "example": "GB",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "subdivision": {
                                "description": "Subdivision.",
                                "type": "string",
                                "example": "Oxon",
                                "maxLength": 100
                              }
                            },
                            "required": [
                              "street_address"
                            ]
                          }
                        ]
                      },
                      "coordinates": {
                        "description": "GPS coordinates of the workshop.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "longitude": {
                                "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                "type": "number",
                                "example": 2.3488
                              },
                              "latitude": {
                                "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                "type": "number",
                                "example": 48.85341
                              }
                            },
                            "required": [
                              "longitude",
                              "latitude"
                            ]
                          }
                        ]
                      },
                      "distance": {
                        "description": "Distance from the specified location.",
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "value",
                              "unit"
                            ],
                            "properties": {
                              "value": {
                                "description": "Measured mileage",
                                "type": "number",
                                "example": 213
                              },
                              "unit": {
                                "description": "Unit of the measure code from Unified Code for Units of Measure (UCUM) in case insensitive.\nAvailable values:\n- KM: kilometer.\n",
                                "type": "string",
                                "enum": [
                                  "KM"
                                ],
                                "example": "KM"
                              }
                            }
                          }
                        ]
                      },
                      "supported_vehicles": {
                        "description": "List of the vehicle supported by the workshop.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "required": [
                            "brand",
                            "vehicle_types"
                          ],
                          "properties": {
                            "brand": {
                              "description": "Brand of the vehicle.",
                              "type": "string",
                              "maxLength": 20,
                              "example": "Mercedes Benz"
                            },
                            "vehicle_types": {
                              "description": "Types of the supported vehicle.\nAvailable values:\n- BUS_COACHES: Busses\n- CAR: Passenger car\n- TRUCK: Trucks\n- VAN: Vans\n",
                              "type": "array",
                              "maxItems": 5,
                              "items": {
                                "type": "string",
                                "uniqueItems": true,
                                "enum": [
                                  "BUS_COACHES",
                                  "CAR",
                                  "TRUCK",
                                  "VAN"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.information.motor.workshops.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.information.motor.workshops.read_only"
            ]
          }
        ],
        "tags": [
          "information"
        ]
      }
    },
    "/information/motor/vexp/workshops/{workshop_id}/opening_hours": {
      "get": {
        "summary": "Gets workshop opening hours.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "workshop_id",
            "description": "Workshop identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workshops opening hours information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 7,
                  "items": {
                    "description": "Workshop opening hours of the week.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "day_of_week",
                          "hour_periods"
                        ],
                        "properties": {
                          "day_of_week": {
                            "description": "The day of the week.",
                            "allOf": [
                              {
                                "description": "The days of a week.",
                                "type": "string",
                                "enum": [
                                  "MONDAY",
                                  "TUESDAY",
                                  "WEDNESDAY",
                                  "THURSDAY",
                                  "FRIDAY",
                                  "SATURDAY",
                                  "SUNDAY"
                                ]
                              }
                            ]
                          },
                          "hour_periods": {
                            "description": "The hours interval (without day) (ISO 8601). T22:00/T22:15 or T22:00/15, is the interval between 22h00 and 22h15.",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 5,
                            "items": {
                              "type": "string",
                              "maxLength": 13
                            },
                            "example": [
                              "T08:00/T12:30",
                              "T14:00/T19:15"
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.information.motor.workshops.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.information.motor.workshops.read_only"
            ]
          }
        ],
        "tags": [
          "information"
        ]
      }
    },
    "/information/vexp/motor/vehicles": {
      "get": {
        "summary": "Gets vehicles.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "registration_number",
            "description": "Vehicle registration number.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "name": "partner_reference",
            "description": "Partner reference.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 5,
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "description": "Vehicle unique identifier.",
                        "type": "string",
                        "maxLength": 150
                      },
                      "registration_number": {
                        "description": "Vehicle registration number.",
                        "type": "string",
                        "example": "AF45P1",
                        "maxLength": 20
                      },
                      "vehicle_type": {
                        "description": "Type of the vehicle.\nThe values are :\n- 3RD_WHEELER: Third wheeler,\n- AGRICULTURAL_TRUCK: Agricultural truck\n- BIKE: Bike\n- BUS_COACHES: Bus coaches, autocar\n- CAR: Car\n- MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n- MOTORCYCLE: Motorcycle\n- MINI_CAR: Mini car, mini bus\n- TRUCK: Truck\n- VAN: Van\n",
                        "type": "string",
                        "enum": [
                          "3RD_WHEELER",
                          "AGRICULTURAL_TRUCK",
                          "BIKE",
                          "BUS_COACHES",
                          "CAR",
                          "MOBILE_HOME_CAMPING_CAR",
                          "MOTORCYCLE",
                          "TRUCK",
                          "VAN"
                        ],
                        "example": "CAR"
                      },
                      "brand": {
                        "description": "Vehicle brand.",
                        "type": "string",
                        "example": "HYUNDAI",
                        "maxLength": 100
                      },
                      "model": {
                        "description": "Vehicle model.",
                        "type": "string",
                        "example": "TUCSON",
                        "maxLength": 100
                      },
                      "gearbox_type": {
                        "description": "The gearbox type of the vehicle\nThe possible values are:\n- AUTO: Automatic gearbox\n- MANUAL: Manual gearbox\n- SEMI_AUTO: Semi automatic gearbox\n- SPEED_VARIATOR: Speed variator\n- UNKNOWN: Unkown\n",
                        "type": "string",
                        "enum": [
                          "AUTO",
                          "MANUAL",
                          "SEMI_AUTO",
                          "SPEED_VARIATOR",
                          "UNKNOWN"
                        ],
                        "example": "AUTO"
                      },
                      "fuel_type": {
                        "description": "The fuel type of the vehicle.\nThe possible values are:\n- ALCOHOL_ETHANOL: Alcohol ethanol\n- BIO_DIESEL: Biologic Diesel\n- DIESEL: Diesel\n- ELECTRIC: Electricity\n- ELECTRIC_DIESEL: Electricity and diesel hybrid\n- ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n- GASOLINE: Gasoline\n- HYDROGEN: Hydrogen\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- UNKNOWN: Unknown\n",
                        "type": "string",
                        "example": "LIQUID_PETROL_GAS",
                        "enum": [
                          "ALCOHOL_ETHANOL",
                          "BIO_DIESEL",
                          "DIESEL",
                          "ELECTRIC",
                          "ELECTRIC_DIESEL",
                          "ELECTRIC_GASOLINE",
                          "GASOLINE",
                          "HYDROGEN",
                          "LIQUID_PETROL_GAS",
                          "NATURAL_GAS",
                          "UNKNOWN"
                        ]
                      },
                      "gross_weight": {
                        "description": "Gross weight of the vehicle.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "value": {
                                "description": "Measured weight.",
                                "type": "number",
                                "example": 1250
                              },
                              "unit": {
                                "description": "Unit of the measure code. Available values:\n- kg: Kilograms.\n",
                                "type": "string",
                                "format": "Unified Code for Units of Measure (UCUM) in case sensitive.",
                                "enum": [
                                  "kg"
                                ],
                                "example": "kg"
                              }
                            },
                            "required": [
                              "value",
                              "unit"
                            ]
                          }
                        ]
                      },
                      "has_valid_mot": {
                        "description": "Indicates if the vehicle has a valid [MOT](https://en.wikipedia.org/wiki/MOT_test) (Ministry of Transport) test.",
                        "type": "boolean",
                        "example": false
                      },
                      "has_valid_tax": {
                        "description": "Has valid tax.",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "required": [
                      "id",
                      "registration_number",
                      "brand"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.information.roadside.vehicles.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.information.roadside.vehicles.read_only"
            ]
          }
        ],
        "tags": [
          "information"
        ]
      }
    },
    "/insurance/travel/vexp/claims/{claim_id}/involved_contacts": {
      "get": {
        "summary": "Retrieves the list of contact involved in the claim.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n  - test --> UAT / User Acceptance Environment.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "claim_id",
            "description": "Claim identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the involved contact in the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "involved_contact_id": {
                        "description": "Identifier of the involved contact.",
                        "type": "string",
                        "example": "bb2df1d1-85b2-472f-b391-cce0062ea5bb",
                        "maxLength": 150
                      },
                      "type": {
                        "description": "Type of the involved contact it can be:\n- COMPANY: Legal person that can be a private or public organization.\n- INDIVIDUAL: Natural person that is a human being.\n",
                        "type": "string",
                        "enum": [
                          "COMPANY",
                          "INDIVIDUAL"
                        ]
                      },
                      "person": {
                        "description": "Information related to the person's identity.\nN.B. Required when `type` is equal to `INDIVIDUAL`.\n",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100
                              }
                            },
                            "required": [
                              "first_name",
                              "last_name"
                            ]
                          }
                        ]
                      },
                      "company": {
                        "description": "Information related to the company's identity.\nN.B. Required when `type` is equal to `COMPANY`.\n",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the company.",
                                "type": "string",
                                "maxLength": 100
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "involved_contact_id",
                      "type"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "demo_frend_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "dev_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_porsche_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_dkbcash_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_coverwise_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_curveuk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_fit2tripes_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_fit2tripit_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_monzouk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_puffinuk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          }
        ],
        "tags": [
          "insurance"
        ]
      },
      "post": {
        "summary": "Creates an involved contact to a claim.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n  - test --> UAT / User Acceptance Environment.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "claim_id",
            "description": "Claim identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "involved_contact_id": {
                    "description": "Identifier of the person.",
                    "type": "string",
                    "readOnly": true,
                    "example": "bb2df1d1-85b2-472f-b391-cce0062ea5bb",
                    "maxLength": 150
                  },
                  "type": {
                    "description": "Type of the involved contact it can be:\n- COMPANY: Legal person that can be a private or public organization.\n- INDIVIDUAL: Natural person that is a human being.\n",
                    "type": "string",
                    "enum": [
                      "INDIVIDUAL",
                      "COMPANY"
                    ]
                  },
                  "person": {
                    "description": "Information related to the person's identity.\nN.B. Required when `type` is equal to `INDIVIDUAL`.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "identity": {
                            "description": "Information related to the person's identity.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "title": {
                                    "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                    "type": "string",
                                    "enum": [
                                      "MR",
                                      "MS",
                                      "MISS",
                                      "DR",
                                      "PR"
                                    ],
                                    "minLength": 2,
                                    "maxLength": 4,
                                    "example": "MR"
                                  },
                                  "first_name": {
                                    "description": "First name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "middle_name": {
                                    "description": "Middle name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "last_name": {
                                    "description": "Last name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "birth_date": {
                                    "description": "Birth date.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "1990-10-25"
                                  },
                                  "gender": {
                                    "description": "Gender (Female or Male).",
                                    "type": "string",
                                    "enum": [
                                      "FM",
                                      "ML"
                                    ],
                                    "minLength": 2,
                                    "maxLength": 2,
                                    "example": "ML"
                                  },
                                  "nationalities": {
                                    "description": "List of nationalities.",
                                    "type": "array",
                                    "maxItems": 5,
                                    "items": {
                                      "description": "Nationality, ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 2,
                                      "minLength": 2
                                    }
                                  }
                                },
                                "required": [
                                  "first_name",
                                  "last_name"
                                ]
                              }
                            ]
                          },
                          "relationship": {
                            "description": "Relationship of the involved contact with the policy holder, it can be:\n- AUNT: The sister (or sister-in-law) of your mother/father;\n- BROTHER: A male sibling;\n- BROTHER_IN_LAW: The husband of your sister;\n- CLOSE_BUSINESS_ASSOCIATE: Someone who is closely connected to another person as a business partner;\n- COUSIN: The child of your aunt/uncle;\n- DAUGHTER: A female child;\n- DAUGHTER_IN_LAW: The wife of your son;\n- DOMESTIC_PARTNER: An unmarried couple of the same or opposite sex, not a long-term significant other, someone you live with or someone you share a child with.\n- EMPLOYEE: Someone who is paid to work for someone else  especially someone with a similar job or level of responsibility or in the same department;\n- FATHER: A male parent;\n- FATHER_IN_LAW: The father of your spouse;\n- FRIEND: A person who one knows well and likes a lot, but is not a member of one's family;\n- GRANDCHILD: The child of your children;\n- GRANDPARENT: The parent of your parent;\n- MOTHER: A female parent;\n- MOTHER_IN_LAW: The mother of your spouse;\n- NEPHEW: The male child of your brother/sister;\n- NIECE: The female child of your brother/sister;\n- OTHER: The personal non-kin relationship is not defined in the list;\n- SELF: Yourself;\n- SISTER: A female sibling;\n- SISTER_IN_LAW: The wife of your brother;\n- SON: A male child;\n- SON_IN_LAW: The husband of your daughter;\n- SPOUSE: A significant other in a legal marriage, civil union, or common-law marriage to and hold a valid marriage license with;\n- STEPBROTHER: The son of your stepmother or stepfather;\n- STEPDAUGHTER: The daughter of your (new) husband / wife (she is not your biological daughter);\n- STEPFATHER: The (new) husband of your mother but not your biological father;\n- STEPMOTHER: The (new) wife of your father but not your biological mother;\n- STEPSISTER: The daughter of your stepmother or stepfather;\n- STEPSON: The son of your (new) husband / wife (he is not your biological son);\n- TRAVELLING_COMPANION: a person with whom one is travelling;\n- UNCLE: The brother (or brother-in-law) of your mother/father;\n",
                            "type": "string",
                            "enum": [
                              "AUNT",
                              "BROTHER",
                              "BROTHER_IN_LAW",
                              "CLOSE_BUSINESS_ASSOCIATE",
                              "COUSIN",
                              "DAUGHTER",
                              "DAUGHTER_IN_LAW",
                              "DOMESTIC_PARTNER",
                              "EMPLOYEE",
                              "FATHER",
                              "FATHER_IN_LAW",
                              "FRIEND",
                              "GRANDCHILD",
                              "GRANDPARENT",
                              "MOTHER",
                              "MOTHER_IN_LAW",
                              "NEPHEW",
                              "NIECE",
                              "OTHER",
                              "SELF",
                              "SISTER",
                              "SISTER_IN_LAW",
                              "SON",
                              "SON_IN_LAW",
                              "SPOUSE",
                              "STEPBROTHER",
                              "STEPDAUGHTER",
                              "STEPFATHER",
                              "STEPMOTHER",
                              "STEPSISTER",
                              "STEPSON",
                              "TRAVELLING_COMPANION",
                              "UNCLE"
                            ]
                          },
                          "preferred_language": {
                            "description": "Language in which the natural person wished to be contacted.\nList of ISO 639-1 codes.\n",
                            "type": "string",
                            "enum": [
                              "da",
                              "de",
                              "es",
                              "en",
                              "fi",
                              "fr",
                              "it",
                              "no",
                              "nl",
                              "sv"
                            ]
                          },
                          "registrations": {
                            "description": "List of registration of the natural person.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "registration_type": {
                                  "description": "Type of person registration.",
                                  "type": "string",
                                  "enum": [
                                    "PASSPORT"
                                  ]
                                },
                                "value": {
                                  "description": "Value of the registration.",
                                  "type": "string",
                                  "maxLength": 20
                                },
                                "expiring_date": {
                                  "description": "Date at which the registration will or has expired.\nISO 8601 format (YYYY-MM-DD).\n",
                                  "type": "string",
                                  "format": "date",
                                  "example": "2020-05-11"
                                },
                                "issue_date": {
                                  "description": "Date at which the registration was issued.\nISO 8601 format (YYYY-MM-DD).\n",
                                  "type": "string",
                                  "format": "date",
                                  "example": "2012-08-03"
                                },
                                "issued_country": {
                                  "description": "Country that issued the registration.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                  "type": "string",
                                  "example": "FR",
                                  "minLength": 2,
                                  "maxLength": 2
                                }
                              },
                              "required": [
                                "value"
                              ]
                            }
                          },
                          "preferred_communication_channel": {
                            "description": "Communication channel on which the person preferred to be contacted.",
                            "type": "string",
                            "enum": [
                              "EMAIL",
                              "PHONE"
                            ]
                          },
                          "phone": {
                            "description": "Phone on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix to be added to be called from abroad.",
                                    "type": "string",
                                    "example": "+33",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number. Can be local or international.",
                                    "type": "string",
                                    "example": "0123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "email": {
                            "description": "Email on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                            "allOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "example": "jonathan.doe@mail.com"
                              }
                            ]
                          },
                          "address": {
                            "description": "Address of the natural person.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "123 Some Street Name",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "PARIS",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Area of the city.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "complete_address": {
                                    "description": "Complete address.",
                                    "type": "string",
                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                    "maxLength": 2000
                                  }
                                }
                              }
                            ]
                          },
                          "bank_account": {
                            "description": "Bank account of the natural person.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "bank": {
                                    "description": "Bank that holds the account.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Name of the bank.",
                                            "type": "string",
                                            "example": "Santander UK",
                                            "maxLength": 100
                                          },
                                          "address": {
                                            "description": "Address of the bank.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "street_address": {
                                                    "description": "Street address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name",
                                                    "maxLength": 255
                                                  },
                                                  "postal_code": {
                                                    "description": "Postal code or zip code.",
                                                    "type": "string",
                                                    "example": "75001",
                                                    "maxLength": 20
                                                  },
                                                  "locality": {
                                                    "description": "Locality.",
                                                    "type": "string",
                                                    "example": "PARIS",
                                                    "maxLength": 100
                                                  },
                                                  "country": {
                                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                    "type": "string",
                                                    "example": "FR",
                                                    "minLength": 2,
                                                    "maxLength": 2
                                                  },
                                                  "subdivision": {
                                                    "description": "Area of the city.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "state": {
                                                    "description": "Label of the state.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "complete_address": {
                                                    "description": "Complete address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                    "maxLength": 2000
                                                  }
                                                }
                                              }
                                            ],
                                            "required": [
                                              "complete_address"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    ]
                                  },
                                  "holder_name": {
                                    "description": "Name of the account holder as registered on the bank account.",
                                    "type": "string",
                                    "example": "Joe Doe",
                                    "maxLength": 100
                                  },
                                  "account_type": {
                                    "description": "Type of the bank account.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "1|2|3 Current Account"
                                  },
                                  "preferred_transfer_type": {
                                    "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                    "type": "string",
                                    "enum": [
                                      "ABA_RTN",
                                      "BSB",
                                      "CLABE",
                                      "IBAN",
                                      "IFSC",
                                      "NSC",
                                      "SWIFT_BIC"
                                    ],
                                    "example": "IBAN"
                                  },
                                  "account_number": {
                                    "description": "Value of the account number.",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "FR7630006000011234567890189"
                                  },
                                  "currency": {
                                    "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "example": "EUR",
                                    "maxLength": 3,
                                    "minLength": 3
                                  },
                                  "routing_number": {
                                    "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "12-34-56"
                                  },
                                  "bank_identification_number": {
                                    "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                    "type": "string",
                                    "maxLength": 11,
                                    "minLength": 8,
                                    "example": "AGRIFRPP"
                                  }
                                },
                                "required": [
                                  "bank",
                                  "account_number",
                                  "preferred_transfer_type"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "identity"
                        ]
                      }
                    ]
                  },
                  "company": {
                    "description": "Information related to the company's identity.\nN.B. Required when `type` is equal to `COMPANY`.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the company.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "preferred_language": {
                            "description": "Language in which the company wished to be contacted.\nList of ISO 639-1 codes.\n",
                            "type": "string",
                            "enum": [
                              "da",
                              "de",
                              "es",
                              "en",
                              "fi",
                              "fr",
                              "it",
                              "no",
                              "nl",
                              "sv"
                            ]
                          },
                          "address": {
                            "description": "Address of the company.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "123 Some Street Name",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "PARIS",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Area of the city.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "complete_address": {
                                    "description": "Complete address.",
                                    "type": "string",
                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                    "maxLength": 2000
                                  }
                                }
                              }
                            ],
                            "required": [
                              "locality",
                              "country"
                            ]
                          },
                          "preferred_communication_channel": {
                            "description": "Communication channel on which the company preferred to be contacted.",
                            "type": "string",
                            "enum": [
                              "EMAIL",
                              "PHONE"
                            ]
                          },
                          "phone": {
                            "description": "Phone on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix to be added to be called from abroad.",
                                    "type": "string",
                                    "example": "+33",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number. Can be local or international.",
                                    "type": "string",
                                    "example": "0123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "email": {
                            "description": "Email on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                            "allOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "example": "jonathan.doe@mail.com"
                              }
                            ]
                          },
                          "bank_account": {
                            "description": "Bank account of the company.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "bank": {
                                    "description": "Bank that holds the account.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Name of the bank.",
                                            "type": "string",
                                            "example": "Santander UK",
                                            "maxLength": 100
                                          },
                                          "address": {
                                            "description": "Address of the bank.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "street_address": {
                                                    "description": "Street address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name",
                                                    "maxLength": 255
                                                  },
                                                  "postal_code": {
                                                    "description": "Postal code or zip code.",
                                                    "type": "string",
                                                    "example": "75001",
                                                    "maxLength": 20
                                                  },
                                                  "locality": {
                                                    "description": "Locality.",
                                                    "type": "string",
                                                    "example": "PARIS",
                                                    "maxLength": 100
                                                  },
                                                  "country": {
                                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                    "type": "string",
                                                    "example": "FR",
                                                    "minLength": 2,
                                                    "maxLength": 2
                                                  },
                                                  "subdivision": {
                                                    "description": "Area of the city.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "state": {
                                                    "description": "Label of the state.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "complete_address": {
                                                    "description": "Complete address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                    "maxLength": 2000
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "holder_name": {
                                    "description": "Name of the account holder as registered on the bank account.",
                                    "type": "string",
                                    "example": "Joe Doe",
                                    "maxLength": 100
                                  },
                                  "account_type": {
                                    "description": "Type of the bank account.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "1|2|3 Current Account"
                                  },
                                  "preferred_transfer_type": {
                                    "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                    "type": "string",
                                    "enum": [
                                      "ABA_RTN",
                                      "BSB",
                                      "CLABE",
                                      "IBAN",
                                      "IFSC",
                                      "NSC",
                                      "SWIFT_BIC"
                                    ],
                                    "example": "IBAN"
                                  },
                                  "account_number": {
                                    "description": "Value of the account number.",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "FR7630006000011234567890189"
                                  },
                                  "currency": {
                                    "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "example": "EUR",
                                    "maxLength": 3,
                                    "minLength": 3
                                  },
                                  "routing_number": {
                                    "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "12-34-56"
                                  },
                                  "bank_identification_number": {
                                    "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                    "type": "string",
                                    "maxLength": 11,
                                    "minLength": 8,
                                    "example": "AGRIFRPP"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          },
          "description": "Involved contact information.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Involved contact information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "involved_contact_id": {
                      "description": "Identifier of the person.",
                      "type": "string",
                      "readOnly": true,
                      "example": "bb2df1d1-85b2-472f-b391-cce0062ea5bb",
                      "maxLength": 150
                    },
                    "type": {
                      "description": "Type of the involved contact it can be:\n- COMPANY: Legal person that can be a private or public organization.\n- INDIVIDUAL: Natural person that is a human being.\n",
                      "type": "string",
                      "enum": [
                        "INDIVIDUAL",
                        "COMPANY"
                      ]
                    },
                    "person": {
                      "description": "Information related to the person's identity.\nN.B. Required when `type` is equal to `INDIVIDUAL`.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "identity": {
                              "description": "Information related to the person's identity.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "minLength": 2,
                                      "maxLength": 4,
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date.\nISO 8601 format (YYYY-MM-DD).\n",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-10-25"
                                    },
                                    "gender": {
                                      "description": "Gender (Female or Male).",
                                      "type": "string",
                                      "enum": [
                                        "FM",
                                        "ML"
                                      ],
                                      "minLength": 2,
                                      "maxLength": 2,
                                      "example": "ML"
                                    },
                                    "nationalities": {
                                      "description": "List of nationalities.",
                                      "type": "array",
                                      "maxItems": 5,
                                      "items": {
                                        "description": "Nationality, ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "maxLength": 2,
                                        "minLength": 2
                                      }
                                    }
                                  },
                                  "required": [
                                    "first_name",
                                    "last_name"
                                  ]
                                }
                              ]
                            },
                            "relationship": {
                              "description": "Relationship of the involved contact with the policy holder, it can be:\n- AUNT: The sister (or sister-in-law) of your mother/father;\n- BROTHER: A male sibling;\n- BROTHER_IN_LAW: The husband of your sister;\n- CLOSE_BUSINESS_ASSOCIATE: Someone who is closely connected to another person as a business partner;\n- COUSIN: The child of your aunt/uncle;\n- DAUGHTER: A female child;\n- DAUGHTER_IN_LAW: The wife of your son;\n- DOMESTIC_PARTNER: An unmarried couple of the same or opposite sex, not a long-term significant other, someone you live with or someone you share a child with.\n- EMPLOYEE: Someone who is paid to work for someone else  especially someone with a similar job or level of responsibility or in the same department;\n- FATHER: A male parent;\n- FATHER_IN_LAW: The father of your spouse;\n- FRIEND: A person who one knows well and likes a lot, but is not a member of one's family;\n- GRANDCHILD: The child of your children;\n- GRANDPARENT: The parent of your parent;\n- MOTHER: A female parent;\n- MOTHER_IN_LAW: The mother of your spouse;\n- NEPHEW: The male child of your brother/sister;\n- NIECE: The female child of your brother/sister;\n- OTHER: The personal non-kin relationship is not defined in the list;\n- SELF: Yourself;\n- SISTER: A female sibling;\n- SISTER_IN_LAW: The wife of your brother;\n- SON: A male child;\n- SON_IN_LAW: The husband of your daughter;\n- SPOUSE: A significant other in a legal marriage, civil union, or common-law marriage to and hold a valid marriage license with;\n- STEPBROTHER: The son of your stepmother or stepfather;\n- STEPDAUGHTER: The daughter of your (new) husband / wife (she is not your biological daughter);\n- STEPFATHER: The (new) husband of your mother but not your biological father;\n- STEPMOTHER: The (new) wife of your father but not your biological mother;\n- STEPSISTER: The daughter of your stepmother or stepfather;\n- STEPSON: The son of your (new) husband / wife (he is not your biological son);\n- TRAVELLING_COMPANION: a person with whom one is travelling;\n- UNCLE: The brother (or brother-in-law) of your mother/father;\n",
                              "type": "string",
                              "enum": [
                                "AUNT",
                                "BROTHER",
                                "BROTHER_IN_LAW",
                                "CLOSE_BUSINESS_ASSOCIATE",
                                "COUSIN",
                                "DAUGHTER",
                                "DAUGHTER_IN_LAW",
                                "DOMESTIC_PARTNER",
                                "EMPLOYEE",
                                "FATHER",
                                "FATHER_IN_LAW",
                                "FRIEND",
                                "GRANDCHILD",
                                "GRANDPARENT",
                                "MOTHER",
                                "MOTHER_IN_LAW",
                                "NEPHEW",
                                "NIECE",
                                "OTHER",
                                "SELF",
                                "SISTER",
                                "SISTER_IN_LAW",
                                "SON",
                                "SON_IN_LAW",
                                "SPOUSE",
                                "STEPBROTHER",
                                "STEPDAUGHTER",
                                "STEPFATHER",
                                "STEPMOTHER",
                                "STEPSISTER",
                                "STEPSON",
                                "TRAVELLING_COMPANION",
                                "UNCLE"
                              ]
                            },
                            "preferred_language": {
                              "description": "Language in which the natural person wished to be contacted.\nList of ISO 639-1 codes.\n",
                              "type": "string",
                              "enum": [
                                "da",
                                "de",
                                "es",
                                "en",
                                "fi",
                                "fr",
                                "it",
                                "no",
                                "nl",
                                "sv"
                              ]
                            },
                            "registrations": {
                              "description": "List of registration of the natural person.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.",
                                    "type": "string",
                                    "enum": [
                                      "PASSPORT"
                                    ]
                                  },
                                  "value": {
                                    "description": "Value of the registration.",
                                    "type": "string",
                                    "maxLength": 20
                                  },
                                  "expiring_date": {
                                    "description": "Date at which the registration will or has expired.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "2020-05-11"
                                  },
                                  "issue_date": {
                                    "description": "Date at which the registration was issued.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "2012-08-03"
                                  },
                                  "issued_country": {
                                    "description": "Country that issued the registration.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            },
                            "preferred_communication_channel": {
                              "description": "Communication channel on which the person preferred to be contacted.",
                              "type": "string",
                              "enum": [
                                "EMAIL",
                                "PHONE"
                              ]
                            },
                            "phone": {
                              "description": "Phone on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "international_prefix": {
                                      "description": "Prefix to be added to be called from abroad.",
                                      "type": "string",
                                      "example": "+33",
                                      "maxLength": 5
                                    },
                                    "number": {
                                      "description": "Phone number. Can be local or international.",
                                      "type": "string",
                                      "example": "0123456789",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "number"
                                  ]
                                }
                              ]
                            },
                            "email": {
                              "description": "Email on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ]
                            },
                            "address": {
                              "description": "Address of the natural person.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "123 Some Street Name",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 20
                                    },
                                    "locality": {
                                      "description": "Locality.",
                                      "type": "string",
                                      "example": "PARIS",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "subdivision": {
                                      "description": "Area of the city.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "state": {
                                      "description": "Label of the state.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "complete_address": {
                                      "description": "Complete address.",
                                      "type": "string",
                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ]
                            },
                            "bank_account": {
                              "description": "Bank account of the natural person.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "bank": {
                                      "description": "Bank that holds the account.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "Name of the bank.",
                                              "type": "string",
                                              "example": "Santander UK",
                                              "maxLength": 100
                                            },
                                            "address": {
                                              "description": "Address of the bank.",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "street_address": {
                                                      "description": "Street address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name",
                                                      "maxLength": 255
                                                    },
                                                    "postal_code": {
                                                      "description": "Postal code or zip code.",
                                                      "type": "string",
                                                      "example": "75001",
                                                      "maxLength": 20
                                                    },
                                                    "locality": {
                                                      "description": "Locality.",
                                                      "type": "string",
                                                      "example": "PARIS",
                                                      "maxLength": 100
                                                    },
                                                    "country": {
                                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                      "type": "string",
                                                      "example": "FR",
                                                      "minLength": 2,
                                                      "maxLength": 2
                                                    },
                                                    "subdivision": {
                                                      "description": "Area of the city.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "state": {
                                                      "description": "Label of the state.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "complete_address": {
                                                      "description": "Complete address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                      "maxLength": 2000
                                                    }
                                                  }
                                                }
                                              ],
                                              "required": [
                                                "complete_address"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      ]
                                    },
                                    "holder_name": {
                                      "description": "Name of the account holder as registered on the bank account.",
                                      "type": "string",
                                      "example": "Joe Doe",
                                      "maxLength": 100
                                    },
                                    "account_type": {
                                      "description": "Type of the bank account.",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "1|2|3 Current Account"
                                    },
                                    "preferred_transfer_type": {
                                      "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                      "type": "string",
                                      "enum": [
                                        "ABA_RTN",
                                        "BSB",
                                        "CLABE",
                                        "IBAN",
                                        "IFSC",
                                        "NSC",
                                        "SWIFT_BIC"
                                      ],
                                      "example": "IBAN"
                                    },
                                    "account_number": {
                                      "description": "Value of the account number.",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "FR7630006000011234567890189"
                                    },
                                    "currency": {
                                      "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "example": "EUR",
                                      "maxLength": 3,
                                      "minLength": 3
                                    },
                                    "routing_number": {
                                      "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "12-34-56"
                                    },
                                    "bank_identification_number": {
                                      "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                      "type": "string",
                                      "maxLength": 11,
                                      "minLength": 8,
                                      "example": "AGRIFRPP"
                                    }
                                  },
                                  "required": [
                                    "bank",
                                    "account_number",
                                    "preferred_transfer_type"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "identity"
                          ]
                        }
                      ]
                    },
                    "company": {
                      "description": "Information related to the company's identity.\nN.B. Required when `type` is equal to `COMPANY`.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the company.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "preferred_language": {
                              "description": "Language in which the company wished to be contacted.\nList of ISO 639-1 codes.\n",
                              "type": "string",
                              "enum": [
                                "da",
                                "de",
                                "es",
                                "en",
                                "fi",
                                "fr",
                                "it",
                                "no",
                                "nl",
                                "sv"
                              ]
                            },
                            "address": {
                              "description": "Address of the company.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "123 Some Street Name",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 20
                                    },
                                    "locality": {
                                      "description": "Locality.",
                                      "type": "string",
                                      "example": "PARIS",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "subdivision": {
                                      "description": "Area of the city.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "state": {
                                      "description": "Label of the state.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "complete_address": {
                                      "description": "Complete address.",
                                      "type": "string",
                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "locality",
                                "country"
                              ]
                            },
                            "preferred_communication_channel": {
                              "description": "Communication channel on which the company preferred to be contacted.",
                              "type": "string",
                              "enum": [
                                "EMAIL",
                                "PHONE"
                              ]
                            },
                            "phone": {
                              "description": "Phone on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "international_prefix": {
                                      "description": "Prefix to be added to be called from abroad.",
                                      "type": "string",
                                      "example": "+33",
                                      "maxLength": 5
                                    },
                                    "number": {
                                      "description": "Phone number. Can be local or international.",
                                      "type": "string",
                                      "example": "0123456789",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "number"
                                  ]
                                }
                              ]
                            },
                            "email": {
                              "description": "Email on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ]
                            },
                            "bank_account": {
                              "description": "Bank account of the company.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "bank": {
                                      "description": "Bank that holds the account.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "Name of the bank.",
                                              "type": "string",
                                              "example": "Santander UK",
                                              "maxLength": 100
                                            },
                                            "address": {
                                              "description": "Address of the bank.",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "street_address": {
                                                      "description": "Street address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name",
                                                      "maxLength": 255
                                                    },
                                                    "postal_code": {
                                                      "description": "Postal code or zip code.",
                                                      "type": "string",
                                                      "example": "75001",
                                                      "maxLength": 20
                                                    },
                                                    "locality": {
                                                      "description": "Locality.",
                                                      "type": "string",
                                                      "example": "PARIS",
                                                      "maxLength": 100
                                                    },
                                                    "country": {
                                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                      "type": "string",
                                                      "example": "FR",
                                                      "minLength": 2,
                                                      "maxLength": 2
                                                    },
                                                    "subdivision": {
                                                      "description": "Area of the city.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "state": {
                                                      "description": "Label of the state.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "complete_address": {
                                                      "description": "Complete address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                      "maxLength": 2000
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "holder_name": {
                                      "description": "Name of the account holder as registered on the bank account.",
                                      "type": "string",
                                      "example": "Joe Doe",
                                      "maxLength": 100
                                    },
                                    "account_type": {
                                      "description": "Type of the bank account.",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "1|2|3 Current Account"
                                    },
                                    "preferred_transfer_type": {
                                      "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                      "type": "string",
                                      "enum": [
                                        "ABA_RTN",
                                        "BSB",
                                        "CLABE",
                                        "IBAN",
                                        "IFSC",
                                        "NSC",
                                        "SWIFT_BIC"
                                      ],
                                      "example": "IBAN"
                                    },
                                    "account_number": {
                                      "description": "Value of the account number.",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "FR7630006000011234567890189"
                                    },
                                    "currency": {
                                      "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "example": "EUR",
                                      "maxLength": 3,
                                      "minLength": 3
                                    },
                                    "routing_number": {
                                      "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "12-34-56"
                                    },
                                    "bank_identification_number": {
                                      "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                      "type": "string",
                                      "maxLength": 11,
                                      "minLength": 8,
                                      "example": "AGRIFRPP"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "demo_frend_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "dev_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_porsche_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_dkbcash_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coverwise_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_curveuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripes_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripit_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_monzouk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_puffinuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          }
        ],
        "tags": [
          "insurance"
        ]
      }
    },
    "/insurance/travel/vexp/claims/{claim_id}/involved_contacts/{involved_contact_id}": {
      "delete": {
        "summary": "Delete an involved contact.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n  - test --> UAT / User Acceptance Environment.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "claim_id",
            "description": "Claim identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "involved_contact_id",
            "description": "Identifier of the involved contact.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully done (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "demo_frend_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "dev_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_porsche_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_dkbcash_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coverwise_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_curveuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripes_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripit_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_monzouk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_puffinuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          }
        ],
        "tags": [
          "insurance"
        ]
      },
      "get": {
        "summary": "Retrieves the involved contact details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n  - test --> UAT / User Acceptance Environment.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "claim_id",
            "description": "Claim identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "involved_contact_id",
            "description": "Identifier of the involved contact.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve details on the involved contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "involved_contact_id": {
                      "description": "Identifier of the person.",
                      "type": "string",
                      "readOnly": true,
                      "example": "bb2df1d1-85b2-472f-b391-cce0062ea5bb",
                      "maxLength": 150
                    },
                    "type": {
                      "description": "Type of the involved contact it can be:\n- COMPANY: Legal person that can be a private or public organization.\n- INDIVIDUAL: Natural person that is a human being.\n",
                      "type": "string",
                      "enum": [
                        "INDIVIDUAL",
                        "COMPANY"
                      ]
                    },
                    "person": {
                      "description": "Information related to the person's identity.\nN.B. Required when `type` is equal to `INDIVIDUAL`.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "identity": {
                              "description": "Information related to the person's identity.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "minLength": 2,
                                      "maxLength": 4,
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date.\nISO 8601 format (YYYY-MM-DD).\n",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-10-25"
                                    },
                                    "gender": {
                                      "description": "Gender (Female or Male).",
                                      "type": "string",
                                      "enum": [
                                        "FM",
                                        "ML"
                                      ],
                                      "minLength": 2,
                                      "maxLength": 2,
                                      "example": "ML"
                                    },
                                    "nationalities": {
                                      "description": "List of nationalities.",
                                      "type": "array",
                                      "maxItems": 5,
                                      "items": {
                                        "description": "Nationality, ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "maxLength": 2,
                                        "minLength": 2
                                      }
                                    }
                                  },
                                  "required": [
                                    "first_name",
                                    "last_name"
                                  ]
                                }
                              ]
                            },
                            "relationship": {
                              "description": "Relationship of the involved contact with the policy holder, it can be:\n- AUNT: The sister (or sister-in-law) of your mother/father;\n- BROTHER: A male sibling;\n- BROTHER_IN_LAW: The husband of your sister;\n- CLOSE_BUSINESS_ASSOCIATE: Someone who is closely connected to another person as a business partner;\n- COUSIN: The child of your aunt/uncle;\n- DAUGHTER: A female child;\n- DAUGHTER_IN_LAW: The wife of your son;\n- DOMESTIC_PARTNER: An unmarried couple of the same or opposite sex, not a long-term significant other, someone you live with or someone you share a child with.\n- EMPLOYEE: Someone who is paid to work for someone else  especially someone with a similar job or level of responsibility or in the same department;\n- FATHER: A male parent;\n- FATHER_IN_LAW: The father of your spouse;\n- FRIEND: A person who one knows well and likes a lot, but is not a member of one's family;\n- GRANDCHILD: The child of your children;\n- GRANDPARENT: The parent of your parent;\n- MOTHER: A female parent;\n- MOTHER_IN_LAW: The mother of your spouse;\n- NEPHEW: The male child of your brother/sister;\n- NIECE: The female child of your brother/sister;\n- OTHER: The personal non-kin relationship is not defined in the list;\n- SELF: Yourself;\n- SISTER: A female sibling;\n- SISTER_IN_LAW: The wife of your brother;\n- SON: A male child;\n- SON_IN_LAW: The husband of your daughter;\n- SPOUSE: A significant other in a legal marriage, civil union, or common-law marriage to and hold a valid marriage license with;\n- STEPBROTHER: The son of your stepmother or stepfather;\n- STEPDAUGHTER: The daughter of your (new) husband / wife (she is not your biological daughter);\n- STEPFATHER: The (new) husband of your mother but not your biological father;\n- STEPMOTHER: The (new) wife of your father but not your biological mother;\n- STEPSISTER: The daughter of your stepmother or stepfather;\n- STEPSON: The son of your (new) husband / wife (he is not your biological son);\n- TRAVELLING_COMPANION: a person with whom one is travelling;\n- UNCLE: The brother (or brother-in-law) of your mother/father;\n",
                              "type": "string",
                              "enum": [
                                "AUNT",
                                "BROTHER",
                                "BROTHER_IN_LAW",
                                "CLOSE_BUSINESS_ASSOCIATE",
                                "COUSIN",
                                "DAUGHTER",
                                "DAUGHTER_IN_LAW",
                                "DOMESTIC_PARTNER",
                                "EMPLOYEE",
                                "FATHER",
                                "FATHER_IN_LAW",
                                "FRIEND",
                                "GRANDCHILD",
                                "GRANDPARENT",
                                "MOTHER",
                                "MOTHER_IN_LAW",
                                "NEPHEW",
                                "NIECE",
                                "OTHER",
                                "SELF",
                                "SISTER",
                                "SISTER_IN_LAW",
                                "SON",
                                "SON_IN_LAW",
                                "SPOUSE",
                                "STEPBROTHER",
                                "STEPDAUGHTER",
                                "STEPFATHER",
                                "STEPMOTHER",
                                "STEPSISTER",
                                "STEPSON",
                                "TRAVELLING_COMPANION",
                                "UNCLE"
                              ]
                            },
                            "preferred_language": {
                              "description": "Language in which the natural person wished to be contacted.\nList of ISO 639-1 codes.\n",
                              "type": "string",
                              "enum": [
                                "da",
                                "de",
                                "es",
                                "en",
                                "fi",
                                "fr",
                                "it",
                                "no",
                                "nl",
                                "sv"
                              ]
                            },
                            "registrations": {
                              "description": "List of registration of the natural person.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.",
                                    "type": "string",
                                    "enum": [
                                      "PASSPORT"
                                    ]
                                  },
                                  "value": {
                                    "description": "Value of the registration.",
                                    "type": "string",
                                    "maxLength": 20
                                  },
                                  "expiring_date": {
                                    "description": "Date at which the registration will or has expired.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "2020-05-11"
                                  },
                                  "issue_date": {
                                    "description": "Date at which the registration was issued.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "2012-08-03"
                                  },
                                  "issued_country": {
                                    "description": "Country that issued the registration.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            },
                            "preferred_communication_channel": {
                              "description": "Communication channel on which the person preferred to be contacted.",
                              "type": "string",
                              "enum": [
                                "EMAIL",
                                "PHONE"
                              ]
                            },
                            "phone": {
                              "description": "Phone on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "international_prefix": {
                                      "description": "Prefix to be added to be called from abroad.",
                                      "type": "string",
                                      "example": "+33",
                                      "maxLength": 5
                                    },
                                    "number": {
                                      "description": "Phone number. Can be local or international.",
                                      "type": "string",
                                      "example": "0123456789",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "number"
                                  ]
                                }
                              ]
                            },
                            "email": {
                              "description": "Email on which the person can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ]
                            },
                            "address": {
                              "description": "Address of the natural person.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "123 Some Street Name",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 20
                                    },
                                    "locality": {
                                      "description": "Locality.",
                                      "type": "string",
                                      "example": "PARIS",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "subdivision": {
                                      "description": "Area of the city.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "state": {
                                      "description": "Label of the state.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "complete_address": {
                                      "description": "Complete address.",
                                      "type": "string",
                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ]
                            },
                            "bank_account": {
                              "description": "Bank account of the natural person.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "bank": {
                                      "description": "Bank that holds the account.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "Name of the bank.",
                                              "type": "string",
                                              "example": "Santander UK",
                                              "maxLength": 100
                                            },
                                            "address": {
                                              "description": "Address of the bank.",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "street_address": {
                                                      "description": "Street address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name",
                                                      "maxLength": 255
                                                    },
                                                    "postal_code": {
                                                      "description": "Postal code or zip code.",
                                                      "type": "string",
                                                      "example": "75001",
                                                      "maxLength": 20
                                                    },
                                                    "locality": {
                                                      "description": "Locality.",
                                                      "type": "string",
                                                      "example": "PARIS",
                                                      "maxLength": 100
                                                    },
                                                    "country": {
                                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                      "type": "string",
                                                      "example": "FR",
                                                      "minLength": 2,
                                                      "maxLength": 2
                                                    },
                                                    "subdivision": {
                                                      "description": "Area of the city.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "state": {
                                                      "description": "Label of the state.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "complete_address": {
                                                      "description": "Complete address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                      "maxLength": 2000
                                                    }
                                                  }
                                                }
                                              ],
                                              "required": [
                                                "complete_address"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      ]
                                    },
                                    "holder_name": {
                                      "description": "Name of the account holder as registered on the bank account.",
                                      "type": "string",
                                      "example": "Joe Doe",
                                      "maxLength": 100
                                    },
                                    "account_type": {
                                      "description": "Type of the bank account.",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "1|2|3 Current Account"
                                    },
                                    "preferred_transfer_type": {
                                      "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                      "type": "string",
                                      "enum": [
                                        "ABA_RTN",
                                        "BSB",
                                        "CLABE",
                                        "IBAN",
                                        "IFSC",
                                        "NSC",
                                        "SWIFT_BIC"
                                      ],
                                      "example": "IBAN"
                                    },
                                    "account_number": {
                                      "description": "Value of the account number.",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "FR7630006000011234567890189"
                                    },
                                    "currency": {
                                      "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "example": "EUR",
                                      "maxLength": 3,
                                      "minLength": 3
                                    },
                                    "routing_number": {
                                      "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "12-34-56"
                                    },
                                    "bank_identification_number": {
                                      "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                      "type": "string",
                                      "maxLength": 11,
                                      "minLength": 8,
                                      "example": "AGRIFRPP"
                                    }
                                  },
                                  "required": [
                                    "bank",
                                    "account_number",
                                    "preferred_transfer_type"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "identity"
                          ]
                        }
                      ]
                    },
                    "company": {
                      "description": "Information related to the company's identity.\nN.B. Required when `type` is equal to `COMPANY`.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the company.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "preferred_language": {
                              "description": "Language in which the company wished to be contacted.\nList of ISO 639-1 codes.\n",
                              "type": "string",
                              "enum": [
                                "da",
                                "de",
                                "es",
                                "en",
                                "fi",
                                "fr",
                                "it",
                                "no",
                                "nl",
                                "sv"
                              ]
                            },
                            "address": {
                              "description": "Address of the company.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "123 Some Street Name",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 20
                                    },
                                    "locality": {
                                      "description": "Locality.",
                                      "type": "string",
                                      "example": "PARIS",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "subdivision": {
                                      "description": "Area of the city.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "state": {
                                      "description": "Label of the state.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "complete_address": {
                                      "description": "Complete address.",
                                      "type": "string",
                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "locality",
                                "country"
                              ]
                            },
                            "preferred_communication_channel": {
                              "description": "Communication channel on which the company preferred to be contacted.",
                              "type": "string",
                              "enum": [
                                "EMAIL",
                                "PHONE"
                              ]
                            },
                            "phone": {
                              "description": "Phone on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `PHONE`.\n",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "international_prefix": {
                                      "description": "Prefix to be added to be called from abroad.",
                                      "type": "string",
                                      "example": "+33",
                                      "maxLength": 5
                                    },
                                    "number": {
                                      "description": "Phone number. Can be local or international.",
                                      "type": "string",
                                      "example": "0123456789",
                                      "maxLength": 20
                                    }
                                  },
                                  "required": [
                                    "number"
                                  ]
                                }
                              ]
                            },
                            "email": {
                              "description": "Email on which the company can be contacted.\nRequired if `preferred_communication_channel` is equal to `EMAIL`.\n",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ]
                            },
                            "bank_account": {
                              "description": "Bank account of the company.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "bank": {
                                      "description": "Bank that holds the account.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "Name of the bank.",
                                              "type": "string",
                                              "example": "Santander UK",
                                              "maxLength": 100
                                            },
                                            "address": {
                                              "description": "Address of the bank.",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "street_address": {
                                                      "description": "Street address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name",
                                                      "maxLength": 255
                                                    },
                                                    "postal_code": {
                                                      "description": "Postal code or zip code.",
                                                      "type": "string",
                                                      "example": "75001",
                                                      "maxLength": 20
                                                    },
                                                    "locality": {
                                                      "description": "Locality.",
                                                      "type": "string",
                                                      "example": "PARIS",
                                                      "maxLength": 100
                                                    },
                                                    "country": {
                                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                      "type": "string",
                                                      "example": "FR",
                                                      "minLength": 2,
                                                      "maxLength": 2
                                                    },
                                                    "subdivision": {
                                                      "description": "Area of the city.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "state": {
                                                      "description": "Label of the state.",
                                                      "type": "string",
                                                      "maxLength": 100
                                                    },
                                                    "complete_address": {
                                                      "description": "Complete address.",
                                                      "type": "string",
                                                      "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                      "maxLength": 2000
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "holder_name": {
                                      "description": "Name of the account holder as registered on the bank account.",
                                      "type": "string",
                                      "example": "Joe Doe",
                                      "maxLength": 100
                                    },
                                    "account_type": {
                                      "description": "Type of the bank account.",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "1|2|3 Current Account"
                                    },
                                    "preferred_transfer_type": {
                                      "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                      "type": "string",
                                      "enum": [
                                        "ABA_RTN",
                                        "BSB",
                                        "CLABE",
                                        "IBAN",
                                        "IFSC",
                                        "NSC",
                                        "SWIFT_BIC"
                                      ],
                                      "example": "IBAN"
                                    },
                                    "account_number": {
                                      "description": "Value of the account number.",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "FR7630006000011234567890189"
                                    },
                                    "currency": {
                                      "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "example": "EUR",
                                      "maxLength": 3,
                                      "minLength": 3
                                    },
                                    "routing_number": {
                                      "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                      "type": "string",
                                      "maxLength": 34,
                                      "example": "12-34-56"
                                    },
                                    "bank_identification_number": {
                                      "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                      "type": "string",
                                      "maxLength": 11,
                                      "minLength": 8,
                                      "example": "AGRIFRPP"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "demo_frend_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "dev_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_porsche_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_dkbcash_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_coverwise_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_curveuk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_fit2tripes_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_fit2tripit_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_monzouk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          },
          {
            "test_puffinuk_acg": [
              "urn:axa.partners.insurance.travel.claims.read_only"
            ]
          }
        ],
        "tags": [
          "insurance"
        ]
      },
      "patch": {
        "summary": "Update an involved contact.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n  - test --> UAT / User Acceptance Environment.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "claim_id",
            "description": "Claim identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "involved_contact_id",
            "description": "Identifier of the involved contact.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Type of the involved contact it can be:\n- COMPANY: Legal person that can be a private or public organization.\n- INDIVIDUAL: Natural person that is a human being.\n",
                    "type": "string",
                    "enum": [
                      "INDIVIDUAL",
                      "COMPANY"
                    ]
                  },
                  "person": {
                    "description": "Information related to the person's identity.\nN.B. Required when `type` is equal to `INDIVIDUAL`.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "identity": {
                            "description": "Information related to the person's identity.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "title": {
                                    "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                    "type": "string",
                                    "enum": [
                                      "MR",
                                      "MS",
                                      "MISS",
                                      "DR",
                                      "PR"
                                    ],
                                    "minLength": 2,
                                    "maxLength": 4,
                                    "example": "MR"
                                  },
                                  "first_name": {
                                    "description": "First name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "middle_name": {
                                    "description": "Middle name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "last_name": {
                                    "description": "Last name.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "birth_date": {
                                    "description": "Birth date.\nISO 8601 format (YYYY-MM-DD).\n",
                                    "type": "string",
                                    "format": "date",
                                    "example": "1990-10-25"
                                  },
                                  "gender": {
                                    "description": "Gender (Female or Male).",
                                    "type": "string",
                                    "enum": [
                                      "FM",
                                      "ML"
                                    ],
                                    "minLength": 2,
                                    "maxLength": 2,
                                    "example": "ML"
                                  },
                                  "nationalities": {
                                    "description": "List of nationalities.",
                                    "type": "array",
                                    "maxItems": 5,
                                    "items": {
                                      "description": "Nationality, ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 2,
                                      "minLength": 2
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "relationship": {
                            "description": "Relationship of the natural person with the policy holder, it can be:\n- AUNT: The sister (or sister-in-law) of your mother/father;\n- BROTHER: A male sibling;\n- BROTHER_IN_LAW: The husband of your sister;\n- CLOSE_BUSINESS_ASSOCIATE: Someone who is closely connected to another person as a business partner;\n- COUSIN: The child of your aunt/uncle;\n- DAUGHTER: A female child;\n- DAUGHTER_IN_LAW: The wife of your son;\n- DOMESTIC_PARTNER: An unmarried couple of the same or opposite sex, not a long-term significant other, someone you live with or someone you share a child with.\n- EMPLOYEE: Someone who is paid to work for someone else  especially someone with a similar job or level of responsibility or in the same department;\n- FATHER: A male parent;\n- FATHER_IN_LAW: The father of your spouse;\n- FRIEND: A person who one knows well and likes a lot, but is not a member of one's family;\n- GRANDCHILD: The child of your children;\n- GRANDPARENT: The parent of your parent;\n- MOTHER: A female parent;\n- MOTHER_IN_LAW: The mother of your spouse;\n- NEPHEW: The male child of your brother/sister;\n- NIECE: The female child of your brother/sister;\n- OTHER: The personal non-kin relationship is not defined in the list;\n- SELF: Yourself;\n- SISTER: A female sibling;\n- SISTER_IN_LAW: The wife of your brother;\n- SON: A male child;\n- SON_IN_LAW: The husband of your daughter;\n- SPOUSE: A significant other in a legal marriage, civil union, or common-law marriage to and hold a valid marriage license with;\n- STEPBROTHER: The son of your stepmother or stepfather;\n- STEPDAUGHTER: The daughter of your (new) husband / wife (she is not your biological daughter);\n- STEPFATHER: The (new) husband of your mother but not your biological father;\n- STEPMOTHER: The (new) wife of your father but not your biological mother;\n- STEPSISTER: The daughter of your stepmother or stepfather;\n- STEPSON: The son of your (new) husband / wife (he is not your biological son);\n- TRAVELLING_COMPANION: a person with whom one is travelling;\n- UNCLE: The brother (or brother-in-law) of your mother/father;\n",
                            "type": "string",
                            "enum": [
                              "AUNT",
                              "BROTHER",
                              "BROTHER_IN_LAW",
                              "CLOSE_BUSINESS_ASSOCIATE",
                              "COUSIN",
                              "DAUGHTER",
                              "DAUGHTER_IN_LAW",
                              "DOMESTIC_PARTNER",
                              "EMPLOYEE",
                              "FATHER",
                              "FATHER_IN_LAW",
                              "FRIEND",
                              "GRANDCHILD",
                              "GRANDPARENT",
                              "MOTHER",
                              "MOTHER_IN_LAW",
                              "NEPHEW",
                              "NIECE",
                              "OTHER",
                              "SELF",
                              "SISTER",
                              "SISTER_IN_LAW",
                              "SON",
                              "SON_IN_LAW",
                              "SPOUSE",
                              "STEPBROTHER",
                              "STEPDAUGHTER",
                              "STEPFATHER",
                              "STEPMOTHER",
                              "STEPSISTER",
                              "STEPSON",
                              "TRAVELLING_COMPANION",
                              "UNCLE"
                            ]
                          },
                          "preferred_language": {
                            "description": "Language in which the natural person wished to be contacted.\nList of ISO 639-1 codes.\n",
                            "type": "string",
                            "enum": [
                              "da",
                              "de",
                              "es",
                              "en",
                              "fi",
                              "fr",
                              "it",
                              "no",
                              "nl",
                              "sv"
                            ]
                          },
                          "registrations": {
                            "description": "List of registration of the natural person.\n_N.B. By submitting this list, the older one will be deleted and replaced with the one provided._\n",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "registration_type": {
                                  "description": "Type of person registration.",
                                  "type": "string",
                                  "enum": [
                                    "PASSPORT"
                                  ]
                                },
                                "value": {
                                  "description": "Value of the registration.",
                                  "type": "string",
                                  "maxLength": 20
                                },
                                "expiring_date": {
                                  "description": "Date at which the registration will or has expired.\nISO 8601 format (YYYY-MM-DD).\n",
                                  "type": "string",
                                  "format": "date",
                                  "example": "2020-05-11"
                                },
                                "issue_date": {
                                  "description": "Date at which the registration was issued.\nISO 8601 format (YYYY-MM-DD).\n",
                                  "type": "string",
                                  "format": "date",
                                  "example": "2012-08-03"
                                },
                                "issued_country": {
                                  "description": "Country that issued the registration.\nISO-3166-1 alpha-2 format (2 letter codes).\n",
                                  "type": "string",
                                  "example": "FR",
                                  "minLength": 2,
                                  "maxLength": 2
                                }
                              },
                              "required": [
                                "value"
                              ]
                            }
                          },
                          "preferred_communication_channel": {
                            "description": "Communication channel on which the person preferred to be contacted.",
                            "type": "string",
                            "enum": [
                              "EMAIL",
                              "PHONE"
                            ]
                          },
                          "phone": {
                            "description": "Phone on which the person can be contacted.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix to be added to be called from abroad.",
                                    "type": "string",
                                    "example": "+33",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number. Can be local or international.",
                                    "type": "string",
                                    "example": "0123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "email": {
                            "description": "Email on which the person can be contacted.",
                            "allOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "example": "jonathan.doe@mail.com"
                              }
                            ]
                          },
                          "address": {
                            "description": "Address of the natural person.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "123 Some Street Name",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "PARIS",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Area of the city.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "complete_address": {
                                    "description": "Complete address.",
                                    "type": "string",
                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                    "maxLength": 2000
                                  }
                                }
                              }
                            ]
                          },
                          "bank_account": {
                            "description": "Bank account of the natural person.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "bank": {
                                    "description": "Bank that holds the account.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Name of the bank.",
                                            "type": "string",
                                            "example": "Santander UK",
                                            "maxLength": 100
                                          },
                                          "address": {
                                            "description": "Address of the bank.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "street_address": {
                                                    "description": "Street address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name",
                                                    "maxLength": 255
                                                  },
                                                  "postal_code": {
                                                    "description": "Postal code or zip code.",
                                                    "type": "string",
                                                    "example": "75001",
                                                    "maxLength": 20
                                                  },
                                                  "locality": {
                                                    "description": "Locality.",
                                                    "type": "string",
                                                    "example": "PARIS",
                                                    "maxLength": 100
                                                  },
                                                  "country": {
                                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                    "type": "string",
                                                    "example": "FR",
                                                    "minLength": 2,
                                                    "maxLength": 2
                                                  },
                                                  "subdivision": {
                                                    "description": "Area of the city.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "state": {
                                                    "description": "Label of the state.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "complete_address": {
                                                    "description": "Complete address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                    "maxLength": 2000
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "holder_name": {
                                    "description": "Name of the account holder as registered on the bank account.",
                                    "type": "string",
                                    "example": "Joe Doe",
                                    "maxLength": 100
                                  },
                                  "account_type": {
                                    "description": "Type of the bank account.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "1|2|3 Current Account"
                                  },
                                  "preferred_transfer_type": {
                                    "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                    "type": "string",
                                    "enum": [
                                      "ABA_RTN",
                                      "BSB",
                                      "CLABE",
                                      "IBAN",
                                      "IFSC",
                                      "NSC",
                                      "SWIFT_BIC"
                                    ],
                                    "example": "IBAN"
                                  },
                                  "account_number": {
                                    "description": "Value of the account number.",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "FR7630006000011234567890189"
                                  },
                                  "currency": {
                                    "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "example": "EUR",
                                    "maxLength": 3,
                                    "minLength": 3
                                  },
                                  "routing_number": {
                                    "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "12-34-56"
                                  },
                                  "bank_identification_number": {
                                    "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                    "type": "string",
                                    "maxLength": 11,
                                    "minLength": 8,
                                    "example": "AGRIFRPP"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "company": {
                    "description": "Information related to the company's identity.\nN.B. Required when `type` is equal to `COMPANY`.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the company.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "preferred_language": {
                            "description": "Language in which the company wished to be contacted.\nList of ISO 639-1 codes.\n",
                            "type": "string",
                            "enum": [
                              "da",
                              "de",
                              "es",
                              "en",
                              "fi",
                              "fr",
                              "it",
                              "no",
                              "nl",
                              "sv"
                            ]
                          },
                          "address": {
                            "description": "Address of the company.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "123 Some Street Name",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 20
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "example": "PARIS",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "subdivision": {
                                    "description": "Area of the city.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "state": {
                                    "description": "Label of the state.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "complete_address": {
                                    "description": "Complete address.",
                                    "type": "string",
                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                    "maxLength": 2000
                                  }
                                }
                              }
                            ]
                          },
                          "phone": {
                            "description": "Phone on which the company can be contacted.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "international_prefix": {
                                    "description": "Prefix to be added to be called from abroad.",
                                    "type": "string",
                                    "example": "+33",
                                    "maxLength": 5
                                  },
                                  "number": {
                                    "description": "Phone number. Can be local or international.",
                                    "type": "string",
                                    "example": "0123456789",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "number"
                                ]
                              }
                            ]
                          },
                          "email": {
                            "description": "Email on which the company can be contacted.",
                            "allOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "example": "jonathan.doe@mail.com"
                              }
                            ]
                          },
                          "bank_account": {
                            "description": "Bank account of the company.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "bank": {
                                    "description": "Bank that holds the account.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Name of the bank.",
                                            "type": "string",
                                            "example": "Santander UK",
                                            "maxLength": 100
                                          },
                                          "address": {
                                            "description": "Address of the bank.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "street_address": {
                                                    "description": "Street address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name",
                                                    "maxLength": 255
                                                  },
                                                  "postal_code": {
                                                    "description": "Postal code or zip code.",
                                                    "type": "string",
                                                    "example": "75001",
                                                    "maxLength": 20
                                                  },
                                                  "locality": {
                                                    "description": "Locality.",
                                                    "type": "string",
                                                    "example": "PARIS",
                                                    "maxLength": 100
                                                  },
                                                  "country": {
                                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                                    "type": "string",
                                                    "example": "FR",
                                                    "minLength": 2,
                                                    "maxLength": 2
                                                  },
                                                  "subdivision": {
                                                    "description": "Area of the city.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "state": {
                                                    "description": "Label of the state.",
                                                    "type": "string",
                                                    "maxLength": 100
                                                  },
                                                  "complete_address": {
                                                    "description": "Complete address.",
                                                    "type": "string",
                                                    "example": "123 Some Street Name 75001 PARIS FRANCE",
                                                    "maxLength": 2000
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "holder_name": {
                                    "description": "Name of the account holder as registered on the bank account.",
                                    "type": "string",
                                    "example": "Joe Doe",
                                    "maxLength": 100
                                  },
                                  "account_type": {
                                    "description": "Type of the bank account.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "1|2|3 Current Account"
                                  },
                                  "preferred_transfer_type": {
                                    "description": "Preferred transfer type for this bank account:\n| Type      | Label                                                                              | Additional Required fields |\n|-----------|------------------------------------------------------------------------------------|----------------------------|\n| ABA_RTN   | American Bankers Association - Routing Transit Number                              | routing_number             |\n| BSB       | Bank State Branch                                                                  | routing_number             |\n| CLABE     | Clave Bancaria Estandarizada                                                       | bank_identification_number |\n| IBAN      | Internation Bank Account Number                                                    | bank_identification_number |\n| IFSC      | Indian Financial System Code                                                       | bank_identification_number |\n| NSC       | National Sort Code                                                                 | routing_number             |\n| SWIFT_BIC | Society for Worldwide Interbank Financial Telecommunication - Bank Identifier Code | bank_identification_number |\n",
                                    "type": "string",
                                    "enum": [
                                      "ABA_RTN",
                                      "BSB",
                                      "CLABE",
                                      "IBAN",
                                      "IFSC",
                                      "NSC",
                                      "SWIFT_BIC"
                                    ],
                                    "example": "IBAN"
                                  },
                                  "account_number": {
                                    "description": "Value of the account number.",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "FR7630006000011234567890189"
                                  },
                                  "currency": {
                                    "description": "Currency of the bank account.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "example": "EUR",
                                    "maxLength": 3,
                                    "minLength": 3
                                  },
                                  "routing_number": {
                                    "description": "Routing code, sort code of the bank account. Typically used for national transfer and it must be used for:\n- _ABA_RTN_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ABA_routing_transit_number).\n- _BSB_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Bank_state_branch).\n- _NSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Sort_code).\n",
                                    "type": "string",
                                    "maxLength": 34,
                                    "example": "12-34-56"
                                  },
                                  "bank_identification_number": {
                                    "description": "The bank identification number. Required when _preferred_transfer_type_ is equal to:\n- _CLABE_, _IBAN_, _SWIFT_BIC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/ISO_9362).\n- _IFSC_ and must follow the format defined [here](https://en.wikipedia.org/wiki/Indian_Financial_System_Code).\n",
                                    "type": "string",
                                    "maxLength": 11,
                                    "minLength": 8,
                                    "example": "AGRIFRPP"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Involved contact information.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update successfully done (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "demo_frend_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "dev_coop_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_porsche_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_dkbcash_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_coverwise_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_curveuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripes_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_fit2tripit_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_monzouk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          },
          {
            "test_puffinuk_acg": [
              "urn:axa.partners.insurance.travel.claims.write"
            ]
          }
        ],
        "tags": [
          "insurance"
        ]
      }
    },
    "/sales/enterprise/motor/vexp/policies": {
      "get": {
        "summary": "Retrieves motor enterprise policies' summaries.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "partner_reference",
            "required": true,
            "description": "Reference of the partner that have issued the policy with Axa (for example Michelin)",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "policy_number",
            "required": false,
            "description": "Policy number or subscription number registered in the contract between the partner and the customer.\nUsed for open fleets. No need to fulfill registration_number if used.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "registration_number",
            "required": false,
            "description": "The registration number of the covered vehicle.\nUsed for closed fleets. No need to fulfill policy_number if used.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of motor policy summaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "contracting_actor_name": {
                        "description": "Partner name.",
                        "type": "string",
                        "maxLength": 100,
                        "example": "Michelin"
                      },
                      "policy_id": {
                        "description": "Unique policy identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "2h1h73fa-5e84-49e0-8167-a7c61b364219"
                      },
                      "policy_number": {
                        "description": "Policy number.",
                        "type": "string",
                        "maxLength": 50,
                        "example": "09362662738977"
                      },
                      "policy_holder_name": {
                        "description": "Social reason of the client.",
                        "type": "string",
                        "maxLength": 100,
                        "example": "Müller Logistics"
                      }
                    },
                    "required": [
                      "policy_id"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.enterprise.motor.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.enterprise.motor.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/orders": {
      "post": {
        "summary": "Create and store an order.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "description": "Unique final order identifier.",
                    "type": "string",
                    "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                    "readOnly": true,
                    "maxLength": 150
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                    "maxLength": 2000
                  }
                },
                "required": [
                  "quote_code",
                  "order_id"
                ]
              }
            }
          },
          "description": "Order information.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    }
                  },
                  "required": [
                    "quote_code",
                    "order_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.orders.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/orders/{order_id}": {
      "get": {
        "summary": "Retrieve order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    }
                  },
                  "required": [
                    "quote_code",
                    "order_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Order not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.orders.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies": {
      "get": {
        "summary": "Retrieve consumer electronic customer policy summaries.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": true,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "customer_email",
            "description": "The customer email.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "device_id",
            "description": "The device identifier.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "holder_last_name",
            "description": "The policy holder last name.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "holder_birthdate",
            "description": "The policy holder date of birth. Mandatory if policy holder last name provided - ISO 8601 format (YYYY-MM-DD).",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "agent_scope",
            "description": "The scope selected by the agent when the police was created.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "policy_number",
            "description": "Final policy number.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of consumer electronics policy summaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "object",
                    "properties": {
                      "policy_id": {
                        "description": "Unique final policy identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "readOnly": true
                      },
                      "policy_number": {
                        "description": "Final policy number (only exist if policy is not draft).",
                        "type": "string",
                        "maxLength": 150
                      },
                      "draft_policy_number": {
                        "description": "Draft policy number.",
                        "type": "string",
                        "maxLength": 150
                      },
                      "status": {
                        "description": "Policy's status details.",
                        "type": "string",
                        "enum": [
                          "DRAFT",
                          "ACTIVE",
                          "CANCELLED",
                          "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                      },
                      "policy_holder": {
                        "description": "Policy holder summary.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "last_name": {
                                "description": "The last name of the policy holder.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "first_name": {
                                "description": "The first name of the policy holder.",
                                "type": "string",
                                "maxLength": 100
                              }
                            }
                          }
                        ]
                      },
                      "purchase_date": {
                        "description": "The date of the subscription (purchase) of the policy  - ISO 8601 format (YYYY-MM-DD).",
                        "type": "string",
                        "format": "date",
                        "example": "2018-06-20"
                      },
                      "product_name": {
                        "description": "Product name",
                        "type": "string",
                        "example": "Advanced",
                        "maxLength": 255
                      },
                      "catalog": {
                        "description": "The product catalog.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "description": "The code of the product catalog relied to the policy",
                                "type": "string",
                                "example": "CE_PRD_FR",
                                "maxLength": 150
                              },
                              "version": {
                                "description": "Catalog version.",
                                "type": "string",
                                "example": "v2",
                                "maxLength": 10
                              }
                            },
                            "required": [
                              "code",
                              "version"
                            ]
                          }
                        ]
                      },
                      "contracting_actor_name": {
                        "description": "The legal entity relied to the customer.",
                        "type": "string",
                        "example": "FNAC UK",
                        "maxLength": 150
                      },
                      "devices": {
                        "type": "array",
                        "maxItems": 50,
                        "items": {
                          "type": "object",
                          "properties": {
                            "device_id": {
                              "description": "The device identifier.",
                              "type": "string",
                              "maxLength": 150,
                              "example": "359469079753382"
                            }
                          },
                          "required": [
                            "device_id"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      },
      "post": {
        "summary": "Creates policy subscription.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_policy_number": {
                    "description": "External policy identifier that can be provided by the partner.",
                    "type": "string",
                    "maxLength": 150
                  },
                  "subscription_country": {
                    "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                    "type": "string",
                    "example": "CZ",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "policy_start_date": {
                    "description": "The effective policy start date - ISO 8601 format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2019-03-03"
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "eJxtUFtP2zAY/SvIz04Vp0lIeUNoMDQE05j2AELWF/tLZsl1Ml+6dlX"
                  },
                  "sales_information": {
                    "description": "Sales information.",
                    "allOf": [
                      {
                        "description": "Sales information.",
                        "type": "object",
                        "properties": {
                          "point_of_sale": {
                            "description": "Point of sale of the policy.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "DARTY"
                          },
                          "seller": {
                            "description": "Seller who sold the policy",
                            "type": "string",
                            "maxLength": 100,
                            "example": "S22NBY98"
                          },
                          "external_sales_id": {
                            "description": "External identifier of the policy sale transaction.",
                            "type": "string",
                            "maxLength": 150,
                            "example": "SLS082019AMX"
                          },
                          "sales_channel": {
                            "description": "The sales channel.",
                            "type": "string",
                            "enum": [
                              "SALES_POINT",
                              "CALL_CENTER",
                              "WEB"
                            ],
                            "example": "SALES_POINT"
                          }
                        }
                      }
                    ]
                  },
                  "agent_scope": {
                    "description": "The scope that agent has access.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "CE/DARTY/France"
                  },
                  "price": {
                    "description": "Policy's price details.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Policy price.",
                        "properties": {
                          "formula": {
                            "description": "Formula selected by the customer.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "12-MONTHS"
                          },
                          "currency": {
                            "description": "Currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          },
                          "price_after_discount_inc_tax": {
                            "description": "Price amount discounted including taxes, numeric with 2 decimals.",
                            "type": "number",
                            "example": 150.25
                          }
                        },
                        "required": [
                          "formula",
                          "currency",
                          "price_after_discount_inc_tax"
                        ]
                      }
                    ]
                  },
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 50
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 50
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 50
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "additional_information": {
                                "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                "type": "array",
                                "maxItems": 10,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "description": "Information code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "value": {
                                      "description": "Information value.",
                                      "type": "string",
                                      "maxLength": 255
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "value"
                                  ]
                                },
                                "example": [
                                  {
                                    "code": "ID_NUMBER",
                                    "value": "AH15220CDH"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name"
                            ]
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "maxLength": 50,
                                "example": "FR"
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ],
                                "example": {
                                  "international_prefix": "0033",
                                  "number": "0651201190"
                                }
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "150 Avenue de Paris"
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "75001"
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Paris"
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "is_policy_beneficiary": {
                                "description": "Indicates if the policy holder is also a policy beneficiary.",
                                "type": "boolean"
                              },
                              "external_holder_id": {
                                "description": "External policy holder identifier.",
                                "type": "string",
                                "maxLength": 150,
                                "example": "ce856f06-1e25-446c-981c-24962aa13e13"
                              }
                            }
                          }
                        ],
                        "required": [
                          "spoken_language",
                          "email",
                          "is_policy_beneficiary"
                        ]
                      }
                    ]
                  },
                  "beneficiaries": {
                    "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "example": "John",
                              "maxLength": 50
                            },
                            "middle_name": {
                              "description": "Middle name.",
                              "type": "string",
                              "maxLength": 50
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "example": "Doe",
                              "maxLength": 50
                            },
                            "birth_date": {
                              "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "1990-04-25"
                            },
                            "email": {
                              "description": "Email address.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "john.doe@mail.com"
                            },
                            "additional_information": {
                              "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Information code.",
                                    "type": "string",
                                    "maxLength": 50
                                  },
                                  "value": {
                                    "description": "Information value.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                },
                                "required": [
                                  "code",
                                  "value"
                                ]
                              },
                              "example": [
                                {
                                  "code": "ID_NUMBER",
                                  "value": "AH15220CDH"
                                }
                              ]
                            }
                          },
                          "required": [
                            "title",
                            "first_name",
                            "last_name"
                          ]
                        }
                      ]
                    }
                  },
                  "consents": {
                    "description": "List of consents displayed to the customer.",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "description": "Customer consent.",
                      "properties": {
                        "code": {
                          "description": "Code of the consent.",
                          "type": "string",
                          "maxLength": 150
                        },
                        "is_confirmed": {
                          "description": "Indicates if the consent has been confirmed by the customer or not.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "code",
                        "is_confirmed"
                      ]
                    }
                  },
                  "is_electronic_signature_preferred": {
                    "description": "True if the customer prefer to sign the policy electrically false if not.",
                    "type": "boolean",
                    "example": true
                  },
                  "devices": {
                    "description": "List of devices.",
                    "type": "array",
                    "maxItems": 30,
                    "items": {
                      "type": "object",
                      "properties": {
                        "device_id": {
                          "description": "The device identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "readOnly": true,
                          "example": "359469079753382"
                        },
                        "imei_number": {
                          "description": "International Mobile Equipment Identity (IMEI) of the device.",
                          "type": "string",
                          "example": "359469079753382",
                          "maxLength": 50
                        },
                        "serial_number": {
                          "description": "Serial number of the device.",
                          "type": "string",
                          "example": "DF359469/079U753382",
                          "maxLength": 50
                        },
                        "name": {
                          "description": "Name of the device.",
                          "type": "string",
                          "example": "Xiaomi",
                          "maxLength": 100
                        },
                        "purchase_price": {
                          "description": "Purchase price of the device.",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        },
                        "purchase_date": {
                          "description": "Date when the device was purchased\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-08-09T10:24:59.993Z"
                        },
                        "category": {
                          "description": "Category.",
                          "type": "string",
                          "example": "MOBILE",
                          "maxLength": 20
                        },
                        "brand": {
                          "description": "Manufacturor.",
                          "type": "string",
                          "example": "APPLE",
                          "maxLength": 100
                        },
                        "model": {
                          "description": "Model of the device.",
                          "type": "string",
                          "example": "IPHONE X",
                          "maxLength": 100
                        }
                      }
                    }
                  }
                },
                "required": [
                  "quote_code",
                  "policy_holder",
                  "price"
                ]
              }
            }
          },
          "description": "Content of policy subscription.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_id": {
                      "description": "Unique final policy identifier.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "draft_policy_number": {
                      "description": "Draft policy number, provided in case if the policy is not confirmed.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "external_policy_number": {
                      "description": "External policy identifier that can be provided by the partner.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "status": {
                      "description": "Policy's status details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy status.",
                          "properties": {
                            "value": {
                              "description": "Status value",
                              "type": "string",
                              "enum": [
                                "DRAFT",
                                "ACTIVE",
                                "CANCELLED"
                              ]
                            },
                            "reason": {
                              "description": "Status reason\nThe cancellation reason if the value equal to CANCELLED.\n",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "value"
                          ]
                        }
                      ]
                    },
                    "subscription_country": {
                      "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                      "type": "string",
                      "example": "CZ",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "policy_start_date": {
                      "description": "The effective policy start date - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2019-03-03"
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "eJxtUFtP2zAY/SvIz04Vp0lIeUNoMDQE05j2AELWF/tLZsl1Ml+6dlX"
                    },
                    "sales_information": {
                      "description": "Sales information.",
                      "allOf": [
                        {
                          "description": "Sales information.",
                          "type": "object",
                          "properties": {
                            "point_of_sale": {
                              "description": "Point of sale of the policy.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "DARTY"
                            },
                            "seller": {
                              "description": "Seller who sold the policy",
                              "type": "string",
                              "maxLength": 100,
                              "example": "S22NBY98"
                            },
                            "external_sales_id": {
                              "description": "External identifier of the policy sale transaction.",
                              "type": "string",
                              "maxLength": 150,
                              "example": "SLS082019AMX"
                            },
                            "sales_channel": {
                              "description": "The sales channel.",
                              "type": "string",
                              "enum": [
                                "SALES_POINT",
                                "CALL_CENTER",
                                "WEB"
                              ],
                              "example": "SALES_POINT"
                            }
                          }
                        }
                      ]
                    },
                    "agent_scope": {
                      "description": "The scope that agent has access.",
                      "type": "string",
                      "example": "CE/DARTY/France",
                      "maxLength": 255
                    },
                    "price": {
                      "description": "Policy's price details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy price.",
                          "properties": {
                            "formula": {
                              "description": "Formula selected by the customer.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "12-MONTHS"
                            },
                            "currency": {
                              "description": "Currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            },
                            "price_after_discount_inc_tax": {
                              "description": "Price amount discounted including taxes, numeric with 2 decimals.",
                              "type": "number",
                              "example": 150.25
                            }
                          },
                          "required": [
                            "formula",
                            "currency",
                            "price_after_discount_inc_tax"
                          ]
                        }
                      ]
                    },
                    "policy_holder": {
                      "description": "Policy holder.",
                      "allOf": [
                        {
                          "description": "Policy holder",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 50
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "example": "Doe",
                                  "maxLength": 50
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                },
                                "email": {
                                  "description": "Email address.",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "additional_information": {
                                  "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "description": "Information code.",
                                        "type": "string",
                                        "maxLength": 50
                                      },
                                      "value": {
                                        "description": "Information value.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "code",
                                      "value"
                                    ]
                                  },
                                  "example": [
                                    {
                                      "code": "ID_NUMBER",
                                      "value": "AH15220CDH"
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "title",
                                "first_name",
                                "last_name"
                              ]
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "FR"
                                },
                                "phone": {
                                  "description": "Phone number.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 5
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 20
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": {
                                    "international_prefix": "0033",
                                    "number": "0651201190"
                                  }
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "150 Avenue de Paris"
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "maxLength": 20,
                                          "example": "75001"
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Paris"
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "is_policy_beneficiary": {
                                  "description": "Indicates if the policy holder is also a policy beneficiary.",
                                  "type": "boolean"
                                },
                                "external_holder_id": {
                                  "description": "External policy holder identifier.",
                                  "type": "string",
                                  "maxLength": 150,
                                  "example": "ce856f06-1e25-446c-981c-24962aa13e13"
                                }
                              }
                            }
                          ],
                          "required": [
                            "spoken_language",
                            "email",
                            "is_policy_beneficiary"
                          ]
                        }
                      ]
                    },
                    "beneficiaries": {
                      "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                      "type": "array",
                      "maxItems": 20,
                      "items": {
                        "description": "Policy beneficiary.",
                        "allOf": [
                          {
                            "properties": {
                              "beneficiary_id": {
                                "description": "Beneficiary identifier.",
                                "type": "string",
                                "maxLength": 150,
                                "example": "ce856f07-1e25-446c-981c-24962aa13e14"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 50
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 50
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 50
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "additional_information": {
                                "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                "type": "array",
                                "maxItems": 10,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "description": "Information code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "value": {
                                      "description": "Information value.",
                                      "type": "string",
                                      "maxLength": 255
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "value"
                                  ]
                                },
                                "example": [
                                  {
                                    "code": "ID_NUMBER",
                                    "value": "AH15220CDH"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name"
                            ]
                          }
                        ]
                      }
                    },
                    "consents": {
                      "description": "List of consents displayed to the customer.",
                      "type": "array",
                      "maxItems": 20,
                      "items": {
                        "type": "object",
                        "description": "Customer consent.",
                        "properties": {
                          "code": {
                            "description": "Code of the consent.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "is_confirmed": {
                            "description": "Indicates if the consent has been confirmed by the customer or not.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "code",
                          "is_confirmed"
                        ]
                      }
                    },
                    "is_electronic_signature_preferred": {
                      "description": "True if the customer prefer to sign the policy electrically false if not.",
                      "type": "boolean",
                      "example": true
                    },
                    "attachments": {
                      "description": "Set of attachments provided with the policy.",
                      "type": "array",
                      "maxItems": 20,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                            "type": "string",
                            "maxLength": 50
                          },
                          "created_at": {
                            "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time"
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ],
                              "uniqueItems": true
                            },
                            "example": [
                              "CONFIRMATION_EMAIL",
                              "PRECONTRACTUAL_EMAIL"
                            ]
                          },
                          "technical_reference": {
                            "description": "The technical reference used to download the attachment.",
                            "type": "string",
                            "maxLength": 50
                          }
                        }
                      }
                    },
                    "devices": {
                      "description": "List of devices.",
                      "type": "array",
                      "maxItems": 30,
                      "items": {
                        "type": "object",
                        "properties": {
                          "device_id": {
                            "description": "The device identifier.",
                            "type": "string",
                            "maxLength": 150,
                            "readOnly": true,
                            "example": "359469079753382"
                          },
                          "imei_number": {
                            "description": "International Mobile Equipment Identity (IMEI) of the device.",
                            "type": "string",
                            "example": "359469079753382",
                            "maxLength": 50
                          },
                          "serial_number": {
                            "description": "Serial number of the device.",
                            "type": "string",
                            "example": "DF359469/079U753382",
                            "maxLength": 50
                          },
                          "name": {
                            "description": "Name of the device.",
                            "type": "string",
                            "example": "Xiaomi",
                            "maxLength": 100
                          },
                          "purchase_price": {
                            "description": "Purchase price of the device.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "purchase_date": {
                            "description": "Date when the device was purchased\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-08-09T10:24:59.993Z"
                          },
                          "category": {
                            "description": "Category.",
                            "type": "string",
                            "example": "MOBILE",
                            "maxLength": 20
                          },
                          "brand": {
                            "description": "Manufacturor.",
                            "type": "string",
                            "example": "APPLE",
                            "maxLength": 100
                          },
                          "model": {
                            "description": "Model of the device.",
                            "type": "string",
                            "example": "IPHONE X",
                            "maxLength": 100
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "quote_code",
                    "policy_holder",
                    "price"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}": {
      "get": {
        "summary": "Gets policy details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "Policy unique identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "properties": {
                        "policy_id": {
                          "description": "Unique final policy identifier.",
                          "type": "string",
                          "maxLength": 150
                        },
                        "draft_policy_number": {
                          "description": "Draft policy number, provided in case if the policy is not confirmed.",
                          "type": "string",
                          "maxLength": 50
                        },
                        "policy_number": {
                          "description": "Final policy number.",
                          "type": "string",
                          "maxLength": 50
                        },
                        "external_policy_number": {
                          "description": "External policy identifier that can be provided by the partner.",
                          "type": "string",
                          "maxLength": 50
                        },
                        "status": {
                          "description": "Policy's status details.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Policy status.",
                              "properties": {
                                "value": {
                                  "description": "Status value",
                                  "type": "string",
                                  "enum": [
                                    "DRAFT",
                                    "ACTIVE",
                                    "CANCELLED"
                                  ]
                                },
                                "reason": {
                                  "description": "Status reason\nThe cancellation reason if the value equal to CANCELLED.\n",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "value"
                              ]
                            }
                          ]
                        },
                        "subscription_country": {
                          "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                          "type": "string",
                          "example": "FR",
                          "minLength": 2,
                          "maxLength": 2
                        },
                        "cancellation_date": {
                          "description": "Cancellation date of the policy - ISO 8601 format (YYYY-MM-DD).",
                          "type": "string",
                          "format": "date",
                          "example": "2019-01-30"
                        },
                        "purchase_date": {
                          "description": "The date of the subscription (purchase) of the policy  - ISO 8601 format (YYYY-MM-DD).",
                          "type": "string",
                          "format": "date",
                          "example": "2019-01-23"
                        },
                        "coverage_period": {
                          "description": "The coverage period - ISO 8601 format (YYYY-MM-DD).\nThe coverage start date is the date when it becomes possible for the customer to submit a claim.\nThe coverage end date is the date after which the coverage ends.\n",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "start_date": {
                                  "description": "Start date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date"
                                },
                                "end_date": {
                                  "description": "End date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          ],
                          "example": {
                            "start_date": "2019-01-25",
                            "end_date": "2020-01-24"
                          }
                        },
                        "effective_period": {
                          "description": "The effective period  - ISO 8601 format (YYYY-MM-DD)\nThe start date indicates when the contract is starting = activation date.\nThe end date indicates when the contract is ending. If the policy is cancelled, then the field is updated\n",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "start_date": {
                                  "description": "Start date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date"
                                },
                                "end_date": {
                                  "description": "End date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          ],
                          "example": {
                            "start_date": "2019-01-25",
                            "end_date": "2020-01-24"
                          }
                        },
                        "contracting_actor_name": {
                          "description": "The legal entity relied to the customer.",
                          "type": "string",
                          "maxLength": 100,
                          "example": "FNAC UK"
                        },
                        "legal_withdrawal_period": {
                          "description": "The legal withdrawal period\nISO 8601 format (P5Y8M4D).\n",
                          "type": "string",
                          "maxLength": 10,
                          "example": "P14D"
                        },
                        "catalog": {
                          "description": "The product catalog.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "description": "The code of the product catalog relied to the policy",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Opodo FR"
                                },
                                "version": {
                                  "description": "Catalog version.",
                                  "type": "string",
                                  "maxLength": 10,
                                  "example": "v12"
                                },
                                "country": {
                                  "description": "Origin country, ISO-3166-1 alpha-2 format (2 letter codes).",
                                  "type": "string",
                                  "example": "FR",
                                  "minLength": 2,
                                  "maxLength": 2
                                },
                                "currency": {
                                  "description": "Currency, ISO 4217 format (3 letter code).",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "code",
                                "version"
                              ]
                            }
                          ]
                        },
                        "coverages": {
                          "description": "Set of coverages included in the product.",
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "description": "Coverage label.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "category": {
                                "description": "Coverage category.",
                                "type": "string",
                                "maxLength": 50
                              }
                            }
                          }
                        },
                        "product": {
                          "description": "Product subscribed on the policy.",
                          "allOf": [
                            {
                              "description": "Product subscribed on the policy.",
                              "type": "object",
                              "properties": {
                                "code": {
                                  "description": "Product code",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "KV5-33"
                                },
                                "name": {
                                  "description": "Product name",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Advanced"
                                },
                                "price_after_discount_inc_tax": {
                                  "description": "Price amount discounted including taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 150.25
                                },
                                "total_discount": {
                                  "description": "Total amount of discount, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 10
                                },
                                "premium_after_discount_excl_tax": {
                                  "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 180
                                },
                                "formula": {
                                  "description": "Formula selected by the customer.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "12-MONTHS"
                                }
                              }
                            }
                          ]
                        },
                        "payment": {
                          "description": "Payment summary information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Payment summary information.",
                              "properties": {
                                "type": {
                                  "description": "Payment mode selected.",
                                  "type": "string",
                                  "enum": [
                                    "CREDIT_CARD",
                                    "DEBIT_CARD",
                                    "ELECTRONIC_TRANSFERT",
                                    "VIRTUAL_CREDIT_CARD",
                                    "CASH",
                                    "CHEQUE"
                                  ],
                                  "example": "CREDIT_CARD"
                                },
                                "is_managed_by_axa": {
                                  "description": "True if the payment is managed by axa.\nFalse if the payment is managed by a provider service payment.\n",
                                  "type": "boolean",
                                  "example": true
                                },
                                "payment_reference": {
                                  "description": "The payment reference.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "bank cheque number - 27006"
                                },
                                "payment_periodicity": {
                                  "description": "Payment periodicities.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Periodicity of the payment.",
                                      "properties": {
                                        "value": {
                                          "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "R12/P1M"
                                        },
                                        "amount": {
                                          "description": "The payment per period.",
                                          "type": "number",
                                          "example": 23
                                        }
                                      }
                                    }
                                  ]
                                },
                                "has_missing_payment": {
                                  "description": "False if the last payment is correctly processed, true if not.",
                                  "type": "boolean",
                                  "example": true
                                },
                                "balance_amount": {
                                  "description": "Payment balance, the remaining amount of the annual amount.\nIt can be a credit balance or a debit balance.\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "bad_debt_balance_amount": {
                                  "description": "Bad debt recurrent payment balance, the total amount of unpaid monthly payments.\nIt can be a credit balance or a debit balance.\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "policy_holder": {
                          "description": "Policy holder.",
                          "allOf": [
                            {
                              "description": "Policy holder",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "minLength": 2,
                                      "maxLength": 4,
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 50
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 50
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    },
                                    "email": {
                                      "description": "Email address.",
                                      "allOf": [
                                        {
                                          "type": "string",
                                          "format": "email",
                                          "example": "jonathan.doe@mail.com"
                                        }
                                      ],
                                      "example": "john.doe@mail.com"
                                    },
                                    "additional_information": {
                                      "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                      "type": "array",
                                      "maxItems": 10,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "code": {
                                            "description": "Information code.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "value": {
                                            "description": "Information value.",
                                            "type": "string",
                                            "maxLength": 255
                                          }
                                        },
                                        "required": [
                                          "code",
                                          "value"
                                        ]
                                      },
                                      "example": [
                                        {
                                          "code": "ID_NUMBER",
                                          "value": "AH15220CDH"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name"
                                  ]
                                },
                                {
                                  "properties": {
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "FR"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "international_prefix": "0033",
                                        "number": "0651201190"
                                      }
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "maxLength": 255,
                                              "example": "150 Avenue de Paris"
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "75001"
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "maxLength": 100,
                                              "example": "Paris"
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "is_policy_beneficiary": {
                                      "description": "Indicates if the policy holder is also a policy beneficiary.",
                                      "type": "boolean"
                                    },
                                    "external_holder_id": {
                                      "description": "External policy holder identifier.",
                                      "type": "string",
                                      "maxLength": 150,
                                      "example": "ce856f06-1e25-446c-981c-24962aa13e13"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "spoken_language",
                                "email",
                                "is_policy_beneficiary"
                              ]
                            }
                          ]
                        },
                        "beneficiaries": {
                          "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                            "description": "Policy beneficiary.",
                            "allOf": [
                              {
                                "properties": {
                                  "beneficiary_id": {
                                    "description": "Beneficiary identifier.",
                                    "type": "string",
                                    "maxLength": 150,
                                    "example": "ce856f07-1e25-446c-981c-24962aa13e14"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "title": {
                                    "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                    "type": "string",
                                    "enum": [
                                      "MR",
                                      "MS",
                                      "MISS",
                                      "DR",
                                      "PR"
                                    ],
                                    "minLength": 2,
                                    "maxLength": 4,
                                    "example": "MR"
                                  },
                                  "first_name": {
                                    "description": "First name.",
                                    "type": "string",
                                    "example": "John",
                                    "maxLength": 50
                                  },
                                  "middle_name": {
                                    "description": "Middle name.",
                                    "type": "string",
                                    "maxLength": 50
                                  },
                                  "last_name": {
                                    "description": "Last name.",
                                    "type": "string",
                                    "example": "Doe",
                                    "maxLength": 50
                                  },
                                  "birth_date": {
                                    "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                    "type": "string",
                                    "format": "date",
                                    "example": "1990-04-25"
                                  },
                                  "email": {
                                    "description": "Email address.",
                                    "allOf": [
                                      {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jonathan.doe@mail.com"
                                      }
                                    ],
                                    "example": "john.doe@mail.com"
                                  },
                                  "additional_information": {
                                    "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "description": "Information code.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "value": {
                                          "description": "Information value.",
                                          "type": "string",
                                          "maxLength": 255
                                        }
                                      },
                                      "required": [
                                        "code",
                                        "value"
                                      ]
                                    },
                                    "example": [
                                      {
                                        "code": "ID_NUMBER",
                                        "value": "AH15220CDH"
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "title",
                                  "first_name",
                                  "last_name"
                                ]
                              }
                            ]
                          }
                        },
                        "attachments": {
                          "description": "Set of documents linked to the policy.",
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                                "type": "string",
                                "maxLength": 50
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time"
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ],
                                  "uniqueItems": true
                                },
                                "example": [
                                  "CONFIRMATION_EMAIL",
                                  "PRECONTRACTUAL_EMAIL"
                                ]
                              },
                              "technical_reference": {
                                "description": "The technical reference used to download the attachment.",
                                "type": "string",
                                "maxLength": 50
                              }
                            }
                          }
                        },
                        "electronic_signature": {
                          "description": "The electronic signature information of the policy holder.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The e-signature information.",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "maxLength": 2048,
                                  "description": "The cryptolog's URL for the signature.",
                                  "example": "https://sign.test.universign.eu/fr/signature/?id=b4f65f10-7e74-31e6-a6ff-cdb74e58d709"
                                },
                                "status": {
                                  "description": "Status value",
                                  "type": "string",
                                  "enum": [
                                    "PENDING",
                                    "COMPLETED",
                                    "EXPIRED",
                                    "FAILED",
                                    "REFUSED"
                                  ],
                                  "example": "COMPLETED"
                                }
                              }
                            }
                          ]
                        },
                        "devices": {
                          "description": "Devices covered by the policy.",
                          "type": "array",
                          "maxItems": 30,
                          "items": {
                            "type": "object",
                            "properties": {
                              "device_id": {
                                "description": "The device identifier.",
                                "type": "string",
                                "maxLength": 150,
                                "readOnly": true,
                                "example": "359469079753382"
                              },
                              "imei_number": {
                                "description": "International Mobile Equipment Identity (IMEI) of the device.",
                                "type": "string",
                                "example": "359469079753382",
                                "maxLength": 50
                              },
                              "serial_number": {
                                "description": "Serial number of the device.",
                                "type": "string",
                                "example": "DF359469/079U753382",
                                "maxLength": 50
                              },
                              "name": {
                                "description": "Name of the device.",
                                "type": "string",
                                "example": "Xiaomi",
                                "maxLength": 100
                              },
                              "purchase_price": {
                                "description": "Purchase price of the device.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "value": {
                                        "description": "Amount, numeric, with 2 or 3 decimals.",
                                        "type": "number",
                                        "example": 199.99
                                      },
                                      "currency": {
                                        "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                        "type": "string",
                                        "minLength": 3,
                                        "maxLength": 3,
                                        "example": "EUR"
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "currency"
                                    ]
                                  }
                                ]
                              },
                              "purchase_date": {
                                "description": "Date when the device was purchased\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                                "type": "string",
                                "format": "date-time",
                                "example": "2019-08-09T10:24:59.993Z"
                              },
                              "category": {
                                "description": "Category.",
                                "type": "string",
                                "example": "MOBILE",
                                "maxLength": 20
                              },
                              "brand": {
                                "description": "Manufacturor.",
                                "type": "string",
                                "example": "APPLE",
                                "maxLength": 100
                              },
                              "model": {
                                "description": "Model of the device.",
                                "type": "string",
                                "example": "IPHONE X",
                                "maxLength": 100
                              }
                            }
                          }
                        },
                        "additional_informations": {
                          "description": "Additional information of the policy.\n",
                          "type": "array",
                          "maxItems": 10,
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "description": "Information code.",
                                "type": "string",
                                "maxLength": 50
                              },
                              "value": {
                                "description": "Information value.",
                                "type": "string",
                                "maxLength": 255
                              }
                            },
                            "required": [
                              "code",
                              "value"
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      },
      "patch": {
        "summary": "Update policy without price modification",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 50
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 50
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 50
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "additional_information": {
                                "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                                "type": "array",
                                "maxItems": 10,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "description": "Information code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "value": {
                                      "description": "Information value.",
                                      "type": "string",
                                      "maxLength": 255
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "value"
                                  ]
                                },
                                "example": [
                                  {
                                    "code": "ID_NUMBER",
                                    "value": "AH15220CDH"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name"
                            ]
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "maxLength": 50,
                                "example": "FR"
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ],
                                "example": {
                                  "international_prefix": "0033",
                                  "number": "0651201190"
                                }
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "150 Avenue de Paris"
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "75001"
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Paris"
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "is_policy_beneficiary": {
                                "description": "Indicates if the policy holder is also a policy beneficiary.",
                                "type": "boolean"
                              },
                              "external_holder_id": {
                                "description": "External policy holder identifier.",
                                "type": "string",
                                "maxLength": 150,
                                "example": "ce856f06-1e25-446c-981c-24962aa13e13"
                              }
                            }
                          }
                        ],
                        "required": [
                          "spoken_language",
                          "email",
                          "is_policy_beneficiary"
                        ]
                      }
                    ]
                  },
                  "beneficiaries": {
                    "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "description": "Policy beneficiary.",
                      "allOf": [
                        {
                          "properties": {
                            "beneficiary_id": {
                              "description": "Beneficiary identifier.",
                              "type": "string",
                              "maxLength": 150,
                              "example": "ce856f07-1e25-446c-981c-24962aa13e14"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "example": "John",
                              "maxLength": 50
                            },
                            "middle_name": {
                              "description": "Middle name.",
                              "type": "string",
                              "maxLength": 50
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "example": "Doe",
                              "maxLength": 50
                            },
                            "birth_date": {
                              "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "1990-04-25"
                            },
                            "email": {
                              "description": "Email address.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "john.doe@mail.com"
                            },
                            "additional_information": {
                              "description": "Additional information filled by the partner if needed\n(example: ID card number, Serial number of the device...).\n",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Information code.",
                                    "type": "string",
                                    "maxLength": 50
                                  },
                                  "value": {
                                    "description": "Information value.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                },
                                "required": [
                                  "code",
                                  "value"
                                ]
                              },
                              "example": [
                                {
                                  "code": "ID_NUMBER",
                                  "value": "AH15220CDH"
                                }
                              ]
                            }
                          },
                          "required": [
                            "title",
                            "first_name",
                            "last_name"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Content of a policy update.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Patch successfully done (No content returned)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Request not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}/cancel": {
      "post": {
        "summary": "Cancel a policy according to its id.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "The policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancellation_date": {
                    "description": "Date when policy cancellation should be effective - ISO 8601 format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2018-08-20"
                  },
                  "cancellation_reason": {
                    "description": "Reason for policy cancellation.\n\nCOOLING_OFF_PERIOD : Cancelled within product cooling off period as requested by the policy holder\n\nPAYMENT_FAILURE : Cancelled in the event that payment has failed.\n\nDISPUTED : Cancelled as a dispute has taken place with the policy holder and the insurer and it has been agreed to cancel the policy.\n\nSPECIFIC_BENEFITS : Cancelled as the product benefits not meet the needs of the policy holder.\n\nCHANGE_OF_PLAN : Cancelled in the case of a plan change requested by the customer with re-subscription.\n\nDECLINED_ELECTRONIC_SIGNATURE: Cancelled when the customer has refused the electronic signature.\n",
                    "type": "string",
                    "enum": [
                      "COOLING_OFF_PERIOD",
                      "PAYMENT_FAILURE",
                      "DISPUTED",
                      "SPECIFIC_BENEFITS",
                      "CHANGE_OF_PLAN",
                      "DECLINED_ELECTRONIC_SIGNATURE"
                    ]
                  }
                },
                "required": [
                  "cancellation_date"
                ]
              }
            }
          },
          "description": "Information about cancellation.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refund_amount": {
                      "description": "The refund amount for the policy.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "value": {
                              "description": "Amount, numeric, with 2 or 3 decimals.",
                              "type": "number",
                              "example": 199.99
                            },
                            "currency": {
                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            }
                          },
                          "required": [
                            "value",
                            "currency"
                          ]
                        }
                      ]
                    },
                    "coverage_end_date": {
                      "description": "End date of policy coverage - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2018-08-20"
                    }
                  },
                  "required": [
                    "coverage_end_date"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}/certificate_requests": {
      "post": {
        "summary": "Generate a new certificate document and retrieve the resource url.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy resource url.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_id": {
                      "description": "Unique final policy identifier.",
                      "type": "string",
                      "example": "5ff96b27-cdc1-4090-b2f4-febfb1b1d08f",
                      "maxLength": 150
                    },
                    "certificate_url": {
                      "description": "Url of the certificate.",
                      "type": "string",
                      "maxLength": 2000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}/communication_requests": {
      "post": {
        "summary": "Sends a request for a communication with the customer.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "description": "Communication channel.",
                    "type": "string",
                    "enum": [
                      "EMAIL"
                    ],
                    "example": "EMAIL"
                  },
                  "communication_type": {
                    "description": "Type of communication to send.",
                    "type": "string",
                    "example": "WELCOME_PACK",
                    "maxLength": 50
                  },
                  "attachment_refs": {
                    "description": "Attachments to send with the communication.",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "type": "string",
                      "maxLength": 2000
                    }
                  }
                },
                "required": [
                  "channel",
                  "communication_type"
                ]
              }
            }
          },
          "description": "Mail information."
        },
        "responses": {
          "204": {
            "description": "Request treated."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}/finalize": {
      "post": {
        "summary": "Finalizes policy subscription.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_type": {
                    "description": "The Payment mode.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "VIRTUAL_CREDIT_CARD"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "payment_reference": {
                    "description": "The payment reference.",
                    "type": "string",
                    "example": "2c92c0f96af864e7016afe7aa28a6cbf",
                    "maxLength": 150
                  }
                }
              }
            }
          },
          "description": "Policy confirmation request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy confirmation response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_number": {
                      "description": "Final policy number.",
                      "type": "string",
                      "example": "SmarCZ000000073",
                      "maxLength": 150
                    },
                    "status": {
                      "description": "Policy's status details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy status.",
                          "properties": {
                            "value": {
                              "description": "Status value",
                              "type": "string",
                              "enum": [
                                "DRAFT",
                                "ACTIVE",
                                "CANCELLED"
                              ]
                            },
                            "reason": {
                              "description": "Status reason\nThe cancellation reason if the value equal to CANCELLED.\n",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "value"
                          ]
                        }
                      ],
                      "example": {
                        "value": "ACTIVE"
                      }
                    },
                    "attachments": {
                      "description": "Set of attachments provided with the policy.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                            "type": "string",
                            "maxLength": 50
                          },
                          "created_at": {
                            "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time"
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ],
                              "uniqueItems": true
                            },
                            "example": [
                              "CONFIRMATION_EMAIL",
                              "PRECONTRACTUAL_EMAIL"
                            ]
                          },
                          "technical_reference": {
                            "description": "The technical reference used to download the attachment.",
                            "type": "string",
                            "maxLength": 50
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policies/{policy_id}/payments": {
      "post": {
        "summary": "Update the policy with payment information.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Payment mode selected.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "VIRTUAL_CREDIT_CARD"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "periodicity": {
                    "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                    "type": "string",
                    "maxLength": 50,
                    "example": "R12/P0Y1M00D"
                  }
                }
              }
            }
          },
          "description": "Content of policy update.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy update response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Payment mode selected.",
                      "type": "string",
                      "enum": [
                        "CREDIT_CARD",
                        "DEBIT_CARD",
                        "VIRTUAL_CREDIT_CARD"
                      ],
                      "example": "CREDIT_CARD"
                    },
                    "periodicity": {
                      "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                      "type": "string",
                      "maxLength": 50,
                      "example": "R12/P0Y1M00D"
                    },
                    "description": {
                      "description": "Periodicity label.",
                      "type": "string",
                      "example": "MONTHLY",
                      "maxLength": 50
                    },
                    "payment_technical_information": {
                      "description": "Technical information, provided to the API caller to allow it to complet the payment.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Technical information for payment system access.\nThis information is provided to the API caller to allow it to complete the payment.\n",
                          "properties": {
                            "payment_gateway": {
                              "description": "Payment gateway code.",
                              "type": "string",
                              "maxLength": 50
                            },
                            "key": {
                              "description": "Public key generated for the subscription.",
                              "type": "string",
                              "maxLength": 2000
                            },
                            "signature": {
                              "description": "Digital signature generated for the subscription.",
                              "type": "string",
                              "maxLength": 2000
                            },
                            "token": {
                              "description": "Token generated for the subscription.",
                              "type": "string",
                              "maxLength": 2000
                            },
                            "tenant_id": {
                              "description": "ID of the Zuora tenant.",
                              "type": "string",
                              "maxLength": 50
                            },
                            "page_id": {
                              "description": "The page id.",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "payment_gateway",
                            "key",
                            "signature",
                            "token",
                            "tenant_id",
                            "page_id"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policy_snapshots": {
      "get": {
        "summary": "Retrieves policy snapshots summary.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API, the client has to precise in which environnement the information should be sent. This is the list of available environments for this endpoint in staging: - test --> Shared environment for functional testing purpose. - preprod --> Environment for pre production testing purpose.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "external_policy_id",
            "in": "query",
            "description": "External policy identifier.",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email of the policy holder.",
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address of the policy holder",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number of the policy holder.",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "name": "contracting_actor_name",
            "in": "query",
            "description": "Partner name having issued the policy.",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "policy_number",
            "in": "query",
            "description": "Policy number.",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name of the policy holder.",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name of the policy holder.",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "accomodation_street_address",
            "in": "query",
            "description": "Street address of the covered accomodation.",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "device_serial_number",
            "in": "query",
            "description": "IMEI or serial number of the device.",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "Postal code of the policy holder.",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "name": "policy_holder_id",
            "in": "query",
            "description": "Policy holder identifier.",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "external_policy_holder_id",
            "in": "query",
            "description": "External ID given to the policy holder by the partner.",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of policy snapshts summaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "policy_snapshot_id": {
                        "description": "Unique policy identifier.",
                        "type": "string",
                        "maxLength": 150
                      },
                      "policy_number": {
                        "description": "External identifier of the policy given by the partner.",
                        "type": "string",
                        "maxLength": 50
                      },
                      "purchase_date": {
                        "description": "Inception date,Start date for the policy (when the policy was purchased)\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                        "type": "string",
                        "format": "date-time",
                        "example": "2019-08-09T10:24:59.993Z"
                      },
                      "status": {
                        "type": "object",
                        "description": "Policy status.",
                        "properties": {
                          "value": {
                            "description": "Status value.",
                            "type": "string",
                            "enum": [
                              "DRAFT",
                              "ACTIVE",
                              "CANCELLED",
                              "PAYMENTERROR",
                              "EXPIRED",
                              "SUSPENDED"
                            ]
                          },
                          "reason": {
                            "description": "Status reason.",
                            "type": "string",
                            "maxLength": 255
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "payment_status": {
                        "type": "object",
                        "description": "Indicates the Balance of the Policy. It shows the negative amount of the policy until the money is collected from the customer (Transaction settled). Once the whole amount is collected, the Balance is 0.\n",
                        "properties": {
                          "has_missing_payment": {
                            "description": "False if the last payment is correctly processed, true if not.",
                            "type": "boolean",
                            "example": true
                          },
                          "has_bad_debt": {
                            "description": "True if the balance amount different than zero, false if not.",
                            "type": "boolean",
                            "example": true
                          },
                          "balance_update_date": {
                            "description": "Balance update Date\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-08-09T10:24:59.993Z"
                          },
                          "balance_amount": {
                            "description": "Payment balance, can be a credit balance or a debit balance.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "product": {
                        "type": "object",
                        "properties": {
                          "product_id": {
                            "description": "Partners' scheme code - Indicates to AXA the scheme this policy relates to.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "product_name": {
                            "description": "Name of the Product.",
                            "type": "string",
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "product_id",
                          "product_name"
                        ]
                      },
                      "policy_holder": {
                        "type": "object",
                        "properties": {
                          "policy_holder_id": {
                            "description": "Id given to the policy holder.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "external_policy_holder_id": {
                            "description": "External ID given to the policy holder by the partner.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "individual": {
                            "type": "object",
                            "properties": {
                              "first_name": {
                                "description": "Policy holder first name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Policy holder last name.",
                                "type": "string",
                                "maxLength": 100
                              }
                            }
                          },
                          "company": {
                            "type": "object",
                            "properties": {
                              "company_name": {
                                "description": "Name of the company",
                                "type": "string",
                                "maxLength": 100
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "policy_snapshot_id",
                      "policy_number",
                      "purchase_date"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/policy_snapshots/{policy_snapshot_id}": {
      "get": {
        "summary": "Retrieves a policy snapshot details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API, the client has to precise in which environnement the information should be sent. This is the list of available environments for this endpoint in staging: - test --> Shared environment for functional testing purpose. - preprod --> Environment for pre production testing purpose.\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "preprod"
              ]
            }
          },
          {
            "name": "policy_snapshot_id",
            "description": "Policy snapshot unique identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "external_policy_id": {
                      "description": "External policy identifier.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "policy_snapshot_id": {
                      "description": "Unique policy snapshot identifier.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "policy_number": {
                      "description": "External identifier of the policy given by the partner.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "sales_information": {
                      "type": "object",
                      "description": "Sales information.",
                      "properties": {
                        "sales_channel": {
                          "description": "The sales channel.",
                          "type": "string",
                          "enum": [
                            "SALES_POINT",
                            "CALL_CENTER",
                            "WEB"
                          ],
                          "example": "SALES_POINT"
                        },
                        "system": {
                          "description": "System that being used to sell the policy.",
                          "type": "string",
                          "enum": [
                            "NEO"
                          ],
                          "example": "NEO"
                        },
                        "contracting_actor_name": {
                          "description": "Partner name having issued the policy.",
                          "type": "string",
                          "maxLength": 100
                        },
                        "intermediary_name": {
                          "description": "Name of the intermediairy (broker or other intermediary).",
                          "type": "string",
                          "maxLength": 100
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "sales_id": {
                              "description": "Unique identifier of the sales.",
                              "type": "string",
                              "maxLength": 150
                            },
                            "sales_person": {
                              "description": "Name of the person closing the sale.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "shop_name": {
                              "description": "Name of the agency that has sold the policy.",
                              "type": "string",
                              "maxLength": 100
                            }
                          }
                        }
                      },
                      "required": [
                        "contracting_actor_name",
                        "system"
                      ]
                    },
                    "purchase_date": {
                      "description": "Date when the customer bought the policy\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2019-08-09T10:24:59.993Z"
                    },
                    "inception_date": {
                      "description": "Start date for the policy\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2019-08-09T10:24:59.993Z"
                    },
                    "effective_period": {
                      "description": "Cover start Date. Can be different to policy inception date. I.e. once the policy started, the customer would not\nbe allowed to make a claim for 14 days due to cooling off period. In this scenario the cover start date would\nbe 14 days after Inception Date\n",
                      "allOf": [
                        {
                          "description": "Validity period of the policy.",
                          "type": "object",
                          "properties": {
                            "start_date": {
                              "description": "Start date\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                              "type": "string",
                              "format": "date-time",
                              "example": "2019-08-09T10:24:59.993Z"
                            },
                            "end_date": {
                              "description": "End date\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                              "type": "string",
                              "format": "date-time",
                              "example": "2020-09-15T10:24:59.993Z"
                            }
                          }
                        }
                      ]
                    },
                    "cancellation_date": {
                      "description": "Start date of cancellation\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2019-08-09T10:24:59.993Z"
                    },
                    "status": {
                      "type": "object",
                      "description": "Policy status.",
                      "properties": {
                        "value": {
                          "description": "Status value.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE",
                            "CANCELLED",
                            "PAYMENTERROR",
                            "EXPIRED",
                            "SUSPENDED"
                          ]
                        },
                        "reason": {
                          "description": "Status reason.",
                          "type": "string",
                          "maxLength": 255
                        }
                      },
                      "required": [
                        "value"
                      ]
                    },
                    "payment_status": {
                      "type": "object",
                      "description": "Indicates the Balance of the Policy. It shows the negative amount of the policy until the money is collected from the customer (Transaction settled). Once the whole amount is collected, the Balance is 0.\n",
                      "properties": {
                        "has_missing_payment": {
                          "description": "False if the last payment is correctly processed, true if not.",
                          "type": "boolean",
                          "example": true
                        },
                        "has_bad_debt": {
                          "description": "True if the balance amount different than zero, false if not.",
                          "type": "boolean",
                          "example": true
                        },
                        "balance_update_date": {
                          "description": "Balance update Date\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-08-09T10:24:59.993Z"
                        },
                        "balance_amount": {
                          "description": "Payment balance, can be a credit balance or a debit balance.",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "product_id": {
                          "description": "Or Partners' scheme code - Indicates to AXA the scheme this policy relates to.",
                          "type": "string",
                          "maxLength": 150
                        },
                        "product_name": {
                          "description": "Name of the product.",
                          "type": "string",
                          "maxLength": 100
                        },
                        "product_version": {
                          "description": "Version of the product.",
                          "type": "string",
                          "maxLength": 20
                        }
                      },
                      "required": [
                        "product_id",
                        "product_name"
                      ]
                    },
                    "devices": {
                      "description": "List of devices.",
                      "type": "array",
                      "maxItems": 20,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "serial_number": {
                            "description": "IMEI or serial number of the device.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "name": {
                            "description": "Name of the device.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "purchase_price": {
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "purchase_date": {
                            "description": "Date when the device was purchased\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-08-09T10:24:59.993Z"
                          },
                          "category": {
                            "description": "Category.",
                            "type": "string",
                            "maxLength": 20
                          },
                          "brand": {
                            "description": "Manufacturor.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "model": {
                            "description": "Model of the device.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "registration_date": {
                            "description": "Registration date of the device\nISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.SSSSSSSZ'\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-08-09T10:24:59.993Z"
                          },
                          "excess_label": {
                            "description": "Device excess label.",
                            "type": "string",
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    "policy_holder": {
                      "type": "object",
                      "properties": {
                        "policy_holder_id": {
                          "description": "Id given to the policy holder.",
                          "type": "string",
                          "maxLength": 150
                        },
                        "external_policy_holder_id": {
                          "description": "External ID given to the policy holder by the partner.",
                          "type": "string",
                          "maxLength": 150
                        },
                        "individual": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "gender": {
                              "description": "Gender of the policy holder (Female or Male).",
                              "type": "string",
                              "enum": [
                                "FM",
                                "ML"
                              ],
                              "minLength": 2,
                              "maxLength": 2,
                              "example": "ML"
                            },
                            "first_name": {
                              "description": "Policy holder first name.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Policy holder last name.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "birth_date": {
                              "description": "Birth date of the policy holder\nISO 8601 format (YYYY-MM-DD)\n",
                              "type": "string",
                              "format": "date",
                              "example": "1983-09-03"
                            },
                            "birth_place": {
                              "description": "Birth place of the policy holder.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address of the policy holder.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "123 Some Street Name"
                                    },
                                    "postal_code": {
                                      "description": "Postal code of the policy holder.",
                                      "type": "string",
                                      "maxLength": 20,
                                      "example": "75001"
                                    },
                                    "city": {
                                      "description": "City of the policy holder.",
                                      "type": "string",
                                      "maxLength": 100,
                                      "example": "PARIS"
                                    },
                                    "country": {
                                      "description": "Country of the policy holder.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "state": {
                                      "description": "State of the policy holder.",
                                      "type": "string",
                                      "maxLength": 100
                                    }
                                  }
                                }
                              ]
                            },
                            "person_registration": {
                              "description": "List of person regristration related to the policy holder.",
                              "type": "array",
                              "maxItems": 5,
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.",
                                    "type": "string",
                                    "enum": [
                                      "ID_CARD",
                                      "PASSPORT",
                                      "DRIVER_LICENSE",
                                      "TAX_REGISTRATION",
                                      "RESIDENCE_PERMIT"
                                    ]
                                  },
                                  "value": {
                                    "description": "Number of policy holder identification document.",
                                    "type": "string",
                                    "maxLength": 20
                                  }
                                },
                                "required": [
                                  "registration_type",
                                  "value"
                                ]
                              }
                            },
                            "nationality": {
                              "description": "Nationality, ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "spoken_languages": {
                              "description": "The languages spoken by the policy holder.\nList of ISO 639-1 codes.\n",
                              "type": "array",
                              "maxItems": 5,
                              "items": {
                                "type": "string",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "example": [
                                "wo",
                                "tt",
                                "en"
                              ]
                            }
                          }
                        },
                        "company": {
                          "type": "object",
                          "properties": {
                            "company_name": {
                              "description": "Name of the company",
                              "type": "string",
                              "maxLength": 100
                            }
                          }
                        },
                        "address": {
                          "type": "object",
                          "properties": {
                            "street_address": {
                              "description": "Street address of the policy holder.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "123 Some Street Name"
                            },
                            "postal_code": {
                              "description": "Postal code of the policy holder.",
                              "type": "string",
                              "maxLength": 20,
                              "example": "75001"
                            },
                            "city": {
                              "description": "City of the policy holder.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "PARIS"
                            },
                            "country": {
                              "description": "Country of the policy holder.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "state": {
                              "description": "State of the policy holder.",
                              "type": "string",
                              "maxLength": 100
                            }
                          }
                        },
                        "phones": {
                          "description": "List of phone number of the policy holder.",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 5,
                          "items": {
                            "type": "object",
                            "properties": {
                              "international_prefix": {
                                "description": "International prefix of the phone number of the policy holder.",
                                "type": "string",
                                "maxLength": 5
                              },
                              "number": {
                                "description": "Phone number of the policy holder.",
                                "type": "string",
                                "maxLength": 20
                              }
                            },
                            "required": [
                              "number"
                            ]
                          }
                        },
                        "email": {
                          "description": "Email of the policy holder.",
                          "type": "string",
                          "format": "email"
                        }
                      }
                    }
                  },
                  "required": [
                    "external_policy_id",
                    "policy_snapshot_id",
                    "policy_number",
                    "purchase_date",
                    "inception_date"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found (policy snapshot not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/consumer_electronics/vexp/quotes_requests": {
      "post": {
        "summary": "Gets quotes for consumer electronics insurances.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-quote-mode",
            "description": "Quote mode, can be used to get a quote on draft or test mode.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "TEST",
                "LIVE"
              ],
              "default": "LIVE"
            }
          }
        ],
        "requestBody": {
          "description": "Content of quotes request.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "context": {
                        "description": "Context of the request.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "country": {
                                "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                                "type": "string",
                                "example": "FR",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "currency": {
                                "description": "Customer currency, ISO 4217 format (3 letter code).",
                                "type": "string",
                                "example": "EUR",
                                "maxLength": 3
                              },
                              "intermediary_code": {
                                "description": "Code of business intermediary.",
                                "type": "string",
                                "example": "NDEL-001",
                                "maxLength": 50
                              }
                            },
                            "required": [
                              "currency"
                            ]
                          }
                        ]
                      },
                      "product_criteria": {
                        "description": "Product criteria.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "product_type": {
                                "description": "Product type, indicates if the customer wants insurance for multi\ndevices or only one.\n\nIf product type is Mono appliance, then \"Devices Criteria\" is mandatory.\n\nMULTI : Multi appliance\n\nMONO : Mono appliance\n",
                                "type": "string",
                                "enum": [
                                  "MULTI",
                                  "MONO"
                                ],
                                "example": "MONO"
                              },
                              "catalog": {
                                "description": "Selected product catalog.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "description": "Catalog code.",
                                        "type": "string",
                                        "example": "PRTNCATALOG",
                                        "maxLength": 100
                                      },
                                      "version": {
                                        "description": "Catalog version.",
                                        "type": "string",
                                        "example": "v2",
                                        "maxLength": 10
                                      }
                                    },
                                    "required": [
                                      "code",
                                      "version"
                                    ]
                                  }
                                ]
                              }
                            },
                            "required": [
                              "catalog"
                            ]
                          }
                        ]
                      },
                      "device_criteria": {
                        "description": "Device criteria.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "device_scan_id": {
                                "description": "Unique device scan identifier (could be provided by Hayla).",
                                "type": "string",
                                "format": "uuid",
                                "maxLength": 150,
                                "example": "4d725c61-dc3d-4273-ba51-78698a593d5f"
                              },
                              "categorization_level_1": {
                                "description": "First level of device categorization, The device family regardless the category. It can be:\n  - BROWN: Audio and Video;\n  - DIY: Do It Yourself;\n  - GREEN: Gardening;\n  - GREY: Telecommunication and Multimedia;\n  - MOBILE_CONNECT_GADGET: Mobile phone / Gadgets / Connected devices;\n  - WHITE: Washing, Refrigeration and Cooking.\n",
                                "type": "string",
                                "enum": [
                                  "BROWN",
                                  "DIY",
                                  "GREEN",
                                  "GREY",
                                  "MOBILE_CONNECT_GADGET",
                                  "WHITE"
                                ],
                                "example": "MOBILE_CONNECT_GADGET"
                              },
                              "categorization_level_2": {
                                "description": "Second level of device categorization (HEAVY APPLIANCE, SMALL APPLIANCE, VIDEO, SMARTPHONE...). The device category.\n",
                                "type": "string",
                                "example": "SMARTPHONE",
                                "maxLength": 100
                              },
                              "brand": {
                                "description": "Brand of the device.",
                                "type": "string",
                                "example": "APPLE",
                                "maxLength": 100
                              },
                              "model": {
                                "description": "Model of the device.",
                                "type": "string",
                                "example": "IPHONE X",
                                "maxLength": 100
                              },
                              "purchase_price": {
                                "description": "Total amount of purchase price, numeric with 2 decimals.",
                                "type": "number",
                                "example": 950
                              },
                              "purchase_date": {
                                "description": "Date of the purchase - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "2018-11-20"
                              },
                              "type_allocation_code": {
                                "description": "The Type Allocation Code (TAC) is a code represented by the first 8\nof the 15 digits of the IMEI code or the 16 digits of the IMEI-SV code.\n",
                                "type": "string",
                                "maxLength": 8,
                                "minLength": 8,
                                "example": "01124500"
                              },
                              "imei_number": {
                                "description": "International Mobile Equipment Identity (IMEI) of the device.",
                                "type": "string",
                                "example": "011245009753382",
                                "maxLength": 15
                              },
                              "storage_capacity": {
                                "description": "The amount of data an internal storage device can hold.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "description": "Measured capacity.",
                                        "type": "number",
                                        "example": 128
                                      },
                                      "unit": {
                                        "description": "Unit of the measured capacity. Available values:\n- kBy: kilobytes;\n- MBy: megabytes;\n- GBy: gigabytes;\n- TBy: terabytes.\n",
                                        "type": "string",
                                        "format": "Unified Code for Units of Measure (UCUM) in case sensitive.",
                                        "enum": [
                                          "kBy",
                                          "MBy",
                                          "GBy",
                                          "TBy"
                                        ],
                                        "example": "GBy"
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "unit"
                                    ]
                                  }
                                ]
                              },
                              "is_purchased_new": {
                                "description": "Indicates if the device is purchased new.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "categorization_level_2"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "context",
                      "product_criteria"
                    ]
                  },
                  {
                    "type": "object",
                    "description": "Redo quoting resquest.",
                    "properties": {
                      "quote_code": {
                        "description": "An encoded technical code containing the quoting information for a product.",
                        "type": "string",
                        "maxLength": 2000,
                        "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                      }
                    },
                    "required": [
                      "quote_code"
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "context": {
                      "description": "Context of the quote request.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "country": {
                              "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "currency": {
                              "description": "Customer currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "example": "EUR",
                              "maxLength": 3
                            },
                            "intermediary_code": {
                              "description": "Code of business intermediary.",
                              "type": "string",
                              "example": "NDEL-001",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "currency"
                          ]
                        }
                      ]
                    },
                    "quote_expire_at": {
                      "description": "Date and time of quotes expiration.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                      "type": "string",
                      "format": "date-time",
                      "example": "2019-03-22T10:59:00Z"
                    },
                    "products": {
                      "description": "Products list.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Product information.",
                        "properties": {
                          "product_code": {
                            "description": "Product code.",
                            "type": "string",
                            "example": "PRDADVANCE",
                            "maxLength": 100
                          },
                          "quote_code": {
                            "description": "Quote code.",
                            "type": "string",
                            "example": "eJxtUFtP2zAY/SvIz04Vp0lIeUNoMDQE05j2AELWF/tLZsl1Ml+6dlX",
                            "maxLength": 2000
                          },
                          "name": {
                            "description": "Product name.",
                            "type": "string",
                            "example": "Advanced",
                            "maxLength": 255
                          },
                          "description": {
                            "description": "Product marketing description.",
                            "type": "string",
                            "example": "Advanced for more guarantees.",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Product type.\nMULTI : Multi appliance\nMONO : Mono appliance\n",
                            "type": "string",
                            "enum": [
                              "MULTI",
                              "MONO"
                            ],
                            "example": "MONO"
                          },
                          "coverages": {
                            "description": "Set of coverages included in the product.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "properties": {
                                "label": {
                                  "description": "Coverage label.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "description": {
                                  "description": "Coverage description.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "limits": {
                                  "description": "List of limits of the Coverage.",
                                  "type": "array",
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "description": "Coverage type.",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "Repair"
                                      },
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "Oprava"
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                },
                                "exclusions": {
                                  "description": "List of exclusions.",
                                  "type": "array",
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "description": "Coverage type.",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "Repair"
                                      },
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "Oprava"
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                },
                                "excess": {
                                  "description": "Garantee Exceess information.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "10% of the reparation amount"
                                },
                                "benefits": {
                                  "description": "List of benefits.",
                                  "type": "array",
                                  "maxItems": 50,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "description": "Coverage type.",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "Repair"
                                      },
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "Oprava"
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                },
                                "external_product_identifier": {
                                  "description": "External product Identifier.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Norton123"
                                }
                              },
                              "required": [
                                "label"
                              ]
                            }
                          },
                          "prices": {
                            "description": "List of price formulas of the product.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Set of prices.",
                              "properties": {
                                "formula": {
                                  "description": "Price formula reference.",
                                  "type": "string",
                                  "example": "12-MONTHS",
                                  "maxLength": 50
                                },
                                "total_taxes": {
                                  "description": "Total amount of taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 50.1
                                },
                                "premium_before_discount_excl_tax": {
                                  "description": "Premium not discounted excluding taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 150.2
                                },
                                "price_after_discount_incl_tax": {
                                  "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 250.3
                                },
                                "number_of_free_months": {
                                  "description": "Number of free month(s)",
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 12,
                                  "example": 0
                                },
                                "coverages_class_prices": {
                                  "description": "List of prices splited by coverage class.",
                                  "type": "array",
                                  "maxItems": 50,
                                  "items": {
                                    "description": "Prices of coverage class.",
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "description": "Code of coverage class.",
                                        "type": "string",
                                        "example": "Medical",
                                        "maxLength": 150
                                      },
                                      "label": {
                                        "description": "Label of coverage class.",
                                        "type": "string",
                                        "example": "Medical coverage.",
                                        "maxLength": 255
                                      },
                                      "total_taxes": {
                                        "description": "Total amount of taxes of the coverage class, numeric with 2 decimals.",
                                        "type": "number",
                                        "example": 10.02
                                      },
                                      "premium_after_discount_excl_tax": {
                                        "description": "Premium discounted of the coverage class, excluding taxes, numeric with 2 decimals.",
                                        "type": "number"
                                      }
                                    }
                                  }
                                },
                                "payment_periodicities": {
                                  "description": "List of payment periodicities.",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "periodicity": {
                                        "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                        "type": "string",
                                        "example": "R12/P1M",
                                        "maxLength": 50
                                      },
                                      "description": {
                                        "description": "Periodicity label.",
                                        "type": "string",
                                        "example": "MONTHLY",
                                        "maxLength": 25
                                      },
                                      "amount_per_period": {
                                        "description": "The amount of the payment period.",
                                        "type": "number",
                                        "example": 71.87
                                      }
                                    },
                                    "required": [
                                      "periodicity",
                                      "description",
                                      "amount_per_period"
                                    ]
                                  },
                                  "maxItems": 50
                                },
                                "taxes_breakdown": {
                                  "type": "array",
                                  "maxItems": 50,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "The tax code.",
                                        "example": "IPT",
                                        "maxLength": 20
                                      },
                                      "amount": {
                                        "description": "The tax amount.",
                                        "example": {
                                          "value": 0.24,
                                          "currency": "EUR"
                                        },
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                              "value": {
                                                "description": "Amount, numeric, with 2 or 3 decimals.",
                                                "type": "number",
                                                "example": 199.99
                                              },
                                              "currency": {
                                                "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                "type": "string",
                                                "minLength": 3,
                                                "maxLength": 3,
                                                "example": "EUR"
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "currency"
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "code",
                                      "amount"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "formula",
                                "price_after_discount_incl_tax"
                              ]
                            }
                          },
                          "covered_devices": {
                            "description": "List of device types covered by the product.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Device covered by the product.",
                                  "properties": {
                                    "device_type": {
                                      "description": "Type of the device.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "SMARTPHONE"
                                    },
                                    "limits": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "maximum_number_of_device"
                                          ],
                                          "properties": {
                                            "maximum_number_of_device": {
                                              "description": "Maximum number of device covered by the product.",
                                              "type": "integer",
                                              "example": 2
                                            },
                                            "minimum_number_of_device": {
                                              "description": "Minimum number of device covered by the product.",
                                              "type": "integer",
                                              "example": 1
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "description": "Device covered by the product.",
                                          "required": [
                                            "has_unlimited_number_of_device"
                                          ],
                                          "properties": {
                                            "has_unlimited_number_of_device": {
                                              "description": "Indicates unlimited number protected by the product.",
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "attachments": {
                            "description": "List of document linked to the product.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "description": "Attachment information.",
                              "properties": {
                                "name": {
                                  "description": "Attached document name.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "content_url": {
                                  "description": "URL to download the document.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "type": {
                                  "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "name",
                                "content_url",
                                "type"
                              ]
                            }
                          },
                          "consents": {
                            "description": "Set of consents to be requested to the customer.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Consent to be requested to the customer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Disclaimer to display to the customer.",
                                  "properties": {
                                    "code": {
                                      "description": "Code.",
                                      "type": "string",
                                      "maxLength": 150
                                    },
                                    "text": {
                                      "description": "Complet text.",
                                      "type": "string",
                                      "maxLength": 255
                                    },
                                    "type": {
                                      "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                      "type": "string",
                                      "enum": [
                                        "PERSONAL_DATA",
                                        "SUBSCRIPTION",
                                        "PAYMENT",
                                        "ALL"
                                      ],
                                      "example": "PERSONAL_DATA"
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "text"
                                  ]
                                },
                                {
                                  "properties": {
                                    "is_mandatory": {
                                      "description": "Indicates if the consent is mandatory.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "is_mandatory"
                              ]
                            }
                          },
                          "disclaimers": {
                            "description": "Set of messages to be displayed to the customer.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Disclaimer to display to the customer.",
                              "properties": {
                                "code": {
                                  "description": "Code.",
                                  "type": "string",
                                  "maxLength": 150
                                },
                                "text": {
                                  "description": "Complet text.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "type": {
                                  "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                  "type": "string",
                                  "enum": [
                                    "PERSONAL_DATA",
                                    "SUBSCRIPTION",
                                    "PAYMENT",
                                    "ALL"
                                  ],
                                  "example": "PERSONAL_DATA"
                                }
                              },
                              "required": [
                                "code",
                                "text"
                              ]
                            }
                          },
                          "payment_periodicities": {
                            "description": "List of payment periodicities.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Periodicity of the payment.",
                              "properties": {
                                "value": {
                                  "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                  "type": "string",
                                  "example": "R12/P1M",
                                  "maxLength": 25
                                },
                                "label": {
                                  "description": "Label.",
                                  "type": "string",
                                  "example": "Monthly.",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "value"
                              ]
                            }
                          }
                        },
                        "required": [
                          "product_code",
                          "quote_code",
                          "prices",
                          "coverages"
                        ]
                      }
                    },
                    "payment_modes": {
                      "description": "List of authorized means of payment.",
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                        "type": "object",
                        "properties": {
                          "types": {
                            "description": "List of payment mode accepted by the provider.",
                            "type": "array",
                            "maxItems": 6,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFERT",
                                "VIRTUAL_CREDIT_CARD",
                                "SEPA",
                                "PAYPAL"
                              ]
                            }
                          },
                          "provider": {
                            "type": "object",
                            "description": "Payment service provider.",
                            "properties": {
                              "id": {
                                "description": "Unique identifier of payment provider.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "label": {
                                "description": "Label.",
                                "type": "string",
                                "maxLength": 100
                              }
                            },
                            "required": [
                              "id",
                              "label"
                            ]
                          }
                        },
                        "required": [
                          "types",
                          "provider"
                        ]
                      }
                    },
                    "is_pre_contract_required": {
                      "description": "Indicates if a pre-contractual communication is required before subscription validation.",
                      "type": "boolean",
                      "default": false
                    },
                    "is_premium_collected_by_axa": {
                      "description": "Indicates if the payment on policy subscription shoud be collected by AXA.",
                      "type": "boolean",
                      "example": true
                    },
                    "device": {
                      "description": "The insured device.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "brand": {
                              "description": "Brand of the device.",
                              "type": "string",
                              "example": "APPLE",
                              "maxLength": 50
                            },
                            "model": {
                              "description": "Model of the device.",
                              "type": "string",
                              "example": "IPHONE X",
                              "maxLength": 50
                            },
                            "type_allocation_code": {
                              "description": "The Type Allocation Code (TAC) is a code represented by the first 8\nof the 15 digits of the IMEI code or the 16 digits of the IMEI-SV code.\n",
                              "type": "string",
                              "maxLength": 8,
                              "minLength": 8,
                              "example": "01124500"
                            },
                            "imei_number": {
                              "description": "International Mobile Equipment Identity (IMEI) of the device.",
                              "type": "string",
                              "example": "011245009753382",
                              "maxLength": 15
                            }
                          },
                          "required": [
                            "brand",
                            "model"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "context",
                    "quote_expire_at",
                    "products",
                    "is_premium_collected_by_axa"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.quotesrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.quotesrequests.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/individual/travel/vexp/policy_snapshots/import": {
      "post": {
        "summary": "Bulk Create or replace policy snapshots.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 100,
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "policy_number",
                        "partner",
                        "policy_information",
                        "policy_holder",
                        "beneficiaries"
                      ],
                      "properties": {
                        "policy_number": {
                          "description": "Policy number.",
                          "type": "string",
                          "maxLength": 50,
                          "example": "3388509-86020"
                        },
                        "partner": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "partner_name"
                              ],
                              "properties": {
                                "partner_name": {
                                  "description": "Partner name or broker name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "COOP1"
                                },
                                "partner_contract_number": {
                                  "description": "Partner contract number",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "32"
                                },
                                "partner_id": {
                                  "description": "Identifier of the partner",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "1"
                                }
                              }
                            }
                          ]
                        },
                        "intermediary": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "intermediary_name"
                              ],
                              "properties": {
                                "intermediary_name": {
                                  "description": "Name of the intermediary",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "John"
                                }
                              }
                            }
                          ]
                        },
                        "policy_information": {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "policy_type": {
                                  "description": "Type of policy",
                                  "type": "string",
                                  "example": "Single or multi-travel",
                                  "maxLength": 100
                                },
                                "policy_subtype": {
                                  "description": "Sub type of the policy, Individual or Family or Backpackers.",
                                  "type": "string",
                                  "example": "Individual",
                                  "maxLength": 50
                                },
                                "purchase_date": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Purchase date of the policy\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                  "example": "2019-08-09T10:24:59.993Z"
                                },
                                "inception_date": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Inception date, start date for the policy.\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                  "example": "2019-08-09T10:24:59.993Z"
                                },
                                "cancellation_date": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Cancellation date of the policy\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                  "example": "2019-09-09T10:24:59.993Z"
                                },
                                "max_trip_duration": {
                                  "description": "Maximum trip duration covered.\nISO 8601 Duration format.\nP(n)Y(n)M(n)DT(n)H(n)M(n)S\nWhere (n) is replaced by the value for each of the date and time elements that follow the (n)\n",
                                  "type": "string",
                                  "example": "P5Y8M4D",
                                  "maxLength": 20
                                },
                                "effective_period": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "start_date"
                                      ],
                                      "properties": {
                                        "start_date": {
                                          "description": "Start date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                          "type": "string",
                                          "format": "date-time",
                                          "example": "2019-08-09T10:24:59.993Z"
                                        },
                                        "end_date": {
                                          "description": "End date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                          "type": "string",
                                          "format": "date-time",
                                          "example": "2019-10-09T10:24:59.993Z"
                                        }
                                      }
                                    }
                                  ],
                                  "description": "Cover start date. Can be different to policy inception date. I.e. once the policy started, the customer would not\nbe allowed to make a claim for 14 days due to cooling off period. In this scenario the cover start date would\nbe 14 days after `inception_date`\n"
                                },
                                "package": {
                                  "description": "Product and eventual options.",
                                  "allOf": [
                                    {
                                      "description": "Package product and eventual options.",
                                      "type": "object",
                                      "properties": {
                                        "package_id": {
                                          "description": "Package identifier of the policy.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "string"
                                        },
                                        "external_package_name": {
                                          "description": "Package name of the policy as defined by the partner.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "string"
                                        },
                                        "external_product_name": {
                                          "description": "External product name as defined by the partner.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "string"
                                        }
                                      },
                                      "required": [
                                        "package_id"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "package"
                              ]
                            }
                          ]
                        },
                        "policy_holder": {
                          "description": "Entity holder of the policy.",
                          "allOf": [
                            {
                              "description": "Product subscribed on the policy.",
                              "type": "object",
                              "required": [
                                "individual"
                              ],
                              "properties": {
                                "nationality": {
                                  "description": "Nationality of the policy holder.\nISO 3166-1 alpha-2 codes\n",
                                  "type": "string",
                                  "maxLength": 2,
                                  "minLength": 2,
                                  "example": "FR"
                                },
                                "phones": {
                                  "description": "Phones of the policy Holder",
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "required": [
                                          "number"
                                        ],
                                        "properties": {
                                          "international_prefix": {
                                            "description": "Prefix of the telephone number.",
                                            "type": "string",
                                            "maxLength": 5,
                                            "example": "+44"
                                          },
                                          "number": {
                                            "description": "Phone number.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "123456789"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "maxItems": 5
                                },
                                "email": {
                                  "description": "Email of the policy holder.",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Address of the individual.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "postal_code"
                                      ],
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "123 Some Street Name"
                                        },
                                        "postal_code": {
                                          "description": "Postal code.",
                                          "type": "string",
                                          "maxLength": 20,
                                          "example": "75001"
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "PARIS"
                                        },
                                        "country": {
                                          "description": "Country.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        },
                                        "state": {
                                          "description": "State.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "string"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "individual": {
                                  "description": "Individual that is the holder of the policy.",
                                  "allOf": [
                                    {
                                      "description": "Individual in the policy.",
                                      "type": "object",
                                      "required": [
                                        "last_name",
                                        "first_name"
                                      ],
                                      "properties": {
                                        "title": {
                                          "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                          "type": "string",
                                          "enum": [
                                            "MR",
                                            "MS",
                                            "MISS",
                                            "DR",
                                            "PR"
                                          ],
                                          "example": "MR"
                                        },
                                        "first_name": {
                                          "description": "First name of the individual.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Frank"
                                        },
                                        "last_name": {
                                          "description": "Last name of the individual.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Bernado"
                                        },
                                        "birth_date": {
                                          "description": "Birth date of the individual\nISO 8601 format (YYYY-MM-DD)\n",
                                          "type": "string",
                                          "format": "date",
                                          "example": "1983-09-03"
                                        },
                                        "identification_document": {
                                          "description": "Identification document of the individual.",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "registration_type",
                                                "value"
                                              ],
                                              "properties": {
                                                "registration_type": {
                                                  "description": "Type of person registration.",
                                                  "type": "string",
                                                  "enum": [
                                                    "DRIVER_LICENSE",
                                                    "ID_CARD",
                                                    "PASSPORT",
                                                    "RESIDENCE_PERMIT",
                                                    "TAX_REGISTRATION"
                                                  ]
                                                },
                                                "value": {
                                                  "description": "Value of the registration.",
                                                  "type": "string",
                                                  "maxLength": 20
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "spoken_languages": {
                                          "description": "The languages spoken by the individual.\nList of ISO 639-1 codes.\n",
                                          "type": "array",
                                          "maxItems": 5,
                                          "items": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 2
                                          },
                                          "example": [
                                            "wo",
                                            "tt",
                                            "en"
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "company": {
                                  "description": "Company that is the holder of the policy.",
                                  "allOf": [
                                    {
                                      "description": "Company.",
                                      "type": "object",
                                      "properties": {
                                        "company_name": {
                                          "description": "Name of the company.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "string"
                                        }
                                      },
                                      "required": [
                                        "company_name"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "beneficiaries": {
                          "type": "array",
                          "maxItems": 100,
                          "description": "List of the beneficiaries of the policy.",
                          "items": {
                            "description": "Product subscribed on the policy.",
                            "type": "object",
                            "required": [
                              "individual"
                            ],
                            "properties": {
                              "nationality": {
                                "description": "Nationality of the beneficiary\nISO 3166-1 alpha-2 codes\n",
                                "type": "string",
                                "maxLength": 2,
                                "minLength": 2,
                                "example": "FR"
                              },
                              "phones": {
                                "description": "Phones of the beneficiary",
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "number"
                                      ],
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix of the telephone number.",
                                          "type": "string",
                                          "maxLength": 5,
                                          "example": "+44"
                                        },
                                        "number": {
                                          "description": "Phone number.",
                                          "type": "string",
                                          "maxLength": 20,
                                          "example": "123456789"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "maxItems": 5
                              },
                              "email": {
                                "description": "Email of the beneficiary.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ]
                              },
                              "address": {
                                "description": "Address of the beneficiary.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "postal_code"
                                    ],
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "123 Some Street Name"
                                      },
                                      "postal_code": {
                                        "description": "Postal code.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "75001"
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "PARIS"
                                      },
                                      "country": {
                                        "description": "Country.\nCountry ISO-3166-1 alpha-2 format (2 letter codes).\n",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      },
                                      "state": {
                                        "description": "State.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "string"
                                      }
                                    }
                                  }
                                ]
                              },
                              "individual": {
                                "description": "Individual that is the benefeciary of the policy.",
                                "allOf": [
                                  {
                                    "description": "Individual in the policy.",
                                    "type": "object",
                                    "required": [
                                      "last_name",
                                      "first_name"
                                    ],
                                    "properties": {
                                      "title": {
                                        "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                        "type": "string",
                                        "enum": [
                                          "MR",
                                          "MS",
                                          "MISS",
                                          "DR",
                                          "PR"
                                        ],
                                        "example": "MR"
                                      },
                                      "first_name": {
                                        "description": "First name of the individual.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Frank"
                                      },
                                      "last_name": {
                                        "description": "Last name of the individual.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Bernado"
                                      },
                                      "birth_date": {
                                        "description": "Birth date of the individual\nISO 8601 format (YYYY-MM-DD)\n",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1983-09-03"
                                      },
                                      "identification_document": {
                                        "description": "Identification document of the individual.",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "required": [
                                              "registration_type",
                                              "value"
                                            ],
                                            "properties": {
                                              "registration_type": {
                                                "description": "Type of person registration.",
                                                "type": "string",
                                                "enum": [
                                                  "DRIVER_LICENSE",
                                                  "ID_CARD",
                                                  "PASSPORT",
                                                  "RESIDENCE_PERMIT",
                                                  "TAX_REGISTRATION"
                                                ]
                                              },
                                              "value": {
                                                "description": "Value of the registration.",
                                                "type": "string",
                                                "maxLength": 20
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "spoken_languages": {
                                        "description": "The languages spoken by the individual.\nList of ISO 639-1 codes.\n",
                                        "type": "array",
                                        "maxItems": 5,
                                        "items": {
                                          "type": "string",
                                          "minLength": 2,
                                          "maxLength": 2
                                        },
                                        "example": [
                                          "wo",
                                          "tt",
                                          "en"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "company": {
                                "description": "Company that is the benefeciary of the policy.",
                                "allOf": [
                                  {
                                    "description": "Company.",
                                    "type": "object",
                                    "properties": {
                                      "company_name": {
                                        "description": "Name of the company.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "string"
                                      }
                                    },
                                    "required": [
                                      "company_name"
                                    ]
                                  }
                                ]
                              },
                              "is_policy_holder": {
                                "description": "Indicates if the beneficiary is also the policy holder.",
                                "type": "boolean"
                              },
                              "medical_conditions": {
                                "description": "List of the medical conditions selected",
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "condition_name"
                                      ],
                                      "properties": {
                                        "condition_name": {
                                          "description": "Condition of the deseases.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Broken arm."
                                        },
                                        "cover_period": {
                                          "description": "Cover period of the medical condition",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "start_date"
                                              ],
                                              "properties": {
                                                "start_date": {
                                                  "description": "Start date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                                  "type": "string",
                                                  "format": "date-time",
                                                  "example": "2019-08-09T10:24:59.993Z"
                                                },
                                                "end_date": {
                                                  "description": "End date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                                  "type": "string",
                                                  "format": "date-time",
                                                  "example": "2019-10-09T10:24:59.993Z"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "maxItems": 50
                              },
                              "optional_covers": {
                                "type": "array",
                                "description": "List of optional covers for policy.",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "optional_cover_name"
                                      ],
                                      "properties": {
                                        "optional_cover_name": {
                                          "description": "Selected option name",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Winter Sports"
                                        },
                                        "external_reference": {
                                          "description": "Name of the external reference related to the optional cover on the original policy.",
                                          "type": "string",
                                          "maxLength": 100,
                                          "example": "Travel Security"
                                        },
                                        "limit_amount": {
                                          "description": "Maximum amount for the optional cover",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "value": {
                                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                                  "type": "number",
                                                  "example": 199.99
                                                },
                                                "currency": {
                                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                  "type": "string",
                                                  "minLength": 3,
                                                  "maxLength": 3,
                                                  "example": "EUR"
                                                }
                                              },
                                              "required": [
                                                "value",
                                                "currency"
                                              ]
                                            }
                                          ]
                                        },
                                        "cover_period": {
                                          "description": "Cover period of the optional cover",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "start_date"
                                              ],
                                              "properties": {
                                                "start_date": {
                                                  "description": "Start date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                                  "type": "string",
                                                  "format": "date-time",
                                                  "example": "2019-08-09T10:24:59.993Z"
                                                },
                                                "end_date": {
                                                  "description": "End date\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                                                  "type": "string",
                                                  "format": "date-time",
                                                  "example": "2019-10-09T10:24:59.993Z"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "maxItems": 50
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "description": "Policy snapshots details",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Imported policy snapshots.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "successfully_integrated_entries_count",
                    "rejected_entries_count",
                    "updated_at"
                  ],
                  "properties": {
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The instant the provider has been last updated.\nISO 8601 format: 'yyyy-MM-ddTHH:mm:ss.FFFFFFFZ'\n",
                      "example": "2019-08-09T10:24:59.993Z"
                    },
                    "rejected_entries_count": {
                      "description": "Number of rejected entries.",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "example": 1
                    },
                    "successfully_integrated_entries_count": {
                      "description": "Number of successfully integrated entries.",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "example": 2
                    },
                    "rejection_reasons": {
                      "description": "Reasons of entries' rejections.",
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Reason of the entry rejection.",
                        "properties": {
                          "entry_index": {
                            "description": "Index of entry.",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 99,
                            "example": 0
                          },
                          "reason": {
                            "description": "Reason of the entry rejection.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "'individual.nationality' value is not compliant with the ISO-3166-1 alpha-2 format codes."
                          }
                        },
                        "required": [
                          "entry_index",
                          "reason"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policy_snapshots.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policy_snapshots.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/consumer_electronics/policies/{policy_id}/transactions": {
      "get": {
        "summary": "Gets policy transactions list.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "object",
                    "properties": {
                      "transaction_id": {
                        "description": "Transaction identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "ABC123456"
                      },
                      "type": {
                        "description": "The transaction type\nPAYMENT = Payment\nREFUND = Reimbursement\n",
                        "type": "string",
                        "example": "PAYMENT",
                        "enum": [
                          "PAYMENT",
                          "REFUND"
                        ]
                      },
                      "status": {
                        "description": "Status of the transaction.\nPROCESSING = The transaction is being processed.\nERROR = The transaction failed.\nPROCESSED = The transaction is validated.\nCANCELLED = The transaction is cancelled.\n",
                        "type": "string",
                        "example": "PROCESSED",
                        "enum": [
                          "PROCESSING",
                          "PROCESSED",
                          "CANCELLED",
                          "ERROR"
                        ]
                      },
                      "amount": {
                        "description": "Total amount.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "value": {
                                "description": "Amount, numeric, with 2 or 3 decimals.",
                                "type": "number",
                                "example": 199.99
                              },
                              "currency": {
                                "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                "type": "string",
                                "minLength": 3,
                                "maxLength": 3,
                                "example": "EUR"
                              }
                            },
                            "required": [
                              "value",
                              "currency"
                            ]
                          }
                        ],
                        "example": {
                          "value": 12,
                          "currency": "EUR"
                        }
                      },
                      "processed_at": {
                        "description": "Transaction processed date - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                        "type": "string",
                        "format": "date-time",
                        "example": "2019-03-22T10:59:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Policy not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/orders": {
      "post": {
        "summary": "Create and store an order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "order_id": {
                    "description": "Unique final order identifier.",
                    "type": "string",
                    "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                    "readOnly": true,
                    "maxLength": 150
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                    "maxLength": 2000
                  },
                  "agent": {
                    "description": "The agent information.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "agent_scope": {
                            "description": "The scope of the agent that create the order.",
                            "type": "string",
                            "example": "HOME/DARTY/France",
                            "maxLength": 150
                          },
                          "agent_reference": {
                            "description": "The agent reference.",
                            "type": "string",
                            "example": "QS23ZED4",
                            "maxLength": 150
                          },
                          "agency_reference": {
                            "description": "The agency reference.",
                            "type": "string",
                            "example": "AGC_007_NORD",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  },
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "additionalProperties": false,
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "title": {
                                "description": "Civility.",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 100
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 100
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              }
                            }
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "en",
                                "maxLength": 5
                              },
                              "phone": {
                                "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 10
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 50
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ],
                                "example": [
                                  {
                                    "international_prefix": "+33",
                                    "number": "0651201190"
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "example": "150 Avenue de Paris",
                                        "maxLength": 100
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "example": "75001",
                                        "maxLength": 20
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "example": "Paris",
                                        "maxLength": 50
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    }
                                  }
                                ]
                              },
                              "email": {
                                "description": "Email address.\n** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "preferred_communication_channel": {
                                "description": "Communication channel on which the person preferred to be contacted.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "example": [
                                  "EMAIL",
                                  "SMS"
                                ]
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "required": [
                          "preferred_communication_channel"
                        ]
                      }
                    ]
                  },
                  "accommodation": {
                    "description": "The address covered by the order.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "example": "150 Avenue de Paris",
                            "maxLength": 100
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "example": "75001",
                            "maxLength": 20
                          },
                          "city": {
                            "description": "City.",
                            "type": "string",
                            "example": "Paris",
                            "maxLength": 50
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          }
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "quote_code",
                  "policy_holder"
                ]
              }
            }
          },
          "description": "Order information."
        },
        "responses": {
          "201": {
            "description": "Order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "HOME/DARTY/France",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "policy_holder": {
                      "description": "Policy holder.",
                      "allOf": [
                        {
                          "description": "Policy holder",
                          "additionalProperties": false,
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "example": "Doe",
                                  "maxLength": 100
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 100
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 20
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 50
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address.\n** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "accommodation": {
                      "description": "The address covered by the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "street_address": {
                              "description": "Street address.",
                              "type": "string",
                              "example": "150 Avenue de Paris",
                              "maxLength": 100
                            },
                            "postal_code": {
                              "description": "Postal code or zip code.",
                              "type": "string",
                              "example": "75001",
                              "maxLength": 20
                            },
                            "city": {
                              "description": "City.",
                              "type": "string",
                              "example": "Paris",
                              "maxLength": 50
                            },
                            "country": {
                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "quote_code",
                    "policy_holder"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.orders.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/orders/{order_id}": {
      "get": {
        "summary": "Retrieve order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "Order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "HOME/DARTY/France",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "policy_holder": {
                      "description": "Policy holder.",
                      "allOf": [
                        {
                          "description": "Policy holder",
                          "additionalProperties": false,
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "example": "Doe",
                                  "maxLength": 100
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 100
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 20
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 50
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address.\n** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "accommodation": {
                      "description": "The address covered by the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "street_address": {
                              "description": "Street address.",
                              "type": "string",
                              "example": "150 Avenue de Paris",
                              "maxLength": 100
                            },
                            "postal_code": {
                              "description": "Postal code or zip code.",
                              "type": "string",
                              "example": "75001",
                              "maxLength": 20
                            },
                            "city": {
                              "description": "City.",
                              "type": "string",
                              "example": "Paris",
                              "maxLength": 50
                            },
                            "country": {
                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "quote_code",
                    "policy_holder"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Order not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.orders.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/policies": {
      "get": {
        "summary": "Retrieve home customer policy summaries.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": true,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "customer_email",
            "description": "The customer email.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 320
            }
          },
          {
            "name": "device_id",
            "description": "The device identifier.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "holder_last_name",
            "description": "The policy holder last name.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "holder_birthdate",
            "description": "The policy holder date of birth. Mandatory if policy holder last name provided - ISO 8601 format (YYYY-MM-DD).",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "name": "agent_scope",
            "description": "The scope selected by the agent when the police was created.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "policy_number",
            "description": "Final policy number.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of home policy summaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "policy_id": {
                            "description": "Unique final policy identifier.",
                            "type": "string",
                            "maxLength": 150,
                            "readOnly": true
                          },
                          "policy_number": {
                            "description": "Final policy number (only exist if policy is not draft).",
                            "type": "string",
                            "maxLength": 150
                          },
                          "draft_policy_number": {
                            "description": "Draft policy number.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "status": {
                            "description": "Policy's status details.",
                            "type": "string",
                            "enum": [
                              "DRAFT",
                              "ACTIVE",
                              "CANCELLED"
                            ],
                            "example": "ACTIVE"
                          },
                          "policy_holder": {
                            "description": "Policy holder summary.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "last_name": {
                                    "description": "The last name of the policy holder.",
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "first_name": {
                                    "description": "The first name of the policy holder.",
                                    "type": "string",
                                    "maxLength": 100
                                  }
                                }
                              }
                            ]
                          },
                          "purchase_date": {
                            "description": "The date of the subscription (purchase) of the policy  - ISO 8601 format (YYYY-MM-DD).",
                            "type": "string",
                            "format": "date",
                            "example": "2018-06-20"
                          },
                          "product_name": {
                            "description": "Product name",
                            "type": "string",
                            "maxLength": 255,
                            "example": "Advanced"
                          },
                          "catalog": {
                            "description": "The product catalog.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "The code of the product catalog relied to the policy",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "Home_FR"
                                  },
                                  "version": {
                                    "description": "Catalog version.",
                                    "type": "string",
                                    "maxLength": 10,
                                    "example": "v2"
                                  }
                                },
                                "required": [
                                  "code",
                                  "version"
                                ]
                              }
                            ]
                          },
                          "contracting_actor_name": {
                            "description": "The legal entity relied to the customer.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "FNAC UK"
                          }
                        }
                      },
                      {
                        "properties": {
                          "accommodation": {
                            "description": "The address covered by the policy.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "150 Avenue de Paris"
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "75001"
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Paris"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                }
                              }
                            ]
                          },
                          "device_id": {
                            "description": "Device identifier.",
                            "type": "string",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/policies/{policy_id}": {
      "patch": {
        "summary": "Update policy without price modification",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "John"
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Doe"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "readOnly": true,
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "additional_informations": {
                                "description": "Additional information filled by the partner if needed\n(example : ID card number, Passport number...).\n",
                                "type": "array",
                                "maxItems": 1000,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "description": "Information code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "value": {
                                      "description": "Information value.",
                                      "type": "string",
                                      "maxLength": 255
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "code": "ID_NUMBER",
                                    "value": "AH15220CDH"
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "FR",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20
                                      }
                                    }
                                  }
                                ],
                                "example": [
                                  {
                                    "international_prefix": "0033",
                                    "number": "0651201190"
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "150 Avenue de Paris"
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "75001"
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Paris"
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    }
                                  }
                                ],
                                "readOnly": true
                              },
                              "is_policy_beneficiary": {
                                "description": "Indicates if the policy holder is also a policy beneficiary.",
                                "type": "boolean",
                                "readOnly": true
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ],
                                      "example": "TAX_REGISTRATION"
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string",
                                      "example": "9509923102854P"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "beneficiaries": {
                    "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                    "type": "array",
                    "maxItems": 20,
                    "items": {
                      "description": "Policy beneficiary.",
                      "allOf": [
                        {
                          "properties": {
                            "id": {
                              "description": "Beneficiary identifier.",
                              "type": "string",
                              "maxLength": 150
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "John"
                            },
                            "middle_name": {
                              "description": "Middle name.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "Doe"
                            },
                            "birth_date": {
                              "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "readOnly": true,
                              "example": "1990-04-25"
                            },
                            "email": {
                              "description": "Email address.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "john.doe@mail.com"
                            },
                            "additional_informations": {
                              "description": "Additional information filled by the partner if needed\n(example : ID card number, Passport number...).\n",
                              "type": "array",
                              "maxItems": 1000,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Information code.",
                                    "type": "string",
                                    "maxLength": 50
                                  },
                                  "value": {
                                    "description": "Information value.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              },
                              "example": [
                                {
                                  "code": "ID_NUMBER",
                                  "value": "AH15220CDH"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Content of a policy update.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Patch successfully done (No content returned)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/policies/{policy_id}/cancel": {
      "post": {
        "summary": "Cancel a policy according to its id.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "The policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancellation_date": {
                    "description": "Date when policy cancellation should be effective - ISO 8601 format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2018-08-20"
                  },
                  "cancellation_reason": {
                    "description": "Reason for policy cancellation.",
                    "type": "string",
                    "enum": [
                      "COOLING_OFF_PERIOD",
                      "INSUFFICIENT_FUNDS",
                      "RECOVERY_FAILURE",
                      "DISPUTED",
                      "SPECIFIC_BENEFITS"
                    ]
                  }
                },
                "required": [
                  "cancellation_date"
                ]
              }
            }
          },
          "description": "Information about cancellation.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refund_amount": {
                      "description": "The refund amount for the policy.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "value": {
                              "description": "Amount, numeric, with 2 or 3 decimals.",
                              "type": "number",
                              "example": 199.99
                            },
                            "currency": {
                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            }
                          },
                          "required": [
                            "value",
                            "currency"
                          ]
                        }
                      ]
                    },
                    "coverage_end_date": {
                      "description": "End date of policy coverage - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2018-08-20"
                    }
                  },
                  "required": [
                    "coverage_end_date"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/policies/{policy_id}/communication_requests": {
      "post": {
        "summary": "Sends a request for a communication with the customer.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "description": "Communication channel.",
                    "type": "string",
                    "enum": [
                      "EMAIL"
                    ],
                    "example": "EMAIL"
                  },
                  "communication_type": {
                    "description": "Type of communication to send.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "SEPA_MANDATE"
                  },
                  "attachment_refs": {
                    "description": "Attachments to send with the communication.",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "type": "string",
                      "maxLength": 2000
                    }
                  }
                },
                "required": [
                  "channel",
                  "communication_type"
                ]
              }
            }
          },
          "description": "Mail information."
        },
        "responses": {
          "204": {
            "description": "Request treated."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/policies/{policy_id}/transactions": {
      "get": {
        "summary": "Gets policy transactions list.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "transaction_id": {
                        "description": "Transaction identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "ABC123456"
                      },
                      "type": {
                        "description": "The transaction type.\nPAYMENT = Payment\nREFUND = Reimbursement\n",
                        "type": "string",
                        "example": "PAYMENT",
                        "enum": [
                          "PAYMENT",
                          "REFUND"
                        ]
                      },
                      "status": {
                        "description": "Status of the transaction.\nPROCESSING = The transaction is being processed.\nERROR = The transaction failed.\nPROCESSED = The transaction is validated.\nCANCELLED = The transaction is cancelled.\n",
                        "type": "string",
                        "example": "PROCESSED",
                        "enum": [
                          "PROCESSING",
                          "PROCESSED",
                          "CANCELLED",
                          "ERROR"
                        ]
                      },
                      "amount": {
                        "description": "Total amount.",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "value": {
                                "description": "Amount, numeric, with 2 or 3 decimals.",
                                "type": "number",
                                "example": 199.99
                              },
                              "currency": {
                                "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                "type": "string",
                                "minLength": 3,
                                "maxLength": 3,
                                "example": "EUR"
                              }
                            },
                            "required": [
                              "value",
                              "currency"
                            ]
                          }
                        ],
                        "example": {
                          "value": 12,
                          "currency": "EUR"
                        }
                      },
                      "processed_at": {
                        "description": "Transaction processed date - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                        "type": "string",
                        "format": "date-time",
                        "example": "2019-03-22T10:59:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/products": {
      "get": {
        "summary": "Gets products for home insurances.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "country",
            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            }
          },
          {
            "name": "currency",
            "description": "Customer currency, ISO 4217 format (3 letter code).",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 3
            }
          },
          {
            "name": "universe",
            "description": "The universe, example: Home Emergency.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "coverage_category",
            "description": "Coverage category, example: Electricity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_code",
            "description": "Catalog code, example: SR001.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_version",
            "description": "Catalog version, example: 2.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "context": {
                        "description": "Context of the request.",
                        "type": "object",
                        "properties": {
                          "country": {
                            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "currency": {
                            "description": "Customer currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "example": "EUR",
                            "maxLength": 3
                          }
                        },
                        "required": [
                          "currency"
                        ]
                      },
                      "products": {
                        "description": "Products list",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "properties": {
                            "product_code": {
                              "description": "Product code.",
                              "type": "string",
                              "example": "KV5-33",
                              "maxLength": 50
                            },
                            "name": {
                              "description": "Product name.",
                              "type": "string",
                              "example": "Advanced",
                              "maxLength": 100
                            },
                            "description": {
                              "description": "Product marketing description",
                              "type": "string",
                              "example": "Advanced for more guarantees.",
                              "maxLength": 100
                            },
                            "coverages": {
                              "description": "Set of coverages included in the product.",
                              "type": "array",
                              "maxItems": 50,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "description": "Type of coverage.",
                                    "type": "string",
                                    "example": "SERVICE",
                                    "maxLength": 50
                                  },
                                  "class": {
                                    "description": "Class of coverage.",
                                    "type": "string",
                                    "example": "ACCIDENT_01",
                                    "maxLength": 50
                                  },
                                  "category": {
                                    "description": "Coverage category.",
                                    "type": "string",
                                    "example": "plumbing",
                                    "maxLength": 50
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Electronic Assistance.",
                                    "maxLength": 100
                                  },
                                  "description": {
                                    "description": "Description.",
                                    "type": "string",
                                    "example": "Customer assistance for electronics.",
                                    "maxLength": 500
                                  },
                                  "limits": {
                                    "description": "List of limits of the coverage.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "exclusions": {
                                    "description": "List of exclusions.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "benefits": {
                                    "description": "List of benefits.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "label"
                                ]
                              }
                            },
                            "prices": {
                              "description": "List of price formulas of the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "formula": {
                                    "description": "Price formula reference.",
                                    "type": "string",
                                    "example": "24-MONTH",
                                    "maxLength": 10
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.1
                                  },
                                  "premium_before_discount_excl_tax": {
                                    "description": "Premium not discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 150.2
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 250.3
                                  }
                                },
                                "required": [
                                  "formula",
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            },
                            "criteria": {
                              "description": "Home information.",
                              "type": "object",
                              "properties": {
                                "device_brand": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_model": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_age": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_power": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_price": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_quantity": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_energy_source": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "installation_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "owner_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "housing_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "customer_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "excess_level": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "attachments": {
                              "description": "List of document linked to the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Attached document name.",
                                    "type": "string",
                                    "example": "terms_and_conditions",
                                    "maxLength": 50
                                  },
                                  "content_url": {
                                    "description": "URL to download the document.",
                                    "type": "string",
                                    "example": "http://website.com/mydocument",
                                    "maxLength": 255
                                  },
                                  "type": {
                                    "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "TERMS_AND_CONDITIONS"
                                  }
                                },
                                "required": [
                                  "name",
                                  "content_url",
                                  "type"
                                ]
                              }
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "description": "Periodicity of the payment.",
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                    "type": "string",
                                    "example": "R12/P1M",
                                    "maxLength": 25
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Monthly.",
                                    "maxLength": 25
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "product_code",
                            "prices",
                            "coverages"
                          ]
                        }
                      }
                    },
                    "required": [
                      "context",
                      "products"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.products.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.products.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/home/quotes_requests": {
      "post": {
        "summary": "Gets quotes for home insurances.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-quote-mode",
            "description": "Quote mode, can be used to get a quote on draft or test mode.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "TEST",
                "LIVE"
              ],
              "default": "LIVE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "description": "Context of the request.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "description": "Context of the request.",
                        "type": "object",
                        "properties": {
                          "country": {
                            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "currency": {
                            "description": "Customer currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "example": "EUR",
                            "maxLength": 3
                          },
                          "intermediary_code": {
                            "description": "Code of business intermediary.",
                            "type": "string",
                            "example": "KYZ451",
                            "maxLength": 50
                          },
                          "is_eligibility_check_required": {
                            "description": "Indicates if check eligibility is required or not",
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "currency"
                        ]
                      }
                    ]
                  },
                  "product_criteria": {
                    "description": "Product criteria.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Product criteria.",
                        "properties": {
                          "catalog": {
                            "description": "The Product Catalog information.",
                            "type": "object",
                            "properties": {
                              "code": {
                                "description": "Catalog code.",
                                "type": "string",
                                "example": "PRTNCATALOG",
                                "maxLength": 50
                              },
                              "version": {
                                "description": "Catalog version.",
                                "type": "string",
                                "example": "2",
                                "maxLength": 3
                              }
                            },
                            "required": [
                              "code",
                              "version"
                            ]
                          },
                          "product_code": {
                            "description": "Desired product code.",
                            "type": "string",
                            "example": "KV5-33",
                            "maxLength": 50
                          }
                        },
                        "required": [
                          "catalog"
                        ]
                      }
                    ]
                  },
                  "customer": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Customer information.",
                        "properties": {
                          "excess_level": {
                            "description": "Excess level.",
                            "type": "number",
                            "example": 99.99
                          },
                          "customer_type": {
                            "description": "Customer type.",
                            "type": "string",
                            "enum": [
                              "professional",
                              "individual",
                              "collective"
                            ]
                          },
                          "owner_type": {
                            "description": "Owner type.",
                            "type": "string",
                            "enum": [
                              "landlord",
                              "tenant"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "accommodation": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Accomodation information.",
                        "properties": {
                          "housing_type": {
                            "description": "Housing type.",
                            "type": "string",
                            "enum": [
                              "flat",
                              "house"
                            ]
                          },
                          "installation_type": {
                            "description": "Installation type.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "roof_top"
                          }
                        }
                      }
                    ]
                  },
                  "device": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Accomodation information.",
                        "properties": {
                          "brand": {
                            "description": "Brand of the device.",
                            "type": "string",
                            "example": "VERGNE",
                            "maxLength": 100
                          },
                          "model": {
                            "description": "Model of the device.",
                            "type": "string",
                            "example": "Edens",
                            "maxLength": 100
                          },
                          "age": {
                            "description": "Age of the device (in year).",
                            "type": "number",
                            "example": 5
                          },
                          "power": {
                            "description": "Power of the device, in kWh.",
                            "type": "number",
                            "example": 120
                          },
                          "price": {
                            "description": "Price of the device.",
                            "type": "number",
                            "example": 1234.56
                          },
                          "quantity": {
                            "description": "Number of devices that the customer wants to cover.",
                            "type": "number",
                            "example": 3
                          },
                          "energy_source": {
                            "description": "Device energy source.",
                            "type": "string",
                            "example": "gaz",
                            "maxLength": 50
                          }
                        }
                      }
                    ]
                  },
                  "quote_code": {
                    "description": "Existing Quote code.\nIf the Quote code is provided then the price will be updated based on this quote code.\n",
                    "type": "string",
                    "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT",
                    "maxLength": 2000
                  },
                  "promo_code": {
                    "description": "Promotion code.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "PROMOCODE2020"
                  }
                }
              }
            }
          },
          "description": "Content of quotes request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "context": {
                      "allOf": [
                        {
                          "description": "Context of the request.",
                          "type": "object",
                          "properties": {
                            "country": {
                              "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "currency": {
                              "description": "Customer currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "example": "EUR",
                              "maxLength": 3
                            },
                            "intermediary_code": {
                              "description": "Code of business intermediary.",
                              "type": "string",
                              "example": "KYZ451",
                              "maxLength": 50
                            },
                            "is_eligibility_check_required": {
                              "description": "Indicates if check eligibility is required or not",
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "required": [
                            "currency"
                          ]
                        }
                      ]
                    },
                    "quote_expire_at": {
                      "description": "Date and time of quotes expiration - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                      "type": "string",
                      "format": "date-time",
                      "example": "2019-03-22T10:59:00Z"
                    },
                    "products": {
                      "description": "Products list",
                      "type": "array",
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "product_code": {
                            "description": "Product code",
                            "type": "string",
                            "example": "KV5-33",
                            "maxLength": 255
                          },
                          "quote_code": {
                            "description": "Quote code.",
                            "type": "string",
                            "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT/X/2b/uKvp2xSksqTii7oo5bfjYSm16g",
                            "maxLength": 2000
                          },
                          "promo_code": {
                            "description": "Promotion code provided on the request.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "PROMOCODE2020"
                          },
                          "name": {
                            "description": "Product name",
                            "type": "string",
                            "example": "Advanced",
                            "maxLength": 50
                          },
                          "description": {
                            "description": "Product marketing description",
                            "type": "string",
                            "example": "Advanced for more guarantees.",
                            "maxLength": 500
                          },
                          "coverages": {
                            "description": "Set of coverages included in the product.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Type of coverage.",
                                  "type": "string",
                                  "example": "SERVICE",
                                  "maxLength": 50
                                },
                                "class": {
                                  "description": "Class of coverage.",
                                  "type": "string",
                                  "example": "ACCIDENT_01",
                                  "maxLength": 50
                                },
                                "category": {
                                  "description": "Coverage category.",
                                  "type": "string",
                                  "example": "plumbing",
                                  "maxLength": 50
                                },
                                "tax_amount": {
                                  "description": "Total amount of taxes applied to the coverage, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 20.3
                                },
                                "waiting_period": {
                                  "description": "Delay before activation in days.",
                                  "type": "number",
                                  "example": 5
                                },
                                "label": {
                                  "description": "Label.",
                                  "type": "string",
                                  "example": "Electronic Assistance.",
                                  "maxLength": 100
                                },
                                "description": {
                                  "description": "Description.",
                                  "type": "string",
                                  "example": "Customer assistance for electronics.",
                                  "maxLength": 500
                                },
                                "limits": {
                                  "description": "List of limits of the coverage.",
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 50
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 500
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                },
                                "exclusions": {
                                  "description": "List of exclusions.",
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 50
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 500
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                },
                                "benefits": {
                                  "description": "List of benefits.",
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "description": "Label.",
                                        "type": "string",
                                        "maxLength": 50
                                      },
                                      "description": {
                                        "description": "Description.",
                                        "type": "string",
                                        "maxLength": 500
                                      }
                                    },
                                    "required": [
                                      "label"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "label"
                              ]
                            }
                          },
                          "prices": {
                            "description": "List of price formulas of the product.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "formula": {
                                  "description": "Price formula reference.",
                                  "type": "string",
                                  "example": "24-MONTH",
                                  "maxLength": 10
                                },
                                "total_taxes": {
                                  "description": "Total amount of taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 50.1
                                },
                                "total_discount": {
                                  "description": "Total amount of discount, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 10
                                },
                                "price_before_discount_excl_tax": {
                                  "description": "Price not discounted excluding taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 100
                                },
                                "price_before_discount_incl_tax": {
                                  "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 120
                                },
                                "price_after_discount_excl_tax": {
                                  "description": "Price discounted excluding taxes, numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 95
                                },
                                "price_after_discount_incl_tax": {
                                  "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                  "type": "number",
                                  "example": 114
                                }
                              },
                              "required": [
                                "formula",
                                "price_after_discount_incl_tax"
                              ]
                            }
                          },
                          "attachments": {
                            "description": "List of document linked to the product.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Attached document name.",
                                  "type": "string",
                                  "example": "terms_and_conditions",
                                  "maxLength": 50
                                },
                                "content_url": {
                                  "description": "URL to download the document.",
                                  "type": "string",
                                  "example": "http://website.com/mydocument",
                                  "maxLength": 255
                                },
                                "type": {
                                  "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "TERMS_AND_CONDITIONS"
                                }
                              },
                              "required": [
                                "name",
                                "content_url",
                                "type"
                              ]
                            }
                          },
                          "consents": {
                            "description": "List of needed customer consents.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Consent to be requested to the customer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Disclaimer to display to the customer.",
                                  "properties": {
                                    "code": {
                                      "description": "Code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "text": {
                                      "description": "Text.",
                                      "type": "string",
                                      "maxLength": 500
                                    },
                                    "type": {
                                      "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                      "type": "string",
                                      "enum": [
                                        "PERSONAL_DATA",
                                        "SUBSCRIPTION",
                                        "PAYMENT",
                                        "ALL"
                                      ],
                                      "example": "PERSONAL_DATA"
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "text"
                                  ]
                                },
                                {
                                  "properties": {
                                    "is_mandatory": {
                                      "description": "Indicates if the consent is mandatory.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "is_mandatory"
                              ]
                            }
                          },
                          "disclaimers": {
                            "description": "List of disclaimers to display to the customer.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Disclaimer to display to the customer.",
                              "properties": {
                                "code": {
                                  "description": "Code.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "text": {
                                  "description": "Text.",
                                  "type": "string",
                                  "maxLength": 500
                                },
                                "type": {
                                  "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                  "type": "string",
                                  "enum": [
                                    "PERSONAL_DATA",
                                    "SUBSCRIPTION",
                                    "PAYMENT",
                                    "ALL"
                                  ],
                                  "example": "PERSONAL_DATA"
                                }
                              },
                              "required": [
                                "code",
                                "text"
                              ]
                            }
                          },
                          "payment_periodicities": {
                            "description": "List of payment periodicities.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "description": "Periodicity of the payment.",
                              "type": "object",
                              "properties": {
                                "value": {
                                  "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                  "type": "string",
                                  "example": "R12/P1M",
                                  "maxLength": 25
                                },
                                "label": {
                                  "description": "Label.",
                                  "type": "string",
                                  "maxLength": 25,
                                  "example": "Monthly."
                                }
                              },
                              "required": [
                                "value"
                              ]
                            }
                          }
                        },
                        "required": [
                          "product_code",
                          "quote_code",
                          "prices",
                          "coverages"
                        ]
                      }
                    },
                    "payment_modes": {
                      "description": "Payment mode list",
                      "type": "array",
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "List of payment mode accepted by the provider.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFER",
                                "VIRTUAL_CREDIT_CARD",
                                "SEPA",
                                "PAYPAL"
                              ]
                            }
                          },
                          "payment_channels": {
                            "description": "Channels used in payment.",
                            "type": "array",
                            "maxItems": 3,
                            "items": {
                              "type": "string",
                              "enum": [
                                "DIGITAL",
                                "PHONE",
                                "AGENT"
                              ]
                            }
                          },
                          "provider": {
                            "allOf": [
                              {
                                "description": "Payment service provider.",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Unique identifier of payment provider.",
                                    "type": "string",
                                    "maxLength": 150
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "maxLength": 50
                                  }
                                },
                                "required": [
                                  "id",
                                  "label"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "provider"
                        ]
                      }
                    },
                    "is_pre_contract_required": {
                      "description": "Indicates if a pre-contractual communication is required before subscription validation.",
                      "type": "boolean",
                      "default": false
                    },
                    "is_premium_collected_by_axa": {
                      "description": "Indicates if the payment on policy subscription shoud be collected by AXA.",
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "required": [
                    "context",
                    "quote_expire_at",
                    "products",
                    "is_premium_collected_by_axa"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.home.quotesrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.home.quotesrequests.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies": {
      "get": {
        "summary": "Retrieve travel customer policy summaries.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-axa-context",
            "in": "header",
            "required": false,
            "description": "The token is formatted as a JWT and provided by the partner.",
            "schema": {
              "type": "string",
              "format": "JSON Web Token RFC 7519",
              "maxLength": 4000
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "customer_email",
            "description": "The customer email.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 320
            }
          },
          {
            "name": "holder_last_name",
            "description": "The policy holder last name.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "holder_birthdate",
            "description": "The policy holder date of birth. Mandatory if policy holder last name provided - ISO 8601 format (YYYY-MM-DD).",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "name": "agent_scope",
            "description": "The scope selected by the agent when the police was created.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "policy_number",
            "description": "Final policy number.",
            "in": "query",
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "expire_in",
            "description": "The number of days from today in witch the travel annual policies are going to expire.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of travel policy summaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "policy_id": {
                        "description": "Unique final policy identifier.",
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 150,
                        "example": "5ff96b27-cdc1-4090-b2f4-febfb1b1d08f"
                      },
                      "policy_number": {
                        "description": "Final policy number (only exist if policy is not draft).",
                        "type": "string",
                        "maxLength": 50,
                        "example": "DRULY031000000823"
                      },
                      "draft_policy_number": {
                        "description": "Draft policy number.",
                        "type": "string",
                        "maxLength": 50,
                        "example": "NBYULY03115985008"
                      },
                      "status": {
                        "description": "Policy's status details.",
                        "type": "string",
                        "enum": [
                          "DRAFT",
                          "ACTIVE",
                          "CANCELLED"
                        ],
                        "example": "ACTIVE"
                      },
                      "policy_holder": {
                        "description": "Policy holder summary.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "last_name": {
                                "description": "The last name of the policy holder.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Doe"
                              },
                              "first_name": {
                                "description": "The first name of the policy holder.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "John"
                              },
                              "external_holder_id": {
                                "description": "Partner identifier of the customer.",
                                "type": "string",
                                "maxLength": 150
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "johnny.depp@mail.com"
                              }
                            }
                          }
                        ]
                      },
                      "purchase_date": {
                        "description": "The date of the subscription (purchase) of the policy  - ISO 8601 format (YYYY-MM-DD).",
                        "type": "string",
                        "format": "date",
                        "example": "2018-06-20"
                      },
                      "effective_period": {
                        "description": "The effective period  - ISO 8601 format (YYYY-MM-DD)\nThe start date indicates when the contract is starting = activation date.\nThe end date indicates when the contract is ending. If the policy is cancelled, then the field is updated\n",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "start_date": {
                                "description": "Start date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "2019-01-30"
                              },
                              "end_date": {
                                "description": "End date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "2019-02-09"
                              }
                            }
                          }
                        ],
                        "example": {
                          "start_date": "2019-01-25",
                          "end_date": "2020-01-24"
                        }
                      },
                      "catalog": {
                        "description": "The product catalog.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "description": "The code of the product catalog relied to the policy",
                                "type": "string",
                                "maxLength": 50,
                                "example": "Opodo FR"
                              },
                              "version": {
                                "description": "Catalog version.",
                                "type": "string",
                                "maxLength": 10,
                                "example": "v12"
                              }
                            },
                            "required": [
                              "code",
                              "version"
                            ]
                          }
                        ]
                      },
                      "contracting_actor_name": {
                        "description": "The legal entity relied to the customer.",
                        "type": "string",
                        "maxLength": 100,
                        "example": "EXPEDIA UK"
                      },
                      "cancellation_date": {
                        "description": "Date when policy cancellation should be effective - ISO 8601 format (YYYY-MM-DD).",
                        "type": "string",
                        "format": "date",
                        "example": "2018-08-20"
                      },
                      "product": {
                        "description": "Product subscribed on the policy.",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "Product information.",
                            "properties": {
                              "name": {
                                "description": "Product name",
                                "type": "string",
                                "maxLength": 50,
                                "example": "Short Stay Travel - Formula 1"
                              },
                              "code": {
                                "description": "Product code, used if the quote request is for a specific product.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "PTRAVEL001"
                              },
                              "sub_category": {
                                "description": "Product sub category.",
                                "type": "string",
                                "example": "VoyageSimple",
                                "maxLength": 50
                              },
                              "price": {
                                "description": "The order's price.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "description": "Set of prices.",
                                    "properties": {
                                      "total_discount": {
                                        "description": "Total amount of discount, numeric with 2 decimals.",
                                        "type": "number",
                                        "example": 10
                                      },
                                      "premium_after_discount_excl_tax": {
                                        "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                        "type": "number",
                                        "example": 180
                                      },
                                      "total_taxes": {
                                        "description": "Total amount of taxes, numeric with 2 decimals.",
                                        "type": "number",
                                        "example": 50.02
                                      },
                                      "price_after_discount_incl_tax": {
                                        "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                        "type": "number",
                                        "example": 330.45
                                      },
                                      "payment_periodicities": {
                                        "description": "List of payment periodicities.",
                                        "type": "array",
                                        "maxItems": 100,
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "periodicity": {
                                              "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                              "type": "string",
                                              "maxLength": 50,
                                              "example": "R12/P1M"
                                            },
                                            "description": {
                                              "description": "Periodicity label.",
                                              "type": "string",
                                              "example": "MONTHLY",
                                              "maxLength": 50
                                            },
                                            "amount_per_period": {
                                              "description": "The amount of the payment period.",
                                              "type": "number",
                                              "example": 71.87
                                            },
                                            "amount_first_payment": {
                                              "description": "The amount of the first payment.",
                                              "type": "number",
                                              "example": 71.87
                                            }
                                          },
                                          "required": [
                                            "periodicity",
                                            "description",
                                            "amount_per_period",
                                            "amount_first_payment"
                                          ]
                                        }
                                      }
                                    },
                                    "required": [
                                      "formula",
                                      "price_after_discount_incl_tax"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "addons": {
                        "description": "Add-ons that customer can add to the product.",
                        "type": "array",
                        "maxItems": 100,
                        "items": {
                          "type": "object",
                          "description": "Product information.",
                          "properties": {
                            "code": {
                              "description": "Product code",
                              "type": "string",
                              "maxLength": 50,
                              "example": "PRTNCATALOG"
                            },
                            "name": {
                              "description": "Product name",
                              "type": "string",
                              "maxLength": 50,
                              "example": "Short Stay Travel - Formula 1"
                            },
                            "price": {
                              "description": "The order's price.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Set of prices.",
                                  "properties": {
                                    "total_discount": {
                                      "description": "Total amount of discount, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 10
                                    },
                                    "premium_after_discount_excl_tax": {
                                      "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 180
                                    },
                                    "total_taxes": {
                                      "description": "Total amount of taxes, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 50.02
                                    },
                                    "price_after_discount_incl_tax": {
                                      "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 330.45
                                    },
                                    "payment_periodicities": {
                                      "description": "List of payment periodicities.",
                                      "type": "array",
                                      "maxItems": 100,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "periodicity": {
                                            "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "R12/P1M"
                                          },
                                          "description": {
                                            "description": "Periodicity label.",
                                            "type": "string",
                                            "example": "MONTHLY",
                                            "maxLength": 50
                                          },
                                          "amount_per_period": {
                                            "description": "The amount of the payment period.",
                                            "type": "number",
                                            "example": 71.87
                                          },
                                          "amount_first_payment": {
                                            "description": "The amount of the first payment.",
                                            "type": "number",
                                            "example": 71.87
                                          }
                                        },
                                        "required": [
                                          "periodicity",
                                          "description",
                                          "amount_per_period",
                                          "amount_first_payment"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "formula",
                                    "price_after_discount_incl_tax"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "price": {
                        "description": "Policy's price details.",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "Set of prices.",
                            "properties": {
                              "total_discount": {
                                "description": "Total amount of discount, numeric with 2 decimals.",
                                "type": "number",
                                "example": 10
                              },
                              "premium_after_discount_excl_tax": {
                                "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                "type": "number",
                                "example": 180
                              },
                              "total_taxes": {
                                "description": "Total amount of taxes, numeric with 2 decimals.",
                                "type": "number",
                                "example": 50.02
                              },
                              "price_after_discount_incl_tax": {
                                "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                "type": "number",
                                "example": 330.45
                              },
                              "payment_periodicities": {
                                "description": "List of payment periodicities.",
                                "type": "array",
                                "maxItems": 100,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "periodicity": {
                                      "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "R12/P1M"
                                    },
                                    "description": {
                                      "description": "Periodicity label.",
                                      "type": "string",
                                      "example": "MONTHLY",
                                      "maxLength": 50
                                    },
                                    "amount_per_period": {
                                      "description": "The amount of the payment period.",
                                      "type": "number",
                                      "example": 71.87
                                    },
                                    "amount_first_payment": {
                                      "description": "The amount of the first payment.",
                                      "type": "number",
                                      "example": 71.87
                                    }
                                  },
                                  "required": [
                                    "periodicity",
                                    "description",
                                    "amount_per_period",
                                    "amount_first_payment"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "formula",
                              "price_after_discount_incl_tax"
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      },
      "post": {
        "summary": "Creates policy subscription.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-axa-context",
            "in": "header",
            "required": false,
            "description": "The token is formatted as a JWT and provided by the partner.",
            "schema": {
              "type": "string",
              "format": "JSON Web Token RFC 7519",
              "maxLength": 4000
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_policy_number": {
                    "description": "External policy identifier that can be provided by the partner.",
                    "type": "string",
                    "maxLength": 50
                  },
                  "subscription_country": {
                    "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                    "type": "string",
                    "example": "FR",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "d41d8cd98f00b204e9800998ecf8427e"
                  },
                  "sales_information": {
                    "description": "Sales information.",
                    "allOf": [
                      {
                        "description": "Sales information.",
                        "type": "object",
                        "properties": {
                          "point_of_sale": {
                            "description": "Point of sale of the policy.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "THOMAS COOK"
                          },
                          "seller": {
                            "description": "Seller who sold the policy",
                            "type": "string",
                            "maxLength": 50,
                            "example": "S22NBY98"
                          }
                        }
                      }
                    ]
                  },
                  "agent_scope": {
                    "description": "The scope that agent has access.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Travel/Air france/France"
                  },
                  "price": {
                    "description": "Policy's price details.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Policy price.",
                        "properties": {
                          "formula": {
                            "description": "Formula selected by the customer.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "12-MONTHS"
                          },
                          "currency": {
                            "description": "Currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          },
                          "price_after_discount_inc_tax": {
                            "description": "Price amount discounted including taxes, numeric with 2 decimals.",
                            "type": "number",
                            "example": 150.25
                          }
                        },
                        "required": [
                          "currency",
                          "price_after_discount_inc_tax"
                        ]
                      }
                    ]
                  },
                  "addons": {
                    "description": "List of add-ons code, add-ons added by the customer.",
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "string",
                      "maxLength": 1000
                    }
                  },
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Depp"
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Johnny"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "johnny.depp@mail.com"
                              },
                              "registrations": {
                                "description": "List of person registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "PASSPORT",
                                        "DRIVER_LICENSE",
                                        "TAX_REGISTRATION",
                                        "RESIDENCE_PERMIT"
                                      ],
                                      "maxLength": 28
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "maxLength": 2,
                                "minLength": 2
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "is_policy_beneficiary": {
                                "description": "Indicates if the policy holder is also a policy beneficiary.",
                                "type": "boolean"
                              },
                              "external_holder_id": {
                                "description": "Partner identifier of the customer.",
                                "type": "string",
                                "maxLength": 150
                              }
                            }
                          }
                        ],
                        "required": [
                          "spoken_language",
                          "email",
                          "is_policy_beneficiary"
                        ]
                      }
                    ]
                  },
                  "beneficiaries": {
                    "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "description": "Policy beneficiary.",
                      "allOf": [
                        {
                          "properties": {
                            "id": {
                              "description": "Beneficiary identifier.",
                              "maxLength": 150,
                              "type": "string",
                              "readOnly": true
                            },
                            "age_segment": {
                              "description": "Age Segment.\n\n- ADULT: Adult\n- CHILD: Child\n- INFANT: Infant or baby\n- SENIOR: Senior Citizen or Elderly Person\n",
                              "type": "string",
                              "example": "ADULT",
                              "enum": [
                                "ADULT",
                                "CHILD",
                                "INFANT",
                                "SENIOR"
                              ]
                            },
                            "is_policy_holder": {
                              "description": "Identifies this beneficiary as the policyholder for the policy.",
                              "type": "boolean",
                              "example": true
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "Depp"
                            },
                            "middle_name": {
                              "description": "Middle name.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "Johnny"
                            },
                            "birth_date": {
                              "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "1990-04-25"
                            },
                            "email": {
                              "description": "Email address.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "johnny.depp@mail.com"
                            },
                            "registrations": {
                              "description": "List of person registrations.",
                              "type": "array",
                              "maxItems": 2,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                    "type": "string",
                                    "enum": [
                                      "ID_CARD",
                                      "PASSPORT",
                                      "DRIVER_LICENSE",
                                      "TAX_REGISTRATION",
                                      "RESIDENCE_PERMIT"
                                    ],
                                    "maxLength": 28
                                  },
                                  "value": {
                                    "description": "Value of the registration.",
                                    "maxLength": 20,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "title",
                            "first_name",
                            "last_name",
                            "birth_date"
                          ]
                        }
                      ]
                    }
                  },
                  "consents": {
                    "description": "List of consents displayed to the customer.",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "description": "Customer consent.",
                      "properties": {
                        "code": {
                          "description": "Code of the consent.",
                          "type": "string",
                          "maxLength": 50
                        },
                        "is_confirmed": {
                          "description": "Indicates if the consent has been confirmed by the customer or not.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "code",
                        "is_confirmed"
                      ]
                    }
                  },
                  "payment": {
                    "description": "Payment information provided by the API caller.\nThis information is mandatory in the case where AXA managed the payment.\n",
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Payment information, the IBAN should be provided.",
                        "properties": {
                          "type": {
                            "description": "Payment mode selected.",
                            "type": "string",
                            "enum": [
                              "ELECTRONIC_TRANSFER"
                            ],
                            "example": "ELECTRONIC_TRANSFER"
                          },
                          "periodicity": {
                            "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                            "type": "string",
                            "maxLength": 50,
                            "example": "R12/P1M"
                          },
                          "transfer_information": {
                            "description": "Information about electronic transfer.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "account_holder": {
                                    "type": "object",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "first_name": {
                                            "type": "string",
                                            "maxLength": 100,
                                            "description": "First name of the account's owner."
                                          },
                                          "last_name": {
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Johnny",
                                            "description": "Last name of the account's owner."
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "account_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "Name's of this bank account"
                                  },
                                  "country_code": {
                                    "type": "string",
                                    "minLength": 2,
                                    "maxLength": 2,
                                    "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code)."
                                  },
                                  "wire_code": {
                                    "type": "array",
                                    "maxItems": 50,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "wire_code_type": {
                                          "type": "string",
                                          "enum": [
                                            "IBAN"
                                          ],
                                          "description": "Wire's type (only IBAN is accepted)"
                                        },
                                        "value": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "description": "The value of the IBAN"
                                        }
                                      },
                                      "required": [
                                        "wire_code_type",
                                        "value"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "wire_code"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "periodicity",
                          "type",
                          "transfer_information"
                        ]
                      }
                    ]
                  },
                  "additional_information": {
                    "description": "Additional information filled by the partner if needed.\n",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "description": "Information code.\nEXISTING_INSURANCE_REFERENCE: References to existing or complementary insurance\n",
                          "type": "string",
                          "enum": [
                            "EXISTING_INSURANCE_REFERENCE"
                          ],
                          "maxLength": 28
                        },
                        "value": {
                          "description": "Information value.",
                          "type": "string",
                          "maxLength": 100
                        }
                      },
                      "required": [
                        "code",
                        "value"
                      ]
                    },
                    "example": [
                      {
                        "code": "EXISTING_INSURANCE_REFERENCE",
                        "value": "A1455CDH"
                      }
                    ]
                  },
                  "related_order_id": {
                    "description": "The related order identifier.",
                    "type": "string",
                    "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                    "maxLength": 150
                  }
                },
                "required": [
                  "quote_code",
                  "policy_holder",
                  "price"
                ]
              }
            }
          },
          "description": "Content of policy subscription.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_id": {
                      "description": "Unique final policy identifier.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "draft_policy_number": {
                      "description": "Draft policy number, provided in case if the policy is not confirmed.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "d41d8cd98f00b204e9800998ecf8427e"
                    },
                    "policy_number": {
                      "description": "Final policy number.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "external_policy_number": {
                      "description": "External policy identifier that can be provided by the partner.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "status": {
                      "description": "Policy's status details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy status.",
                          "readOnly": true,
                          "properties": {
                            "value": {
                              "description": "Status value",
                              "type": "string",
                              "enum": [
                                "DRAFT",
                                "ACTIVE",
                                "CANCELLED"
                              ],
                              "maxLength": 9,
                              "minLength": 5
                            },
                            "reason": {
                              "description": "Status reason.",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "value"
                          ]
                        }
                      ]
                    },
                    "subscription_country": {
                      "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                      "type": "string",
                      "example": "FR",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "sales_information": {
                      "description": "Sales information.",
                      "allOf": [
                        {
                          "description": "Sales information.",
                          "type": "object",
                          "properties": {
                            "point_of_sale": {
                              "description": "Point of sale of the policy.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "THOMAS COOK"
                            },
                            "seller": {
                              "description": "Seller who sold the policy",
                              "type": "string",
                              "maxLength": 50,
                              "example": "S22NBY98"
                            }
                          }
                        }
                      ]
                    },
                    "agent_scope": {
                      "description": "The scope that agent has access.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "Travel/Air france/France"
                    },
                    "price": {
                      "description": "Policy's price details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy price.",
                          "properties": {
                            "formula": {
                              "description": "Formula selected by the customer.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "12-MONTHS"
                            },
                            "currency": {
                              "description": "Currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            },
                            "price_after_discount_inc_tax": {
                              "description": "Price amount discounted including taxes, numeric with 2 decimals.",
                              "type": "number",
                              "example": 150.25
                            }
                          },
                          "required": [
                            "currency",
                            "price_after_discount_inc_tax"
                          ]
                        }
                      ]
                    },
                    "addons": {
                      "description": "List of add-ons code, add-ons added by the customer.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "string",
                        "maxLength": 1000
                      }
                    },
                    "policy_holder": {
                      "description": "Policy holder.",
                      "allOf": [
                        {
                          "description": "Policy holder",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Depp"
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Johnny"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                },
                                "email": {
                                  "description": "Email address.",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "johnny.depp@mail.com"
                                },
                                "registrations": {
                                  "description": "List of person registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "PASSPORT",
                                          "DRIVER_LICENSE",
                                          "TAX_REGISTRATION",
                                          "RESIDENCE_PERMIT"
                                        ],
                                        "maxLength": 28
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "title",
                                "first_name",
                                "last_name",
                                "birth_date"
                              ]
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "maxLength": 2,
                                  "minLength": 2
                                },
                                "phone": {
                                  "description": "Phone number.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 5
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 20
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "is_policy_beneficiary": {
                                  "description": "Indicates if the policy holder is also a policy beneficiary.",
                                  "type": "boolean"
                                },
                                "external_holder_id": {
                                  "description": "Partner identifier of the customer.",
                                  "type": "string",
                                  "maxLength": 150
                                }
                              }
                            }
                          ],
                          "required": [
                            "spoken_language",
                            "email",
                            "is_policy_beneficiary"
                          ]
                        }
                      ]
                    },
                    "beneficiaries": {
                      "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "description": "Policy beneficiary.",
                        "allOf": [
                          {
                            "properties": {
                              "id": {
                                "description": "Beneficiary identifier.",
                                "maxLength": 150,
                                "type": "string",
                                "readOnly": true
                              },
                              "age_segment": {
                                "description": "Age Segment.\n\n- ADULT: Adult\n- CHILD: Child\n- INFANT: Infant or baby\n- SENIOR: Senior Citizen or Elderly Person\n",
                                "type": "string",
                                "example": "ADULT",
                                "enum": [
                                  "ADULT",
                                  "CHILD",
                                  "INFANT",
                                  "SENIOR"
                                ]
                              },
                              "is_policy_holder": {
                                "description": "Identifies this beneficiary as the policyholder for the policy.",
                                "type": "boolean",
                                "example": true
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Depp"
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Johnny"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "johnny.depp@mail.com"
                              },
                              "registrations": {
                                "description": "List of person registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "PASSPORT",
                                        "DRIVER_LICENSE",
                                        "TAX_REGISTRATION",
                                        "RESIDENCE_PERMIT"
                                      ],
                                      "maxLength": 28
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          }
                        ]
                      }
                    },
                    "consents": {
                      "description": "List of consents displayed to the customer.",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "description": "Customer consent.",
                        "properties": {
                          "code": {
                            "description": "Code of the consent.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "is_confirmed": {
                            "description": "Indicates if the consent has been confirmed by the customer or not.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "code",
                          "is_confirmed"
                        ]
                      }
                    },
                    "attachments": {
                      "description": "Set of attachments provided with the policy.",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                            "type": "string",
                            "maxLength": 50
                          },
                          "created_at": {
                            "description": "Date and time of document creation - ISO 8601 format (YYYY-MM-DD).",
                            "type": "string",
                            "format": "date",
                            "example": "2019-01-30",
                            "readOnly": true
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ]
                            },
                            "readOnly": true
                          },
                          "technical_reference": {
                            "description": "The technical reference used to download the attachment.",
                            "type": "string",
                            "maxLength": 50,
                            "readOnly": true
                          }
                        },
                        "required": [
                          "name",
                          "content_url"
                        ]
                      }
                    },
                    "payment": {
                      "description": "Payment information provided by the API caller.\nThis information is mandatory in the case where AXA managed the payment.\n",
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Payment information, the IBAN should be provided.",
                          "properties": {
                            "type": {
                              "description": "Payment mode selected.",
                              "type": "string",
                              "enum": [
                                "ELECTRONIC_TRANSFER"
                              ],
                              "example": "ELECTRONIC_TRANSFER"
                            },
                            "periodicity": {
                              "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                              "type": "string",
                              "maxLength": 50,
                              "example": "R12/P1M"
                            },
                            "transfer_information": {
                              "description": "Information about electronic transfer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "account_holder": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "first_name": {
                                              "type": "string",
                                              "maxLength": 100,
                                              "description": "First name of the account's owner."
                                            },
                                            "last_name": {
                                              "type": "string",
                                              "maxLength": 100,
                                              "example": "Johnny",
                                              "description": "Last name of the account's owner."
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "account_name": {
                                      "type": "string",
                                      "maxLength": 100,
                                      "description": "Name's of this bank account"
                                    },
                                    "country_code": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 2,
                                      "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code)."
                                    },
                                    "wire_code": {
                                      "type": "array",
                                      "maxItems": 50,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "wire_code_type": {
                                            "type": "string",
                                            "enum": [
                                              "IBAN"
                                            ],
                                            "description": "Wire's type (only IBAN is accepted)"
                                          },
                                          "value": {
                                            "type": "string",
                                            "maxLength": 50,
                                            "description": "The value of the IBAN"
                                          }
                                        },
                                        "required": [
                                          "wire_code_type",
                                          "value"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "wire_code"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "periodicity",
                            "type",
                            "transfer_information"
                          ]
                        }
                      ]
                    },
                    "additional_information": {
                      "description": "Additional information filled by the partner if needed.\n",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "description": "Information code.\nEXISTING_INSURANCE_REFERENCE: References to existing or complementary insurance\n",
                            "type": "string",
                            "enum": [
                              "EXISTING_INSURANCE_REFERENCE"
                            ],
                            "maxLength": 28
                          },
                          "value": {
                            "description": "Information value.",
                            "type": "string",
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "code",
                          "value"
                        ]
                      },
                      "example": [
                        {
                          "code": "EXISTING_INSURANCE_REFERENCE",
                          "value": "A1455CDH"
                        }
                      ]
                    },
                    "related_order_id": {
                      "description": "The related order identifier.",
                      "type": "string",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    }
                  },
                  "required": [
                    "quote_code",
                    "policy_holder",
                    "price"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}": {
      "get": {
        "summary": "Gets policy details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-axa-context",
            "in": "header",
            "required": false,
            "description": "The token is formatted as a JWT and provided by the partner.",
            "schema": {
              "type": "string",
              "format": "JSON Web Token RFC 7519",
              "maxLength": 4000
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_number": {
                      "description": "Final policy number.",
                      "type": "string",
                      "maxLength": 50,
                      "readOnly": true
                    },
                    "external_policy_number": {
                      "description": "External policy identifier that can be provided by the partner.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "status": {
                      "description": "Policy's status details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy status.",
                          "readOnly": true,
                          "properties": {
                            "value": {
                              "description": "Status value",
                              "type": "string",
                              "enum": [
                                "DRAFT",
                                "ACTIVE",
                                "CANCELLED"
                              ],
                              "maxLength": 9,
                              "minLength": 5
                            },
                            "reason": {
                              "description": "Status reason.",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "value"
                          ]
                        }
                      ],
                      "readOnly": true
                    },
                    "subscription_country": {
                      "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                      "type": "string",
                      "example": "FR",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "policy_id": {
                      "description": "Unique final policy identifier.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "draft_policy_number": {
                      "description": "Draft policy number, provided in case if the policy is not confirmed.",
                      "type": "string",
                      "maxLength": 50,
                      "readOnly": true
                    },
                    "cancellation_date": {
                      "description": "Cancellation date of the policy - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2019-01-30"
                    },
                    "purchase_date": {
                      "description": "The date of the subscription (purchase) of the policy  - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2019-01-23"
                    },
                    "coverage_period": {
                      "description": "The coverage period - ISO 8601 format (YYYY-MM-DD).\nThe coverage start date is the date when it becomes possible for the customer to submit a claim.\nThe coverage end date is the date after which the coverage ends.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "start_date": {
                              "description": "Start date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "2019-01-30"
                            },
                            "end_date": {
                              "description": "End date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "2019-02-09"
                            }
                          }
                        }
                      ],
                      "example": {
                        "start_date": "2019-01-25",
                        "end_date": "2020-01-24"
                      }
                    },
                    "effective_period": {
                      "description": "The effective period  - ISO 8601 format (YYYY-MM-DD)\nThe start date indicates when the contract is starting = activation date.\nThe end date indicates when the contract is ending. If the policy is cancelled, then the field is updated\n",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "start_date": {
                              "description": "Start date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "2019-01-30"
                            },
                            "end_date": {
                              "description": "End date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "2019-02-09"
                            }
                          }
                        }
                      ],
                      "example": {
                        "start_date": "2019-01-25",
                        "end_date": "2020-01-24"
                      }
                    },
                    "contracting_actor_name": {
                      "description": "The legal entity relied to the customer.",
                      "type": "string",
                      "maxLength": 100,
                      "example": "EXPEDIA UK"
                    },
                    "legal_withdrawal_period": {
                      "description": "The legal withdrawal period\nISO 8601 format (P5Y8M4D).\n",
                      "maxLength": 10,
                      "type": "string",
                      "example": "P14D"
                    },
                    "catalog": {
                      "description": "The product catalog.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "description": "The code of the product catalog relied to the policy",
                              "type": "string",
                              "maxLength": 50,
                              "example": "Opodo FR"
                            },
                            "version": {
                              "description": "Catalog version.",
                              "type": "string",
                              "maxLength": 10,
                              "example": "v12"
                            },
                            "country": {
                              "description": "Origin country, ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "currency": {
                              "description": "Currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            }
                          },
                          "required": [
                            "code",
                            "version"
                          ]
                        }
                      ]
                    },
                    "guarantees": {
                      "description": "Set of guarantees included in the product.",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "description": "Guarantee code.",
                            "type": "string",
                            "example": "accidental_damage",
                            "maxLength": 50
                          },
                          "label": {
                            "description": "Guarantee label.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "Medical repatriation."
                          },
                          "is_sub_guarantee": {
                            "description": "True if it's a sub guarantee, false if not.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    },
                    "product": {
                      "description": "Product subscribed on the policy.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Product information.",
                          "properties": {
                            "code": {
                              "description": "Product code",
                              "maxLength": 20,
                              "type": "string",
                              "example": "PRTNCATALOG"
                            },
                            "name": {
                              "description": "Product name",
                              "type": "string",
                              "maxLength": 50,
                              "example": "Short Stay Travel - Formula 1"
                            },
                            "sub_category": {
                              "description": "Product sub category.",
                              "type": "string",
                              "example": "VoyageSimple",
                              "maxLength": 50
                            },
                            "promo_code": {
                              "description": "Promotion code provided on the product on which it has been applied.",
                              "type": "string",
                              "example": "ETE2018",
                              "maxLength": 50
                            },
                            "price": {
                              "description": "The product's price.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Set of prices.",
                                  "properties": {
                                    "total_discount": {
                                      "description": "Total amount of discount, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 10
                                    },
                                    "premium_after_discount_excl_tax": {
                                      "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 180
                                    },
                                    "total_taxes": {
                                      "description": "Total amount of taxes, numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 50.02
                                    },
                                    "price_after_discount_incl_tax": {
                                      "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                      "type": "number",
                                      "example": 330.45
                                    },
                                    "payment_periodicities": {
                                      "description": "List of payment periodicities.",
                                      "type": "array",
                                      "maxItems": 100,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "periodicity": {
                                            "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "R12/P1M"
                                          },
                                          "description": {
                                            "description": "Periodicity label.",
                                            "type": "string",
                                            "example": "MONTHLY",
                                            "maxLength": 50
                                          },
                                          "amount_per_period": {
                                            "description": "The amount of the payment period.",
                                            "type": "number",
                                            "example": 71.87
                                          },
                                          "amount_first_payment": {
                                            "description": "The amount of the first payment.",
                                            "type": "number",
                                            "example": 71.87
                                          }
                                        },
                                        "required": [
                                          "periodicity",
                                          "description",
                                          "amount_per_period",
                                          "amount_first_payment"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "formula",
                                    "price_after_discount_incl_tax"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "addons": {
                      "description": "Add-ons that customer can add to the product.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Product information.",
                        "properties": {
                          "code": {
                            "description": "Product code",
                            "type": "string",
                            "maxLength": 50,
                            "example": "PRTNCATALOG"
                          },
                          "name": {
                            "description": "Product name",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Short Stay Travel - Formula 1"
                          },
                          "price": {
                            "description": "The addon's price.",
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Set of prices.",
                                "properties": {
                                  "total_discount": {
                                    "description": "Total amount of discount, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 10
                                  },
                                  "premium_after_discount_excl_tax": {
                                    "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 180
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.02
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 330.45
                                  },
                                  "payment_periodicities": {
                                    "description": "List of payment periodicities.",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "periodicity": {
                                          "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "R12/P1M"
                                        },
                                        "description": {
                                          "description": "Periodicity label.",
                                          "type": "string",
                                          "example": "MONTHLY",
                                          "maxLength": 50
                                        },
                                        "amount_per_period": {
                                          "description": "The amount of the payment period.",
                                          "type": "number",
                                          "example": 71.87
                                        },
                                        "amount_first_payment": {
                                          "description": "The amount of the first payment.",
                                          "type": "number",
                                          "example": 71.87
                                        }
                                      },
                                      "required": [
                                        "periodicity",
                                        "description",
                                        "amount_per_period",
                                        "amount_first_payment"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "formula",
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    },
                    "price": {
                      "description": "Policy's price details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Set of prices.",
                          "properties": {
                            "total_discount": {
                              "description": "Total amount of discount, numeric with 2 decimals.",
                              "type": "number",
                              "example": 10
                            },
                            "premium_after_discount_excl_tax": {
                              "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                              "type": "number",
                              "example": 180
                            },
                            "total_taxes": {
                              "description": "Total amount of taxes, numeric with 2 decimals.",
                              "type": "number",
                              "example": 50.02
                            },
                            "price_after_discount_incl_tax": {
                              "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                              "type": "number",
                              "example": 330.45
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 100,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "periodicity": {
                                    "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "R12/P1M"
                                  },
                                  "description": {
                                    "description": "Periodicity label.",
                                    "type": "string",
                                    "example": "MONTHLY",
                                    "maxLength": 50
                                  },
                                  "amount_per_period": {
                                    "description": "The amount of the payment period.",
                                    "type": "number",
                                    "example": 71.87
                                  },
                                  "amount_first_payment": {
                                    "description": "The amount of the first payment.",
                                    "type": "number",
                                    "example": 71.87
                                  }
                                },
                                "required": [
                                  "periodicity",
                                  "description",
                                  "amount_per_period",
                                  "amount_first_payment"
                                ]
                              }
                            }
                          },
                          "required": [
                            "formula",
                            "price_after_discount_incl_tax"
                          ]
                        }
                      ]
                    },
                    "payment": {
                      "description": "Payment summary information.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Payment summary information.",
                          "properties": {
                            "type": {
                              "description": "Payment mode selected.",
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFER",
                                "VIRTUAL_CREDIT_CARD",
                                "CASH",
                                "CHEQUE"
                              ],
                              "example": "CREDIT_CARD"
                            },
                            "is_managed_by_axa": {
                              "description": "True if the payment is managed by axa.\nFalse if the payment is managed by a provider service payment.\n",
                              "type": "boolean",
                              "example": true
                            },
                            "payment_reference": {
                              "description": "The payment reference.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "bank cheque number - 27006"
                            },
                            "payment_periodicity": {
                              "description": "Payment periodicities.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "periodicity": {
                                      "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                      "type": "string",
                                      "maxLength": 50,
                                      "example": "R12/P1M"
                                    },
                                    "description": {
                                      "description": "Periodicity label.",
                                      "type": "string",
                                      "example": "MONTHLY",
                                      "maxLength": 50
                                    },
                                    "amount_per_period": {
                                      "description": "The amount of the payment period.",
                                      "type": "number",
                                      "example": 71.87
                                    },
                                    "amount_first_payment": {
                                      "description": "The amount of the first payment.",
                                      "type": "number",
                                      "example": 71.87
                                    }
                                  },
                                  "required": [
                                    "periodicity",
                                    "description",
                                    "amount_per_period",
                                    "amount_first_payment"
                                  ]
                                }
                              ]
                            },
                            "has_missing_payment": {
                              "description": "False if the last payment is correctly processed, true if not.",
                              "type": "boolean",
                              "example": true
                            },
                            "has_bad_debt": {
                              "description": "True if the balance amount different than zero, false if not.",
                              "type": "boolean",
                              "example": true
                            },
                            "balance_amount": {
                              "description": "Payment balance, can be a credit balance or a debit balance.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "value": {
                                      "description": "Amount, numeric, with 2 or 3 decimals.",
                                      "type": "number",
                                      "example": 199.99
                                    },
                                    "currency": {
                                      "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "minLength": 3,
                                      "maxLength": 3,
                                      "example": "EUR"
                                    }
                                  },
                                  "required": [
                                    "value",
                                    "currency"
                                  ]
                                }
                              ]
                            },
                            "bad_debt_balance_amount": {
                              "description": "Payment balance in bad debt situation.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "value": {
                                      "description": "Amount, numeric, with 2 or 3 decimals.",
                                      "type": "number",
                                      "example": 199.99
                                    },
                                    "currency": {
                                      "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                      "type": "string",
                                      "minLength": 3,
                                      "maxLength": 3,
                                      "example": "EUR"
                                    }
                                  },
                                  "required": [
                                    "value",
                                    "currency"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "policy_holder": {
                      "description": "Policy holder.",
                      "allOf": [
                        {
                          "description": "Policy holder",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Depp"
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Johnny"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                },
                                "email": {
                                  "description": "Email address.",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "johnny.depp@mail.com"
                                },
                                "registrations": {
                                  "description": "List of person registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "PASSPORT",
                                          "DRIVER_LICENSE",
                                          "TAX_REGISTRATION",
                                          "RESIDENCE_PERMIT"
                                        ],
                                        "maxLength": 28
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "title",
                                "first_name",
                                "last_name",
                                "birth_date"
                              ]
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "maxLength": 2,
                                  "minLength": 2
                                },
                                "phone": {
                                  "description": "Phone number.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 5
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 20
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "is_policy_beneficiary": {
                                  "description": "Indicates if the policy holder is also a policy beneficiary.",
                                  "type": "boolean"
                                },
                                "external_holder_id": {
                                  "description": "Partner identifier of the customer.",
                                  "type": "string",
                                  "maxLength": 150
                                }
                              }
                            }
                          ],
                          "required": [
                            "spoken_language",
                            "email",
                            "is_policy_beneficiary"
                          ]
                        }
                      ]
                    },
                    "beneficiaries": {
                      "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "description": "Policy beneficiary.",
                        "allOf": [
                          {
                            "properties": {
                              "id": {
                                "description": "Beneficiary identifier.",
                                "maxLength": 150,
                                "type": "string",
                                "readOnly": true
                              },
                              "age_segment": {
                                "description": "Age Segment.\n\n- ADULT: Adult\n- CHILD: Child\n- INFANT: Infant or baby\n- SENIOR: Senior Citizen or Elderly Person\n",
                                "type": "string",
                                "example": "ADULT",
                                "enum": [
                                  "ADULT",
                                  "CHILD",
                                  "INFANT",
                                  "SENIOR"
                                ]
                              },
                              "is_policy_holder": {
                                "description": "Identifies this beneficiary as the policyholder for the policy.",
                                "type": "boolean",
                                "example": true
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Depp"
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Johnny"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "johnny.depp@mail.com"
                              },
                              "registrations": {
                                "description": "List of person registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "PASSPORT",
                                        "DRIVER_LICENSE",
                                        "TAX_REGISTRATION",
                                        "RESIDENCE_PERMIT"
                                      ],
                                      "maxLength": 28
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          }
                        ]
                      }
                    },
                    "attachments": {
                      "description": "Set of documents linked to the policy.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                            "type": "string",
                            "maxLength": 50
                          },
                          "created_at": {
                            "description": "Date and time of document creation - ISO 8601 format (YYYY-MM-DD).",
                            "type": "string",
                            "format": "date",
                            "example": "2019-01-30",
                            "readOnly": true
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ]
                            },
                            "readOnly": true
                          },
                          "technical_reference": {
                            "description": "The technical reference used to download the attachment.",
                            "type": "string",
                            "maxLength": 50,
                            "readOnly": true
                          }
                        },
                        "required": [
                          "name",
                          "content_url"
                        ]
                      }
                    },
                    "additional_information": {
                      "description": "Additional information of the policy.\n",
                      "type": "array",
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "description": "Information code.\nEXISTING_INSURANCE_REFERENCE: References to existing or complementary insurance\n",
                            "type": "string",
                            "enum": [
                              "EXISTING_INSURANCE_REFERENCE"
                            ],
                            "maxLength": 28
                          },
                          "value": {
                            "description": "Information value.",
                            "type": "string",
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "code",
                          "value"
                        ]
                      },
                      "example": [
                        {
                          "code": "EXISTING_INSURANCE_REFERENCE",
                          "value": "A1455CDH"
                        }
                      ]
                    },
                    "renewal_date": {
                      "description": "The renewal date of the policy",
                      "type": "string",
                      "format": "date",
                      "example": "2021-11-20"
                    },
                    "related_order_id": {
                      "description": "The related order identifier.",
                      "type": "string",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    },
                    "criteria": {
                      "description": "The quoting criteria.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "code": {
                            "description": "The criterion code.",
                            "type": "string",
                            "example": "party_composition",
                            "maxLength": 150
                          },
                          "path": {
                            "description": "The path in the input of quote request.",
                            "type": "string",
                            "example": "travelers.composition",
                            "maxLength": 150
                          },
                          "name": {
                            "description": "The criterion name.",
                            "type": "string",
                            "example": "Party composition",
                            "maxLength": 150
                          },
                          "value": {
                            "description": "The criterion value.",
                            "type": "string",
                            "example": "SINGLE",
                            "maxLength": 150
                          },
                          "type": {
                            "description": "The criterion type.",
                            "type": "string",
                            "enum": [
                              "DATE",
                              "NUMBER",
                              "STRING"
                            ]
                          }
                        },
                        "required": [
                          "code",
                          "path",
                          "name",
                          "type",
                          "value"
                        ]
                      },
                      "maxItems": 100,
                      "example": [
                        {
                          "code": "nb_adults",
                          "path": "travelers.adults",
                          "name": "product_1_main_travel | Number of adults",
                          "type": "NUMBER",
                          "value": "6"
                        },
                        {
                          "code": "party_composition",
                          "path": "travelers.composition",
                          "name": "product_1_main_travel | Party composition",
                          "value": "SINGLE",
                          "type": "STRING"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      },
      "patch": {
        "summary": "Update policy without price modification",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "policy_holder": {
                    "description": "Policy holder.",
                    "allOf": [
                      {
                        "description": "Policy holder",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Depp"
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Johnny"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              },
                              "email": {
                                "description": "Email address.",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "johnny.depp@mail.com"
                              },
                              "registrations": {
                                "description": "List of person registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "PASSPORT",
                                        "DRIVER_LICENSE",
                                        "TAX_REGISTRATION",
                                        "RESIDENCE_PERMIT"
                                      ],
                                      "maxLength": 28
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "maxLength": 2,
                                "minLength": 2
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "is_policy_beneficiary": {
                                "description": "Indicates if the policy holder is also a policy beneficiary.",
                                "type": "boolean"
                              },
                              "external_holder_id": {
                                "description": "Partner identifier of the customer.",
                                "type": "string",
                                "maxLength": 150
                              }
                            }
                          }
                        ],
                        "required": [
                          "spoken_language",
                          "email",
                          "is_policy_beneficiary"
                        ]
                      }
                    ]
                  },
                  "beneficiaries": {
                    "description": "Beneficiaries list (other than the policy holder if he is also a beneficiary).",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "description": "Policy beneficiary.",
                      "allOf": [
                        {
                          "properties": {
                            "id": {
                              "description": "Beneficiary identifier.",
                              "maxLength": 150,
                              "type": "string",
                              "readOnly": true
                            },
                            "age_segment": {
                              "description": "Age Segment.\n\n- ADULT: Adult\n- CHILD: Child\n- INFANT: Infant or baby\n- SENIOR: Senior Citizen or Elderly Person\n",
                              "type": "string",
                              "example": "ADULT",
                              "enum": [
                                "ADULT",
                                "CHILD",
                                "INFANT",
                                "SENIOR"
                              ]
                            },
                            "is_policy_holder": {
                              "description": "Identifies this beneficiary as the policyholder for the policy.",
                              "type": "boolean",
                              "example": true
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                              "type": "string",
                              "enum": [
                                "MR",
                                "MS",
                                "MISS",
                                "DR",
                                "PR"
                              ],
                              "minLength": 2,
                              "maxLength": 4,
                              "example": "MR"
                            },
                            "first_name": {
                              "description": "First name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "Depp"
                            },
                            "middle_name": {
                              "description": "Middle name.",
                              "type": "string",
                              "maxLength": 100
                            },
                            "last_name": {
                              "description": "Last name.",
                              "type": "string",
                              "maxLength": 100,
                              "example": "Johnny"
                            },
                            "birth_date": {
                              "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                              "type": "string",
                              "format": "date",
                              "example": "1990-04-25"
                            },
                            "email": {
                              "description": "Email address.",
                              "allOf": [
                                {
                                  "type": "string",
                                  "format": "email",
                                  "example": "jonathan.doe@mail.com"
                                }
                              ],
                              "example": "johnny.depp@mail.com"
                            },
                            "registrations": {
                              "description": "List of person registrations.",
                              "type": "array",
                              "maxItems": 2,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "registration_type": {
                                    "description": "Type of person registration.\nID_CARD : Identity card reference\nPASSPORT : Passport reference\nDRIVER_LICENSE : Driver license reference\nTAX_REGISTRATION : Tax registration reference\nRESIDENCE_PERMIT: Residente permit reference\n",
                                    "type": "string",
                                    "enum": [
                                      "ID_CARD",
                                      "PASSPORT",
                                      "DRIVER_LICENSE",
                                      "TAX_REGISTRATION",
                                      "RESIDENCE_PERMIT"
                                    ],
                                    "maxLength": 28
                                  },
                                  "value": {
                                    "description": "Value of the registration.",
                                    "maxLength": 20,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "title",
                            "first_name",
                            "last_name",
                            "birth_date"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Content of a policy update.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Patch successfully done (No content returned)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Request not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}/cancel": {
      "post": {
        "summary": "Cancel a policy according to its id.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "The policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancellation_date": {
                    "description": "Date when policy cancellation should be effective - ISO 8601 format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2018-08-20"
                  },
                  "cancellation_reason": {
                    "description": "Reason for policy cancellation.",
                    "type": "string",
                    "enum": [
                      "COOLING_OFF_PERIOD",
                      "INSUFFICIENT_FUNDS",
                      "RECOVERY_FAILURE",
                      "DISPUTED",
                      "SPECIFIC_BENEFITS"
                    ]
                  }
                },
                "required": [
                  "cancellation_date"
                ]
              }
            }
          },
          "description": "Information about cancellation.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refund_amount": {
                      "description": "The refund amount for the policy.",
                      "allOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "value": {
                              "description": "Amount, numeric, with 2 or 3 decimals.",
                              "type": "number",
                              "example": 199.99
                            },
                            "currency": {
                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            }
                          },
                          "required": [
                            "value",
                            "currency"
                          ]
                        }
                      ]
                    },
                    "coverage_end_date": {
                      "description": "End date of policy coverage - ISO 8601 format (YYYY-MM-DD).",
                      "type": "string",
                      "format": "date",
                      "example": "2018-08-20"
                    }
                  },
                  "required": [
                    "coverage_end_date"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}/certificate_requests": {
      "post": {
        "summary": "Generate a new certificate document and retrieve the resource url.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy resource url.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_id": {
                      "description": "Unique final policy identifier.",
                      "type": "string",
                      "maxLength": 150
                    },
                    "certificate_url": {
                      "description": "Url of the certificate.",
                      "type": "string",
                      "maxLength": 2000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}/communication_requests": {
      "post": {
        "summary": "Sends a request for a communication with the customer.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "description": "Communication channel.",
                    "type": "string",
                    "enum": [
                      "EMAIL"
                    ],
                    "example": "EMAIL"
                  },
                  "communication_type": {
                    "description": "Type of communication to send.",
                    "type": "string",
                    "example": "SEPA_MANDATE",
                    "maxLength": 50
                  },
                  "attachment_refs": {
                    "description": "Attachments to send with the communication.",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "type": "string",
                      "maxLength": 2000
                    }
                  }
                },
                "required": [
                  "channel",
                  "communication_type"
                ]
              }
            }
          },
          "description": "Mail information."
        },
        "responses": {
          "204": {
            "description": "Request treated."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}/finalize": {
      "post": {
        "summary": "Finalizes policy subscription, completing missing information.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "policy_id",
            "description": "Unique policy identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_policy_number": {
                    "description": "External policy identifier that can be provided by the partner.",
                    "type": "string",
                    "maxLength": 50
                  },
                  "subscription_country": {
                    "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                    "type": "string",
                    "example": "FR",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "payment": {
                    "description": "Payment information provided by the API caller.\nThis information is mandatory in the case where AXA managed the payment.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Payment information, at least one of the properties psp_transaction_id or IBAN should be provided.",
                        "properties": {
                          "type": {
                            "description": "Payment mode selected.",
                            "type": "string",
                            "enum": [
                              "CREDIT_CARD",
                              "DEBIT_CARD",
                              "ELECTRONIC_TRANSFER",
                              "VIRTUAL_CREDIT_CARD",
                              "CASH",
                              "CHEQUE"
                            ],
                            "example": "CREDIT_CARD"
                          },
                          "is_managed_by_axa": {
                            "description": "True if the payment is managed by axa.\nFalse if the payment is managed by a provider service payment.\n",
                            "type": "boolean",
                            "example": true
                          },
                          "payment_reference": {
                            "description": "The payment reference.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "bank cheque number - 27006"
                          },
                          "periodicity": {
                            "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                            "type": "string",
                            "maxLength": 50,
                            "example": "R12/P1M"
                          },
                          "psp_transaction_id": {
                            "description": "Payment reference on the payment provider system.",
                            "type": "string",
                            "maxLength": 150
                          },
                          "transfer_information": {
                            "description": "Information about electronic transfer.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "account_holder": {
                                    "type": "object",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "first_name": {
                                            "type": "string",
                                            "maxLength": 100,
                                            "description": "First name of the account's owner."
                                          },
                                          "last_name": {
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Johnny",
                                            "description": "Last name of the account's owner."
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "account_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "Name's of this bank account"
                                  },
                                  "country_code": {
                                    "type": "string",
                                    "minLength": 2,
                                    "maxLength": 2,
                                    "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code)."
                                  },
                                  "wire_code": {
                                    "type": "array",
                                    "maxItems": 50,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "wire_code_type": {
                                          "type": "string",
                                          "enum": [
                                            "IBAN"
                                          ],
                                          "description": "Wire's type (only IBAN is accepted)"
                                        },
                                        "value": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "description": "The value of the IBAN"
                                        }
                                      },
                                      "required": [
                                        "wire_code_type",
                                        "value"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "wire_code"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "subscription_country"
                ]
              }
            }
          },
          "description": "Policy confirmation request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy confirmation response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_number": {
                      "description": "Final policy number.",
                      "type": "string",
                      "maxLength": 50,
                      "readOnly": true
                    },
                    "external_policy_number": {
                      "description": "External policy identifier that can be provided by the partner.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "status": {
                      "description": "Policy's status details.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Policy status.",
                          "readOnly": true,
                          "properties": {
                            "value": {
                              "description": "Status value",
                              "type": "string",
                              "enum": [
                                "DRAFT",
                                "ACTIVE",
                                "CANCELLED"
                              ],
                              "maxLength": 9,
                              "minLength": 5
                            },
                            "reason": {
                              "description": "Status reason.",
                              "type": "string",
                              "maxLength": 50
                            }
                          },
                          "required": [
                            "value"
                          ]
                        }
                      ],
                      "readOnly": true
                    },
                    "subscription_country": {
                      "description": "Country where the customer subscribes the policy, ISO-3166-1 alpha-2 format (2 letter codes).",
                      "type": "string",
                      "example": "FR",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "payment": {
                      "description": "Payment information provided by the API caller.\nThis information is mandatory in the case where AXA managed the payment.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Payment information, at least one of the properties psp_transaction_id or IBAN should be provided.",
                          "properties": {
                            "type": {
                              "description": "Payment mode selected.",
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFER",
                                "VIRTUAL_CREDIT_CARD",
                                "CASH",
                                "CHEQUE"
                              ],
                              "example": "CREDIT_CARD"
                            },
                            "is_managed_by_axa": {
                              "description": "True if the payment is managed by axa.\nFalse if the payment is managed by a provider service payment.\n",
                              "type": "boolean",
                              "example": true
                            },
                            "payment_reference": {
                              "description": "The payment reference.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "bank cheque number - 27006"
                            },
                            "periodicity": {
                              "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                              "type": "string",
                              "maxLength": 50,
                              "example": "R12/P1M"
                            },
                            "psp_transaction_id": {
                              "description": "Payment reference on the payment provider system.",
                              "type": "string",
                              "maxLength": 150
                            },
                            "transfer_information": {
                              "description": "Information about electronic transfer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "account_holder": {
                                      "type": "object",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "first_name": {
                                              "type": "string",
                                              "maxLength": 100,
                                              "description": "First name of the account's owner."
                                            },
                                            "last_name": {
                                              "type": "string",
                                              "maxLength": 100,
                                              "example": "Johnny",
                                              "description": "Last name of the account's owner."
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "account_name": {
                                      "type": "string",
                                      "maxLength": 100,
                                      "description": "Name's of this bank account"
                                    },
                                    "country_code": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 2,
                                      "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code)."
                                    },
                                    "wire_code": {
                                      "type": "array",
                                      "maxItems": 50,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "wire_code_type": {
                                            "type": "string",
                                            "enum": [
                                              "IBAN"
                                            ],
                                            "description": "Wire's type (only IBAN is accepted)"
                                          },
                                          "value": {
                                            "type": "string",
                                            "maxLength": 50,
                                            "description": "The value of the IBAN"
                                          }
                                        },
                                        "required": [
                                          "wire_code_type",
                                          "value"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "wire_code"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "attachments": {
                      "description": "Set of attachments provided with the policy.",
                      "readOnly": true,
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- CONTRACT;\n- ...\n",
                            "type": "string",
                            "maxLength": 50
                          },
                          "created_at": {
                            "description": "Date and time of document creation - ISO 8601 format (YYYY-MM-DD).",
                            "type": "string",
                            "format": "date",
                            "example": "2019-01-30",
                            "readOnly": true
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ]
                            },
                            "readOnly": true
                          },
                          "technical_reference": {
                            "description": "The technical reference used to download the attachment.",
                            "type": "string",
                            "maxLength": 50,
                            "readOnly": true
                          }
                        },
                        "required": [
                          "name",
                          "content_url"
                        ]
                      }
                    }
                  },
                  "required": [
                    "subscription_country"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Policy not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/policies/{policy_id}/payments/{payment_id}": {
      "patch": {
        "summary": "Update payments policy",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "payment_id",
            "in": "path",
            "description": "Payment identifier. The wildcard `current` can be used to target the only existing payment resource.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payment information, transfer information should be provided.",
                "properties": {
                  "type": {
                    "description": "Payment mode selected.",
                    "type": "string",
                    "enum": [
                      "ELECTRONIC_TRANSFER"
                    ],
                    "example": "ELECTRONIC_TRANSFER"
                  },
                  "transfer_information": {
                    "description": "Information about electronic transfer.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "account_holder": {
                            "type": "object",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "first_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "First name of the account's owner."
                                  },
                                  "last_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Johnny",
                                    "description": "Last name of the account's owner."
                                  }
                                }
                              }
                            ]
                          },
                          "account_name": {
                            "type": "string",
                            "maxLength": 100,
                            "description": "Name's of this bank account"
                          },
                          "country_code": {
                            "type": "string",
                            "minLength": 2,
                            "maxLength": 2,
                            "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code)."
                          },
                          "wire_code": {
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "properties": {
                                "wire_code_type": {
                                  "type": "string",
                                  "enum": [
                                    "IBAN"
                                  ],
                                  "description": "Wire's type (only IBAN is accepted)"
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 50,
                                  "description": "The value of the IBAN"
                                }
                              },
                              "required": [
                                "wire_code_type",
                                "value"
                              ]
                            }
                          }
                        },
                        "required": [
                          "wire_code"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of a policy update.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Patch successfully done (No content returned)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (Request not found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.policies.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/individual/travel/quotes_requests": {
      "post": {
        "summary": "Gets quotes for travel insurances.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "required": false,
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-quote-mode",
            "description": "Quote mode, can be used to get a quote on draft or test mode.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "TEST",
                "LIVE"
              ],
              "default": "LIVE"
            }
          },
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA (example 42bbd332fa8f48e7bb382165f257a579).",
            "in": "header",
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "description": "Context of the request.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "country": {
                            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "currency": {
                            "description": "Customer currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          },
                          "intermediary_code": {
                            "description": "Code of business intermediary.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "KYZ451"
                          }
                        },
                        "required": [
                          "currency"
                        ]
                      }
                    ]
                  },
                  "product_criteria": {
                    "description": "Product criteria.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "product_code": {
                            "description": "Product code, used if the quote request is for a specific product.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "PTRAVEL001"
                          },
                          "catalog": {
                            "description": "Desired product catalog.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Catalog code.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "PRTNCATALOG"
                                  },
                                  "version": {
                                    "description": "Catalog version.",
                                    "type": "string",
                                    "maxLength": 10,
                                    "example": "v2"
                                  }
                                },
                                "required": [
                                  "code",
                                  "version"
                                ]
                              }
                            ]
                          },
                          "category": {
                            "description": "Product category.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "VoyageoCourtSejour"
                          },
                          "sub_category": {
                            "description": "Product sub category.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "VoyageSimple"
                          },
                          "is_cheapest": {
                            "description": "Indicates if only the cheapest products hase to be provided.",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "catalog",
                          "category",
                          "sub_category"
                        ]
                      }
                    ]
                  },
                  "travel": {
                    "description": "Travel information.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cost": {
                            "description": "Total amount of the travel cost, numeric with 2 decimals.",
                            "type": "number",
                            "example": 1500.52
                          },
                          "destination_area": {
                            "description": "Global destination area. For example FRANCE, EUROPE, WORLDWIDE EXCLUDING USA & CANADA, WORLDWIDE INCLUDING USA & CANADA.",
                            "type": "string",
                            "maxLength": 50
                          },
                          "destination_country": {
                            "description": "Destination country, iso-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "origin_country": {
                            "description": "Origin country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "travelers": {
                            "description": "Information about the travelers:\n- numbers of different categories of travelers;\n- composition;\n- baggage.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "adults": {
                                    "description": "Number of adults.",
                                    "type": "integer",
                                    "example": 2
                                  },
                                  "children": {
                                    "description": "Number of children.",
                                    "type": "integer",
                                    "example": 1
                                  },
                                  "infants": {
                                    "description": "Number of infants.",
                                    "type": "integer",
                                    "example": 0
                                  },
                                  "seniors": {
                                    "description": "Number of seniors.",
                                    "type": "integer",
                                    "example": 0
                                  },
                                  "oldest_traveler_age": {
                                    "description": "Age of the oldest traveler.",
                                    "type": "integer",
                                    "example": 34
                                  },
                                  "composition": {
                                    "description": "Composition of the travelers:\nSINGLE = 1 Adult travelling without children (on their own)\nCOUPLE = 2 Adults travelling without children\nFAMILY = 1 or N Adults travelling with N children and N infants\nGROUP = N adults + N Children + N Seniors  +  N Infants where pricing is discounted by number of travellers\n",
                                    "type": "string",
                                    "enum": [
                                      "SINGLE",
                                      "COUPLE",
                                      "FAMILY",
                                      "GROUP"
                                    ],
                                    "example": "SINGLE"
                                  },
                                  "checked_baggage": {
                                    "description": "Number of checked baggage.",
                                    "type": "integer",
                                    "example": 2
                                  },
                                  "medical_screening_score": {
                                    "description": "Medical screening score.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "maximum_individual": {
                                            "description": "The maximum score of the travelers medical screening.",
                                            "type": "number",
                                            "example": 5.5
                                          },
                                          "total_party": {
                                            "description": "The sum of all travellers medical screening.",
                                            "type": "number",
                                            "example": 18.5
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "special_requirement": {
                                    "type": "object",
                                    "properties": {
                                      "has_card_affiliate_member": {
                                        "description": "- True if one of the travelers is a members of an association or cardholders of a particular card.\n- False if none of the travelers is a member of an association or a cardholder.\n",
                                        "type": "boolean",
                                        "example": false
                                      },
                                      "has_complementary_insurance": {
                                        "description": "- True if one of the travelers has private medical insurance.\n- False if none of the travelers has private medical insurance.\n",
                                        "type": "boolean",
                                        "example": false
                                      },
                                      "has_pre_existing_medical": {
                                        "description": "- True if one of the travelers has any medical conditions that could affect him whilst on a trip\n- False if none of the travelers has any medical conditions that could affect him whilst on a trip.\n",
                                        "type": "boolean",
                                        "example": false
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "adults",
                                  "children",
                                  "infants"
                                ]
                              }
                            ]
                          },
                          "start_date": {
                            "description": "Start date of the travel or coverage (in case of multi-trip).\nISO 8601 format (YYYY-MM-DD).\n",
                            "type": "string",
                            "maxLength": 10,
                            "format": "date"
                          },
                          "end_date": {
                            "description": "End date of the travel or coverage (in case of multi-trip).\nISO 8601 format (YYYY-MM-DD).\n",
                            "type": "string",
                            "maxLength": 10,
                            "format": "date"
                          },
                          "booking_date": {
                            "description": "Travel booking date.\nISO 8601 format (YYYY-MM-DD).\n",
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "start_date"
                        ]
                      }
                    ]
                  },
                  "commissions": {
                    "description": "Desired commissions for the partner.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "percentage": {
                            "description": "Commission value as percentage, numeric with 2 decimals.",
                            "type": "number",
                            "maximum": 100,
                            "minimum": 0,
                            "example": 5
                          },
                          "amount": {
                            "description": "Commission value as fixed amount\nin the currency defined on the context, numeric with 2 decimals.\n",
                            "type": "number",
                            "example": 60
                          }
                        }
                      }
                    ]
                  },
                  "promo_code": {
                    "description": "Promotion code.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "GOODPROMO20018"
                  },
                  "quote_code": {
                    "description": "Quote code.",
                    "type": "string",
                    "example": "PVjhRoKMDmmzJQGH9NOuwF3zS4mkja9+XPC8MTGrjf6i+fU6IQ/ApyFcZF5rkDE1kUjZ8EmX+AEXqGOI",
                    "maxLength": 2000
                  },
                  "addon_codes": {
                    "description": "List of additional option codes that the customer can subscribe in addition to the product.\n** Could be fulfilled only if quote_code is not null **\n",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "type": "string",
                      "maxLength": 2000,
                      "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                    }
                  }
                }
              }
            }
          },
          "description": "Content of quotes request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "context": {
                      "description": "Context of the quote request.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "country": {
                              "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                              "type": "string",
                              "example": "FR",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "currency": {
                              "description": "Customer currency, ISO 4217 format (3 letter code).",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3,
                              "example": "EUR"
                            },
                            "intermediary_code": {
                              "description": "Code of business intermediary.",
                              "type": "string",
                              "maxLength": 50,
                              "example": "KYZ451"
                            }
                          },
                          "required": [
                            "currency"
                          ]
                        }
                      ]
                    },
                    "quote_expire_at": {
                      "description": "Date and time of quotes expiration.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                      "type": "string",
                      "maxLength": 20,
                      "format": "date-time",
                      "example": "2019-03-22T10:59:00Z"
                    },
                    "products": {
                      "description": "Products list",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Product information.",
                        "properties": {
                          "product_code": {
                            "description": "Product code.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "PRDINTERMEDIATE"
                          },
                          "quote_code": {
                            "description": "Quote code.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "d41d8cd98f00b204e9800998ecf8427e"
                          },
                          "promo_code": {
                            "description": "Promotion code provided on the request, it is sent with the product/addon on which it has been applied.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "GOODPROMO200"
                          },
                          "name": {
                            "description": "Product name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Advanced"
                          },
                          "description": {
                            "description": "Product marketing description.",
                            "type": "string",
                            "maxLength": 1000,
                            "example": "Advanced for more guarantees"
                          },
                          "guarantees": {
                            "description": "List of guarantees.",
                            "type": "array",
                            "maxItems": 1000,
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "description": "Guarantee code.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "label": {
                                  "description": "Guarantee Label.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "headline": {
                                  "description": "Guarantee title.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "description": {
                                  "description": "Guarantee description.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "limit": {
                                  "description": "Limit of the guarantee.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "excess": {
                                  "description": "Excess information.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "sub_guarantees": {
                                  "description": "Sub guarantees list.",
                                  "type": "array",
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "description": "Guarantee code.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "label": {
                                        "description": "Guarantee Label.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "description": {
                                        "description": "Guarantee description.",
                                        "type": "string",
                                        "maxLength": 1000
                                      },
                                      "limit": {
                                        "description": "Sub guarantee limit.",
                                        "type": "string",
                                        "maxLength": 1000
                                      },
                                      "excess": {
                                        "description": "Excess information.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "code",
                                      "label",
                                      "description"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "code",
                                "label"
                              ]
                            }
                          },
                          "prices": {
                            "description": "Set of amount linked to the product.",
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Set of prices.",
                                "properties": {
                                  "country_taxes": {
                                    "description": "List of taxes applied on customer country.",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "description": "Tax's name.",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "VAT"
                                        },
                                        "tax_amount": {
                                          "description": "Amount of tax, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 5.02
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "tax_amount"
                                      ]
                                    }
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.02
                                  },
                                  "total_discount": {
                                    "description": "Total amount of discount, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 10
                                  },
                                  "premium_after_discount_excl_tax": {
                                    "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 240
                                  },
                                  "price_before_discount_incl_tax": {
                                    "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 340.45
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 330.45
                                  },
                                  "guarantees_class_prices": {
                                    "description": "List of prices splited by guarantee class.",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "description": "Prices of guarantee class.",
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "description": "Code of guarantee class.",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "Medical"
                                        },
                                        "label": {
                                          "description": "Label of guarantee class.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "Medical Guarantees."
                                        },
                                        "total_taxes": {
                                          "description": "Total amount of taxes of the guarantee class, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 10.02
                                        },
                                        "premium_after_discount_excl_tax": {
                                          "description": "Premium discounted of the guarantee class, excluding taxes, numeric with 2 decimals.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "payment_periodicities": {
                                    "description": "List of payment periodicities.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "periodicity": {
                                          "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                          "type": "string",
                                          "maxLength": 25,
                                          "example": "R12/P1M"
                                        },
                                        "description": {
                                          "description": "Periodicity label.",
                                          "type": "string",
                                          "example": "MONTHLY",
                                          "maxLength": 50
                                        },
                                        "amount_per_period": {
                                          "description": "The amount of the payment period.",
                                          "type": "number",
                                          "example": 71.87
                                        },
                                        "amount_first_payment": {
                                          "description": "The amount of the first payment.",
                                          "type": "number",
                                          "example": 71.87
                                        }
                                      },
                                      "required": [
                                        "periodicity",
                                        "description",
                                        "amount_per_period",
                                        "amount_first_payment"
                                      ]
                                    },
                                    "maxItems": 100
                                  }
                                },
                                "required": [
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            ]
                          },
                          "attachments": {
                            "description": "List of documents linked to the product.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Attachment information.",
                              "properties": {
                                "name": {
                                  "description": "Attached document name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "content_url": {
                                  "description": "URL to download the document.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "type": {
                                  "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "name",
                                "content_url"
                              ]
                            }
                          },
                          "consents": {
                            "description": "List of needed customer consents.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Consent to be requested to the customer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Disclaimer to be displayed to the customer.",
                                  "properties": {
                                    "code": {
                                      "description": "Disclaimer code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "text": {
                                      "description": "Disclaimer text.",
                                      "type": "string",
                                      "maxLength": 1000
                                    },
                                    "type": {
                                      "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                      "type": "string",
                                      "enum": [
                                        "PERSONAL_DATA",
                                        "SUBSCRIPTION",
                                        "PAYMENT",
                                        "SEND_QUOTE",
                                        "ALL"
                                      ],
                                      "example": "PERSONAL_DATA"
                                    }
                                  },
                                  "required": [
                                    "text",
                                    "type"
                                  ]
                                },
                                {
                                  "properties": {
                                    "is_mandatory": {
                                      "description": "Indicates if the consent is mandatory.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "is_mandatory"
                              ]
                            }
                          },
                          "disclaimers": {
                            "description": "List of disclaimers to display to the customer.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Disclaimer to be displayed to the customer.",
                              "properties": {
                                "code": {
                                  "description": "Disclaimer code.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "text": {
                                  "description": "Disclaimer text.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "type": {
                                  "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                  "type": "string",
                                  "enum": [
                                    "PERSONAL_DATA",
                                    "SUBSCRIPTION",
                                    "PAYMENT",
                                    "SEND_QUOTE",
                                    "ALL"
                                  ],
                                  "example": "PERSONAL_DATA"
                                }
                              },
                              "required": [
                                "text",
                                "type"
                              ]
                            }
                          },
                          "travelers_breakdown": {
                            "description": "List of travelers breakdown.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Traveler type.",
                                  "type": "string",
                                  "enum": [
                                    "ADULTS",
                                    "CHILDREN",
                                    "INFANTS",
                                    "SENIORS"
                                  ],
                                  "example": "ADULTS"
                                },
                                "quote_code": {
                                  "description": "Quote code per traveler type.",
                                  "type": "string",
                                  "maxLength": 2000,
                                  "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                                },
                                "total_travelers": {
                                  "description": "Total number of travellers by type.",
                                  "type": "number",
                                  "example": 2
                                },
                                "prices": {
                                  "description": "Price per traveler type.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Set of prices.",
                                      "properties": {
                                        "country_taxes": {
                                          "description": "List of taxes applied on customer country.",
                                          "type": "array",
                                          "maxItems": 100,
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "description": "Tax's name.",
                                                "type": "string",
                                                "maxLength": 50,
                                                "example": "VAT"
                                              },
                                              "tax_amount": {
                                                "description": "Amount of tax, numeric with 2 decimals.",
                                                "type": "number",
                                                "example": 5.02
                                              }
                                            },
                                            "required": [
                                              "name",
                                              "tax_amount"
                                            ]
                                          }
                                        },
                                        "total_taxes": {
                                          "description": "Total amount of taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 50.02
                                        },
                                        "total_discount": {
                                          "description": "Total amount of discount, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 10
                                        },
                                        "premium_after_discount_excl_tax": {
                                          "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 240
                                        },
                                        "price_before_discount_incl_tax": {
                                          "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 340.45
                                        },
                                        "price_after_discount_incl_tax": {
                                          "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 330.45
                                        },
                                        "guarantees_class_prices": {
                                          "description": "List of prices splited by guarantee class.",
                                          "type": "array",
                                          "maxItems": 100,
                                          "items": {
                                            "description": "Prices of guarantee class.",
                                            "type": "object",
                                            "properties": {
                                              "code": {
                                                "description": "Code of guarantee class.",
                                                "type": "string",
                                                "maxLength": 50,
                                                "example": "Medical"
                                              },
                                              "label": {
                                                "description": "Label of guarantee class.",
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "Medical Guarantees."
                                              },
                                              "total_taxes": {
                                                "description": "Total amount of taxes of the guarantee class, numeric with 2 decimals.",
                                                "type": "number",
                                                "example": 10.02
                                              },
                                              "premium_after_discount_excl_tax": {
                                                "description": "Premium discounted of the guarantee class, excluding taxes, numeric with 2 decimals.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "payment_periodicities": {
                                          "description": "List of payment periodicities.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "periodicity": {
                                                "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                                "type": "string",
                                                "maxLength": 25,
                                                "example": "R12/P1M"
                                              },
                                              "description": {
                                                "description": "Periodicity label.",
                                                "type": "string",
                                                "example": "MONTHLY",
                                                "maxLength": 50
                                              },
                                              "amount_per_period": {
                                                "description": "The amount of the payment period.",
                                                "type": "number",
                                                "example": 71.87
                                              },
                                              "amount_first_payment": {
                                                "description": "The amount of the first payment.",
                                                "type": "number",
                                                "example": 71.87
                                              }
                                            },
                                            "required": [
                                              "periodicity",
                                              "description",
                                              "amount_per_period",
                                              "amount_first_payment"
                                            ]
                                          },
                                          "maxItems": 100
                                        }
                                      },
                                      "required": [
                                        "price_after_discount_incl_tax"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "origin_product_code": {
                            "description": "Code of the origin product.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "PRDBASIC"
                          },
                          "is_default_product": {
                            "description": "Indicates if the product is supposed to be preselected by default.",
                            "type": "boolean",
                            "example": true
                          },
                          "addon_codes": {
                            "description": "List of additional option codes that the customer can subscribe in addition to the product.\nNote: There is here only the list of add-ons codes. The contents of each add-on is described in TravelQuotesResponse.Addons section.\n",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "string",
                              "maxLength": 2000
                            }
                          },
                          "deep_link_url": {
                            "description": "URL to the AXA customer website.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "https://neosales.link/6fz"
                          }
                        },
                        "required": [
                          "product_code",
                          "prices",
                          "guarantees"
                        ]
                      }
                    },
                    "addons": {
                      "description": "Add-ons that customer can add to the product.",
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "description": "Detail of add-on that can be attached to a product.",
                        "properties": {
                          "quote_code": {
                            "description": "Quote code.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "d41d8cd98f00b204e9800998ecf8427e"
                          },
                          "promo_code": {
                            "description": "Promotion code provided on the request, it is sent with the product/addon on which it has been applied.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "GOODPROMO200"
                          },
                          "name": {
                            "description": "Product name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Advanced"
                          },
                          "description": {
                            "description": "Product marketing description.",
                            "type": "string",
                            "maxLength": 1000,
                            "example": "Advanced for more guarantees"
                          },
                          "guarantees": {
                            "description": "List of guarantees.",
                            "type": "array",
                            "maxItems": 1000,
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "description": "Guarantee code.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "label": {
                                  "description": "Guarantee Label.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "headline": {
                                  "description": "Guarantee title.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "description": {
                                  "description": "Guarantee description.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "limit": {
                                  "description": "Limit of the guarantee.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "excess": {
                                  "description": "Excess information.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "sub_guarantees": {
                                  "description": "Sub guarantees list.",
                                  "type": "array",
                                  "maxItems": 100,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "description": "Guarantee code.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "label": {
                                        "description": "Guarantee Label.",
                                        "type": "string",
                                        "maxLength": 255
                                      },
                                      "description": {
                                        "description": "Guarantee description.",
                                        "type": "string",
                                        "maxLength": 1000
                                      },
                                      "limit": {
                                        "description": "Sub guarantee limit.",
                                        "type": "string",
                                        "maxLength": 1000
                                      },
                                      "excess": {
                                        "description": "Excess information.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    },
                                    "required": [
                                      "code",
                                      "label",
                                      "description"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "code",
                                "label"
                              ]
                            }
                          },
                          "prices": {
                            "description": "Set of amount linked to the product.",
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Set of prices.",
                                "properties": {
                                  "country_taxes": {
                                    "description": "List of taxes applied on customer country.",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "description": "Tax's name.",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "VAT"
                                        },
                                        "tax_amount": {
                                          "description": "Amount of tax, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 5.02
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "tax_amount"
                                      ]
                                    }
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.02
                                  },
                                  "total_discount": {
                                    "description": "Total amount of discount, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 10
                                  },
                                  "premium_after_discount_excl_tax": {
                                    "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 240
                                  },
                                  "price_before_discount_incl_tax": {
                                    "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 340.45
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 330.45
                                  },
                                  "guarantees_class_prices": {
                                    "description": "List of prices splited by guarantee class.",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "description": "Prices of guarantee class.",
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "description": "Code of guarantee class.",
                                          "type": "string",
                                          "maxLength": 50,
                                          "example": "Medical"
                                        },
                                        "label": {
                                          "description": "Label of guarantee class.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "Medical Guarantees."
                                        },
                                        "total_taxes": {
                                          "description": "Total amount of taxes of the guarantee class, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 10.02
                                        },
                                        "premium_after_discount_excl_tax": {
                                          "description": "Premium discounted of the guarantee class, excluding taxes, numeric with 2 decimals.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "payment_periodicities": {
                                    "description": "List of payment periodicities.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "periodicity": {
                                          "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                          "type": "string",
                                          "maxLength": 25,
                                          "example": "R12/P1M"
                                        },
                                        "description": {
                                          "description": "Periodicity label.",
                                          "type": "string",
                                          "example": "MONTHLY",
                                          "maxLength": 50
                                        },
                                        "amount_per_period": {
                                          "description": "The amount of the payment period.",
                                          "type": "number",
                                          "example": 71.87
                                        },
                                        "amount_first_payment": {
                                          "description": "The amount of the first payment.",
                                          "type": "number",
                                          "example": 71.87
                                        }
                                      },
                                      "required": [
                                        "periodicity",
                                        "description",
                                        "amount_per_period",
                                        "amount_first_payment"
                                      ]
                                    },
                                    "maxItems": 100
                                  }
                                },
                                "required": [
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            ]
                          },
                          "attachments": {
                            "description": "List of documents linked to the product.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Attachment information.",
                              "properties": {
                                "name": {
                                  "description": "Attached document name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "content_url": {
                                  "description": "URL to download the document.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "type": {
                                  "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "name",
                                "content_url"
                              ]
                            }
                          },
                          "consents": {
                            "description": "List of needed customer consents.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "description": "Consent to be requested to the customer.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Disclaimer to be displayed to the customer.",
                                  "properties": {
                                    "code": {
                                      "description": "Disclaimer code.",
                                      "type": "string",
                                      "maxLength": 50
                                    },
                                    "text": {
                                      "description": "Disclaimer text.",
                                      "type": "string",
                                      "maxLength": 1000
                                    },
                                    "type": {
                                      "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                      "type": "string",
                                      "enum": [
                                        "PERSONAL_DATA",
                                        "SUBSCRIPTION",
                                        "PAYMENT",
                                        "SEND_QUOTE",
                                        "ALL"
                                      ],
                                      "example": "PERSONAL_DATA"
                                    }
                                  },
                                  "required": [
                                    "text",
                                    "type"
                                  ]
                                },
                                {
                                  "properties": {
                                    "is_mandatory": {
                                      "description": "Indicates if the consent is mandatory.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "is_mandatory"
                              ]
                            }
                          },
                          "disclaimers": {
                            "description": "List of disclaimers to display to the customer.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "description": "Disclaimer to be displayed to the customer.",
                              "properties": {
                                "code": {
                                  "description": "Disclaimer code.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "text": {
                                  "description": "Disclaimer text.",
                                  "type": "string",
                                  "maxLength": 1000
                                },
                                "type": {
                                  "description": "Type, indicates on which context (or step of customer journey) the message can be displayed.",
                                  "type": "string",
                                  "enum": [
                                    "PERSONAL_DATA",
                                    "SUBSCRIPTION",
                                    "PAYMENT",
                                    "SEND_QUOTE",
                                    "ALL"
                                  ],
                                  "example": "PERSONAL_DATA"
                                }
                              },
                              "required": [
                                "text",
                                "type"
                              ]
                            }
                          },
                          "travelers_breakdown": {
                            "description": "List of travelers breakdown.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Traveler type.",
                                  "type": "string",
                                  "enum": [
                                    "ADULTS",
                                    "CHILDREN",
                                    "INFANTS",
                                    "SENIORS"
                                  ],
                                  "example": "ADULTS"
                                },
                                "quote_code": {
                                  "description": "Quote code per traveler type.",
                                  "type": "string",
                                  "maxLength": 2000,
                                  "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                                },
                                "total_travelers": {
                                  "description": "Total number of travellers by type.",
                                  "type": "number",
                                  "example": 2
                                },
                                "prices": {
                                  "description": "Price per traveler type.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Set of prices.",
                                      "properties": {
                                        "country_taxes": {
                                          "description": "List of taxes applied on customer country.",
                                          "type": "array",
                                          "maxItems": 100,
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "description": "Tax's name.",
                                                "type": "string",
                                                "maxLength": 50,
                                                "example": "VAT"
                                              },
                                              "tax_amount": {
                                                "description": "Amount of tax, numeric with 2 decimals.",
                                                "type": "number",
                                                "example": 5.02
                                              }
                                            },
                                            "required": [
                                              "name",
                                              "tax_amount"
                                            ]
                                          }
                                        },
                                        "total_taxes": {
                                          "description": "Total amount of taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 50.02
                                        },
                                        "total_discount": {
                                          "description": "Total amount of discount, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 10
                                        },
                                        "premium_after_discount_excl_tax": {
                                          "description": "Premium discounted excluding taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 240
                                        },
                                        "price_before_discount_incl_tax": {
                                          "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 340.45
                                        },
                                        "price_after_discount_incl_tax": {
                                          "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                          "type": "number",
                                          "example": 330.45
                                        },
                                        "guarantees_class_prices": {
                                          "description": "List of prices splited by guarantee class.",
                                          "type": "array",
                                          "maxItems": 100,
                                          "items": {
                                            "description": "Prices of guarantee class.",
                                            "type": "object",
                                            "properties": {
                                              "code": {
                                                "description": "Code of guarantee class.",
                                                "type": "string",
                                                "maxLength": 50,
                                                "example": "Medical"
                                              },
                                              "label": {
                                                "description": "Label of guarantee class.",
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "Medical Guarantees."
                                              },
                                              "total_taxes": {
                                                "description": "Total amount of taxes of the guarantee class, numeric with 2 decimals.",
                                                "type": "number",
                                                "example": 10.02
                                              },
                                              "premium_after_discount_excl_tax": {
                                                "description": "Premium discounted of the guarantee class, excluding taxes, numeric with 2 decimals.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "payment_periodicities": {
                                          "description": "List of payment periodicities.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "periodicity": {
                                                "description": "Selected periodicity for the payment.\nISO 8601 format (R[n]/P18Y9M4DT11H9M8S).\n",
                                                "type": "string",
                                                "maxLength": 25,
                                                "example": "R12/P1M"
                                              },
                                              "description": {
                                                "description": "Periodicity label.",
                                                "type": "string",
                                                "example": "MONTHLY",
                                                "maxLength": 50
                                              },
                                              "amount_per_period": {
                                                "description": "The amount of the payment period.",
                                                "type": "number",
                                                "example": 71.87
                                              },
                                              "amount_first_payment": {
                                                "description": "The amount of the first payment.",
                                                "type": "number",
                                                "example": 71.87
                                              }
                                            },
                                            "required": [
                                              "periodicity",
                                              "description",
                                              "amount_per_period",
                                              "amount_first_payment"
                                            ]
                                          },
                                          "maxItems": 100
                                        }
                                      },
                                      "required": [
                                        "price_after_discount_incl_tax"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "addon_code": {
                            "description": "Code.",
                            "type": "string",
                            "maxLength": 255
                          }
                        },
                        "required": [
                          "quote_code",
                          "addon_code",
                          "guarantees",
                          "prices"
                        ]
                      }
                    },
                    "payment_modes": {
                      "description": "List of authorized means of payment.",
                      "type": "array",
                      "maxItems": 20,
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Payment mode accepted by the provider.",
                            "type": "string",
                            "enum": [
                              "CREDIT_CARD",
                              "DEBIT_CARD"
                            ]
                          },
                          "provider": {
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Payment service provider.",
                                "properties": {
                                  "id": {
                                    "description": "Provider unique identifier.",
                                    "type": "string",
                                    "example": "32f3eb2a-1a8c-42c5-ba50-7302f40786e9",
                                    "maxLength": 50
                                  },
                                  "label": {
                                    "type": "string",
                                    "description": "Label.",
                                    "example": "WorldPay",
                                    "maxLength": 255
                                  }
                                },
                                "required": [
                                  "id",
                                  "label"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "types",
                          "provider"
                        ]
                      }
                    },
                    "is_pre_contract_required": {
                      "description": "Indicates if a pre-contractual communication is required before subscription validation.",
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "context",
                    "products"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.individual.travel.quotesrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.individual.travel.quotesrequests.write"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/travel/products": {
      "get": {
        "summary": "Retrieve travel product summaries.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "country",
            "description": "Country in which the product is available.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ISO-3166-1 alpha-2 format (2 letter codes).",
              "minLength": 2,
              "maxLength": 2
            }
          },
          {
            "name": "partner_reference",
            "description": "Reference of the partner with whom the product is available.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "client_type",
            "description": "To whom the product is intended.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "INDIVIDUAL",
                "ENTERPRISE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of travel product summaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "product_id": {
                        "description": "Identifier of the product.",
                        "type": "string",
                        "example": "a5ef5bbd-b512-4b6c-8585-79a579d909f7",
                        "maxLength": 150
                      },
                      "name": {
                        "description": "Name of the product.",
                        "type": "string",
                        "example": "PREMIUM",
                        "maxLength": 100
                      },
                      "description": {
                        "description": "Description of the product.",
                        "type": "string",
                        "maxLength": 255
                      },
                      "type": {
                        "description": "Type of the product.",
                        "type": "string",
                        "enum": [
                          "CREDIT_CARD",
                          "DEBIT_CARD",
                          "PREPAID_DEBIT_CARD"
                        ]
                      },
                      "client_type": {
                        "description": "To whom the product is intended.",
                        "type": "string",
                        "enum": [
                          "INDIVIDUAL",
                          "ENTERPRISE"
                        ],
                        "example": "INDIVIDUAL"
                      },
                      "images": {
                        "description": "List of images related to the product.",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "description": "Image information.",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "description": "Image name.",
                              "type": "string",
                              "maxLength": 80,
                              "example": "Mountain Landscape"
                            },
                            "content_url": {
                              "description": "URL to download the image.",
                              "type": "string",
                              "format": "uri",
                              "maxLength": 2000
                            },
                            "type": {
                              "description": "Type of the image:\n  - ICON: Pictogram that represents the product when the page needs to be functional.\n  - PICTURE: Picture that represents the product when the page needs to be inspirational.\n",
                              "type": "string",
                              "enum": [
                                "ICON",
                                "PICTURE"
                              ],
                              "example": "PICTURE"
                            }
                          },
                          "required": [
                            "name",
                            "type",
                            "content_url"
                          ]
                        }
                      },
                      "is_default": {
                        "description": "Indicates if the product is supposed to be preselected by default.",
                        "type": "boolean",
                        "example": false
                      }
                    },
                    "required": [
                      "product_id",
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.sales.travel.products.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.travel.products.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/sales/vexp/travel/products/{product_id}/benefits": {
      "get": {
        "summary": "Gets product's active benefits for travel insurance.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification.\n\nN.B. If `accept-language` is not requested, \"en\" will be used by default.\n",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "product_id",
            "description": "Product unique identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "as_of_date",
            "description": "Retrieve the active benefit list on the product at the specified date.\n\nN.B. By default, the current date is considered.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets product's benefit list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "benefit_id": {
                        "description": "Identifier of the benefit.",
                        "type": "string",
                        "example": "6fd155eb-c93e-4390-8671-8831f2b6ab57",
                        "maxLength": 150
                      },
                      "name": {
                        "description": "Name of the benefit.",
                        "type": "string",
                        "example": "Trip cancellation.",
                        "maxLength": 100
                      },
                      "description": {
                        "description": "Description of the benefit.",
                        "type": "string",
                        "maxLength": 255
                      },
                      "categories": {
                        "description": "List of the categories in which the benefit applies.",
                        "type": "array",
                        "maxItems": 50,
                        "items": {
                          "maxLength": 100,
                          "type": "string"
                        },
                        "example": [
                          "MEDICAL",
                          "CONCIERGE"
                        ]
                      },
                      "is_optional": {
                        "description": "Indicates if the benefit is an option (not directly in the product and can be added at will)\n- true: the benefit is an option;\n- false: the benefit is directly included in the product.\n",
                        "type": "boolean",
                        "example": false
                      },
                      "images": {
                        "description": "List of images related to the benefit.",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "description": "Image information.",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "description": "Image name.",
                              "type": "string",
                              "maxLength": 80,
                              "example": "Mountain Landscape"
                            },
                            "content_url": {
                              "description": "URL to download the image.",
                              "type": "string",
                              "format": "uri",
                              "maxLength": 2000
                            },
                            "type": {
                              "description": "Type of the image:\n- ICON: Pictogram that represents the benefit when the page needs to be functional.\n- PICTURE: Picture that represents the benefit when the page needs to be inspirational.\n",
                              "type": "string",
                              "enum": [
                                "ICON",
                                "PICTURE"
                              ],
                              "example": "PICTURE"
                            }
                          },
                          "required": [
                            "name",
                            "type",
                            "content_url"
                          ]
                        }
                      },
                      "url": {
                        "description": "Link to get additional information on the benefits.",
                        "type": "string",
                        "format": "uri",
                        "maxLength": 2000,
                        "example": "https://apis.axa-assistance.com/sales/vexp/travel/products/6fd155eb-c93e-4390-8671-8831f2b6ab57"
                      }
                    },
                    "required": [
                      "benefit_id",
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (No product found).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.sales.travel.products.benefits.read_only"
            ]
          }
        ],
        "tags": [
          "sales"
        ]
      }
    },
    "/service/domestic/vexp/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimated_time_arrival": {
                    "description": "Estimated Time of Arrival\nUTC date-time, ISO 8601 format (ex: YYYY-MM-DDTHH:mm:ssZ).\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-01-25T15:30:00Z"
                  },
                  "start_location": {
                    "description": "Indicates the starting location of the provider when the mission order is accepted.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "longitude": {
                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 2.3488
                          },
                          "latitude": {
                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 48.85341
                          }
                        },
                        "required": [
                          "longitude",
                          "latitude"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason of the refusal\nThe possible values are:\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt with SLA time (Service Level Agreement)\n- DONT_HAVE_RIGHT_EQUIPMENT: Provider does not have the right equipment\n- DONT_HAVE_RIGHT_LICENCE: Provider does not have licence to perform this job\n- DONT_HAVE_RIGHT_STAFF: Provider does not have right staff to perform the mission\n- PROVIDER_NOT_AVAILABLE: Provider currently not available\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- LOCATION_OUT_OF_ZONE: Location out of zone\n- OTHER: Any other reason. Use description to give the other reason\n",
                    "type": "string",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "DONT_HAVE_RIGHT_EQUIPMENT",
                      "DONT_HAVE_RIGHT_LICENCE",
                      "DONT_HAVE_RIGHT_STAFF",
                      "PROVIDER_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "LOCATION_OUT_OF_ZONE",
                      "OTHER"
                    ],
                    "example": "PROVIDER_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the refusal is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "DOUBLON_MISSION"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/appointments/{appointment_id}/accept": {
      "post": {
        "summary": "Accepts an appointment.",
        "description": "Cf. summary",
        "parameters": [
          {
            "in": "path",
            "name": "mission_id",
            "description": "The mission identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "path",
            "name": "appointment_id",
            "description": "The appointment identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "additional_information"
                ],
                "properties": {
                  "additional_information": {
                    "description": "Any complementary information about the appointment acceptance by the customer.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "My husband will attend this appointment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Appointment acceptance is registered (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.appointments.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/appointments/{appointment_id}/refuse": {
      "post": {
        "summary": "Refuses an appointment.",
        "description": "Cf. summary",
        "parameters": [
          {
            "in": "path",
            "name": "mission_id",
            "description": "The mission identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "path",
            "name": "appointment_id",
            "description": "The appointment identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "additional_information"
                ],
                "properties": {
                  "additional_information": {
                    "description": "Any complementary information about the appointment refusal by the customer.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "I've to go to a trial at this date."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Appointment refusal is registered (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.appointments.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/appointments/{appointment_id}/reschedule": {
      "post": {
        "summary": "Reschedules an appointment.",
        "description": "Cf. summary",
        "parameters": [
          {
            "in": "path",
            "name": "mission_id",
            "description": "The mission identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "path",
            "name": "appointment_id",
            "description": "The appointment identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "appointment_proposals"
                ],
                "properties": {
                  "appointment_proposals": {
                    "description": "Proposed dates for the rescheduling of the appointment.",
                    "type": "array",
                    "items": {
                      "required": [
                        "end_at",
                        "start_at"
                      ],
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "start_at": {
                          "description": "Starting datetime of the proposed appointment. UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-01-24T15:30:00Z"
                        },
                        "end_at": {
                          "description": "Ending datetime of the proposed appointment. UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-01-24T17:30:00Z"
                        }
                      }
                    },
                    "minItems": 1,
                    "maxItems": 5
                  },
                  "additional_information": {
                    "description": "Any complementary information about the appointment by the customer.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "My husband will attend this appointment"
                  }
                },
                "example": {
                  "appointment_proposals": [
                    {
                      "start_at": "2020-03-19T09:00:00Z",
                      "end_at": "2020-03-19T12:00:00Z"
                    }
                  ],
                  "additional_information": "My husband will attend this appointment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Appointment rescheduling request is registered (no content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.appointments.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/cancel": {
      "post": {
        "summary": "Allows the provider to cancel a mission.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Description of the reason of the cancellation.\nThe possible values are the following:\n- CANT_ATTEMPT_WITHIN_SLA_TIME: The provider cannot perform the mission within the SLA time\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- OTHER: Any other reason. _description_ must be filled to explain the reason\n",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "OTHER"
                    ],
                    "type": "string",
                    "example": "EQUIPMENT_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the cancellation is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "INTERVENTION_NON_EFFECTUEE"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the cancellation.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cancel request sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/change_requests": {
      "post": {
        "summary": "Allows the provider to send a change request.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "description": "New service or equipment required to perform the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are:\n- CARPENTRY_ASSESS: Send a carpenter to evaluate the situation and produce a report giving additional information on the incident\n- CARPENTRY_INSTALL: Send a carpenter to install a complete new item (I did not have the item before)\n- CARPENTRY_MAINTENANCE: Send a carpenter to regular control (annual/periodic check)\n- CARPENTRY_REPAIR: Send a carpenter to repair a broken item (this might include parts installation or replacement)\n- CARPENTRY_REPLACE: Send a carpenter to replace a full / complete existing item with a new one\n- CARPENTRY_TEMPORARY_SOLUTION: Send a carpenter to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ELECTRICS_ASSESS: Send an electrician to evaluate the situation and produce a report giving additional information on the incident\n- ELECTRICS_INSTALL: Send an electrician to install a complete new item (I did not have the item before)\n- ELECTRICS_MAINTENANCE: Send an electrician to regular control (annual/periodic check)\n- ELECTRICS_REPAIR: Send an electrician to repair a broken item (this might include parts installation or replacement)\n- ELECTRICS_REPLACE: Send an electrician to replace a full / complete existing item with a new one\n- ELECTRICS_TEMPORARY_SOLUTION: Send an electrician to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- EXTERNAL_DRAINAGE_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident on an external drainage situation\n- EXTERNAL_DRAINAGE_INSTALL: Send a plumber to install a complete new item (I did not have the item before) on an external  drainage situation\n- EXTERNAL_DRAINAGE_MAINTENANCE: Send a plumber to regular control (annual/periodic check) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPLACE: Send a plumber to replace a full / complete existing item with a new one on an external drainage situation\n- EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident on an external drainage situation\n- GLAZING_ASSESS: Send a glazier to evaluate the situation and produce a report giving additional information on the incident\n- GLAZING_INSTALL: Send a glazier to install a complete new item (I did not have the item before)\n- GLAZING_MAINTENANCE: Send a glazier to regular control (annual/periodic check)\n- GLAZING_REPAIR: Send a glazier to repair a broken item (this might include parts installation or replacement)\n- GLAZING_REPLACE: Send a glazier to replace a full / complete existing item with a new one\n- GLAZING_TEMPORARY_SOLUTION: Send a glazier to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- HEATING_ASSESS: Send a heating engineer to evaluate the situation and produce a report giving additional information on the  incident\n- HEATING_DETECT: Send a heating engineer to detect the source of the problem\n- HEATING_INSTALL: Send a heating engineer to install a complete new item (I did not have the item before)\n- HEATING_MAINTENANCE: Send a heating engineer to regular control (annual/periodic check)\n- HEATING_REPAIR: Send a heating engineer to repair a broken item (this might include parts installation or replacement)\n- HEATING_REPLACE: Send a heating engineer to replace a full / complete existing item with a new one\n- HEATING_TEMPORARY_SOLUTION: Send a heating engineer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- LOCKS_ASSESS: Send a locksmith to evaluate the situation and produce a report giving additional information on the incident\n- LOCKS_INSTALL: Send a locksmith to install a complete new item (I did not have the item before)\n- LOCKS_MAINTENANCE: Send a locksmith to regular control (annual/periodic check)\n- LOCKS_REPAIR: Send a locksmith to repair a broken item (this might include parts installation or replacement)\n- LOCKS_REPLACE: Send a locksmith to replace a full / complete existing item with a new one\n- LOCKS_TEMPORARY_SOLUTION: Send a locksmith to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- PESTS_CONTROL: Pests specific. Kills rodents or insects using chemicals, heat or rodenticide sprayed of dispatched around the house. May require several visits\n- PLUMBING_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident\n- PLUMBING_DETECT: Send a plumber to detect the source of the problem\n- PLUMBING_INSTALL: Send a plumber to install a complete new item (I did not have the item before)\n- PLUMBING_MAINTENANCE: Send a plumber to regular control (annual/periodic check)\n- PLUMBING_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement)\n- PLUMBING_REPLACE: Send a plumber to replace a full / complete existing item with a new one\n- PLUMBING_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ROOFING_ASSESS: Send a roofer to evaluate the situation and produce a report giving additional information on the incident\n- ROOFING_INSTALL: Send a roofer to install a complete new item (I did not have the item before)\n- ROOFING_MAINTENANCE: Send a roofer to regular control (annual/periodic check)\n- ROOFING_REPAIR: Send a roofer to repair a broken item (this might include parts installation or replacement)\n- ROOFING_REPLACE: Send a roofer to replace a full / complete existing item with a new one\n- ROOFING_TEMPORARY_SOLUTION: Send a roofer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- SECURITY_AGENT_GUARD: Send a security company to secure the home of the customer\n- SECURITY_ASSESS: Send a security company to evaluate the situation and produce a report giving additional information on the incident\n- SECURITY_REPAIR: Send a security company to repair a broken item (this might include parts installation or replacement)\n- SECURITY_REPLACE: Send a security company to replace a full / complete existing item with a new one\n- SECURITY_TEMPORARY_SOLUTION: Send a security company to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- TECHNICAL_SERVICES_ASSESS: Send a technician to evaluate the situation and produce a report giving additional information on the incident on appliances\n- TECHNICAL_SERVICES_INSTALL: Send a technician to install a complete new item (I did not have the item before) on appliances\n- TECHNICAL_SERVICES_MAINTENANCE: Send a technician to regular control (annual/periodic check) on appliances\n- TECHNICAL_SERVICES_REPAIR: Send a technician to repair a broken item (this might include parts installation or replacement) on appliances\n- TECHNICAL_SERVICES_REPLACE: Send a technician to replace a full / complete existing item with a new one on appliances\n- TECHNICAL_SERVICES_TEMPORARY_SOLUTION: Send a technician to temporary fix - performed to reduce the level of urgency /severity of a specific incident on appliances          type: string\n",
                            "enum": [
                              "CARPENTRY_ASSESS",
                              "CARPENTRY_INSTALL",
                              "CARPENTRY_MAINTENANCE",
                              "CARPENTRY_REPAIR",
                              "CARPENTRY_REPLACE",
                              "CARPENTRY_TEMPORARY_SOLUTION",
                              "ELECTRICS_ASSESS",
                              "ELECTRICS_INSTALL",
                              "ELECTRICS_MAINTENANCE",
                              "ELECTRICS_REPAIR",
                              "ELECTRICS_REPLACE",
                              "ELECTRICS_TEMPORARY_SOLUTION",
                              "EXTERNAL_DRAINAGE_ASSESS",
                              "EXTERNAL_DRAINAGE_INSTALL",
                              "EXTERNAL_DRAINAGE_MAINTENANCE",
                              "EXTERNAL_DRAINAGE_REPAIR",
                              "EXTERNAL_DRAINAGE_REPLACE",
                              "EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION",
                              "GLAZING_ASSESS",
                              "GLAZING_INSTALL",
                              "GLAZING_MAINTENANCE",
                              "GLAZING_REPAIR",
                              "GLAZING_REPLACE",
                              "GLAZING_TEMPORARY_SOLUTION",
                              "HEATING_ASSESS",
                              "HEATING_DETECT",
                              "HEATING_INSTALL",
                              "HEATING_MAINTENANCE",
                              "HEATING_REPAIR",
                              "HEATING_REPLACE",
                              "HEATING_TEMPORARY_SOLUTION",
                              "LOCKS_ASSESS",
                              "LOCKS_INSTALL",
                              "LOCKS_MAINTENANCE",
                              "LOCKS_REPAIR",
                              "LOCKS_REPLACE",
                              "LOCKS_TEMPORARY_SOLUTION",
                              "PESTS_CONTROL",
                              "PLUMBING_ASSESS",
                              "PLUMBING_DETECT",
                              "PLUMBING_INSTALL",
                              "PLUMBING_MAINTENANCE",
                              "PLUMBING_REPAIR",
                              "PLUMBING_REPLACE",
                              "PLUMBING_TEMPORARY_SOLUTION",
                              "ROOFING_ASSESS",
                              "ROOFING_INSTALL",
                              "ROOFING_MAINTENANCE",
                              "ROOFING_REPAIR",
                              "ROOFING_REPLACE",
                              "ROOFING_TEMPORARY_SOLUTION",
                              "SECURITY_AGENT_GUARD",
                              "SECURITY_ASSESS",
                              "SECURITY_REPAIR",
                              "SECURITY_REPLACE",
                              "SECURITY_TEMPORARY_SOLUTION",
                              "TECHNICAL_SERVICES_ASSESS",
                              "TECHNICAL_SERVICES_INSTALL",
                              "TECHNICAL_SERVICES_MAINTENANCE",
                              "TECHNICAL_SERVICES_REPAIR",
                              "TECHNICAL_SERVICES_REPLACE",
                              "TECHNICAL_SERVICES_TEMPORARY_SOLUTION"
                            ],
                            "example": "ELECTRICS_REPAIR"
                          },
                          "equipments": {
                            "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- COMBUSTION_ANALYZER: Combustion analyzer\n- DRAIN_CCTV: Drain CCTV\n- DRAIN_CLEARING_MOLE: Drain clearing Mole\n- DRONE_CONTROL: Drone control\n- GAS_LEAK_DETECTION: Gas leak detection\n- HIGH_PRESSURE_JETTING_CLEANING: High pressure Jetting cleaning\n- HYDROCUREUR_PORTATIF: High pressure Jetting cleaning\n- LEAK_DETECTION: Leak Detection\n- LIFT: Lift\n- LISTENING_ON_THE_GROUND: Listening on the ground\n- MANUAL_FERRET: Manual ferret\n- MINI_DIGGER: Mini digger\n- SCAFFOLDING: Scaffolding\n- SEWER_CLEANER_VEHICLE: Sewer cleaner vehicle\n- THERMAL_CAMERA: Thermal Camera\n- ULTRASONIC_LOCATOR: Ultrasonic locator\n- UNCLOGGING_PUMP: Unclogging pump\n",
                            "type": "array",
                            "maxItems": 17,
                            "items": {
                              "type": "string",
                              "enum": [
                                "COMBUSTION_ANALYZER",
                                "DRAIN_CCTV",
                                "DRAIN_CLEARING_MOLE",
                                "DRONE_CONTROL",
                                "GAS_LEAK_DETECTION",
                                "HIGH_PRESSURE_JETTING_CLEANING",
                                "HYDROCUREUR_PORTATIF",
                                "LEAK_DETECTION",
                                "LIFT",
                                "LISTENING_ON_THE_GROUND",
                                "MINI_DIGGER",
                                "MANUAL_FERRET",
                                "SCAFFOLDING",
                                "SEWER_CLEANER_VEHICLE",
                                "THERMAL_CAMERA",
                                "ULTRASONIC_LOCATOR",
                                "UNCLOGGING_PUMP"
                              ]
                            },
                            "example": [
                              "HYDROCUREUR_PORTATIF",
                              "UNCLOGGING_PUMP"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "appointment_rescheduled_at": {
                    "description": "New appointment Date-time. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-03-01T08:30:00Z"
                  },
                  "total_cost_incl_tax": {
                    "description": "Request of a new total cost including tax. It is does not imply to fulfill the \"total_cost_excl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_cost_excl_tax": {
                    "description": "Request of a new total cost excluding tax. It is does not imply to fulfill the \"total_cost_incl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "spare_parts": {
                    "description": "Spare parts required to make reparations.",
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Type of spare part.",
                          "type": "string",
                          "maxLength": 50,
                          "example": "Roof tiles"
                        },
                        "quantity": {
                          "description": "Number of items",
                          "type": "integer",
                          "example": 4200,
                          "maximum": 100000,
                          "minimum": 1
                        },
                        "unit_price_excl_tax": {
                          "description": "Unit price of the item, tax excluded",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        },
                        "unit_price_incl_tax": {
                          "description": "Unit price of the item, tax included",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "total_labour_hours": {
                    "description": "Total number of labour hours required to fix the problem. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                    "type": "string",
                    "maxLength": 25,
                    "pattern": "^P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$",
                    "example": "PT2H30M"
                  },
                  "additional_information": {
                    "description": "Any complementary information to the change request.",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "Spare parts are not available for the moment"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the change request.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "change_request_id": {
                      "description": "Identifier of the submitted change request",
                      "type": "string",
                      "maxLength": 50,
                      "example": "00089786345"
                    }
                  },
                  "required": [
                    "change_request_id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.change_requests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/communications": {
      "post": {
        "summary": "Allows the provider to communicate about the mission he is performing.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "communication_code": {
                    "description": "Code of the communication that the provider transmits during its mission.\nThe existing values are the following:\n| CODE                        | MANDATORY FIELD              | DESCRIPTION                                                                                          |\n| -------------------------   | ---------------------------- | ---------------------------------------------------------------------------------------------------- |\n| ADDITIONAL_INFORMATION      | description                  | Indicates any other additionnal information.                                                         |\n| ACTUAL_TIME_ARRIVAL         | actual_time_arrival          | Indicates the Actual Time Arrival (ATA) on the incident location.                                    |\n| APPOINTMENT_REMINDER        | -*none*-                     | Indicates the provider want to remind the customer that the mission is planned for the specific date |\n| CONTRACTOR_LEAVES           | -*none*-                     | Indicates that the provider leaves the incident location                                             |\n| CURRENT_LOCATION            | current_location             | Indicates the current location of the provider.                                                      |\n| DELAY_OF_ARRIVAL_TIME       | delay_of_arrival_time        | Indicates the estimated delay to arrive on the incident location.                                    |\n| DIAGNOSTIC_CONFIRMED        | -*none*-                     | Indicates that the diagnostic is confirmed.                                                          |\n| DISCLAIMER_SHEET_SIGNED     | -*none*-                     | Indicates that the customer has signed the disclaimer sheet.                                         |\n| EN_ROUTE                    | -*none*-                     | Indicates that the provider is starting its way to the incident                                      |\n| ESTIMATED_COMPLETION_TIME   | estimated_time_of_completion | Indicates the estimated time of work completion.                                                     |\n| ESTIMATED_TIME_ARRIVAL      | estimated_time_arrival       | Indicates the Estimated Time of Arrival (ETA) on the incident location.                              |\n| JOURNEY_FINISHED_ABNORMALLY | -*none*-                     | Indicates the provider encountered an unexpected error conditions.                                   |\n| ON_SCENE                    | -*none*-                     | Indicates that the provider is arrived on the incident location.                                     |\n| WORK_COMPLETED              | work_completed_at            | Indicates the time at which the intervention is completed.                                           |\n| WORK_STARTED                | work_started_at              | Indicates the time at which the intervention began.                                                  |\n",
                    "type": "string",
                    "enum": [
                      "ACTUAL_TIME_ARRIVAL",
                      "ADDITIONAL_INFORMATION",
                      "APPOINTMENT_REMINDER",
                      "CONTRACTOR_LEAVES",
                      "CURRENT_LOCATION",
                      "DELAY_OF_ARRIVAL_TIME",
                      "DIAGNOSTIC_CONFIRMED",
                      "DISCLAIMER_SHEET_SIGNED",
                      "EN_ROUTE",
                      "ESTIMATED_COMPLETION_TIME",
                      "ESTIMATED_TIME_ARRIVAL",
                      "JOURNEY_FINISHED_ABNORMALLY",
                      "ON_SCENE",
                      "WORK_COMPLETED",
                      "WORK_STARTED"
                    ],
                    "example": "ESTIMATED_TIME_ARRIVAL"
                  },
                  "description": {
                    "description": "Any complementary information about the mission\n** Required if communication_code is empty or equal to _ADDITIONAL_INFORMATION_ **\n",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "there are traffic jams on the highway"
                  },
                  "is_appointment_notes_allowed": {
                    "description": "Indicates if the provider is able to receive and manage additional information (notes) from the consumer\n - true: the consumer is allowed to send additional information;\n - false: otherwise.\n",
                    "type": "boolean",
                    "default": false
                  },
                  "is_appointment_rescheduling_allowed": {
                    "description": "Indicates if the provider allow the consumer to reschedule the appointment date\n - true: the consumer is allowed reschedule its appointment;\n - false: otherwise.\n",
                    "type": "boolean",
                    "default": false
                  },
                  "arrival_information": {
                    "description": "Information about the provider arrival on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "current_location": {
                            "description": "Current location of the provider at the Date&Time the communication is transmit.\n** Required if communication_code is equal to _CURRENT_LOCATION_ **\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "estimated_time_arrival": {
                            "description": "Estimated Time of Arrival (ETA) communicated by the provider.\n** Required if communication_code is equal to _ESTIMATED_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:00:00Z"
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n** Required if communication_code is equal to _ACTUAL_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "delay_of_arrival_time": {
                            "description": "Provider estimation of the delay to arrive on site. ISO 8601 format (P18Y9M4DT11H9M8S).\n** Required if communication_code is equal to _DELAY_OF_ARRIVAL_TIME_ **\nFor example \"PT30M\" means a period (P) of time (T) of 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 25,
                            "example": "PT30M"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "work_information": {
                    "description": "Information about the provider mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site\n** Required if communication_code is equal to _WORK_STARTED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "estimated_time_of_completion": {
                            "description": "Estimation of the provider about the mission completion.\n** Required if communication_code is equal to _ESTIMATED_COMPLETION_TIME_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:00:00Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site\n** Required if communication_code is equal to _WORK_COMPLETED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          },
                          "has_extra_actions_required": {
                            "description": "Indicates that the work is finished, but extra actions are required.\ne.g. After the completion of a plumber task, the client might need to have a painter to clean-up the wall.\n",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the communication.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Communication sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.communications.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/missions/{mission_id}/mission_reports": {
      "post": {
        "summary": "Allows the provider to carry out his mission report.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mission_statement": {
                    "description": "Information about the mission process",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_cancelled": {
                            "description": "Indicates that the mission has been cancelled.",
                            "type": "boolean",
                            "example": false
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "work_started_at": {
                            "description": "Date-time the provider started its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "work_completed_at": {
                            "description": "Date-time the provider completed its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          },
                          "disclaimer_sheet_signed": {
                            "description": "Indicates that the disclaimer sheet has been signed.",
                            "type": "boolean",
                            "example": true
                          },
                          "total_labour_hours": {
                            "description": "Total number of labour hours required to fix the problem. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                            "type": "string",
                            "pattern": "^P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$",
                            "maxLength": 25,
                            "example": "PT2H30M"
                          },
                          "spare_parts": {
                            "description": "Spare parts used to make reparations.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Type of spare part.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Roof tiles"
                                },
                                "quantity": {
                                  "description": "Number of items",
                                  "type": "integer",
                                  "example": 4200,
                                  "maximum": 100000,
                                  "minimum": 1
                                },
                                "unit_price_excl_tax": {
                                  "description": "Unit price of the item, tax excluded",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "unit_price_incl_tax": {
                                  "description": "Unit price of the item, tax included",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "new_authorized_amount_incl_tax": {
                            "description": "Authorized amount.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "technician_name": {
                            "description": "Technician name.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "GIRAUD Alexandre"
                          },
                          "additional_information": {
                            "description": "Any complementary information about the mission.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "Very complicated to access to the device."
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "case": {
                    "description": "Case description of the customer's situation.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "description": "Service and equipment asked in the change request:\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "service_code": {
                                    "description": "The code of the service.\nThe possible value are:\n- CARPENTRY_ASSESS: Send a carpenter to evaluate the situation and produce a report giving additional information on the incident\n- CARPENTRY_INSTALL: Send a carpenter to install a complete new item (I did not have the item before)\n- CARPENTRY_MAINTENANCE: Send a carpenter to regular control (annual/periodic check)\n- CARPENTRY_REPAIR: Send a carpenter to repair a broken item (this might include parts installation or replacement)\n- CARPENTRY_REPLACE: Send a carpenter to replace a full / complete existing item with a new one\n- CARPENTRY_TEMPORARY_SOLUTION: Send a carpenter to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ELECTRICS_ASSESS: Send an electrician to evaluate the situation and produce a report giving additional information on the incident\n- ELECTRICS_INSTALL: Send an electrician to install a complete new item (I did not have the item before)\n- ELECTRICS_MAINTENANCE: Send an electrician to regular control (annual/periodic check)\n- ELECTRICS_REPAIR: Send an electrician to repair a broken item (this might include parts installation or replacement)\n- ELECTRICS_REPLACE: Send an electrician to replace a full / complete existing item with a new one\n- ELECTRICS_TEMPORARY_SOLUTION: Send an electrician to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- EXTERNAL_DRAINAGE_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident on an external drainage situation\n- EXTERNAL_DRAINAGE_INSTALL: Send a plumber to install a complete new item (I did not have the item before) on an external  drainage situation\n- EXTERNAL_DRAINAGE_MAINTENANCE: Send a plumber to regular control (annual/periodic check) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPLACE: Send a plumber to replace a full / complete existing item with a new one on an external drainage situation\n- EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident on an external drainage situation\n- GLAZING_ASSESS: Send a glazier to evaluate the situation and produce a report giving additional information on the incident\n- GLAZING_INSTALL: Send a glazier to install a complete new item (I did not have the item before)\n- GLAZING_MAINTENANCE: Send a glazier to regular control (annual/periodic check)\n- GLAZING_REPAIR: Send a glazier to repair a broken item (this might include parts installation or replacement)\n- GLAZING_REPLACE: Send a glazier to replace a full / complete existing item with a new one\n- GLAZING_TEMPORARY_SOLUTION: Send a glazier to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- HEATING_ASSESS: Send a heating engineer to evaluate the situation and produce a report giving additional information on the  incident\n- HEATING_DETECT: Send a heating engineer to detect the source of the problem\n- HEATING_INSTALL: Send a heating engineer to install a complete new item (I did not have the item before)\n- HEATING_MAINTENANCE: Send a heating engineer to regular control (annual/periodic check)\n- HEATING_REPAIR: Send a heating engineer to repair a broken item (this might include parts installation or replacement)\n- HEATING_REPLACE: Send a heating engineer to replace a full / complete existing item with a new one\n- HEATING_TEMPORARY_SOLUTION: Send a heating engineer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- LOCKS_ASSESS: Send a locksmith to evaluate the situation and produce a report giving additional information on the incident\n- LOCKS_INSTALL: Send a locksmith to install a complete new item (I did not have the item before)\n- LOCKS_MAINTENANCE: Send a locksmith to regular control (annual/periodic check)\n- LOCKS_REPAIR: Send a locksmith to repair a broken item (this might include parts installation or replacement)\n- LOCKS_REPLACE: Send a locksmith to replace a full / complete existing item with a new one\n- LOCKS_TEMPORARY_SOLUTION: Send a locksmith to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- PESTS_CONTROL: Pests specific. Kills rodents or insects using chemicals, heat or rodenticide sprayed of dispatched around the house. May require several visits\n- PLUMBING_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident\n- PLUMBING_DETECT: Send a plumber to detect the source of the problem\n- PLUMBING_INSTALL: Send a plumber to install a complete new item (I did not have the item before)\n- PLUMBING_MAINTENANCE: Send a plumber to regular control (annual/periodic check)\n- PLUMBING_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement)\n- PLUMBING_REPLACE: Send a plumber to replace a full / complete existing item with a new one\n- PLUMBING_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ROOFING_ASSESS: Send a roofer to evaluate the situation and produce a report giving additional information on the incident\n- ROOFING_INSTALL: Send a roofer to install a complete new item (I did not have the item before)\n- ROOFING_MAINTENANCE: Send a roofer to regular control (annual/periodic check)\n- ROOFING_REPAIR: Send a roofer to repair a broken item (this might include parts installation or replacement)\n- ROOFING_REPLACE: Send a roofer to replace a full / complete existing item with a new one\n- ROOFING_TEMPORARY_SOLUTION: Send a roofer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- SECURITY_AGENT_GUARD: Send a security company to secure the home of the customer\n- SECURITY_ASSESS: Send a security company to evaluate the situation and produce a report giving additional information on the incident\n- SECURITY_REPAIR: Send a security company to repair a broken item (this might include parts installation or replacement)\n- SECURITY_REPLACE: Send a security company to replace a full / complete existing item with a new one\n- SECURITY_TEMPORARY_SOLUTION: Send a security company to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- TECHNICAL_SERVICES_ASSESS: Send a technician to evaluate the situation and produce a report giving additional information on the incident on appliances\n- TECHNICAL_SERVICES_INSTALL: Send a technician to install a complete new item (I did not have the item before) on appliances\n- TECHNICAL_SERVICES_MAINTENANCE: Send a technician to regular control (annual/periodic check) on appliances\n- TECHNICAL_SERVICES_REPAIR: Send a technician to repair a broken item (this might include parts installation or replacement) on appliances\n- TECHNICAL_SERVICES_REPLACE: Send a technician to replace a full / complete existing item with a new one on appliances\n- TECHNICAL_SERVICES_TEMPORARY_SOLUTION: Send a technician to temporary fix - performed to reduce the level of urgency /severity of a specific incident on appliances          type: string\n",
                                    "enum": [
                                      "CARPENTRY_ASSESS",
                                      "CARPENTRY_INSTALL",
                                      "CARPENTRY_MAINTENANCE",
                                      "CARPENTRY_REPAIR",
                                      "CARPENTRY_REPLACE",
                                      "CARPENTRY_TEMPORARY_SOLUTION",
                                      "ELECTRICS_ASSESS",
                                      "ELECTRICS_INSTALL",
                                      "ELECTRICS_MAINTENANCE",
                                      "ELECTRICS_REPAIR",
                                      "ELECTRICS_REPLACE",
                                      "ELECTRICS_TEMPORARY_SOLUTION",
                                      "EXTERNAL_DRAINAGE_ASSESS",
                                      "EXTERNAL_DRAINAGE_INSTALL",
                                      "EXTERNAL_DRAINAGE_MAINTENANCE",
                                      "EXTERNAL_DRAINAGE_REPAIR",
                                      "EXTERNAL_DRAINAGE_REPLACE",
                                      "EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION",
                                      "GLAZING_ASSESS",
                                      "GLAZING_INSTALL",
                                      "GLAZING_MAINTENANCE",
                                      "GLAZING_REPAIR",
                                      "GLAZING_REPLACE",
                                      "GLAZING_TEMPORARY_SOLUTION",
                                      "HEATING_ASSESS",
                                      "HEATING_DETECT",
                                      "HEATING_INSTALL",
                                      "HEATING_MAINTENANCE",
                                      "HEATING_REPAIR",
                                      "HEATING_REPLACE",
                                      "HEATING_TEMPORARY_SOLUTION",
                                      "LOCKS_ASSESS",
                                      "LOCKS_INSTALL",
                                      "LOCKS_MAINTENANCE",
                                      "LOCKS_REPAIR",
                                      "LOCKS_REPLACE",
                                      "LOCKS_TEMPORARY_SOLUTION",
                                      "PESTS_CONTROL",
                                      "PLUMBING_ASSESS",
                                      "PLUMBING_DETECT",
                                      "PLUMBING_INSTALL",
                                      "PLUMBING_MAINTENANCE",
                                      "PLUMBING_REPAIR",
                                      "PLUMBING_REPLACE",
                                      "PLUMBING_TEMPORARY_SOLUTION",
                                      "ROOFING_ASSESS",
                                      "ROOFING_INSTALL",
                                      "ROOFING_MAINTENANCE",
                                      "ROOFING_REPAIR",
                                      "ROOFING_REPLACE",
                                      "ROOFING_TEMPORARY_SOLUTION",
                                      "SECURITY_AGENT_GUARD",
                                      "SECURITY_ASSESS",
                                      "SECURITY_REPAIR",
                                      "SECURITY_REPLACE",
                                      "SECURITY_TEMPORARY_SOLUTION",
                                      "TECHNICAL_SERVICES_ASSESS",
                                      "TECHNICAL_SERVICES_INSTALL",
                                      "TECHNICAL_SERVICES_MAINTENANCE",
                                      "TECHNICAL_SERVICES_REPAIR",
                                      "TECHNICAL_SERVICES_REPLACE",
                                      "TECHNICAL_SERVICES_TEMPORARY_SOLUTION"
                                    ],
                                    "example": "ELECTRICS_REPAIR"
                                  },
                                  "equipments": {
                                    "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- COMBUSTION_ANALYZER: Combustion analyzer\n- DRAIN_CCTV: Drain CCTV\n- DRAIN_CLEARING_MOLE: Drain clearing Mole\n- DRONE_CONTROL: Drone control\n- GAS_LEAK_DETECTION: Gas leak detection\n- HIGH_PRESSURE_JETTING_CLEANING: High pressure Jetting cleaning\n- HYDROCUREUR_PORTATIF: High pressure Jetting cleaning\n- LEAK_DETECTION: Leak Detection\n- LIFT: Lift\n- LISTENING_ON_THE_GROUND: Listening on the ground\n- MANUAL_FERRET: Manual ferret\n- MINI_DIGGER: Mini digger\n- SCAFFOLDING: Scaffolding\n- SEWER_CLEANER_VEHICLE: Sewer cleaner vehicle\n- THERMAL_CAMERA: Thermal Camera\n- ULTRASONIC_LOCATOR: Ultrasonic locator\n- UNCLOGGING_PUMP: Unclogging pump\n",
                                    "type": "array",
                                    "maxItems": 17,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "COMBUSTION_ANALYZER",
                                        "DRAIN_CCTV",
                                        "DRAIN_CLEARING_MOLE",
                                        "DRONE_CONTROL",
                                        "GAS_LEAK_DETECTION",
                                        "HIGH_PRESSURE_JETTING_CLEANING",
                                        "HYDROCUREUR_PORTATIF",
                                        "LEAK_DETECTION",
                                        "LIFT",
                                        "LISTENING_ON_THE_GROUND",
                                        "MINI_DIGGER",
                                        "MANUAL_FERRET",
                                        "SCAFFOLDING",
                                        "SEWER_CLEANER_VEHICLE",
                                        "THERMAL_CAMERA",
                                        "ULTRASONIC_LOCATOR",
                                        "UNCLOGGING_PUMP"
                                      ]
                                    },
                                    "example": [
                                      "HYDROCUREUR_PORTATIF",
                                      "UNCLOGGING_PUMP"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident": {
                            "description": "The whole context of the case.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "cause": {
                                    "description": "The code of the cause.\nThe possible value are:\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DEFROSTING_OF_FROZEN_FOOD: Defrosting of frozen food\n - DETACHED_DRAINPIPE: Detached drainpipe\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - ELECTROCUTION_OF_DOMESTIC_ANIMALS: Electrocution of domestic animals\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOT_WATER_LEAK: Hot water leak\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - INTERNAL_GAS_LEAK: Gas leak\n - KEYS_FORGOTTEN: Keys forgotten\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER: Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - TRAVEL_OR_MEDICAL: Travel or medical\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                                    "type": "string",
                                    "enum": [
                                      "AC_BREAKDOWN",
                                      "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                                      "ALARM_ISSUE",
                                      "ANTS_INFESTATION",
                                      "ANTS_SIGHTING",
                                      "BAD_SMELL",
                                      "BED_BUGS_INFESTATION",
                                      "BEES_INFESTATION",
                                      "BEES_SIGHTING",
                                      "BEETLES_INFESTATION",
                                      "BIRDS_INFESTATION",
                                      "BIRDS_SIGHTING",
                                      "BLOCKAGE",
                                      "BOILER_BREAKDOWN",
                                      "BOILER_LEAK",
                                      "BOILER_PRESSURE_PROBLEM",
                                      "BROKEN_AC",
                                      "BROKEN_AEROTHERMAL_HEAT_PUMP",
                                      "BROKEN_CHIMNEY",
                                      "BROKEN_DOOR_FRAME",
                                      "BROKEN_DOOR_GLAZING",
                                      "BROKEN_DOOR_HANDLE",
                                      "BROKEN_DOOR_LOCK",
                                      "BROKEN_DOOR_PANELS",
                                      "BROKEN_EXTERNAL_BUILDING_WINDOW",
                                      "BROKEN_EXTERNAL_DOOR",
                                      "BROKEN_EXTERNAL_WINDOW",
                                      "BROKEN_FASCIA_BOARD",
                                      "BROKEN_FLASHING",
                                      "BROKEN_GEOTHERMAL_HEAT_PUMP",
                                      "BROKEN_GUTTERING",
                                      "BROKEN_HEAT_PUMP",
                                      "BROKEN_INTERNAL_DOOR",
                                      "BROKEN_INTERNAL_WINDOW",
                                      "BROKEN_KEY",
                                      "BROKEN_OR_DAMAGED_SANITARY_WARE",
                                      "BROKEN_ROOF",
                                      "BROKEN_SKYLIGHT",
                                      "BROKEN_STORAGE_HEATER",
                                      "BROKEN_WINDOW_LOCK",
                                      "CARBON_MONOXIDE_ALERT",
                                      "COCKROACHES_INFESTATION",
                                      "COLD_WATER_LEAK",
                                      "DEFROSTING_OF_FROZEN_FOOD",
                                      "DETACHED_DRAINPIPE",
                                      "DOMESTIC_APPLIANCES_PROBLEM",
                                      "DRAINAGE_LEAK",
                                      "ELECTRIC_HEATER_BREAKDOWN",
                                      "ELECTRIC_HEATER_BROKEN",
                                      "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                                      "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                                      "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                                      "ELECTROCUTION_OF_DOMESTIC_ANIMALS",
                                      "EXTERNAL_GAS_LEAK",
                                      "FIRE_PLACE_PROBLEM",
                                      "FIX_AIR_CONDITIONING_BREAKDOWN",
                                      "FLEAS_INFESTATION",
                                      "FLIES_INFESTATION",
                                      "FLUE_PIPE_LEAK",
                                      "FOX_SIGHTING",
                                      "FOXES_INFESTATION",
                                      "FOXES_NOISE",
                                      "FROZEN_BLOCKED_CONDENSATION_PIPE",
                                      "FROZEN_PIPES",
                                      "GAS_LEAK_BEFORE_METER",
                                      "GAS_LEAK_INVISIBLE",
                                      "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                                      "GREY_SQUIRRELS_INFESTATION",
                                      "GREY_SQUIRRELS_NOISE",
                                      "GREY_SQUIRRELS_SIGHTING",
                                      "HEAT_PUMP_BREAKDOWN",
                                      "HEATING_CONTROLS_FAILURE",
                                      "HEATING_NOT_WARM_ENOUGH",
                                      "HEATING_WONT_TURN_OFF",
                                      "HOT_WATER_LEAK",
                                      "HOUSEBREAKING",
                                      "HOUSEBREAKING_ATTEMPT",
                                      "INTERNAL_GAS_LEAK",
                                      "KEYS_FORGOTTEN",
                                      "LEAKING_ROOF",
                                      "LIGHTS",
                                      "LOCKED_DOOR",
                                      "LOCKED_IN",
                                      "LOCKED_OUT",
                                      "LOOSE_DETACHED_RADIATOR",
                                      "LOSS_OF_WATER",
                                      "LOST_KEYS",
                                      "LOST_KEYS_LOCKED_OUT",
                                      "LOST_ROOF_TILE",
                                      "LPG_LEAK",
                                      "MICE_INFESTATION",
                                      "MICE_NOISE",
                                      "MICE_SIGHTING",
                                      "MOSS_ON_ROOF",
                                      "MOTHS_INFESTATION",
                                      "NATURAL_DISASTER",
                                      "NO_HEATING",
                                      "NO_HEATING_OR_HOT_WATER",
                                      "NO_HOT_WATER",
                                      "NOISY_BOILER_HEATING_SYSTEM",
                                      "OIL_LEAK",
                                      "PARTIAL_HEATING_BREAKDOWN",
                                      "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                                      "PARTIAL_HOT_WATER_BREAKDOWN",
                                      "PARTIAL_HOT_WATER_FAILURE",
                                      "PARTIAL_LOSS_OF_POWER",
                                      "PRESSURE_RELEASE_PIPE_DISCHARGING",
                                      "PRESSURE_RELEASE_PIPE_LEAKING",
                                      "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                                      "RADIATOR_LEAK",
                                      "RATS_INFESTATION",
                                      "RATS_NOISE",
                                      "RATS_SIGHTING",
                                      "RED_SQUIRRELS_INFESTATION",
                                      "RED_SQUIRRELS_NOISE",
                                      "RED_SQUIRRELS_SIGHTING",
                                      "RODENTS_INFESTATION",
                                      "RODENTS_NOISE",
                                      "STOLEN_KEYS",
                                      "STOLEN_KEYS_LOCKED_OUT",
                                      "STORAGE_HEATER_BREAKDOWN",
                                      "TELECOM_BREAKDOWN",
                                      "TOILET_WONT_FLUSH",
                                      "TOTAL_LOSS_OF_POWER",
                                      "TRAVEL_OR_MEDICAL",
                                      "UNDERFLOOR_HEATING_PROBLEM",
                                      "VANDALISM",
                                      "WASPS_HORNETS_INFESTATION",
                                      "WASPS_HORNETS_SIGHTING",
                                      "WATER_LEAK",
                                      "WATER_LEAK_BEFORE_METER",
                                      "WATER_LEAK_INVISIBLE",
                                      "WATER_SHORTAGE",
                                      "WATER_TOO_HOT"
                                    ],
                                    "example": "WATER_LEAK"
                                  },
                                  "sub_cause": {
                                    "description": "Incident subcause.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Leak on general watter supply"
                                  },
                                  "incident_label": {
                                    "description": "Label of the incident.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Basement flooding"
                                  },
                                  "description": {
                                    "description": "Complement to the label",
                                    "type": "string",
                                    "maxLength": 1024,
                                    "example": "Water infiltration via seals around sanitary installations"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident_location": {
                            "description": "Starting location of the provider at the begining of the mission.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "The address of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "The GPS coordinates of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address",
                                  "coordinates"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "intervention_object": {
                            "description": "All details concerning the object or the device concerned by the intervention.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the object requiring intervention. For example:\n- boiler, if it is the device requiring intervention\n- building roof, if the provider has to fix something on the roof\n",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Boiler"
                                  },
                                  "device_information": {
                                    "description": "All information concerning the device used",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "brand": {
                                            "description": "Brand of the device.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Bosch"
                                          },
                                          "model": {
                                            "description": "Model of the device.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Bosch TR3500TRO 5 T"
                                          },
                                          "fuel_type": {
                                            "description": "The fuel type of the device.\nThe possible values are:\n- AIR_SOURCE: Air source, used for example by heat pump systems\n- BIOMASS: Biomass\n- ELECTRIC: Electricity\n- GROUND_SOURCE: Ground source, used for example by geothermal systems\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- OIL: Oil\n- SOLAR: Solar source\n- SOLID_FUEL: Solid material like wood, coal, coke..\n- UNKNOWN: Used when the information is not available\n",
                                            "type": "string",
                                            "example": "ELECTRIC",
                                            "enum": [
                                              "AIR_SOURCE",
                                              "BIOMASS",
                                              "ELECTRIC",
                                              "GROUND_SOURCE",
                                              "LIQUID_PETROL_GAS",
                                              "NATURAL_GAS",
                                              "OIL",
                                              "SOLAR",
                                              "SOLID_FUEL",
                                              "UNKNOWN"
                                            ]
                                          },
                                          "age": {
                                            "description": "Age of the device, in years, months, days.\nISO 8601 Duration format.\nP5Y8M4D means a Period (P) of 5 Years (Y), 8 month (M) and 4 Days (D)\n",
                                            "type": "string",
                                            "pattern": "^P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$",
                                            "maxLength": 25,
                                            "example": "P5Y8M4D"
                                          },
                                          "reference_number": {
                                            "description": "Reference of the device.\nFor example, \"serial_number\" for Gas appliance.\n",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "VF1FW57B052967712"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "physical_caracteristic": {
                                    "description": "All physical information and caracteristic concerning the intervention object",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "sizes": {
                                            "description": "All size information of the intervention object (length, height, width)",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the device.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n| Unit of measure | Description\n| --------------- | -----------\n| m               | meter\n| [in_i]          | inches\n| [ft_i]          | feet\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "m",
                                                      "[in_i]",
                                                      "[ft_i]"
                                                    ],
                                                    "example": "m"
                                                  },
                                                  "length": {
                                                    "description": "Object length.",
                                                    "type": "number",
                                                    "example": 2.8
                                                  },
                                                  "width": {
                                                    "description": "Object width.",
                                                    "type": "number",
                                                    "example": 1.8
                                                  },
                                                  "height": {
                                                    "description": "Object height.",
                                                    "type": "number",
                                                    "example": 2
                                                  },
                                                  "diameter": {
                                                    "description": "Object diameter.",
                                                    "type": "number",
                                                    "example": 0.9
                                                  }
                                                },
                                                "required": [
                                                  "unit"
                                                ]
                                              }
                                            ]
                                          },
                                          "power": {
                                            "description": "The intervention object power.",
                                            "allOf": [
                                              {
                                                "description": "The intervention object power",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the device\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- w: Watt.\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "w"
                                                    ],
                                                    "example": "w"
                                                  },
                                                  "value": {
                                                    "description": "The value of the device power",
                                                    "type": "integer",
                                                    "example": 500
                                                  }
                                                },
                                                "required": [
                                                  "unit",
                                                  "value"
                                                ]
                                              }
                                            ]
                                          },
                                          "surface": {
                                            "description": "The intervention object surface.",
                                            "allOf": [
                                              {
                                                "description": "The intervention object surface",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the intervention object surface\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- m2: Meter square,\n- [sin_i]: square inch,\n- [sft_i]: square feet.\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "m2",
                                                      "[sin_i]",
                                                      "[sft_i]"
                                                    ],
                                                    "example": "m2"
                                                  },
                                                  "value": {
                                                    "description": "The value of the intervention object surface",
                                                    "type": "integer",
                                                    "example": 100
                                                  }
                                                },
                                                "required": [
                                                  "unit",
                                                  "value"
                                                ]
                                              }
                                            ]
                                          },
                                          "number_of_storeys": {
                                            "description": "Number of storeys where the intervention object is located.",
                                            "type": "integer",
                                            "example": 4
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            ]
                          },
                          "appointment_at": {
                            "description": "The appointment date & time.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:21:26Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "person_on_site": {
                    "description": "Contact of the person on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "title": {
                            "description": "The title of the contact, its civility.\nThe possible values are:\n- MR\n- MS: Ms\n- MISS: Miss\n- DR: Doctor\n- PR: Professor\n- MRS: Mrs\n- MASTER: Master\n- LADY: Lady\n- SIR: Sir\n- LORD: Lord\n- REVEREND: Reverend\n- SISTER: Sister\n",
                            "type": "string",
                            "enum": [
                              "MR",
                              "MS",
                              "MISS",
                              "DR",
                              "PR",
                              "MRS",
                              "MASTER",
                              "LADY",
                              "SIR",
                              "LORD",
                              "REVEREND",
                              "SISTER"
                            ],
                            "example": "MR"
                          },
                          "first_name": {
                            "description": "The first name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Eric"
                          },
                          "last_name": {
                            "description": "The last name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Dubois"
                          },
                          "phone_number": {
                            "description": "The phone number of the contact (prefix included).",
                            "type": "string",
                            "maxLength": 20,
                            "example": "+33601010101"
                          }
                        },
                        "required": [
                          "last_name"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission report.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission report sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.mission_reports.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/domestic/vexp/products": {
      "get": {
        "summary": "Gets products for domestic services.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "name": "country",
            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            }
          },
          {
            "name": "currency",
            "description": "Customer currency, ISO 4217 format (3 letter code).",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 3
            }
          },
          {
            "name": "universe",
            "description": "The universe, example: Home Emergency.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "coverage_category",
            "description": "Coverage category, example: Electricity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_code",
            "description": "Catalog code, example: SR001.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_version",
            "description": "Catalog version, example: 2.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "context": {
                        "description": "Context of the request.",
                        "type": "object",
                        "properties": {
                          "country": {
                            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "currency": {
                            "description": "Customer currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "example": "EUR",
                            "maxLength": 3
                          }
                        },
                        "required": [
                          "currency"
                        ]
                      },
                      "products": {
                        "description": "Products list",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "properties": {
                            "product_code": {
                              "description": "Product code.",
                              "type": "string",
                              "example": "KV5-33",
                              "maxLength": 50
                            },
                            "name": {
                              "description": "Product name.",
                              "type": "string",
                              "example": "Advanced",
                              "maxLength": 100
                            },
                            "description": {
                              "description": "Product marketing description",
                              "type": "string",
                              "example": "Advanced for more guarantees.",
                              "maxLength": 100
                            },
                            "coverages": {
                              "description": "Set of coverages included in the product.",
                              "type": "array",
                              "maxItems": 50,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "description": "Type of coverage.",
                                    "type": "string",
                                    "example": "SERVICE",
                                    "maxLength": 50
                                  },
                                  "class": {
                                    "description": "Class of coverage.",
                                    "type": "string",
                                    "example": "ACCIDENT_01",
                                    "maxLength": 50
                                  },
                                  "category": {
                                    "description": "Coverage category.",
                                    "type": "string",
                                    "example": "plumbing",
                                    "maxLength": 50
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Electronic Assistance.",
                                    "maxLength": 100
                                  },
                                  "description": {
                                    "description": "Description.",
                                    "type": "string",
                                    "example": "Customer assistance for electronics.",
                                    "maxLength": 500
                                  },
                                  "limits": {
                                    "description": "List of limits of the coverage.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "exclusions": {
                                    "description": "List of exclusions.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "benefits": {
                                    "description": "List of benefits.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "label"
                                ]
                              }
                            },
                            "prices": {
                              "description": "List of price formulas of the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "formula": {
                                    "description": "Price formula reference.",
                                    "type": "string",
                                    "example": "24-MONTH",
                                    "maxLength": 10
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.1
                                  },
                                  "premium_before_discount_excl_tax": {
                                    "description": "Premium not discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 150.2
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 250.3
                                  }
                                },
                                "required": [
                                  "formula",
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            },
                            "criteria": {
                              "description": "Home information.",
                              "type": "object",
                              "properties": {
                                "device_brand": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_model": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_age": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_power": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_price": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_quantity": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_energy_source": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "installation_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "owner_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "housing_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "customer_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "excess_level": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "attachments": {
                              "description": "List of document linked to the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Attached document name.",
                                    "type": "string",
                                    "example": "terms_and_conditions",
                                    "maxLength": 50
                                  },
                                  "content_url": {
                                    "description": "URL to download the document.",
                                    "type": "string",
                                    "example": "http://website.com/mydocument",
                                    "maxLength": 255
                                  },
                                  "type": {
                                    "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "TERMS_AND_CONDITIONS"
                                  }
                                },
                                "required": [
                                  "name",
                                  "content_url",
                                  "type"
                                ]
                              }
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "description": "Periodicity of the payment.",
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                    "type": "string",
                                    "example": "R12/P1M",
                                    "maxLength": 25
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Monthly.",
                                    "maxLength": 25
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "product_code",
                            "prices",
                            "coverages"
                          ]
                        }
                      }
                    },
                    "required": [
                      "context",
                      "products"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.products.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.products.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/medical/vexp/consultations": {
      "post": {
        "summary": "Creates a medical consultation.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "appointment_period": {
                    "description": "Appointment period details.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-03-22T10:59:00Z"
                          },
                          "to": {
                            "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "from"
                        ]
                      }
                    ]
                  },
                  "effective_period": {
                    "description": "Effective period details.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-03-22T10:59:00Z"
                          },
                          "to": {
                            "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "from"
                        ]
                      }
                    ]
                  },
                  "address": {
                    "description": "Address of the medical customer.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "123 Some Street Name"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "75001"
                          },
                          "locality": {
                            "description": "Locality.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "PARIS"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "subdivision": {
                            "description": "Area of the city.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "state": {
                            "description": "Label of the state.",
                            "type": "string",
                            "maxLength": 100
                          }
                        }
                      }
                    ]
                  },
                  "phones": {
                    "description": "List of the phones numbers of the medical customer.",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "phone_type": {
                          "description": "Type of number.",
                          "type": "string",
                          "enum": [
                            "LANDLINE",
                            "MOBILE"
                          ],
                          "example": "MOBILE"
                        },
                        "international_prefix": {
                          "description": "Prefix to be added to be called from abroad.",
                          "type": "string",
                          "maxLength": 6,
                          "example": "+33"
                        },
                        "number": {
                          "description": "Phone number. Can be local or international.",
                          "type": "string",
                          "maxLength": 20,
                          "example": "0123456789"
                        }
                      },
                      "required": [
                        "number"
                      ]
                    }
                  },
                  "reason": {
                    "description": "Reason of the consultation.",
                    "type": "string",
                    "maxLength": 255
                  },
                  "channel": {
                    "description": "Channel prefered by the customer (video or audio).",
                    "type": "string",
                    "enum": [
                      "AUDIO",
                      "VIDEO"
                    ]
                  },
                  "customer_journey_step": {
                    "description": "Customer Journey Step. Example of values:\n - ON_QUALIFICATION\n - PRESCRIPTION_READY_TO_BE_SENT\n - PRESCRIPTION_SENDING_IDENTIFIED\n - PRESCRIPTION_SENT\n - WAITING_DOCTOR\n - WITH_DOCTOR\n",
                    "type": "string",
                    "maxLength": 50,
                    "example": "WAITING_DOCTOR"
                  },
                  "is_the_requester_the_patient": {
                    "description": "Indicates if the consultation concerns the customer himself (herself) or someone else (child for example).",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "description": "Content of a medical consultation creation.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "consultation_id": {
                      "description": "Consultation identifier.",
                      "type": "string",
                      "maxLength": 150,
                      "example": "13450404-5dc5-4b2f-819d-0e4231aceaab"
                    }
                  },
                  "required": [
                    "consultation_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/medical/vexp/consultations/{consultation_id}": {
      "get": {
        "summary": "Provides detail of a medical consultation.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          },
          {
            "name": "consultation_id",
            "description": "ID of the medical consultation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13450404-5dc5-4b2f-819d-0e4231aceaab",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Medical consultation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "consultation_id"
                  ],
                  "description": "Medical Consultation",
                  "allOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "consultation_id": {
                          "description": "Consultation identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "13450404-5dc5-4b2f-819d-0e4231aceaab"
                        },
                        "status": {
                          "description": "Consultation status:\n- PLANNED: Planned in the doctor calendar.\n- STARTED: The consultation has started. ItÔÇÖs in progress.\n- COMPLETED: The doctor has completed the consultation (some administrative actions can be added).\n- CLOSED: The consultation is closed, there is no pending tasks any more linked to it.\n- CANCELLED: The consultation has been cancelled.\n",
                          "type": "string",
                          "enum": [
                            "PLANNED",
                            "STARTED",
                            "COMPLETED",
                            "CLOSED",
                            "CANCELLED"
                          ],
                          "example": "COMPLETED"
                        },
                        "medical_documents": {
                          "description": "List of the medical documents linked to the medical consultation.\nAll the documents are generated by the medical team.\n",
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "medical_document_id": {
                                "description": "Medical document identifier.",
                                "type": "string",
                                "maxLength": 150,
                                "example": "32ed3259-d93e-49b6-9f33-384747382475"
                              },
                              "document_type": {
                                "description": "Type of the medical document.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "code": {
                                        "description": "Type of the medical document.\n  - ABSENCE_FROM_WORK_CERTIFICATE_FORM: Form of evidence used to confirm that an employee is unable to attend work either due to illness, injury.\n\n  - PRESCRIPTION: Piece of paper on which your doctor writes an order for medicine and which you give to a chemist or pharmacist to get the medicine.\n\n  - OTHER: Any other medical documents that are not mentionned above.\n",
                                        "type": "string",
                                        "enum": [
                                          "ABSENCE_FROM_WORK_CERTIFICATE_FORM",
                                          "PRESCRIPTION",
                                          "OTHER"
                                        ],
                                        "example": "PRESCRIPTION"
                                      },
                                      "description": {
                                        "description": "Description of the document type.\nRequired if _code_ is equals to _OTHER_.\n",
                                        "type": "string",
                                        "maxLength": 250,
                                        "example": "RADIOLOGY CERTIFICATE"
                                      }
                                    }
                                  }
                                ]
                              },
                              "status": {
                                "description": "Medical document status:\n - DOWNLOADED: The medical document is downloaded.\n - IDENTIFIED: The doctor identified a medical document as needed.\n - SENT: The medical document has been sent to the recipient.\n - WRITTEN: The medical document is written and available.\n",
                                "type": "string",
                                "enum": [
                                  "DOWNLOADED",
                                  "IDENTIFIED",
                                  "SENT",
                                  "WRITTEN"
                                ],
                                "example": "WRITTEN"
                              },
                              "valid_until": {
                                "description": "Date of end of validity of the medical document.\nISO 8601 format (YYYY-MM-DD).\n",
                                "type": "string",
                                "format": "date",
                                "example": "2023-04-09"
                              },
                              "recipient_type": {
                                "description": "Type of recipient for the medical document:\n - Medical Laboratory\n - Pharmacy\n - Radiologist\n - ...\n",
                                "type": "string",
                                "maxLength": 50,
                                "example": "Pharmacy"
                              }
                            },
                            "required": [
                              "medical_document_id"
                            ]
                          }
                        },
                        "appointment_period": {
                          "description": "Appointment period details.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2019-03-22T10:59:00Z"
                                },
                                "to": {
                                  "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              },
                              "required": [
                                "from"
                              ]
                            }
                          ]
                        },
                        "effective_period": {
                          "description": "Effective period details.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2019-03-22T10:59:00Z"
                                },
                                "to": {
                                  "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              },
                              "required": [
                                "from"
                              ]
                            }
                          ]
                        },
                        "address": {
                          "description": "Address of the medical customer.",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "street_address": {
                                  "description": "Street address.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "123 Some Street Name"
                                },
                                "postal_code": {
                                  "description": "Postal code or zip code.",
                                  "type": "string",
                                  "maxLength": 20,
                                  "example": "75001"
                                },
                                "locality": {
                                  "description": "Locality.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "PARIS"
                                },
                                "country": {
                                  "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                  "type": "string",
                                  "example": "FR",
                                  "minLength": 2,
                                  "maxLength": 2
                                },
                                "subdivision": {
                                  "description": "Area of the city.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "state": {
                                  "description": "Label of the state.",
                                  "type": "string",
                                  "maxLength": 100
                                }
                              }
                            }
                          ]
                        },
                        "phones": {
                          "description": "List of the phones numbers of the medical customer.",
                          "type": "array",
                          "maxItems": 10,
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "phone_type": {
                                "description": "Type of number.",
                                "type": "string",
                                "enum": [
                                  "LANDLINE",
                                  "MOBILE"
                                ],
                                "example": "MOBILE"
                              },
                              "international_prefix": {
                                "description": "Prefix to be added to be called from abroad.",
                                "type": "string",
                                "maxLength": 6,
                                "example": "+33"
                              },
                              "number": {
                                "description": "Phone number. Can be local or international.",
                                "type": "string",
                                "maxLength": 20,
                                "example": "0123456789"
                              }
                            },
                            "required": [
                              "number"
                            ]
                          }
                        },
                        "reason": {
                          "description": "Reason of the consultation.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "channel": {
                          "description": "Channel prefered by the customer (video or audio).",
                          "type": "string",
                          "enum": [
                            "VIDEO",
                            "AUDIO"
                          ]
                        },
                        "customer_journey_step": {
                          "description": "Customer Journey Step. Example of values:\n - ON_QUALIFICATION\n - PRESCRIPTION_READY_TO_BE_SENT\n - PRESCRIPTION_SENDING_IDENTIFIED\n - PRESCRIPTION_SENT\n - WAITING_DOCTOR\n - WITH_DOCTOR\n",
                          "type": "string",
                          "maxLength": 50,
                          "example": "WAITING_DOCTOR"
                        },
                        "is_the_requester_the_patient": {
                          "description": "Indicates if the consultation concerns the customer himself (herself) or someone else (child for example).",
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.read_only"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      },
      "patch": {
        "summary": "Updates a medical consultation.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          },
          {
            "name": "consultation_id",
            "description": "ID of the medical consultation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13450404-5dc5-4b2f-819d-0e4231aceaab",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "appointment_period": {
                    "description": "Appointment period details.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-03-22T10:59:00Z"
                          },
                          "to": {
                            "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "from"
                        ]
                      }
                    ]
                  },
                  "effective_period": {
                    "description": "Effective period details.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Date and time of the beginning of the period.\nUTC datetime RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-03-22T10:59:00Z"
                          },
                          "to": {
                            "description": "Date and time of the end of the period.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "from"
                        ]
                      }
                    ]
                  },
                  "address": {
                    "description": "Address of the medical customer.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "123 Some Street Name"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "75001"
                          },
                          "locality": {
                            "description": "Locality.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "PARIS"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "subdivision": {
                            "description": "Area of the city.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "state": {
                            "description": "Label of the state.",
                            "type": "string",
                            "maxLength": 100
                          }
                        }
                      }
                    ]
                  },
                  "phones": {
                    "description": "List of the phones numbers of the medical customer.",
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "phone_type": {
                          "description": "Type of number.",
                          "type": "string",
                          "enum": [
                            "LANDLINE",
                            "MOBILE"
                          ],
                          "example": "MOBILE"
                        },
                        "international_prefix": {
                          "description": "Prefix to be added to be called from abroad.",
                          "type": "string",
                          "maxLength": 6,
                          "example": "+33"
                        },
                        "number": {
                          "description": "Phone number. Can be local or international.",
                          "type": "string",
                          "maxLength": 20,
                          "example": "0123456789"
                        }
                      },
                      "required": [
                        "number"
                      ]
                    }
                  },
                  "reason": {
                    "description": "Reason of the consultation.",
                    "type": "string",
                    "maxLength": 255
                  },
                  "channel": {
                    "description": "Channel prefered by the customer (video or audio).",
                    "type": "string",
                    "enum": [
                      "AUDIO",
                      "VIDEO"
                    ]
                  },
                  "customer_journey_step": {
                    "description": "Customer Journey Step. Example of values:\n - ON_QUALIFICATION\n - PRESCRIPTION_READY_TO_BE_SENT\n - PRESCRIPTION_SENDING_IDENTIFIED\n - PRESCRIPTION_SENT\n - WAITING_DOCTOR\n - WITH_DOCTOR\n",
                    "type": "string",
                    "maxLength": 50,
                    "example": "WAITING_DOCTOR"
                  },
                  "is_the_requester_the_patient": {
                    "description": "Indicates if the consultation concerns the customer himself (herself) or someone else (child for example).",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "description": "Content of a medical consultation update.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/medical/vexp/consultations/{consultation_id}/cancel": {
      "post": {
        "summary": "Cancels a medical consultation.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          },
          {
            "name": "consultation_id",
            "description": "ID of the medical consultation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13450404-5dc5-4b2f-819d-0e4231aceaab",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "cancelation_reason": {
                    "description": "Reason of the consultation's cancelation.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            }
          },
          "description": "Content of a medical consultation cancelation",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/medical/vexp/consultations/{consultation_id}/medical_documents/{medical_document_id}/generate_attachment": {
      "post": {
        "summary": "Retrieves detail of a medical document.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          },
          {
            "name": "consultation_id",
            "description": "ID of the medical consultation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13450404-5dc5-4b2f-819d-0e4231aceaab",
              "maxLength": 150
            }
          },
          {
            "name": "medical_document_id",
            "description": "ID of the medical document.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "51e62a2f-36b3-4f21-9056-bafbd1b303fa",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the medical document.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "external_attachment_id": {
                      "description": "Identifier of the attachment. This identifer can be used to download the file from external tools (for instance, CMX WRAPPER).\n",
                      "type": "string",
                      "maxLength": 150,
                      "example": "e08c0a4f-df7e-4617-bc15-695653070ee6|2a06b6a1-5d1f-4845-ade6-ec4144233030"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.medical_documents.read_only"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.medical_documents.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/medical/vexp/consultations/{consultation_id}/rate": {
      "post": {
        "summary": "Rates a medical consultation.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the client can precise in which environment the information should be sent. The environments are listed below:\n  - test --> UAT / User Acceptance Environment.\n  - dev --> New  Environment for UAT / User Acceptance.\n  - preprod --> Pre-production (real data, real clients to validate the software before release to production).\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "dev",
                "preprod"
              ]
            }
          },
          {
            "name": "consultation_id",
            "description": "ID of the medical consultation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13450404-5dc5-4b2f-819d-0e4231aceaab",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "rating": {
                        "description": "Rating. Expected value between 0 and 5.",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 5
                      },
                      "comments": {
                        "description": "Comments regarding the rating.",
                        "type": "string",
                        "maxLength": 2000
                      }
                    },
                    "required": [
                      "rating"
                    ]
                  }
                ]
              }
            }
          },
          "description": "Content of a medical consultation rating.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          },
          {
            "test_tcm_acg": [
              "urn:axa.partners.service.medical.consultations.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimated_time_arrival": {
                    "description": "Estimated Time of Arrival\nUTC date-time, ISO 8601 format (ex: YYYY-MM-DDTHH:mm:ssZ).\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-01-25T15:30:00Z"
                  },
                  "start_location": {
                    "description": "Indicates the starting location of the provider when the mission order is accepted.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "longitude": {
                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 2.3488
                          },
                          "latitude": {
                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 48.85341
                          }
                        },
                        "required": [
                          "longitude",
                          "latitude"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason of the refusal\n\nThe possible values are:\n\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt with SLA time (Service Level Agreement)\n\n- DONT_HAVE_RIGHT_EQUIPMENT: Provider does not have the right equipment\n\n- DONT_HAVE_RIGHT_LICENCE: Provider does not have licence to perform this job\n\n- DONT_HAVE_RIGHT_STAFF: Provider does not have right staff to perform the mission\n\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n\n- LOCATION_OUT_OF_ZONE: Location out of zone\n\n- OTHER: Any other reason. Use description to give the other reason\n\n- PROVIDER_NOT_AVAILABLE: Provider currently not available\n\n- SERVICE_NOT_COVERED: Service not covered by the provider\n",
                    "type": "string",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "DONT_HAVE_RIGHT_EQUIPMENT",
                      "DONT_HAVE_RIGHT_LICENCE",
                      "DONT_HAVE_RIGHT_STAFF",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "LOCATION_OUT_OF_ZONE",
                      "OTHER",
                      "PROVIDER_NOT_AVAILABLE",
                      "SERVICE_NOT_COVERED"
                    ],
                    "example": "PROVIDER_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the refusal is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "DOUBLON_MISSION"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/missions/{mission_id}/cancel": {
      "post": {
        "summary": "Allows the provider to cancel a mission.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Description of the reason of the cancellation.\nThe possible values are the following:\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- CANT_ATTEMPT_WITHIN_SLA_TIME: The provider cannot perform the mission within the SLA time\n- OTHER: Any other reason. _description_ must be filled to explain the reason\n",
                    "enum": [
                      "EQUIPMENT_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "type": "string",
                    "example": "EQUIPMENT_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the cancellation is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "INTERVENTION_NON_EFFECTUEE"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the cancellation.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cancel request sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Mission completed or canceled).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed since the mission is already completed."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/missions/{mission_id}/change_requests": {
      "post": {
        "summary": "Allows the provider to send a change request.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "description": "New service or equipment required to perform the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are:\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- LONG_DISTANCE_TOWING : Tow the vehicle from one place to another place for more than 100 km\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                            "type": "string",
                            "enum": [
                              "TOWING",
                              "REPAIR_ON_SPOT",
                              "LIFTING_CRANE",
                              "LONG_DISTANCE_TOWING",
                              "DELIVERY",
                              "STORAGE",
                              "REPATRIATION"
                            ],
                            "example": "TOWING"
                          },
                          "service_qualifiers": {
                            "description": "List of service qualifiers that detail the service to provide.\nThe possible combinations are the following:\n\n| Service_code           | Possible Service_qualifier                     |\n| ---------------------- | -----------------------------------------------|\n| TOWING                 | _no possible values_ |\n| LONG_DISTANCE_TOWING   | _no possible values_ |\n| REPAIR_ON_SPOT         | MOBILE_DRAIN, EV_CHARGING, JUMP_START, TIRE_REPLACEMENT, BATTERY_REPLACEMENT, OTHER_REGULAR_ROS|\n| LIFTING_CRANE          | _no possible values_ |\n| DELIVERY               | _no possible values_ |\n| STORAGE                | _no possible values_ |\n| REPATRIATION           | _no possible values_ |\n\nQualifiers description:\n- MOBILE_DRAIN: Drain fuel within tank of car because of a misfuelling and fill the tank with the correct fuel.\n- EV_CHARGING: Charge the electric vehicule on spot\n- JUMP_START: Start a car with a flat battery with jump leads or by a sudden release of the clutch while the car is being pushed.\n- TIRE_REPLACEMENT: Replacement of a tire of the vehicle.\n- BATTERY_REPLACEMENT: Replacement of the battery of the vehicle.\n- OTHER_REGULAR_ROS: Other breakdown that can be repaired on spot\n",
                            "type": "array",
                            "maxItems": 5,
                            "example": [
                              "MOBILE_DRAIN",
                              "JUMP_START"
                            ],
                            "items": {
                              "type": "string",
                              "enum": [
                                "MOBILE_DRAIN",
                                "EV_CHARGING",
                                "JUMP_START",
                                "TIRE_REPLACEMENT",
                                "BATTERY_REPLACEMENT",
                                "OTHER_REGULAR_ROS"
                              ]
                            }
                          },
                          "equipments": {
                            "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- 4X4: 4x4,\n- AIR_CUSHIONS: Air cushions\n- COMMERCIAL_LOW_LOADER_HV: Commercial low loader,\n- COVERED_TRANSPORTER: Covered transporter,\n- EXTRACTOR_EQUIPMENT: Extrator equipment,\n- SKATES_GOJACK: Dolly / gojack carts,\n- SLA_TRANSPORTER: SLA transporter,\n- STOLEN_WHEELS_KIT: Stolen wheels kit,\n- TEMPORARY_SPARE_TIRES: Temporary spare tires,\n- TYRE_VAN: Tyre van,\n- UNIMOG_TRACTOR: Unimog tractor\n",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "string",
                              "enum": [
                                "4X4",
                                "AIR_CUSHIONS",
                                "COMMERCIAL_LOW_LOADER_HV",
                                "COVERED_TRANSPORTER",
                                "EXTRACTOR_EQUIPMENT",
                                "SKATES_GOJACK",
                                "SLA_TRANSPORTER",
                                "STOLEN_WHEELS_KIT",
                                "TEMPORARY_SPARE_TIRES",
                                "TYRE_VAN",
                                "UNIMOG_TRACTOR"
                              ]
                            },
                            "example": [
                              "STOLEN_WHEELS_KIT",
                              "TEMPORARY_SPARE_TIRES"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "destination_address": {
                    "description": "The new destination address.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "7 rue de l'abreuvoir, Batiment C"
                          },
                          "subdivision": {
                            "description": "Area of the city, or department name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "HAUTS-DE-SEINE"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "92400"
                          },
                          "locality": {
                            "description": "City name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Courbevoie"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          }
                        },
                        "required": [
                          "street_address",
                          "postal_code",
                          "locality",
                          "country"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "appointment_rescheduled_at": {
                    "description": "New appointment Date&Time. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-03-01T08:30:00Z"
                  },
                  "total_cost_incl_tax": {
                    "description": "Request of a new total cost including tax. It does not imply to fulfill the \"total_cost_excl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_cost_excl_tax": {
                    "description": "Request of a new total cost excluding tax. It does not imply to fulfill the \"total_cost_incl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_distance": {
                    "description": "Total distance to perform the mission.",
                    "allOf": [
                      {
                        "properties": {
                          "value": {
                            "description": "Measured value.",
                            "type": "number",
                            "example": 15.5
                          },
                          "unit": {
                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- km: kilometers.\n",
                            "type": "string",
                            "enum": [
                              "km"
                            ],
                            "example": "km"
                          }
                        },
                        "required": [
                          "value",
                          "unit"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "spare_parts": {
                    "description": "Spare parts required to make reparations.",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Type of spare part.",
                          "type": "string",
                          "maxLength": 50,
                          "example": "Tire"
                        },
                        "quantity": {
                          "description": "Number of items",
                          "type": "integer",
                          "example": 2,
                          "maximum": 50
                        },
                        "unit_price_excl_tax": {
                          "description": "Unit price of the item, tax excluded",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        },
                        "unit_price_incl_tax": {
                          "description": "Unit price of the item, tax included",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "total_labour_hours": {
                    "description": "Total number of labour hours required to repair the vehicle. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                    "type": "string",
                    "maxLength": 25,
                    "example": "PT2H30M"
                  },
                  "additional_information": {
                    "description": "Any complementary information to the change request.",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "Spare parts are not available for the moment"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the change request.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change request sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "change_request_id": {
                      "description": "Identifier of the submitted change request",
                      "type": "string",
                      "maxLength": 50,
                      "example": "00089786345"
                    }
                  },
                  "required": [
                    "change_request_id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.change_requests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.change_requests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/missions/{mission_id}/communications": {
      "post": {
        "summary": "Allows the provider to communicate about the mission he is performing.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "communication_code": {
                    "description": "Code of the communication that the provider transmits during its mission.\nThe existing values are the following:\n| CODE                      | MANDATORY FIELD              | DESCRIPTION\n| ------------------------- | -----------------------------| ---------------------------\n| EN_ROUTE                  | -*none*-                     | Used to indicate that the provider is starting its way to the incident\n| CURRENT_LOCATION          | current_location             | used to indicate the current location of the provider.\n| ESTIMATED_TIME_ARRIVAL    | estimated_time_arrival       | used to indicate the Estimated Time of Arrival (ETA) on the incident location.\n| ON_SCENE                  | -*none*-                     | Used to indicate that the provider is arrived on the incident location.\n| ACTUAL_TIME_ARRIVAL       | actual_time_arrival          | Used to indicate the Actual Time Arrival (ATA) on the incident location.\n| DELAY_OF_ARRIVAL_TIME     | delay_of_arrival_time        | Used to indicate the estimated delay to arrive on the incident location.\n| DIAGNOSTIC_CONFIRMED      | -*none*-                     | Used to indicate that the diagnostic is confirmed.\n| WORK_STARTED              | work_started_at              | Used to indicate the time at which the intervention began.\n| ESTIMATED_COMPLETION_TIME | estimated_time_of_completion | Used to indicate the estimated time of work completion.\n| WORK_COMPLETED            | work_completed_at            | Used to indicate the time at which the intervention is completed.\n| DISCLAIMER_SHEET_SIGNED   | -*none*-                     | Used to indicate that the customer has signed the disclaimer sheet.\n| DESTINATION_ADDRESS       | address                      | Used to indicate the destination address.\n| ADDITIONAL_INFORMATION    | description                  | Used to indicate any other additionnal information.\n",
                    "type": "string",
                    "enum": [
                      "EN_ROUTE",
                      "CURRENT_LOCATION",
                      "ESTIMATED_TIME_ARRIVAL",
                      "ON_SCENE",
                      "ACTUAL_TIME_ARRIVAL",
                      "DELAY_OF_ARRIVAL_TIME",
                      "DIAGNOSTIC_CONFIRMED",
                      "WORK_STARTED",
                      "ESTIMATED_COMPLETION_TIME",
                      "WORK_COMPLETED",
                      "DISCLAIMER_SHEET_SIGNED",
                      "DESTINATION_ADDRESS",
                      "ADDITIONAL_INFORMATION"
                    ],
                    "example": "ESTIMATED_TIME_ARRIVAL"
                  },
                  "description": {
                    "description": "Any complementary information about the mission\n** Required if communication_code is empty or equal to _ADDITIONAL_INFORMATION_ **\n",
                    "type": "string",
                    "maxLength": 2048,
                    "example": "there are traffic jams on the highway"
                  },
                  "service_destination": {
                    "description": "Information on the service destination\ndescription: ** Required if communication_code is equal to _DESTINATION_ADRESS_ **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "7 rue de l'abreuvoir, Batiment C"
                          },
                          "subdivision": {
                            "description": "Area of the city, or department name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "HAUTS-DE-SEINE"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "92400"
                          },
                          "locality": {
                            "description": "City name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Courbevoie"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          }
                        },
                        "required": [
                          "street_address",
                          "postal_code",
                          "locality",
                          "country"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "arrival_information": {
                    "description": "Information about the provider arrival on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "current_location": {
                            "description": "Current location of the provider at the Date&Time the communication is transmit.\n** Required if communication_code is equal to _CURRENT_LOCATION_ **\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "estimated_time_arrival": {
                            "description": "Estimated Time of Arrival (ETA) communicated by the provider.\n** Required if communication_code is equal to _ESTIMATED_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:00:00Z"
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n** Required if communication_code is equal to _ACTUAL_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "delay_of_arrival_time": {
                            "description": "Provider estimation of the delay to arrive on site. ISO 8601 format (P18Y9M4DT11H9M8S).\n** Required if communication_code is equal to _DELAY_OF_ARRIVAL_TIME_ **\nFor example \"PT30M\" means a period (P) of time (T) of 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 20,
                            "example": "PT30M"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "work_information": {
                    "description": "Information about the provider mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site\n** Required if communication_code is equal to _WORK_STARTED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "estimated_time_of_completion": {
                            "description": "Estimation of the provider about the mission completion.\n** Required if communication_code is equal to _ESTIMATED_COMPLETION_TIME_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:00:00Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site\n** Required if communication_code is equal to _WORK_COMPLETED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the communication.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Communication sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.communications.write"
            ]
          },
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.communications.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/roadside/vexp/missions/{mission_id}/mission_reports": {
      "post": {
        "summary": "Allows the provider to carry out his mission report.",
        "description": "Cf. Summary.",
        "parameters": [
          {
            "name": "x-tenant-id",
            "description": "The unique identifier of the tenant, the value should be provided by AXA.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mission_statement": {
                    "description": "Information about the mission process",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_cancelled": {
                            "description": "Indicates that the mission has been cancelled.",
                            "type": "boolean",
                            "example": false
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          },
                          "disclaimer_sheet_signed": {
                            "description": "Indicates that the disclaimer sheet has been signed.",
                            "type": "boolean",
                            "example": true
                          },
                          "total_distance": {
                            "description": "Distance traveled by the provider to perform the mission.\nBy default, the field is not taken into account if one of the distance in _break_down_distances_ is filled.\n",
                            "allOf": [
                              {
                                "properties": {
                                  "value": {
                                    "description": "Measured value.",
                                    "type": "number",
                                    "example": 15.5
                                  },
                                  "unit": {
                                    "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- km: kilometers.\n",
                                    "type": "string",
                                    "enum": [
                                      "km"
                                    ],
                                    "example": "km"
                                  }
                                },
                                "required": [
                                  "value",
                                  "unit"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "break_down_distances": {
                            "description": "Distances traveled by the provider to perform the mission.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "distance_from_base_to_incident": {
                                    "description": "Distance traveled by the provider from its base (start location) to the incident location.",
                                    "type": "number",
                                    "example": 5.5
                                  },
                                  "distance_from_incident_to_destination": {
                                    "description": "Distance traveled by the provider from the incident location to the destination location.",
                                    "type": "number",
                                    "example": 8.2
                                  },
                                  "distance_from_destination_to_base": {
                                    "description": "Distance traveled by the provider from the destination location to its base.",
                                    "type": "number",
                                    "example": 3.8
                                  },
                                  "unit": {
                                    "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nRequired if at least one of the distance properties is filled.\n\nThe possible values are:\n- km: kilometers.\n",
                                    "type": "string",
                                    "enum": [
                                      "km"
                                    ],
                                    "example": "km"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "total_labour_hours": {
                            "description": "Total number of labour hours required to repair the vehicle. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 25,
                            "example": "PT2H30M"
                          },
                          "spare_parts": {
                            "description": "Spare parts used to make reparations.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Type of spare part.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Tire"
                                },
                                "quantity": {
                                  "description": "Number of items",
                                  "type": "integer",
                                  "example": 2,
                                  "maximum": 50
                                },
                                "unit_price_excl_tax": {
                                  "description": "Unit price of the item, tax excluded",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "unit_price_incl_tax": {
                                  "description": "Unit price of the item, tax included",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "new_authorized_amount_incl_tax": {
                            "description": "Authorized amount.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "technician_name": {
                            "description": "Technician name.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "GIRAUD Alexandre"
                          },
                          "did_a_second_towing": {
                            "description": "Indicated if the provider has done a second towing or not. For example if the provider did a towing to its garage, then another to the destination.",
                            "type": "boolean",
                            "example": false
                          },
                          "number_of_storage_days": {
                            "description": "Number of days for which the vehicle is parked by the provider, for example the time the destination garage is open.\n",
                            "type": "integer",
                            "example": 2
                          },
                          "storage_total_amount_excl_tax": {
                            "description": "Total amount excluding tax for the vehicle storage.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "additional_information": {
                            "description": "Any complementary information about the mission.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "First destination closed. Changed for another garage 10km away."
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "case": {
                    "description": "Case description of the customer's situation.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "description": "Service and equipment asked in the change request:\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "service_code": {
                                    "description": "The code of the service.\nThe possible value are:\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- LONG_DISTANCE_TOWING : Tow the vehicle from one place to another place for more than 100 km\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                                    "type": "string",
                                    "enum": [
                                      "TOWING",
                                      "REPAIR_ON_SPOT",
                                      "LIFTING_CRANE",
                                      "LONG_DISTANCE_TOWING",
                                      "DELIVERY",
                                      "STORAGE",
                                      "REPATRIATION"
                                    ],
                                    "example": "TOWING"
                                  },
                                  "service_qualifiers": {
                                    "description": "List of service qualifiers that detail the service to provide.\nThe possible combinations are the following:\n\n| Service_code           | Possible Service_qualifier                     |\n| ---------------------- | -----------------------------------------------|\n| TOWING                 | _no possible values_ |\n| LONG_DISTANCE_TOWING   | _no possible values_ |\n| REPAIR_ON_SPOT         | MOBILE_DRAIN, EV_CHARGING, JUMP_START, TIRE_REPLACEMENT, BATTERY_REPLACEMENT, OTHER_REGULAR_ROS|\n| LIFTING_CRANE          | _no possible values_ |\n| DELIVERY               | _no possible values_ |\n| STORAGE                | _no possible values_ |\n| REPATRIATION           | _no possible values_ |\n\nQualifiers description:\n- MOBILE_DRAIN: Drain fuel within tank of car because of a misfuelling and fill the tank with the correct fuel.\n- EV_CHARGING: Charge the electric vehicule on spot\n- JUMP_START: Start a car with a flat battery with jump leads or by a sudden release of the clutch while the car is being pushed.\n- TIRE_REPLACEMENT: Replacement of a tire of the vehicle.\n- BATTERY_REPLACEMENT: Replacement of the battery of the vehicle.\n- OTHER_REGULAR_ROS: Other breakdown that can be repaired on spot\n",
                                    "type": "array",
                                    "maxItems": 5,
                                    "example": [
                                      "MOBILE_DRAIN",
                                      "JUMP_START"
                                    ],
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "MOBILE_DRAIN",
                                        "EV_CHARGING",
                                        "JUMP_START",
                                        "TIRE_REPLACEMENT",
                                        "BATTERY_REPLACEMENT",
                                        "OTHER_REGULAR_ROS"
                                      ]
                                    }
                                  },
                                  "equipments": {
                                    "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- 4X4: 4x4,\n- AIR_CUSHIONS: Air cushions\n- COMMERCIAL_LOW_LOADER_HV: Commercial low loader,\n- COVERED_TRANSPORTER: Covered transporter,\n- EXTRACTOR_EQUIPMENT: Extrator equipment,\n- SKATES_GOJACK: Dolly / gojack carts,\n- SLA_TRANSPORTER: SLA transporter,\n- STOLEN_WHEELS_KIT: Stolen wheels kit,\n- TEMPORARY_SPARE_TIRES: Temporary spare tires,\n- TYRE_VAN: Tyre van,\n- UNIMOG_TRACTOR: Unimog tractor\n",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "4X4",
                                        "AIR_CUSHIONS",
                                        "COMMERCIAL_LOW_LOADER_HV",
                                        "COVERED_TRANSPORTER",
                                        "EXTRACTOR_EQUIPMENT",
                                        "SKATES_GOJACK",
                                        "SLA_TRANSPORTER",
                                        "STOLEN_WHEELS_KIT",
                                        "TEMPORARY_SPARE_TIRES",
                                        "TYRE_VAN",
                                        "UNIMOG_TRACTOR"
                                      ]
                                    },
                                    "example": [
                                      "STOLEN_WHEELS_KIT",
                                      "TEMPORARY_SPARE_TIRES"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident_location": {
                            "description": "Starting location of the provider at the begining of the mission.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "The address of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "The GPS coordinates of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address"
                                ],
                                "additionalProperties": false
                              },
                              {
                                "properties": {
                                  "is_underground": {
                                    "description": "Define if the vehicle is underground or not.",
                                    "type": "boolean",
                                    "example": false
                                  }
                                }
                              }
                            ]
                          },
                          "service_destination": {
                            "description": "Information about service destination.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "The service destination name.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Garage du Morvan"
                                  },
                                  "category": {
                                    "description": "The service destination category.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "Garage"
                                  },
                                  "address": {
                                    "description": "The service destination address.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "problem_context": {
                            "description": "The final description of the problem.\nIn order to give information, at least one of the properties is mandatory.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "problem_code": {
                                    "description": "The code of the problem.\nThe possible value are:\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low ADBLUE level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDOW_MECHANISM: Window mechanism\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                                    "type": "string",
                                    "enum": [
                                      "ACCELERATOR_CABLE",
                                      "ACCIDENT",
                                      "ALTERNATOR",
                                      "AMBER_WARNING_LIGHTS",
                                      "BACK_WINDOW_BROKEN",
                                      "BODYWORK",
                                      "BOGGED_DOWN",
                                      "BRAKE_LIGHTS",
                                      "BRAKES_FAILURE",
                                      "BRAKES_PADS_NOISE",
                                      "BRAKES_SEIZED",
                                      "BROKEN_MIRRORS",
                                      "BROKEN_WINDSCREEN",
                                      "CAM_BELT",
                                      "CHARGING_PROBLEM_EV",
                                      "CHIPPED_CRACKED_BACK_WINDOW",
                                      "CHIPPED_CRACKED_WINDOW",
                                      "CHIPPED_CRACKED_WINDSCREEN",
                                      "CLUTCH_FAILURE",
                                      "CLUTCH_LINKAGE",
                                      "CONTAMINATED_OIL",
                                      "COOLANT_LEAK",
                                      "DAMAGED_WHEEL",
                                      "DEATH",
                                      "DIESEL_IN_PETROL",
                                      "DIESEL_LEAK",
                                      "DOOR_BONNET_BOOT",
                                      "DOOR_LOCK",
                                      "DRIVER_MIRROR_BROKEN",
                                      "DRIVER_NOT_FEELING_WELL",
                                      "ELECTRICS_PROBLEM",
                                      "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                                      "EXHAUST",
                                      "FALL_OF_HAIL_ON_VEHICLE",
                                      "FALL_OF_OBJECTS_ON_VEHICLE",
                                      "FILLER_CAP",
                                      "FINE",
                                      "FIRE",
                                      "FLAT_BATTERY",
                                      "FLAT_TYRE_LWNK_MISSING",
                                      "FLAT_TYRE_WITH_SPARE",
                                      "FLAT_TYRE_WITHOUT_SPARE",
                                      "FLOOD",
                                      "FOG_LIGHTS",
                                      "FROZEN_FUEL",
                                      "FROZEN_KEYHOLE",
                                      "FUEL_LEAK",
                                      "GEAR_LINKAGE",
                                      "GEARBOX_AUTO",
                                      "GEARBOX_MANUAL",
                                      "HAND_BRAKE",
                                      "HEAD_LIGHTS",
                                      "IMMOBILIZER_ALARM",
                                      "INDICATORS",
                                      "KEY_BROKEN",
                                      "KEY_CARD_NOT_RECOGNIZED",
                                      "KEYS_LOCKED_IN_CAR",
                                      "KEYS_LOST",
                                      "KEYS_STOLEN",
                                      "LATERAL_WINDOW_BROKEN",
                                      "LOSS_OF_POWER",
                                      "LOW_ADBLUE_LEVEL",
                                      "LOW_CHARGE_EV",
                                      "MULTIPLE_FLAT_TYRES",
                                      "MULTIPLE_WHEELS_STOLEN",
                                      "NATURAL_DISASTER",
                                      "NON_STARTER",
                                      "NON_STARTER_DOK",
                                      "NON_STARTER_WONT_FIRE",
                                      "NUTS_BOLTS_LOOSE",
                                      "NUTS_BOLTS_MISSING_BROKEN",
                                      "OIL_LEAK",
                                      "OIL_LEVEL_LOW",
                                      "OTHER_CLIMATIC_EVENT",
                                      "OUT_OF_DIESEL",
                                      "OUT_OF_FUEL",
                                      "OUT_OF_LPG",
                                      "OUT_OF_PETROL",
                                      "OVERHEAT",
                                      "PARTIAL_THEFT",
                                      "PASSENGER_MIRROR_BROKEN",
                                      "PETROL_IN_DIESEL",
                                      "PETROL_LEAK",
                                      "POWER_OF_STEERING_FAILURE",
                                      "RED_WARNING_LIGHT",
                                      "SMOKE",
                                      "STARTER_MOTOR",
                                      "STEERING_FAILURE",
                                      "STEERING_LOCK_IGNITION_BARREL",
                                      "STRANGE_NOISE_WHEN_DRIVING",
                                      "STUCK_IN_SNOW",
                                      "SUN_ROOF_WONT_CLOSE",
                                      "SUSPENSION",
                                      "TAIL_LIGHTS",
                                      "THEFT_ATTEMPT",
                                      "THEFT_ATTEMPT_BROKEN_GLASS",
                                      "THEFT_ATTEMPT_IGNITION_BROKEN",
                                      "THEFT_ATTEMPT_LOCK_BROKEN",
                                      "UNIDENTIFIED_BREAKDOWN",
                                      "UNKNOWN_FLUID_LEAKING",
                                      "VANDALISM",
                                      "VANDALISM_BODYWORK_DAMAGE",
                                      "VANDALISM_FLAT_TYRE_WITH_SPARE",
                                      "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                                      "VANDALISM_MULTIPLE_FLAT_TYRES",
                                      "VEHICLE_STOLEN_FOUND",
                                      "VEHICLE_STOLEN_NOT_FOUND",
                                      "VEHICLE_STOPPED_ENGINE_RUNNING",
                                      "VEHICLE_STUCK_IN_ICE",
                                      "WATER_LEAK",
                                      "WATER_OR_DIRT_IN_FUEL",
                                      "WHEEL_ADRIFT",
                                      "WHEEL_BEARINGS",
                                      "WHEEL_STOLEN",
                                      "WINDOW_MECHANISM",
                                      "WINDSCREEN_WIPERS",
                                      "WRONG_FUEL"
                                    ],
                                    "example": "ENGINE_STOPPED_NO_RESTART_POSSIBLE"
                                  },
                                  "problem_label": {
                                    "description": "Problem label.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "engine failure"
                                  },
                                  "problem_description": {
                                    "description": "The problem description is used to describe quickly the problem.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "The vehicle seems not have a engine failure. The engine stopped"
                                  },
                                  "problem_detail": {
                                    "description": "The problem detail is required to detail deeply the problem.",
                                    "type": "string",
                                    "maxLength": 2048,
                                    "example": "Lot of smoke, starting few minutes before the car stopped"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "vehicle": {
                            "description": "Characteristics of the vehicle.\nIn order to give information, at least one of the properties is mandatory.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "brand": {
                                    "description": "Brand of the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Audi"
                                  },
                                  "model": {
                                    "description": "Model of the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "A5"
                                  },
                                  "age": {
                                    "description": "The age of the vehicle, in years, months, days. ISO 8601 format.\nP01Y9M4DT11H9M8S => period of 1 year, 9 months, 4 days and 11 hours, 9 minutes, 8 seconds.\n",
                                    "type": "string",
                                    "maxLength": 25,
                                    "example": "P01Y9M4DT11H9M8S"
                                  },
                                  "reference_number": {
                                    "description": "The reference number of the vehicle.\nIt is the \"chassis_number\".\n",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "VF1FW57B052967712"
                                  },
                                  "vehicle_type": {
                                    "description": "Type of the vehicle.\nThe values are:\n- AGRICULTURAL_TRUCK: Agricultural truck\n- BIKE: Bike\n- BUS_COACHES: Bus coaches, autocar\n- CAR: car\n- MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n- MOTORCYCLE: Motorcycle\n- TRUCK: Truck\n- VAN: Van\n",
                                    "type": "string",
                                    "enum": [
                                      "AGRICULTURAL_TRUCK",
                                      "BIKE",
                                      "BUS_COACHES",
                                      "CAR",
                                      "MOBILE_HOME_CAMPING_CAR",
                                      "MOTORCYCLE",
                                      "TRUCK",
                                      "VAN"
                                    ],
                                    "example": "CAR"
                                  },
                                  "first_registration_date": {
                                    "description": "The first registration date of the vehicle.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2019-02-23T00:00:00Z"
                                  },
                                  "registration_plate_number": {
                                    "description": "The registration plate number of the vehicle.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "ZZ-999-ZZ"
                                  },
                                  "cylinder_capacity": {
                                    "description": "The cylinder capacity of the vehicle.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured volume.",
                                            "type": "number",
                                            "example": 0.125
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n  - cm3: Cubic centimeter;\n  - dm3: Cubic decimeter;\n  - m3: Cubic meter.\n",
                                            "type": "string",
                                            "enum": [
                                              "cm3",
                                              "dm3",
                                              "m3"
                                            ],
                                            "example": "m3"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "gear_box": {
                                    "description": "The gear box of the vehicle\nThe possible values are:\n- AUTO: Automatic gearbox\n- MANUAL: Manual gearbox\n- SEMI_AUTO: Semi automatic gearbox\n- SPEED_VARIATOR: Speed variator\n- UNKNOWN: Unkown\n",
                                    "type": "string",
                                    "enum": [
                                      "AUTO",
                                      "MANUAL",
                                      "SEMI_AUTO",
                                      "SPEED_VARIATOR",
                                      "UNKNOWN"
                                    ],
                                    "example": "AUTO"
                                  },
                                  "fuel_type": {
                                    "description": "The fuel type of the vehicle.\nThe possible values are:\n- ALCOHOL_ETHANOL: Alcohol ethanol\n- BIO_DIESEL: Biologic Diesel\n- DIESEL: Diesel\n- ELECTRIC: Electricity\n- ELECTRIC_DIESEL: Electricity and diesel hybrid\n- ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n- GASOLINE: Gasoline\n- HYDROGEN: Hydrogen\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- UNKNOWN: Unknown\n",
                                    "type": "string",
                                    "example": "LIQUID_PETROL_GAS",
                                    "enum": [
                                      "ALCOHOL_ETHANOL",
                                      "BIO_DIESEL",
                                      "DIESEL",
                                      "ELECTRIC",
                                      "ELECTRIC_DIESEL",
                                      "ELECTRIC_GASOLINE",
                                      "GASOLINE",
                                      "HYDROGEN",
                                      "LIQUID_PETROL_GAS",
                                      "NATURAL_GAS",
                                      "UNKNOWN"
                                    ]
                                  },
                                  "transmission": {
                                    "description": "Define the vehicle transmission.\nThe possible values are:\n- 4WD: Manual 4 WD,\n- 2WD: Manual 2 WD,\n- AWD: Automatic 4 WD,\nWD = Wheels Drive.\n",
                                    "type": "string",
                                    "enum": [
                                      "4WD",
                                      "2WD",
                                      "AWD"
                                    ],
                                    "example": "AWD"
                                  },
                                  "color": {
                                    "description": "The color of the vehicle.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "blue"
                                  },
                                  "has_trailer": {
                                    "description": "Define the vehicle has trailer or not.",
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "transported_good_type": {
                                    "description": "The type of goods transported by the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Jewelry"
                                  },
                                  "gross_vehicle_weight": {
                                    "description": "The gross vehicle weight (GVW).",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured weight.",
                                            "type": "number",
                                            "example": 2.8
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- t: tonne.\n",
                                            "type": "string",
                                            "enum": [
                                              "t"
                                            ],
                                            "example": "t"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "sizes": {
                                    "description": "All size information of the vehicle (length, height, width)",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "unit": {
                                            "description": "Unit of measure of the vehicle\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- m: meter.\n",
                                            "type": "string",
                                            "enum": [
                                              "m"
                                            ],
                                            "example": "m"
                                          },
                                          "length": {
                                            "description": "The vehicle length.",
                                            "type": "number",
                                            "example": 2.8
                                          },
                                          "width": {
                                            "description": "The vehicle width.",
                                            "type": "number",
                                            "example": 1.8
                                          },
                                          "height": {
                                            "description": "The vehicle height.",
                                            "type": "number",
                                            "example": 2
                                          }
                                        },
                                        "required": [
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "proximity_floor": {
                                    "description": "The proximity floor, is used to define the proximity of the vehicle with the flor to provide the most suitable towing. It can be:\n - HIGH: when the car is not near to the floor (ex: 4*4, Land rover, ...)\n - LOW: When the car is very close to the floor (ex: Ferrari, Lamborghini)\n - REGULAR: Standard vehicle\n",
                                    "type": "string",
                                    "enum": [
                                      "HIGH",
                                      "LOW",
                                      "REGULAR"
                                    ],
                                    "example": "HIGH"
                                  },
                                  "mileage": {
                                    "description": "Mileage of the vehicle.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured mileage",
                                            "type": "number",
                                            "example": 213000
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- \\[mi_i]: miles,\n- km: kilometers.\n",
                                            "type": "string",
                                            "enum": [
                                              "[mi_i]",
                                              "km"
                                            ],
                                            "example": "km"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "is_rolling": {
                                    "description": "Define if the vehicle is rolling or not (a vehicle is rolling when all tires are still present and inflated).",
                                    "type": "boolean",
                                    "example": true
                                  }
                                },
                                "required": [
                                  "registration_plate_number"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "appointment_at": {
                            "description": "The appointment date & time.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:21:26Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "person_on_site": {
                    "description": "Contact of the person on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "title": {
                            "description": "The title of the contact, its civility.\nThe possible values are:\n- MR\n- MS: Ms\n- MISS: Miss\n- DR: Doctor\n- PR: Professor\n- MRS: Mrs\n- MASTER: Master\n- LADY: Lady\n- SIR: Sir\n- LORD: Lord\n- REVEREND: Reverend\n- SISTER: Sister\n",
                            "type": "string",
                            "enum": [
                              "MR",
                              "MS",
                              "MISS",
                              "DR",
                              "PR",
                              "MRS",
                              "MASTER",
                              "LADY",
                              "SIR",
                              "LORD",
                              "REVEREND",
                              "SISTER"
                            ],
                            "example": "MR"
                          },
                          "first_name": {
                            "description": "The first name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Eric"
                          },
                          "last_name": {
                            "description": "The last name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Dubois"
                          },
                          "phone_number": {
                            "description": "The phone number of the contact (prefix included).",
                            "type": "string",
                            "maxLength": 20,
                            "example": "+33601010101"
                          }
                        },
                        "required": [
                          "last_name"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission report.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission report sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Mission report already sent or mission completed).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed since the mission is already completed."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.mission_reports.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.mission_reports.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Allows the provider to accept the mission order.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/mission_orders/{mission_order_id}/accept\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimated_time_arrival": {
                    "description": "Estimated Time of Arrival\nUTC date-time, ISO 8601 format (ex: YYYY-MM-DDTHH:mm:ssZ).\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-01-25T15:30:00Z"
                  },
                  "start_location": {
                    "description": "Indicates the starting location of the provider when the mission order is accepted.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "longitude": {
                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 2.3488
                          },
                          "latitude": {
                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 48.85341
                          }
                        },
                        "required": [
                          "longitude",
                          "latitude"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Allows the provider to refuse the mission order.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/mission_orders/{mission_order_id}/refuse\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason of the refusal\nThe possible values are:\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt with SLA time (Service Level Agreement)\n- DONT_HAVE_RIGHT_EQUIPMENT: Provider does not have the right equipment\n- DONT_HAVE_RIGHT_LICENCE: Provider does not have licence to perform this job\n- DONT_HAVE_RIGHT_STAFF: Provider does not have right staff to perform the mission\n- PROVIDER_NOT_AVAILABLE: Provider currently not available\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- LOCATION_OUT_OF_ZONE: Location out of zone\n- OTHER: Any other reason. Use description to give the other reason\n",
                    "type": "string",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "DONT_HAVE_RIGHT_EQUIPMENT",
                      "DONT_HAVE_RIGHT_LICENCE",
                      "DONT_HAVE_RIGHT_STAFF",
                      "PROVIDER_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "LOCATION_OUT_OF_ZONE",
                      "OTHER"
                    ],
                    "example": "PROVIDER_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the refusal is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "DOUBLON_MISSION"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/missions/{mission_id}/cancel": {
      "post": {
        "summary": "Allows the provider to cancel a mission.",
        "description": "Allows the provider to cancel a mission\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/missions/{mission_id}/cancel\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Description of the reason of the cancellation.\nThe possible values are the following:\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- CANT_ATTEMPT_WITHIN_SLA_TIME: The provider cannot perform the mission within the SLA time\n- OTHER: Any other reason. _description_ must be filled to explain the reason\n",
                    "enum": [
                      "EQUIPMENT_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "type": "string",
                    "example": "EQUIPMENT_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the cancellation is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "INTERVENTION_NON_EFFECTUEE"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the cancellation.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cancel request sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/missions/{mission_id}/change_requests": {
      "post": {
        "summary": "Allows the provider to send a change request.",
        "description": "Allows the provider to send a change request\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/missions/{mission_id}/change_requests\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "description": "New service or equipment required to perform the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are :\n- HEATING_ASSESS: Send a heating engineer to evaluate the situation and produce a report giving additional information on the  incident\n- HEATING_INSTALL: Send a heating engineer to install a complete new item (I did not have the item before)\n- HEATING_REPAIR: Send a heating engineer to repair a broken item (this might include parts installation or replacement)\n- HEATING_REPLACE: Send a heating engineer to replace a full / complete existing item with a new one\n- HEATING_TEMPORARY_SOLUTION: Send a heating engineer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- HEATING_MAINTENANCE: Send a heating engineer to regular control (annual/periodic check)\n- HEATING_DETECT: Send a heating engineer to detect the source of the problem\n- CARPENTRY_ASSESS: Send a carpenter to evaluate the situation and produce a report giving additional information on the incident\n- CARPENTRY_INSTALL: Send a carpenter to install a complete new item (I did not have the item before)\n- CARPENTRY_REPAIR: Send a carpenter to repair a broken item (this might include parts installation or replacement)\n- CARPENTRY_REPLACE: Send a carpenter to replace a full / complete existing item with a new one\n- CARPENTRY_TEMPORARY_SOLUTION: Send a carpenter to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- CARPENTRY_MAINTENANCE: Send a carpenter to regular control (annual/periodic check)\n- EXTERNAL_DRAINAGE_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident on an external drainage situation\n- EXTERNAL_DRAINAGE_INSTALL: Send a plumber to install a complete new item (I did not have the item before) on an external  drainage situation\n- EXTERNAL_DRAINAGE_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPLACE: Send a plumber to replace a full / complete existing item with a new one on an external drainage situation\n- EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident on an external drainage situation\n- EXTERNAL_DRAINAGE_MAINTENANCE: Send a plumber to regular control (annual/periodic check) on an external drainage situation\n- ELECTRICS_ASSESS: Send an electrician to evaluate the situation and produce a report giving additional information on the incident\n- ELECTRICS_INSTALL: Send an electrician to install a complete new item (I did not have the item before)\n- ELECTRICS_REPAIR: Send an electrician to repair a broken item (this might include parts installation or replacement)\n- ELECTRICS_REPLACE: Send an electrician to replace a full / complete existing item with a new one\n- ELECTRICS_TEMPORARY_SOLUTION: Send an electrician to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ELECTRICS_MAINTENANCE: Send an electrician to regular control (annual/periodic check)\n- ROOFING_ASSESS: Send a roofer to evaluate the situation and produce a report giving additional information on the incident\n- ROOFING_INSTALL: Send a roofer to install a complete new item (I did not have the item before)\n- ROOFING_REPAIR: Send a roofer to repair a broken item (this might include parts installation or replacement)\n- ROOFING_REPLACE: Send a roofer to replace a full / complete existing item with a new one\n- ROOFING_TEMPORARY_SOLUTION: Send a roofer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ROOFING_MAINTENANCE: Send a roofer to regular control (annual/periodic check)\n- GLAZING_ASSESS: Send a glazier to evaluate the situation and produce a report giving additional information on the incident\n- GLAZING_INSTALL: Send a glazier to install a complete new item (I did not have the item before)\n- GLAZING_REPAIR: Send a glazier to repair a broken item (this might include parts installation or replacement)\n- GLAZING_REPLACE: Send a glazier to replace a full / complete existing item with a new one\n- GLAZING_TEMPORARY_SOLUTION: Send a glazier to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- GLAZING_MAINTENANCE: Send a glazier to regular control (annual/periodic check)\n- PESTS_CONTROL: Pests specific. Kills rodents or insects using chemicals, heat or rodenticide sprayed of dispatched around  the house. May require several visits\n- LOCKS_ASSESS: Send a locksmith to evaluate the situation and produce a report giving additional information on the incident\n- LOCKS_INSTALL: Send a locksmith to install a complete new item (I did not have the item before)\n- LOCKS_REPAIR: Send a locksmith to repair a broken item (this might include parts installation or replacement)\n- LOCKS_REPLACE: Send a locksmith to replace a full / complete existing item with a new one\n- LOCKS_TEMPORARY_SOLUTION: Send a locksmith to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- LOCKS_MAINTENANCE: Send a locksmith to regular control (annual/periodic check)\n- PLUMBING_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident\n- PLUMBING_INSTALL: Send a plumber to install a complete new item (I did not have the item before)\n- PLUMBING_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement)\n- PLUMBING_REPLACE: Send a plumber to replace a full / complete existing item with a new one\n- PLUMBING_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- PLUMBING_MAINTENANCE: Send a plumber to regular control (annual/periodic check)\n- PLUMBING_DETECT: Send a plumber to detect the source of the problem\n- SECURITY_AGENT_GUARD: Send a security company to secure the home of the customer\n- SECURITY_ASSESS: Send a security company to evaluate the situation and produce a report giving additional information on the incident\n- SECURITY_REPAIR: Send a security company to repair a broken item (this might include parts installation or replacement)\n- SECURITY_REPLACE: Send a security company to replace a full / complete existing item with a new one\n- SECURITY_TEMPORARY_SOLUTION: Send a security company to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- TECHNICAL_SERVICES_ASSESS: Send a technician to evaluate the situation and produce a report giving additional information on the incident on appliances\n- TECHNICAL_SERVICES_INSTALL: Send a technician to install a complete new item (I did not have the item before) on appliances\n- TECHNICAL_SERVICES_REPAIR: Send a technician to repair a broken item (this might include parts installation or replacement) on appliances\n- TECHNICAL_SERVICES_REPLACE: Send a technician to replace a full / complete existing item with a new one on appliances\n- TECHNICAL_SERVICES_TEMPORARY_SOLUTION: Send a technician to temporary fix - performed to reduce the level of urgency /severity of a specific incident on appliances\n- TECHNICAL_SERVICES_MAINTENANCE: Send a technician to regular control (annual/periodic check) on appliances\n",
                            "type": "string",
                            "enum": [
                              "HEATING_ASSESS",
                              "HEATING_INSTALL",
                              "HEATING_REPAIR",
                              "HEATING_REPLACE",
                              "HEATING_TEMPORARY_SOLUTION",
                              "HEATING_MAINTENANCE",
                              "HEATING_DETECT",
                              "CARPENTRY_ASSESS",
                              "CARPENTRY_INSTALL",
                              "CARPENTRY_REPAIR",
                              "CARPENTRY_REPLACE",
                              "CARPENTRY_TEMPORARY_SOLUTION",
                              "CARPENTRY_MAINTENANCE",
                              "EXTERNAL_DRAINAGE_ASSESS",
                              "EXTERNAL_DRAINAGE_INSTALL",
                              "EXTERNAL_DRAINAGE_REPAIR",
                              "EXTERNAL_DRAINAGE_REPLACE",
                              "EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION",
                              "EXTERNAL_DRAINAGE_MAINTENANCE",
                              "ELECTRICS_ASSESS",
                              "ELECTRICS_INSTALL",
                              "ELECTRICS_REPAIR",
                              "ELECTRICS_REPLACE",
                              "ELECTRICS_TEMPORARY_SOLUTION",
                              "ELECTRICS_MAINTENANCE",
                              "ROOFING_ASSESS",
                              "ROOFING_INSTALL",
                              "ROOFING_REPAIR",
                              "ROOFING_REPLACE",
                              "ROOFING_TEMPORARY_SOLUTION",
                              "ROOFING_MAINTENANCE",
                              "GLAZING_ASSESS",
                              "GLAZING_INSTALL",
                              "GLAZING_REPAIR",
                              "GLAZING_REPLACE",
                              "GLAZING_TEMPORARY_SOLUTION",
                              "GLAZING_MAINTENANCE",
                              "PESTS_CONTROL",
                              "LOCKS_ASSESS",
                              "LOCKS_INSTALL",
                              "LOCKS_REPAIR",
                              "LOCKS_REPLACE",
                              "LOCKS_TEMPORARY_SOLUTION",
                              "LOCKS_MAINTENANCE",
                              "PLUMBING_ASSESS",
                              "PLUMBING_INSTALL",
                              "PLUMBING_REPAIR",
                              "PLUMBING_REPLACE",
                              "PLUMBING_TEMPORARY_SOLUTION",
                              "PLUMBING_MAINTENANCE",
                              "PLUMBING_DETECT",
                              "SECURITY_AGENT_GUARD",
                              "SECURITY_ASSESS",
                              "SECURITY_REPAIR",
                              "SECURITY_REPLACE",
                              "SECURITY_TEMPORARY_SOLUTION",
                              "TECHNICAL_SERVICES_ASSESS",
                              "TECHNICAL_SERVICES_INSTALL",
                              "TECHNICAL_SERVICES_REPAIR",
                              "TECHNICAL_SERVICES_REPLACE",
                              "TECHNICAL_SERVICES_TEMPORARY_SOLUTION",
                              "TECHNICAL_SERVICES_MAINTENANCE"
                            ],
                            "example": "ELECTRICS_REPAIR"
                          },
                          "equipments": {
                            "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- SEWER_CLEANER_VEHICLE: Sewer cleaner vehicle,\n- DRONE_CONTROL: Drone control,\n- SCAFFOLDING: Scaffolding,\n- LIFT: Lift,\n- MANUAL_FERRET: Manual ferret,\n- DRAIN_CLEARING_MOLE: Drain clearing Mole,\n- HIGH_PRESSURE_JETTING_CLEANING: High pressure Jetting cleaning,\n- HYDROCUREUR_PORTATIF: High pressure Jetting cleaning,\n- THERMAL_CAMERA: Thermal Camera,\n- DRAIN_CCTV: Drain CCTV,\n- LEAK_DETECTION: Leak Detection,\n- ULTRASONIC_LOCATOR: Ultrasonic locator,\n- GAS_LEAK_DETECTION: Gas leak detection,\n- LISTENING_ON_THE_GROUND: Listening on the ground,\n- MINI_DIGGER: Mini digger,\n- COMBUSTION_ANALYZER: Combustion analyzer,\n- UNCLOGGING_PUMP: Unclogging pump,\n",
                            "type": "array",
                            "maxItems": 17,
                            "items": {
                              "type": "string",
                              "enum": [
                                "SEWER_CLEANER_VEHICLE",
                                "DRONE_CONTROL",
                                "SCAFFOLDING",
                                "LIFT",
                                "MANUAL_FERRET",
                                "DRAIN_CLEARING_MOLE",
                                "HIGH_PRESSURE_JETTING_CLEANING",
                                "HYDROCUREUR_PORTATIF",
                                "THERMAL_CAMERA",
                                "DRAIN_CCTV",
                                "LEAK_DETECTION",
                                "ULTRASONIC_LOCATOR",
                                "GAS_LEAK_DETECTION",
                                "LISTENING_ON_THE_GROUND",
                                "MINI_DIGGER",
                                "COMBUSTION_ANALYZER",
                                "UNCLOGGING_PUMP"
                              ]
                            },
                            "example": [
                              "HYDROCUREUR_PORTATIF",
                              "UNCLOGGING_PUMP"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "appointment_rescheduled_at": {
                    "description": "New appointment Date&Time. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                    "type": "string",
                    "format": "date-time",
                    "maxLength": 20,
                    "example": "2019-03-01T08:30:00Z"
                  },
                  "total_cost_incl_tax": {
                    "description": "Request of a new total cost including tax. It is does not imply to fulfill the \"total_cost_excl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_cost_excl_tax": {
                    "description": "Request of a new total cost excluding tax. It is does not imply to fulfill the \"total_cost_incl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "spare_parts": {
                    "description": "Spare parts required to make reparations.",
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Type of spare part.",
                          "type": "string",
                          "maxLength": 50,
                          "example": "Roof tiles"
                        },
                        "quantity": {
                          "description": "Number of items",
                          "type": "integer",
                          "example": 4200,
                          "maximum": 100000,
                          "minimum": 1
                        },
                        "unit_price_excl_tax": {
                          "description": "Unit price of the item, tax excluded",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        },
                        "unit_price_incl_tax": {
                          "description": "Unit price of the item, tax included",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "total_labour_hours": {
                    "description": "Total number of labour hours required to fix the problem. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                    "type": "string",
                    "maxLength": 25,
                    "example": "PT2H30M"
                  },
                  "additional_information": {
                    "description": "Any complementary information to the change request.",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "Spare parts are not available for the moment"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the change request.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "change_request_id": {
                      "description": "Identifier of the submitted change request",
                      "type": "string",
                      "maxLength": 50,
                      "example": "00089786345"
                    }
                  },
                  "required": [
                    "change_request_id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missions.change_requests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.change_requests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/missions/{mission_id}/communications": {
      "post": {
        "summary": "Allows the provider to communicate about the mission he is performing.",
        "description": "Allows the provider to communicate about the mission he is performing.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/missions/{mission_id}/communications\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same than the mission_order_id you accepted [here](https://developers.axa-assistance.com/docs#/service/post_service_vexp_domestic_mission_orders__mission_order_id__accept).\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "communication_code": {
                    "description": "Code of the communication that the provider transmits during its mission.\nThe existing values are the following:\n| CODE                      | MANDATORY FIELD              | DESCRIPTION\n| ------------------------- | -----------------------------| ---------------------------\n| EN_ROUTE                  | -*none*-                     | Used to indicate that the provider is starting its way to the incident\n| CURRENT_LOCATION          | current_location             | used to indicate the current location of the provider.\n| ESTIMATED_TIME_ARRIVAL    | estimated_time_arrival       | used to indicate the Estimated Time of Arrival (ETA) on the incident location.\n| ON_SCENE                  | -*none*-                     | Used to indicate that the provider is arrived on the incident location.\n| ACTUAL_TIME_ARRIVAL       | actual_time_arrival          | Used to indicate the Actual Time Arrival (ATA) on the incident location.\n| DELAY_OF_ARRIVAL_TIME     | delay_of_arrival_time        | Used to indicate the estimated delay to arrive on the incident location.\n| DIAGNOSTIC_CONFIRMED      | -*none*-                     | Used to indicate that the diagnostic is confirmed.\n| WORK_STARTED              | work_started_at              | Used to indicate the time at which the intervention began.\n| ESTIMATED_COMPLETION_TIME | estimated_time_of_completion | Used to indicate the estimated time of work completion.\n| WORK_COMPLETED            | work_completed_at            | Used to indicate the time at which the intervention is completed.\n| DISCLAIMER_SHEET_SIGNED   | -*none*-                     | Used to indicate that the customer has signed the disclaimer sheet.\n| ADDITIONAL_INFORMATION    | description                  | Used to indicate any other additionnal information.\n",
                    "type": "string",
                    "enum": [
                      "EN_ROUTE",
                      "CURRENT_LOCATION",
                      "ESTIMATED_TIME_ARRIVAL",
                      "ON_SCENE",
                      "ACTUAL_TIME_ARRIVAL",
                      "DELAY_OF_ARRIVAL_TIME",
                      "DIAGNOSTIC_CONFIRMED",
                      "WORK_STARTED",
                      "ESTIMATED_COMPLETION_TIME",
                      "WORK_COMPLETED",
                      "DISCLAIMER_SHEET_SIGNED",
                      "ADDITIONAL_INFORMATION"
                    ],
                    "example": "ESTIMATED_TIME_ARRIVAL"
                  },
                  "description": {
                    "description": "Any complementary information about the mission\n** Required if communication_code is empty or equal to _ADDITIONAL_INFORMATION_ **\n",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "there are traffic jams on the highway"
                  },
                  "arrival_information": {
                    "description": "Information about the provider arrival on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "current_location": {
                            "description": "Current location of the provider at the Date&Time the communication is transmit.\n** Required if communication_code is equal to _CURRENT_LOCATION_ **\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "estimated_time_arrival": {
                            "description": "Estimated Time of Arrival (ETA) communicated by the provider.\n** Required if communication_code is equal to _ESTIMATED_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:00:00Z"
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n** Required if communication_code is equal to _ACTUAL_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "delay_of_arrival_time": {
                            "description": "Provider estimation of the delay to arrive on site. ISO 8601 format (P18Y9M4DT11H9M8S).\n** Required if communication_code is equal to _DELAY_OF_ARRIVAL_TIME_ **\nFor example \"PT30M\" means a period (P) of time (T) of 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 25,
                            "example": "PT30M"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "work_information": {
                    "description": "Information about the provider mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site\n** Required if communication_code is equal to _WORK_STARTED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "estimated_time_of_completion": {
                            "description": "Estimation of the provider about the mission completion.\n** Required if communication_code is equal to _ESTIMATED_COMPLETION_TIME_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:00:00Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site\n** Required if communication_code is equal to _WORK_COMPLETED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the communication.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Communication sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missions.communications.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.communications.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/missions/{mission_id}/mission_reports": {
      "post": {
        "summary": "Allows the provider to carry out his mission report.",
        "description": "Allows the provider to carry out his mission report.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/domestic/vexp/missions/{mission_id}/mission_reports\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mission_statement": {
                    "description": "Information about the mission process",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_cancelled": {
                            "description": "Indicates that the mission has been cancelled.",
                            "type": "boolean",
                            "example": false
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          },
                          "disclaimer_sheet_signed": {
                            "description": "Indicates that the disclaimer sheet has been signed.",
                            "type": "boolean",
                            "example": true
                          },
                          "total_labour_hours": {
                            "description": "Total number of labour hours required to fix the problem. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 25,
                            "example": "PT2H30M"
                          },
                          "spare_parts": {
                            "description": "Spare parts used to make reparations.",
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Type of spare part.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Roof tiles"
                                },
                                "quantity": {
                                  "description": "Number of items",
                                  "type": "integer",
                                  "example": 4200,
                                  "maximum": 100000,
                                  "minimum": 1
                                },
                                "unit_price_excl_tax": {
                                  "description": "Unit price of the item, tax excluded",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "unit_price_incl_tax": {
                                  "description": "Unit price of the item, tax included",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "new_authorized_amount_incl_tax": {
                            "description": "Authorized amount.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "technician_name": {
                            "description": "Technician name.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "GIRAUD Alexandre"
                          },
                          "additional_information": {
                            "description": "Any complementary information about the mission.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "Very complicated to access to the device."
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "case": {
                    "description": "Case description of the customer's situation.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "description": "Service and equipment asked in the change request:\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "service_code": {
                                    "description": "The code of the service.\nThe possible value are :\n- HEATING_ASSESS: Send a heating engineer to evaluate the situation and produce a report giving additional information on the  incident\n- HEATING_INSTALL: Send a heating engineer to install a complete new item (I did not have the item before)\n- HEATING_REPAIR: Send a heating engineer to repair a broken item (this might include parts installation or replacement)\n- HEATING_REPLACE: Send a heating engineer to replace a full / complete existing item with a new one\n- HEATING_TEMPORARY_SOLUTION: Send a heating engineer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- HEATING_MAINTENANCE: Send a heating engineer to regular control (annual/periodic check)\n- HEATING_DETECT: Send a heating engineer to detect the source of the problem\n- CARPENTRY_ASSESS: Send a carpenter to evaluate the situation and produce a report giving additional information on the incident\n- CARPENTRY_INSTALL: Send a carpenter to install a complete new item (I did not have the item before)\n- CARPENTRY_REPAIR: Send a carpenter to repair a broken item (this might include parts installation or replacement)\n- CARPENTRY_REPLACE: Send a carpenter to replace a full / complete existing item with a new one\n- CARPENTRY_TEMPORARY_SOLUTION: Send a carpenter to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- CARPENTRY_MAINTENANCE: Send a carpenter to regular control (annual/periodic check)\n- EXTERNAL_DRAINAGE_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident on an external drainage situation\n- EXTERNAL_DRAINAGE_INSTALL: Send a plumber to install a complete new item (I did not have the item before) on an external  drainage situation\n- EXTERNAL_DRAINAGE_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement) on an external drainage situation\n- EXTERNAL_DRAINAGE_REPLACE: Send a plumber to replace a full / complete existing item with a new one on an external drainage situation\n- EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident on an external drainage situation\n- EXTERNAL_DRAINAGE_MAINTENANCE: Send a plumber to regular control (annual/periodic check) on an external drainage situation\n- ELECTRICS_ASSESS: Send an electrician to evaluate the situation and produce a report giving additional information on the incident\n- ELECTRICS_INSTALL: Send an electrician to install a complete new item (I did not have the item before)\n- ELECTRICS_REPAIR: Send an electrician to repair a broken item (this might include parts installation or replacement)\n- ELECTRICS_REPLACE: Send an electrician to replace a full / complete existing item with a new one\n- ELECTRICS_TEMPORARY_SOLUTION: Send an electrician to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ELECTRICS_MAINTENANCE: Send an electrician to regular control (annual/periodic check)\n- ROOFING_ASSESS: Send a roofer to evaluate the situation and produce a report giving additional information on the incident\n- ROOFING_INSTALL: Send a roofer to install a complete new item (I did not have the item before)\n- ROOFING_REPAIR: Send a roofer to repair a broken item (this might include parts installation or replacement)\n- ROOFING_REPLACE: Send a roofer to replace a full / complete existing item with a new one\n- ROOFING_TEMPORARY_SOLUTION: Send a roofer to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- ROOFING_MAINTENANCE: Send a roofer to regular control (annual/periodic check)\n- GLAZING_ASSESS: Send a glazier to evaluate the situation and produce a report giving additional information on the incident\n- GLAZING_INSTALL: Send a glazier to install a complete new item (I did not have the item before)\n- GLAZING_REPAIR: Send a glazier to repair a broken item (this might include parts installation or replacement)\n- GLAZING_REPLACE: Send a glazier to replace a full / complete existing item with a new one\n- GLAZING_TEMPORARY_SOLUTION: Send a glazier to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- GLAZING_MAINTENANCE: Send a glazier to regular control (annual/periodic check)\n- PESTS_CONTROL: Pests specific. Kills rodents or insects using chemicals, heat or rodenticide sprayed of dispatched around  the house. May require several visits\n- LOCKS_ASSESS: Send a locksmith to evaluate the situation and produce a report giving additional information on the incident\n- LOCKS_INSTALL: Send a locksmith to install a complete new item (I did not have the item before)\n- LOCKS_REPAIR: Send a locksmith to repair a broken item (this might include parts installation or replacement)\n- LOCKS_REPLACE: Send a locksmith to replace a full / complete existing item with a new one\n- LOCKS_TEMPORARY_SOLUTION: Send a locksmith to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- LOCKS_MAINTENANCE: Send a locksmith to regular control (annual/periodic check)\n- PLUMBING_ASSESS: Send a plumber to evaluate the situation and produce a report giving additional information on the incident\n- PLUMBING_INSTALL: Send a plumber to install a complete new item (I did not have the item before)\n- PLUMBING_REPAIR: Send a plumber to repair a broken item (this might include parts installation or replacement)\n- PLUMBING_REPLACE: Send a plumber to replace a full / complete existing item with a new one\n- PLUMBING_TEMPORARY_SOLUTION: Send a plumber to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- PLUMBING_MAINTENANCE: Send a plumber to regular control (annual/periodic check)\n- PLUMBING_DETECT: Send a plumber to detect the source of the problem\n- SECURITY_AGENT_GUARD: Send a security company to secure the home of the customer\n- SECURITY_ASSESS: Send a security company to evaluate the situation and produce a report giving additional information on the incident\n- SECURITY_REPAIR: Send a security company to repair a broken item (this might include parts installation or replacement)\n- SECURITY_REPLACE: Send a security company to replace a full / complete existing item with a new one\n- SECURITY_TEMPORARY_SOLUTION: Send a security company to temporary fix - performed to reduce the level of urgency/severity of a specific incident\n- TECHNICAL_SERVICES_ASSESS: Send a technician to evaluate the situation and produce a report giving additional information on the incident on appliances\n- TECHNICAL_SERVICES_INSTALL: Send a technician to install a complete new item (I did not have the item before) on appliances\n- TECHNICAL_SERVICES_REPAIR: Send a technician to repair a broken item (this might include parts installation or replacement) on appliances\n- TECHNICAL_SERVICES_REPLACE: Send a technician to replace a full / complete existing item with a new one on appliances\n- TECHNICAL_SERVICES_TEMPORARY_SOLUTION: Send a technician to temporary fix - performed to reduce the level of urgency /severity of a specific incident on appliances\n- TECHNICAL_SERVICES_MAINTENANCE: Send a technician to regular control (annual/periodic check) on appliances\n",
                                    "type": "string",
                                    "enum": [
                                      "HEATING_ASSESS",
                                      "HEATING_INSTALL",
                                      "HEATING_REPAIR",
                                      "HEATING_REPLACE",
                                      "HEATING_TEMPORARY_SOLUTION",
                                      "HEATING_MAINTENANCE",
                                      "HEATING_DETECT",
                                      "CARPENTRY_ASSESS",
                                      "CARPENTRY_INSTALL",
                                      "CARPENTRY_REPAIR",
                                      "CARPENTRY_REPLACE",
                                      "CARPENTRY_TEMPORARY_SOLUTION",
                                      "CARPENTRY_MAINTENANCE",
                                      "EXTERNAL_DRAINAGE_ASSESS",
                                      "EXTERNAL_DRAINAGE_INSTALL",
                                      "EXTERNAL_DRAINAGE_REPAIR",
                                      "EXTERNAL_DRAINAGE_REPLACE",
                                      "EXTERNAL_DRAINAGE_TEMPORARY_SOLUTION",
                                      "EXTERNAL_DRAINAGE_MAINTENANCE",
                                      "ELECTRICS_ASSESS",
                                      "ELECTRICS_INSTALL",
                                      "ELECTRICS_REPAIR",
                                      "ELECTRICS_REPLACE",
                                      "ELECTRICS_TEMPORARY_SOLUTION",
                                      "ELECTRICS_MAINTENANCE",
                                      "ROOFING_ASSESS",
                                      "ROOFING_INSTALL",
                                      "ROOFING_REPAIR",
                                      "ROOFING_REPLACE",
                                      "ROOFING_TEMPORARY_SOLUTION",
                                      "ROOFING_MAINTENANCE",
                                      "GLAZING_ASSESS",
                                      "GLAZING_INSTALL",
                                      "GLAZING_REPAIR",
                                      "GLAZING_REPLACE",
                                      "GLAZING_TEMPORARY_SOLUTION",
                                      "GLAZING_MAINTENANCE",
                                      "PESTS_CONTROL",
                                      "LOCKS_ASSESS",
                                      "LOCKS_INSTALL",
                                      "LOCKS_REPAIR",
                                      "LOCKS_REPLACE",
                                      "LOCKS_TEMPORARY_SOLUTION",
                                      "LOCKS_MAINTENANCE",
                                      "PLUMBING_ASSESS",
                                      "PLUMBING_INSTALL",
                                      "PLUMBING_REPAIR",
                                      "PLUMBING_REPLACE",
                                      "PLUMBING_TEMPORARY_SOLUTION",
                                      "PLUMBING_MAINTENANCE",
                                      "PLUMBING_DETECT",
                                      "SECURITY_AGENT_GUARD",
                                      "SECURITY_ASSESS",
                                      "SECURITY_REPAIR",
                                      "SECURITY_REPLACE",
                                      "SECURITY_TEMPORARY_SOLUTION",
                                      "TECHNICAL_SERVICES_ASSESS",
                                      "TECHNICAL_SERVICES_INSTALL",
                                      "TECHNICAL_SERVICES_REPAIR",
                                      "TECHNICAL_SERVICES_REPLACE",
                                      "TECHNICAL_SERVICES_TEMPORARY_SOLUTION",
                                      "TECHNICAL_SERVICES_MAINTENANCE"
                                    ],
                                    "example": "ELECTRICS_REPAIR"
                                  },
                                  "equipments": {
                                    "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- SEWER_CLEANER_VEHICLE: Sewer cleaner vehicle,\n- DRONE_CONTROL: Drone control,\n- SCAFFOLDING: Scaffolding,\n- LIFT: Lift,\n- MANUAL_FERRET: Manual ferret,\n- DRAIN_CLEARING_MOLE: Drain clearing Mole,\n- HIGH_PRESSURE_JETTING_CLEANING: High pressure Jetting cleaning,\n- HYDROCUREUR_PORTATIF: High pressure Jetting cleaning,\n- THERMAL_CAMERA: Thermal Camera,\n- DRAIN_CCTV: Drain CCTV,\n- LEAK_DETECTION: Leak Detection,\n- ULTRASONIC_LOCATOR: Ultrasonic locator,\n- GAS_LEAK_DETECTION: Gas leak detection,\n- LISTENING_ON_THE_GROUND: Listening on the ground,\n- MINI_DIGGER: Mini digger,\n- COMBUSTION_ANALYZER: Combustion analyzer,\n- UNCLOGGING_PUMP: Unclogging pump,\n",
                                    "type": "array",
                                    "maxItems": 17,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "SEWER_CLEANER_VEHICLE",
                                        "DRONE_CONTROL",
                                        "SCAFFOLDING",
                                        "LIFT",
                                        "MANUAL_FERRET",
                                        "DRAIN_CLEARING_MOLE",
                                        "HIGH_PRESSURE_JETTING_CLEANING",
                                        "HYDROCUREUR_PORTATIF",
                                        "THERMAL_CAMERA",
                                        "DRAIN_CCTV",
                                        "LEAK_DETECTION",
                                        "ULTRASONIC_LOCATOR",
                                        "GAS_LEAK_DETECTION",
                                        "LISTENING_ON_THE_GROUND",
                                        "MINI_DIGGER",
                                        "COMBUSTION_ANALYZER",
                                        "UNCLOGGING_PUMP"
                                      ]
                                    },
                                    "example": [
                                      "HYDROCUREUR_PORTATIF",
                                      "UNCLOGGING_PUMP"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident": {
                            "description": "The whole context of the case.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "cause": {
                                    "description": "The code of the cause.\nThe possible value are :\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DEFROSTING_OF_FROZEN_FOOD: Defrosting of frozen food\n - DETACHED_DRAINPIPE: Detached drainpipe\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - ELECTROCUTION_OF_DOMESTIC_ANIMALS: Electrocution of domestic animals\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOT_WATER_LEAK: Hot water leak\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - INTERNAL_GAS_LEAK: Gas leak\n - KEYS_FORGOTTEN: Keys forgotten\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER : Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - TRAVEL_OR_MEDICAL: Travel or medical\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                                    "type": "string",
                                    "enum": [
                                      "AC_BREAKDOWN",
                                      "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                                      "ALARM_ISSUE",
                                      "ANTS_INFESTATION",
                                      "ANTS_SIGHTING",
                                      "BAD_SMELL",
                                      "BED_BUGS_INFESTATION",
                                      "BEES_INFESTATION",
                                      "BEES_SIGHTING",
                                      "BEETLES_INFESTATION",
                                      "BIRDS_INFESTATION",
                                      "BIRDS_SIGHTING",
                                      "BLOCKAGE",
                                      "BOILER_BREAKDOWN",
                                      "BOILER_LEAK",
                                      "BOILER_PRESSURE_PROBLEM",
                                      "BROKEN_AC",
                                      "BROKEN_AEROTHERMAL_HEAT_PUMP",
                                      "BROKEN_CHIMNEY",
                                      "BROKEN_DOOR_FRAME",
                                      "BROKEN_DOOR_GLAZING",
                                      "BROKEN_DOOR_HANDLE",
                                      "BROKEN_DOOR_LOCK",
                                      "BROKEN_DOOR_PANELS",
                                      "BROKEN_EXTERNAL_BUILDING_WINDOW",
                                      "BROKEN_EXTERNAL_DOOR",
                                      "BROKEN_EXTERNAL_WINDOW",
                                      "BROKEN_FASCIA_BOARD",
                                      "BROKEN_FLASHING",
                                      "BROKEN_GEOTHERMAL_HEAT_PUMP",
                                      "BROKEN_GUTTERING",
                                      "BROKEN_HEAT_PUMP",
                                      "BROKEN_INTERNAL_DOOR",
                                      "BROKEN_INTERNAL_WINDOW",
                                      "BROKEN_KEY",
                                      "BROKEN_OR_DAMAGED_SANITARY_WARE",
                                      "BROKEN_ROOF",
                                      "BROKEN_SKYLIGHT",
                                      "BROKEN_STORAGE_HEATER",
                                      "BROKEN_WINDOW_LOCK",
                                      "CARBON_MONOXIDE_ALERT",
                                      "COCKROACHES_INFESTATION",
                                      "COLD_WATER_LEAK",
                                      "DEFROSTING_OF_FROZEN_FOOD",
                                      "DETACHED_DRAINPIPE",
                                      "DOMESTIC_APPLIANCES_PROBLEM",
                                      "DRAINAGE_LEAK",
                                      "ELECTRIC_HEATER_BREAKDOWN",
                                      "ELECTRIC_HEATER_BROKEN",
                                      "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                                      "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                                      "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                                      "ELECTROCUTION_OF_DOMESTIC_ANIMALS",
                                      "EXTERNAL_GAS_LEAK",
                                      "FIRE_PLACE_PROBLEM",
                                      "FIX_AIR_CONDITIONING_BREAKDOWN",
                                      "FLEAS_INFESTATION",
                                      "FLIES_INFESTATION",
                                      "FLUE_PIPE_LEAK",
                                      "FOX_SIGHTING",
                                      "FOXES_INFESTATION",
                                      "FOXES_NOISE",
                                      "FROZEN_BLOCKED_CONDENSATION_PIPE",
                                      "FROZEN_PIPES",
                                      "GAS_LEAK_BEFORE_METER",
                                      "GAS_LEAK_INVISIBLE",
                                      "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                                      "GREY_SQUIRRELS_INFESTATION",
                                      "GREY_SQUIRRELS_NOISE",
                                      "GREY_SQUIRRELS_SIGHTING",
                                      "HEAT_PUMP_BREAKDOWN",
                                      "HEATING_CONTROLS_FAILURE",
                                      "HEATING_NOT_WARM_ENOUGH",
                                      "HEATING_WONT_TURN_OFF",
                                      "HOT_WATER_LEAK",
                                      "HOUSEBREAKING",
                                      "HOUSEBREAKING_ATTEMPT",
                                      "INTERNAL_GAS_LEAK",
                                      "KEYS_FORGOTTEN",
                                      "LEAKING_ROOF",
                                      "LIGHTS",
                                      "LOCKED_DOOR",
                                      "LOCKED_IN",
                                      "LOCKED_OUT",
                                      "LOOSE_DETACHED_RADIATOR",
                                      "LOSS_OF_WATER",
                                      "LOST_KEYS",
                                      "LOST_KEYS_LOCKED_OUT",
                                      "LOST_ROOF_TILE",
                                      "LPG_LEAK",
                                      "MICE_INFESTATION",
                                      "MICE_NOISE",
                                      "MICE_SIGHTING",
                                      "MOSS_ON_ROOF",
                                      "MOTHS_INFESTATION",
                                      "NATURAL_DISASTER",
                                      "NO_HEATING",
                                      "NO_HEATING_OR_HOT_WATER",
                                      "NO_HOT_WATER",
                                      "NOISY_BOILER_HEATING_SYSTEM",
                                      "OIL_LEAK",
                                      "PARTIAL_HEATING_BREAKDOWN",
                                      "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                                      "PARTIAL_HOT_WATER_BREAKDOWN",
                                      "PARTIAL_HOT_WATER_FAILURE",
                                      "PARTIAL_LOSS_OF_POWER",
                                      "PRESSURE_RELEASE_PIPE_DISCHARGING",
                                      "PRESSURE_RELEASE_PIPE_LEAKING",
                                      "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                                      "RADIATOR_LEAK",
                                      "RATS_INFESTATION",
                                      "RATS_NOISE",
                                      "RATS_SIGHTING",
                                      "RED_SQUIRRELS_INFESTATION",
                                      "RED_SQUIRRELS_NOISE",
                                      "RED_SQUIRRELS_SIGHTING",
                                      "RODENTS_INFESTATION",
                                      "RODENTS_NOISE",
                                      "STOLEN_KEYS",
                                      "STOLEN_KEYS_LOCKED_OUT",
                                      "STORAGE_HEATER_BREAKDOWN",
                                      "TELECOM_BREAKDOWN",
                                      "TOILET_WONT_FLUSH",
                                      "TOTAL_LOSS_OF_POWER",
                                      "TRAVEL_OR_MEDICAL",
                                      "UNDERFLOOR_HEATING_PROBLEM",
                                      "VANDALISM",
                                      "WASPS_HORNETS_INFESTATION",
                                      "WASPS_HORNETS_SIGHTING",
                                      "WATER_LEAK",
                                      "WATER_LEAK_BEFORE_METER",
                                      "WATER_LEAK_INVISIBLE",
                                      "WATER_SHORTAGE",
                                      "WATER_TOO_HOT"
                                    ],
                                    "example": "WATER_LEAK"
                                  },
                                  "sub_cause": {
                                    "description": "Incident subcause.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Leak on general watter supply"
                                  },
                                  "incident_label": {
                                    "description": "Label of the incident.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Basement flooding"
                                  },
                                  "description": {
                                    "description": "Complement to the label",
                                    "type": "string",
                                    "maxLength": 1024,
                                    "example": "Water infiltration via seals around sanitary installations"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident_location": {
                            "description": "Starting location of the provider at the begining of the mission.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "The address of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "The GPS coordinates of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address",
                                  "coordinates"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "intervention_object": {
                            "description": "All details concerning the object or the device concerned by the intervention.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the object requiring intervention. For example:\n- boiler, if it is the device requiring intervention\n- building roof, if the provider has to fix something on the roof\n",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Boiler"
                                  },
                                  "device_information": {
                                    "description": "All information concerning the device used",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "brand": {
                                            "description": "Brand of the device.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Bosch"
                                          },
                                          "model": {
                                            "description": "Model of the device.",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "Bosch TR3500TRO 5 T"
                                          },
                                          "fuel_type": {
                                            "description": "The fuel type of the device.\nThe possible values are:\n- AIR_SOURCE: Air source, used for example by heat pump systems\n- BIOMASS: Biomass\n- ELECTRIC: Electricity\n- GROUND_SOURCE : Ground source, used for example by geothermal systems\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- OIL: Oil\n- SOLAR: Solar source\n- SOLID_FUEL: Solid material like wood, coal, coke..\n- UNKNOWN: used when the information is not available\n",
                                            "type": "string",
                                            "example": "ELECTRIC",
                                            "enum": [
                                              "AIR_SOURCE",
                                              "BIOMASS",
                                              "ELECTRIC",
                                              "GROUND_SOURCE",
                                              "LIQUID_PETROL_GAS",
                                              "NATURAL_GAS",
                                              "OIL",
                                              "SOLAR",
                                              "SOLID_FUEL",
                                              "UNKNOWN"
                                            ]
                                          },
                                          "age": {
                                            "description": "Age of the device, in years, months, days.\nISO 8601 Duration format.\nP5Y8M4D means a Period (P) of 5 Years (Y), 8 month (M) and 4 Days (D)\n",
                                            "type": "string",
                                            "maxLength": 25,
                                            "example": "P5Y8M4D"
                                          },
                                          "reference_number": {
                                            "description": "Reference of the device.\nFor example, \"serial_number\" for Gas appliance.\n",
                                            "type": "string",
                                            "maxLength": 100,
                                            "example": "VF1FW57B052967712"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "physical_caracteristic": {
                                    "description": "All physical information and caracteristic concerning the intervention object",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "sizes": {
                                            "description": "All size information of the intervention object (length, height, width)",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the device.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n| Unit of measure | Description\n| --------------- | -----------\n| m               | meter\n| [in_i]          | inches\n| [ft_i]          | feet\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "m",
                                                      "[in_i]",
                                                      "[ft_i]"
                                                    ],
                                                    "example": "m"
                                                  },
                                                  "length": {
                                                    "description": "Object length.",
                                                    "type": "number",
                                                    "example": 2.8
                                                  },
                                                  "width": {
                                                    "description": "Object width.",
                                                    "type": "number",
                                                    "example": 1.8
                                                  },
                                                  "height": {
                                                    "description": "Object height.",
                                                    "type": "number",
                                                    "example": 2
                                                  },
                                                  "diameter": {
                                                    "description": "Object diameter.",
                                                    "type": "number",
                                                    "example": 0.9
                                                  }
                                                },
                                                "required": [
                                                  "unit"
                                                ]
                                              }
                                            ]
                                          },
                                          "power": {
                                            "description": "The intervention object power.",
                                            "allOf": [
                                              {
                                                "description": "The intervention object power",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the device\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- w: Watt.\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "w"
                                                    ],
                                                    "example": "w"
                                                  },
                                                  "value": {
                                                    "description": "The value of the device power",
                                                    "type": "integer",
                                                    "example": 500
                                                  }
                                                },
                                                "required": [
                                                  "unit",
                                                  "value"
                                                ]
                                              }
                                            ]
                                          },
                                          "surface": {
                                            "description": "The intervention object surface.",
                                            "allOf": [
                                              {
                                                "description": "The intervention object surface",
                                                "properties": {
                                                  "unit": {
                                                    "description": "Unit of measure of the intervention object surface\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- m2: Meter square,\n- [sin_i]: square inch,\n- [sft_i]: square feet.\n",
                                                    "type": "string",
                                                    "enum": [
                                                      "m2",
                                                      "[sin_i]",
                                                      "[sft_i]"
                                                    ],
                                                    "example": "m2"
                                                  },
                                                  "value": {
                                                    "description": "The value of the intervention object surface",
                                                    "type": "integer",
                                                    "example": 100
                                                  }
                                                },
                                                "required": [
                                                  "unit",
                                                  "value"
                                                ]
                                              }
                                            ]
                                          },
                                          "number_of_storeys": {
                                            "description": "Number of storeys where the intervention object is located.",
                                            "type": "integer",
                                            "example": 4
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            ]
                          },
                          "appointment_at": {
                            "description": "The appointment date & time.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:21:26Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "person_on_site": {
                    "description": "Contact of the person on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "title": {
                            "description": "The title of the contact, its civility.\nThe possible values are:\n- MR\n- MS: Ms\n- MISS: Miss\n- DR: Doctor\n- PR: Professor\n- MRS: Mrs\n- MASTER: Master\n- LADY: Lady\n- SIR: Sir\n- LORD: Lord\n- REVEREND: Reverend\n- SISTER: Sister\n",
                            "type": "string",
                            "enum": [
                              "MR",
                              "MS",
                              "MISS",
                              "DR",
                              "PR",
                              "MRS",
                              "MASTER",
                              "LADY",
                              "SIR",
                              "LORD",
                              "REVEREND",
                              "SISTER"
                            ],
                            "example": "MR"
                          },
                          "first_name": {
                            "description": "The first name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Eric"
                          },
                          "last_name": {
                            "description": "The last name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Dubois"
                          },
                          "phone_number": {
                            "description": "The phone number of the contact (prefix included).",
                            "type": "string",
                            "maxLength": 20,
                            "example": "+33601010101"
                          }
                        },
                        "required": [
                          "last_name"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission report.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission report sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.missions.mission_reports.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.missions.mission_reports.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/orders": {
      "post": {
        "summary": "Create and store an order.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "description": "Unique final order identifier.",
                    "type": "string",
                    "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                    "readOnly": true,
                    "maxLength": 150
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                    "maxLength": 2000
                  },
                  "agent": {
                    "description": "The agent information.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "agent_scope": {
                            "description": "The scope of the agent that create the order.",
                            "type": "string",
                            "example": "HOME/DARTY/France",
                            "maxLength": 150
                          },
                          "agent_reference": {
                            "description": "The agent reference.",
                            "type": "string",
                            "example": "QS23ZED4",
                            "maxLength": 150
                          },
                          "agency_reference": {
                            "description": "The agency reference.",
                            "type": "string",
                            "example": "AGC_007_NORD",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  },
                  "customer": {
                    "description": "Customer information.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Customer information.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility.",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 100
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Doe"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              }
                            }
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "en",
                                "maxLength": 5
                              },
                              "phone": {
                                "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 10
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 50
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ],
                                "example": [
                                  {
                                    "international_prefix": "+33",
                                    "number": "0651201190"
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "example": "150 Avenue de Paris",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "example": "75001",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "example": "Paris",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    }
                                  }
                                ]
                              },
                              "email": {
                                "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "preferred_communication_channel": {
                                "description": "Communication channel on which the person preferred to be contacted.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "example": [
                                  "EMAIL",
                                  "SMS"
                                ]
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "required": [
                          "preferred_communication_channel"
                        ]
                      }
                    ]
                  },
                  "intervention": {
                    "description": "The information of the intervention",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Intervention information.",
                        "properties": {
                          "additional_information": {
                            "description": "Additional information about the intervention.",
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Additional information regarding the intervention",
                                "properties": {
                                  "description": {
                                    "description": "Additional information provided by the customer.",
                                    "type": "string",
                                    "example": "I have a leaky faucet",
                                    "maxLength": 2000
                                  }
                                }
                              }
                            ]
                          },
                          "address": {
                            "description": "Postal address",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "150 Avenue de Paris",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                }
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Intervention coordinates",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    ]
                  },
                  "incident": {
                    "description": "The incident of the order.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cause": {
                            "description": "The code of the cause.\nThe possible value are :\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - HOT_WATER_LEAK: Hot water leak\n - INTERNAL_GAS_LEAK: Gas leak\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER : Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                            "type": "string",
                            "enum": [
                              "AC_BREAKDOWN",
                              "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                              "ALARM_ISSUE",
                              "ANTS_INFESTATION",
                              "ANTS_SIGHTING",
                              "BAD_SMELL",
                              "BED_BUGS_INFESTATION",
                              "BEES_INFESTATION",
                              "BEES_SIGHTING",
                              "BEETLES_INFESTATION",
                              "BIRDS_INFESTATION",
                              "BIRDS_SIGHTING",
                              "BLOCKAGE",
                              "BOILER_BREAKDOWN",
                              "BOILER_LEAK",
                              "BOILER_PRESSURE_PROBLEM",
                              "BROKEN_AC",
                              "BROKEN_AEROTHERMAL_HEAT_PUMP",
                              "BROKEN_CHIMNEY",
                              "BROKEN_DOOR_FRAME",
                              "BROKEN_DOOR_GLAZING",
                              "BROKEN_DOOR_HANDLE",
                              "BROKEN_DOOR_LOCK",
                              "BROKEN_DOOR_PANELS",
                              "BROKEN_EXTERNAL_BUILDING_WINDOW",
                              "BROKEN_EXTERNAL_DOOR",
                              "BROKEN_EXTERNAL_WINDOW",
                              "BROKEN_FASCIA_BOARD",
                              "BROKEN_FLASHING",
                              "BROKEN_GEOTHERMAL_HEAT_PUMP",
                              "BROKEN_GUTTERING",
                              "BROKEN_HEAT_PUMP",
                              "BROKEN_INTERNAL_DOOR",
                              "BROKEN_INTERNAL_WINDOW",
                              "BROKEN_KEY",
                              "BROKEN_OR_DAMAGED_SANITARY_WARE",
                              "BROKEN_ROOF",
                              "BROKEN_SKYLIGHT",
                              "BROKEN_STORAGE_HEATER",
                              "BROKEN_WINDOW_LOCK",
                              "CARBON_MONOXIDE_ALERT",
                              "COCKROACHES_INFESTATION",
                              "COLD_WATER_LEAK",
                              "DOMESTIC_APPLIANCES_PROBLEM",
                              "DRAINAGE_LEAK",
                              "ELECTRIC_HEATER_BREAKDOWN",
                              "ELECTRIC_HEATER_BROKEN",
                              "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                              "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                              "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                              "EXTERNAL_GAS_LEAK",
                              "FIRE_PLACE_PROBLEM",
                              "FIX_AIR_CONDITIONING_BREAKDOWN",
                              "FLEAS_INFESTATION",
                              "FLIES_INFESTATION",
                              "FLUE_PIPE_LEAK",
                              "FOX_SIGHTING",
                              "FOXES_INFESTATION",
                              "FOXES_NOISE",
                              "FROZEN_BLOCKED_CONDENSATION_PIPE",
                              "FROZEN_PIPES",
                              "GAS_LEAK_BEFORE_METER",
                              "GAS_LEAK_INVISIBLE",
                              "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                              "GREY_SQUIRRELS_INFESTATION",
                              "GREY_SQUIRRELS_NOISE",
                              "GREY_SQUIRRELS_SIGHTING",
                              "HEAT_PUMP_BREAKDOWN",
                              "HEATING_CONTROLS_FAILURE",
                              "HEATING_NOT_WARM_ENOUGH",
                              "HEATING_WONT_TURN_OFF",
                              "HOUSEBREAKING",
                              "HOUSEBREAKING_ATTEMPT",
                              "HOT_WATER_LEAK",
                              "INTERNAL_GAS_LEAK",
                              "LEAKING_ROOF",
                              "LIGHTS",
                              "LOCKED_DOOR",
                              "LOCKED_IN",
                              "LOCKED_OUT",
                              "LOOSE_DETACHED_RADIATOR",
                              "LOSS_OF_WATER",
                              "LOST_KEYS",
                              "LOST_KEYS_LOCKED_OUT",
                              "LOST_ROOF_TILE",
                              "LPG_LEAK",
                              "MICE_INFESTATION",
                              "MICE_NOISE",
                              "MICE_SIGHTING",
                              "MOSS_ON_ROOF",
                              "MOTHS_INFESTATION",
                              "NATURAL_DISASTER",
                              "NO_HEATING",
                              "NO_HEATING_OR_HOT_WATER",
                              "NO_HOT_WATER",
                              "NOISY_BOILER_HEATING_SYSTEM",
                              "OIL_LEAK",
                              "PARTIAL_HEATING_BREAKDOWN",
                              "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                              "PARTIAL_HOT_WATER_BREAKDOWN",
                              "PARTIAL_HOT_WATER_FAILURE",
                              "PARTIAL_LOSS_OF_POWER",
                              "PRESSURE_RELEASE_PIPE_DISCHARGING",
                              "PRESSURE_RELEASE_PIPE_LEAKING",
                              "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                              "RADIATOR_LEAK",
                              "RATS_INFESTATION",
                              "RATS_NOISE",
                              "RATS_SIGHTING",
                              "RED_SQUIRRELS_INFESTATION",
                              "RED_SQUIRRELS_NOISE",
                              "RED_SQUIRRELS_SIGHTING",
                              "RODENTS_INFESTATION",
                              "RODENTS_NOISE",
                              "STOLEN_KEYS",
                              "STOLEN_KEYS_LOCKED_OUT",
                              "STORAGE_HEATER_BREAKDOWN",
                              "TELECOM_BREAKDOWN",
                              "TOILET_WONT_FLUSH",
                              "TOTAL_LOSS_OF_POWER",
                              "UNDERFLOOR_HEATING_PROBLEM",
                              "VANDALISM",
                              "WASPS_HORNETS_INFESTATION",
                              "WASPS_HORNETS_SIGHTING",
                              "WATER_LEAK",
                              "WATER_LEAK_BEFORE_METER",
                              "WATER_LEAK_INVISIBLE",
                              "WATER_SHORTAGE",
                              "WATER_TOO_HOT"
                            ],
                            "example": "WATER_LEAK"
                          }
                        }
                      }
                    ]
                  },
                  "related_service_order_id": {
                    "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                    "type": "string",
                    "format": "uuid",
                    "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                    "maxLength": 150
                  },
                  "origin_case_reference": {
                    "description": "Reference of the case that originates the order.",
                    "type": "string",
                    "example": "1X2D3F",
                    "maxLength": 100
                  },
                  "origin_service_reference": {
                    "description": "Reference of the service that originates the order.",
                    "type": "string",
                    "example": "a1o1X000001SY9eQAG",
                    "maxLength": 100
                  },
                  "description": {
                    "description": "Additional service description.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "In payment of additional spare parts"
                  }
                },
                "required": [
                  "quote_code"
                ]
              }
            }
          },
          "description": "Order information."
        },
        "responses": {
          "201": {
            "description": "Order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "HOME/DARTY/France",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "customer": {
                      "description": "Customer information.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Customer information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Doe"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "intervention": {
                      "description": "The information of the intervention",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Intervention information.",
                          "properties": {
                            "additional_information": {
                              "description": "Additional information about the intervention.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Additional information regarding the intervention",
                                  "properties": {
                                    "description": {
                                      "description": "Additional information provided by the customer.",
                                      "type": "string",
                                      "example": "I have a leaky faucet",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ]
                            },
                            "address": {
                              "description": "Postal address",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "150 Avenue de Paris",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 10
                                    },
                                    "city": {
                                      "description": "City.",
                                      "type": "string",
                                      "example": "Paris",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    }
                                  }
                                }
                              ]
                            },
                            "coordinates": {
                              "description": "Intervention coordinates",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "longitude": {
                                      "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 2.3488
                                    },
                                    "latitude": {
                                      "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 48.85341
                                    }
                                  },
                                  "required": [
                                    "longitude",
                                    "latitude"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "address"
                          ]
                        }
                      ]
                    },
                    "incident": {
                      "description": "The incident of the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cause": {
                              "description": "The code of the cause.\nThe possible value are :\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - HOT_WATER_LEAK: Hot water leak\n - INTERNAL_GAS_LEAK: Gas leak\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER : Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                              "type": "string",
                              "enum": [
                                "AC_BREAKDOWN",
                                "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                                "ALARM_ISSUE",
                                "ANTS_INFESTATION",
                                "ANTS_SIGHTING",
                                "BAD_SMELL",
                                "BED_BUGS_INFESTATION",
                                "BEES_INFESTATION",
                                "BEES_SIGHTING",
                                "BEETLES_INFESTATION",
                                "BIRDS_INFESTATION",
                                "BIRDS_SIGHTING",
                                "BLOCKAGE",
                                "BOILER_BREAKDOWN",
                                "BOILER_LEAK",
                                "BOILER_PRESSURE_PROBLEM",
                                "BROKEN_AC",
                                "BROKEN_AEROTHERMAL_HEAT_PUMP",
                                "BROKEN_CHIMNEY",
                                "BROKEN_DOOR_FRAME",
                                "BROKEN_DOOR_GLAZING",
                                "BROKEN_DOOR_HANDLE",
                                "BROKEN_DOOR_LOCK",
                                "BROKEN_DOOR_PANELS",
                                "BROKEN_EXTERNAL_BUILDING_WINDOW",
                                "BROKEN_EXTERNAL_DOOR",
                                "BROKEN_EXTERNAL_WINDOW",
                                "BROKEN_FASCIA_BOARD",
                                "BROKEN_FLASHING",
                                "BROKEN_GEOTHERMAL_HEAT_PUMP",
                                "BROKEN_GUTTERING",
                                "BROKEN_HEAT_PUMP",
                                "BROKEN_INTERNAL_DOOR",
                                "BROKEN_INTERNAL_WINDOW",
                                "BROKEN_KEY",
                                "BROKEN_OR_DAMAGED_SANITARY_WARE",
                                "BROKEN_ROOF",
                                "BROKEN_SKYLIGHT",
                                "BROKEN_STORAGE_HEATER",
                                "BROKEN_WINDOW_LOCK",
                                "CARBON_MONOXIDE_ALERT",
                                "COCKROACHES_INFESTATION",
                                "COLD_WATER_LEAK",
                                "DOMESTIC_APPLIANCES_PROBLEM",
                                "DRAINAGE_LEAK",
                                "ELECTRIC_HEATER_BREAKDOWN",
                                "ELECTRIC_HEATER_BROKEN",
                                "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                                "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                                "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                                "EXTERNAL_GAS_LEAK",
                                "FIRE_PLACE_PROBLEM",
                                "FIX_AIR_CONDITIONING_BREAKDOWN",
                                "FLEAS_INFESTATION",
                                "FLIES_INFESTATION",
                                "FLUE_PIPE_LEAK",
                                "FOX_SIGHTING",
                                "FOXES_INFESTATION",
                                "FOXES_NOISE",
                                "FROZEN_BLOCKED_CONDENSATION_PIPE",
                                "FROZEN_PIPES",
                                "GAS_LEAK_BEFORE_METER",
                                "GAS_LEAK_INVISIBLE",
                                "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                                "GREY_SQUIRRELS_INFESTATION",
                                "GREY_SQUIRRELS_NOISE",
                                "GREY_SQUIRRELS_SIGHTING",
                                "HEAT_PUMP_BREAKDOWN",
                                "HEATING_CONTROLS_FAILURE",
                                "HEATING_NOT_WARM_ENOUGH",
                                "HEATING_WONT_TURN_OFF",
                                "HOUSEBREAKING",
                                "HOUSEBREAKING_ATTEMPT",
                                "HOT_WATER_LEAK",
                                "INTERNAL_GAS_LEAK",
                                "LEAKING_ROOF",
                                "LIGHTS",
                                "LOCKED_DOOR",
                                "LOCKED_IN",
                                "LOCKED_OUT",
                                "LOOSE_DETACHED_RADIATOR",
                                "LOSS_OF_WATER",
                                "LOST_KEYS",
                                "LOST_KEYS_LOCKED_OUT",
                                "LOST_ROOF_TILE",
                                "LPG_LEAK",
                                "MICE_INFESTATION",
                                "MICE_NOISE",
                                "MICE_SIGHTING",
                                "MOSS_ON_ROOF",
                                "MOTHS_INFESTATION",
                                "NATURAL_DISASTER",
                                "NO_HEATING",
                                "NO_HEATING_OR_HOT_WATER",
                                "NO_HOT_WATER",
                                "NOISY_BOILER_HEATING_SYSTEM",
                                "OIL_LEAK",
                                "PARTIAL_HEATING_BREAKDOWN",
                                "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                                "PARTIAL_HOT_WATER_BREAKDOWN",
                                "PARTIAL_HOT_WATER_FAILURE",
                                "PARTIAL_LOSS_OF_POWER",
                                "PRESSURE_RELEASE_PIPE_DISCHARGING",
                                "PRESSURE_RELEASE_PIPE_LEAKING",
                                "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                                "RADIATOR_LEAK",
                                "RATS_INFESTATION",
                                "RATS_NOISE",
                                "RATS_SIGHTING",
                                "RED_SQUIRRELS_INFESTATION",
                                "RED_SQUIRRELS_NOISE",
                                "RED_SQUIRRELS_SIGHTING",
                                "RODENTS_INFESTATION",
                                "RODENTS_NOISE",
                                "STOLEN_KEYS",
                                "STOLEN_KEYS_LOCKED_OUT",
                                "STORAGE_HEATER_BREAKDOWN",
                                "TELECOM_BREAKDOWN",
                                "TOILET_WONT_FLUSH",
                                "TOTAL_LOSS_OF_POWER",
                                "UNDERFLOOR_HEATING_PROBLEM",
                                "VANDALISM",
                                "WASPS_HORNETS_INFESTATION",
                                "WASPS_HORNETS_SIGHTING",
                                "WATER_LEAK",
                                "WATER_LEAK_BEFORE_METER",
                                "WATER_LEAK_INVISIBLE",
                                "WATER_SHORTAGE",
                                "WATER_TOO_HOT"
                              ],
                              "example": "WATER_LEAK"
                            }
                          }
                        }
                      ]
                    },
                    "related_service_order_id": {
                      "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    },
                    "origin_case_reference": {
                      "description": "Reference of the case that originates the order.",
                      "type": "string",
                      "example": "1X2D3F",
                      "maxLength": 100
                    },
                    "origin_service_reference": {
                      "description": "Reference of the service that originates the order.",
                      "type": "string",
                      "example": "a1o1X000001SY9eQAG",
                      "maxLength": 100
                    },
                    "description": {
                      "description": "Additional service description.",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "In payment of additional spare parts"
                    }
                  },
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/orders/{order_id}": {
      "get": {
        "summary": "Retrieve order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "HOME/DARTY/France",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "customer": {
                      "description": "Customer information.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Customer information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Doe"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "intervention": {
                      "description": "The information of the intervention",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Intervention information.",
                          "properties": {
                            "additional_information": {
                              "description": "Additional information about the intervention.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Additional information regarding the intervention",
                                  "properties": {
                                    "description": {
                                      "description": "Additional information provided by the customer.",
                                      "type": "string",
                                      "example": "I have a leaky faucet",
                                      "maxLength": 2000
                                    }
                                  }
                                }
                              ]
                            },
                            "address": {
                              "description": "Postal address",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "150 Avenue de Paris",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 10
                                    },
                                    "city": {
                                      "description": "City.",
                                      "type": "string",
                                      "example": "Paris",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    }
                                  }
                                }
                              ]
                            },
                            "coordinates": {
                              "description": "Intervention coordinates",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "longitude": {
                                      "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 2.3488
                                    },
                                    "latitude": {
                                      "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 48.85341
                                    }
                                  },
                                  "required": [
                                    "longitude",
                                    "latitude"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "address"
                          ]
                        }
                      ]
                    },
                    "incident": {
                      "description": "The incident of the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cause": {
                              "description": "The code of the cause.\nThe possible value are :\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - HOT_WATER_LEAK: Hot water leak\n - INTERNAL_GAS_LEAK: Gas leak\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER : Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                              "type": "string",
                              "enum": [
                                "AC_BREAKDOWN",
                                "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                                "ALARM_ISSUE",
                                "ANTS_INFESTATION",
                                "ANTS_SIGHTING",
                                "BAD_SMELL",
                                "BED_BUGS_INFESTATION",
                                "BEES_INFESTATION",
                                "BEES_SIGHTING",
                                "BEETLES_INFESTATION",
                                "BIRDS_INFESTATION",
                                "BIRDS_SIGHTING",
                                "BLOCKAGE",
                                "BOILER_BREAKDOWN",
                                "BOILER_LEAK",
                                "BOILER_PRESSURE_PROBLEM",
                                "BROKEN_AC",
                                "BROKEN_AEROTHERMAL_HEAT_PUMP",
                                "BROKEN_CHIMNEY",
                                "BROKEN_DOOR_FRAME",
                                "BROKEN_DOOR_GLAZING",
                                "BROKEN_DOOR_HANDLE",
                                "BROKEN_DOOR_LOCK",
                                "BROKEN_DOOR_PANELS",
                                "BROKEN_EXTERNAL_BUILDING_WINDOW",
                                "BROKEN_EXTERNAL_DOOR",
                                "BROKEN_EXTERNAL_WINDOW",
                                "BROKEN_FASCIA_BOARD",
                                "BROKEN_FLASHING",
                                "BROKEN_GEOTHERMAL_HEAT_PUMP",
                                "BROKEN_GUTTERING",
                                "BROKEN_HEAT_PUMP",
                                "BROKEN_INTERNAL_DOOR",
                                "BROKEN_INTERNAL_WINDOW",
                                "BROKEN_KEY",
                                "BROKEN_OR_DAMAGED_SANITARY_WARE",
                                "BROKEN_ROOF",
                                "BROKEN_SKYLIGHT",
                                "BROKEN_STORAGE_HEATER",
                                "BROKEN_WINDOW_LOCK",
                                "CARBON_MONOXIDE_ALERT",
                                "COCKROACHES_INFESTATION",
                                "COLD_WATER_LEAK",
                                "DOMESTIC_APPLIANCES_PROBLEM",
                                "DRAINAGE_LEAK",
                                "ELECTRIC_HEATER_BREAKDOWN",
                                "ELECTRIC_HEATER_BROKEN",
                                "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                                "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                                "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                                "EXTERNAL_GAS_LEAK",
                                "FIRE_PLACE_PROBLEM",
                                "FIX_AIR_CONDITIONING_BREAKDOWN",
                                "FLEAS_INFESTATION",
                                "FLIES_INFESTATION",
                                "FLUE_PIPE_LEAK",
                                "FOX_SIGHTING",
                                "FOXES_INFESTATION",
                                "FOXES_NOISE",
                                "FROZEN_BLOCKED_CONDENSATION_PIPE",
                                "FROZEN_PIPES",
                                "GAS_LEAK_BEFORE_METER",
                                "GAS_LEAK_INVISIBLE",
                                "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                                "GREY_SQUIRRELS_INFESTATION",
                                "GREY_SQUIRRELS_NOISE",
                                "GREY_SQUIRRELS_SIGHTING",
                                "HEAT_PUMP_BREAKDOWN",
                                "HEATING_CONTROLS_FAILURE",
                                "HEATING_NOT_WARM_ENOUGH",
                                "HEATING_WONT_TURN_OFF",
                                "HOUSEBREAKING",
                                "HOUSEBREAKING_ATTEMPT",
                                "HOT_WATER_LEAK",
                                "INTERNAL_GAS_LEAK",
                                "LEAKING_ROOF",
                                "LIGHTS",
                                "LOCKED_DOOR",
                                "LOCKED_IN",
                                "LOCKED_OUT",
                                "LOOSE_DETACHED_RADIATOR",
                                "LOSS_OF_WATER",
                                "LOST_KEYS",
                                "LOST_KEYS_LOCKED_OUT",
                                "LOST_ROOF_TILE",
                                "LPG_LEAK",
                                "MICE_INFESTATION",
                                "MICE_NOISE",
                                "MICE_SIGHTING",
                                "MOSS_ON_ROOF",
                                "MOTHS_INFESTATION",
                                "NATURAL_DISASTER",
                                "NO_HEATING",
                                "NO_HEATING_OR_HOT_WATER",
                                "NO_HOT_WATER",
                                "NOISY_BOILER_HEATING_SYSTEM",
                                "OIL_LEAK",
                                "PARTIAL_HEATING_BREAKDOWN",
                                "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                                "PARTIAL_HOT_WATER_BREAKDOWN",
                                "PARTIAL_HOT_WATER_FAILURE",
                                "PARTIAL_LOSS_OF_POWER",
                                "PRESSURE_RELEASE_PIPE_DISCHARGING",
                                "PRESSURE_RELEASE_PIPE_LEAKING",
                                "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                                "RADIATOR_LEAK",
                                "RATS_INFESTATION",
                                "RATS_NOISE",
                                "RATS_SIGHTING",
                                "RED_SQUIRRELS_INFESTATION",
                                "RED_SQUIRRELS_NOISE",
                                "RED_SQUIRRELS_SIGHTING",
                                "RODENTS_INFESTATION",
                                "RODENTS_NOISE",
                                "STOLEN_KEYS",
                                "STOLEN_KEYS_LOCKED_OUT",
                                "STORAGE_HEATER_BREAKDOWN",
                                "TELECOM_BREAKDOWN",
                                "TOILET_WONT_FLUSH",
                                "TOTAL_LOSS_OF_POWER",
                                "UNDERFLOOR_HEATING_PROBLEM",
                                "VANDALISM",
                                "WASPS_HORNETS_INFESTATION",
                                "WASPS_HORNETS_SIGHTING",
                                "WATER_LEAK",
                                "WATER_LEAK_BEFORE_METER",
                                "WATER_LEAK_INVISIBLE",
                                "WATER_SHORTAGE",
                                "WATER_TOO_HOT"
                              ],
                              "example": "WATER_LEAK"
                            }
                          }
                        }
                      ]
                    },
                    "related_service_order_id": {
                      "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    },
                    "origin_case_reference": {
                      "description": "Reference of the case that originates the order.",
                      "type": "string",
                      "example": "1X2D3F",
                      "maxLength": 100
                    },
                    "origin_service_reference": {
                      "description": "Reference of the service that originates the order.",
                      "type": "string",
                      "example": "a1o1X000001SY9eQAG",
                      "maxLength": 100
                    },
                    "description": {
                      "description": "Additional service description.",
                      "type": "string",
                      "maxLength": 2000,
                      "example": "In payment of additional spare parts"
                    }
                  },
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.orders.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/quotes_requests": {
      "post": {
        "summary": "Gets quotes for domestic services.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 5
            }
          },
          {
            "name": "x-quote-mode",
            "description": "Quote mode, can be used to get a quote on draft or test mode.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "TEST",
                "LIVE"
              ],
              "default": "LIVE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service_criteria": {
                    "description": "Service criteria.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Service criteria.",
                        "properties": {
                          "code": {
                            "description": "The service code.",
                            "type": "string",
                            "maxLength": 150,
                            "example": "KV5-33"
                          },
                          "catalog": {
                            "allOf": [
                              {
                                "description": "The Catalog information.",
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Catalog code.",
                                    "type": "string",
                                    "maxLength": 150,
                                    "example": "PRTNCATALOG"
                                  },
                                  "version": {
                                    "description": "Catalog version.",
                                    "type": "string",
                                    "maxLength": 10,
                                    "example": "2"
                                  }
                                },
                                "required": [
                                  "code",
                                  "version"
                                ]
                              }
                            ]
                          },
                          "intermediary_code": {
                            "description": "Code of business intermediary.",
                            "type": "string",
                            "maxLength": 150,
                            "example": "KYZ451"
                          }
                        },
                        "required": [
                          "catalog"
                        ]
                      }
                    ]
                  },
                  "customer": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Customer information.",
                        "properties": {
                          "customer_type": {
                            "description": "Customer type.",
                            "type": "string",
                            "enum": [
                              "INDIVIDUAL"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "accommodation": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Accomodation information.",
                        "properties": {
                          "housing_nature": {
                            "description": "Housing nature.",
                            "type": "string",
                            "enum": [
                              "INDIVIDUAL"
                            ]
                          },
                          "housing_age": {
                            "description": "Housing age\nISO 8601 format (P5Y8M4D).\n",
                            "type": "string",
                            "maxLength": 10,
                            "example": "P2Y"
                          },
                          "address": {
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Address of intervention.",
                                "properties": {
                                  "post_code": {
                                    "description": "Postal code where the intervention will take place.",
                                    "type": "string",
                                    "maxLength": 10,
                                    "example": "75008"
                                  },
                                  "country": {
                                    "description": "Country of intervention, ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "maxLength": 2,
                                    "minLength": 2
                                  }
                                },
                                "required": [
                                  "post_code",
                                  "country"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "to_schedule_on": {
                    "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ)\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-03-19T10:00:00Z"
                  },
                  "quote_code": {
                    "description": "Existing Quote code. If the Quote code is provided then the price will be updated based on this quote code.\n",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                  },
                  "price_before_discount_excl_tax": {
                    "description": "Price of the service excluding taxes, numeric with 2 decimals.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ],
                    "example": {
                      "value": 81.2,
                      "currency": "EUR"
                    }
                  },
                  "promo_code": {
                    "description": "Promotion code.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "PROMOCODE2020"
                  }
                }
              }
            }
          },
          "description": "Content of quotes request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quote": {
                      "description": "The quote.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quote_code": {
                              "description": "Quote code.",
                              "type": "string",
                              "maxLength": 2000,
                              "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                            },
                            "quote_expire_at": {
                              "description": "Date and time of quotes expiration - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-03-22T10:59:00Z"
                            },
                            "service": {
                              "description": "The service covered by the quote.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "trade": {
                                      "description": "The trade of the service.",
                                      "type": "string",
                                      "enum": [
                                        "CARPENTRY",
                                        "ELECTRICS",
                                        "EXTERNAL_DRAINAGE",
                                        "FINANCE",
                                        "GLAZING",
                                        "HEATING",
                                        "LOCKS",
                                        "OTHER",
                                        "PESTS_CONTROL",
                                        "PLUMBING",
                                        "ROOFING",
                                        "SECURITY",
                                        "TECHNICAL_SERVICES"
                                      ],
                                      "example": "PLUMBING"
                                    },
                                    "code": {
                                      "description": "The code of the service.",
                                      "type": "string",
                                      "maxLength": 150,
                                      "example": "KV5-33"
                                    },
                                    "name": {
                                      "description": "The service name",
                                      "type": "string",
                                      "maxLength": 150,
                                      "example": "Changing a faucet joint"
                                    },
                                    "description": {
                                      "description": "Quote marketing description",
                                      "type": "string",
                                      "maxLength": 1000,
                                      "example": "Advanced for more guarantees."
                                    },
                                    "instruction": {
                                      "description": "Quote marketing instruction",
                                      "type": "string",
                                      "maxLength": 1000,
                                      "example": "Explanation of what is done during the intervention."
                                    },
                                    "advice": {
                                      "description": "Quote marketing advice",
                                      "type": "string",
                                      "maxLength": 1000,
                                      "example": "Tips while waiting for the intervention."
                                    },
                                    "components": {
                                      "description": "Set of component included in the service.",
                                      "type": "array",
                                      "maxItems": 20,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "The name of the sub service.",
                                            "type": "string",
                                            "maxLength": 150,
                                            "example": "Deplacement."
                                          },
                                          "description": {
                                            "description": "Description.",
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "Customer assistance for changing is faucet joint."
                                          },
                                          "tax_amount": {
                                            "description": "Total amount of taxes applied to the service component, numeric with 2 decimals.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "value": {
                                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                                    "type": "number",
                                                    "example": 199.99
                                                  },
                                                  "currency": {
                                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 3,
                                                    "example": "EUR"
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "currency"
                                                ]
                                              }
                                            ],
                                            "example": {
                                              "value": 20.3,
                                              "currency": "EUR"
                                            }
                                          },
                                          "price_excl_tax": {
                                            "description": "Price of the service component excluding taxes, numeric with 2 decimals.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "value": {
                                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                                    "type": "number",
                                                    "example": 199.99
                                                  },
                                                  "currency": {
                                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 3,
                                                    "example": "EUR"
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "currency"
                                                ]
                                              }
                                            ],
                                            "example": {
                                              "value": 81.2,
                                              "currency": "EUR"
                                            }
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "price_excl_tax"
                                        ]
                                      }
                                    },
                                    "availability": {
                                      "description": "Time slot where the service can be executed.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "days_of_week": {
                                              "description": "List of days on which the service is available.",
                                              "type": "array",
                                              "maxItems": 7,
                                              "items": {
                                                "type": "string",
                                                "uniqueItems": true,
                                                "enum": [
                                                  "MONDAY",
                                                  "TUESDAY",
                                                  "WEDNESDAY",
                                                  "THURSDAY",
                                                  "FRIDAY",
                                                  "SATURDAY",
                                                  "SUNDAY"
                                                ]
                                              },
                                              "example": [
                                                "MONDAY",
                                                "TUESDAY",
                                                "THURSDAY"
                                              ]
                                            },
                                            "public_holiday": {
                                              "description": "Public holiday on which the service is available.\nISO 8601 format (YYYY-MM-DD).\n",
                                              "type": "array",
                                              "maxItems": 50,
                                              "items": {
                                                "type": "string",
                                                "format": "date"
                                              },
                                              "example": [
                                                "2019-04-22",
                                                "2019-05-01"
                                              ]
                                            },
                                            "start_time": {
                                              "description": "The time when a service can be available per day.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                              "type": "string",
                                              "maxLength": 20,
                                              "format": "datetime",
                                              "example": "2019-05-15T08:00:00Z"
                                            },
                                            "end_time": {
                                              "description": "The time when a service is no more available per day.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                              "type": "string",
                                              "maxLength": 20,
                                              "format": "datetime",
                                              "example": "2019-05-15T13:00:00Z"
                                            },
                                            "minimum_hours_to_start": {
                                              "description": "Earliest possible time when the service can be operate.",
                                              "type": "number",
                                              "example": 2
                                            },
                                            "maximum_days_to_start": {
                                              "description": "The Latest possible date limit for requesting the service.",
                                              "type": "number",
                                              "example": 60
                                            },
                                            "is_emergency_service": {
                                              "description": "True if the service could be ordered in emergency, false if not.",
                                              "type": "boolean",
                                              "example": false
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "attachments": {
                                      "description": "List of document linked to the Quote.",
                                      "type": "array",
                                      "maxItems": 20,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Attached document name.",
                                            "type": "string",
                                            "maxLength": 150,
                                            "example": "Standard form contract"
                                          },
                                          "content_url": {
                                            "description": "URL to download the document.",
                                            "type": "string",
                                            "maxLength": 1000,
                                            "example": "http://website.com/mydocument"
                                          },
                                          "type": {
                                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                            "type": "string",
                                            "maxLength": 150,
                                            "example": "TERMS_AND_CONDITIONS"
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "content_url",
                                          "type"
                                        ]
                                      }
                                    },
                                    "consents": {
                                      "description": "List of needed customer consents.",
                                      "type": "array",
                                      "maxItems": 20,
                                      "items": {
                                        "type": "object",
                                        "description": "Consent to be requested to the customer.",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "description": "Disclaimer to display to the customer.",
                                            "properties": {
                                              "code": {
                                                "description": "Code.",
                                                "type": "string",
                                                "maxLength": 150
                                              },
                                              "text": {
                                                "description": "Text.",
                                                "type": "string",
                                                "maxLength": 2000
                                              },
                                              "type": {
                                                "description": "The type of desclaimer.",
                                                "type": "string",
                                                "enum": [
                                                  "PERSONAL_DATA",
                                                  "COMMUNICATION_CHANNEL"
                                                ],
                                                "example": "PERSONAL_DATA"
                                              }
                                            },
                                            "required": [
                                              "code",
                                              "text"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "is_mandatory": {
                                                "description": "Indicates if the consent is mandatory.",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        ],
                                        "required": [
                                          "is_mandatory"
                                        ]
                                      }
                                    },
                                    "disclaimers": {
                                      "description": "List of disclaimers to display to the customer.",
                                      "type": "array",
                                      "maxItems": 20,
                                      "items": {
                                        "type": "object",
                                        "description": "Disclaimer to display to the customer.",
                                        "properties": {
                                          "code": {
                                            "description": "Code.",
                                            "type": "string",
                                            "maxLength": 150
                                          },
                                          "text": {
                                            "description": "Text.",
                                            "type": "string",
                                            "maxLength": 2000
                                          },
                                          "type": {
                                            "description": "The type of desclaimer.",
                                            "type": "string",
                                            "enum": [
                                              "PERSONAL_DATA",
                                              "COMMUNICATION_CHANNEL"
                                            ],
                                            "example": "PERSONAL_DATA"
                                          }
                                        },
                                        "required": [
                                          "code",
                                          "text"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "components"
                                  ]
                                }
                              ]
                            },
                            "price": {
                              "description": "The price of the Quote.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "total_taxes": {
                                      "description": "Total amount of taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 20,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_before_discount_excl_tax": {
                                      "description": "Price not discounted excluding taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 100,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_before_discount_incl_tax": {
                                      "description": "Price not discounted including taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 120,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_after_discount_excl_tax": {
                                      "description": "Price discounted excluding taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 95,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_after_discount_incl_tax": {
                                      "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 114,
                                        "currency": "EUR"
                                      }
                                    },
                                    "discount_amount": {
                                      "description": "The amount of discount, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 5,
                                        "currency": "EUR"
                                      }
                                    }
                                  },
                                  "required": [
                                    "price_after_discount_incl_tax"
                                  ]
                                }
                              ]
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 20,
                              "items": {
                                "description": "Periodicity of the payment.",
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                    "type": "string",
                                    "maxLength": 25,
                                    "example": "R1/P1D"
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "Monthly."
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "service",
                            "quote_code",
                            "price"
                          ]
                        }
                      ]
                    },
                    "payment_modes": {
                      "description": "Payment mode list",
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                        "type": "object",
                        "properties": {
                          "types": {
                            "description": "List of payment mode accepted by the payment service provider (Zuora for example).",
                            "type": "array",
                            "maxItems": 6,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFER",
                                "VIRTUAL_CREDIT_CARD",
                                "SEPA",
                                "PAYPAL"
                              ]
                            }
                          },
                          "payment_channels": {
                            "description": "Channels used in payment.",
                            "type": "array",
                            "maxItems": 3,
                            "items": {
                              "type": "string",
                              "enum": [
                                "DIGITAL",
                                "PHONE",
                                "AGENT"
                              ]
                            }
                          },
                          "provider": {
                            "allOf": [
                              {
                                "description": "Payment service provider.",
                                "type": "object",
                                "properties": {
                                  "provider_id": {
                                    "description": "Unique identifier of payment provider.",
                                    "type": "string",
                                    "maxLength": 150
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Zuora"
                                  }
                                },
                                "required": [
                                  "provider_id",
                                  "label"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "types",
                          "provider"
                        ]
                      }
                    }
                  },
                  "required": [
                    "quote"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.quotesrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.quotesrequests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/service_orders": {
      "get": {
        "summary": "Search service orders.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "customer_email",
            "in": "query",
            "description": "The email of the customer.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 320
            }
          },
          {
            "name": "customer_last_name",
            "in": "query",
            "description": "The last name of the customer.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "customer_birth_date",
            "in": "query",
            "description": "The birth date of the customer - ISO 8601 format (YYYY-MM-DD).",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "name": "service_order_number",
            "in": "query",
            "description": "The service order number.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "name": "agent_scope",
            "in": "query",
            "description": "The agent scope (the search will return all the service order created on this scope and its children).",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "expire_in",
            "in": "query",
            "description": "The number of days from today in witch the service orders are going to expire.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the service orders that matched the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "type": "object",
                    "properties": {
                      "service_order_id": {
                        "description": "Unique final service order identifier.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "a0c4e496-e8ec-4484-9db4-d7e6ed94e406"
                      },
                      "service_order_number": {
                        "description": "Final service number (only exist if service order is not draft).",
                        "type": "string",
                        "maxLength": 150,
                        "example": "AAA111000000064"
                      },
                      "quote_number": {
                        "description": "Draft service order number.",
                        "type": "string",
                        "maxLength": 150,
                        "example": "DRAAA111000000141"
                      },
                      "status": {
                        "description": "Service order's status details.",
                        "type": "string",
                        "enum": [
                          "DRAFT",
                          "ACTIVE",
                          "CANCELLED"
                        ],
                        "example": "ACTIVE"
                      },
                      "customer": {
                        "description": "Service order customer summary.",
                        "allOf": [
                          {
                            "description": "The customer information.",
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "John"
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 100
                              },
                              "email": {
                                "description": "Email address.",
                                "type": "string",
                                "maxLength": 320,
                                "format": "email",
                                "example": "john.doe@example.com"
                              }
                            }
                          }
                        ]
                      },
                      "intervention": {
                        "description": "The information of the intervention",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "1 Avenue France",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "street_address",
                                  "postal_code",
                                  "city",
                                  "country"
                                ]
                              },
                              "coordinates": {
                                "description": "Intervention coordinate",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "longitude": {
                                        "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                        "type": "number",
                                        "example": 2.3488
                                      },
                                      "latitude": {
                                        "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                        "type": "number",
                                        "example": 48.85341
                                      }
                                    },
                                    "required": [
                                      "longitude",
                                      "latitude"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    },
                    "required": [
                      "service_order_id"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      },
      "post": {
        "summary": "Creates service order.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                    "maxLength": 2000
                  },
                  "related_service_order_id": {
                    "description": "The related service order identifier.",
                    "type": "string",
                    "format": "uuid",
                    "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                    "maxLength": 150
                  },
                  "origin_case_reference": {
                    "description": "Reference of the case that originates the order.",
                    "type": "string",
                    "example": "1X2D3F",
                    "maxLength": 100
                  },
                  "origin_service_reference": {
                    "description": "Reference of the service that originates the order.",
                    "type": "string",
                    "example": "a1o1X000001SY9eQAG",
                    "maxLength": 100
                  },
                  "to_schedule_on": {
                    "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ)\n",
                    "type": "string",
                    "maxLength": 20,
                    "format": "date-time",
                    "example": "2019-03-19T10:00:00Z"
                  },
                  "agent": {
                    "description": "The agent information.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "agent_scope": {
                            "description": "The scope of the agent that create the order.",
                            "type": "string",
                            "example": "HOME/DARTY/France",
                            "maxLength": 150
                          },
                          "agent_reference": {
                            "description": "The agent reference.",
                            "type": "string",
                            "example": "QS23ZED4",
                            "maxLength": 150
                          },
                          "agency_reference": {
                            "description": "The agency reference.",
                            "type": "string",
                            "example": "AGC_007_NORD",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  },
                  "customer": {
                    "description": "Customer information.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "The customer information.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 100
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 100
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          },
                          {
                            "properties": {
                              "email": {
                                "description": "Email address.",
                                "type": "string",
                                "maxLength": 320,
                                "format": "email",
                                "example": "john.doe@example.com"
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5,
                                        "example": "+33"
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "651191245"
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "example": "1 Avenue France",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "example": "75001",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "example": "Paris",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "FR",
                                "maxLength": 5
                              },
                              "preferred_communication_channel": {
                                "description": "Communication channel on which the person preferred to be contacted.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "example": [
                                  "EMAIL",
                                  "SMS"
                                ]
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "required": [
                          "email",
                          "phone",
                          "address",
                          "preferred_communication_channel"
                        ]
                      }
                    ]
                  },
                  "consents": {
                    "description": "List of the consents the customer has consented to.",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "description": "Customer consent.",
                      "properties": {
                        "code": {
                          "description": "Code of the consent.",
                          "type": "string",
                          "example": "PHONE",
                          "maxLength": 100
                        },
                        "is_confirmed": {
                          "description": "Indicates if the consent has been confirmed by the customer or not.",
                          "type": "boolean",
                          "example": true
                        }
                      },
                      "required": [
                        "code",
                        "is_confirmed"
                      ]
                    }
                  },
                  "intervention": {
                    "description": "The information of the intervention.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Intervention information.",
                        "properties": {
                          "additional_information": {
                            "description": "Additional information about the intervention.",
                            "allOf": [
                              {
                                "type": "object",
                                "description": "Additional information regarding the intervention",
                                "properties": {
                                  "description": {
                                    "description": "Additional information provided by the customer.",
                                    "type": "string",
                                    "maxLength": 2000,
                                    "example": "I have a leaky faucet"
                                  }
                                }
                              }
                            ]
                          },
                          "address": {
                            "description": "Postal address.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "1 Avenue France",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "street_address",
                                  "postal_code",
                                  "city",
                                  "country"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Intervention coordinate.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    ]
                  },
                  "incident": {
                    "description": "The incident of the order.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cause": {
                            "description": "The code of the cause.\nThe possible value are :\n - AC_BREAKDOWN: air conditioning breakdown\n - AEROTHERMAL_HEAT_PUMP_BREAKDOWN: Aerothermal heat pump breakdown\n - ALARM_ISSUE: Alarm issue\n - ANTS_INFESTATION: Ants infestation\n - ANTS_SIGHTING: Ants sighting\n - BAD_SMELL: Bad smell\n - BED_BUGS_INFESTATION: Bed bugs infestation\n - BEES_INFESTATION: Bees infestation\n - BEES_SIGHTING: Bees sighting\n - BEETLES_INFESTATION: Beetles infestation\n - BIRDS_INFESTATION: Birds infestation\n - BIRDS_SIGHTING: Birds sighting\n - BLOCKAGE: Blockage\n - BOILER_BREAKDOWN: Boiler breakdown\n - BOILER_LEAK: Boiler leak\n - BOILER_PRESSURE_PROBLEM: Boiler pressure problem\n - BROKEN_AC: Broken air conditioning\n - BROKEN_AEROTHERMAL_HEAT_PUMP: Broken aerothermal heat pump\n - BROKEN_CHIMNEY: Broken chimney\n - BROKEN_DOOR_FRAME: Broken door frame\n - BROKEN_DOOR_GLAZING: Broken door glazing\n - BROKEN_DOOR_HANDLE: Broken door handle\n - BROKEN_DOOR_LOCK: Broken door lock\n - BROKEN_DOOR_PANELS: Broken door panel/s\n - BROKEN_EXTERNAL_BUILDING_WINDOW: Broken external building window\n - BROKEN_EXTERNAL_DOOR: Broken external door\n - BROKEN_EXTERNAL_WINDOW: Broken external window\n - BROKEN_FASCIA_BOARD: Broken fascia board\n - BROKEN_FLASHING: Broken flashing\n - BROKEN_GEOTHERMAL_HEAT_PUMP: Broken geothermal heat pump\n - BROKEN_GUTTERING: Broken guttering\n - BROKEN_HEAT_PUMP: Broken heat pump\n - BROKEN_INTERNAL_DOOR: Broken internal door\n - BROKEN_INTERNAL_WINDOW: Broken internal window\n - BROKEN_KEY: Broken key\n - BROKEN_OR_DAMAGED_SANITARY_WARE: Broken or damage sanitary ware\n - BROKEN_ROOF: Broken roof\n - BROKEN_SKYLIGHT: Broken skylight\n - BROKEN_STORAGE_HEATER: Broken storage heater\n - BROKEN_WINDOW_LOCK: Broken window lock\n - CARBON_MONOXIDE_ALERT: Carbon monoxide alert\n - COCKROACHES_INFESTATION: Cockroaches infestation\n - COLD_WATER_LEAK: Cold water leak\n - DOMESTIC_APPLIANCES_PROBLEM: Domestic appliances problem\n - DRAINAGE_LEAK: Drainage leak\n - ELECTRIC_HEATER_BREAKDOWN: Electric heater breakdown\n - ELECTRIC_HEATER_BROKEN: Electric heater broken\n - ELECTRICAL_BREAKDOWN_AFTER_SOCKETS: Electrical breakdown after sockets\n - ELECTRICAL_BREAKDOWN_BEFORE_BREAKER: Electrical breakdown before breaker\n - ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS: Electrical breakdown between breaker and sockets\n - EXTERNAL_GAS_LEAK: External gas leak\n - FIRE_PLACE_PROBLEM: Fire place problem\n - FIX_AIR_CONDITIONING_BREAKDOWN: Fix air conditioning breakdown\n - FLEAS_INFESTATION: Fleas infestation\n - FLIES_INFESTATION: Flies infestation\n - FLUE_PIPE_LEAK: Flue pipe leak\n - FOX_SIGHTING: Fox sighting\n - FOXES_INFESTATION: Foxes infestation\n - FOXES_NOISE: Foxes noise\n - FROZEN_BLOCKED_CONDENSATION_PIPE: Frozen blocked condensation pipe\n - FROZEN_PIPES: Frozen pipes\n - GAS_LEAK_BEFORE_METER: Gaz leak before meter\n - GAS_LEAK_INVISIBLE: Gaz leak invisible\n - GEOTHERMAL_HEAT_PUMP_BREAKDOWN: Geothermal heat pump breakdown\n - GREY_SQUIRRELS_INFESTATION: Grey squirrels infestation\n - GREY_SQUIRRELS_NOISE: Grey squirrels noise\n - GREY_SQUIRRELS_SIGHTING: Grey squirrels sighting\n - HEAT_PUMP_BREAKDOWN: Heat pump breakdown\n - HEATING_CONTROLS_FAILURE: Heating control failure\n - HEATING_NOT_WARM_ENOUGH: Heating not warm enough\n - HEATING_WONT_TURN_OFF: Heating wont turn off\n - HOUSEBREAKING: Housebreaking\n - HOUSEBREAKING_ATTEMPT: Housebreaking attempt\n - HOT_WATER_LEAK: Hot water leak\n - INTERNAL_GAS_LEAK: Gas leak\n - LEAKING_ROOF: Leaking roof\n - LIGHTS: Lights\n - LOCKED_DOOR: Locked door\n - LOCKED_IN: Locked in\n - LOCKED_OUT: Locked out\n - LOOSE_DETACHED_RADIATOR: Loose/detached radiator\n - LOSS_OF_WATER: Loss of water\n - LOST_KEYS: Lost keys\n - LOST_KEYS_LOCKED_OUT: Lost keys locked out\n - LOST_ROOF_TILE: Lost roof tile\n - LPG_LEAK: Lpg leak\n - MICE_INFESTATION: Mice infestation\n - MICE_NOISE: Mice noise\n - MICE_SIGHTING: Mice sighting\n - MOSS_ON_ROOF: Moss on roof\n - MOTHS_INFESTATION: Moths infestation\n - NATURAL_DISASTER : Natural disaster\n - NO_HEATING: No heating\n - NO_HEATING_OR_HOT_WATER: No heating or hot water\n - NO_HOT_WATER: No hot water\n - NOISY_BOILER_HEATING_SYSTEM: Noisy boiler and/or heating system\n - OIL_LEAK: Oil leak\n - PARTIAL_HEATING_BREAKDOWN: Partial heating breakdown\n - PARTIAL_HEATING_HOT_WATER_BREAKDOWN: Partial heating hot water breakdown\n - PARTIAL_HOT_WATER_BREAKDOWN: Partial hot water breakdown\n - PARTIAL_HOT_WATER_FAILURE: Partial hot water failure\n - PARTIAL_LOSS_OF_POWER: Partial loss of power\n - PRESSURE_RELEASE_PIPE_DISCHARGING: Pressure release pipe discharging\n - PRESSURE_RELEASE_PIPE_LEAKING: Pressure release pipe leaking\n - RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK: Radiator / heating system pipework leak\n - RADIATOR_LEAK: Radiator leak\n - RATS_INFESTATION: Rats infestation\n - RATS_NOISE: Rats noise\n - RATS_SIGHTING: Rats sighting\n - RED_SQUIRRELS_INFESTATION: Red squirrels infestation\n - RED_SQUIRRELS_NOISE: Red squirrels noise\n - RED_SQUIRRELS_SIGHTING: Red squirrels sighting\n - RODENTS_INFESTATION: Rodents infestation\n - RODENTS_NOISE: Rodents noise\n - STOLEN_KEYS: Stolen keys\n - STOLEN_KEYS_LOCKED_OUT: Stolen keys locked out\n - STORAGE_HEATER_BREAKDOWN: Storage heater breakdown\n - TELECOM_BREAKDOWN: Telecom breakdown\n - TOILET_WONT_FLUSH: Toilet wont flush\n - TOTAL_LOSS_OF_POWER: Total loss of power\n - UNDERFLOOR_HEATING_PROBLEM: Underfloor heating problem\n - VANDALISM: Vandalism\n - WASPS_HORNETS_INFESTATION: Wasps hornets infestation\n - WASPS_HORNETS_SIGHTING: Wasps hornets sighting\n - WATER_LEAK: Water leak\n - WATER_LEAK_BEFORE_METER: Water leak before meter\n - WATER_LEAK_INVISIBLE: Water leak invisible\n - WATER_SHORTAGE: Water shortage\n - WATER_TOO_HOT: Water too hot\n",
                            "type": "string",
                            "enum": [
                              "AC_BREAKDOWN",
                              "AEROTHERMAL_HEAT_PUMP_BREAKDOWN",
                              "ALARM_ISSUE",
                              "ANTS_INFESTATION",
                              "ANTS_SIGHTING",
                              "BAD_SMELL",
                              "BED_BUGS_INFESTATION",
                              "BEES_INFESTATION",
                              "BEES_SIGHTING",
                              "BEETLES_INFESTATION",
                              "BIRDS_INFESTATION",
                              "BIRDS_SIGHTING",
                              "BLOCKAGE",
                              "BOILER_BREAKDOWN",
                              "BOILER_LEAK",
                              "BOILER_PRESSURE_PROBLEM",
                              "BROKEN_AC",
                              "BROKEN_AEROTHERMAL_HEAT_PUMP",
                              "BROKEN_CHIMNEY",
                              "BROKEN_DOOR_FRAME",
                              "BROKEN_DOOR_GLAZING",
                              "BROKEN_DOOR_HANDLE",
                              "BROKEN_DOOR_LOCK",
                              "BROKEN_DOOR_PANELS",
                              "BROKEN_EXTERNAL_BUILDING_WINDOW",
                              "BROKEN_EXTERNAL_DOOR",
                              "BROKEN_EXTERNAL_WINDOW",
                              "BROKEN_FASCIA_BOARD",
                              "BROKEN_FLASHING",
                              "BROKEN_GEOTHERMAL_HEAT_PUMP",
                              "BROKEN_GUTTERING",
                              "BROKEN_HEAT_PUMP",
                              "BROKEN_INTERNAL_DOOR",
                              "BROKEN_INTERNAL_WINDOW",
                              "BROKEN_KEY",
                              "BROKEN_OR_DAMAGED_SANITARY_WARE",
                              "BROKEN_ROOF",
                              "BROKEN_SKYLIGHT",
                              "BROKEN_STORAGE_HEATER",
                              "BROKEN_WINDOW_LOCK",
                              "CARBON_MONOXIDE_ALERT",
                              "COCKROACHES_INFESTATION",
                              "COLD_WATER_LEAK",
                              "DOMESTIC_APPLIANCES_PROBLEM",
                              "DRAINAGE_LEAK",
                              "ELECTRIC_HEATER_BREAKDOWN",
                              "ELECTRIC_HEATER_BROKEN",
                              "ELECTRICAL_BREAKDOWN_AFTER_SOCKETS",
                              "ELECTRICAL_BREAKDOWN_BEFORE_BREAKER",
                              "ELECTRICAL_BREAKDOWN_BETWEEN_BREAKER_AND_SOCKETS",
                              "EXTERNAL_GAS_LEAK",
                              "FIRE_PLACE_PROBLEM",
                              "FIX_AIR_CONDITIONING_BREAKDOWN",
                              "FLEAS_INFESTATION",
                              "FLIES_INFESTATION",
                              "FLUE_PIPE_LEAK",
                              "FOX_SIGHTING",
                              "FOXES_INFESTATION",
                              "FOXES_NOISE",
                              "FROZEN_BLOCKED_CONDENSATION_PIPE",
                              "FROZEN_PIPES",
                              "GAS_LEAK_BEFORE_METER",
                              "GAS_LEAK_INVISIBLE",
                              "GEOTHERMAL_HEAT_PUMP_BREAKDOWN",
                              "GREY_SQUIRRELS_INFESTATION",
                              "GREY_SQUIRRELS_NOISE",
                              "GREY_SQUIRRELS_SIGHTING",
                              "HEAT_PUMP_BREAKDOWN",
                              "HEATING_CONTROLS_FAILURE",
                              "HEATING_NOT_WARM_ENOUGH",
                              "HEATING_WONT_TURN_OFF",
                              "HOUSEBREAKING",
                              "HOUSEBREAKING_ATTEMPT",
                              "HOT_WATER_LEAK",
                              "INTERNAL_GAS_LEAK",
                              "LEAKING_ROOF",
                              "LIGHTS",
                              "LOCKED_DOOR",
                              "LOCKED_IN",
                              "LOCKED_OUT",
                              "LOOSE_DETACHED_RADIATOR",
                              "LOSS_OF_WATER",
                              "LOST_KEYS",
                              "LOST_KEYS_LOCKED_OUT",
                              "LOST_ROOF_TILE",
                              "LPG_LEAK",
                              "MICE_INFESTATION",
                              "MICE_NOISE",
                              "MICE_SIGHTING",
                              "MOSS_ON_ROOF",
                              "MOTHS_INFESTATION",
                              "NATURAL_DISASTER",
                              "NO_HEATING",
                              "NO_HEATING_OR_HOT_WATER",
                              "NO_HOT_WATER",
                              "NOISY_BOILER_HEATING_SYSTEM",
                              "OIL_LEAK",
                              "PARTIAL_HEATING_BREAKDOWN",
                              "PARTIAL_HEATING_HOT_WATER_BREAKDOWN",
                              "PARTIAL_HOT_WATER_BREAKDOWN",
                              "PARTIAL_HOT_WATER_FAILURE",
                              "PARTIAL_LOSS_OF_POWER",
                              "PRESSURE_RELEASE_PIPE_DISCHARGING",
                              "PRESSURE_RELEASE_PIPE_LEAKING",
                              "RADIATOR_HEATING_SYSTEM_PIPEWORK_LEAK",
                              "RADIATOR_LEAK",
                              "RATS_INFESTATION",
                              "RATS_NOISE",
                              "RATS_SIGHTING",
                              "RED_SQUIRRELS_INFESTATION",
                              "RED_SQUIRRELS_NOISE",
                              "RED_SQUIRRELS_SIGHTING",
                              "RODENTS_INFESTATION",
                              "RODENTS_NOISE",
                              "STOLEN_KEYS",
                              "STOLEN_KEYS_LOCKED_OUT",
                              "STORAGE_HEATER_BREAKDOWN",
                              "TELECOM_BREAKDOWN",
                              "TOILET_WONT_FLUSH",
                              "TOTAL_LOSS_OF_POWER",
                              "UNDERFLOOR_HEATING_PROBLEM",
                              "VANDALISM",
                              "WASPS_HORNETS_INFESTATION",
                              "WASPS_HORNETS_SIGHTING",
                              "WATER_LEAK",
                              "WATER_LEAK_BEFORE_METER",
                              "WATER_LEAK_INVISIBLE",
                              "WATER_SHORTAGE",
                              "WATER_TOO_HOT"
                            ],
                            "example": "WATER_LEAK"
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "description": "Additional service description.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "In payment of additional spare parts"
                  }
                },
                "required": [
                  "quote_code",
                  "customer",
                  "intervention"
                ]
              }
            }
          },
          "description": "Content of service order.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Created Service order.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Additional information regarding the intervention",
                                      "properties": {
                                        "description": {
                                          "description": "Additional information provided by the customer.",
                                          "type": "string",
                                          "maxLength": 2000,
                                          "example": "I have a leaky faucet"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "description": {
                          "description": "Additional service description.",
                          "type": "string",
                          "maxLength": 2000,
                          "example": "In payment of additional spare parts"
                        }
                      },
                      "required": [
                        "intervention",
                        "customer"
                      ]
                    },
                    {
                      "properties": {
                        "quote_code": {
                          "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                          "type": "string",
                          "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                          "maxLength": 2000
                        }
                      }
                    }
                  ],
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/service_orders/{service_order_id}": {
      "get": {
        "summary": "Retreive service order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "in": "path",
            "description": "Service order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service order details.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Additional information regarding the intervention",
                                      "properties": {
                                        "description": {
                                          "description": "Additional information provided by the customer.",
                                          "type": "string",
                                          "maxLength": 2000,
                                          "example": "I have a leaky faucet"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "description": {
                          "description": "Additional service description.",
                          "type": "string",
                          "maxLength": 2000,
                          "example": "In payment of additional spare parts"
                        }
                      },
                      "required": [
                        "intervention",
                        "customer"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      },
      "patch": {
        "summary": "Update the service order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                    "maxLength": 2000
                  }
                }
              }
            }
          },
          "description": "Service order update request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service order updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Updated service order.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "description": "Additional information regarding the intervention",
                                      "properties": {
                                        "description": {
                                          "description": "Additional information provided by the customer.",
                                          "type": "string",
                                          "maxLength": 2000,
                                          "example": "I have a leaky faucet"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "description": {
                          "description": "Additional service description.",
                          "type": "string",
                          "maxLength": 2000,
                          "example": "In payment of additional spare parts"
                        }
                      },
                      "required": [
                        "intervention",
                        "customer"
                      ]
                    },
                    {
                      "properties": {
                        "quote_code": {
                          "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                          "type": "string",
                          "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                          "maxLength": 2000
                        }
                      }
                    }
                  ],
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/service_orders/{service_order_id}/confirm": {
      "post": {
        "summary": "Confirm the service order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_type": {
                    "description": "The Payment mode.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "ELECTRONIC_TRANSFER",
                      "VIRTUAL_CREDIT_CARD",
                      "CASH",
                      "CHEQUE"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "payment_reference": {
                    "description": "The payment reference.",
                    "type": "string",
                    "maxLength": 150,
                    "example": "2c92c0f96af864e7016afe7aa28a6cbf"
                  }
                }
              }
            }
          },
          "description": "Service order confirmation request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service order confirmation response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "service_order_number": {
                      "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                      "type": "string",
                      "example": "AAA111000000064",
                      "maxLength": 150
                    },
                    "status": {
                      "description": "The service order's status.",
                      "type": "string",
                      "enum": [
                        "ACTIVE"
                      ],
                      "example": "ACTIVE"
                    },
                    "related_documents": {
                      "description": "Set of attachments provided with the service.",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                            "type": "string",
                            "maxLength": 100
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ]
                            }
                          },
                          "created_at": {
                            "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2021-03-09T10:00:00Z"
                          }
                        },
                        "required": [
                          "name",
                          "content_url"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/domestic/service_orders/{service_order_id}/payments": {
      "post": {
        "summary": "Send the mean of payment selected by the customer.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The Payment mode.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "ELECTRONIC_TRANSFER",
                      "VIRTUAL_CREDIT_CARD",
                      "CASH",
                      "CHEQUE"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "payment_reference": {
                    "description": "The payment reference.",
                    "type": "string",
                    "maxLength": 100,
                    "example": "bank cheque number - 27006"
                  },
                  "transfer_information": {
                    "description": "Information about electronic transfer.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "account_holder": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "first_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "First name of the account's owner."
                                  },
                                  "last_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "Last name of the account's owner."
                                  }
                                }
                              }
                            ]
                          },
                          "account_name": {
                            "type": "string",
                            "description": "Name's of this bank account",
                            "maxLength": 100
                          },
                          "country_code": {
                            "type": "string",
                            "example": "FR",
                            "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code).",
                            "maxLength": 2,
                            "minLength": 2
                          },
                          "wire_code": {
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "wire_code_type": {
                                  "type": "string",
                                  "enum": [
                                    "IBAN"
                                  ],
                                  "description": "Wire's type (only IBAN is accepted)."
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 50,
                                  "description": "The value of the IBAN"
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "The payment mode and the payment type.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The Payment mode.",
                          "type": "string",
                          "enum": [
                            "CREDIT_CARD",
                            "DEBIT_CARD",
                            "ELECTRONIC_TRANSFER",
                            "VIRTUAL_CREDIT_CARD",
                            "CASH",
                            "CHEQUE"
                          ],
                          "example": "CREDIT_CARD"
                        },
                        "payment_reference": {
                          "description": "The payment reference.",
                          "type": "string",
                          "maxLength": 100,
                          "example": "bank cheque number - 27006"
                        },
                        "transfer_information": {
                          "description": "Information about electronic transfer.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "account_holder": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "first_name": {
                                          "type": "string",
                                          "maxLength": 100,
                                          "description": "First name of the account's owner."
                                        },
                                        "last_name": {
                                          "type": "string",
                                          "maxLength": 100,
                                          "description": "Last name of the account's owner."
                                        }
                                      }
                                    }
                                  ]
                                },
                                "account_name": {
                                  "type": "string",
                                  "description": "Name's of this bank account",
                                  "maxLength": 100
                                },
                                "country_code": {
                                  "type": "string",
                                  "example": "FR",
                                  "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code).",
                                  "maxLength": 2,
                                  "minLength": 2
                                },
                                "wire_code": {
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "wire_code_type": {
                                        "type": "string",
                                        "enum": [
                                          "IBAN"
                                        ],
                                        "description": "Wire's type (only IBAN is accepted)."
                                      },
                                      "value": {
                                        "type": "string",
                                        "maxLength": 50,
                                        "description": "The value of the IBAN"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "properties": {
                        "payment_technical_information": {
                          "description": "Technical information, provided to the API caller to allow it to complet the payment.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Technical information for payment system access.\nThis information is provided to the API caller to allow it to complete the payment.\n",
                              "properties": {
                                "payment_gateway": {
                                  "description": "Payment gateway code.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "key": {
                                  "description": "Public key generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "signature": {
                                  "description": "Digital signature generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "token": {
                                  "description": "Token generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "tenant_id": {
                                  "description": "ID of the Zuora tenant.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "page_id": {
                                  "description": "The page id.",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "payment_gateway",
                                "key",
                                "signature",
                                "token",
                                "tenant_id",
                                "page_id"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.domestic.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reservation_number": {
                    "description": "The reservation number given by the car rental company.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "12345678FR1"
                  }
                },
                "required": [
                  "reservation_number"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "The car rental company cannot respond positively to the request and this is considered to be a refusal response, even if alternative proposals are given.\nThe possible values are:\n- PICKUP_AGENCY_NOT_AVAILABLE : The pickup agency indicated in the reservation request is not available.\n- RETURN_AGENCY_NOT_AVAILABLE : The return agency indicated in the reservation request is not available.\n- EQUIPMENT_NOT_AVAILABLE : The equipment indicated in the reservation request is not available.\n- VEHICLE_CATEGORY_NOT_AVAILABLE : The category of car type indicated in the reservation request is not available.\n- CANT_ATTEMPT_WITHIN_SLA_TIME : Can't attempt within SLA time (Service Level Agreement).\n- OTHER: Any other reason.\n",
                    "type": "string",
                    "enum": [
                      "PICKUP_AGENCY_NOT_AVAILABLE",
                      "RETURN_AGENCY_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "VEHICLE_CATEGORY_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "example": "VEHICLE_CATEGORY_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "Description of the refusal reason. It can contain the alternative proposals.\nFor example:\n- the car requested is available in another pickup agency,\n- and/or the pickup agency proposes a vehicle of another category.\n\nMandatory when _reason_ is equal to _OTHER_.\n",
                    "type": "string",
                    "maxLength": 4000,
                    "example": "Erreur: HTZ -- 974 -- Catégorie indisponible -- Contreproposition catégorie alternative: CVMR; --  Exemple: 'NISSAN NOTE 1.5L DCI 4 PORTES CLIM"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/missions/{mission_id}/extension_requests/{extension_request_id}/accept": {
      "post": {
        "summary": "Allow to accept a rental extension request.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "The identifier of a mission.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "extension_request_id",
            "description": "The identifier of the extension request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_reservation_number": {
                    "description": "The new reservation number, if any, given by the car rental company.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "22345678FR1"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission extension request acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Extension request acceptance successfully sent (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/missions/{mission_id}/extension_requests/{extension_request_id}/refuse": {
      "post": {
        "summary": "Allow to refuse a rental extension request.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Mission identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "extension_request_id",
            "description": "Extension request identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reason"
                ],
                "properties": {
                  "reason": {
                    "description": "The car rental company cannot respond positively to the request and this is considered to be a refusal response, even if alternative proposals are given.\nThe possible values are:\n- RETURN_AGENCY_NOT_AVAILABLE: The return agency indicated in the reservation request is not available.\n- EQUIPMENT_NOT_AVAILABLE: The equipment indicated in the reservation request is not available.\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt within SLA time (Service Level Agreement).\n- OTHER: Any other reason.\n",
                    "type": "string",
                    "enum": [
                      "RETURN_AGENCY_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "example": "EQUIPMENT_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "Reason of the extension refusal. Mandatory when _reason_ is equal to _OTHER_.\n",
                    "type": "string",
                    "maxLength": 4000,
                    "example": "The station is closed on the requested date"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the extension request refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Extension request refusal successfully sent (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/missions/{mission_id}/update_requests/{update_request_id}/accept": {
      "post": {
        "summary": "Allow to accept a rental update request.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "The identifier of a mission.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "update_request_id",
            "description": "The identifier of the update request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_reservation_number": {
                    "description": "The new reservation number, if any, given by the car rental company.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "22345678FR1"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission update request acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update request acceptance successfully sent (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/rental/missions/{mission_id}/update_requests/{update_request_id}/refuse": {
      "post": {
        "summary": "Allow to refuse a rental update request.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Mission identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "update_request_id",
            "description": "Update request identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "The car rental company cannot respond positively to the request and this is considered to be a refusal response, even if alternative proposals are given.\nThe possible values are:\n- PICKUP_AGENCY_NOT_AVAILABLE: The pickup agency indicated in the reservation request is not available.\n- RETURN_AGENCY_NOT_AVAILABLE: The return agency indicated in the reservation request is not available.\n- EQUIPMENT_NOT_AVAILABLE: The equipment indicated in the reservation request is not available.\n- VEHICLE_CATEGORY_NOT_AVAILABLE: The category of car type indicated in the reservation request is not available.\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt within SLA time (Service Level Agreement).\n- OTHER: Any other reason.\n",
                    "type": "string",
                    "enum": [
                      "PICKUP_AGENCY_NOT_AVAILABLE",
                      "RETURN_AGENCY_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "VEHICLE_CATEGORY_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "example": "VEHICLE_CATEGORY_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "Description of the refusal reason. It can contain the alternative proposals.\nFor example:\n- the car requested is available in another pickup agency,\n- and/or the pickup agency proposes a vehicle of another category.\n\nMandatory when _reason_ is equal to _OTHER_.\n",
                    "type": "string",
                    "maxLength": 4000,
                    "example": "Erreur: HTZ -- 974 -- Catégorie indisponible -- Contreproposition catégorie alternative: CVMR; --  Exemple: 'NISSAN NOTE 1.5L DCI 4 PORTES CLIM"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission update request refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission update request refusal successfully sent (No Content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.rental.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/mission_orders/{mission_order_id}": {
      "patch": {
        "summary": "Allows the provider to provide information on the mission.",
        "description": "Allows the provider to provide information on the mission.\n\n/!\\ This endpoint will be removed on January 31 2022.\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mission_report": {
                    "description": "Report done by the provider for the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "performed_service": {
                            "description": "Service actually performed.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "TOWING"
                          },
                          "actual_time_arrival_on_site": {
                            "description": "Actual Time of Arrival on site - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T15:45:00Z"
                          },
                          "intervention_location_left_at": {
                            "description": "Date & Time when the provider left the intervention location - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T15:50:00Z"
                          },
                          "mission_begin_at": {
                            "description": "Date & Time when the mission started - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T15:50:00Z"
                          },
                          "mission_end_at": {
                            "description": "Date & Time when the mission finished - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T16:50:00Z"
                          },
                          "vehicle_delivered_at": {
                            "description": "Date & Time when the vehicle had been delivered - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T16:40:00Z"
                          },
                          "highway_entrance_at": {
                            "description": "Date of entrance on the highway - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T15:50:00Z"
                          },
                          "highway_exit_at": {
                            "description": "Date of exit of the highway - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-01-25T15:50:00Z"
                          },
                          "covered_distance": {
                            "description": "Distance covered for the mission",
                            "type": "number",
                            "example": 38
                          },
                          "distance_to_garage": {
                            "description": "Distance from the intervention location to the destination Garage",
                            "type": "number",
                            "example": 25
                          },
                          "distance_out_of_zone": {
                            "description": "If the provider tarification depends on \"zone\", you can provide the distance traveled out of the zone\nto access to the intervention location or to the destination garage\n",
                            "type": "number",
                            "example": 12
                          },
                          "is_intervention_location_cleaning_needed": {
                            "description": "Indicates if the provider needed to clean the intervention location or not.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "diagnostic": {
                    "description": "Elements of the diagnostic.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cause": {
                            "description": "Cause of the breakdown.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Breakdown diagnostic code.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "EN"
                                  },
                                  "description": {
                                    "description": "Breakdown diagnostic description.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "ENGINE NOISE"
                                  }
                                }
                              }
                            ]
                          },
                          "sub_cause": {
                            "description": "Sub-cause of the breakdown.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Breakdown diagnostic code.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "EN"
                                  },
                                  "description": {
                                    "description": "Breakdown diagnostic description.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "ENGINE NOISE"
                                  }
                                }
                              }
                            ]
                          },
                          "incident": {
                            "description": "Incident causing the breakdown.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Breakdown diagnostic code.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "EN"
                                  },
                                  "description": {
                                    "description": "Breakdown diagnostic description.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "ENGINE NOISE"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "vehicle_characteristics": {
                    "description": "Characteristics of the vehicle concerned by the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "vehicle_type": {
                            "description": "Vehicle type.\n",
                            "type": "string",
                            "maxLength": 50,
                            "example": "CAR_UTILITY_VEHICLE"
                          },
                          "vin_number": {
                            "description": "Vehicle Identification Number (VIN).",
                            "type": "string",
                            "maxLength": 20,
                            "example": "8AF*146000*"
                          },
                          "registration_number": {
                            "description": "Registration number.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "AF45P1"
                          },
                          "first_registration_date": {
                            "description": "First registration date.",
                            "type": "string",
                            "format": "date",
                            "example": "2000-01-25"
                          },
                          "brand": {
                            "description": "Brand of vehicle.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "AUDI"
                          },
                          "model": {
                            "description": "Model name of vehicle.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "A5"
                          },
                          "gross_weight": {
                            "description": "Weight of the vehicle.",
                            "type": "number",
                            "example": 38
                          },
                          "gearbox_type": {
                            "description": "Gearbox type code",
                            "type": "string",
                            "maxLength": 50,
                            "example": "MANUAL"
                          },
                          "fuel_type": {
                            "description": "Fuel type code",
                            "type": "string",
                            "maxLength": 50,
                            "example": "DIESEL"
                          },
                          "transmission_type": {
                            "description": "Transmission type code",
                            "type": "string",
                            "maxLength": 50,
                            "example": "PROPULSION"
                          }
                        }
                      }
                    ]
                  },
                  "vehicle_status": {
                    "description": "Status of the vehicle concerned by the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_loaded": {
                            "description": "Indicates if the vehicule is loaded.",
                            "type": "boolean",
                            "example": true
                          },
                          "is_moving": {
                            "description": "Indicates if the vehicule is moving.",
                            "type": "boolean",
                            "example": true
                          },
                          "is_burnt": {
                            "description": "Indicates if the vehicule is burnt.",
                            "type": "boolean",
                            "example": true
                          },
                          "has_a_trailer_attached": {
                            "description": "Indicates if the vehicle has a trailer attached.",
                            "type": "boolean",
                            "example": false
                          },
                          "mileage": {
                            "description": "Mileage of the vehicle.",
                            "type": "number",
                            "example": 36000
                          }
                        }
                      }
                    ]
                  },
                  "intervention_location": {
                    "description": "Information about the intervention location of the vehicle.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Location address.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "123 Some Street Name"
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "75001"
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "PARIS"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                }
                              }
                            ]
                          },
                          "place_type": {
                            "description": "Place type where the vehicle is parked.",
                            "type": "string",
                            "enum": [
                              "BASEMENT",
                              "HIGHWAY",
                              "MULTISTOREY_PARK",
                              "OTHER"
                            ],
                            "example": "BASEMENT"
                          },
                          "complement": {
                            "description": "Futher information about the location.",
                            "type": "string",
                            "maxLength": 2000
                          }
                        }
                      }
                    ]
                  },
                  "destination_garage": {
                    "description": "Information about destination garage.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of destination garage.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Towing & Cie"
                          },
                          "address": {
                            "description": "Address of destination garage.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "123 Some Street Name"
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "75001"
                                  },
                                  "locality": {
                                    "description": "Locality.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "PARIS"
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                }
                              }
                            ]
                          },
                          "phones": {
                            "description": "List phone numbers of the destination garage.",
                            "type": "array",
                            "maxItems": 20,
                            "items": {
                              "type": "object",
                              "properties": {
                                "international_prefix": {
                                  "description": "Prefix of the phone number.",
                                  "type": "string",
                                  "maxLength": 5,
                                  "example": "+44"
                                },
                                "number": {
                                  "description": "Phone number.",
                                  "type": "string",
                                  "maxLength": 20,
                                  "example": "123456789"
                                }
                              },
                              "required": [
                                "number"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  },
                  "guarding": {
                    "description": "Information about the guarding if the provider has to keep the vehicle before delivery to the garage.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "number_of_days": {
                            "description": "Number of day of guarding",
                            "type": "number",
                            "example": 2
                          },
                          "is_covered": {
                            "description": "Indicates if the provider guarding place is covered",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "additional_information": {
                    "description": "Notes that can be added to comment the management of the mission.\n_N.B. By submitting this list, the older one will be deleted and replaced with the one provided._\n",
                    "type": "array",
                    "maxItems": 20,
                    "items": {
                      "type": "object",
                      "description": "Additional Information",
                      "properties": {
                        "date": {
                          "description": "Date of the note - ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-01-25T15:45:00Z"
                        },
                        "author": {
                          "description": "Author of the note",
                          "type": "string",
                          "maxLength": 100,
                          "example": "John Smith"
                        },
                        "note": {
                          "description": "Notes",
                          "type": "string",
                          "maxLength": 2000,
                          "example": "blabla"
                        }
                      },
                      "required": [
                        "note"
                      ]
                    }
                  },
                  "units_definition": {
                    "description": "Unit used.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "distance_unit": {
                            "description": "Unit of the measure for distances and mileages.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- km: Kilometers;\n- \\[mi_i]: Miles.\n",
                            "type": "string",
                            "enum": [
                              "km",
                              "[mi_i]"
                            ],
                            "example": "km"
                          },
                          "weight_unit": {
                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- kg: kilogram;\n- t: tonne.\n",
                            "type": "string",
                            "enum": [
                              "kg",
                              "t"
                            ],
                            "example": "kg"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Completion.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission updated successfully (No content)."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Allows the provider to accept the mission order.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/mission_orders/{mission_order_id}/accept\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimated_time_arrival": {
                    "description": "Estimated Time of Arrival\nUTC date-time, ISO 8601 format (ex: YYYY-MM-DDTHH:mm:ssZ).\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-01-25T15:30:00Z"
                  },
                  "start_location": {
                    "description": "Indicates the starting location of the provider when the mission order is accepted.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "longitude": {
                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 2.3488
                          },
                          "latitude": {
                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 48.85341
                          }
                        },
                        "required": [
                          "longitude",
                          "latitude"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/mission_orders/{mission_order_id}/complete": {
      "post": {
        "summary": "Allows the provider to indicate the mission order is completed.",
        "description": "Allows the provider to indicate the mission order is completed.\n\n/!\\ This endpoint will be removed on January 31 2022.\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mission Order completed successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Allows the provider to refuse the mission order.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/mission_orders/{mission_order_id}/refuse\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- preprod -> Pre-production environment\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "preprod",
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason of the refusal\nThe possible values are:\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt with SLA time (Service Level Agreement)\n- DONT_HAVE_RIGHT_EQUIPMENT: Provider does not have the right equipment\n- DONT_HAVE_RIGHT_LICENCE: Provider does not have licence to perform this job\n- DONT_HAVE_RIGHT_STAFF: Provider does not have right staff to perform the mission\n- PROVIDER_NOT_AVAILABLE: Provider currently not available\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- LOCATION_OUT_OF_ZONE: Location out of zone\n- OTHER: Any other reason. Use description to give the other reason\n- SERVICE_NOT_COVERED: Service not covered by the provider\n",
                    "type": "string",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "DONT_HAVE_RIGHT_EQUIPMENT",
                      "DONT_HAVE_RIGHT_LICENCE",
                      "DONT_HAVE_RIGHT_STAFF",
                      "PROVIDER_NOT_AVAILABLE",
                      "EQUIPMENT_NOT_AVAILABLE",
                      "LOCATION_OUT_OF_ZONE",
                      "OTHER",
                      "SERVICE_NOT_COVERED"
                    ],
                    "example": "PROVIDER_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the refusal is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "DOUBLON_MISSION"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/missions/{mission_id}/cancel": {
      "post": {
        "summary": "Allows the provider to cancel a mission.",
        "description": "Allows the provider to cancel a mission.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/missions/{mission_id}/cancel\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Description of the reason of the cancellation.\nThe possible values are the following:\n- EQUIPMENT_NOT_AVAILABLE: Provider equipment currently not available\n- CANT_ATTEMPT_WITHIN_SLA_TIME: The provider cannot perform the mission within the SLA time\n- OTHER: Any other reason. _description_ must be filled to explain the reason\n",
                    "enum": [
                      "EQUIPMENT_NOT_AVAILABLE",
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "OTHER"
                    ],
                    "type": "string",
                    "example": "EQUIPMENT_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the cancellation is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "INTERVENTION_NON_EFFECTUEE"
                  }
                },
                "required": [
                  "reason"
                ],
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the cancellation.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cancel request sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Mission completed or canceled).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed since the mission is already completed."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/missions/{mission_id}/change_requests": {
      "post": {
        "summary": "Allows the provider to send a change request.",
        "description": "Allows the provider to send a change request.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/missions/{mission_id}/change_requests\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "description": "New service or equipment required to perform the mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service_code": {
                            "description": "The code of the service.\nThe possible value are:\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                            "type": "string",
                            "enum": [
                              "TOWING",
                              "REPAIR_ON_SPOT",
                              "LIFTING_CRANE",
                              "DELIVERY",
                              "STORAGE",
                              "REPATRIATION"
                            ],
                            "example": "TOWING"
                          },
                          "service_qualifiers": {
                            "description": "List of service qualifiers that detail the service to provide.\nThe possible combinations are the following:\n\n| Service_code           | Possible Service_qualifier                     |\n| ---------------------- | -----------------------------------------------|\n| TOWING                 | _no possible values_ |\n| REPAIR_ON_SPOT         | MOBILE_DRAIN, EV_CHARGING, JUMP_START, TIRE_REPLACEMENT, BATTERY_REPLACEMENT, OTHER_REGULAR_ROS|\n| LIFTING_CRANE          | _no possible values_ |\n| DELIVERY               | _no possible values_ |\n| STORAGE                | _no possible values_ |\n| REPATRIATION           | _no possible values_ |\n\nQualifiers description:\n- MOBILE_DRAIN: Drain fuel within tank of car because of a misfuelling and fill the tank with the correct fuel.\n- EV_CHARGING: Charge the electric vehicule on spot\n- JUMP_START: Start a car with a flat battery with jump leads or by a sudden release of the clutch while the car is being pushed.\n- TIRE_REPLACEMENT: Replacement of a tire of the vehicle.\n- BATTERY_REPLACEMENT: Replacement of the battery of the vehicle.\n- OTHER_REGULAR_ROS: Other breakdown that can be repaired on spot\n",
                            "type": "array",
                            "maxItems": 5,
                            "example": [
                              "MOBILE_DRAIN",
                              "JUMP_START"
                            ],
                            "items": {
                              "type": "string",
                              "enum": [
                                "MOBILE_DRAIN",
                                "EV_CHARGING",
                                "JUMP_START",
                                "TIRE_REPLACEMENT",
                                "BATTERY_REPLACEMENT",
                                "OTHER_REGULAR_ROS"
                              ]
                            }
                          },
                          "equipments": {
                            "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- 4X4: 4x4,\n- AIR_CUSHIONS: Air cushions\n- COMMERCIAL_LOW_LOADER_HV: Commercial low loader,\n- COVERED_TRANSPORTER: Covered transporter,\n- EXTRACTOR_EQUIPMENT: Extrator equipment,\n- SKATES_GOJACK: Dolly / gojack carts,\n- SLA_TRANSPORTER: SLA transporter,\n- STOLEN_WHEELS_KIT: Stolen wheels kit,\n- TEMPORARY_SPARE_TIRES: Temporary spare tires,\n- TYRE_VAN: Tyre van,\n- UNIMOG_TRACTOR: Unimog tractor\n",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "string",
                              "enum": [
                                "4X4",
                                "AIR_CUSHIONS",
                                "COMMERCIAL_LOW_LOADER_HV",
                                "COVERED_TRANSPORTER",
                                "EXTRACTOR_EQUIPMENT",
                                "SKATES_GOJACK",
                                "SLA_TRANSPORTER",
                                "STOLEN_WHEELS_KIT",
                                "TEMPORARY_SPARE_TIRES",
                                "TYRE_VAN",
                                "UNIMOG_TRACTOR"
                              ]
                            },
                            "example": [
                              "STOLEN_WHEELS_KIT",
                              "TEMPORARY_SPARE_TIRES"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "destination_address": {
                    "description": "The new destination address.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "7 rue de l'abreuvoir, Batiment C"
                          },
                          "subdivision": {
                            "description": "Area of the city, or department name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "HAUTS-DE-SEINE"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "92400"
                          },
                          "locality": {
                            "description": "City name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Courbevoie"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          }
                        },
                        "required": [
                          "street_address",
                          "postal_code",
                          "locality",
                          "country"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "appointment_rescheduled_at": {
                    "description": "New appointment Date&Time. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-03-01T08:30:00Z"
                  },
                  "total_cost_incl_tax": {
                    "description": "Request of a new total cost including tax. It does not imply to fulfill the \"total_cost_excl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_cost_excl_tax": {
                    "description": "Request of a new total cost excluding tax. It does not imply to fulfill the \"total_cost_incl_tax\".",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ]
                  },
                  "total_distance": {
                    "description": "Total distance to perform the mission.",
                    "allOf": [
                      {
                        "properties": {
                          "value": {
                            "description": "Measured value.",
                            "type": "number",
                            "example": 15.5
                          },
                          "unit": {
                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- km: kilometers.\n",
                            "type": "string",
                            "enum": [
                              "km"
                            ],
                            "example": "km"
                          }
                        },
                        "required": [
                          "value",
                          "unit"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "spare_parts": {
                    "description": "Spare parts required to make reparations.",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Type of spare part.",
                          "type": "string",
                          "maxLength": 50,
                          "example": "Tire"
                        },
                        "quantity": {
                          "description": "Number of items",
                          "type": "integer",
                          "example": 2,
                          "maximum": 50
                        },
                        "unit_price_excl_tax": {
                          "description": "Unit price of the item, tax excluded",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        },
                        "unit_price_incl_tax": {
                          "description": "Unit price of the item, tax included",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "value": {
                                  "description": "Amount, numeric, with 2 or 3 decimals.",
                                  "type": "number",
                                  "example": 199.99
                                },
                                "currency": {
                                  "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3,
                                  "example": "EUR"
                                }
                              },
                              "required": [
                                "value",
                                "currency"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "total_labour_hours": {
                    "description": "Total number of labour hours required to repair the vehicle. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                    "type": "string",
                    "maxLength": 25,
                    "example": "PT2H30M"
                  },
                  "additional_information": {
                    "description": "Any complementary information to the change request.",
                    "type": "string",
                    "maxLength": 1024,
                    "example": "Spare parts are not available for the moment"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the change request.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change request sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "change_request_id": {
                      "description": "Identifier of the submitted change request",
                      "type": "string",
                      "maxLength": 50,
                      "example": "00089786345"
                    }
                  },
                  "required": [
                    "change_request_id"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.change_requests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.change_requests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/missions/{mission_id}/communications": {
      "post": {
        "summary": "Allows the provider to communicate about the mission he is performing.",
        "description": "Allows the provider to communicate about the mission he is performing.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/missions/{mission_id}/communications\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same than the mission_order_id you accepted [here](https://developers.axa-assistance.com/docs#/service/post_service_vexp_roadside_mission_orders__mission_order_id__accept).\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "communication_code": {
                    "description": "Code of the communication that the provider transmits during its mission.\nThe existing values are the following:\n| CODE                      | MANDATORY FIELD              | DESCRIPTION\n| ------------------------- | -----------------------------| ---------------------------\n| EN_ROUTE                  | -*none*-                     | Used to indicate that the provider is starting its way to the incident\n| CURRENT_LOCATION          | current_location             | used to indicate the current location of the provider.\n| ESTIMATED_TIME_ARRIVAL    | estimated_time_arrival       | used to indicate the Estimated Time of Arrival (ETA) on the incident location.\n| ON_SCENE                  | -*none*-                     | Used to indicate that the provider is arrived on the incident location.\n| ACTUAL_TIME_ARRIVAL       | actual_time_arrival          | Used to indicate the Actual Time Arrival (ATA) on the incident location.\n| DELAY_OF_ARRIVAL_TIME     | delay_of_arrival_time        | Used to indicate the estimated delay to arrive on the incident location.\n| DIAGNOSTIC_CONFIRMED      | -*none*-                     | Used to indicate that the diagnostic is confirmed.\n| WORK_STARTED              | work_started_at              | Used to indicate the time at which the intervention began.\n| ESTIMATED_COMPLETION_TIME | estimated_time_of_completion | Used to indicate the estimated time of work completion.\n| WORK_COMPLETED            | work_completed_at            | Used to indicate the time at which the intervention is completed.\n| DISCLAIMER_SHEET_SIGNED   | -*none*-                     | Used to indicate that the customer has signed the disclaimer sheet.\n| DESTINATION_ADDRESS       | address                      | Used to indicate the destination address.\n| ADDITIONAL_INFORMATION    | description                  | Used to indicate any other additionnal information.\n",
                    "type": "string",
                    "enum": [
                      "EN_ROUTE",
                      "CURRENT_LOCATION",
                      "ESTIMATED_TIME_ARRIVAL",
                      "ON_SCENE",
                      "ACTUAL_TIME_ARRIVAL",
                      "DELAY_OF_ARRIVAL_TIME",
                      "DIAGNOSTIC_CONFIRMED",
                      "WORK_STARTED",
                      "ESTIMATED_COMPLETION_TIME",
                      "WORK_COMPLETED",
                      "DISCLAIMER_SHEET_SIGNED",
                      "DESTINATION_ADDRESS",
                      "ADDITIONAL_INFORMATION"
                    ],
                    "example": "ESTIMATED_TIME_ARRIVAL"
                  },
                  "description": {
                    "description": "Any complementary information about the mission\n** Required if communication_code is empty or equal to _ADDITIONAL_INFORMATION_ **\n",
                    "type": "string",
                    "maxLength": 2048,
                    "example": "there are traffic jams on the highway"
                  },
                  "service_destination": {
                    "description": "Information on the service destination\ndescription: ** Required if communication_code is equal to _DESTINATION_ADRESS_ **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "street_address": {
                            "description": "Street address.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "7 rue de l'abreuvoir, Batiment C"
                          },
                          "subdivision": {
                            "description": "Area of the city, or department name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "HAUTS-DE-SEINE"
                          },
                          "postal_code": {
                            "description": "Postal code or zip code.",
                            "type": "string",
                            "maxLength": 20,
                            "example": "92400"
                          },
                          "locality": {
                            "description": "City name.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "Courbevoie"
                          },
                          "country": {
                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          }
                        },
                        "required": [
                          "street_address",
                          "postal_code",
                          "locality",
                          "country"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "arrival_information": {
                    "description": "Information about the provider arrival on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "current_location": {
                            "description": "Current location of the provider at the Date&Time the communication is transmit.\n** Required if communication_code is equal to _CURRENT_LOCATION_ **\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          },
                          "estimated_time_arrival": {
                            "description": "Estimated Time of Arrival (ETA) communicated by the provider.\n** Required if communication_code is equal to _ESTIMATED_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:00:00Z"
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n** Required if communication_code is equal to _ACTUAL_TIME_ARRIVAL_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "delay_of_arrival_time": {
                            "description": "Provider estimation of the delay to arrive on site. ISO 8601 format (P18Y9M4DT11H9M8S).\n** Required if communication_code is equal to _DELAY_OF_ARRIVAL_TIME_ **\nFor example \"PT30M\" means a period (P) of time (T) of 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 20,
                            "example": "PT30M"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "work_information": {
                    "description": "Information about the provider mission.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site\n** Required if communication_code is equal to _WORK_STARTED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "estimated_time_of_completion": {
                            "description": "Estimation of the provider about the mission completion.\n** Required if communication_code is equal to _ESTIMATED_COMPLETION_TIME_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:00:00Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site\n** Required if communication_code is equal to _WORK_COMPLETED_ **\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the communication.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Communication sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.communications.write"
            ]
          },
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.write"
            ]
          },
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.communications.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/missions/{mission_id}/mission_reports": {
      "post": {
        "summary": "Allows the provider to carry out his mission report.",
        "description": "Allows the provider to carry out his mission report.\n\n/!\\ This endpoint will be removed on January 31 2022, new endpoint available on:\n- POST /service/roadside/vexp/missions/{mission_id}/mission_reports\n",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_id",
            "description": "Identifier of the mission.\nIt is the same value than the identifier of the accepted mission order.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mission_statement": {
                    "description": "Information about the mission process",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "is_cancelled": {
                            "description": "Indicates that the mission has been cancelled.",
                            "type": "boolean",
                            "example": false
                          },
                          "actual_time_arrival": {
                            "description": "Actual Time Arrival (ATA) on site of the provider. UTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:58:15Z"
                          },
                          "work_started_at": {
                            "description": "Date&Time the provider started its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T13:02:19Z"
                          },
                          "work_completed_at": {
                            "description": "Date&Time the provider completed its intervention on site.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T14:13:54Z"
                          },
                          "disclaimer_sheet_signed": {
                            "description": "Indicates that the disclaimer sheet has been signed.",
                            "type": "boolean",
                            "example": true
                          },
                          "total_distance": {
                            "description": "Distance traveled by the provider to perform the mission.\nBy default, the field is not taken into account if one of the distance in _break_down_distances_ is filled.\n",
                            "allOf": [
                              {
                                "properties": {
                                  "value": {
                                    "description": "Measured value.",
                                    "type": "number",
                                    "example": 15.5
                                  },
                                  "unit": {
                                    "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- km: kilometers.\n",
                                    "type": "string",
                                    "enum": [
                                      "km"
                                    ],
                                    "example": "km"
                                  }
                                },
                                "required": [
                                  "value",
                                  "unit"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "break_down_distances": {
                            "description": "Distances traveled by the provider to perform the mission.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "distance_from_base_to_incident": {
                                    "description": "Distance traveled by the provider from its base (start location) to the incident location.",
                                    "type": "number",
                                    "example": 5.5
                                  },
                                  "distance_from_incident_to_destination": {
                                    "description": "Distance traveled by the provider from the incident location to the destination location.",
                                    "type": "number",
                                    "example": 8.2
                                  },
                                  "distance_from_destination_to_base": {
                                    "description": "Distance traveled by the provider from the destination location to its base.",
                                    "type": "number",
                                    "example": 3.8
                                  },
                                  "unit": {
                                    "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nRequired if at least one of the distance properties is filled.\n\nThe possible values are:\n- km: kilometers.\n",
                                    "type": "string",
                                    "enum": [
                                      "km"
                                    ],
                                    "example": "km"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "total_labour_hours": {
                            "description": "Total number of labour hours required to repair the vehicle. ISO 8601 format (P18Y9M4DT11H9M8S).\nFor example \"PT2H30M\" means a period (P) of time (T) of 2 hours (H) and 30 minutes (M).\n",
                            "type": "string",
                            "maxLength": 25,
                            "example": "PT2H30M"
                          },
                          "spare_parts": {
                            "description": "Spare parts used to make reparations.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "description": "Type of spare part.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "Tire"
                                },
                                "quantity": {
                                  "description": "Number of items",
                                  "type": "integer",
                                  "example": 2,
                                  "maximum": 50
                                },
                                "unit_price_excl_tax": {
                                  "description": "Unit price of the item, tax excluded",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                },
                                "unit_price_incl_tax": {
                                  "description": "Unit price of the item, tax included",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "value": {
                                          "description": "Amount, numeric, with 2 or 3 decimals.",
                                          "type": "number",
                                          "example": 199.99
                                        },
                                        "currency": {
                                          "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 3,
                                          "example": "EUR"
                                        }
                                      },
                                      "required": [
                                        "value",
                                        "currency"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "new_authorized_amount_incl_tax": {
                            "description": "Authorized amount.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "technician_name": {
                            "description": "Technician name.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "GIRAUD Alexandre"
                          },
                          "did_a_second_towing": {
                            "description": "Indicated if the provider has done a second towing or not. For example if the provider did a towing to its garage, then another to the destination.",
                            "type": "boolean",
                            "example": false
                          },
                          "number_of_storage_days": {
                            "description": "Number of days for which the vehicle is parked by the provider, for example the time the destination garage is open.\n",
                            "type": "integer",
                            "example": 2
                          },
                          "storage_total_amount_excl_tax": {
                            "description": "Total amount excluding tax for the vehicle storage.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "value": {
                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                    "type": "number",
                                    "example": 199.99
                                  },
                                  "currency": {
                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3,
                                    "example": "EUR"
                                  }
                                },
                                "required": [
                                  "value",
                                  "currency"
                                ]
                              }
                            ]
                          },
                          "additional_information": {
                            "description": "Any complementary information about the mission.",
                            "type": "string",
                            "maxLength": 1024,
                            "example": "First destination closed. Changed for another garage 10km away."
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "case": {
                    "description": "Case description of the customer's situation.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "service": {
                            "description": "Service and equipment asked in the change request:\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "service_code": {
                                    "description": "The code of the service.\nThe possible value are:\n- TOWING: Tow the vehicle from one place to another place\n- REPAIR_ON_SPOT: Repair the vehicle directly on the location of the incident\n- LIFTING_CRANE: Lift the vehicle\n- DELIVERY: Deliver the vehicle (repaired, replacement or hired) to the customer location\n- STORAGE: Put the vehicle in a secure location\n- REPATRIATION: Tow the vehicle from one place to another place, but on very long distance\n",
                                    "type": "string",
                                    "enum": [
                                      "TOWING",
                                      "REPAIR_ON_SPOT",
                                      "LIFTING_CRANE",
                                      "DELIVERY",
                                      "STORAGE",
                                      "REPATRIATION"
                                    ],
                                    "example": "TOWING"
                                  },
                                  "service_qualifiers": {
                                    "description": "List of service qualifiers that detail the service to provide.\nThe possible combinations are the following:\n\n| Service_code           | Possible Service_qualifier                     |\n| ---------------------- | -----------------------------------------------|\n| TOWING                 | _no possible values_ |\n| REPAIR_ON_SPOT         | MOBILE_DRAIN, EV_CHARGING, JUMP_START, TIRE_REPLACEMENT, BATTERY_REPLACEMENT, OTHER_REGULAR_ROS|\n| LIFTING_CRANE          | _no possible values_ |\n| DELIVERY               | _no possible values_ |\n| STORAGE                | _no possible values_ |\n| REPATRIATION           | _no possible values_ |\n\nQualifiers description:\n- MOBILE_DRAIN: Drain fuel within tank of car because of a misfuelling and fill the tank with the correct fuel.\n- EV_CHARGING: Charge the electric vehicule on spot\n- JUMP_START: Start a car with a flat battery with jump leads or by a sudden release of the clutch while the car is being pushed.\n- TIRE_REPLACEMENT: Replacement of a tire of the vehicle.\n- BATTERY_REPLACEMENT: Replacement of the battery of the vehicle.\n- OTHER_REGULAR_ROS: Other breakdown that can be repaired on spot\n",
                                    "type": "array",
                                    "maxItems": 5,
                                    "example": [
                                      "MOBILE_DRAIN",
                                      "JUMP_START"
                                    ],
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "MOBILE_DRAIN",
                                        "EV_CHARGING",
                                        "JUMP_START",
                                        "TIRE_REPLACEMENT",
                                        "BATTERY_REPLACEMENT",
                                        "OTHER_REGULAR_ROS"
                                      ]
                                    }
                                  },
                                  "equipments": {
                                    "description": "List of equipment items needed by the provider to perform its mission.\nThe possible values are:\n- 4X4: 4x4,\n- AIR_CUSHIONS: Air cushions\n- COMMERCIAL_LOW_LOADER_HV: Commercial low loader,\n- COVERED_TRANSPORTER: Covered transporter,\n- EXTRACTOR_EQUIPMENT: Extrator equipment,\n- SKATES_GOJACK: Dolly / gojack carts,\n- SLA_TRANSPORTER: SLA transporter,\n- STOLEN_WHEELS_KIT: Stolen wheels kit,\n- TEMPORARY_SPARE_TIRES: Temporary spare tires,\n- TYRE_VAN: Tyre van,\n- UNIMOG_TRACTOR: Unimog tractor\n",
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "4X4",
                                        "AIR_CUSHIONS",
                                        "COMMERCIAL_LOW_LOADER_HV",
                                        "COVERED_TRANSPORTER",
                                        "EXTRACTOR_EQUIPMENT",
                                        "SKATES_GOJACK",
                                        "SLA_TRANSPORTER",
                                        "STOLEN_WHEELS_KIT",
                                        "TEMPORARY_SPARE_TIRES",
                                        "TYRE_VAN",
                                        "UNIMOG_TRACTOR"
                                      ]
                                    },
                                    "example": [
                                      "STOLEN_WHEELS_KIT",
                                      "TEMPORARY_SPARE_TIRES"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "incident_location": {
                            "description": "Starting location of the provider at the begining of the mission.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "description": "The address of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "coordinates": {
                                    "description": "The GPS coordinates of the incident location.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                          "longitude": {
                                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 2.3488
                                          },
                                          "latitude": {
                                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                            "type": "number",
                                            "example": 48.85341
                                          }
                                        },
                                        "required": [
                                          "longitude",
                                          "latitude"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address"
                                ],
                                "additionalProperties": false
                              },
                              {
                                "properties": {
                                  "is_underground": {
                                    "description": "Define if the vehicle is underground or not.",
                                    "type": "boolean",
                                    "example": false
                                  }
                                }
                              }
                            ]
                          },
                          "service_destination": {
                            "description": "Information about service destination.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "The service destination name.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Garage du Morvan"
                                  },
                                  "category": {
                                    "description": "The service destination category.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "Garage"
                                  },
                                  "address": {
                                    "description": "The service destination address.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "street_address": {
                                            "description": "Street address.",
                                            "type": "string",
                                            "maxLength": 1024,
                                            "example": "7 rue de l'abreuvoir, Batiment C"
                                          },
                                          "subdivision": {
                                            "description": "Area of the city, or department name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "HAUTS-DE-SEINE"
                                          },
                                          "postal_code": {
                                            "description": "Postal code or zip code.",
                                            "type": "string",
                                            "maxLength": 20,
                                            "example": "92400"
                                          },
                                          "locality": {
                                            "description": "City name.",
                                            "type": "string",
                                            "maxLength": 50,
                                            "example": "Courbevoie"
                                          },
                                          "country": {
                                            "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                            "type": "string",
                                            "example": "FR",
                                            "minLength": 2,
                                            "maxLength": 2
                                          }
                                        },
                                        "required": [
                                          "street_address",
                                          "postal_code",
                                          "locality",
                                          "country"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "address"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "problem_context": {
                            "description": "The final description of the problem.\nIn order to give information, at least one of the properties is mandatory.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "problem_code": {
                                    "description": "The code of the problem.\nThe possible value are:\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low ADBLUE level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDOW_MECHANISM: Window mechanism\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                                    "type": "string",
                                    "enum": [
                                      "ACCELERATOR_CABLE",
                                      "ACCIDENT",
                                      "ALTERNATOR",
                                      "AMBER_WARNING_LIGHTS",
                                      "BACK_WINDOW_BROKEN",
                                      "BODYWORK",
                                      "BOGGED_DOWN",
                                      "BRAKE_LIGHTS",
                                      "BRAKES_FAILURE",
                                      "BRAKES_PADS_NOISE",
                                      "BRAKES_SEIZED",
                                      "BROKEN_MIRRORS",
                                      "BROKEN_WINDSCREEN",
                                      "CAM_BELT",
                                      "CHARGING_PROBLEM_EV",
                                      "CHIPPED_CRACKED_BACK_WINDOW",
                                      "CHIPPED_CRACKED_WINDOW",
                                      "CHIPPED_CRACKED_WINDSCREEN",
                                      "CLUTCH_FAILURE",
                                      "CLUTCH_LINKAGE",
                                      "CONTAMINATED_OIL",
                                      "COOLANT_LEAK",
                                      "DAMAGED_WHEEL",
                                      "DEATH",
                                      "DIESEL_IN_PETROL",
                                      "DIESEL_LEAK",
                                      "DOOR_BONNET_BOOT",
                                      "DOOR_LOCK",
                                      "DRIVER_MIRROR_BROKEN",
                                      "DRIVER_NOT_FEELING_WELL",
                                      "ELECTRICS_PROBLEM",
                                      "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                                      "EXHAUST",
                                      "FALL_OF_HAIL_ON_VEHICLE",
                                      "FALL_OF_OBJECTS_ON_VEHICLE",
                                      "FILLER_CAP",
                                      "FINE",
                                      "FIRE",
                                      "FLAT_BATTERY",
                                      "FLAT_TYRE_LWNK_MISSING",
                                      "FLAT_TYRE_WITH_SPARE",
                                      "FLAT_TYRE_WITHOUT_SPARE",
                                      "FLOOD",
                                      "FOG_LIGHTS",
                                      "FROZEN_FUEL",
                                      "FROZEN_KEYHOLE",
                                      "FUEL_LEAK",
                                      "GEAR_LINKAGE",
                                      "GEARBOX_AUTO",
                                      "GEARBOX_MANUAL",
                                      "HAND_BRAKE",
                                      "HEAD_LIGHTS",
                                      "IMMOBILIZER_ALARM",
                                      "INDICATORS",
                                      "KEY_BROKEN",
                                      "KEY_CARD_NOT_RECOGNIZED",
                                      "KEYS_LOCKED_IN_CAR",
                                      "KEYS_LOST",
                                      "KEYS_STOLEN",
                                      "LATERAL_WINDOW_BROKEN",
                                      "LOSS_OF_POWER",
                                      "LOW_ADBLUE_LEVEL",
                                      "LOW_CHARGE_EV",
                                      "MULTIPLE_FLAT_TYRES",
                                      "MULTIPLE_WHEELS_STOLEN",
                                      "NATURAL_DISASTER",
                                      "NON_STARTER",
                                      "NON_STARTER_DOK",
                                      "NON_STARTER_WONT_FIRE",
                                      "NUTS_BOLTS_LOOSE",
                                      "NUTS_BOLTS_MISSING_BROKEN",
                                      "OIL_LEAK",
                                      "OIL_LEVEL_LOW",
                                      "OTHER_CLIMATIC_EVENT",
                                      "OUT_OF_DIESEL",
                                      "OUT_OF_FUEL",
                                      "OUT_OF_LPG",
                                      "OUT_OF_PETROL",
                                      "OVERHEAT",
                                      "PARTIAL_THEFT",
                                      "PASSENGER_MIRROR_BROKEN",
                                      "PETROL_IN_DIESEL",
                                      "PETROL_LEAK",
                                      "POWER_OF_STEERING_FAILURE",
                                      "RED_WARNING_LIGHT",
                                      "SMOKE",
                                      "STARTER_MOTOR",
                                      "STEERING_FAILURE",
                                      "STEERING_LOCK_IGNITION_BARREL",
                                      "STRANGE_NOISE_WHEN_DRIVING",
                                      "STUCK_IN_SNOW",
                                      "SUN_ROOF_WONT_CLOSE",
                                      "SUSPENSION",
                                      "TAIL_LIGHTS",
                                      "THEFT_ATTEMPT",
                                      "THEFT_ATTEMPT_BROKEN_GLASS",
                                      "THEFT_ATTEMPT_IGNITION_BROKEN",
                                      "THEFT_ATTEMPT_LOCK_BROKEN",
                                      "UNIDENTIFIED_BREAKDOWN",
                                      "UNKNOWN_FLUID_LEAKING",
                                      "VANDALISM",
                                      "VANDALISM_BODYWORK_DAMAGE",
                                      "VANDALISM_FLAT_TYRE_WITH_SPARE",
                                      "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                                      "VANDALISM_MULTIPLE_FLAT_TYRES",
                                      "VEHICLE_STOLEN_FOUND",
                                      "VEHICLE_STOLEN_NOT_FOUND",
                                      "VEHICLE_STOPPED_ENGINE_RUNNING",
                                      "VEHICLE_STUCK_IN_ICE",
                                      "WATER_LEAK",
                                      "WATER_OR_DIRT_IN_FUEL",
                                      "WHEEL_ADRIFT",
                                      "WHEEL_BEARINGS",
                                      "WHEEL_STOLEN",
                                      "WINDOW_MECHANISM",
                                      "WINDSCREEN_WIPERS",
                                      "WRONG_FUEL"
                                    ],
                                    "example": "ENGINE_STOPPED_NO_RESTART_POSSIBLE"
                                  },
                                  "problem_label": {
                                    "description": "Problem label.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "engine failure"
                                  },
                                  "problem_description": {
                                    "description": "The problem description is used to describe quickly the problem.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "The vehicle seems not have a engine failure. The engine stopped"
                                  },
                                  "problem_detail": {
                                    "description": "The problem detail is required to detail deeply the problem.",
                                    "type": "string",
                                    "maxLength": 2048,
                                    "example": "Lot of smoke, starting few minutes before the car stopped"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "vehicle": {
                            "description": "Characteristics of the vehicle.\nIn order to give information, at least one of the properties is mandatory.\n",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "brand": {
                                    "description": "Brand of the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Audi"
                                  },
                                  "model": {
                                    "description": "Model of the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "A5"
                                  },
                                  "age": {
                                    "description": "The age of the vehicle, in years, months, days. ISO 8601 format.\nP01Y9M4DT11H9M8S => period of 1 year, 9 months, 4 days and 11 hours, 9 minutes, 8 seconds.\n",
                                    "type": "string",
                                    "maxLength": 25,
                                    "example": "P01Y9M4DT11H9M8S"
                                  },
                                  "reference_number": {
                                    "description": "The reference number of the vehicle.\nIt is the \"chassis_number\".\n",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "VF1FW57B052967712"
                                  },
                                  "vehicle_type": {
                                    "description": "Type of the vehicle.\nThe values are:\n- AGRICULTURAL_TRUCK: Agricultural truck\n- BIKE: Bike\n- BUS_COACHES: Bus coaches, autocar\n- CAR: car\n- MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n- MOTORCYCLE: Motorcycle\n- TRUCK: Truck\n- VAN: Van\n",
                                    "type": "string",
                                    "enum": [
                                      "AGRICULTURAL_TRUCK",
                                      "BIKE",
                                      "BUS_COACHES",
                                      "CAR",
                                      "MOBILE_HOME_CAMPING_CAR",
                                      "MOTORCYCLE",
                                      "TRUCK",
                                      "VAN"
                                    ],
                                    "example": "CAR"
                                  },
                                  "first_registration_date": {
                                    "description": "The first registration date of the vehicle.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2019-02-23T00:00:00Z"
                                  },
                                  "registration_plate_number": {
                                    "description": "The registration plate number of the vehicle.",
                                    "type": "string",
                                    "maxLength": 20,
                                    "example": "ZZ-999-ZZ"
                                  },
                                  "cylinder_capacity": {
                                    "description": "The cylinder capacity of the vehicle.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured volume.",
                                            "type": "number",
                                            "example": 0.125
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n  - cm3: Cubic centimeter;\n  - dm3: Cubic decimeter;\n  - m3: Cubic meter.\n",
                                            "type": "string",
                                            "enum": [
                                              "cm3",
                                              "dm3",
                                              "m3"
                                            ],
                                            "example": "m3"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "gear_box": {
                                    "description": "The gear box of the vehicle\nThe possible values are:\n- AUTO: Automatic gearbox\n- MANUAL: Manual gearbox\n- SEMI_AUTO: Semi automatic gearbox\n- SPEED_VARIATOR: Speed variator\n- UNKNOWN: Unkown\n",
                                    "type": "string",
                                    "enum": [
                                      "AUTO",
                                      "MANUAL",
                                      "SEMI_AUTO",
                                      "SPEED_VARIATOR",
                                      "UNKNOWN"
                                    ],
                                    "example": "AUTO"
                                  },
                                  "fuel_type": {
                                    "description": "The fuel type of the vehicle.\nThe possible values are:\n- ALCOHOL_ETHANOL: Alcohol ethanol\n- BIO_DIESEL: Biologic Diesel\n- DIESEL: Diesel\n- ELECTRIC: Electricity\n- ELECTRIC_DIESEL: Electricity and diesel hybrid\n- ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n- GASOLINE: Gasoline\n- HYDROGEN: Hydrogen\n- LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n- NATURAL_GAS: Natural gas hybrid\n- UNKNOWN: Unknown\n",
                                    "type": "string",
                                    "example": "LIQUID_PETROL_GAS",
                                    "enum": [
                                      "ALCOHOL_ETHANOL",
                                      "BIO_DIESEL",
                                      "DIESEL",
                                      "ELECTRIC",
                                      "ELECTRIC_DIESEL",
                                      "ELECTRIC_GASOLINE",
                                      "GASOLINE",
                                      "HYDROGEN",
                                      "LIQUID_PETROL_GAS",
                                      "NATURAL_GAS",
                                      "UNKNOWN"
                                    ]
                                  },
                                  "transmission": {
                                    "description": "Define the vehicle transmission.\nThe possible values are:\n- 4WD: Manual 4 WD,\n- 2WD: Manual 2 WD,\n- AWD: Automatic 4 WD,\nWD = Wheels Drive.\n",
                                    "type": "string",
                                    "enum": [
                                      "4WD",
                                      "2WD",
                                      "AWD"
                                    ],
                                    "example": "AWD"
                                  },
                                  "color": {
                                    "description": "The color of the vehicle.",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "blue"
                                  },
                                  "has_trailer": {
                                    "description": "Define the vehicle has trailer or not.",
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "transported_good_type": {
                                    "description": "The type of goods transported by the vehicle.",
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "Jewelry"
                                  },
                                  "gross_vehicle_weight": {
                                    "description": "The gross vehicle weight (GVW).",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured weight.",
                                            "type": "number",
                                            "example": 2.8
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- t: tonne.\n",
                                            "type": "string",
                                            "enum": [
                                              "t"
                                            ],
                                            "example": "t"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "sizes": {
                                    "description": "All size information of the vehicle (length, height, width)",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "unit": {
                                            "description": "Unit of measure of the vehicle\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- m: meter.\n",
                                            "type": "string",
                                            "enum": [
                                              "m"
                                            ],
                                            "example": "m"
                                          },
                                          "length": {
                                            "description": "The vehicle length.",
                                            "type": "number",
                                            "example": 2.8
                                          },
                                          "width": {
                                            "description": "The vehicle width.",
                                            "type": "number",
                                            "example": 1.8
                                          },
                                          "height": {
                                            "description": "The vehicle height.",
                                            "type": "number",
                                            "example": 2
                                          }
                                        },
                                        "required": [
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "proximity_floor": {
                                    "description": "The proximity floor, is used to define the proximity of the vehicle with the flor to provide the most suitable towing. It can be:\n - HIGH: when the car is not near to the floor (ex: 4*4, Land rover, ...)\n - LOW: When the car is very close to the floor (ex: Ferrari, Lamborghini)\n - REGULAR: Standard vehicle\n",
                                    "type": "string",
                                    "enum": [
                                      "HIGH",
                                      "LOW",
                                      "REGULAR"
                                    ],
                                    "example": "HIGH"
                                  },
                                  "mileage": {
                                    "description": "Mileage of the vehicle.",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Measured mileage",
                                            "type": "number",
                                            "example": 213000
                                          },
                                          "unit": {
                                            "description": "Unit of the measure code.\n\nUnified Code for Units of Measure (UCUM) in case sensitive.\n\nThe possible values are:\n- \\[mi_i]: miles,\n- km: kilometers.\n",
                                            "type": "string",
                                            "enum": [
                                              "[mi_i]",
                                              "km"
                                            ],
                                            "example": "km"
                                          }
                                        },
                                        "required": [
                                          "value",
                                          "unit"
                                        ],
                                        "additionalProperties": false
                                      }
                                    ]
                                  },
                                  "is_rolling": {
                                    "description": "Define if the vehicle is rolling or not (a vehicle is rolling when all tires are still present and inflated).",
                                    "type": "boolean",
                                    "example": true
                                  }
                                },
                                "required": [
                                  "registration_plate_number"
                                ],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "appointment_at": {
                            "description": "The appointment date & time.\nUTC date-time, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                            "type": "string",
                            "format": "date-time",
                            "example": "2019-02-23T12:21:26Z"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "person_on_site": {
                    "description": "Contact of the person on site.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "title": {
                            "description": "The title of the contact, its civility.\nThe possible values are:\n- MR\n- MS: Ms\n- MISS: Miss\n- DR: Doctor\n- PR: Professor\n- MRS: Mrs\n- MASTER: Master\n- LADY: Lady\n- SIR: Sir\n- LORD: Lord\n- REVEREND: Reverend\n- SISTER: Sister\n",
                            "type": "string",
                            "enum": [
                              "MR",
                              "MS",
                              "MISS",
                              "DR",
                              "PR",
                              "MRS",
                              "MASTER",
                              "LADY",
                              "SIR",
                              "LORD",
                              "REVEREND",
                              "SISTER"
                            ],
                            "example": "MR"
                          },
                          "first_name": {
                            "description": "The first name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Eric"
                          },
                          "last_name": {
                            "description": "The last name of the contact.",
                            "type": "string",
                            "maxLength": 100,
                            "example": "Dubois"
                          },
                          "phone_number": {
                            "description": "The phone number of the contact (prefix included).",
                            "type": "string",
                            "maxLength": 20,
                            "example": "+33601010101"
                          }
                        },
                        "required": [
                          "last_name"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Content of the mission report.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission report sent successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Mission report already sent or mission completed).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed since the mission is already completed."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.missions.mission_reports.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.missions.mission_reports.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/orders": {
      "post": {
        "summary": "Create and store an order.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "description": "Unique final order identifier.",
                    "type": "string",
                    "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                    "readOnly": true,
                    "maxLength": 150
                  },
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                    "maxLength": 2000
                  },
                  "agent": {
                    "description": "The agent information.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "agent_scope": {
                            "description": "The scope of the agent that create the order.",
                            "type": "string",
                            "example": "2f0cd425",
                            "maxLength": 150
                          },
                          "agent_reference": {
                            "description": "The agent reference.",
                            "type": "string",
                            "example": "QS23ZED4",
                            "maxLength": 150
                          },
                          "agency_reference": {
                            "description": "The agency reference.",
                            "type": "string",
                            "example": "AGC_007_NORD",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  },
                  "customer": {
                    "description": "Customer information.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Customer information.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility.",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "minLength": 2,
                                "maxLength": 4,
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 100
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "maxLength": 100,
                                "example": "Doe"
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              }
                            }
                          },
                          {
                            "properties": {
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "en",
                                "maxLength": 5
                              },
                              "phone": {
                                "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 10
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 50
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ],
                                "example": [
                                  {
                                    "international_prefix": "+33",
                                    "number": "0651201190"
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "example": "150 Avenue de Paris",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "example": "75001",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "example": "Paris",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    }
                                  }
                                ]
                              },
                              "email": {
                                "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                "allOf": [
                                  {
                                    "type": "string",
                                    "format": "email",
                                    "example": "jonathan.doe@mail.com"
                                  }
                                ],
                                "example": "john.doe@mail.com"
                              },
                              "preferred_communication_channel": {
                                "description": "Communication channel on which the person preferred to be contacted.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "example": [
                                  "EMAIL",
                                  "SMS"
                                ]
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "required": [
                          "preferred_communication_channel"
                        ]
                      }
                    ]
                  },
                  "intervention": {
                    "description": "The information of the intervention",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Intervention information.",
                        "properties": {
                          "additional_information": {
                            "description": "Additional information about the intervention.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "I have a leaky faucet"
                          },
                          "address": {
                            "description": "Postal address",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "150 Avenue de Paris",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                }
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Intervention coordinates",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    ]
                  },
                  "incident": {
                    "description": "The incident of the order.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cause": {
                            "description": "Problem code.\nThe available values are :\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low adblue level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WINDOW_MECHANISM: Window Mechanism\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                            "type": "string",
                            "enum": [
                              "ACCELERATOR_CABLE",
                              "ACCIDENT",
                              "ALTERNATOR",
                              "AMBER_WARNING_LIGHTS",
                              "BACK_WINDOW_BROKEN",
                              "BODYWORK",
                              "BOGGED_DOWN",
                              "BRAKE_LIGHTS",
                              "BRAKES_FAILURE",
                              "BRAKES_PADS_NOISE",
                              "BRAKES_SEIZED",
                              "BROKEN_MIRRORS",
                              "BROKEN_WINDSCREEN",
                              "CAM_BELT",
                              "CHARGING_PROBLEM_EV",
                              "CHIPPED_CRACKED_BACK_WINDOW",
                              "CHIPPED_CRACKED_WINDOW",
                              "CHIPPED_CRACKED_WINDSCREEN",
                              "CLUTCH_FAILURE",
                              "CLUTCH_LINKAGE",
                              "CONTAMINATED_OIL",
                              "COOLANT_LEAK",
                              "DAMAGED_WHEEL",
                              "DEATH",
                              "DIESEL_IN_PETROL",
                              "DIESEL_LEAK",
                              "DOOR_BONNET_BOOT",
                              "DOOR_LOCK",
                              "DRIVER_MIRROR_BROKEN",
                              "DRIVER_NOT_FEELING_WELL",
                              "ELECTRICS_PROBLEM",
                              "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                              "EXHAUST",
                              "FALL_OF_HAIL_ON_VEHICLE",
                              "FALL_OF_OBJECTS_ON_VEHICLE",
                              "FILLER_CAP",
                              "FINE",
                              "FIRE",
                              "FLAT_BATTERY",
                              "FLAT_TYRE_LWNK_MISSING",
                              "FLAT_TYRE_WITH_SPARE",
                              "FLAT_TYRE_WITHOUT_SPARE",
                              "FLOOD",
                              "FOG_LIGHTS",
                              "FROZEN_FUEL",
                              "FROZEN_KEYHOLE",
                              "FUEL_LEAK",
                              "GEAR_LINKAGE",
                              "GEARBOX_AUTO",
                              "GEARBOX_MANUAL",
                              "HAND_BRAKE",
                              "HEAD_LIGHTS",
                              "IMMOBILIZER_ALARM",
                              "INDICATORS",
                              "KEY_BROKEN",
                              "KEY_CARD_NOT_RECOGNIZED",
                              "KEYS_LOCKED_IN_CAR",
                              "KEYS_LOST",
                              "KEYS_STOLEN",
                              "LATERAL_WINDOW_BROKEN",
                              "LOSS_OF_POWER",
                              "LOW_ADBLUE_LEVEL",
                              "LOW_CHARGE_EV",
                              "MULTIPLE_FLAT_TYRES",
                              "MULTIPLE_WHEELS_STOLEN",
                              "NATURAL_DISASTER",
                              "NON_STARTER",
                              "NON_STARTER_DOK",
                              "NON_STARTER_WONT_FIRE",
                              "NUTS_BOLTS_LOOSE",
                              "NUTS_BOLTS_MISSING_BROKEN",
                              "OIL_LEAK",
                              "OIL_LEVEL_LOW",
                              "OTHER_CLIMATIC_EVENT",
                              "OUT_OF_DIESEL",
                              "OUT_OF_FUEL",
                              "OUT_OF_LPG",
                              "OUT_OF_PETROL",
                              "OVERHEAT",
                              "PARTIAL_THEFT",
                              "PASSENGER_MIRROR_BROKEN",
                              "PETROL_IN_DIESEL",
                              "PETROL_LEAK",
                              "POWER_OF_STEERING_FAILURE",
                              "RED_WARNING_LIGHT",
                              "SMOKE",
                              "STARTER_MOTOR",
                              "STEERING_FAILURE",
                              "STEERING_LOCK_IGNITION_BARREL",
                              "STRANGE_NOISE_WHEN_DRIVING",
                              "STUCK_IN_SNOW",
                              "SUN_ROOF_WONT_CLOSE",
                              "SUSPENSION",
                              "TAIL_LIGHTS",
                              "THEFT_ATTEMPT",
                              "THEFT_ATTEMPT_BROKEN_GLASS",
                              "THEFT_ATTEMPT_IGNITION_BROKEN",
                              "THEFT_ATTEMPT_LOCK_BROKEN",
                              "UNIDENTIFIED_BREAKDOWN",
                              "UNKNOWN_FLUID_LEAKING",
                              "VANDALISM",
                              "VANDALISM_BODYWORK_DAMAGE",
                              "VANDALISM_FLAT_TYRE_WITH_SPARE",
                              "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                              "VANDALISM_MULTIPLE_FLAT_TYRES",
                              "VEHICLE_STOLEN_FOUND",
                              "VEHICLE_STOLEN_NOT_FOUND",
                              "VEHICLE_STOPPED_ENGINE_RUNNING",
                              "VEHICLE_STUCK_IN_ICE",
                              "WATER_LEAK",
                              "WATER_OR_DIRT_IN_FUEL",
                              "WINDOW_MECHANISM",
                              "WHEEL_ADRIFT",
                              "WHEEL_BEARINGS",
                              "WHEEL_STOLEN",
                              "WINDSCREEN_WIPERS",
                              "WRONG_FUEL"
                            ],
                            "example": "ACCIDENT"
                          }
                        }
                      }
                    ]
                  },
                  "related_service_order_id": {
                    "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                    "type": "string",
                    "format": "uuid",
                    "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                    "maxLength": 150
                  },
                  "origin_case_reference": {
                    "description": "Reference of the case that originates the order.",
                    "type": "string",
                    "example": "1X2D3F",
                    "maxLength": 100
                  },
                  "origin_service_reference": {
                    "description": "Reference of the covered service (Service managed by CMS) that originates the \"on demand service\" order.",
                    "type": "string",
                    "example": "a1o1X000001SY9eQAG",
                    "maxLength": 100
                  }
                },
                "required": [
                  "quote_code"
                ]
              }
            }
          },
          "description": "Order information."
        },
        "responses": {
          "201": {
            "description": "Order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "2f0cd425",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "customer": {
                      "description": "Customer information.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Customer information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Doe"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "intervention": {
                      "description": "The information of the intervention",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Intervention information.",
                          "properties": {
                            "additional_information": {
                              "description": "Additional information about the intervention.",
                              "type": "string",
                              "maxLength": 2000,
                              "example": "I have a leaky faucet"
                            },
                            "address": {
                              "description": "Postal address",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "150 Avenue de Paris",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 10
                                    },
                                    "city": {
                                      "description": "City.",
                                      "type": "string",
                                      "example": "Paris",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    }
                                  }
                                }
                              ]
                            },
                            "coordinates": {
                              "description": "Intervention coordinates",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "longitude": {
                                      "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 2.3488
                                    },
                                    "latitude": {
                                      "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 48.85341
                                    }
                                  },
                                  "required": [
                                    "longitude",
                                    "latitude"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "address"
                          ]
                        }
                      ]
                    },
                    "incident": {
                      "description": "The incident of the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cause": {
                              "description": "Problem code.\nThe available values are :\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low adblue level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WINDOW_MECHANISM: Window Mechanism\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                              "type": "string",
                              "enum": [
                                "ACCELERATOR_CABLE",
                                "ACCIDENT",
                                "ALTERNATOR",
                                "AMBER_WARNING_LIGHTS",
                                "BACK_WINDOW_BROKEN",
                                "BODYWORK",
                                "BOGGED_DOWN",
                                "BRAKE_LIGHTS",
                                "BRAKES_FAILURE",
                                "BRAKES_PADS_NOISE",
                                "BRAKES_SEIZED",
                                "BROKEN_MIRRORS",
                                "BROKEN_WINDSCREEN",
                                "CAM_BELT",
                                "CHARGING_PROBLEM_EV",
                                "CHIPPED_CRACKED_BACK_WINDOW",
                                "CHIPPED_CRACKED_WINDOW",
                                "CHIPPED_CRACKED_WINDSCREEN",
                                "CLUTCH_FAILURE",
                                "CLUTCH_LINKAGE",
                                "CONTAMINATED_OIL",
                                "COOLANT_LEAK",
                                "DAMAGED_WHEEL",
                                "DEATH",
                                "DIESEL_IN_PETROL",
                                "DIESEL_LEAK",
                                "DOOR_BONNET_BOOT",
                                "DOOR_LOCK",
                                "DRIVER_MIRROR_BROKEN",
                                "DRIVER_NOT_FEELING_WELL",
                                "ELECTRICS_PROBLEM",
                                "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                                "EXHAUST",
                                "FALL_OF_HAIL_ON_VEHICLE",
                                "FALL_OF_OBJECTS_ON_VEHICLE",
                                "FILLER_CAP",
                                "FINE",
                                "FIRE",
                                "FLAT_BATTERY",
                                "FLAT_TYRE_LWNK_MISSING",
                                "FLAT_TYRE_WITH_SPARE",
                                "FLAT_TYRE_WITHOUT_SPARE",
                                "FLOOD",
                                "FOG_LIGHTS",
                                "FROZEN_FUEL",
                                "FROZEN_KEYHOLE",
                                "FUEL_LEAK",
                                "GEAR_LINKAGE",
                                "GEARBOX_AUTO",
                                "GEARBOX_MANUAL",
                                "HAND_BRAKE",
                                "HEAD_LIGHTS",
                                "IMMOBILIZER_ALARM",
                                "INDICATORS",
                                "KEY_BROKEN",
                                "KEY_CARD_NOT_RECOGNIZED",
                                "KEYS_LOCKED_IN_CAR",
                                "KEYS_LOST",
                                "KEYS_STOLEN",
                                "LATERAL_WINDOW_BROKEN",
                                "LOSS_OF_POWER",
                                "LOW_ADBLUE_LEVEL",
                                "LOW_CHARGE_EV",
                                "MULTIPLE_FLAT_TYRES",
                                "MULTIPLE_WHEELS_STOLEN",
                                "NATURAL_DISASTER",
                                "NON_STARTER",
                                "NON_STARTER_DOK",
                                "NON_STARTER_WONT_FIRE",
                                "NUTS_BOLTS_LOOSE",
                                "NUTS_BOLTS_MISSING_BROKEN",
                                "OIL_LEAK",
                                "OIL_LEVEL_LOW",
                                "OTHER_CLIMATIC_EVENT",
                                "OUT_OF_DIESEL",
                                "OUT_OF_FUEL",
                                "OUT_OF_LPG",
                                "OUT_OF_PETROL",
                                "OVERHEAT",
                                "PARTIAL_THEFT",
                                "PASSENGER_MIRROR_BROKEN",
                                "PETROL_IN_DIESEL",
                                "PETROL_LEAK",
                                "POWER_OF_STEERING_FAILURE",
                                "RED_WARNING_LIGHT",
                                "SMOKE",
                                "STARTER_MOTOR",
                                "STEERING_FAILURE",
                                "STEERING_LOCK_IGNITION_BARREL",
                                "STRANGE_NOISE_WHEN_DRIVING",
                                "STUCK_IN_SNOW",
                                "SUN_ROOF_WONT_CLOSE",
                                "SUSPENSION",
                                "TAIL_LIGHTS",
                                "THEFT_ATTEMPT",
                                "THEFT_ATTEMPT_BROKEN_GLASS",
                                "THEFT_ATTEMPT_IGNITION_BROKEN",
                                "THEFT_ATTEMPT_LOCK_BROKEN",
                                "UNIDENTIFIED_BREAKDOWN",
                                "UNKNOWN_FLUID_LEAKING",
                                "VANDALISM",
                                "VANDALISM_BODYWORK_DAMAGE",
                                "VANDALISM_FLAT_TYRE_WITH_SPARE",
                                "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                                "VANDALISM_MULTIPLE_FLAT_TYRES",
                                "VEHICLE_STOLEN_FOUND",
                                "VEHICLE_STOLEN_NOT_FOUND",
                                "VEHICLE_STOPPED_ENGINE_RUNNING",
                                "VEHICLE_STUCK_IN_ICE",
                                "WATER_LEAK",
                                "WATER_OR_DIRT_IN_FUEL",
                                "WINDOW_MECHANISM",
                                "WHEEL_ADRIFT",
                                "WHEEL_BEARINGS",
                                "WHEEL_STOLEN",
                                "WINDSCREEN_WIPERS",
                                "WRONG_FUEL"
                              ],
                              "example": "ACCIDENT"
                            }
                          }
                        }
                      ]
                    },
                    "related_service_order_id": {
                      "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    },
                    "origin_case_reference": {
                      "description": "Reference of the case that originates the order.",
                      "type": "string",
                      "example": "1X2D3F",
                      "maxLength": 100
                    },
                    "origin_service_reference": {
                      "description": "Reference of the covered service (Service managed by CMS) that originates the \"on demand service\" order.",
                      "type": "string",
                      "example": "a1o1X000001SY9eQAG",
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/orders/{order_id}": {
      "get": {
        "summary": "Retrieve order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "description": "Unique final order identifier.",
                      "type": "string",
                      "example": "ff4cdbd0-cdea-4585-951e-448a2819e05b",
                      "readOnly": true,
                      "maxLength": 150
                    },
                    "quote_code": {
                      "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                      "type": "string",
                      "example": "eJytUE1PwzAM/S85d6iFfYgeEUMgcUDALlwsr3FLUOoUN5k2TfvvJN2ASpyQdrTfh9",
                      "maxLength": 2000
                    },
                    "agent": {
                      "description": "The agent information.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "agent_scope": {
                              "description": "The scope of the agent that create the order.",
                              "type": "string",
                              "example": "2f0cd425",
                              "maxLength": 150
                            },
                            "agent_reference": {
                              "description": "The agent reference.",
                              "type": "string",
                              "example": "QS23ZED4",
                              "maxLength": 150
                            },
                            "agency_reference": {
                              "description": "The agency reference.",
                              "type": "string",
                              "example": "AGC_007_NORD",
                              "maxLength": 150
                            }
                          }
                        }
                      ]
                    },
                    "customer": {
                      "description": "Customer information.",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Customer information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "description": "Civility.",
                                  "type": "string",
                                  "enum": [
                                    "MR",
                                    "MS",
                                    "MISS",
                                    "DR",
                                    "PR"
                                  ],
                                  "minLength": 2,
                                  "maxLength": 4,
                                  "example": "MR"
                                },
                                "first_name": {
                                  "description": "First name.",
                                  "type": "string",
                                  "example": "John",
                                  "maxLength": 100
                                },
                                "middle_name": {
                                  "description": "Middle name.",
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "last_name": {
                                  "description": "Last name.",
                                  "type": "string",
                                  "maxLength": 100,
                                  "example": "Doe"
                                },
                                "birth_date": {
                                  "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                  "type": "string",
                                  "format": "date",
                                  "example": "1990-04-25"
                                }
                              }
                            },
                            {
                              "properties": {
                                "spoken_language": {
                                  "description": "Spoken language, IANA language codification.",
                                  "type": "string",
                                  "example": "en",
                                  "maxLength": 5
                                },
                                "phone": {
                                  "description": "Phone number.\n** Required if preferred_communication_channel contain _SMS_ **\n",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "international_prefix": {
                                          "description": "Prefix to be added to be called from abroad.",
                                          "type": "string",
                                          "maxLength": 10
                                        },
                                        "number": {
                                          "description": "Phone number. Can be local or international.",
                                          "type": "string",
                                          "maxLength": 50
                                        }
                                      },
                                      "required": [
                                        "number"
                                      ]
                                    }
                                  ],
                                  "example": [
                                    {
                                      "international_prefix": "+33",
                                      "number": "0651201190"
                                    }
                                  ]
                                },
                                "address": {
                                  "description": "Postal address",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "150 Avenue de Paris",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      }
                                    }
                                  ]
                                },
                                "email": {
                                  "description": "Email address. ** Required if preferred_communication_channel contain _EMAIL_ **\n",
                                  "allOf": [
                                    {
                                      "type": "string",
                                      "format": "email",
                                      "example": "jonathan.doe@mail.com"
                                    }
                                  ],
                                  "example": "john.doe@mail.com"
                                },
                                "preferred_communication_channel": {
                                  "description": "Communication channel on which the person preferred to be contacted.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "EMAIL",
                                      "SMS"
                                    ]
                                  },
                                  "example": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "registrations": {
                                  "description": "List of customer registrations.",
                                  "type": "array",
                                  "maxItems": 2,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "registration_type": {
                                        "description": "Type of person registration.",
                                        "type": "string",
                                        "enum": [
                                          "ID_CARD",
                                          "TAX_REGISTRATION"
                                        ]
                                      },
                                      "value": {
                                        "description": "Value of the registration.",
                                        "maxLength": 20,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "required": [
                            "preferred_communication_channel"
                          ]
                        }
                      ]
                    },
                    "intervention": {
                      "description": "The information of the intervention",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Intervention information.",
                          "properties": {
                            "additional_information": {
                              "description": "Additional information about the intervention.",
                              "type": "string",
                              "maxLength": 2000,
                              "example": "I have a leaky faucet"
                            },
                            "address": {
                              "description": "Postal address",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "street_address": {
                                      "description": "Street address.",
                                      "type": "string",
                                      "example": "150 Avenue de Paris",
                                      "maxLength": 255
                                    },
                                    "postal_code": {
                                      "description": "Postal code or zip code.",
                                      "type": "string",
                                      "example": "75001",
                                      "maxLength": 10
                                    },
                                    "city": {
                                      "description": "City.",
                                      "type": "string",
                                      "example": "Paris",
                                      "maxLength": 100
                                    },
                                    "country": {
                                      "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                      "type": "string",
                                      "example": "FR",
                                      "minLength": 2,
                                      "maxLength": 2
                                    }
                                  }
                                }
                              ]
                            },
                            "coordinates": {
                              "description": "Intervention coordinates",
                              "allOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "longitude": {
                                      "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 2.3488
                                    },
                                    "latitude": {
                                      "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                      "type": "number",
                                      "example": 48.85341
                                    }
                                  },
                                  "required": [
                                    "longitude",
                                    "latitude"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "address"
                          ]
                        }
                      ]
                    },
                    "incident": {
                      "description": "The incident of the order.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cause": {
                              "description": "Problem code.\nThe available values are :\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low adblue level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WINDOW_MECHANISM: Window Mechanism\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                              "type": "string",
                              "enum": [
                                "ACCELERATOR_CABLE",
                                "ACCIDENT",
                                "ALTERNATOR",
                                "AMBER_WARNING_LIGHTS",
                                "BACK_WINDOW_BROKEN",
                                "BODYWORK",
                                "BOGGED_DOWN",
                                "BRAKE_LIGHTS",
                                "BRAKES_FAILURE",
                                "BRAKES_PADS_NOISE",
                                "BRAKES_SEIZED",
                                "BROKEN_MIRRORS",
                                "BROKEN_WINDSCREEN",
                                "CAM_BELT",
                                "CHARGING_PROBLEM_EV",
                                "CHIPPED_CRACKED_BACK_WINDOW",
                                "CHIPPED_CRACKED_WINDOW",
                                "CHIPPED_CRACKED_WINDSCREEN",
                                "CLUTCH_FAILURE",
                                "CLUTCH_LINKAGE",
                                "CONTAMINATED_OIL",
                                "COOLANT_LEAK",
                                "DAMAGED_WHEEL",
                                "DEATH",
                                "DIESEL_IN_PETROL",
                                "DIESEL_LEAK",
                                "DOOR_BONNET_BOOT",
                                "DOOR_LOCK",
                                "DRIVER_MIRROR_BROKEN",
                                "DRIVER_NOT_FEELING_WELL",
                                "ELECTRICS_PROBLEM",
                                "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                                "EXHAUST",
                                "FALL_OF_HAIL_ON_VEHICLE",
                                "FALL_OF_OBJECTS_ON_VEHICLE",
                                "FILLER_CAP",
                                "FINE",
                                "FIRE",
                                "FLAT_BATTERY",
                                "FLAT_TYRE_LWNK_MISSING",
                                "FLAT_TYRE_WITH_SPARE",
                                "FLAT_TYRE_WITHOUT_SPARE",
                                "FLOOD",
                                "FOG_LIGHTS",
                                "FROZEN_FUEL",
                                "FROZEN_KEYHOLE",
                                "FUEL_LEAK",
                                "GEAR_LINKAGE",
                                "GEARBOX_AUTO",
                                "GEARBOX_MANUAL",
                                "HAND_BRAKE",
                                "HEAD_LIGHTS",
                                "IMMOBILIZER_ALARM",
                                "INDICATORS",
                                "KEY_BROKEN",
                                "KEY_CARD_NOT_RECOGNIZED",
                                "KEYS_LOCKED_IN_CAR",
                                "KEYS_LOST",
                                "KEYS_STOLEN",
                                "LATERAL_WINDOW_BROKEN",
                                "LOSS_OF_POWER",
                                "LOW_ADBLUE_LEVEL",
                                "LOW_CHARGE_EV",
                                "MULTIPLE_FLAT_TYRES",
                                "MULTIPLE_WHEELS_STOLEN",
                                "NATURAL_DISASTER",
                                "NON_STARTER",
                                "NON_STARTER_DOK",
                                "NON_STARTER_WONT_FIRE",
                                "NUTS_BOLTS_LOOSE",
                                "NUTS_BOLTS_MISSING_BROKEN",
                                "OIL_LEAK",
                                "OIL_LEVEL_LOW",
                                "OTHER_CLIMATIC_EVENT",
                                "OUT_OF_DIESEL",
                                "OUT_OF_FUEL",
                                "OUT_OF_LPG",
                                "OUT_OF_PETROL",
                                "OVERHEAT",
                                "PARTIAL_THEFT",
                                "PASSENGER_MIRROR_BROKEN",
                                "PETROL_IN_DIESEL",
                                "PETROL_LEAK",
                                "POWER_OF_STEERING_FAILURE",
                                "RED_WARNING_LIGHT",
                                "SMOKE",
                                "STARTER_MOTOR",
                                "STEERING_FAILURE",
                                "STEERING_LOCK_IGNITION_BARREL",
                                "STRANGE_NOISE_WHEN_DRIVING",
                                "STUCK_IN_SNOW",
                                "SUN_ROOF_WONT_CLOSE",
                                "SUSPENSION",
                                "TAIL_LIGHTS",
                                "THEFT_ATTEMPT",
                                "THEFT_ATTEMPT_BROKEN_GLASS",
                                "THEFT_ATTEMPT_IGNITION_BROKEN",
                                "THEFT_ATTEMPT_LOCK_BROKEN",
                                "UNIDENTIFIED_BREAKDOWN",
                                "UNKNOWN_FLUID_LEAKING",
                                "VANDALISM",
                                "VANDALISM_BODYWORK_DAMAGE",
                                "VANDALISM_FLAT_TYRE_WITH_SPARE",
                                "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                                "VANDALISM_MULTIPLE_FLAT_TYRES",
                                "VEHICLE_STOLEN_FOUND",
                                "VEHICLE_STOLEN_NOT_FOUND",
                                "VEHICLE_STOPPED_ENGINE_RUNNING",
                                "VEHICLE_STUCK_IN_ICE",
                                "WATER_LEAK",
                                "WATER_OR_DIRT_IN_FUEL",
                                "WINDOW_MECHANISM",
                                "WHEEL_ADRIFT",
                                "WHEEL_BEARINGS",
                                "WHEEL_STOLEN",
                                "WINDSCREEN_WIPERS",
                                "WRONG_FUEL"
                              ],
                              "example": "ACCIDENT"
                            }
                          }
                        }
                      ]
                    },
                    "related_service_order_id": {
                      "description": "Existing service order identifier. (This service order will be canceled and replaced by a new service order created by using the current order)\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                      "maxLength": 150
                    },
                    "origin_case_reference": {
                      "description": "Reference of the case that originates the order.",
                      "type": "string",
                      "example": "1X2D3F",
                      "maxLength": 100
                    },
                    "origin_service_reference": {
                      "description": "Reference of the covered service (Service managed by CMS) that originates the \"on demand service\" order.",
                      "type": "string",
                      "example": "a1o1X000001SY9eQAG",
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "quote_code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.orders.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/products": {
      "get": {
        "summary": "Gets products for motor service.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "accept-language",
            "description": "Accepted language, IANA language codification. If language not managed, \"en\" will be used by default.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "name": "country",
            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            }
          },
          {
            "name": "currency",
            "description": "Customer currency, ISO 4217 format (3 letter code).",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 3
            }
          },
          {
            "name": "universe",
            "description": "The universe, example: Motor Emergency.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "coverage_category",
            "description": "Coverage category, example: Electricity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_code",
            "description": "Catalog code, example: SR001.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "name": "catalog_version",
            "description": "Catalog version, example: 2.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "context": {
                        "description": "Context of the request.",
                        "type": "object",
                        "properties": {
                          "country": {
                            "description": "Customer country, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "currency": {
                            "description": "Customer currency, ISO 4217 format (3 letter code).",
                            "type": "string",
                            "example": "EUR",
                            "maxLength": 3
                          }
                        },
                        "required": [
                          "currency"
                        ]
                      },
                      "products": {
                        "description": "Products list",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "properties": {
                            "product_code": {
                              "description": "Product code.",
                              "type": "string",
                              "example": "KV5-33",
                              "maxLength": 50
                            },
                            "name": {
                              "description": "Product name.",
                              "type": "string",
                              "example": "Advanced",
                              "maxLength": 100
                            },
                            "description": {
                              "description": "Product marketing description",
                              "type": "string",
                              "example": "Advanced for more guarantees.",
                              "maxLength": 100
                            },
                            "coverages": {
                              "description": "Set of coverages included in the product.",
                              "type": "array",
                              "maxItems": 50,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "description": "Type of coverage.",
                                    "type": "string",
                                    "example": "SERVICE",
                                    "maxLength": 50
                                  },
                                  "class": {
                                    "description": "Class of coverage.",
                                    "type": "string",
                                    "example": "ACCIDENT_01",
                                    "maxLength": 50
                                  },
                                  "category": {
                                    "description": "Coverage category.",
                                    "type": "string",
                                    "example": "plumbing",
                                    "maxLength": 50
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Electronic Assistance.",
                                    "maxLength": 100
                                  },
                                  "description": {
                                    "description": "Description.",
                                    "type": "string",
                                    "example": "Customer assistance for electronics.",
                                    "maxLength": 500
                                  },
                                  "limits": {
                                    "description": "List of limits of the coverage.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "exclusions": {
                                    "description": "List of exclusions.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  },
                                  "benefits": {
                                    "description": "List of benefits.",
                                    "type": "array",
                                    "maxItems": 10,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "description": "Label.",
                                          "type": "string",
                                          "maxLength": 50
                                        },
                                        "description": {
                                          "description": "Description.",
                                          "type": "string",
                                          "maxLength": 500
                                        }
                                      },
                                      "required": [
                                        "label"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "label"
                                ]
                              }
                            },
                            "prices": {
                              "description": "List of price formulas of the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "formula": {
                                    "description": "Price formula reference.",
                                    "type": "string",
                                    "example": "24-MONTH",
                                    "maxLength": 10
                                  },
                                  "total_taxes": {
                                    "description": "Total amount of taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 50.1
                                  },
                                  "premium_before_discount_excl_tax": {
                                    "description": "Premium not discounted excluding taxes, numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 150.2
                                  },
                                  "price_after_discount_incl_tax": {
                                    "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                    "type": "number",
                                    "example": 250.3
                                  }
                                },
                                "required": [
                                  "formula",
                                  "price_after_discount_incl_tax"
                                ]
                              }
                            },
                            "criteria": {
                              "description": "Motor information.",
                              "type": "object",
                              "properties": {
                                "device_brand": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_model": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_age": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_power": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_price": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "min": {
                                            "description": "Min criterion value.",
                                            "type": "number",
                                            "example": 0
                                          },
                                          "max": {
                                            "description": "Max criterion value.",
                                            "type": "number",
                                            "example": 10
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "min",
                                          "max"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_quantity": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "device_energy_source": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "installation_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "owner_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "housing_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "customer_type": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "excess_level": {
                                  "type": "object",
                                  "properties": {
                                    "types": {
                                      "description": "The criterion types.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ELIGIBILITY",
                                          "PRICING"
                                        ]
                                      }
                                    },
                                    "values": {
                                      "description": "The criterion values.",
                                      "type": "array",
                                      "maxItems": 25,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "description": "Criterion value.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "default": {
                                            "description": "Whether this is the default value or not.",
                                            "type": "boolean",
                                            "example": true
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "attachments": {
                              "description": "List of document linked to the product.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Attached document name.",
                                    "type": "string",
                                    "example": "terms_and_conditions",
                                    "maxLength": 50
                                  },
                                  "content_url": {
                                    "description": "URL to download the document.",
                                    "type": "string",
                                    "example": "http://website.com/mydocument",
                                    "maxLength": 255
                                  },
                                  "type": {
                                    "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                    "type": "string",
                                    "maxLength": 50,
                                    "example": "TERMS_AND_CONDITIONS"
                                  }
                                },
                                "required": [
                                  "name",
                                  "content_url",
                                  "type"
                                ]
                              }
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "description": "Periodicity of the payment.",
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                    "type": "string",
                                    "example": "R12/P1M",
                                    "maxLength": 25
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Monthly.",
                                    "maxLength": 25
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "product_code",
                            "prices",
                            "coverages"
                          ]
                        }
                      }
                    },
                    "required": [
                      "context",
                      "products"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (JWT not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (doesn't have the valid scope).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.products.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.products.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/quotes_requests": {
      "post": {
        "summary": "Gets quotes for roadside  services.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-quote-mode",
            "description": "Quote mode, can be used to get a quote on draft or test mode.",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "TEST",
                "LIVE"
              ],
              "default": "LIVE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service_criteria": {
                    "description": "Service criteria.\n** Required if quote_code is null **\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Service criteria.",
                        "properties": {
                          "code": {
                            "description": "The service code.",
                            "type": "string",
                            "example": "KV5-33",
                            "maxLength": 50
                          },
                          "catalog": {
                            "allOf": [
                              {
                                "description": "The Catalog information.",
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "description": "Catalog code.",
                                    "type": "string",
                                    "example": "PRTNCATALOG",
                                    "maxLength": 50
                                  },
                                  "version": {
                                    "description": "Catalog version.",
                                    "type": "string",
                                    "example": "2",
                                    "maxLength": 50
                                  }
                                },
                                "required": [
                                  "code",
                                  "version"
                                ]
                              }
                            ]
                          },
                          "intermediary_code": {
                            "description": "Code of business intermediary.",
                            "type": "string",
                            "example": "KYZ451",
                            "maxLength": 50
                          }
                        },
                        "required": [
                          "catalog"
                        ]
                      }
                    ]
                  },
                  "customer": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Customer information.",
                        "properties": {
                          "customer_type": {
                            "description": "Customer type.",
                            "type": "string",
                            "enum": [
                              "INDIVIDUAL"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "distance": {
                    "description": "Distance between the incident location (vehicle location) and vehicle destination.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "Value of the measure.",
                            "type": "number",
                            "example": 10
                          },
                          "unit": {
                            "description": "Unit of the measure.\nISO-20022 Unit Of Measure Code (available values [here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_Y4XF0tp-Ed-ak6NoX_4Aeg_385163498)).\n",
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 4,
                            "example": "KMET"
                          },
                          "is_as_crow_flies": {
                            "description": "Indicates if the distance is as the crow flies.",
                            "type": "boolean",
                            "default": true
                          }
                        }
                      }
                    ]
                  },
                  "vehicle": {
                    "description": "Information related to the vehicle.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "vehicle_type": {
                            "description": "The vehicle type.",
                            "type": "string",
                            "enum": [
                              "3RD_WHEELER",
                              "MOTORCYCLE",
                              "CAR",
                              "TRUCK",
                              "VAN",
                              "BUS_COACHES",
                              "AGRICULTURAL_TRUCK",
                              "BIKE",
                              "MOBILE_HOME_CAMPING_CAR"
                            ],
                            "example": "MOTORCYCLE"
                          }
                        }
                      }
                    ]
                  },
                  "intervention_address": {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Address of intervention.",
                        "properties": {
                          "postal_code": {
                            "description": "Postal code where the intervention will take place.",
                            "type": "string",
                            "example": "75008",
                            "maxLength": 10
                          },
                          "country": {
                            "description": "Country of intervention, ISO-3166-1 alpha-2 format (2 letter codes).",
                            "type": "string",
                            "example": "FR",
                            "maxLength": 2,
                            "minLength": 2
                          }
                        },
                        "required": [
                          "postal_code",
                          "country"
                        ]
                      }
                    ]
                  },
                  "to_schedule_on": {
                    "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ)\n",
                    "type": "string",
                    "maxLength": 20,
                    "format": "date-time",
                    "example": "2019-03-19T10:00:00Z"
                  },
                  "quote_code": {
                    "description": "Existing Quote code.\nIf the Quote code is provided then the price will be updated based on this quote code.\n",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT"
                  },
                  "price_before_discount_excl_tax": {
                    "description": "Price (Defined by front-end user (Agent, Partner...)) of the service excluding taxes, numeric with 2 decimals.",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "value": {
                            "description": "Amount, numeric, with 2 or 3 decimals.",
                            "type": "number",
                            "example": 199.99
                          },
                          "currency": {
                            "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3,
                            "example": "EUR"
                          }
                        },
                        "required": [
                          "value",
                          "currency"
                        ]
                      }
                    ],
                    "example": {
                      "value": 81.2,
                      "currency": "EUR"
                    }
                  },
                  "promo_code": {
                    "description": "Promotion code.",
                    "type": "string",
                    "maxLength": 50,
                    "example": "PROMOCODE2020"
                  }
                }
              }
            }
          },
          "description": "Content of quotes request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quote": {
                      "description": "The quote.",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quote_code": {
                              "description": "Quote code.",
                              "type": "string",
                              "maxLength": 2000,
                              "example": "eJxVj8FuwjAMht8l5wq1ULapt5J2FRJbUGh6rUIbokgs6UwibUJ99yUrReCT/X/2b/uKvp2xSksqTii7oo5bfjYSm16gD"
                            },
                            "quote_expire_at": {
                              "description": "Date and time of quotes expiration - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                              "type": "string",
                              "maxLength": 20,
                              "format": "date-time",
                              "example": "2022-03-22T10:59:00Z"
                            },
                            "service": {
                              "description": "The service covered by the quote.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "description": "The code of the service.",
                                      "type": "string",
                                      "example": "KV5-33",
                                      "maxLength": 50
                                    },
                                    "name": {
                                      "description": "The service name.",
                                      "type": "string",
                                      "example": "Ordering a rental car",
                                      "maxLength": 100
                                    },
                                    "description": {
                                      "description": "Quote marketing description",
                                      "type": "string",
                                      "example": "Advanced for more guarantees.",
                                      "maxLength": 1000
                                    },
                                    "instruction": {
                                      "description": "Quote marketing instruction",
                                      "type": "string",
                                      "example": "Explanation of what is done during the intervention.",
                                      "maxLength": 1000
                                    },
                                    "advice": {
                                      "description": "Quote marketing advice",
                                      "type": "string",
                                      "example": "Tips while waiting for the intervention.",
                                      "maxLength": 1000
                                    },
                                    "components": {
                                      "description": "Set of component included in the service.",
                                      "type": "array",
                                      "maxItems": 50,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "The name of the sub service.",
                                            "type": "string",
                                            "example": "Deplacement.",
                                            "maxLength": 100
                                          },
                                          "description": {
                                            "description": "Description.",
                                            "type": "string",
                                            "example": "Customer assistance for ordering a rental car.",
                                            "maxLength": 255
                                          },
                                          "tax_amount": {
                                            "description": "Total amount of taxes applied to the service component, numeric with 2 decimals.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "value": {
                                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                                    "type": "number",
                                                    "example": 199.99
                                                  },
                                                  "currency": {
                                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 3,
                                                    "example": "EUR"
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "currency"
                                                ]
                                              }
                                            ],
                                            "example": {
                                              "value": 20.3,
                                              "currency": "EUR"
                                            }
                                          },
                                          "price_excl_tax": {
                                            "description": "Price of the service component excluding taxes, numeric with 2 decimals.",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                  "value": {
                                                    "description": "Amount, numeric, with 2 or 3 decimals.",
                                                    "type": "number",
                                                    "example": 199.99
                                                  },
                                                  "currency": {
                                                    "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 3,
                                                    "example": "EUR"
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "currency"
                                                ]
                                              }
                                            ],
                                            "example": {
                                              "value": 81.2,
                                              "currency": "EUR"
                                            }
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "price_excl_tax"
                                        ]
                                      }
                                    },
                                    "availability": {
                                      "description": "Time slot where the service can be executed.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "days_of_week": {
                                              "description": "List of days on which the service is available.",
                                              "type": "array",
                                              "maxItems": 7,
                                              "items": {
                                                "type": "string",
                                                "uniqueItems": true,
                                                "enum": [
                                                  "MONDAY",
                                                  "TUESDAY",
                                                  "WEDNESDAY",
                                                  "THURSDAY",
                                                  "FRIDAY",
                                                  "SATURDAY",
                                                  "SUNDAY"
                                                ]
                                              },
                                              "example": [
                                                "MONDAY",
                                                "TUESDAY",
                                                "THURSDAY"
                                              ]
                                            },
                                            "public_holiday": {
                                              "description": "Public holiday on which the service is available.\nISO 8601 format (YYYY-MM-DD).\n",
                                              "type": "array",
                                              "maxItems": 50,
                                              "items": {
                                                "type": "string",
                                                "format": "date",
                                                "maxLength": 10
                                              },
                                              "example": [
                                                "2019-04-22",
                                                "2019-05-01"
                                              ]
                                            },
                                            "start_time": {
                                              "description": "The time when a service can be available per day.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                              "type": "string",
                                              "maxLength": 20,
                                              "format": "datetime",
                                              "example": "2019-05-15T08:00:00Z"
                                            },
                                            "end_time": {
                                              "description": "The time when a service is no more available per day.\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                                              "type": "string",
                                              "maxLength": 20,
                                              "format": "datetime",
                                              "example": "2019-05-15T13:00:00Z"
                                            },
                                            "minimum_hours_to_start": {
                                              "description": "Earliest possible time when the service can be operate.",
                                              "type": "number",
                                              "example": 2
                                            },
                                            "maximum_days_to_start": {
                                              "description": "The Latest possible date limit for requesting the service.",
                                              "type": "number",
                                              "example": 60
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "attachments": {
                                      "description": "List of document linked to the Quote.",
                                      "type": "array",
                                      "maxItems": 20,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "description": "Attached document name.",
                                            "type": "string",
                                            "example": "Standard form contract",
                                            "maxLength": 100
                                          },
                                          "content_url": {
                                            "description": "URL to download the document.",
                                            "type": "string",
                                            "example": "http://website.com/mydocument",
                                            "maxLength": 2000
                                          },
                                          "type": {
                                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- OTHER;\n- ...\n",
                                            "type": "string",
                                            "example": "TERMS_AND_CONDITIONS",
                                            "maxLength": 50
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "content_url",
                                          "type"
                                        ]
                                      }
                                    },
                                    "consents": {
                                      "description": "List of needed customer consents.",
                                      "type": "array",
                                      "maxItems": 10,
                                      "items": {
                                        "type": "object",
                                        "description": "Consent to be requested to the customer.",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "description": "Disclaimer to display to the customer.",
                                            "properties": {
                                              "code": {
                                                "description": "Code.",
                                                "type": "string",
                                                "maxLength": 50
                                              },
                                              "text": {
                                                "description": "Text.",
                                                "type": "string",
                                                "maxLength": 255
                                              },
                                              "type": {
                                                "description": "The type of desclaimer.",
                                                "type": "string",
                                                "enum": [
                                                  "PERSONAL_DATA",
                                                  "COMMUNICATION_CHANNEL"
                                                ],
                                                "example": "PERSONAL_DATA"
                                              }
                                            },
                                            "required": [
                                              "code",
                                              "text"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "is_mandatory": {
                                                "description": "Indicates if the consent is mandatory.",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        ],
                                        "required": [
                                          "is_mandatory"
                                        ]
                                      }
                                    },
                                    "disclaimers": {
                                      "description": "List of disclaimers to display to the customer.",
                                      "type": "array",
                                      "maxItems": 10,
                                      "items": {
                                        "type": "object",
                                        "description": "Disclaimer to display to the customer.",
                                        "properties": {
                                          "code": {
                                            "description": "Code.",
                                            "type": "string",
                                            "maxLength": 50
                                          },
                                          "text": {
                                            "description": "Text.",
                                            "type": "string",
                                            "maxLength": 255
                                          },
                                          "type": {
                                            "description": "The type of desclaimer.",
                                            "type": "string",
                                            "enum": [
                                              "PERSONAL_DATA",
                                              "COMMUNICATION_CHANNEL"
                                            ],
                                            "example": "PERSONAL_DATA"
                                          }
                                        },
                                        "required": [
                                          "code",
                                          "text"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "components"
                                  ]
                                }
                              ]
                            },
                            "price": {
                              "description": "The price of the Quote.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "total_taxes": {
                                      "description": "Total amount of taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 20,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_before_discount_excl_tax": {
                                      "description": "Premium not discounted excluding taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 100,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_before_discount_incl_tax": {
                                      "description": "Premium not discounted including taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 120,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_after_discount_excl_tax": {
                                      "description": "Price discounted excluding taxes, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 95,
                                        "currency": "EUR"
                                      }
                                    },
                                    "price_after_discount_incl_tax": {
                                      "description": "Price discounted including taxes (Final price), numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 114,
                                        "currency": "EUR"
                                      }
                                    },
                                    "discount_amount": {
                                      "description": "Total amount of discount, numeric with 2 decimals.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "value": {
                                              "description": "Amount, numeric, with 2 or 3 decimals.",
                                              "type": "number",
                                              "example": 199.99
                                            },
                                            "currency": {
                                              "description": "Currency of the amount.\nISO 4217 format (3 letter code).\n",
                                              "type": "string",
                                              "minLength": 3,
                                              "maxLength": 3,
                                              "example": "EUR"
                                            }
                                          },
                                          "required": [
                                            "value",
                                            "currency"
                                          ]
                                        }
                                      ],
                                      "example": {
                                        "value": 5,
                                        "currency": "EUR"
                                      }
                                    }
                                  },
                                  "required": [
                                    "price_after_discount_incl_tax"
                                  ]
                                }
                              ]
                            },
                            "payment_periodicities": {
                              "description": "List of payment periodicities.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "description": "Periodicity of the payment.",
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "Periodicity value, ISO 8601 format (R[n]/P18Y9M4DT11H9M8S).",
                                    "type": "string",
                                    "example": "R1/P1D",
                                    "maxLength": 50
                                  },
                                  "label": {
                                    "description": "Label.",
                                    "type": "string",
                                    "example": "Monthly.",
                                    "maxLength": 50
                                  }
                                },
                                "required": [
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "service",
                            "quote_code",
                            "price"
                          ]
                        }
                      ]
                    },
                    "payment_modes": {
                      "description": "Payment mode list",
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                        "type": "object",
                        "properties": {
                          "types": {
                            "description": "List of payment mode accepted by the payment service provider (Zuora for example).",
                            "type": "array",
                            "maxItems": 6,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CREDIT_CARD",
                                "DEBIT_CARD",
                                "ELECTRONIC_TRANSFER",
                                "VIRTUAL_CREDIT_CARD",
                                "SEPA",
                                "PAYPAL"
                              ]
                            }
                          },
                          "payment_channels": {
                            "description": "Channels used in payment.",
                            "type": "array",
                            "maxItems": 3,
                            "items": {
                              "type": "string",
                              "enum": [
                                "DIGITAL",
                                "PHONE",
                                "AGENT"
                              ]
                            }
                          },
                          "provider": {
                            "description": "Payment service provider.",
                            "type": "object",
                            "properties": {
                              "provider_id": {
                                "description": "Unique identifier of payment provider.",
                                "type": "string",
                                "maxLength": 50
                              },
                              "label": {
                                "description": "Label.",
                                "type": "string",
                                "example": "Zuora",
                                "maxLength": 50
                              }
                            },
                            "required": [
                              "provider_id",
                              "label"
                            ]
                          }
                        },
                        "required": [
                          "types",
                          "provider"
                        ]
                      }
                    }
                  },
                  "required": [
                    "quote"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.quotesrequests.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.quotesrequests.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/service_orders": {
      "post": {
        "summary": "Creates service order.",
        "description": "Cf. summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                    "maxLength": 2000
                  },
                  "related_service_order_id": {
                    "description": "The related service order identifier.",
                    "type": "string",
                    "format": "uuid",
                    "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                    "maxLength": 150
                  },
                  "origin_case_reference": {
                    "description": "Reference of the case that originates the order.",
                    "type": "string",
                    "example": "1X2D3F",
                    "maxLength": 100
                  },
                  "origin_service_reference": {
                    "description": "Reference of the service that originates the order.",
                    "type": "string",
                    "example": "a1o1X000001SY9eQAG",
                    "maxLength": 100
                  },
                  "to_schedule_on": {
                    "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ)\n",
                    "type": "string",
                    "maxLength": 20,
                    "format": "date-time",
                    "example": "2019-03-19T10:00:00Z"
                  },
                  "agent": {
                    "description": "The agent information.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "agent_scope": {
                            "description": "The scope of the agent that create the order.",
                            "type": "string",
                            "example": "HOME/DARTY/France",
                            "maxLength": 150
                          },
                          "agent_reference": {
                            "description": "The agent reference.",
                            "type": "string",
                            "example": "QS23ZED4",
                            "maxLength": 150
                          },
                          "agency_reference": {
                            "description": "The agency reference.",
                            "type": "string",
                            "example": "AGC_007_NORD",
                            "maxLength": 150
                          }
                        }
                      }
                    ]
                  },
                  "customer": {
                    "description": "Customer information.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "The customer information.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                "type": "string",
                                "enum": [
                                  "MR",
                                  "MS",
                                  "MISS",
                                  "DR",
                                  "PR"
                                ],
                                "example": "MR"
                              },
                              "first_name": {
                                "description": "First name.",
                                "type": "string",
                                "example": "John",
                                "maxLength": 100
                              },
                              "middle_name": {
                                "description": "Middle name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "last_name": {
                                "description": "Last name.",
                                "type": "string",
                                "example": "Doe",
                                "maxLength": 100
                              },
                              "birth_date": {
                                "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                "type": "string",
                                "format": "date",
                                "example": "1990-04-25"
                              }
                            },
                            "required": [
                              "title",
                              "first_name",
                              "last_name",
                              "birth_date"
                            ]
                          },
                          {
                            "properties": {
                              "email": {
                                "description": "Email address.",
                                "type": "string",
                                "maxLength": 320,
                                "format": "email",
                                "example": "john.doe@example.com"
                              },
                              "phone": {
                                "description": "Phone number.",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "international_prefix": {
                                        "description": "Prefix to be added to be called from abroad.",
                                        "type": "string",
                                        "maxLength": 5,
                                        "example": "+33"
                                      },
                                      "number": {
                                        "description": "Phone number. Can be local or international.",
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "651191245"
                                      }
                                    },
                                    "required": [
                                      "number"
                                    ]
                                  }
                                ]
                              },
                              "address": {
                                "description": "Postal address",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "street_address": {
                                        "description": "Street address.",
                                        "type": "string",
                                        "example": "1 Avenue France",
                                        "maxLength": 255
                                      },
                                      "postal_code": {
                                        "description": "Postal code or zip code.",
                                        "type": "string",
                                        "example": "75001",
                                        "maxLength": 10
                                      },
                                      "city": {
                                        "description": "City.",
                                        "type": "string",
                                        "example": "Paris",
                                        "maxLength": 100
                                      },
                                      "country": {
                                        "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                        "type": "string",
                                        "example": "FR",
                                        "minLength": 2,
                                        "maxLength": 2
                                      }
                                    },
                                    "required": [
                                      "street_address",
                                      "postal_code",
                                      "city",
                                      "country"
                                    ]
                                  }
                                ]
                              },
                              "spoken_language": {
                                "description": "Spoken language, IANA language codification.",
                                "type": "string",
                                "example": "FR",
                                "maxLength": 5
                              },
                              "preferred_communication_channel": {
                                "description": "Communication channel on which the person preferred to be contacted.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "EMAIL",
                                    "SMS"
                                  ]
                                },
                                "example": [
                                  "EMAIL",
                                  "SMS"
                                ]
                              },
                              "registrations": {
                                "description": "List of customer registrations.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "registration_type": {
                                      "description": "Type of person registration.",
                                      "type": "string",
                                      "enum": [
                                        "ID_CARD",
                                        "TAX_REGISTRATION"
                                      ]
                                    },
                                    "value": {
                                      "description": "Value of the registration.",
                                      "maxLength": 20,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "required": [
                          "email",
                          "phone",
                          "address",
                          "preferred_communication_channel"
                        ]
                      }
                    ]
                  },
                  "consents": {
                    "description": "List of the consents the customer has consented to.",
                    "type": "array",
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "description": "Customer consent.",
                      "properties": {
                        "code": {
                          "description": "Code of the consent.",
                          "type": "string",
                          "example": "PHONE",
                          "maxLength": 100
                        },
                        "is_confirmed": {
                          "description": "Indicates if the consent has been confirmed by the customer or not.",
                          "type": "boolean",
                          "example": true
                        }
                      },
                      "required": [
                        "code",
                        "is_confirmed"
                      ]
                    }
                  },
                  "intervention": {
                    "description": "The information of the intervention.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Intervention information.",
                        "properties": {
                          "additional_information": {
                            "description": "Additional information about the intervention.",
                            "type": "string",
                            "maxLength": 2000,
                            "example": "I have a leaky faucet"
                          },
                          "address": {
                            "description": "Postal address.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "1 Avenue France",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "street_address",
                                  "postal_code",
                                  "city",
                                  "country"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Intervention coordinate.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    ]
                  },
                  "incident": {
                    "description": "The incident of the order.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "cause": {
                            "description": "Problem code.\nThe available values are :\n- ACCELERATOR_CABLE: Accelerator cable\n- ACCIDENT: Accident\n- ALTERNATOR: Alternator\n- AMBER_WARNING_LIGHTS: Amber warning lights\n- BACK_WINDOW_BROKEN: Back window broken\n- BODYWORK: Bodywork\n- BOGGED_DOWN: Bogged down\n- BRAKE_LIGHTS: Brake lights\n- BRAKES_FAILURE: Brakes Failure\n- BRAKES_PADS_NOISE: Brake Pads - Noise\n- BRAKES_SEIZED: Brakes Seized\n- BROKEN_MIRRORS: Broken mirror(s)\n- BROKEN_WINDSCREEN: Broken windscreen\n- CAM_BELT: Cam belt\n- CHARGING_PROBLEM_EV: Charging problem (EV)\n- CHIPPED_CRACKED_BACK_WINDOW: Chipped/cracked back window\n- CHIPPED_CRACKED_WINDOW: Chipped/cracked window\n- CHIPPED_CRACKED_WINDSCREEN: Chipped/cracked windscreen\n- CLUTCH_FAILURE: Clutch Failure\n- CLUTCH_LINKAGE: Clutch Linkage\n- CONTAMINATED_OIL: Contaminated oil\n- COOLANT_LEAK: Coolant leak\n- DAMAGED_WHEEL: Damaged wheel\n- DEATH: Death\n- DIESEL_IN_PETROL: Diesel in petrol\n- DIESEL_LEAK: Diesel leak\n- DOOR_BONNET_BOOT: Door / Bonnet / Boot\n- DOOR_LOCK: Door lock\n- DRIVER_MIRROR_BROKEN: Driver side mirror broken\n- DRIVER_NOT_FEELING_WELL: Driver not feeling well (vehicle not damaged)\n- ELECTRICS_PROBLEM: Electrics problem\n- ENGINE_STOPPED_NO_RESTART_POSSIBLE: Engine stopped, no restart possible\n- EXHAUST: Exhaust\n- FALL_OF_HAIL_ON_VEHICLE: Fall of hail on the vehicle\n- FALL_OF_OBJECTS_ON_VEHICLE: Fall of objects on the vehicle\n- FILLER_CAP: Filler Cap\n- FINE: Fine\n- FIRE: Fire\n- FLAT_BATTERY: Flat battery\n- FLAT_TYRE_LWNK_MISSING: Flat tyre Lock Wheel Nut Key missing\n- FLAT_TYRE_WITH_SPARE: Flat tyre with spare\n- FLAT_TYRE_WITHOUT_SPARE: Flat tyre without spare\n- FLOOD: Flood\n- FOG_LIGHTS: Fog lights\n- FROZEN_FUEL: Frozen fuel\n- FROZEN_KEYHOLE: Frozen keyhole\n- FUEL_LEAK: Fuel leak\n- GEAR_LINKAGE: Gear Linkage\n- GEARBOX_AUTO: Gearbox auto\n- GEARBOX_MANUAL: Gearbox manual\n- HAND_BRAKE: Hand brake\n- HEAD_LIGHTS: Head lights\n- IMMOBILIZER_ALARM: Immobilizer / alarm\n- INDICATORS: Indicators\n- KEY_BROKEN: Key broken\n- KEY_CARD_NOT_RECOGNIZED: Key card not recognized\n- KEYS_LOCKED_IN_CAR: Keys locked in car\n- KEYS_LOST: Keys lost\n- KEYS_STOLEN: Keys stolen\n- LATERAL_WINDOW_BROKEN: Lateral window broken\n- LOSS_OF_POWER: Loss of power\n- LOW_ADBLUE_LEVEL: Low adblue level\n- LOW_CHARGE_EV: Low charge (EV)\n- MULTIPLE_FLAT_TYRES: Multiple flat tyres\n- MULTIPLE_WHEELS_STOLEN: Multiple wheels stolen\n- NATURAL_DISASTER: Natural Disaster\n- NON_STARTER: Non starter\n- NON_STARTER_DOK: Non Starter - DOK\n- NON_STARTER_WONT_FIRE: Non Starter - Turning Over Won't Fire\n- NUTS_BOLTS_LOOSE: Nuts/bolts loose\n- NUTS_BOLTS_MISSING_BROKEN: Nuts/bolts missing or broken\n- OIL_LEAK: Oil leak\n- OIL_LEVEL_LOW: Oil level low\n- OTHER_CLIMATIC_EVENT: Other climatic event\n- OUT_OF_DIESEL: Out of diesel\n- OUT_OF_FUEL: Out of fuel\n- OUT_OF_LPG: Out of LPG\n- OUT_OF_PETROL: Out of petrol\n- OVERHEAT: Overheat\n- PARTIAL_THEFT: Partial theft\n- PASSENGER_MIRROR_BROKEN: Passenger side mirror broken\n- PETROL_IN_DIESEL: Petrol in diesel\n- PETROL_LEAK: Petrol leak\n- POWER_OF_STEERING_FAILURE: Power of Steering Failure\n- RED_WARNING_LIGHT: Red warning light\n- SMOKE: Smoke\n- STARTER_MOTOR: Starter Motor\n- STEERING_FAILURE: Steering failure\n- STEERING_LOCK_IGNITION_BARREL: Steering Lock / Ignition Barrel\n- STRANGE_NOISE_WHEN_DRIVING: Strange noise when driving\n- STUCK_IN_SNOW: Stuck in snow\n- SUN_ROOF_WONT_CLOSE: Sun Roof Won't Close\n- SUSPENSION: Suspension\n- TAIL_LIGHTS: Tail lights\n- THEFT_ATTEMPT: Theft attempt\n- THEFT_ATTEMPT_BROKEN_GLASS: Theft attempt broken glass\n- THEFT_ATTEMPT_IGNITION_BROKEN: Theft attempt ignition broken\n- THEFT_ATTEMPT_LOCK_BROKEN: Theft attempt Lock broken\n- UNIDENTIFIED_BREAKDOWN: Unidentified breakdown\n- UNKNOWN_FLUID_LEAKING: Unknown Fluid Leaking\n- VANDALISM: Vandalism\n- VANDALISM_BODYWORK_DAMAGE: Vandalism Bodywork damage\n- VANDALISM_FLAT_TYRE_WITH_SPARE: Vandalism flat tyre with spare\n- VANDALISM_FLAT_TYRE_WITHOUT_SPARE: Vandalism flat tyre without spare\n- VANDALISM_MULTIPLE_FLAT_TYRES: Vandalism multiple flat tyres\n- VEHICLE_STOLEN_FOUND: Vehicle Stolen & Found\n- VEHICLE_STOLEN_NOT_FOUND: Vehicle Stolen & Not Found\n- VEHICLE_STOPPED_ENGINE_RUNNING: Vehicle stopped, engine running\n- VEHICLE_STUCK_IN_ICE: Vehicle stuck in ice\n- WATER_LEAK: Water Leak\n- WATER_OR_DIRT_IN_FUEL: Water or Dirt in Fuel\n- WINDOW_MECHANISM: Window Mechanism\n- WHEEL_ADRIFT: Wheel adrift\n- WHEEL_BEARINGS: Wheel Bearings\n- WHEEL_STOLEN: Wheel stolen\n- WINDSCREEN_WIPERS: Windscreen wipers\n- WRONG_FUEL: Wrong fuel\n",
                            "type": "string",
                            "enum": [
                              "ACCELERATOR_CABLE",
                              "ACCIDENT",
                              "ALTERNATOR",
                              "AMBER_WARNING_LIGHTS",
                              "BACK_WINDOW_BROKEN",
                              "BODYWORK",
                              "BOGGED_DOWN",
                              "BRAKE_LIGHTS",
                              "BRAKES_FAILURE",
                              "BRAKES_PADS_NOISE",
                              "BRAKES_SEIZED",
                              "BROKEN_MIRRORS",
                              "BROKEN_WINDSCREEN",
                              "CAM_BELT",
                              "CHARGING_PROBLEM_EV",
                              "CHIPPED_CRACKED_BACK_WINDOW",
                              "CHIPPED_CRACKED_WINDOW",
                              "CHIPPED_CRACKED_WINDSCREEN",
                              "CLUTCH_FAILURE",
                              "CLUTCH_LINKAGE",
                              "CONTAMINATED_OIL",
                              "COOLANT_LEAK",
                              "DAMAGED_WHEEL",
                              "DEATH",
                              "DIESEL_IN_PETROL",
                              "DIESEL_LEAK",
                              "DOOR_BONNET_BOOT",
                              "DOOR_LOCK",
                              "DRIVER_MIRROR_BROKEN",
                              "DRIVER_NOT_FEELING_WELL",
                              "ELECTRICS_PROBLEM",
                              "ENGINE_STOPPED_NO_RESTART_POSSIBLE",
                              "EXHAUST",
                              "FALL_OF_HAIL_ON_VEHICLE",
                              "FALL_OF_OBJECTS_ON_VEHICLE",
                              "FILLER_CAP",
                              "FINE",
                              "FIRE",
                              "FLAT_BATTERY",
                              "FLAT_TYRE_LWNK_MISSING",
                              "FLAT_TYRE_WITH_SPARE",
                              "FLAT_TYRE_WITHOUT_SPARE",
                              "FLOOD",
                              "FOG_LIGHTS",
                              "FROZEN_FUEL",
                              "FROZEN_KEYHOLE",
                              "FUEL_LEAK",
                              "GEAR_LINKAGE",
                              "GEARBOX_AUTO",
                              "GEARBOX_MANUAL",
                              "HAND_BRAKE",
                              "HEAD_LIGHTS",
                              "IMMOBILIZER_ALARM",
                              "INDICATORS",
                              "KEY_BROKEN",
                              "KEY_CARD_NOT_RECOGNIZED",
                              "KEYS_LOCKED_IN_CAR",
                              "KEYS_LOST",
                              "KEYS_STOLEN",
                              "LATERAL_WINDOW_BROKEN",
                              "LOSS_OF_POWER",
                              "LOW_ADBLUE_LEVEL",
                              "LOW_CHARGE_EV",
                              "MULTIPLE_FLAT_TYRES",
                              "MULTIPLE_WHEELS_STOLEN",
                              "NATURAL_DISASTER",
                              "NON_STARTER",
                              "NON_STARTER_DOK",
                              "NON_STARTER_WONT_FIRE",
                              "NUTS_BOLTS_LOOSE",
                              "NUTS_BOLTS_MISSING_BROKEN",
                              "OIL_LEAK",
                              "OIL_LEVEL_LOW",
                              "OTHER_CLIMATIC_EVENT",
                              "OUT_OF_DIESEL",
                              "OUT_OF_FUEL",
                              "OUT_OF_LPG",
                              "OUT_OF_PETROL",
                              "OVERHEAT",
                              "PARTIAL_THEFT",
                              "PASSENGER_MIRROR_BROKEN",
                              "PETROL_IN_DIESEL",
                              "PETROL_LEAK",
                              "POWER_OF_STEERING_FAILURE",
                              "RED_WARNING_LIGHT",
                              "SMOKE",
                              "STARTER_MOTOR",
                              "STEERING_FAILURE",
                              "STEERING_LOCK_IGNITION_BARREL",
                              "STRANGE_NOISE_WHEN_DRIVING",
                              "STUCK_IN_SNOW",
                              "SUN_ROOF_WONT_CLOSE",
                              "SUSPENSION",
                              "TAIL_LIGHTS",
                              "THEFT_ATTEMPT",
                              "THEFT_ATTEMPT_BROKEN_GLASS",
                              "THEFT_ATTEMPT_IGNITION_BROKEN",
                              "THEFT_ATTEMPT_LOCK_BROKEN",
                              "UNIDENTIFIED_BREAKDOWN",
                              "UNKNOWN_FLUID_LEAKING",
                              "VANDALISM",
                              "VANDALISM_BODYWORK_DAMAGE",
                              "VANDALISM_FLAT_TYRE_WITH_SPARE",
                              "VANDALISM_FLAT_TYRE_WITHOUT_SPARE",
                              "VANDALISM_MULTIPLE_FLAT_TYRES",
                              "VEHICLE_STOLEN_FOUND",
                              "VEHICLE_STOLEN_NOT_FOUND",
                              "VEHICLE_STOPPED_ENGINE_RUNNING",
                              "VEHICLE_STUCK_IN_ICE",
                              "WATER_LEAK",
                              "WATER_OR_DIRT_IN_FUEL",
                              "WINDOW_MECHANISM",
                              "WHEEL_ADRIFT",
                              "WHEEL_BEARINGS",
                              "WHEEL_STOLEN",
                              "WINDSCREEN_WIPERS",
                              "WRONG_FUEL"
                            ],
                            "example": "ACCIDENT"
                          }
                        }
                      }
                    ]
                  },
                  "vehicle": {
                    "description": "The information of the vehicle.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "fuel_type": {
                            "description": "The fuel type of the vehicle.\nThe possible values are:\n - ALCOHOL_ETHANOL: Alcohol ethanol\n - BIO_DIESEL: Biologic Diesel\n - DIESEL: Diesel\n - ELECTRIC: Electricity\n - ELECTRIC_DIESEL: Electricity and diesel hybrid\n - ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n - GASOLINE: Gasoline\n - HYDROGEN: Hydrogen\n - LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n - NATURAL_GAS: Natural gas hybrid\n - UNKNOWN: Unknown\n",
                            "type": "string",
                            "example": "LIQUID_PETROL_GAS",
                            "enum": [
                              "ALCOHOL_ETHANOL",
                              "BIO_DIESEL",
                              "DIESEL",
                              "ELECTRIC",
                              "ELECTRIC_DIESEL",
                              "ELECTRIC_GASOLINE",
                              "GASOLINE",
                              "HYDROGEN",
                              "LIQUID_PETROL_GAS",
                              "NATURAL_GAS",
                              "UNKNOWN"
                            ]
                          },
                          "registration_plate_number": {
                            "description": "The registration plate number of the vehicle.",
                            "type": "string",
                            "maxLength": 50,
                            "example": "ZZ-999-ZZ"
                          },
                          "vehicle_type": {
                            "description": "Type of the vehicle.\nThe values are:\n - BIKE: Bike\n - BUS_COACHES: Bus coaches, autocar\n - CAR: car\n - MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n - MOTORCYCLE: Motorcycle\n - TRUCK: Truck\n - VAN: Van\n",
                            "type": "string",
                            "enum": [
                              "BIKE",
                              "BUS_COACHES",
                              "CAR",
                              "MOBILE_HOME_CAMPING_CAR",
                              "MOTORCYCLE",
                              "TRUCK",
                              "VAN"
                            ],
                            "example": "CAR"
                          }
                        }
                      }
                    ]
                  },
                  "destination": {
                    "description": "Destination address of the service.",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Destination information.",
                        "properties": {
                          "address": {
                            "description": "Postal address.",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "street_address": {
                                    "description": "Street address.",
                                    "type": "string",
                                    "example": "1 Avenue France",
                                    "maxLength": 255
                                  },
                                  "postal_code": {
                                    "description": "Postal code or zip code.",
                                    "type": "string",
                                    "example": "75001",
                                    "maxLength": 10
                                  },
                                  "city": {
                                    "description": "City.",
                                    "type": "string",
                                    "example": "Paris",
                                    "maxLength": 100
                                  },
                                  "country": {
                                    "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                    "type": "string",
                                    "example": "FR",
                                    "minLength": 2,
                                    "maxLength": 2
                                  }
                                },
                                "required": [
                                  "street_address",
                                  "postal_code",
                                  "city",
                                  "country"
                                ]
                              }
                            ]
                          },
                          "coordinates": {
                            "description": "Destination coordinate.",
                            "allOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "longitude": {
                                    "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 2.3488
                                  },
                                  "latitude": {
                                    "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                    "type": "number",
                                    "example": 48.85341
                                  }
                                },
                                "required": [
                                  "longitude",
                                  "latitude"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "quote_code",
                  "customer",
                  "intervention"
                ]
              }
            }
          },
          "description": "Content of service order.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service order created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Created Service order.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "quote_code": {
                          "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                          "type": "string",
                          "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                          "maxLength": 2000
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "type": "string",
                                  "maxLength": 2000,
                                  "example": "I have a leaky faucet"
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "vehicle": {
                          "description": "The information of the vehicle.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "fuel_type": {
                                  "description": "The fuel type of the vehicle.\nThe possible values are:\n - ALCOHOL_ETHANOL: Alcohol ethanol\n - BIO_DIESEL: Biologic Diesel\n - DIESEL: Diesel\n - ELECTRIC: Electricity\n - ELECTRIC_DIESEL: Electricity and diesel hybrid\n - ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n - GASOLINE: Gasoline\n - HYDROGEN: Hydrogen\n - LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n - NATURAL_GAS: Natural gas hybrid\n - UNKNOWN: Unknown\n",
                                  "type": "string",
                                  "example": "LIQUID_PETROL_GAS",
                                  "enum": [
                                    "ALCOHOL_ETHANOL",
                                    "BIO_DIESEL",
                                    "DIESEL",
                                    "ELECTRIC",
                                    "ELECTRIC_DIESEL",
                                    "ELECTRIC_GASOLINE",
                                    "GASOLINE",
                                    "HYDROGEN",
                                    "LIQUID_PETROL_GAS",
                                    "NATURAL_GAS",
                                    "UNKNOWN"
                                  ]
                                },
                                "registration_plate_number": {
                                  "description": "The registration plate number of the vehicle.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "ZZ-999-ZZ"
                                },
                                "vehicle_type": {
                                  "description": "Type of the vehicle.\nThe values are:\n - BIKE: Bike\n - BUS_COACHES: Bus coaches, autocar\n - CAR: car\n - MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n - MOTORCYCLE: Motorcycle\n - TRUCK: Truck\n - VAN: Van\n",
                                  "type": "string",
                                  "enum": [
                                    "BIKE",
                                    "BUS_COACHES",
                                    "CAR",
                                    "MOBILE_HOME_CAMPING_CAR",
                                    "MOTORCYCLE",
                                    "TRUCK",
                                    "VAN"
                                  ],
                                  "example": "CAR"
                                }
                              }
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "destination": {
                          "description": "Destination address of the service.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Destination information.",
                              "properties": {
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Destination coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "intervention",
                        "customer",
                        "quote_code"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/service_orders/{service_order_id}": {
      "get": {
        "summary": "Retreive service order details.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "in": "path",
            "description": "Service order identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service order details.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "quote_code": {
                          "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                          "type": "string",
                          "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                          "maxLength": 2000
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "type": "string",
                                  "maxLength": 2000,
                                  "example": "I have a leaky faucet"
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "vehicle": {
                          "description": "The information of the vehicle.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "fuel_type": {
                                  "description": "The fuel type of the vehicle.\nThe possible values are:\n - ALCOHOL_ETHANOL: Alcohol ethanol\n - BIO_DIESEL: Biologic Diesel\n - DIESEL: Diesel\n - ELECTRIC: Electricity\n - ELECTRIC_DIESEL: Electricity and diesel hybrid\n - ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n - GASOLINE: Gasoline\n - HYDROGEN: Hydrogen\n - LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n - NATURAL_GAS: Natural gas hybrid\n - UNKNOWN: Unknown\n",
                                  "type": "string",
                                  "example": "LIQUID_PETROL_GAS",
                                  "enum": [
                                    "ALCOHOL_ETHANOL",
                                    "BIO_DIESEL",
                                    "DIESEL",
                                    "ELECTRIC",
                                    "ELECTRIC_DIESEL",
                                    "ELECTRIC_GASOLINE",
                                    "GASOLINE",
                                    "HYDROGEN",
                                    "LIQUID_PETROL_GAS",
                                    "NATURAL_GAS",
                                    "UNKNOWN"
                                  ]
                                },
                                "registration_plate_number": {
                                  "description": "The registration plate number of the vehicle.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "ZZ-999-ZZ"
                                },
                                "vehicle_type": {
                                  "description": "Type of the vehicle.\nThe values are:\n - BIKE: Bike\n - BUS_COACHES: Bus coaches, autocar\n - CAR: car\n - MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n - MOTORCYCLE: Motorcycle\n - TRUCK: Truck\n - VAN: Van\n",
                                  "type": "string",
                                  "enum": [
                                    "BIKE",
                                    "BUS_COACHES",
                                    "CAR",
                                    "MOBILE_HOME_CAMPING_CAR",
                                    "MOTORCYCLE",
                                    "TRUCK",
                                    "VAN"
                                  ],
                                  "example": "CAR"
                                }
                              }
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "destination": {
                          "description": "Destination address of the service.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Destination information.",
                              "properties": {
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Destination coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "intervention",
                        "customer",
                        "quote_code"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.read_only"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.read_only"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      },
      "patch": {
        "summary": "Update the service order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quote_code": {
                    "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                    "type": "string",
                    "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                    "maxLength": 2000
                  }
                }
              }
            }
          },
          "description": "Service order update request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service order updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Updated service order.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "service_order_id": {
                          "description": "Service order identifier.",
                          "type": "string",
                          "maxLength": 150,
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4"
                        },
                        "service_order_number": {
                          "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                          "type": "string",
                          "example": "AAA111000000064",
                          "maxLength": 150
                        },
                        "quote_number": {
                          "description": "The quote number.\nrequired if the service order's status is DRAFT.\n",
                          "type": "string",
                          "example": "DRAAA111000000141",
                          "maxLength": 150
                        },
                        "related_service_order_id": {
                          "description": "The related service order identifier.",
                          "type": "string",
                          "format": "uuid",
                          "example": "362c7166-ecc4-4853-8d9b-53b10eec72f4",
                          "maxLength": 150
                        },
                        "origin_case_reference": {
                          "description": "Origin reference of the case.",
                          "type": "string",
                          "example": "1X2D3F",
                          "maxLength": 100
                        },
                        "origin_service_reference": {
                          "description": "Origin reference of the service.",
                          "type": "string",
                          "example": "a1o1X000001SY9eQAG",
                          "maxLength": 100
                        },
                        "quote_code": {
                          "description": "Quote code, partner can use a default value if provided by AXA or got it with quoting API.",
                          "type": "string",
                          "example": "eJxlkl1rwjAUhv+K5DqMVlf8uCuzSkFUKu5iY4QsPdRATGo+qkX870vd6keXi0Ce8",
                          "maxLength": 2000
                        },
                        "status": {
                          "description": "The service order's status.",
                          "type": "string",
                          "enum": [
                            "DRAFT",
                            "ACTIVE"
                          ],
                          "example": "DRAFT"
                        },
                        "to_schedule_on": {
                          "description": "Prefered execution date and time of the service\nUTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).\n",
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-03-19T10:00:00Z"
                        },
                        "agent": {
                          "description": "The agent information.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "agent_scope": {
                                  "description": "The scope of the agent that create the order.",
                                  "type": "string",
                                  "example": "HOME/DARTY/France",
                                  "maxLength": 150
                                },
                                "agent_reference": {
                                  "description": "The agent reference.",
                                  "type": "string",
                                  "example": "QS23ZED4",
                                  "maxLength": 150
                                },
                                "agency_reference": {
                                  "description": "The agency reference.",
                                  "type": "string",
                                  "example": "AGC_007_NORD",
                                  "maxLength": 150
                                }
                              }
                            }
                          ]
                        },
                        "customer": {
                          "description": "Customer personal information.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "The customer information.",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "description": "Civility (Mr, Ms, Miss, Doctor, Professor).",
                                      "type": "string",
                                      "enum": [
                                        "MR",
                                        "MS",
                                        "MISS",
                                        "DR",
                                        "PR"
                                      ],
                                      "example": "MR"
                                    },
                                    "first_name": {
                                      "description": "First name.",
                                      "type": "string",
                                      "example": "John",
                                      "maxLength": 100
                                    },
                                    "middle_name": {
                                      "description": "Middle name.",
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "last_name": {
                                      "description": "Last name.",
                                      "type": "string",
                                      "example": "Doe",
                                      "maxLength": 100
                                    },
                                    "birth_date": {
                                      "description": "Birth date - ISO 8601 format (YYYY-MM-DD).",
                                      "type": "string",
                                      "format": "date",
                                      "example": "1990-04-25"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "first_name",
                                    "last_name",
                                    "birth_date"
                                  ]
                                },
                                {
                                  "properties": {
                                    "email": {
                                      "description": "Email address.",
                                      "type": "string",
                                      "maxLength": 320,
                                      "format": "email",
                                      "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                      "description": "Phone number.",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "international_prefix": {
                                              "description": "Prefix to be added to be called from abroad.",
                                              "type": "string",
                                              "maxLength": 5,
                                              "example": "+33"
                                            },
                                            "number": {
                                              "description": "Phone number. Can be local or international.",
                                              "type": "string",
                                              "maxLength": 20,
                                              "example": "651191245"
                                            }
                                          },
                                          "required": [
                                            "number"
                                          ]
                                        }
                                      ]
                                    },
                                    "address": {
                                      "description": "Postal address",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "street_address": {
                                              "description": "Street address.",
                                              "type": "string",
                                              "example": "1 Avenue France",
                                              "maxLength": 255
                                            },
                                            "postal_code": {
                                              "description": "Postal code or zip code.",
                                              "type": "string",
                                              "example": "75001",
                                              "maxLength": 10
                                            },
                                            "city": {
                                              "description": "City.",
                                              "type": "string",
                                              "example": "Paris",
                                              "maxLength": 100
                                            },
                                            "country": {
                                              "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                              "type": "string",
                                              "example": "FR",
                                              "minLength": 2,
                                              "maxLength": 2
                                            }
                                          },
                                          "required": [
                                            "street_address",
                                            "postal_code",
                                            "city",
                                            "country"
                                          ]
                                        }
                                      ]
                                    },
                                    "spoken_language": {
                                      "description": "Spoken language, IANA language codification.",
                                      "type": "string",
                                      "example": "FR",
                                      "maxLength": 5
                                    },
                                    "preferred_communication_channel": {
                                      "description": "Communication channel on which the person preferred to be contacted.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "EMAIL",
                                          "SMS"
                                        ]
                                      },
                                      "example": [
                                        "EMAIL",
                                        "SMS"
                                      ]
                                    },
                                    "registrations": {
                                      "description": "List of customer registrations.",
                                      "type": "array",
                                      "maxItems": 2,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "registration_type": {
                                            "description": "Type of person registration.",
                                            "type": "string",
                                            "enum": [
                                              "ID_CARD",
                                              "TAX_REGISTRATION"
                                            ]
                                          },
                                          "value": {
                                            "description": "Value of the registration.",
                                            "maxLength": 20,
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ]
                                      }
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "email",
                                "phone",
                                "address",
                                "preferred_communication_channel"
                              ]
                            }
                          ]
                        },
                        "intervention": {
                          "description": "The information of the intervention.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Intervention information.",
                              "properties": {
                                "additional_information": {
                                  "description": "Additional information about the intervention.",
                                  "type": "string",
                                  "maxLength": 2000,
                                  "example": "I have a leaky faucet"
                                },
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Intervention coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          ]
                        },
                        "vehicle": {
                          "description": "The information of the vehicle.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "fuel_type": {
                                  "description": "The fuel type of the vehicle.\nThe possible values are:\n - ALCOHOL_ETHANOL: Alcohol ethanol\n - BIO_DIESEL: Biologic Diesel\n - DIESEL: Diesel\n - ELECTRIC: Electricity\n - ELECTRIC_DIESEL: Electricity and diesel hybrid\n - ELECTRIC_GASOLINE: Electricity and gasoline hybrid\n - GASOLINE: Gasoline\n - HYDROGEN: Hydrogen\n - LIQUID_PETROL_GAS: Liquid Petrol Gas hybrid\n - NATURAL_GAS: Natural gas hybrid\n - UNKNOWN: Unknown\n",
                                  "type": "string",
                                  "example": "LIQUID_PETROL_GAS",
                                  "enum": [
                                    "ALCOHOL_ETHANOL",
                                    "BIO_DIESEL",
                                    "DIESEL",
                                    "ELECTRIC",
                                    "ELECTRIC_DIESEL",
                                    "ELECTRIC_GASOLINE",
                                    "GASOLINE",
                                    "HYDROGEN",
                                    "LIQUID_PETROL_GAS",
                                    "NATURAL_GAS",
                                    "UNKNOWN"
                                  ]
                                },
                                "registration_plate_number": {
                                  "description": "The registration plate number of the vehicle.",
                                  "type": "string",
                                  "maxLength": 50,
                                  "example": "ZZ-999-ZZ"
                                },
                                "vehicle_type": {
                                  "description": "Type of the vehicle.\nThe values are:\n - BIKE: Bike\n - BUS_COACHES: Bus coaches, autocar\n - CAR: car\n - MOBILE_HOME_CAMPING_CAR: Mobile home, camper van\n - MOTORCYCLE: Motorcycle\n - TRUCK: Truck\n - VAN: Van\n",
                                  "type": "string",
                                  "enum": [
                                    "BIKE",
                                    "BUS_COACHES",
                                    "CAR",
                                    "MOBILE_HOME_CAMPING_CAR",
                                    "MOTORCYCLE",
                                    "TRUCK",
                                    "VAN"
                                  ],
                                  "example": "CAR"
                                }
                              }
                            }
                          ]
                        },
                        "consents": {
                          "description": "List of the consents the customer has consented to.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Customer consent.",
                            "properties": {
                              "code": {
                                "description": "Code of the consent.",
                                "type": "string",
                                "example": "PHONE",
                                "maxLength": 100
                              },
                              "is_confirmed": {
                                "description": "Indicates if the consent has been confirmed by the customer or not.",
                                "type": "boolean",
                                "example": true
                              }
                            },
                            "required": [
                              "code",
                              "is_confirmed"
                            ]
                          }
                        },
                        "related_documents": {
                          "description": "Set of attachments provided with the service order.",
                          "type": "array",
                          "maxItems": 1000,
                          "items": {
                            "type": "object",
                            "description": "Attachment information.",
                            "properties": {
                              "name": {
                                "description": "Attached document name.",
                                "type": "string",
                                "maxLength": 100
                              },
                              "content_url": {
                                "description": "URL to download the document.",
                                "type": "string",
                                "maxLength": 2000
                              },
                              "type": {
                                "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                                "type": "string",
                                "maxLength": 100
                              },
                              "sent_by": {
                                "description": "The attachment sent via confirmation email or precontractual email.",
                                "type": "array",
                                "maxItems": 2,
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "CONFIRMATION_EMAIL",
                                    "PRECONTRACTUAL_EMAIL"
                                  ]
                                }
                              },
                              "created_at": {
                                "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-03-09T10:00:00Z"
                              }
                            },
                            "required": [
                              "name",
                              "content_url"
                            ]
                          }
                        },
                        "destination": {
                          "description": "Destination address of the service.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Destination information.",
                              "properties": {
                                "address": {
                                  "description": "Postal address.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "street_address": {
                                          "description": "Street address.",
                                          "type": "string",
                                          "example": "1 Avenue France",
                                          "maxLength": 255
                                        },
                                        "postal_code": {
                                          "description": "Postal code or zip code.",
                                          "type": "string",
                                          "example": "75001",
                                          "maxLength": 10
                                        },
                                        "city": {
                                          "description": "City.",
                                          "type": "string",
                                          "example": "Paris",
                                          "maxLength": 100
                                        },
                                        "country": {
                                          "description": "Country ISO-3166-1 alpha-2 format (2 letter codes).",
                                          "type": "string",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2
                                        }
                                      },
                                      "required": [
                                        "street_address",
                                        "postal_code",
                                        "city",
                                        "country"
                                      ]
                                    }
                                  ]
                                },
                                "coordinates": {
                                  "description": "Destination coordinate.",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "longitude": {
                                          "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 2.3488
                                        },
                                        "latitude": {
                                          "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                                          "type": "number",
                                          "example": 48.85341
                                        }
                                      },
                                      "required": [
                                        "longitude",
                                        "latitude"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "intervention",
                        "customer",
                        "quote_code"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/service_orders/{service_order_id}/confirm": {
      "post": {
        "summary": "Confirm the service order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Unique service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_type": {
                    "description": "The Payment mode.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "ELECTRONIC_TRANSFER",
                      "VIRTUAL_CREDIT_CARD",
                      "CASH",
                      "CHEQUE"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "payment_reference": {
                    "description": "The payment reference.",
                    "type": "string",
                    "maxLength": 150,
                    "example": "2c92c0f96af864e7016afe7aa28a6cbf"
                  }
                }
              }
            }
          },
          "description": "Service order confirmation request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service order confirmation response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "service_order_number": {
                      "description": "Final service order number\nrequired if the service order's status is not DRAFT.\n",
                      "type": "string",
                      "example": "AAA111000000064",
                      "maxLength": 150
                    },
                    "status": {
                      "description": "The service order's status.",
                      "type": "string",
                      "enum": [
                        "ACTIVE"
                      ],
                      "example": "ACTIVE"
                    },
                    "related_documents": {
                      "description": "Set of attachments provided with the service.",
                      "type": "array",
                      "maxItems": 1000,
                      "items": {
                        "type": "object",
                        "description": "Attachment information.",
                        "properties": {
                          "name": {
                            "description": "Attached document name.",
                            "type": "string",
                            "maxLength": 100
                          },
                          "content_url": {
                            "description": "URL to download the document.",
                            "type": "string",
                            "maxLength": 2000
                          },
                          "type": {
                            "description": "Indicates the type of the document, it can be:\n- TERMS_AND_CONDITIONS;\n- ...\n",
                            "type": "string",
                            "maxLength": 100
                          },
                          "sent_by": {
                            "description": "The attachment sent via confirmation email or precontractual email.",
                            "type": "array",
                            "maxItems": 2,
                            "items": {
                              "type": "string",
                              "enum": [
                                "CONFIRMATION_EMAIL",
                                "PRECONTRACTUAL_EMAIL"
                              ]
                            }
                          },
                          "created_at": {
                            "description": "Date and time of document creation - UTC datetime, RFC3339 format (YYYY-MM-DDTHH:mm:ssZ).",
                            "type": "string",
                            "format": "date-time",
                            "example": "2021-03-09T10:00:00Z"
                          }
                        },
                        "required": [
                          "name",
                          "content_url"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/roadside/service_orders/{service_order_id}/payments": {
      "post": {
        "summary": "Send the mean of payment selected by the customer.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "service_order_id",
            "description": "Unique service order identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The Payment mode.",
                    "type": "string",
                    "enum": [
                      "CREDIT_CARD",
                      "DEBIT_CARD",
                      "ELECTRONIC_TRANSFER",
                      "VIRTUAL_CREDIT_CARD",
                      "CASH",
                      "CHEQUE"
                    ],
                    "example": "CREDIT_CARD"
                  },
                  "payment_reference": {
                    "description": "The payment reference.",
                    "type": "string",
                    "maxLength": 100,
                    "example": "bank cheque number - 27006"
                  },
                  "transfer_information": {
                    "description": "Information about electronic transfer.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "account_holder": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "first_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "First name of the account's owner."
                                  },
                                  "last_name": {
                                    "type": "string",
                                    "maxLength": 100,
                                    "description": "Last name of the account's owner."
                                  }
                                }
                              }
                            ]
                          },
                          "account_name": {
                            "type": "string",
                            "description": "Name's of this bank account",
                            "maxLength": 100
                          },
                          "country_code": {
                            "type": "string",
                            "example": "FR",
                            "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code).",
                            "maxLength": 2,
                            "minLength": 2
                          },
                          "wire_code": {
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": "object",
                              "properties": {
                                "wire_code_type": {
                                  "type": "string",
                                  "enum": [
                                    "IBAN"
                                  ],
                                  "description": "Wire's type (only IBAN is accepted)."
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 50,
                                  "description": "The value of the IBAN"
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "The payment mode and the payment type.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The Payment mode.",
                          "type": "string",
                          "enum": [
                            "CREDIT_CARD",
                            "DEBIT_CARD",
                            "ELECTRONIC_TRANSFER",
                            "VIRTUAL_CREDIT_CARD",
                            "CASH",
                            "CHEQUE"
                          ],
                          "example": "CREDIT_CARD"
                        },
                        "payment_reference": {
                          "description": "The payment reference.",
                          "type": "string",
                          "maxLength": 100,
                          "example": "bank cheque number - 27006"
                        },
                        "transfer_information": {
                          "description": "Information about electronic transfer.",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "account_holder": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "first_name": {
                                          "type": "string",
                                          "maxLength": 100,
                                          "description": "First name of the account's owner."
                                        },
                                        "last_name": {
                                          "type": "string",
                                          "maxLength": 100,
                                          "description": "Last name of the account's owner."
                                        }
                                      }
                                    }
                                  ]
                                },
                                "account_name": {
                                  "type": "string",
                                  "description": "Name's of this bank account",
                                  "maxLength": 100
                                },
                                "country_code": {
                                  "type": "string",
                                  "example": "FR",
                                  "description": "Bank's country code, ISO-3166-1 alpha-2 format (2 letters code).",
                                  "maxLength": 2,
                                  "minLength": 2
                                },
                                "wire_code": {
                                  "type": "array",
                                  "maxItems": 10,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "wire_code_type": {
                                        "type": "string",
                                        "enum": [
                                          "IBAN"
                                        ],
                                        "description": "Wire's type (only IBAN is accepted)."
                                      },
                                      "value": {
                                        "type": "string",
                                        "maxLength": 50,
                                        "description": "The value of the IBAN"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "properties": {
                        "payment_technical_information": {
                          "description": "Technical information, provided to the API caller to allow it to complet the payment.",
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Technical information for payment system access.\nThis information is provided to the API caller to allow it to complete the payment.\n",
                              "properties": {
                                "payment_gateway": {
                                  "description": "Payment gateway code.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "key": {
                                  "description": "Public key generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "signature": {
                                  "description": "Digital signature generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "token": {
                                  "description": "Token generated for the subscription.",
                                  "type": "string",
                                  "maxLength": 2000
                                },
                                "tenant_id": {
                                  "description": "ID of the Zuora tenant.",
                                  "type": "string",
                                  "maxLength": 50
                                },
                                "page_id": {
                                  "description": "The page id.",
                                  "type": "string",
                                  "maxLength": 50
                                }
                              },
                              "required": [
                                "payment_gateway",
                                "key",
                                "signature",
                                "token",
                                "tenant_id",
                                "page_id"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.roadside.service_orders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/vehicle_for_hire/mission_orders/{mission_order_id}/accept": {
      "post": {
        "summary": "Allows the provider to accept the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimated_time_arrival": {
                    "description": "Estimated Time of Arrival\nUTC date-time, ISO 8601 format (ex: YYYY-MM-DDTHH:mm:ssZ).\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2019-01-25T15:30:00Z"
                  },
                  "start_location": {
                    "description": "Indicates the starting location of the provider when the mission order is accepted.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "longitude": {
                            "description": "Longitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 2.3488
                          },
                          "latitude": {
                            "description": "Latitude in WGS84 format, expressed in Decimal Degree (DD).",
                            "type": "number",
                            "example": 48.85341
                          }
                        },
                        "required": [
                          "longitude",
                          "latitude"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Content of the Mission Order Acceptance.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order accepted successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/service/vexp/vehicle_for_hire/mission_orders/{mission_order_id}/refuse": {
      "post": {
        "summary": "Allows the provider to refuse the mission order.",
        "description": "Cf. summary",
        "parameters": [
          {
            "name": "x-environment",
            "description": "When calling the API on a testing environment, the user has to precise in which environment the information should be sent:\n- test -> Integration and User Acceptance Tests (UAT) environment\n",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "test"
              ]
            }
          },
          {
            "name": "mission_order_id",
            "description": "Identifier of the mission order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "Reason of the refusal\nThe possible values are:\n- CANT_ATTEMPT_WITHIN_SLA_TIME: Can't attempt within SLA time (Service Level Agreement) - DONT_HAVE_RIGHT_EQUIPMENT: Provider does not have the right equipment - LOCATION_OUT_OF_ZONE: Location out of zone - OTHER: Any other reason. Use description to give the other reason - PROVIDER_NOT_AVAILABLE: Provider currently not available\n",
                    "type": "string",
                    "enum": [
                      "CANT_ATTEMPT_WITHIN_SLA_TIME",
                      "DONT_HAVE_RIGHT_EQUIPMENT",
                      "LOCATION_OUT_OF_ZONE",
                      "OTHER",
                      "PROVIDER_NOT_AVAILABLE"
                    ],
                    "example": "PROVIDER_NOT_AVAILABLE"
                  },
                  "description": {
                    "description": "A description of the refusal is required when reason is equal to _OTHER_.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Vehicule breakdown"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "description": "Content of the Mission Order Refusal.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mission Order refused successfully (No Content)"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "400",
                  "error": "Bad Request",
                  "error_description": "The input information received were not compliant with the API specification."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nThe identity of the caller hasn't been definitely confirmed (invalid issuer, expired token, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "401",
                  "error": "Unauthorized",
                  "error_description": "Header \"authorization\" is not a valid JSON Web Token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\nThe identity of the caller is confirmed, however the required access grants aren't met (missing scope, unknwown client_id, ...)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "403",
                  "error": "Forbidden",
                  "error_description": "The right to access this API has not been granted in the JSON Web Token."
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe server did not find a current representation for the searched resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "404",
                  "error": "Not Found",
                  "error_description": "The searched resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\nThe request could not be completed due to a conflict with the current state of the resource.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "409",
                  "error": "Conflict",
                  "error_description": "The request could not be completed due to a conflict with the current state of the resource."
                }
              }
            }
          },
          "default": {
            "description": "Default response format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "error": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "error_description": {
                      "type": "string",
                      "maxLength": 4000
                    },
                    "status_code": {
                      "type": "string",
                      "maxLength": 3
                    }
                  }
                },
                "example": {
                  "status_code": "500",
                  "error": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "prod_maam_cc": [
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write"
            ]
          },
          {
            "test_maam_cc": [
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write"
            ]
          }
        ],
        "tags": [
          "service"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "test_maam_cc": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://maam-stg.axa.com/maam/v2/token",
            "scopes": {
              "urn:axa.partners.assistance.home.cases.write": "Right to act on Case information.",
              "urn:axa.partners.assistance.motor.cases.read_only": "Right to read case information.",
              "urn:axa.partners.assistance.motor.cases.write": "Right to act on case information.",
              "urn:axa.partners.assistance.motor.cases.notificationrequests.write": "Right to create a notification request.",
              "urn:axa.partners.assistance.motor.cases.services.write": "Right to act on service information.",
              "urn:axa.partners.assistance.motor.cases.services.destination_qualifiers.read_only": "Right to read on service destination qualifiers.",
              "urn:axa.partners.assistance.motor.cases.services.read_only": "Right to read on service information",
              "urn:axa.partners.assistance.motor.cases.policies.read_only": "Right to read case information.",
              "urn:axa.partners.information.roadside.vehicles.read_only": "Right to read vehicle information.",
              "urn:axa.partners.information.motor.workshops.read_only": "Right to read workshops information.",
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information",
              "urn:axa.partners.sales.enterprise.motor.policies.read_only": "Right to read policy information.",
              "urn:axa.partners.sales.individual.consumerelectronics.orders.write": "Right to act on order information.",
              "urn:axa.partners.sales.individual.consumerelectronics.orders.read_only": "Right to read order information.",
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only": "Right to read policy snapshot information.",
              "urn:axa.partners.sales.individual.consumerelectronics.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.sales.individual.home.orders.write": "Right to act on order information.",
              "urn:axa.partners.sales.individual.home.orders.read_only": "Right to read order information.",
              "urn:axa.partners.sales.individual.home.products.read_only": "Right to get products details.",
              "urn:axa.partners.sales.individual.home.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.individual.travel.policy_snapshots.write": "Right to act on policy information",
              "urn:axa.partners.sales.individual.travel.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.travel.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.sales.individual.travel.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.travel.products.read_only": "Right to read product information.",
              "urn:axa.partners.sales.travel.products.benefits.read_only": "Right to get benefits details.",
              "urn:axa.partners.sales.individual.home.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.home.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.service.domestic.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.domestic.missions.write": "Right to act on a mission.",
              "urn:axa.partners.service.domestic.missions.communications.write": "Right to communicate on a mission.",
              "urn:axa.partners.service.domestic.missions.mission_reports.write": "Right to carry out a mission report.",
              "urn:axa.partners.service.domestic.missions.change_requests.write": "Right to request a change on a mission.",
              "urn:axa.partners.service.domestic.orders.write": "Right to act on order information.",
              "urn:axa.partners.service.domestic.orders.read_only": "Right to read order information.",
              "urn:axa.partners.service.domestic.products.read_only": "Right to get products details.",
              "urn:axa.partners.service.domestic.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.service.domestic.service_orders.write": "Right to act on service order information.",
              "urn:axa.partners.service.domestic.service_orders.read_only": "Right to read service order information.",
              "urn:axa.partners.service.domestic.missions.appointments.write": "RIght to act on a mission appointment.",
              "urn:axa.partners.service.rental.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.roadside.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.roadside.missions.write": "Right to act on a mission.",
              "urn:axa.partners.service.roadside.missions.communications.write": "Right to communicate on a mission.",
              "urn:axa.partners.service.roadside.missions.mission_reports.write": "Right to carry out a mission report.",
              "urn:axa.partners.service.roadside.missions.change_requests.write": "Right to request a change on a mission.",
              "urn:axa.partners.service.roadside.orders.write": "Right to act on order information.",
              "urn:axa.partners.service.roadside.orders.read_only": "Right to read order information.",
              "urn:axa.partners.service.roadside.products.read_only": "Right to get products details.",
              "urn:axa.partners.service.roadside.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.service.roadside.service_orders.write": "Right to act on service order information.",
              "urn:axa.partners.service.roadside.service_orders.read_only": "Right to read service order information.",
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.rental.missions.write": "Right to act on mission."
            }
          }
        }
      },
      "prod_maam_cc": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://maam.axa.com/maam/v2/token",
            "scopes": {
              "urn:axa.partners.assistance.motor.cases.read_only": "Right to read case information.",
              "urn:axa.partners.assistance.motor.cases.write": "Right to act on case information.",
              "urn:axa.partners.assistance.motor.cases.notificationrequests.write": "Right to create a notification request.",
              "urn:axa.partners.assistance.motor.cases.services.write": "Right to act on service information.",
              "urn:axa.partners.assistance.motor.cases.services.destination_qualifiers.read_only": "Right to read on service destination qualifiers.",
              "urn:axa.partners.information.roadside.vehicles.read_only": "Right to read vehicle information.",
              "urn:axa.partners.information.motor.workshops.read_only": "Right to read workshops information.",
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information",
              "urn:axa.partners.sales.enterprise.motor.policies.read_only": "Right to read policy information.",
              "urn:axa.partners.sales.individual.consumerelectronics.orders.write": "Right to act on order information.",
              "urn:axa.partners.sales.individual.consumerelectronics.orders.read_only": "Right to read order information.",
              "urn:axa.partners.sales.individual.consumer_electronics.policy_snapshots.read_only": "Right to read policy snapshot information.",
              "urn:axa.partners.sales.individual.consumerelectronics.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.individual.consumerelectronics.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.consumerelectronics.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.sales.individual.home.orders.write": "Right to act on order information.",
              "urn:axa.partners.sales.individual.home.orders.read_only": "Right to read order information.",
              "urn:axa.partners.sales.individual.home.products.read_only": "Right to get products details.",
              "urn:axa.partners.sales.individual.home.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.individual.travel.policy_snapshots.write": "Right to act on policy information",
              "urn:axa.partners.sales.individual.travel.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.travel.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.sales.individual.travel.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.sales.travel.products.read_only": "Right to read product information.",
              "urn:axa.partners.sales.individual.home.policies.write": "Right to act on subscription information.",
              "urn:axa.partners.sales.individual.home.policies.read_only": "Right to read subscription information.",
              "urn:axa.partners.service.domestic.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.domestic.missions.write": "Right to act on a mission.",
              "urn:axa.partners.service.domestic.missions.communications.write": "Right to communicate on a mission.",
              "urn:axa.partners.service.domestic.missions.mission_reports.write": "Right to carry out a mission report.",
              "urn:axa.partners.service.domestic.missions.change_requests.write": "Right to request a change on a mission.",
              "urn:axa.partners.service.domestic.orders.write": "Right to act on order information.",
              "urn:axa.partners.service.domestic.orders.read_only": "Right to read order information.",
              "urn:axa.partners.service.domestic.products.read_only": "Right to get products details.",
              "urn:axa.partners.service.domestic.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.service.domestic.service_orders.write": "Right to act on service order information.",
              "urn:axa.partners.service.domestic.service_orders.read_only": "Right to read service order information.",
              "urn:axa.partners.service.rental.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.roadside.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.roadside.missions.write": "Right to act on a mission.",
              "urn:axa.partners.service.roadside.missions.communications.write": "Right to communicate on a mission.",
              "urn:axa.partners.service.roadside.missions.mission_reports.write": "Right to carry out a mission report.",
              "urn:axa.partners.service.roadside.missions.change_requests.write": "Right to request a change on a mission.",
              "urn:axa.partners.service.roadside.orders.write": "Right to act on order information.",
              "urn:axa.partners.service.roadside.orders.read_only": "Right to read order information.",
              "urn:axa.partners.service.roadside.products.read_only": "Right to get products details.",
              "urn:axa.partners.service.roadside.quotesrequests.write": "Right to create quotes requests.",
              "urn:axa.partners.service.roadside.service_orders.write": "Right to act on service order information.",
              "urn:axa.partners.service.roadside.service_orders.read_only": "Right to read service order information.",
              "urn:axa.partners.service.vehicle_for_hire.missionorders.write": "Right to act on mission order.",
              "urn:axa.partners.service.rental.missions.write": "Right to act on mission."
            }
          }
        }
      },
      "test_coop_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-coop-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-coop-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "demo_frend_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-frend-customers-demo.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-frend-customers-demo.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "dev_coop_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-coop-customers-dev.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-coop-customers-dev.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_porsche_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-porsche-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-porsche-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_coverwise_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-coverwise-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-coverwise-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_dkbcash_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-dkbcash-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-dkbcash-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_curveuk_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-curve-uk-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-curve-uk-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_fit2tripes_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-fit2trip-es-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-fit2trip-es-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_fit2tripit_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-fit2trip-it-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-fit2trip-it-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_monzouk_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-monzo-uk-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-monzo-uk-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "test_puffinuk_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://axa-partners-puffin-uk-customers-test.eu.auth0.com/authorize",
            "tokenUrl": "https://axa-partners-puffin-uk-customers-test.eu.auth0.com/oauth/token",
            "scopes": {
              "urn:axa.partners.insurance.travel.claims.write": "Right to write claim information",
              "urn:axa.partners.insurance.travel.claims.read_only": "Right to read claim information"
            }
          }
        }
      },
      "prod_tcm_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.bonjourdocteur.com/authorize",
            "tokenUrl": "https://auth.bonjourdocteur.com/oauth/token",
            "scopes": {
              "urn:axa.partners.service.medical.consultations.write": "Right to act on a medical consultation",
              "urn:axa.partners.service.medical.consultations.read_only": "Right to read medical consultation information",
              "urn:axa.partners.service.medical.consultations.medical_documents.read_only": "Right to read prescription information"
            }
          }
        }
      },
      "test_tcm_acg": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth-test.bonjourdocteur.com/authorize",
            "tokenUrl": "https://auth-test.bonjourdocteur.com/oauth/token",
            "scopes": {
              "urn:axa.partners.service.medical.consultations.write": "Right to act on a medical consultation",
              "urn:axa.partners.service.medical.consultations.read_only": "Right to read medical consultation information",
              "urn:axa.partners.service.medical.consultations.medical_documents.read_only": "Right to read prescription information"
            }
          }
        }
      }
    }
  },
  "x-version": "2fe30ab2028ef33bb8ac248d38653f570d70bdaf",
  "x-generated-at": "2022-03-15T13:43:09.957Z"
}