{
  "openapi": "3.0.3",
  "info": {
    "title": "Qonto",
    "description": "Qonto ThirdParties API",
    "version": "v2",
    "contact": {
      "url": "https://api-doc.qonto.com/",
      "name": "Qonto"
    }
  },
  "x-meta-api": {
    "qsStringifyOptions": {
      "arrayFormat": "brackets"
    }
  },
  "servers": [
    {
      "url": "https://thirdparty.qonto.com",
      "description": "Production URL"
    }
  ],
  "tags": [
    {
      "name": "Beneficiaries"
    },
    {
      "name": "External Transfers"
    },
    {
      "name": "Attachments"
    },
    {
      "name": "Attachments in Transactions"
    },
    {
      "name": "Labels"
    },
    {
      "name": "Memberships"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "Internal Transfers"
    },
    {
      "name": "Requests"
    }
  ],
  "paths": {
    "/v2/external_transfers/checkout": {
      "post": {
        "summary": "Create external transfers with creditor data",
        "operationId": "external_transfers_checkout",
        "security": [
          {
            "OAuth": [
              "payment.write"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "external_transfers",
                  "debit_iban"
                ],
                "properties": {
                  "debit_iban": {
                    "type": "string"
                  },
                  "external_transfers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "credit_iban",
                        "credit_account_name",
                        "credit_account_currency",
                        "reference",
                        "currency",
                        "amount"
                      ],
                      "properties": {
                        "credit_iban": {
                          "type": "string"
                        },
                        "credit_account_name": {
                          "type": "string"
                        },
                        "credit_account_currency": {
                          "type": "string",
                          "description": "ISO 4217"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "note": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "string",
                          "description": "ISO 4217"
                        },
                        "scheduled_date": {
                          "type": "string",
                          "example": "2021-07-12"
                        },
                        "amount": {
                          "type": "string"
                        },
                        "idempotency_key": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "attachment_ids": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns an array of external transfers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "external_transfers",
                    "errors"
                  ],
                  "properties": {
                    "external_transfers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExternalTransfer"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "only successes": {
                    "value": {
                      "external_transfers": [
                        {
                          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "slug": "my-slug",
                          "debit_iban": "string",
                          "debit_amount": "12.55",
                          "debit_amount_cents": "1255",
                          "debit_currency": "EUR",
                          "initiator_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "beneficiary_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "credit_amount": "12.55",
                          "credit_amount_cents": "1255",
                          "credit_currency": "EUR",
                          "rate_applied": null,
                          "payment_purpose": "goods",
                          "reference": "my-reference",
                          "note": "Some note",
                          "declined_reason": null,
                          "status": "pending",
                          "scheduled_date": "2021-07-12",
                          "created_at": "2021-01-27T22:05:07.000Z",
                          "completed_at": "2021-01-27T22:05:07.000Z",
                          "processed_at": "2021-01-27T22:05:07.000Z",
                          "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                      ],
                      "errors": []
                    }
                  },
                  "partial successes and errors": {
                    "value": {
                      "external_transfers": [
                        {
                          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "slug": "my-slug",
                          "debit_iban": "string",
                          "debit_amount": "12.55",
                          "debit_amount_cents": "1255",
                          "debit_currency": "EUR",
                          "initiator_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "beneficiary_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "credit_amount": "12.55",
                          "credit_amount_cents": "1255",
                          "credit_currency": "EUR",
                          "rate_applied": null,
                          "payment_purpose": "goods",
                          "reference": "my-reference",
                          "note": "Some note",
                          "declined_reason": null,
                          "status": "pending",
                          "scheduled_date": "2021-07-12",
                          "created_at": "2021-01-27T22:05:07.000Z",
                          "completed_at": "2021-01-27T22:05:07.000Z",
                          "processed_at": "2021-01-27T22:05:07.000Z",
                          "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                      ],
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Bank account was not found",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfers/1/debit_iban"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "only errors": {
                    "value": {
                      "external_transfers": [],
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Bank account was not found",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfers/1/debit_iban"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action due to pricing plan"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when debit_iban cannot be found": {
                    "value": {
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Bank account was not found",
                          "source": {
                            "properties": {
                              "pointer": "/debit_iban"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "External Transfers"
        ],
        "description": "OAuth scope: `payment.write`\n\n**Accessible only using Strong Customer Authentication**. More details in [our documentation](https://api-doc.qonto.com/docs/business-api/ZG9jOjI5MDg3NzA4-strong-customer-authentication)\n\n---\nCreate a maximum of 400 external transfers with creditor data.\n\n---\n\nThe API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID.\n\nWhen there is a `422` error, the easiest way to identify the invalid external transfer in the list, look at the `errors[x].source.pointer`. The structure of the pointer will be the root key which will always be `external_transfers`, followed by the index of the ID in the list. For example, `/external_transfers/1/amount` indicates that the second entry in the external transfers array is unprocessable due to its amount.\n\n## Max number of transfers : 400\n\n## Attributes details\n\n##### Initiator ID\n  Identifies the member that initiated the external transfer. For checkouts initiated via the API, it will always be the owner of the OAuth2 token.\n\n##### Debit\n- `debit_iban`: Can be any of the organization's bank accounts. IBAN formatted ISO 13616.\n- `debit_amount`: The amount that will be debited from your Qonto account.\n- `debit_amount_cents`: The amount that will be debited from you Qonto account in an integer format.\n- `debit_currency`: Must be EUR. ISO 4217 formatted.\n\n##### Credit\n- `credit_amount`: The amount that the creditor will receive.\n- `credit_amount_cents`: The amount that the creditor will receive in an integer format.\n- `credit_currency`: Equals debit currency if issued in the SEPA network (only supported currencies). ISO 4217 format.\n\n##### FX rate\n- `rate_applied`: Foreign exchange rate applied to your transaction, formatted with 4 digits after comma. Ex: 1,1082\n\n#### Timestamps\n\nEach external transfer contains three timestamps:\n\n* `created_at`, UTC, the time at which the external transfer was first recorded.\n* `processed_at`, UTC, when the external transfer has been started to be processed by Qonto.\n* `completed_at`, UTC, when the external transfer is in its final state, either settled or declined.\n* `scheduled_date`, YYYY-MM-DD, indicates when the external transfer was scheduled to be sent by Qonto.\n\n##### Status\n`status` can contain the following values\n\n* `pending`: External transfer is created and has not been processed yet. If transfer is not processed within next minute, it means either execution date may not been reached yet or we are running some compliance checks on this transfer.\n* `processing`: External transfer processing means account balance is debited and a transaction has been created. Processing status can last up to multiple hours until transfer is sent in the network to the beneficiary.\n* `canceled`: When the external transfer is canceled by a user in the interface. This is a permanent status.\n* `declined`: When the external transfer processing fails for various reasons. This is a permanent status.\n* `settled`: When the external transfer is sent to the network, transfer is settled. This is a permanent status.\n\n## Request parameter details\n\n##### Amount and Currency\n* The `amount` corresponds to the amount of the transaction in the `currency` of the bank account. Amounts must be https://www.w3.org/TR/payment-request/#dfn-valid-decimal-monetary-value\n* The `currency` should be EUR.\n\n##### Reference\n* Transfer reference that can be used to enter transfer details to further describe the transfer\n* Maximum `reference` length is `140` characters\n\n##### Debit iban\n* `debit_iban`: IBAN of account to debit\n\n##### Creditor\n* `credit_iban`: IBAN of account to credit\n* `credit_account_name`: The name of the credit account\n* `credit_account_currency`: Can be either the currency of the `debit_iban` or the currency of the creditor. Allowed values is only `EUR` at the moment.\n\n##### Attachments\nYou can link up to 5 attachments per transfer by passing the `attachment_ids` parameter. You can upload your attachments using our [POST /v2/attachments](https://qonto-next.stoplight.io/docs/business-api/branches/create-attachments/b3A6MzU2NjMxMzU-upload-attachment) endpoint. **Note: For SEPA transfers above 30,000 EUR at least one attachment is required**\n",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "X-Qonto-Sca-Session-Token"
          }
        ]
      }
    },
    "/v2/external_transfers": {
      "get": {
        "summary": "List external transfers",
        "operationId": "list_external_transfers",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "pending",
                "enum": [
                  "pending",
                  "processing",
                  "canceled",
                  "declined",
                  "settled"
                ],
                "default": "pending"
              }
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10T11:47:53.123Z"
            },
            "in": "query",
            "name": "updated_at_from",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10T11:47:53.123Z"
            },
            "in": "query",
            "name": "updated_at_to",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10"
            },
            "in": "query",
            "name": "scheduled_date_from",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10"
            },
            "in": "query",
            "name": "scheduled_date_to",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "in": "query",
            "name": "beneficiary_ids"
          }
        ],
        "responses": {
          "200": {
            "description": "lists external transfers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "external_transfers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExternalTransfer"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when updated_at is invalid": {
                    "value": {
                      "errors": [
                        {
                          "code": "invalid",
                          "detail": "updated_at_from is not a valid date",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfer/updated_at_from"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "External Transfers"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\nRetrieve a list of external transfers.\n\n---\n\n## Attributes details\n\n##### Initiator ID\n  Identifies the member that initiated the external transfer. For external transfers initiated via the API, it will always be the owner of the OAuth2 token.\n\n##### Debit\n- `debit_iban`: Can be any of the organization's bank accounts. IBAN formatted ISO 13616.\n- `debit_amount`: The amount that will be debited from your Qonto account.\n- `debit_amount_cents`: The amount that will be debited from you Qonto account in an integer format.\n- `debit_currency`: Must be EUR. ISO 4217 formatted.\n\n##### Credit\n- `credit_amount`: The amount that the beneficiary will receive.\n- `credit_amount_cents`: The amount that the beneficiary will receive in an integer format.\n- `credit_currency`: Equals debit currency if issued in the SEPA network (only supported currencies). ISO 4217 format. Allowed value for international transfers: AUD, CAD, CHF, CNY, CZK, DKK, GBP, HKD, HRK, HUF, ILS, JPY, NOK, NZD, PLN, RON, SEK, USD\n\n##### FX rate\n- `rate_applied`: Foreign exchange rate applied to your transaction, formatted with 4 digits after comma. Ex: 1,1082\n\n#### Timestamps\n\nEach external transfer contains three timestamps:\n\n* `created_at`, UTC, the time at which the external transfer was first recorded.\n* `processed_at`, UTC, when the external transfer has been started to be processed by Qonto.\n* `completed_at`, UTC, when the external transfer is in its final state, either settled or declined.\n* `scheduled_date`, YYYY-MM-DD, indicates when the external transfer was scheduled to be sent by Qonto.\n\n##### Status\n`status` can contain the following values\n\n* `pending`: External transfer is created and has not been processed yet. If transfer is not processed within next minute, it means either execution date may not been reached yet or we are running some compliance checks on this transfer.\n* `processing`: External transfer processing means account balance is debited and a transaction has been created. Processing status can last up to multiple hours until transfer is sent in the network to the beneficiary.\n* `canceled`: When the external transfer is canceled by a user in the interface. This is a permanent status.\n* `declined`: When the external transfer processing fails for various reasons. This is a permanent status.\n* `settled`: When the external transfer is sent to the network, transfer is settled. This is a permanent status.\n\n## Filters\n\n#### `status`\nExternal transfers can be filtered by status. The `status` query parameter accepts an array of statuses as value. The possible values are: `pending`, `processing`, `canceled`, `declined` and `settled`.\n\n#### `beneficiary_ids`\nAllows filtering on a list of beneficiary IDs\n\n\n#### `updated_at` / `scheduled_date`\nExternal transfers can be filtered according to both `updated_at` and `scheduled_date` fields.\nThis is particularly useful to retrieve only the latest external transfers in your application.\nTwo filters are available :\n\n- **updated_at**\n  - `updated_at_from`: Minimum value (e.g: `2019-01-10T11:47:53.123Z`)\n  - `updated_at_to`: Maximum value\n- **scheduled_date**\n  - `scheduled_date_from`: Minimum value\n  - `scheduled_date_to`: Maximum value\n\n**Do note**:\n\n- *You can use one or the other `updated_at` filter (same for `scheduled_date`), or use them in combination if you want external transfers updated within a specific timeframe.*\n- *`updated_at` / `scheduled_date` filters should have a valid date time format (**ISO 8601** for instance)*\n\n## Sorting\n\nExternal transfers can be sorted by a specific field and order. The `sort_by` query parameter accepts a string defining these two items with the `field:order` format.\n\n#### Field\n\n- `scheduled_date` and `updated_at` values are available.\n\n#### Order\n\n- Two values are available : `asc` (Ascending) / `desc` (Descending)\n- By default the order used to sort external transfers is `desc`\n\n**Do note**: You can use a combination of field and order to define how to sort external transfers:\n- Only field (e.g `updated_at`, order will have default value `desc`)\n- Only order (e.g `:asc`, field will have default value `updated_at`)\n- Both (e.g `updated_at:asc`)\n"
      },
      "post": {
        "summary": "Create an external transfer",
        "operationId": "create_external_transfer",
        "security": [
          {
            "OAuth": [
              "payment.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "X-Qonto-Idempotency-Key",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "header",
            "description": "This parameter is required. The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "external_transfer"
                ],
                "properties": {
                  "external_transfer": {
                    "type": "object",
                    "required": [
                      "beneficiary_id",
                      "debit_iban",
                      "reference",
                      "amount",
                      "currency"
                    ],
                    "properties": {
                      "beneficiary_id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "debit_iban": {
                        "type": "string"
                      },
                      "reference": {
                        "type": "string"
                      },
                      "note": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string",
                        "description": "ISO 4217"
                      },
                      "scheduled_date": {
                        "type": "string",
                        "example": "2021-07-12"
                      },
                      "amount": {
                        "type": "string"
                      },
                      "attachment_ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns an external transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "external_transfer"
                  ],
                  "properties": {
                    "external_transfer": {
                      "$ref": "#/components/schemas/ExternalTransfer"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when beneficiary is not trusted": {
                    "value": {
                      "errors": [
                        {
                          "code": "untrusted_beneficiary",
                          "detail": "External transfers can only be initiated to trusted beneficiaries",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfer/beneficiary_id"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "when debit_iban cannot be found": {
                    "value": {
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Bank account was not found",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfer/debit_iban"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "when reference is missing": {
                    "value": {
                      "errors": [
                        {
                          "code": "missing_key",
                          "detail": "reference is missing",
                          "source": {
                            "pointer": "/external_transfer/reference"
                          }
                        }
                      ]
                    }
                  },
                  "when amount is missing": {
                    "value": {
                      "errors": [
                        {
                          "code": "missing_key",
                          "detail": "amount is missing",
                          "source": {
                            "pointer": "/external_transfer/amount"
                          }
                        }
                      ]
                    }
                  },
                  "when currency is missing": {
                    "value": {
                      "errors": [
                        {
                          "code": "missing_key",
                          "detail": "currency is missing",
                          "source": {
                            "pointer": "/external_transfer/currency"
                          }
                        }
                      ]
                    }
                  },
                  "when the iban is not in SEPA": {
                    "value": {
                      "errors": [
                        {
                          "code": "iban_not_sepa",
                          "detail": "Beneficiary is not in SEPA",
                          "source": {
                            "pointer": "/external_transfer/beneficiary_id"
                          }
                        }
                      ]
                    }
                  },
                  "when there are not enough funds in the account": {
                    "value": {
                      "errors": [
                        {
                          "code": "insufficient_funds",
                          "detail": "The account has insufficient funds",
                          "source": {
                            "pointer": "/external_transfer/debit_iban"
                          }
                        }
                      ]
                    }
                  },
                  "when attachment id cannot be found": {
                    "value": {
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Attachment not found id=6cc7f2dd-ea0d-4cc2-ba30-f3e1ce0a8eb4",
                          "source": {
                            "pointer": "/external_transfer/attachment_ids/1"
                          }
                        }
                      ]
                    }
                  },
                  "when attachment_ids exceeds max limit": {
                    "value": {
                      "errors": [
                        {
                          "code": "above_max_size",
                          "detail": "attachment_ids cannot be greater than 5",
                          "source": {
                            "pointer": "/external_transfer/attachment_ids"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "External Transfers"
        ],
        "description": "OAuth scope: `payment.write`\n\n---\nCreate an external transfer.\n\n---\nThis endpoint allows you to execute transfers for a given beneficiary. The benefiary must be trusted for the transfer to be created. You can find out more how to trust a beneficiary in [our documentation](https://api-doc.qonto.com/docs/business-api/b3A6MjMyNzk4NTc-trust-a-list-of-beneficiaries).\n\nThe API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID.\n\n## Request parameter details\n\n##### Amount and Currency\n* The `amount` corresponds to the amount of the transaction in the `currency` of the bank account. Amounts must be https://www.w3.org/TR/payment-request/#dfn-valid-decimal-monetary-value\n* The `currency` should be EUR.\n\n##### Reference\n* Transfer reference that can be used to enter transfer details to further describe the transfer\n* Maximum `reference` length is `99` characters\n\n##### Debit iban\n* `debit_iban`: IBAN of account to debit\n\n##### Attachments\nYou can link up to 5 attachments per transfer by passing the `attachment_ids` parameter. You can upload your attachments using our [POST /v2/attachments](https://qonto-next.stoplight.io/docs/business-api/branches/create-attachments/b3A6MzU2NjMxMzU-upload-attachment) endpoint. **Note: For SEPA transfers above 30,000 EUR at least one attachment is required**\n"
      }
    },
    "/v2/external_transfers/{id}": {
      "get": {
        "summary": "Show an external transfer",
        "operationId": "get_external_transfer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7b7a5ed6-3903-4782-889d-b4f64bd7bef9"
          }
        ],
        "responses": {
          "200": {
            "description": "returns an external transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "external_transfer"
                  ],
                  "properties": {
                    "external_transfer": {
                      "$ref": "#/components/schemas/ExternalTransfer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "External transfer not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "External Transfers"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\nGet a single external transfer.\n\n---\n\n## Attributes details\n\n##### Initiator ID\n  Identifies the member that initiated the external transfer. For external transfers initiated via the API, it will always be the owner of the OAuth2 token.\n\n##### Debit\n- `debit_iban`: Can be any of the organization's bank accounts. IBAN formatted ISO 13616.\n- `debit_amount`: The amount that will be debited from your Qonto account.\n- `debit_amount_cents`: The amount that will be debited from you Qonto account in an integer format.\n- `debit_currency`: Must be EUR. ISO 4217 formatted.\n\n##### Credit\n- `credit_amount`: The amount that the beneficiary will receive.\n- `credit_amount_cents`: The amount that the beneficiary will receive in an integer format.\n- `credit_currency`: Equals debit currency if issued in the SEPA network (only supported currencies). ISO 4217 format. Allowed value for international transfers: AUD, CAD, CHF, CNY, CZK, DKK, GBP, HKD, HRK, HUF, ILS, JPY, NOK, NZD, PLN, RON, SEK, USD\n\n##### FX rate\n- `rate_applied`: Foreign exchange rate applied to your transaction, formatted with 4 digits after comma. Ex: 1,1082\n\n#### Timestamps\n\nEach external transfer contains three timestamps:\n\n* `created_at`, UTC, the time at which the external transfer was first recorded.\n* `processed_at`, UTC, when the external transfer has been started to be processed by Qonto.\n* `completed_at`, UTC, when the external transfer is in its final state, either settled or declined.\n* `scheduled_date`, YYYY-MM-DD, indicates when the external transfer was scheduled to be sent by Qonto.\n\n##### Status\n`status` can contain the following values\n\n* `pending`: External transfer is created and has not been processed yet. If transfer is not processed within next minute, it means either execution date may not been reached yet or we are running some compliance checks on this transfer.\n* `processing`: External transfer processing means account balance is debited and a transaction has been created. Processing status can last up to multiple hours until transfer is sent in the network to the beneficiary.\n* `canceled`: When the external transfer is canceled by a user in the interface. This is a permanent status.\n* `declined`: When the external transfer processing fails for various reasons. This is a permanent status.\n* `settled`: When the external transfer is sent to the network, transfer is settled. This is a permanent status.\n"
      }
    },
    "/v2/beneficiaries": {
      "get": {
        "summary": "List beneficiaries",
        "operationId": "list_beneficiaries",
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "trusted",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "pending",
                "enum": [
                  "pending",
                  "validated",
                  "declined"
                ],
                "default": "validated"
              }
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "FR7616798000010000005663951"
              }
            },
            "in": "query",
            "name": "iban",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10T11:47:53.123Z"
            },
            "in": "query",
            "name": "updated_at_from",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "example": "2019-01-10T11:47:53.123Z"
            },
            "in": "query",
            "name": "updated_at_to",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "lists beneficiaries for a given organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "beneficiaries",
                    "meta"
                  ],
                  "properties": {
                    "beneficiaries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Beneficiary"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when updated_at is invalid": {
                    "value": {
                      "errors": [
                        {
                          "code": "invalid",
                          "detail": "updated_at_from is not a valid date",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfer/updated_at_from"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Beneficiaries"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\nRetrieve a list of beneficiaries.\n\n---\n\n## Attributes details\n\n#### Trusted\n`trusted` indicates whether you can automate transfer through API to the beneficiary or not.\n\n#### Timestamps\nEach beneficiary contains two timestamps:\n\n* `created_at`, UTC, the time at which the beneficiary was first recorded.\n* `updated_at`, UTC, the time at which the beneficiary was last updated.\n\n##### Status\n`status` can contain the following values\n\n* `pending`: Beneficiary is created but no Strong Customer Authentication or Transfer has ever been done on this beneficiary.\n* `validated`: Beneficiary is created and at least one Strong Customer Authentication or Transfer has been done to this beneficiary.\n* `declined`: Beneficiary is malformatted and prevent from Qonto to processing transfer.\n\n##### Bank account\nFields in the `bank_account` object will be populated depending upon the type of the account. If the type is:\n  - Swift BIC or SEPA: `iban`, `currency` and `bic` will be present.\n  - Swift code: `account_number`, `swift_sort_code`, `intermediary_bank_bic` and `currency` will be present.\n  - Swift routing number: `account_number`, `routing_number`, `intermediary_bank_bic` and `currency` will be present.\n\n## Filters\n\n#### `status`\nBeneficiaries can be filtered by status. The `status` query parameter accepts an array of statuses as value. The possible values are: `pending`, `validated` and `declined`.\n\n#### `trusted`\nBoolean property that can filter beneficiaries by `true` or `false`.\n\n#### `iban`\nBeneficiaries can be filtered by IBAN. The `iban` query parameter accepts an array of IBANs as value.\n\n#### `updated_at`\nExternal transfers can be filtered by the `updated_at` field.\nThis is particularly useful to retrieve only the latest beneficiaries in your application.\n\n- **updated_at**\n  - `updated_at_from`: Minimum value (e.g: `2019-01-10T11:47:53.123Z`)\n  - `updated_at_to`: Maximum value\n\n**Do note**:\n- *`updated_at` filters should have a valid date time format (**ISO 8601** for instance)*\n\n## Sorting\n\nBeneficiaries can be sorted by a specific field and order. The `sort_by` query parameter accepts a string defining these two items with the `field:order` format.\n\n#### Field\n\n- `updated_at` value is available.\n\n#### Order\n\n- Two values are available : `asc` (Ascending) / `desc` (Descending)\n- By default the order used to sort beneficiaries is `desc`\n\n**Do note**: You can use a combination of field and order to define how to sort beneficiaries:\n- Only field (e.g `updated_at`, order will have default value `desc`)\n- Only order (e.g `:asc`, field will have default value `updated_at`)\n- Both (e.g `updated_at:asc`)\n"
      }
    },
    "/v2/beneficiaries/{id}": {
      "get": {
        "summary": "Show beneficiary",
        "operationId": "get_beneficiary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "e72f6e43-0f27-4415-8781-ad648a89b47f"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a beneficiary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "beneficiary": {
                      "$ref": "#/components/schemas/Beneficiary"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "Beneficiary not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Beneficiaries"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\nGet a single beneficiary.\n\n---\n\n## Attributes details\n\n#### Trusted\n`trusted` indicates whether you can automate transfer through API to the beneficiary or not.\n\n#### Timestamps\nEach beneficiary contains two timestamps:\n\n* `created_at`, UTC, the time at which the beneficiary was first recorded.\n* `updated_at`, UTC, the time at which the beneficiary was last updated.\n\n##### Status\n`status` can contain the following values\n\n* `pending`: Beneficiary is created but no Strong Customer Authentication or Transfer has ever been done on this beneficiary.\n* `validated`: Beneficiary is created and at least one Strong Customer Authentication or Transfer has been done to this beneficiary.\n* `declined`: Beneficiary is malformatted and prevent from Qonto to processing transfer.\n\n##### Bank account\nFields in the `bank_account` object will be populated depending upon the type of the account. If the type is:\n  - Swift BIC or SEPA: `iban`, `currency` and `bic` will be present.\n  - Swift code: `account_number`, `swift_sort_code`, `intermediary_bank_bic` and `currency` will be present.\n  - Swift routing number: `account_number`, `routing_number`, `intermediary_bank_bic` and `currency` will be present.\n"
      }
    },
    "/v2/beneficiaries/trust": {
      "patch": {
        "summary": "Trust a list of beneficiaries",
        "operationId": "trust_beneficiaries",
        "security": [
          {
            "OAuth": [
              "payment.write"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid",
                      "example": "921c60fc-df0e-4289-a864-38a438ad2366"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns the updated beneficiaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "beneficiaries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Beneficiary"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when ids is missing or empty": {
                    "value": {
                      "errors": [
                        {
                          "code": "missing_ids",
                          "detail": "IDs are missing"
                        }
                      ]
                    }
                  },
                  "when ids is more than the max allowed": {
                    "value": {
                      "errors": [
                        {
                          "code": "ids_limit_reached",
                          "detail": "Size of ids cannot exceed 400"
                        }
                      ]
                    }
                  },
                  "when at least one ID in the list is not found": {
                    "value": {
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Beneficiary not found for id=9ddeab87-2602-4d89-8eac-678407498447",
                          "source": {
                            "pointer": "/beneficiaries/1/id"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Beneficiaries"
        ],
        "description": "OAuth scope: `payment.write`\n\n**Accessible only using Strong Customer Authentication**. More details in [our documentation](https://api-doc.qonto.com/docs/business-api/ZG9jOjI5MDg3NzA4-strong-customer-authentication)\n\n---\nTrust an array of beneficiaries. Max number of IDs is 400.\n\n---\n\n**Note**: This endpoint can only be used via the OAuth2 authentication. If you are using a login along with a secret key as described on [this page](https://api-doc.qonto.com/docs/business-api/ZG9jOjQ2NDA2-introduction) you will need to switch to the OAuth2 authentication. You can find instructions on how to begin using OAuth2 in [our documentation](https://api-doc.qonto.com/docs/business-api/ZG9jOjg0MjE3NzE-o-auth-introduction).\n\nWhen there is a `422` error, the easiest way to identify which ID in the list is the invalid one, look at the `errors[x].source.pointer`. The structure of the pointer will be the root key which will always be `beneficiaries`, followed by the index of the ID in the list. For example, if in the array of IDs `[\"abc\", \"xyz\"]` the first ID cannot be found the pointer will be `/beneficiaries/0/id`.\n",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "X-Qonto-Sca-Session-Token"
          }
        ]
      }
    },
    "/v2/beneficiaries/untrust": {
      "patch": {
        "summary": "Untrust a list of beneficiaries",
        "operationId": "untrust_beneficiaries",
        "security": [
          {
            "OAuth": [
              "payment.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid",
                      "example": "921c60fc-df0e-4289-a864-38a438ad2366"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns the updated beneficiaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "beneficiaries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Beneficiary"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when ids is missing or empty": {
                    "value": {
                      "errors": [
                        {
                          "code": "missing_ids",
                          "detail": "IDs are missing"
                        }
                      ]
                    }
                  },
                  "when ids is more than the max allowed": {
                    "value": {
                      "errors": [
                        {
                          "code": "ids_limit_reached",
                          "detail": "Size of ids cannot exceed 400"
                        }
                      ]
                    }
                  },
                  "when at least one ID in the list is not found": {
                    "value": {
                      "errors": [
                        {
                          "code": "not_found",
                          "detail": "Beneficiary not found for id=9ddeab87-2602-4d89-8eac-678407498447",
                          "source": {
                            "pointer": "/beneficiaries/1/id"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Beneficiaries"
        ],
        "description": "OAuth scope: `payment.write`\n\n---\nUntrust an array of beneficiaries. Max number of IDs is 400.\n\n---\n\nWhen there is a `422` error, the easiest way to identify which ID in the list is the invalid one, look at the `errors[x].source.pointer`. The structure of the pointer will be the root key which will always be `beneficiaries`, followed by the index of the ID in the list. For example, if in the array of IDs `[\"abc\", \"xyz\"]` the first ID cannot be found the pointer will be `/beneficiaries/0/id`.\n"
      }
    },
    "/v2/attachments": {
      "post": {
        "summary": "Upload attachment",
        "security": [
          {
            "OAuth": [
              "attachment.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "header",
            "name": "X-Qonto-Idempotency-Key",
            "description": "The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.",
            "example": "4668aec5-4e9c-4a41-b6d1-fc3c13c70dd5"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "file": "<% multipart/form-data file data %>"
                  }
                }
              },
              "example": {
                "file": "test_image.png"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "file": "foobar.png"
              }
            }
          },
          "description": "You have to specify multipart form data in order to attach the file to the request. When using `curl` it will look like that:\n\n```\ncurl --request POST \\\n  --url https://thirdparty.qonto.com/v2/attachments \\\n  -H 'Content-Type: multipart/form-data' \\\n  -H 'Authorization: {Auth}' \\\n  -F file=\"@path/to/a/file.jpg\"\n```"
        },
        "responses": {
          "200": {
            "description": "returns an attachment ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "attachment": {
                    "id": "71c32755-d0c3-4d82-9a78-774caa9d8556"
                  }
                }
              }
            }
          },
          "400": {
            "description": "returns a bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when file is too big": {
                    "errors": [
                      {
                        "code": "file_too_big",
                        "detail": "File is too big",
                        "source": {
                          "pointer": "/file"
                        }
                      }
                    ]
                  },
                  "when file is not the correct type": {
                    "errors": [
                      {
                        "code": "invalid_file_type",
                        "detail": "Invalid file type",
                        "source": {
                          "pointer": "/file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action."
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Attachments"
        ],
        "description": "OAuth scope: `attachment.write`\n\n---\n\nUpload an attachment\n\n---\n\nThis endpoint allows you to upload an attachment to be then linked to an external transfer. Valid files are: JPEG, PNG and PDFs. The endpoint is particularly useful when you want to link an attachment to an external transfer via [POST /v2/external_transfers](https://api-doc.qonto.com/docs/business-api/b3A6MjM2NDE0OTk-create-an-external-transfer) and [POST /v2/external_transfers/checkout](https://api-doc.qonto.com/docs/business-api/b3A6MzAxODAwMDI-create-external-transfers-with-creditor-data)\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.",
        "operationId": "upload_attachment"
      }
    },
    "/v2/attachments/{id}": {
      "get": {
        "summary": "Show attachment",
        "operationId": "get_attachment",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "e72f6e43-0f27-4415-8781-ad648a89b47f"
          }
        ],
        "responses": {
          "200": {
            "description": "returns an attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "file_name": {
                          "type": "string"
                        },
                        "file_size": {
                          "type": "string"
                        },
                        "file_content_type": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "probative_attachment": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "file_name": {
                              "type": "string"
                            },
                            "file_content_type": {
                              "type": "string"
                            },
                            "file_size": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "attachment": {
                    "id": "71c32755-d0c3-4d82-9a78-774caa9d8556",
                    "created_at": "2021-03-23T14:21:51.000Z",
                    "file_name": "Foobar",
                    "file_size": "666",
                    "file_content_type": "image/png",
                    "url": "https://my-s3.url.qonto.bucket.com/123456789",
                    "probative_attachment": {
                      "status": "unavailable",
                      "file_name": "statement.pdf",
                      "file_content_type": "application/pdf",
                      "file_size": "666",
                      "url": "https://my-s3.url.qonto.bucket.com/123456789"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "OAuth scope: `organization.read`\n\n---\n\nObtain the details (e.g: download URL) for a specific attachment.\n\n---\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.\n\nYou can retrieve the IDs of those attachments inside each Transaction object, by calling [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get).\n\nProbative attachment is another version of attachment, compliant with [PAdES](https://en.wikipedia.org/wiki/PAdES) standard.\n\n**Important**: for security reasons, the `url` you retrieve for each Attachment is only valid for 30 minutes. If you need to download the file after more than 30 minutes, you will need to perform another authenticated call in order to generate a new download URL.\n",
        "tags": [
          "Attachments"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/labels": {
      "get": {
        "operationId": "get_labels",
        "summary": "List labels",
        "responses": {
          "200": {
            "description": "list labels for a given organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "labels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "parent_id": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "next_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "prev_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_count": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "labels": [
                    {
                      "id": "171dba70-c75f-4337-b419-377a59bc9cf3",
                      "name": "Fantastic Marble Wallet",
                      "parent_id": null
                    },
                    {
                      "id": "2487a014-618f-40e3-8a1f-eb76e883efc5",
                      "name": "Fantastic Bronze Computer",
                      "parent_id": "171dba70-c75f-4337-b419-377a59bc9cf3"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 2,
                    "per_page": 100
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels"
        ],
        "description": "Retrieve all labels within the organization.\n\n---\n\nThe response contains the list of labels that are linked to the authenticated company.\n\nThe `id` field uniquely identifies the label and is used to identify the **label_ids** of a transaction (see [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get))\n\n### Parent\n\nA label can be linked to another in order to create lists.\nThe parent label can be identified thanks to the `parent_id` field.\n"
      }
    },
    "/v2/labels/{id}": {
      "get": {
        "summary": "Show label",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2d9663fd-1748-4ed4-a590-48066ae9e1cb"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a label",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "parent_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "label": {
                    "id": "2d9663fd-1748-4ed4-a590-48066ae9e1cb",
                    "name": "Lightweight Granite Pants",
                    "parent_id": "053b8439-56a6-48ac-9fad-7b2973a53ae3"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Labels"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve all labels within the organization.\n\n---\n\nThe response contains the list of labels that are linked to the authenticated company.\n\nThe `id` field uniquely identifies the label and is used to identify the **label_ids** of a transaction (see [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get))\n\n### Parent\n\nA label can be linked to another in order to create lists.\nThe parent label can be identified thanks to the `parent_id` field.\n",
        "operationId": "show_label"
      }
    },
    "/v2/memberships": {
      "get": {
        "summary": "List memberships",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "list memberships for a given organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "memberships": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "first_name": {
                            "type": "string"
                          },
                          "last_name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "next_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "prev_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_count": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "memberships": [
                    {
                      "id": "c9f9f051-7558-451c-b310-f4b8521424aa",
                      "first_name": "Quinn Jast",
                      "last_name": "Miss Stan Altenwerth"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1,
                    "per_page": 100
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Memberships"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve all memberships within the organization.\n\n---\n\nThe response contains the list of memberships that are linked to the authenticated company.\nA membership is a user who's been granted access to the Qonto account of a company. There is no limit currently to the number of memberships a company can have.\n\nThe `id` field uniquely identifies the membership and is used to identify the **initiator** of a transaction (see [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get))\n",
        "operationId": "list_memberships"
      }
    },
    "/v2/organizations/{id}": {
      "get": {
        "deprecated": true,
        "summary": "Show organization",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "super-organization-9798"
          }
        ],
        "responses": {
          "200": {
            "description": "DEPRECATED. Please use [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get) instead.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "slug": {
                          "type": "string"
                        },
                        "legal_name": {
                          "type": "string",
                          "nullable": true
                        },
                        "bank_accounts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "slug": {
                                "type": "string"
                              },
                              "iban": {
                                "type": "string"
                              },
                              "bic": {
                                "type": "string"
                              },
                              "currency": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "number",
                                "format": "float"
                              },
                              "balance_cents": {
                                "type": "integer"
                              },
                              "authorized_balance": {
                                "type": "number",
                                "format": "float"
                              },
                              "authorized_balance_cents": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "updated_at": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "active",
                                  "closed"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "organization": {
                    "slug": "super-organization-9798",
                    "legal_name": null,
                    "bank_accounts": [
                      {
                        "slug": "super-bankaccount-7150",
                        "iban": "FR7616798000010000005663951",
                        "bic": "TRZOFR21XXX",
                        "currency": "EUR",
                        "balance": 100,
                        "balance_cents": 10000,
                        "authorized_balance": 100,
                        "authorized_balance_cents": 10000,
                        "updated_at": "2021-03-23T14:00:46.667Z",
                        "status": "active"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Organizations"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve the list and details of a company's bank accounts.\n\n---\n\nThe response contains the list of bank accounts of the authenticated company.\n\nThe `balance` represents the actual amount of money on the account, in Euros. The `authorized_balance` represents the amount available for payments, taking into account transactions that are being processed. [More information here](https://support.qonto.com/hc/en-us/articles/115000493249-How-is-the-balance-of-my-account-calculated-)\n\nThe bank account's `slug` and `iban` will be required for you to retrieve the list of transactions inside that bank account, using  [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get).\n",
        "operationId": "show_organization"
      }
    },
    "/v2/organization": {
      "get": {
        "summary": "Get organization and its bank_accounts",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "returns the organization and its bank accounts. The organization returned is determined from the secret-key or OAuth2 token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "slug": {
                          "type": "string"
                        },
                        "legal_name": {
                          "type": "string",
                          "nullable": true
                        },
                        "bank_accounts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "slug": {
                                "type": "string"
                              },
                              "iban": {
                                "type": "string"
                              },
                              "bic": {
                                "type": "string"
                              },
                              "currency": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "number",
                                "format": "float"
                              },
                              "balance_cents": {
                                "type": "integer"
                              },
                              "authorized_balance": {
                                "type": "number",
                                "format": "float"
                              },
                              "authorized_balance_cents": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "updated_at": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "organization": {
                    "slug": "super-organization-6703",
                    "legal_name": null,
                    "bank_accounts": [
                      {
                        "slug": "super-bankaccount-5785",
                        "iban": "FR7616798000010000005663951",
                        "bic": "TRZOFR21XXX",
                        "currency": "EUR",
                        "balance": 100,
                        "balance_cents": 10000,
                        "authorized_balance": 100,
                        "authorized_balance_cents": 10000,
                        "name": "Main account",
                        "updated_at": "2021-03-23T14:00:46.967Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Organizations"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve the list and details of a company's bank accounts.\n\n---\n\nThe response contains the list of bank accounts of the authenticated company.\n\nThe `balance` represents the actual amount of money on the account, in Euros. The `authorized_balance` represents the amount available for payments, taking into account transactions that are being processed. [More information here](https://support.qonto.com/hc/en-us/articles/115000493249-How-is-the-balance-of-my-account-calculated-)\n\nThe bank account's `slug` and `iban` will be required for you to retrieve the list of transactions inside that bank account, using  [List transactions](/reference/openapi_v2.yml/paths/~1v2~1transactions/get).\n",
        "operationId": "get_organization"
      }
    },
    "/v2/transactions/{id}/attachments": {
      "post": {
        "summary": "Upload attachment to a transaction",
        "security": [
          {
            "OAuth": [
              "attachment.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "2751a41c-c17f-43f7-bd18-04efa6cd8e30"
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "header",
            "name": "X-Qonto-Idempotency-Key",
            "description": "The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.",
            "example": "4668aec5-4e9c-4a41-b6d1-fc3c13c70dd5"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "file": "<% multipart/form-data file data %>"
                  }
                }
              },
              "example": {
                "file": "test_image.png"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "file": "foobar.png"
              }
            }
          },
          "description": "You have to specify multipart form data in order to attach the file to the request. When using `curl` it will look like that:\n\n```\ncurl --request POST \\\n  --url https://thirdparty.qonto.com/v2/transactions/{id}/attachments \\\n  -H 'Content-Type: multipart/form-data' \\\n  -H 'Authorization: {Auth}' \\\n  -F file=\"@path/to/a/file.jpg\"\n```"
        },
        "responses": {
          "200": {
            "description": "accepts the file and returns a success status code",
            "headers": {}
          },
          "400": {
            "description": "returns a bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "missing_file",
                      "detail": "The request is missing a file parameter",
                      "source": {
                        "pointer": "/file"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "Transaction not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Attachments in Transactions"
        ],
        "description": "OAuth scope: `attachment.write`\n\n---\n\nUpload an attachment to a transaction\n\n---\n\nThis endpoint allows you to upload an attachment to a transaction.\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.\n\nProbative attachment is another version of attachment, compliant with [PAdES](https://en.wikipedia.org/wiki/PAdES) standard.\n\n**Important**: for security reasons, the `url` you retrieve for each Attachment is only valid for 30 minutes. If you need to download the file after more than 30 minutes, you will need to perform another authenticated call in order to generate a new download URL.\n\n\n<!-- theme: info -->\n> The uploaded file will be processed in the background. This means that the created attachment will not be visible immediately.",
        "operationId": "upload_transaction_attachment"
      },
      "get": {
        "summary": "List attachments in a transaction",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aab86d8a-0d4c-4749-9a49-0ada88a9c423"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of attachments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "file_name": {
                            "type": "string"
                          },
                          "file_size": {
                            "type": "string"
                          },
                          "file_content_type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "probative_attachment": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              },
                              "file_name": {
                                "type": "string"
                              },
                              "file_content_type": {
                                "type": "string"
                              },
                              "file_size": {
                                "type": "string"
                              },
                              "url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "nullable": true
                      }
                    }
                  }
                },
                "example": {
                  "attachments": [
                    {
                      "id": "9b048e2c-d546-415b-b001-d31a6d4ae1e3",
                      "created_at": "2021-01-27T22:05:07.000Z",
                      "file_name": "Foobar",
                      "file_size": "666",
                      "file_content_type": "image/png",
                      "url": "https://my-s3.url.qonto.bucket.com/123456789",
                      "probative_attachment": {
                        "status": "available",
                        "file_name": "statement.pdf",
                        "file_content_type": "application/pdf",
                        "file_size": "123",
                        "url": "https://my-s3.url.qonto.bucket.com/123456789"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "Transaction not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Attachments in Transactions"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve the list of attachments within a transaction.\n\n---\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.\n\nProbative attachment is another version of attachment, compliant with [PAdES](https://en.wikipedia.org/wiki/PAdES) standard.\n\n**Important**: for security reasons, the `url` you retrieve for each Attachment is only valid for 30 minutes. If you need to download the file after more than 30 minutes, you will need to perform another authenticated call in order to generate a new download URL.\n",
        "operationId": "list_transaction_attachments"
      },
      "delete": {
        "summary": "Remove all attachments from a transaction",
        "security": [
          {
            "OAuth": [
              "attachment.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2750ad5e-6c04-4096-88d8-ab43363bdb57"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a success status code"
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "Transaction not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Attachments in Transactions"
        ],
        "description": "OAuth scope: `attachment.write`\n\n---\n\nRemove all attachments from a transaction\n\n---\n\nThis endpoint allows you to remove all attachments from a transaction.\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.",
        "operationId": "remove_transaction_attachments"
      }
    },
    "/v2/transactions": {
      "get": {
        "summary": "List transactions",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "FR7616798000010000005663951"
            },
            "in": "query",
            "name": "iban",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list transactions for a given bank account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transaction_id": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number",
                            "format": "float"
                          },
                          "amount_cents": {
                            "type": "integer"
                          },
                          "attachment_ids": {
                            "type": "array",
                            "items": {
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "local_amount": {
                            "type": "number",
                            "format": "float"
                          },
                          "local_amount_cents": {
                            "type": "integer"
                          },
                          "side": {
                            "type": "string"
                          },
                          "operation_type": {
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "local_currency": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "settled_at": {
                            "type": "string"
                          },
                          "emitted_at": {
                            "type": "string"
                          },
                          "updated_at": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "note": {
                            "type": "string"
                          },
                          "reference": {
                            "type": "string",
                            "nullable": true
                          },
                          "vat_amount": {
                            "type": "string",
                            "nullable": true
                          },
                          "vat_amount_cents": {
                            "type": "string",
                            "nullable": true
                          },
                          "vat_rate": {
                            "type": "string",
                            "nullable": true
                          },
                          "initiator_id": {
                            "type": "string",
                            "nullable": true
                          },
                          "label_ids": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "nullable": true
                            }
                          },
                          "attachment_lost": {
                            "type": "boolean"
                          },
                          "attachment_required": {
                            "type": "boolean"
                          },
                          "card_last_digits": {
                            "type": "string",
                            "nullable": true
                          },
                          "category": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "attachments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "created_at": {
                                  "type": "string"
                                },
                                "file_name": {
                                  "type": "string"
                                },
                                "file_size": {
                                  "type": "string"
                                },
                                "file_content_type": {
                                  "type": "string"
                                },
                                "url": {
                                  "type": "string"
                                },
                                "probative_attachment": {
                                  "type": "object",
                                  "properties": {
                                    "status": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "parent_id": {
                                  "type": "string",
                                  "nullable": true
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "next_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "prev_page": {
                          "type": "integer",
                          "nullable": true
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_count": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "transactions": [
                    {
                      "transaction_id": "super-transaction-7468",
                      "amount": 0.43,
                      "amount_cents": 43,
                      "attachment_ids": [],
                      "local_amount": 0.43,
                      "local_amount_cents": 43,
                      "side": "debit",
                      "operation_type": "card",
                      "currency": "EUR",
                      "local_currency": "EUR",
                      "label": "Ferry-Purdy",
                      "settled_at": "2021-03-03T16:06:38.000Z",
                      "emitted_at": "2021-02-25T16:22:37.000Z",
                      "updated_at": "2020-12-12T19:52:10.000Z",
                      "status": "completed",
                      "note": "Rhea Ernser",
                      "reference": null,
                      "vat_amount": null,
                      "vat_amount_cents": null,
                      "vat_rate": null,
                      "initiator_id": "ccdcef78-1aa1-4d44-b991-b10005a4ad1a",
                      "label_ids": [
                        "6450e541-0a6f-4153-a46e-34d98848e280"
                      ],
                      "attachment_lost": false,
                      "attachment_required": true,
                      "card_last_digits": "1234",
                      "category": "gas_station",
                      "id": "df346899-3595-421a-8b26-f9d9616ce496"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1,
                    "per_page": 100
                  }
                }
              }
            }
          },
          "400": {
            "description": "returns a bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "sort_invalid",
                      "message": "Sort field is invalid"
                    },
                    {
                      "code": "date_invalid",
                      "message": "The datetime in settled_at_from param isn't well formatted (ISO 8601) or year is out of range"
                    },
                    {
                      "code": "status_invalid",
                      "message": "At least one status isn't valid"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": " "
              }
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve all transactions within a particular bank account. Query param `iban=` is required. See further details below.\n\n---\n\nThe response contains the list of transactions that contributed to the bank account's balances (e.g., incomes, transfers, cards). All transactions visible in Qonto's UI can be fetched, as of API V2.\n\n## Attributes details\n\n##### Amount\n\n* The `amount`, `amount_cents` and `currency` correspond to the amount of the transaction in the currency of the bank account (in our case, it will be in **euros** as it is our only supported bank account currency).\n* The `local_amount`, `local_amount_cents` and `local_currency` correspond to the amount of the transaction in the **foreign currency** (if any)\n  * e.g, for a transaction of 10.00 USD, `local_amount_cents` takes a `1000`value, and `local_currency`takes on a `USD` value\n\n\n##### VAT\n\n* The `vat_amount` and `vat_amount_cents` contain the amount of VAT.\n* The `vat_rate` refers to the rate selected or detected. The value can be `-1` for uncategorized rate (e.g in France any value which is not in `0, 2.1, 5.5, 10, 20`) or multiple rates transaction because we do not support them yet.\n  * e.g, for a transaction of 10.00 EUR with 10% VAT, `vat_amount_cents` takes a `91` value, and `vat_rate` takes a `10` value\n\n**Do note:** If you're a user of VAT auto-detection feature, only confirmed VAT information will appear in the response.\n\n\n##### Side\n\n- `credit`: incoming transaction\n- `debit`: outgoing transaction\n\n#### Timestamps\n\nEach transaction contains three timestamps:\n\n* `emitted_at`, UTC, the time at which the transaction was first recorded\n* `settled_at`, UTC, the time at which the transaction impacted the `balance` and got set to a `completed` status\n* `updated_at`, UTC, the time at which the transaction was last updated\n\n**Do note**: *The `settled_at` value can be `null`, for transaction which aren't `completed` (`pending`, `reversed` and  `declined`)*\n\n##### Operation type\n\n- `income`: an incoming transfer\n- `transfer`: an outgoing transfer\n- `card`: a card payment\n- `direct_debit`: a SEPA Direct Debit (collecting payments from other businesses)\n- `qonto_fee`: a Qonto fee (subscription, atm withdrawal, fx card...)\n- `cheque`: a Check cashed on the account\n- `recall`: recall of an incoming transfer (by the emitter beneficiary or bank)\n- `swift_income`: a SWIFT incoming transfer\n\n#### Attachments\n\n- `attachment_ids` contains an array of UUIDs, corresponding to the attachments (up to 5) uploaded on the transaction. You can obtain details for each attachment using [Get attachment](/reference/openapi_v2.yml/paths/~1v2~1attachments~1%7Bid%7D/get).\n\n- `attachment_lost` contains a boolean describing whether the attachment of the transaction was marked as lost or not.\n\n- `attachment_required` contains a boolean describing whether the attachment of the transaction was marked as required or not.\n\n#### Label\n\n`Label` is a string holding the name of the counterparty of the transaction.\n\n#### Label_ids\n\nThe `id` of the custom label that user can add on a transaction for categorization purposes. These labels are accessible using the [Show Label endpoint](https://api-doc.qonto.com/docs/business-api/b3A6ODQxOTQyMg-show-label)\n\n## Filters\n\n#### `status`\n\nTransactions can be filtered by status. The `status` query parameter accepts an array of statuses as value. Here is what statuses correspond to:\n\n- `pending`: a transaction that is processing and has impacted the bank account's `auth_balance` but not its `balance`\n- `reversed`: a transaction that used to be processing, but has then been reversed\n- `declined`: a transaction that has been declined\n- `completed`: a transaction that is completed, and has impacted the bank account's `balance`\n\nFor example, if you want to retrieve all transaction statuses, you can use the following filter: `status[]=completed&status[]=declined&status[]=reversed&status[]=pending`\n\n **Do note**: *If no `status` is specified, the API will only return `completed` transactions by default, as they are the only ones that usually make sense in an accounting integration.*\n\n#### `updated_at` / `settled_at`\n\nTransactions can be filtered according to both `updated_at` and `settled_at` fields.\nThis is particularly useful to retrieve only the latest transactions in your application.\nTwo filters are available :\n\n- **updated_at**\n  - `updated_at_from`: Minimum value (e.g: `2019-01-10T11:47:53.123Z`)\n  - `updated_at_to`: Maximum value\n- **settled_at**\n  - `settled_at_from`: Minimum value\n  - `settled_at_to`: Maximum value\n\n**Do note**:\n\n- *You can use one or the other `updated_at` filter (same for `settled_at`), or use them in combination if you want transactions updated within a specific timeframe.*\n- *`updated_at` / `settled_at` filters should have a valid date time format (**ISO 8601** for instance)*\n\n#### Side\n\nTransactions can be filtered using the `side` (credit or debit) query params : `side=credit` or `side=debit`.\n\n#### Operation Type\n\nTransactions can be filtered based on their `operation_type`. An array of values can be passed as query params :\n\n`operation_type[]=card&operation_type[]=transfer&operation_type[]=income`\n\n#### with or wihtout attachment(s)\n\nTransactions can be filtered based on the presence of one or more attachments. This is achieved using the `with_attachments` boolean param :\n\n`with_attachments=false`\n\n## Sorting\n\nTransactions can be sorted by a specific field and order. The `sort_by` query parameter accepts a string defining these two items with the `field:order` format.\n\n#### Field\n\n- Both `updated_at` and `settled_at` values are available.\n- By default the field used to sort transactions is `settled_at`\n\n#### Order\n\n- Two values are available : `asc` (Ascending) / `desc` (Descending)\n- By default the order used to sort transactions is `desc`\n\n**Do note**: You can use a combination of field and order to define how to sort transactions :\n- Only field (e.g `updated_at`, order will have default value `desc`)\n- Only order (e.g `:asc`, field will have default value `settled_at`)\n- Both (e.g `updated_at:asc`)\n\n## Embedded resources\n\nWhen searching transactions, it is possible to require associated resources to be embedded in the JSON response.\n\n#### Labels\n\nFor each transactions, `labels` can be embedded in the response object, using the `includes` params :\n\n`includes[]=labels`\n\n#### Attachments\n\nFor each transactions, `attachments` can be embedded in the response object, using the `includes` params :\n\n`includes[]=attachments`\n\n## Pagination\nDefault number of items per page is 1, max items per page is 100. Pagination data is returned in the response : [See Schema here](https://api-doc.qonto.com/docs/business-api/c2NoOjI3NTA2MjA3-pagination).\n",
        "operationId": "list_transactions"
      },
      "parameters": []
    },
    "/v2/transactions/{id}": {
      "get": {
        "summary": "Show transaction",
        "security": [
          {
            "OAuth": [
              "organization.read"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7b7a5ed6-3903-4782-889d-b4f64bd7bef9"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "type": "object",
                      "properties": {
                        "transaction_id": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float"
                        },
                        "amount_cents": {
                          "type": "integer"
                        },
                        "attachment_ids": {
                          "type": "array",
                          "items": {
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "local_amount": {
                          "type": "number",
                          "format": "float"
                        },
                        "local_amount_cents": {
                          "type": "integer"
                        },
                        "side": {
                          "type": "string"
                        },
                        "operation_type": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "string"
                        },
                        "local_currency": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "settled_at": {
                          "type": "string"
                        },
                        "emitted_at": {
                          "type": "string"
                        },
                        "updated_at": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "note": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string",
                          "nullable": true
                        },
                        "vat_amount": {
                          "type": "string",
                          "nullable": true
                        },
                        "vat_amount_cents": {
                          "type": "string",
                          "nullable": true
                        },
                        "vat_rate": {
                          "type": "string",
                          "nullable": true
                        },
                        "initiator_id": {
                          "type": "string"
                        },
                        "label_ids": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "attachment_lost": {
                          "type": "boolean"
                        },
                        "attachment_required": {
                          "type": "boolean"
                        },
                        "card_last_digits": {
                          "type": "string"
                        },
                        "category": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attachments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string"
                              },
                              "file_name": {
                                "type": "string"
                              },
                              "file_size": {
                                "type": "string"
                              },
                              "file_content_type": {
                                "type": "string"
                              },
                              "url": {
                                "type": "string"
                              },
                              "probative_attachment": {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "labels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "parent_id": {
                                "type": "string",
                                "nullable": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "transaction": {
                    "transaction_id": "super-transaction-6576",
                    "amount": 52.4,
                    "amount_cents": 5240,
                    "attachment_ids": [],
                    "local_amount": 52.4,
                    "local_amount_cents": 5240,
                    "side": "debit",
                    "operation_type": "card",
                    "currency": "EUR",
                    "local_currency": "EUR",
                    "label": "Stamm and Sons",
                    "settled_at": "2021-03-14T17:17:02.000Z",
                    "emitted_at": "2021-03-06T12:33:13.000Z",
                    "updated_at": "2021-03-21T21:32:03.000Z",
                    "status": "completed",
                    "note": "Jacynthe Kuhic",
                    "reference": null,
                    "vat_amount": null,
                    "vat_amount_cents": null,
                    "vat_rate": null,
                    "initiator_id": "6e5468a1-22ad-4974-bf9f-45652511d39c",
                    "label_ids": [
                      "872a75d8-b85c-467e-b8f0-091ea48ef68f"
                    ],
                    "attachment_lost": false,
                    "attachment_required": true,
                    "card_last_digits": "1234",
                    "category": "gas_station",
                    "id": "7b7a5ed6-3903-4782-889d-b4f64bd7bef9",
                    "attachments": [
                      {
                        "id": "ea54f563-eaee-4dcb-b08e-688dc9937d23",
                        "created_at": "2021-03-18T11:52:07.000Z",
                        "file_name": "Foobar",
                        "file_size": "666",
                        "file_content_type": "image/png",
                        "url": "https://qonto-dev.s3.eu-central-1.amazonaws.com/test/uploads/attachment/ea54f563-eaee-4dcb-b08e-688dc9937d23/%23%3CRack%3A%3ATest%3A%3AUploadedFile%3A0x00005635fc7cf8e8%3E?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAZ4DSTCECB4IXGFVF%2F20210521%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20210521T080955Z&X-Amz-Expires=1800&X-Amz-SignedHeaders=host&X-Amz-Signature=b6b8977aff8529018d15a05f3e36cc5b59e325d675b6538ff55005aa8e2eb3ed",
                        "probative_attachment": {
                          "status": "unavailable"
                        }
                      }
                    ],
                    "labels": [
                      {
                        "id": "211e69c1-f27f-4b45-a623-bec44a715ee7",
                        "name": "Durable Silk Table",
                        "parent_id": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": " "
              }
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "OAuth scope: `organization.read`\n\n---\n\nRetrieve a single transaction within a particular bank account.\n\n---\n\nThe response contains a single transaction that contributed to the bank account's balances (e.g., incomes, transfers, cards). All transactions visible in Qonto's UI can be fetched, as of API V2.\n\n## Attributes details\n\n##### Amount\n\n* The `amount`, `amount_cents` and `currency` correspond to the amount of the transaction in the currency of the bank account (in our case, it will be in **euros** as it is our only supported bank account currency).\n* The `local_amount`, `local_amount_cents` and `local_currency` correspond to the amount of the transaction in the **foreign currency** (if any)\n  * e.g, for a transaction of 10.00 USD, `local_amount_cents` takes a `1000`value, and `local_currency`takes on a `USD` value\n\n\n##### VAT\n\n* The `vat_amount` and `vat_amount_cents` contain the amount of VAT.\n* The `vat_rate` refers to the rate selected or detected. The value can be `-1` for uncategorized rate (e.g in France any value which is not in `0, 2.1, 5.5, 10, 20`) or multiple rates transaction because we do not support them yet.\n  * e.g, for a transaction of 10.00 EUR with 10% VAT, `vat_amount_cents` takes a `91` value, and `vat_rate` takes a `10` value\n\n**Do note:** If you're a user of VAT auto-detection feature, only confirmed VAT information will appear in the response.\n\n\n##### Side\n\n- `credit`: incoming transaction\n- `debit`: outgoing transaction\n\n#### Timestamps\n\nEach transaction contains three timestamps:\n\n* `emitted_at`, UTC, the time at which the transaction was first recorded\n* `settled_at`, UTC, the time at which the transaction impacted the `balance` and got set to a `completed` status\n* `updated_at`, UTC, the time at which the transaction was last updated\n\n**Do note**: *The `settled_at` value can be `null`, for transaction which aren't `completed` (`pending`, `reversed` and  `declined`)*\n\n##### Operation type\n\n- `income`: an incoming transfer\n- `transfer`: an outgoing transfer\n- `card`: a card payment\n- `direct_debit`: a SEPA Direct Debit (collecting payments from other businesses)\n- `qonto_fee`: a Qonto fee (subscription, atm withdrawal, fx card...)\n- `cheque`: a Check cashed on the account\n- `recall`: recall of an incoming transfer (by the emitter beneficiary or bank)\n- `swift_income`: a SWIFT incoming transfer\n\n#### Attachments\n\n- `attachment_ids` contains an array of UUIDs, corresponding to the attachments (up to 5) uploaded on the transaction. You can obtain details for each attachment using [Get attachment](/reference/openapi_v2.yml/paths/~1v2~1attachments~1%7Bid%7D/get).\n\n- `attachment_lost` contains a boolean describing whether the attachment of the transaction was marked as lost or not.\n\n- `attachment_required` contains a boolean describing whether the attachment of the transaction was marked as required or not.\n\n## Embedded resources\n\nWhen fetching a transaction, it is possible to require associated resources to be embedded in the JSON response.\n\n#### Labels\n\nTransaction `labels` can be embedded in the response object, using the `includes` params :\n\n`includes[]=labels`\n\n#### Attachments\n\nTransaction `attachments` can be embedded in the response object, using the `includes` params :\n\n`includes[]=attachments`\n\n#### Label\n\n`Label` is a string holding the name of the counterparty of the transaction.\n\n#### Label_ids\n\nThe `id` of the custom label that user can add on a transaction for categorization purposes. These labels are accessible using the [Show Label endpoint](https://api-doc.qonto.com/docs/business-api/b3A6ODQxOTQyMg-show-label)\n",
        "operationId": "show_transaction"
      }
    },
    "/v2/transactions/{transaction_id}/attachments/{id}": {
      "delete": {
        "summary": "Remove an attachment from a transaction",
        "security": [
          {
            "OAuth": [
              "attachment.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "644cf847-125e-4ec9-920d-0d09aaeb4bbc"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "38269301-a7f4-49b4-b9b4-539078fd4a43"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a success status code"
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "returns a not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "not_found",
                      "detail": "Transaction not found",
                      "source": {
                        "parameter": "id"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Attachments in Transactions"
        ],
        "description": "OAuth scope: `attachment.write`\n\n---\n\nRemove an attachment from a transaction\n\n---\n\nThis endpoint allows you to remove a specific attachment from a transaction.\n\nInside Qonto, attachments are files uploaded onto transactions by users. Attachments typically correspond to the *invoice* or *receipt*, and are used to justify the transactions from a bookkeeping standpoint.",
        "operationId": "remove_transaction_attachment"
      }
    },
    "/v2/internal_transfers": {
      "post": {
        "summary": "Create internal transfer",
        "parameters": [
          {
            "name": "X-Qonto-Idempotency-Key",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "in": "header",
            "description": "The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.",
            "example": "219439cf-b519-4d62-86d0-57b6d15ebaa5"
          }
        ],
        "tags": [
          "Internal Transfers"
        ],
        "description": "OAuth scope: `internal_transfers.write`\n\n---\n\nTransfers between accounts of the same organization\n\n---\n\nThis endpoint allows you to execute transfers between accounts of the same organization.\n\nThe API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID.\n\n---\n\nYou can obtain details for each organization account using [Show organization](/reference/openapi_v2.yml/paths/~1v2~1organizations~1%7Bid%7D/get)\n\n---\n\n## Request parameter details\n<br/>\n\n##### Amount and Currency\n* The `amount` corresponds to the amount of the transaction in the `currency` of the bank account. Amounts must  be https://www.w3.org/TR/payment-request/#dfn-valid-decimal-monetary-value\n* The `currency` field only accepts “EUR”\n* More information: https://www.w3.org/TR/payment-request/#paymentcurrencyamount-dictionary\n<br/>\n\n##### Reference\n* Transfer reference that can be used to enter transfer details to further describe the transfer\n* Maximum `reference` length is `99` characters\n<br/>\n\n##### Side\n* `credit_iban`: IBAN of account to credit\n* `debit_iban`: IBAN of account to debit",
        "security": [
          {
            "OAuth": [
              "internal_transfer.write"
            ]
          },
          {
            "SecretKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "internal_transfer": {
                    "type": "object",
                    "required": [
                      "debit_iban",
                      "credit_iban",
                      "reference",
                      "amount",
                      "currency"
                    ],
                    "properties": {
                      "debit_iban": {
                        "type": "string"
                      },
                      "credit_iban": {
                        "type": "string"
                      },
                      "reference": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "internal_transfer"
                ]
              },
              "example": {
                "internal_transfer": {
                  "debit_iban": "IT12M3609201600032486198434",
                  "credit_iban": "IT13M3609201600032486198435",
                  "reference": "Internal transfer",
                  "amount": "12345.67",
                  "currency": "EUR"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns a success status code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "internal_transfer": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Transfer ID"
                        },
                        "slug": {
                          "type": "string",
                          "description": "Transfer slug"
                        },
                        "status": {
                          "type": "string",
                          "description": "Transfer status (always pending)"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Transfer amount"
                        },
                        "amount_cents": {
                          "type": "string",
                          "description": "Transfer amount in cents"
                        },
                        "currency": {
                          "type": "string",
                          "description": "Transfer currency (EUR only)"
                        },
                        "reference": {
                          "type": "string",
                          "description": "Transfer reference"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "Transfer creation time"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "internal_transfer": {
                    "id": "0ded2767-f44d-48b4-9e98-b8b6d9359c07",
                    "slug": "yottanet-6666-1-transfer-52",
                    "status": "pending",
                    "amount": "12345.67",
                    "amount_cents": "1234567",
                    "currency": "EUR",
                    "reference": "Internal transfer",
                    "created_at": "2021-05-11T10:22:55.090Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "returns a bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "insufficient_funds",
                      "detail": "Insufficient funds",
                      "source": {
                        "pointer": "/amount"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "returns an unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "unauthorized",
                      "detail": "You must be authenticated to perform this action"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "returns a forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "errors": [
                    {
                      "code": "forbidden",
                      "detail": "User does not have sufficient permissions for this action."
                    }
                  ]
                }
              }
            }
          }
        },
        "x-internal": false,
        "operationId": "create_internal_transfer"
      }
    },
    "/v2/requests": {
      "get": {
        "summary": "List requests",
        "operationId": "list_requests",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "canceled",
                "declined"
              ]
            }
          },
          {
            "name": "request_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "transfer",
                "multi_transfer",
                "flash_card",
                "virtual_card"
              ]
            }
          },
          {
            "name": "created_at_at_from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2019-01-10T11:47:53.123Z"
            }
          },
          {
            "name": "processed_at_from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2019-01-10T11:47:53.123Z"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created_at:asc",
                "created_at:desc",
                "processed_at:asc",
                "processed_at:desc",
                "status:asc",
                "status:desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "lists requests for a given organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "requests",
                    "meta"
                  ],
                  "properties": {
                    "requests": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/RequestFlashCard"
                          },
                          {
                            "$ref": "#/components/schemas/RequestVirtualCard"
                          },
                          {
                            "$ref": "#/components/schemas/RequestMultiTransfer"
                          },
                          {
                            "$ref": "#/components/schemas/RequestTransfer"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                },
                "example": {
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 4,
                    "per_page": 25
                  },
                  "requests": [
                    {
                      "id": "965b8c57-72fd-4d12-8d85-56874104c81a",
                      "request_type": "virtual_card",
                      "status": "pending",
                      "initiator_id": "cc32875a-a590-44c7-bdc1-0680ae72b0db",
                      "approver_id": null,
                      "note": "Library subscription",
                      "declined_note": null,
                      "payment_monthly_limit": "5.00",
                      "currency": "EUR",
                      "processed_at": null,
                      "created_at": "2021-11-24T10:34:51.706Z"
                    },
                    {
                      "id": "fd6d72c0-557d-4d51-8502-d7ce86cb72ea",
                      "request_type": "flash_card",
                      "status": "canceled",
                      "initiator_id": "dbbb579a-f8a5-41df-8cea-09e040464366",
                      "approver_id": null,
                      "note": "Restaurant",
                      "declined_note": null,
                      "pre_expires_at": "2022-03-15T22:59:59.999Z",
                      "payment_lifespan_limit": "250.00",
                      "currency": "EUR",
                      "processed_at": "2021-11-24T10:33:59.965Z",
                      "created_at": "2021-11-24T10:33:23.817Z"
                    },
                    {
                      "id": "68e38bca-064c-4b50-8343-26ce40f617af",
                      "request_type": "multi_transfer",
                      "status": "approved",
                      "initiator_id": "300d309f-a7e0-4db2-af3b-003ce0a676a4",
                      "approver_id": "087a7f4f-d316-4bad-810f-84807634cb9f",
                      "note": "Scheduled multi transfer (for Aug 2022)",
                      "declined_note": null,
                      "total_transfers_amount": "25561.80",
                      "total_transfers_amount_currency": "EUR",
                      "total_transfers_count": 43,
                      "scheduled_date": "2022-08-15",
                      "processed_at": null,
                      "created_at": "2021-11-10T12:22:28.790Z"
                    },
                    {
                      "id": "57d28d6f-3a22-4573-990a-c62d2f7d67f0",
                      "request_type": "transfer",
                      "status": "declined",
                      "initiator_id": "dbbb579a-f8a5-41df-8cea-09e040464366",
                      "approver_id": "788571b5-1aea-4aec-bb7b-366288a4ba68",
                      "note": "Provider subscription",
                      "declined_note": "This is not in our policy",
                      "beneficiary_name": "John Doe",
                      "amount": "30.00",
                      "amount_currency": "EUR",
                      "scheduled_date": "2021-10-06",
                      "recurrence": "monthly",
                      "last_recurrence_date": null,
                      "processed_at": "2021-10-06T16:14:28.284Z",
                      "created_at": "2021-10-06T16:14:11.673Z"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Returns errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "code"
                        ],
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "when updated_at is invalid": {
                    "value": {
                      "errors": [
                        {
                          "code": "invalid",
                          "detail": "updated_at_from is not a valid date",
                          "source": {
                            "properties": {
                              "pointer": "/external_transfer/updated_at_from"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Requests"
        ],
        "description": "OAuth scope: `organization.read`\n\n_This endpoint is only accessible by organizations in a Business or Enterprise plan._\n\n---\nRetrieve all requests within an organization.\n\n---\nThe response contains the list of requests linked to the authenticated organization.\nThis allows to include request updates and treatment in any other workflows or tools\nused for the day-to-day work.\n\n---\n\n## Attributes details\n\n#### Request Type\n`request_type` can take 4 different values:\n- `flash_card`: a flash card is a non-physical card with a budget and a last day of validity.\n  The card becomes inactive after the budget is totally spent or the last date of validity is past.\n- `virtual_card`: a virtual card is a non-physical card with a monthly budget.\n  Card holder can spend that amount every calendar month. Above that, transactions will be refused.\n- `transfer`: a transfer of money from one Qonto account to another account.\n- `multi_transfer`: several transfers executed at the same time.\n  A document can be provided to create a multi-transfer which is composed of many different transfers.\n\n#### Status\n`status` can take 4 different values:\n\n- `pending`: the request is waiting for a final status.\n- `approved`: the request has been approved by one of the authorized members.\n  All admins and owners can approve a request.\n- `declined`: the request has been declined by one of the authorized members.\n  All admins and owners can decline a request.\n- `canceled`: the request has been canceled by its initiator.\n\n#### Initiator ID\n`initiator_id`: Identifier of the membership that creates the request.\nIt matches with the ID of the membership object.\n\n#### Approver ID\n`approver_id:` Identifier of the membership who either approved or declined the request.\nIt matches with the ID of the membership object.\n\n#### Note\n`note`: mandatory note to explain the reason of the request.\nThis is a free format note.\n\n#### Declined note\n`declined_note`: it's a free format field filled in by the membership who declined the request.\n\n#### Dates\n- `created_at`: timestamp of creation of the request.\n  Example: `2019-01-10T11:47:53.123Z`.\n- `processed_at`: timestamp of when the request decision is taken.\n  Either Approved or Declined by an admin. Or canceled by the requester.\n  Example: `2019-01-10T11:47:53.123Z`.\n\n#### Currency\n`currency`: Must be EUR. ISO 4217 formatted.\n\n#### Flash Card\nThe following fields are only present when `request_type = \"flash_card\"`.\n\n- `pre_expires_at`: expiry date has been chosen by the requester during the request creation.\n  Expires happen always at midnight.\n  Example: `2023-06-17T23:59:59Z`.\n- `payment_lifespan_limit`: maximum amount to be spent with that card in total.\n  This amount is in the currency of `currency`.\n  Example: `\"1500.00\"`.\n\n#### Virtual Card\nThe following fields are only present when `request_type = virtual_card`.\n\n- `payment_monthly_limit`: maximum amount to be spent with that card in total, per calendar month.\n  This amount is in the currency of `currency`.\n  Example: `\"1500.00\"`.\n\n#### Transfer\nThe following fields are only present when `request_type = transfer`.\n\n- `amount`: exact amount of the transfer to be approved.\n  This amount is in the currency of `amount_currency`.\n  Example: `\"1234.56\"`.\n- `recurrence`: when it's not `null`, it means that transfer will be recreated\n  on the given frequency until `last_date_recurrence`.\n  Can be `null`, or `weekly` or `monthly`.\n- `last_recurrence_date`: limit date of the recurring transfer.\n  No transfer happens after this date.\n  Example: `2019-01-15`\n- `beneficiary_name`: full name of the beneficiary of the transfer. Max 140 chars long.\n- `scheduled_date`: Can be set by the requester to send the transfer later and not immediately.\n  Can only be set in the future by the requester. Defaults to current date or next banking day.\n  Example: `2019-01-15`.\n\n#### Multi-Transfer\nThe following fields are only present when `request_type = multi_transfer`.\n\n- `total_transfers_amount`: sum of all transfers amounts included in the multi-transfer.\n  This amount is in the currency of `total_transfers_amount_currency`.\n  Example: `\"1234.56\"`\n- `total_transfers_amount_currency`: Must be EUR. ISO 4217 formatted.\n  Only Request in EUR are allowed. Allowed values:`EUR`.\n- `total_transfers_count`: number of transfers included in the multi-transfer.\n- `scheduled_date`: Can be set by the requester to send the transfer later and not immediately.\n  Can only be set in the future by the requester. Defaults to current date or next banking day.\n  Example: `2019-01-15`.\n\n## Filters\n`status`\n\nRequests can be filtered by status. The **`status`** query parameter accepts an array\nof statuses as value. Here is what statuses correspond to:\n\n- `pending`: a request still waiting for final status.\n- `approved`: a request that has been approved by approver. Final status.\n- `declined`: a request that has been declined by approver. Final status.\n- `canceled`: a request that has been canceled by requester. Final status.\n\n**Do note**: *If no `status` is specified, the API will return all the requests.*\n<br/>\n<br/>\n\n`request_type`\n\nRequests can be filtered by type. The `type` query parameter accepts an array of\nstatuses as value. Here is what statuses correspond to:\n\n- `flash_card`: a flash card is a non-physical card with a budget and a last day of validity.\n  The card becomes inactive after the budget is totally spent or the last date of validity is past.\n- `virtual_card`: a virtual card is a non-physical card with a monthly budget.\n  Card holder can spend that amount every calendar month. Above that, transactions will be refused.\n- `transfer`: a transfer of money from one Qonto account to another account.\n- `multi_transfer`: several transfers executed at the same time.\n  A document can be provided to create a multi-transfer which is composed of many different transfers.\n\n**Do note**: *If no `request_type` specified, the API will return all the requests.*\n<br/>\n<br/>\n\n`processed_at_from` / `created_at_from`\n\nRequests can be filtered according to both `processed_at` and `created_at` fields.\nThis is particularly useful to retrieve only the latest updated requests in your application.\nTwo filters are available:\n\n- `processed_at_from`: minimum value (e.g: `2019-01-10T11:47:53.123Z`).\n- `created_at_from`: minimum value  (e.g: `2019-01-10T11:47:53.123Z`).\n\n**Do note**: *`processed_at_from` / `created_at_from` filters should have a valid date time format (**ISO 8601** for instance)*\n\n## Sorting\nRequest list can be sorted by a specific field and order.\nThe `sort_by` query parameter accepts a string defining these two items with the `field:order` format.\n\n- `processed_at`: when request was processed.\n    Two values are available: `asc` (ascending) / `desc` (descending)\n\n- `created_at`: when request was created.\n    Two values are available: `asc` (ascending) / `desc` (descending)\n\n- `status`: reflects the information about the request status.\n    Two values are available: `asc` (ascending) / `desc` (descending).\n    Sorting by ascending gives a list of request with statuses in the given order: `pending`, `approved`, `declined`, `canceled`.\n\n**Do note**: *Use a combination of field and order to define how to sort the transfer list (e.g **`processed_at:asc`**).*\n*By default, requests are sorted by `created_at:desc`.*\n\n## Pagination\nDefault number of items per page is 25. [See Schema here](https://api-doc.qonto.com/docs/business-api/c2NoOjI3NTA2MjA3-pagination).\n"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OAuth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://oauth.qonto.com/oauth2/auth",
            "tokenUrl": "https://oauth.qonto.com/oauth2/token",
            "refreshUrl": "https://oauth.qonto.com/oauth2/token",
            "X-Refresh-Settings": {
              "Content-Type": "application/x-www-form-urlencoded"
            },
            "scopes": {
              "organization.read": "Allows for generic reads",
              "attachment.write": "Allows to write data related to attachments",
              "internal_transfer.write": "Allows execution of internal transfers",
              "payment.write": "Allows write of data related to external payments",
              "offline_access": "To retrieve a refresh token"
            }
          }
        },
        "description": ""
      },
      "SecretKey": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": "When using the API, authentify Qonto accounts using your slug and secret key in the request. You can find and manage your secret key from the Qonto web application Settings > Integrations.\n\nAuthentication to the API is performed via HTTP using the Authorization header.\n\n```\nAuthorization: {organization-slug}:{secret-key}\n```"
      }
    },
    "schemas": {
      "Pagination": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer",
            "example": 2
          },
          "next_page": {
            "type": "integer",
            "nullable": true,
            "example": null
          },
          "prev_page": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "total_pages": {
            "type": "integer",
            "example": 2
          },
          "total_count": {
            "type": "integer",
            "example": 150
          },
          "per_page": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "ExternalTransfer": {
        "type": "object",
        "required": [
          "id",
          "slug",
          "debit_iban",
          "debit_amount",
          "debit_amount_cents",
          "debit_currency",
          "initiator_id",
          "beneficiary_id",
          "credit_amount",
          "credit_amount_cents",
          "credit_currency",
          "reference",
          "status",
          "created_at",
          "scheduled_date"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "slug": {
            "type": "string"
          },
          "debit_iban": {
            "type": "string",
            "description": "ISO 13616"
          },
          "debit_amount": {
            "type": "string",
            "example": "12.55"
          },
          "debit_amount_cents": {
            "type": "string",
            "example": "1255"
          },
          "debit_currency": {
            "type": "string",
            "example": "EUR",
            "description": "ISO 4217"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid"
          },
          "beneficiary_id": {
            "type": "string",
            "format": "uuid"
          },
          "credit_amount": {
            "type": "string"
          },
          "credit_amount_cents": {
            "type": "string"
          },
          "credit_currency": {
            "type": "string",
            "description": "ISO 4217"
          },
          "rate_applied": {
            "type": "string"
          },
          "payment_purpose": {
            "type": "string",
            "example": "goods",
            "description": "Compulsory for all swift networks"
          },
          "reference": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "description": "140 characters max"
          },
          "declined_reason": {
            "type": "string",
            "example": "beneficiary_bic_invalid"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "canceled",
              "declined",
              "settled"
            ],
            "example": "pending"
          },
          "scheduled_date": {
            "type": "string",
            "example": "2021-07-12"
          },
          "created_at": {
            "type": "string",
            "example": "2021-01-27T22:05:07.000Z"
          },
          "completed_at": {
            "type": "string",
            "example": "2021-01-27T22:05:07.000Z"
          },
          "processed_at": {
            "type": "string",
            "example": "2021-01-27T22:05:07.000Z"
          },
          "transaction_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Beneficiary": {
        "type": "object",
        "required": [
          "id",
          "name",
          "status",
          "trusted",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ce91bc4e-68d6-4ab0-bfab-4a9403f7f316"
          },
          "name": {
            "type": "string",
            "example": "Alice In Wonderland"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "declined",
              "validated"
            ],
            "example": "validated"
          },
          "trusted": {
            "type": "boolean"
          },
          "bank_account": {
            "type": "object",
            "properties": {
              "iban": {
                "type": "string"
              },
              "bic": {
                "type": "string"
              },
              "currency": {
                "type": "string"
              },
              "account_number": {
                "type": "string"
              },
              "routing_number": {
                "type": "string"
              },
              "intermediary_bank_bic": {
                "type": "string"
              },
              "swift_sort_code": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "string",
            "example": "2021-01-27T22:05:07.000Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-01-27T22:05:07.000Z"
          }
        }
      },
      "RequestTransfer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the request"
          },
          "request_type": {
            "type": "string",
            "enum": [
              "transfer"
            ],
            "description": "Type of the request"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "declined",
              "canceled"
            ],
            "description": "Status of the request"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the membership that initiated the request"
          },
          "approver_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the membership that approved the request"
          },
          "note": {
            "type": "string",
            "description": "Reason for the request"
          },
          "declined_note": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the request was declined"
          },
          "beneficiary_name": {
            "type": "string",
            "description": "Name of the beneficiary"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the transfer, example \"152.25\""
          },
          "amount_currency": {
            "type": "string",
            "description": "Currency of the transfer. ISO-4217 3-characters currency code"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date",
            "description": "When transfer would be executed. If request is approved after this date, it will be executed immediately"
          },
          "recurrence": {
            "type": "string",
            "nullable": true,
            "enum": [
              "weekly",
              "monthly"
            ],
            "description": "Tells if transfer is recurring, null if it is not"
          },
          "last_recurrence_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the last recurrence"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When request was approved, canceled or declined"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When request was created"
          }
        },
        "description": "A transfer of money from one Qonto account to another account"
      },
      "RequestMultiTransfer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the request"
          },
          "request_type": {
            "type": "string",
            "enum": [
              "multi_transfer"
            ],
            "description": "Type of the request"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "declined",
              "canceled"
            ],
            "description": "Status of the request"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the membership that initiated the request"
          },
          "approver_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the membership that approved the request"
          },
          "note": {
            "type": "string",
            "description": "Reason for the request"
          },
          "declined_note": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the request was declined"
          },
          "total_transfers_amount": {
            "type": "string",
            "description": "Total amount of the transfers, example \"2152.25\""
          },
          "total_transfers_amount_currency": {
            "type": "string",
            "description": "Currency of the transfers. ISO-4217 3-characters currency code"
          },
          "total_transfers_count": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of transfers"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date",
            "description": "When transfers would be executed. If request is approved after this date, they will be executed immediately"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When request was approved, canceled or declined"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When request was created"
          }
        },
        "description": "Several transfers executed at the same time. Several format can be provided to create a bulk transfer which is composed of many different transfers"
      },
      "RequestFlashCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the request"
          },
          "request_type": {
            "type": "string",
            "enum": [
              "flash_card"
            ],
            "description": "Type of the request"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "declined",
              "canceled"
            ],
            "description": "Status of the request"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the membership that initiated the request"
          },
          "approver_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the membership that approved the request"
          },
          "note": {
            "type": "string",
            "description": "Reason for the request"
          },
          "declined_note": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the request was declined"
          },
          "pre_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the flash card expires"
          },
          "payment_lifespan_limit": {
            "type": "string",
            "description": "Total of payment limit until card expires"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the card and its limits. ISO-4217 3-characters currency code"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When request was approved, canceled or declined"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When request was created"
          }
        },
        "description": "A virtual card with a budget and a last day of validity. The card becomes inactive after the budget is totally spent or the last date of validity is past"
      },
      "RequestVirtualCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the request"
          },
          "request_type": {
            "type": "string",
            "enum": [
              "virtual_card"
            ],
            "description": "Type of the request"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "declined",
              "canceled"
            ],
            "description": "Status of the request"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the membership that initiated the request"
          },
          "approver_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the membership that approved the request"
          },
          "note": {
            "type": "string",
            "description": "Reason for the request"
          },
          "declined_note": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the request was declined"
          },
          "payment_monthly_limit": {
            "type": "string",
            "description": "Total of payment limit by month"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the card and its limits. ISO-4217 3-characters currency code"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When request was approved, canceled or declined"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When request was created"
          }
        },
        "description": "A virtual card with a monthly budget. Card holder can spend that amount every calendar month. Above that, transactions will be refused"
      }
    }
  },
  "security": [
    {
      "OAuth": [
        "organization.read"
      ]
    },
    {
      "SecretKey": []
    }
  ]
}