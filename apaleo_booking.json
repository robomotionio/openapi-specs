{
  "openapi": "3.0.0",
  "info": {
    "title": "apaleo Booking API",
    "description": "Resources and methods to manage guest journeys.",
    "contact": {
      "url": "https://apaleo.dev/",
      "name": "Apaleo"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.apaleo.com",
      "variables": {}
    }
  ],
  "paths": {
    "/booking/v1/blocks": {
      "post": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocksPost",
        "description": "<br>You must have at least one of these scopes: 'blocks.create, reservations.manage'.",
        "operationId": "BookingBlocksPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details for the block you want to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlockModel"
              },
              "example": {
                "groupId": "XPGMSXGF",
                "ratePlanId": "MUC-NONREF-SGL",
                "from": "2022-05-03",
                "to": "2022-05-06",
                "grossDailyRate": {
                  "amount": 160,
                  "currency": "EUR"
                },
                "timeSlices": [
                  {
                    "blockedUnits": 3
                  },
                  {
                    "blockedUnits": 0
                  },
                  {
                    "blockedUnits": 7
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The block was created successfully.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.create",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocksGet",
        "description": "Returns a list of all blocks, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocksGet",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Return blocks for the specific group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Return blocks filtered by properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return blocks filtered by statuses",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/status6"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Return blocks with any of the specified unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Return blocks with any of the specified rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "Return blocks with any of the specified time slice definitions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Return blocks with any of the specified unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "timeSliceTemplate",
            "in": "query",
            "description": "The time slice template, defaults to 'over night'",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/timeSliceTemplate"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockListModel"
                }
              }
            }
          },
          "204": {
            "description": "No blocks found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/blocks/$count": {
      "get": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocks$countGet",
        "description": "Returns number of blocks matching the filter criteria<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocks$countGet",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Return blocks for the specific group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Return blocks filtered by properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return blocks filtered by statuses",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/status6"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Return blocks with any of the specified unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Return blocks with any of the specified rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "Return blocks with any of the specified time slice definitions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Return blocks with any of the specified unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "timeSliceTemplate",
            "in": "query",
            "description": "The time slice template, defaults to 'over night'",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/timeSliceTemplate"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/blocks/{id}": {
      "get": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocksByIdGet",
        "description": "Retrieves a block, specified by its ID.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocksByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block to be retrieved.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocksByIdPatch",
        "description": "This endpoint is obsolete. It will be removed 10.05.2022. Use `PUT /booking/v1/block-actions/{id}/amend` instead.<br/ >You can replace From, To, GrossDailyRate and BlockedUnits<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlocksByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Block"
        ],
        "summary": "BookingBlocksByIdDelete",
        "description": "Use this call to delete a block. This is only possible as long as no reservation was picked up yet even if all of\r\nthem are canceled<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlocksByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the block.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/block-actions/{id}/confirm": {
      "put": {
        "tags": [
          "BlockActions"
        ],
        "summary": "BookingBlock-actionsByIdConfirmPut",
        "description": "Confirm a specific block which is in status 'Tentative'.\r\nThis changes the status to 'Definite'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdConfirmPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/block-actions/{id}/release": {
      "put": {
        "tags": [
          "BlockActions"
        ],
        "summary": "BookingBlock-actionsByIdReleasePut",
        "description": "Release a specific block which is in status 'Definite'.\r\nThis changes the status to 'Tentative'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdReleasePut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Release of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/block-actions/{id}/cancel": {
      "put": {
        "tags": [
          "BlockActions"
        ],
        "summary": "BookingBlock-actionsByIdCancelPut",
        "description": "Cancel a specific block which is in status 'Definite' or 'Tentative'.\r\nThis changes the status to 'Canceled'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdCancelPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cancellation of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/block-actions/{id}/wash": {
      "put": {
        "tags": [
          "BlockActions"
        ],
        "summary": "BookingBlock-actionsByIdWashPut",
        "description": "Wash a specific block which is in status 'Definite'.\r\nThis releases all unpicked units.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdWashPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Wash of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/block-actions/{id}/amend": {
      "put": {
        "tags": [
          "BlockActions"
        ],
        "summary": "BookingBlock-actionsByIdAmendPut",
        "description": "Use this call to modify a block.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdAmendPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the block to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the block.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceBlockModel"
              },
              "example": {
                "from": "2022-05-03",
                "to": "2022-05-06",
                "grossDailyRate": {
                  "amount": 160,
                  "currency": "EUR"
                },
                "timeSlices": [
                  {
                    "blockedUnits": 3
                  },
                  {
                    "blockedUnits": 0
                  },
                  {
                    "blockedUnits": 7
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Replace of the block was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/bookings": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsPost",
        "description": "Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'.",
        "operationId": "BookingBookingsPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of reservations you want to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingModel"
              },
              "example": {
                "paymentAccount": {
                  "accountNumber": "1111",
                  "accountHolder": "John Doe",
                  "expiryMonth": "8",
                  "expiryYear": "2018",
                  "paymentMethod": "visa",
                  "payerEmail": "s.hopper@test.com",
                  "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
                  "isVirtual": false
                },
                "booker": {
                  "title": "Mr",
                  "gender": "Male",
                  "firstName": "Jon",
                  "middleInitial": "D",
                  "lastName": "Doe",
                  "email": "john.d@doe.com",
                  "phone": "+4989123343",
                  "address": {
                    "addressLine1": "My Street 1",
                    "postalCode": "12453",
                    "city": "MyCity",
                    "countryCode": "GB"
                  }
                },
                "reservations": [
                  {
                    "arrival": "2022-04-30",
                    "departure": "2022-05-02",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "guestComment": "I need a wake up service",
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Jon",
                      "middleInitial": "D",
                      "lastName": "Doe",
                      "email": "john.d@doe.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "Prepayment",
                    "travelPurpose": "Business",
                    "timeSlices": [
                      {
                        "ratePlanId": "MUC-NONREF-FAMILY"
                      },
                      {
                        "ratePlanId": "MUC-NONREF-FAMILY"
                      }
                    ],
                    "services": [
                      {
                        "serviceId": "MUC-BRKF"
                      },
                      {
                        "serviceId": "MUC-YOGA",
                        "dates": [
                          {
                            "serviceDate": "2022-05-01",
                            "amount": {
                              "amount": 35,
                              "currency": "EUR"
                            }
                          }
                        ]
                      }
                    ],
                    "prePaymentAmount": {
                      "amount": 50,
                      "currency": "EUR"
                    }
                  },
                  {
                    "arrival": "2022-05-01",
                    "departure": "2022-05-03",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Eric",
                      "middleInitial": "E",
                      "lastName": "Steinmetz",
                      "email": "eric.e@steinmetz.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "CreditCard",
                    "timeSlices": [
                      {
                        "ratePlanId": "BER-FLEX-DBL",
                        "totalAmount": {
                          "amount": 120,
                          "currency": "EUR"
                        }
                      },
                      {
                        "ratePlanId": "BER-FLEX-DBL",
                        "totalAmount": {
                          "amount": 125,
                          "currency": "EUR"
                        }
                      }
                    ],
                    "companyId": "BER-UMBRELLA",
                    "commission": {
                      "commissionAmount": {
                        "amount": 20,
                        "currency": "EUR"
                      },
                      "beforeCommissionAmount": {
                        "amount": 100,
                        "currency": "EUR"
                      }
                    }
                  }
                ],
                "transactionReference": "564578124534890J"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All new reservations were created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.create",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsGet",
        "description": "Returns a list of all bookings, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingBookingsGet",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "Filter result by reservation id. The result set will contain all bookings having reservations with the specified id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Filter result by group id. The result set will contain all bookings having groups with the specified id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "Filter result by the channel code. The resul set will contain all bookings having reservations with the specified channel code",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/channelCode4"
              }
            }
          },
          {
            "name": "externalCode",
            "in": "query",
            "description": "Filter result by the external code. The result set will contain all bookings having reservations with external code starting with provided value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all bookings for the provided free text. Currently it only looks up if either the lastname, firstname, email or company name of the booker\r\ncontains one of the provided values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingListModel"
                }
              }
            }
          },
          "204": {
            "description": "No bookings found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/bookings/$force": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookings$forcePost",
        "description": "Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'.",
        "operationId": "BookingBookings$forcePost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of reservations you want to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingModel"
              },
              "example": {
                "paymentAccount": {
                  "accountNumber": "1111",
                  "accountHolder": "John Doe",
                  "expiryMonth": "8",
                  "expiryYear": "2018",
                  "paymentMethod": "visa",
                  "payerEmail": "s.hopper@test.com",
                  "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
                  "isVirtual": false
                },
                "booker": {
                  "title": "Mr",
                  "gender": "Male",
                  "firstName": "Jon",
                  "middleInitial": "D",
                  "lastName": "Doe",
                  "email": "john.d@doe.com",
                  "phone": "+4989123343",
                  "address": {
                    "addressLine1": "My Street 1",
                    "postalCode": "12453",
                    "city": "MyCity",
                    "countryCode": "GB"
                  }
                },
                "reservations": [
                  {
                    "arrival": "2022-04-30",
                    "departure": "2022-05-02",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "guestComment": "I need a wake up service",
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Jon",
                      "middleInitial": "D",
                      "lastName": "Doe",
                      "email": "john.d@doe.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "Prepayment",
                    "travelPurpose": "Business",
                    "timeSlices": [
                      {
                        "ratePlanId": "MUC-NONREF-FAMILY"
                      },
                      {
                        "ratePlanId": "MUC-NONREF-FAMILY"
                      }
                    ],
                    "services": [
                      {
                        "serviceId": "MUC-BRKF"
                      },
                      {
                        "serviceId": "MUC-YOGA",
                        "dates": [
                          {
                            "serviceDate": "2022-05-01",
                            "amount": {
                              "amount": 35,
                              "currency": "EUR"
                            }
                          }
                        ]
                      }
                    ],
                    "prePaymentAmount": {
                      "amount": 50,
                      "currency": "EUR"
                    }
                  },
                  {
                    "arrival": "2022-05-01",
                    "departure": "2022-05-03",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Eric",
                      "middleInitial": "E",
                      "lastName": "Steinmetz",
                      "email": "eric.e@steinmetz.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "CreditCard",
                    "timeSlices": [
                      {
                        "ratePlanId": "BER-FLEX-DBL",
                        "totalAmount": {
                          "amount": 120,
                          "currency": "EUR"
                        }
                      },
                      {
                        "ratePlanId": "BER-FLEX-DBL",
                        "totalAmount": {
                          "amount": 125,
                          "currency": "EUR"
                        }
                      }
                    ],
                    "companyId": "BER-UMBRELLA",
                    "commission": {
                      "commissionAmount": {
                        "amount": 20,
                        "currency": "EUR"
                      },
                      "beforeCommissionAmount": {
                        "amount": 100,
                        "currency": "EUR"
                      }
                    }
                  }
                ],
                "transactionReference": "564578124534890J"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All new reservations were created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.force-create",
              "reservations.force-manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/bookings/{id}/reservations": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsByIdReservationsPost",
        "description": "Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'.",
        "operationId": "BookingBookingsByIdReservationsPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the booking the reservations should be attached to.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of reservations you want to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReservationsModel"
              },
              "example": {
                "reservations": [
                  {
                    "arrival": "2022-04-30",
                    "departure": "2022-05-02",
                    "adults": 1,
                    "comment": "I need a wake up service",
                    "externalCode": "812864414|381",
                    "channelCode": "BookingCom",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Jon",
                      "middleInitial": "D",
                      "lastName": "Doe",
                      "email": "john.d@doe.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "Prepayment",
                    "timeSlices": [
                      {
                        "ratePlanId": "MUC-NONREF-DBL"
                      },
                      {
                        "ratePlanId": "MUC-NONREF-DBL"
                      }
                    ],
                    "services": [
                      {
                        "serviceId": "MUC-BRKF"
                      },
                      {
                        "serviceId": "MUC-YOGA",
                        "dates": [
                          {
                            "serviceDate": "2022-05-01",
                            "amount": {
                              "amount": 35,
                              "currency": "EUR"
                            }
                          }
                        ]
                      }
                    ],
                    "companyId": "UMBRELLA",
                    "corporateCode": "UMBRELLA-MUC_NONREF_DBL"
                  },
                  {
                    "arrival": "2022-05-01",
                    "departure": "2022-05-03",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Eric",
                      "middleInitial": "E",
                      "lastName": "Steinmetz",
                      "email": "eric.e@steinmetz.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "CreditCard",
                    "timeSlices": [
                      {
                        "ratePlanId": "BER-FLEX-DBL"
                      },
                      {
                        "ratePlanId": "BER-FLEX-DBL"
                      }
                    ],
                    "commission": {
                      "commissionAmount": {
                        "amount": 20,
                        "currency": "EUR"
                      },
                      "beforeCommissionAmount": {
                        "amount": 100,
                        "currency": "EUR"
                      }
                    }
                  }
                ],
                "transactionReference": "RFEUFHEW"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.create",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/bookings/{id}/reservations/$force": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsByIdReservations$forcePost",
        "description": "Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'.",
        "operationId": "BookingBookingsByIdReservations$forcePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the booking the reservations should be attached to.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of reservations you want to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReservationsModel"
              },
              "example": {
                "reservations": [
                  {
                    "arrival": "2022-04-30",
                    "departure": "2022-05-02",
                    "adults": 1,
                    "comment": "I need a wake up service",
                    "externalCode": "812864414|381",
                    "channelCode": "BookingCom",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Jon",
                      "middleInitial": "D",
                      "lastName": "Doe",
                      "email": "john.d@doe.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "Prepayment",
                    "timeSlices": [
                      {
                        "ratePlanId": "MUC-NONREF-DBL"
                      },
                      {
                        "ratePlanId": "MUC-NONREF-DBL"
                      }
                    ],
                    "services": [
                      {
                        "serviceId": "MUC-BRKF"
                      },
                      {
                        "serviceId": "MUC-YOGA",
                        "dates": [
                          {
                            "serviceDate": "2022-05-01",
                            "amount": {
                              "amount": 35,
                              "currency": "EUR"
                            }
                          }
                        ]
                      }
                    ],
                    "companyId": "UMBRELLA",
                    "corporateCode": "UMBRELLA-MUC_NONREF_DBL"
                  },
                  {
                    "arrival": "2022-05-01",
                    "departure": "2022-05-03",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "channelCode": "Direct",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Eric",
                      "middleInitial": "E",
                      "lastName": "Steinmetz",
                      "email": "eric.e@steinmetz.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    },
                    "guaranteeType": "CreditCard",
                    "timeSlices": [
                      {
                        "ratePlanId": "BER-FLEX-DBL"
                      },
                      {
                        "ratePlanId": "BER-FLEX-DBL"
                      }
                    ],
                    "commission": {
                      "commissionAmount": {
                        "amount": 20,
                        "currency": "EUR"
                      },
                      "beforeCommissionAmount": {
                        "amount": 100,
                        "currency": "EUR"
                      }
                    }
                  }
                ],
                "transactionReference": "RFEUFHEW"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.force-create",
              "reservations.force-manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/bookings/{id}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsByIdGet",
        "description": "Retrieves a booking with all its reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingBookingsByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the booking to be retrieved.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations, propertyValues. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand3"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Booking"
        ],
        "summary": "BookingBookingsByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove Comment\r\n- Add, replace and remove BookerComment\r\n- Copy PaymentAccount, Comment and BookerComment from the booking to any reservation, or the other way around\r\n- Replace Booker<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingBookingsByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the booking to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/groups": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsPost",
        "description": "<br>You must have at least one of these scopes: 'groups.create, reservations.manage'.",
        "operationId": "BookingGroupsPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the group that should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupModel"
              },
              "example": {
                "name": "apaleo Summer Festival 2023",
                "booker": {
                  "title": "Mr",
                  "gender": "Male",
                  "firstName": "Jon",
                  "middleInitial": "D",
                  "lastName": "Doe",
                  "email": "john.d@doe.com",
                  "phone": "+4989123343",
                  "address": {
                    "addressLine1": "My Street 1",
                    "postalCode": "12453",
                    "city": "MyCity",
                    "countryCode": "GB"
                  }
                },
                "paymentAccount": {
                  "accountNumber": "1111",
                  "accountHolder": "John Doe",
                  "expiryMonth": "8",
                  "expiryYear": "2018",
                  "paymentMethod": "visa",
                  "payerEmail": "s.hopper@test.com",
                  "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
                  "isVirtual": false
                },
                "propertyIds": [
                  "MUC"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new group booking was created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.create",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsGet",
        "description": "Returns a list of all group bookings, filtered by the specified parameters.\r\nIf no parameters are set, returns the entire list<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroupsGet",
        "parameters": [
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,\r\nfirstname, email or company name of the booker contains one of the provided values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Filter result by requested properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand4"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupListModel"
                }
              }
            }
          },
          "204": {
            "description": "No group bookings found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsByIdGet",
        "description": "Retrieves a specific group booking with all its related blocks<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroupsByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group booking to be retrieved.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand4"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Add and replace Name\r\n- Add, replace and remove Comment\r\n- Add, replace and remove BookerComment\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove PropertyIds\r\n- Replace Booker<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group booking to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsByIdDelete",
        "description": "Use this call to delete a group booking. This is only possible as long as no blocks exist that are linked to\r\nthis group booking<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group booking to be deleted.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the group was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/groups/$count": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroups$countGet",
        "description": "Returns number of group bookings matching the filter criteria<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroups$countGet",
        "parameters": [
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,\r\nfirstname, email or company name of the booker contains one of the provided values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Filter result by requested properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/groups/{id}/reservations": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "BookingGroupsByIdReservationsPost",
        "description": "Creates new reservations and adds them to an existing group booking taking a list of reservations as input<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdReservationsPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group booking the reservations should be attached to.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of reservations you want to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PickUpReservationsModel"
              },
              "example": {
                "reservations": [
                  {
                    "blockId": "MUC-QJNXJR",
                    "arrival": "2022-04-30",
                    "departure": "2022-05-02",
                    "adults": 1,
                    "comment": "I need a wake up service",
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Jon",
                      "middleInitial": "D",
                      "lastName": "Doe",
                      "email": "john.d@doe.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      },
                      "company": {
                        "name": "Company GmbH",
                        "taxId": "1442"
                      }
                    }
                  },
                  {
                    "blockId": "MUC-WKMCKT",
                    "arrival": "2022-05-01",
                    "departure": "2022-05-03",
                    "adults": 1,
                    "childrenAges": [
                      6
                    ],
                    "primaryGuest": {
                      "title": "Mr",
                      "gender": "Male",
                      "firstName": "Eric",
                      "middleInitial": "E",
                      "lastName": "Steinmetz",
                      "email": "eric.e@steinmetz.com",
                      "phone": "+4989123343",
                      "address": {
                        "addressLine1": "My Street 1",
                        "postalCode": "12453",
                        "city": "MyCity",
                        "countryCode": "GB"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the group booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/offers": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "BookingOffersGet",
        "description": "Calculates and returns available offers for a specific property, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingOffersGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "The property ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrival",
            "in": "query",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeSliceTemplate",
            "in": "query",
            "description": "The time slice template used to filter the rate plans, defaults to 'over night'",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/timeSliceTemplate"
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "Time slice definition IDs, used to filter rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Unit group IDs, used to filter rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Unit group types, used to filter rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "Channel code, used to filter the rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "promoCode",
            "in": "query",
            "description": "The promo code associated with a certain special offer",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "corporateCode",
            "in": "query",
            "description": "The code associated with a corporate rate",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adults",
            "in": "query",
            "description": "The number of adults you want offers for",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childrenAges",
            "in": "query",
            "description": "The ages of the children you want offers for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StayOffersModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/rate-plan-offers": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "BookingRate-plan-offersGet",
        "description": "Calculates and returns available offers for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingRate-plan-offersGet",
        "parameters": [
          {
            "name": "ratePlanId",
            "in": "query",
            "description": "The rate plan ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrival",
            "in": "query",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "The channel code",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "adults",
            "in": "query",
            "description": "The number of adults you want offers for",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childrenAges",
            "in": "query",
            "description": "The ages of the children you want offers for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "overridePrices",
            "in": "query",
            "description": "Desired prices for each timeslice",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StayOffersModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/service-offers": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "BookingService-offersGet",
        "description": "<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingService-offersGet",
        "parameters": [
          {
            "name": "ratePlanId",
            "in": "query",
            "description": "The rate plan ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrival",
            "in": "query",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "The channel code used to filter the services",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "adults",
            "in": "query",
            "description": "The number of adults you want offers for",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childrenAges",
            "in": "query",
            "description": "The ages of the children you want offers for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "onlyDefaultDates",
            "in": "query",
            "description": "Depending on the postNextDay setting of a service it will be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, having 'postNextDay' set to true. Its 'default dates' are from the day after\r\narrival until the departure day. For services like dinner 'postNextDay' is false, and default dates are day of arrival until one\r\nday before departure.\r\nWith this query parameter set to 'false', you can also ask for dates outside of those default dates. It defaults to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOffersModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/offer-index": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "BookingOffer-indexGet",
        "description": "Calculates and returns offers per time slice for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offer-index.read, offers.read'.",
        "operationId": "BookingOffer-indexGet",
        "parameters": [
          {
            "name": "ratePlanId",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSliceListModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no rates for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offer-index.read",
              "offers.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsGet",
        "description": "Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsGet",
        "parameters": [
          {
            "name": "bookingId",
            "in": "query",
            "description": "Filter result by booking id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Filter result by requested properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Filter result by requested rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "Filter result by requested companies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitIds",
            "in": "query",
            "description": "Filter result by assigned units",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Filter result by requested unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Filter result by requested unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "blockIds",
            "in": "query",
            "description": "Filter result by requested blocks",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter result by reservation status",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/status8"
              }
            }
          },
          {
            "name": "dateFilter",
            "in": "query",
            "description": "Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.\r\nAll filters will check if the date specified by the filter type is between from (included) and to (excluded).\r\nThe exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateFilter"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "Filter result by the channel code",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/channelCode4"
              }
            }
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Filter result by source",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "validationMessageCategory",
            "in": "query",
            "description": "Filter result by validation message category",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/validationMessageCategory"
              }
            }
          },
          {
            "name": "externalCode",
            "in": "query",
            "description": "Filter result by the external code. The result set will contain all reservations that have an external code starting with the\r\nprovided value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,\r\nprimary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balanceFilter",
            "in": "query",
            "description": "This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "allFoliosHaveInvoice",
            "in": "query",
            "description": "If set to {true}, returns only reservations, in which all folios are closed and have an invoice.\r\nIf set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "List of all fields that can be used to sort the results. Possible values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc, created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc, firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sort"
              }
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: booker, actions, timeSlices, services, assignedUnits, company. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand6"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationListModel"
                }
              }
            }
          },
          "204": {
            "description": "No reservations found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations/$count": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservations$countGet",
        "description": "If no parameters are set, returns the total count of reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservations$countGet",
        "parameters": [
          {
            "name": "bookingId",
            "in": "query",
            "description": "Filter result by booking id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIds",
            "in": "query",
            "description": "Filter result by requested properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Filter result by requested rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "Filter result by requested companies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitIds",
            "in": "query",
            "description": "Filter result by assigned units",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Filter result by requested unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Filter result by requested unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "blockIds",
            "in": "query",
            "description": "Filter result by requested blocks",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter result by reservation status",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/status8"
              }
            }
          },
          {
            "name": "dateFilter",
            "in": "query",
            "description": "Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.\r\nAll filters will check if the date specified by the filter type is between from (included) and to (excluded).\r\nThe exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateFilter"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "Filter result by the channel code",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/channelCode4"
              }
            }
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Filter result by source",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "validationMessageCategory",
            "in": "query",
            "description": "Filter result by validation message category",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/validationMessageCategory"
              }
            }
          },
          {
            "name": "externalCode",
            "in": "query",
            "description": "Filter result by the external code. The result set will contain all reservations that have an external code starting with the\r\nprovided value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,\r\nprimary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balanceFilter",
            "in": "query",
            "description": "This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "allFoliosHaveInvoice",
            "in": "query",
            "description": "If set to {true}, returns only reservations, in which all folios are closed and have an invoice.\r\nIf set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations/{id}": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdGet",
        "description": "Retrieves a reservation, specified by its ID.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation to be retrieved.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: timeSlices, services, booker, actions, company, assignedUnits. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand6"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Add, replace and remove Comment\r\n- Add, replace and remove GuestComment\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove TravelPurpose\r\n- Add, replace and remove AdditionalGuests\r\n- Add a company (using company/Id, and only if not already set)\r\n- Add, replace and remove Commission\r\n- Replace PrimaryGuest\r\n- Remove ValidationMessages<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservationsByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations/{id}/offers": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdOffersGet",
        "description": "Calculates and returns offers for amending a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdOffersGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation to be amended.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrival",
            "in": "query",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adults",
            "in": "query",
            "description": "Number of adults",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childrenAges",
            "in": "query",
            "description": "Ages of children",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "The channel code used to filter the rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "promoCode",
            "in": "query",
            "description": "The promo code associated with a certain special offer, like corporate rate",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requote",
            "in": "query",
            "description": "Whether the offers should be re-quoted based on current prices, or only additions like change of number of adults should be calculated.\r\nDefaults to 'false'",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "The list of unit groups used to filter the offers.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationStayOffersModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations/{id}/service-offers": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdService-offersGet",
        "description": "Calculates and returns service offers for a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdService-offersGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelCode",
            "in": "query",
            "description": "The channel code used to filter the services",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channelCode4"
            }
          },
          {
            "name": "onlyDefaultDates",
            "in": "query",
            "description": "Depending on the postNextDay setting of a service it will by default be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day\r\nare default dates and will have this flag set to true. For services like a dinner it is the other way around.\r\nWith this query parameter, you can also ask for the dates, that usually the service will not be booked. It defaults to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOffersModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservations/{id}/services": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdServicesGet",
        "description": "Returns the services booked for a specific reservation.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdServicesGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationServiceListModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no booked services for the specified reservation.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Reservation"
        ],
        "summary": "BookingReservationsByIdServicesDelete",
        "description": "Removes a service from a reservation. The service will not be removed if it is mandatory, already posted or if the service date is in the past.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservationsByIdServicesDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "The id of the service to delete",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/assign-unit": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdAssign-unitPut",
        "description": "Assigns one of the available units to a reservation which is in state 'Confirmed' or 'InHouse'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAssign-unitPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation a unit should be assigned to.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unitConditions",
            "in": "query",
            "description": "The optional unit conditions for unit that you want to auto assign for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitCondition"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit assignment was successful.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoAssignedUnitListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/assign-unit/{unitId}": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdAssign-unitByUnitIdPut",
        "description": "Assigns a specific unit to a reservation which is in state 'Confirmed' or 'InHouse'.<br />If the unit is not available, the call will return an error, and no unit will be assigned.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAssign-unitByUnitIdPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation the unit should be assigned to.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "description": "The id of the unit to be assigned.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date and optional time for the unit assignment. If not specified, the reservation's arrival will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date and optional time for the unit assignment. If not specified, the reservation's departure will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit assignment was successful.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignedUnitModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/unassign-units": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdUnassign-unitsPut",
        "description": "Unassigns units for all time slices of the given reservation. If no units are assigned for the\r\nreservation nothing will happen. It will fail for reservations in status 'CheckedOut'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdUnassign-unitsPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation the unit should be unassigned for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unassigning the unit was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/checkin": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdCheckinPut",
        "description": "Check in a specific reservation which is in status 'Confirmed', and has a unit assigned. This changes the status to 'InHouse', and sets the check-in date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCheckinPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withCityTax",
            "in": "query",
            "description": "Define if city tax should be added for this reservation or not. The default is \"true\".",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Check-in of the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/checkout": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdCheckoutPut",
        "description": "Check out a specific reservation which is in status 'InHouse'. This changes the status to 'CheckedOut', and sets the check-out date and time.\r\nAll open charges on the folio will be posted.\r\n<br />\r\nCheck-out is only possible, if the departure date is not later than tomorrow. Otherwise, first amend the reservation and shorten the stay.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCheckoutPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Check-out of the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/cancel": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdCancelPut",
        "description": "Cancel a specific reservation which is in status 'Confirmed' and where the arrival time is in the future.\r\nThis changes the status to 'Canceled', and sets the cancellation date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCancelPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cancellation of the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/noshow": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdNoshowPut",
        "description": "Set a specific reservation to No-show which is in status 'Confirmed' and where the arrival date is in the past.\r\nThis changes the status to 'NoShow', and sets the no-show date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdNoshowPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be processed.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Setting the reservation to No-show was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/amend": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdAmendPut",
        "description": "Modifies the stay-related data of a reservation.<br />\r\nIf a reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation is 'InHouse', only changes to future time slices are possible.<br />\r\nChanges to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAmendPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be modified",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new stay details that should be applied to the reservation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DesiredStayDetailsModel"
              },
              "example": {
                "arrival": "2022-04-30T17:00:00+02:00",
                "departure": "2022-05-02T11:00:00+02:00",
                "adults": 1,
                "childrenAges": [
                  6
                ],
                "requote": false,
                "timeSlices": [
                  {
                    "ratePlanId": "MUC-NONREF-DBL",
                    "totalGrossAmount": {
                      "amount": 86,
                      "currency": "EUR"
                    }
                  },
                  {
                    "ratePlanId": "MUC-NONREF-DBL",
                    "totalGrossAmount": {
                      "amount": 101,
                      "currency": "EUR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The reservation has been changed.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/amend/$force": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdAmend$forcePut",
        "description": "Modifies the stay-related data of a reservation.<br />\r\nIf a reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation is 'InHouse', only changes to future time slices are possible.<br />\r\nChanges to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.force-manage'.",
        "operationId": "BookingReservation-actionsByIdAmend$forcePut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation that should be modified",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new stay details that should be applied to the reservation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DesiredStayDetailsModel"
              },
              "example": {
                "arrival": "2022-04-30T17:00:00+02:00",
                "departure": "2022-05-02T11:00:00+02:00",
                "adults": 1,
                "childrenAges": [
                  6
                ],
                "requote": false,
                "timeSlices": [
                  {
                    "ratePlanId": "MUC-NONREF-DBL",
                    "totalGrossAmount": {
                      "amount": 86,
                      "currency": "EUR"
                    }
                  },
                  {
                    "ratePlanId": "MUC-NONREF-DBL",
                    "totalGrossAmount": {
                      "amount": 101,
                      "currency": "EUR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The reservation has been changed.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.force-manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/book-service": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdBook-servicePut",
        "description": "Use this to book a service for a specific reservation.\r\nPlease note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdBook-servicePut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookReservationServiceModel"
              },
              "example": {
                "serviceId": "MUC-SPA",
                "dates": [
                  {
                    "serviceDate": "2022-04-28",
                    "amount": {
                      "amount": 25,
                      "currency": "EUR"
                    }
                  },
                  {
                    "serviceDate": "2022-04-29"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Booking of the service for the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/book-service/$force": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdBook-service$forcePut",
        "description": "Use this to book a service for a specific reservation.\r\nPlease note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdBook-service$forcePut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookReservationServiceModel"
              },
              "example": {
                "serviceId": "MUC-SPA",
                "dates": [
                  {
                    "serviceDate": "2022-04-28",
                    "amount": {
                      "amount": 25,
                      "currency": "EUR"
                    }
                  },
                  {
                    "serviceDate": "2022-04-29"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Booking of the service for the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/remove-city-tax": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdRemove-city-taxPut",
        "description": "Use this is you want to remove the city tax from a reservation before the stay.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdRemove-city-taxPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removal of the city tax for the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/add-city-tax": {
      "put": {
        "tags": [
          "ReservationActions"
        ],
        "summary": "BookingReservation-actionsByIdAdd-city-taxPut",
        "description": "Use this if you want to add the city tax to a reservation.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAdd-city-taxPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reservation.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Addition of the city tax for the reservation was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reservations.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/booking/v1/types/sources": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "BookingTypesSourcesGet",
        "description": "Returns a list of channels that could be used as a source to create bookings.",
        "operationId": "BookingTypesSourcesGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "ActionModelBlockActionNotAllowedBlockActionReason": {
        "title": "ActionModelBlockActionNotAllowedBlockActionReason",
        "required": [
          "action",
          "isAllowed"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionReasonModelNotAllowedBlockActionReason"
            },
            "description": ""
          }
        }
      },
      "ActionModelGroupActionNotAllowedGroupActionReason": {
        "title": "ActionModelGroupActionNotAllowedGroupActionReason",
        "required": [
          "action",
          "isAllowed"
        ],
        "type": "object",
        "properties": {
          "action": {
            "enum": [
              "Delete"
            ],
            "type": "string",
            "example": "Delete"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionReasonModelNotAllowedGroupActionReason"
            },
            "description": ""
          }
        }
      },
      "ActionModelReservationActionNotAllowedReservationActionReason": {
        "title": "ActionModelReservationActionNotAllowedReservationActionReason",
        "required": [
          "action",
          "isAllowed"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action1"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionReasonModelNotAllowedReservationActionReason"
            },
            "description": ""
          }
        }
      },
      "ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason": {
        "title": "ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason",
        "required": [
          "action",
          "isAllowed"
        ],
        "type": "object",
        "properties": {
          "action": {
            "enum": [
              "Amend"
            ],
            "type": "string",
            "example": "Amend"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionReasonModelNotAllowedReservationTimeSliceActionReason"
            },
            "description": ""
          }
        }
      },
      "ActionReasonModelNotAllowedBlockActionReason": {
        "title": "ActionReasonModelNotAllowedBlockActionReason",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Code"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ActionReasonModelNotAllowedGroupActionReason": {
        "title": "ActionReasonModelNotAllowedGroupActionReason",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "DeleteNotAllowedForGroupWithBlocks"
            ],
            "type": "string",
            "example": "DeleteNotAllowedForGroupWithBlocks"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ActionReasonModelNotAllowedReservationActionReason": {
        "title": "ActionReasonModelNotAllowedReservationActionReason",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Code1"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ActionReasonModelNotAllowedReservationTimeSliceActionReason": {
        "title": "ActionReasonModelNotAllowedReservationTimeSliceActionReason",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Code2"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AddReservationsModel": {
        "title": "AddReservationsModel",
        "required": [
          "reservations"
        ],
        "type": "object",
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReservationModel"
            },
            "description": "List of reservations to add to the existing booking"
          },
          "transactionReference": {
            "type": "string",
            "description": "The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation.\r\nWhen set, the payment transaction completion is always triggered regardless of the reservation guarantee type and payment automation settings."
          }
        },
        "description": "With this request you can add reservations to an existing booking",
        "example": {
          "reservations": [
            {
              "arrival": "2022-04-30",
              "departure": "2022-05-02",
              "adults": 1,
              "comment": "I need a wake up service",
              "externalCode": "812864414|381",
              "channelCode": "BookingCom",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "Prepayment",
              "timeSlices": [
                {
                  "ratePlanId": "MUC-NONREF-DBL"
                },
                {
                  "ratePlanId": "MUC-NONREF-DBL"
                }
              ],
              "services": [
                {
                  "serviceId": "MUC-BRKF"
                },
                {
                  "serviceId": "MUC-YOGA",
                  "dates": [
                    {
                      "serviceDate": "2022-05-01",
                      "amount": {
                        "amount": 35,
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ],
              "companyId": "UMBRELLA",
              "corporateCode": "UMBRELLA-MUC_NONREF_DBL"
            },
            {
              "arrival": "2022-05-01",
              "departure": "2022-05-03",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "CreditCard",
              "timeSlices": [
                {
                  "ratePlanId": "BER-FLEX-DBL"
                },
                {
                  "ratePlanId": "BER-FLEX-DBL"
                }
              ],
              "commission": {
                "commissionAmount": {
                  "amount": 20,
                  "currency": "EUR"
                },
                "beforeCommissionAmount": {
                  "amount": 100,
                  "currency": "EUR"
                }
              }
            }
          ],
          "transactionReference": "RFEUFHEW"
        }
      },
      "AmountModel": {
        "title": "AmountModel",
        "required": [
          "grossAmount",
          "netAmount",
          "vatType",
          "vatPercent",
          "currency"
        ],
        "type": "object",
        "properties": {
          "grossAmount": {
            "type": "number"
          },
          "netAmount": {
            "type": "number"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "vatPercent": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "example": {
          "grossAmount": 107,
          "netAmount": 100,
          "vatType": "Reduced",
          "vatPercent": 7,
          "currency": "USD"
        }
      },
      "AssignedUnitModel": {
        "title": "AssignedUnitModel",
        "required": [
          "unit"
        ],
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          }
        },
        "example": {
          "unit": {
            "id": "MUC-JQI",
            "name": "A.201",
            "description": "Standard room."
          }
        }
      },
      "AutoAssignedUnitItemModel": {
        "title": "AutoAssignedUnitItemModel",
        "required": [
          "unit",
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          },
          "from": {
            "type": "string",
            "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          }
        }
      },
      "AutoAssignedUnitListModel": {
        "title": "AutoAssignedUnitListModel",
        "required": [
          "timeSlices"
        ],
        "type": "object",
        "properties": {
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoAssignedUnitItemModel"
            },
            "description": "The list of time slices with the respective assigned unit"
          }
        },
        "example": {
          "timeSlices": [
            {
              "unit": {
                "id": "MUC-JQI",
                "name": "A.201",
                "description": "Standard room."
              },
              "from": "2022-04-28T17:00:00+02:00",
              "to": "2022-04-29T11:00:00+02:00"
            },
            {
              "unit": {
                "id": "MUC-MTA",
                "name": "A.101",
                "description": "Standard room."
              },
              "from": "2022-04-29T17:00:00+02:00",
              "to": "2022-04-30T11:00:00+02:00"
            }
          ]
        }
      },
      "BlockCreatedModel": {
        "title": "BlockCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Block id"
          }
        },
        "example": {
          "id": "MUC-HSGTDG"
        }
      },
      "BlockItemModel": {
        "title": "BlockItemModel",
        "required": [
          "id",
          "group",
          "status",
          "property",
          "ratePlan",
          "unitGroup",
          "grossDailyRate",
          "from",
          "to",
          "pickedReservations",
          "created",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Block id"
          },
          "group": {
            "$ref": "#/components/schemas/EmbeddedGroupModel"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "grossDailyRate": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "from": {
            "type": "string",
            "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "pickedReservations": {
            "type": "integer",
            "description": "Number of reservations already picked from this block",
            "format": "int32"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer used to create the block"
          },
          "corporateCode": {
            "type": "string",
            "description": "The corporate code associated with a certain special offer used to create the block"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockTimeSliceModel"
            },
            "description": "The list of blocked units for each time slice"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelBlockActionNotAllowedBlockActionReason"
            },
            "description": "The list of actions for this block"
          }
        }
      },
      "BlockListModel": {
        "title": "BlockListModel",
        "required": [
          "blocks",
          "count"
        ],
        "type": "object",
        "properties": {
          "blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockItemModel"
            },
            "description": "List of blocks"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "BlockModel": {
        "title": "BlockModel",
        "required": [
          "id",
          "group",
          "status",
          "property",
          "ratePlan",
          "unitGroup",
          "grossDailyRate",
          "from",
          "to",
          "pickedReservations",
          "created",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Block id"
          },
          "group": {
            "$ref": "#/components/schemas/EmbeddedGroupModel"
          },
          "status": {
            "$ref": "#/components/schemas/Status1"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "grossDailyRate": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "from": {
            "type": "string",
            "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "pickedReservations": {
            "type": "integer",
            "description": "Number of reservations already picked from this block",
            "format": "int32"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer used to create the block"
          },
          "corporateCode": {
            "type": "string",
            "description": "The corporate code associated with a certain special offer used to create the block"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockTimeSliceModel"
            },
            "description": "The list of time slices for this block"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelBlockActionNotAllowedBlockActionReason"
            },
            "description": "The list of actions for this block"
          }
        }
      },
      "BlockTimeSliceModel": {
        "title": "BlockTimeSliceModel",
        "required": [
          "from",
          "to",
          "blockedUnits",
          "pickedUnits",
          "baseAmount",
          "totalGrossAmount"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date and time from which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "blockedUnits": {
            "type": "integer",
            "description": "Number of units blocked for this time slice",
            "format": "int32"
          },
          "pickedUnits": {
            "type": "integer",
            "description": "Number of units which have picked reservations for this time slice",
            "format": "int32"
          },
          "baseAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "BookerModel": {
        "title": "BookerModel",
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/Title1"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the booker"
          },
          "middleInitial": {
            "type": "string",
            "description": "Middle initial of the booker"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the booker"
          },
          "email": {
            "type": "string",
            "description": "Email address of the booker"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the booker"
          },
          "address": {
            "$ref": "#/components/schemas/PersonAddressModel"
          },
          "nationalityCountryCode": {
            "type": "string",
            "description": "The booker's nationality, in ISO 3166-1 alpha-2 code"
          },
          "identificationNumber": {
            "type": "string",
            "description": "The booker's identification number for the given identificationType."
          },
          "identificationIssueDate": {
            "type": "string",
            "description": "The issue date of the booker's identification document.",
            "format": "date",
            "example": "2020-10-10"
          },
          "identificationType": {
            "$ref": "#/components/schemas/IdentificationType"
          },
          "company": {
            "$ref": "#/components/schemas/PersonCompanyModel"
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred contact two-letter language code (ISO Alpha-2)"
          },
          "birthDate": {
            "type": "string",
            "description": "Birth date",
            "format": "date",
            "example": "2020-10-10"
          },
          "birthPlace": {
            "type": "string",
            "description": "The place of birth"
          }
        }
      },
      "BookingCreatedModel": {
        "title": "BookingCreatedModel",
        "required": [
          "id",
          "reservationIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Booking id"
          },
          "reservationIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationCreatedModel"
            },
            "description": "List of ids for newly created reservations"
          }
        },
        "example": {
          "id": "XPGMSXGF",
          "reservationIds": [
            {
              "id": "XPGMSXGF-1"
            },
            {
              "id": "XPGMSXGF-2"
            }
          ]
        }
      },
      "BookingItemModel": {
        "title": "BookingItemModel",
        "required": [
          "id",
          "created",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Booking id"
          },
          "groupId": {
            "type": "string",
            "description": "Group id"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comment by the booker"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingReservationModel"
            },
            "description": "Reservations within this booking"
          }
        },
        "description": "A booking holds all shared metadata for a set of reservations"
      },
      "BookingListModel": {
        "title": "BookingListModel",
        "required": [
          "bookings",
          "count"
        ],
        "type": "object",
        "properties": {
          "bookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingItemModel"
            },
            "description": ""
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "bookings": [
            {
              "id": "XPGMSXGF",
              "booker": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 5",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "paymentAccount": {
                "accountNumber": "1111",
                "accountHolder": "John Doe",
                "expiryMonth": "8",
                "expiryYear": "2018",
                "paymentMethod": "visa",
                "payerEmail": "s.hopper@test.com",
                "isVirtual": false,
                "isActive": false
              },
              "comment": "The comment from the front desk or reservation office",
              "bookerComment": "The comment from the booker provided via the booking channel",
              "created": "0001-01-01T00:00:00Z",
              "modified": "0001-01-01T00:00:00Z",
              "reservations": [
                {
                  "id": "XPGMSXGF-1",
                  "status": "Confirmed",
                  "externalCode": "345343345|334",
                  "channelCode": "BookingCom",
                  "arrival": "2022-04-30T17:00:00+02:00",
                  "departure": "2022-05-02T11:00:00+02:00",
                  "adults": 1,
                  "childrenAges": [
                    6
                  ],
                  "totalGrossAmount": {
                    "amount": 130,
                    "currency": "EUR"
                  },
                  "property": {
                    "id": "MUC",
                    "code": "MUC",
                    "name": "Demo Hotel Munich",
                    "description": "This is the demo hotel Munich"
                  },
                  "ratePlan": {
                    "id": "MUC-NONREF_DBL",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "Non Refundable",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double",
                    "type": "BedRoom"
                  },
                  "guestComment": "The comment from the guest provided via the booking channel",
                  "cancellationFee": {
                    "id": "MUC-FLE",
                    "code": "FLE",
                    "name": "Flexible",
                    "description": "Free cancellation until 36 hours before arrival.",
                    "dueDateTime": "2022-04-30T17:00:00+02:00",
                    "fee": {
                      "amount": 30,
                      "currency": "EUR"
                    }
                  },
                  "noShowFee": {
                    "id": "MUC-NONREF",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "No free no-show",
                    "fee": {
                      "amount": 130,
                      "currency": "EUR"
                    }
                  }
                }
              ]
            }
          ],
          "count": 1
        }
      },
      "BookingModel": {
        "title": "BookingModel",
        "required": [
          "id",
          "created",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Booking id"
          },
          "groupId": {
            "type": "string",
            "description": "Group id"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comment by the booker"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "propertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyValueModel"
            },
            "description": "Property specific values like total amount and balance"
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingReservationModel"
            },
            "description": "Reservations within this booking"
          }
        },
        "description": "A booking holds all shared metadata for a set of reservations"
      },
      "BookingReservationModel": {
        "title": "BookingReservationModel",
        "required": [
          "id",
          "status",
          "channelCode",
          "arrival",
          "departure",
          "adults",
          "totalGrossAmount",
          "property",
          "ratePlan",
          "unitGroup",
          "cancellationFee",
          "noShowFee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reservation id"
          },
          "status": {
            "$ref": "#/components/schemas/Status2"
          },
          "externalCode": {
            "type": "string",
            "description": "Code in external system"
          },
          "channelCode": {
            "$ref": "#/components/schemas/ChannelCode"
          },
          "source": {
            "type": "string",
            "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "arrival": {
            "type": "string",
            "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ages of the children"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationServiceItemModel"
            },
            "description": "The list of additional services (extras, add-ons) reserved for the stay"
          },
          "guestComment": {
            "type": "string",
            "description": "Additional information and comment by the guest"
          },
          "cancellationFee": {
            "$ref": "#/components/schemas/ReservationCancellationFeeModel"
          },
          "noShowFee": {
            "$ref": "#/components/schemas/ReservationNoShowFeeModel"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          }
        }
      },
      "BookReservationServiceModel": {
        "title": "BookReservationServiceModel",
        "required": [
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "The id of the service you want to book"
          },
          "count": {
            "type": "integer",
            "description": "The number of services to book for each service date. It defaults to the service offer count when not specified.",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Date"
            },
            "description": "The optional dates you want to book the service for; if not specified the default service pattern will be used (e.g. whole stay)."
          }
        },
        "example": {
          "serviceId": "MUC-SPA",
          "dates": [
            {
              "serviceDate": "2022-04-28",
              "amount": {
                "amount": 25,
                "currency": "EUR"
              }
            },
            {
              "serviceDate": "2022-04-29"
            }
          ]
        }
      },
      "CommissionModel": {
        "title": "CommissionModel",
        "required": [
          "commissionAmount"
        ],
        "type": "object",
        "properties": {
          "commissionAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "beforeCommissionAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "CountModel": {
        "title": "CountModel",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "count": 50
        }
      },
      "CreateBlockModel": {
        "title": "CreateBlockModel",
        "required": [
          "groupId",
          "ratePlanId",
          "from",
          "to",
          "grossDailyRate"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "ID of the group that reserved the block"
          },
          "ratePlanId": {
            "type": "string",
            "description": "The rate plan"
          },
          "from": {
            "type": "string",
            "description": "Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "grossDailyRate": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateBlockTimeSliceModel"
            },
            "description": "The list of blocked units for each time slice"
          },
          "blockedUnits": {
            "type": "integer",
            "description": "Number of units to block for the defined time period",
            "format": "int32"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer"
          },
          "corporateCode": {
            "type": "string",
            "description": "The corporate code associated with a certain special offer"
          }
        },
        "example": {
          "groupId": "XPGMSXGF",
          "ratePlanId": "MUC-NONREF-SGL",
          "from": "2022-05-03",
          "to": "2022-05-06",
          "grossDailyRate": {
            "amount": 160,
            "currency": "EUR"
          },
          "timeSlices": [
            {
              "blockedUnits": 3
            },
            {
              "blockedUnits": 0
            },
            {
              "blockedUnits": 7
            }
          ]
        }
      },
      "CreateBlockTimeSliceModel": {
        "title": "CreateBlockTimeSliceModel",
        "required": [
          "blockedUnits"
        ],
        "type": "object",
        "properties": {
          "blockedUnits": {
            "type": "integer",
            "description": "Number of units blocked for the time slice",
            "format": "int32"
          }
        }
      },
      "CreateBookingModel": {
        "title": "CreateBookingModel",
        "required": [
          "booker",
          "reservations"
        ],
        "type": "object",
        "properties": {
          "paymentAccount": {
            "$ref": "#/components/schemas/CreatePaymentAccountModel"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comments by the booker"
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReservationModel"
            },
            "description": "List of reservations to create"
          },
          "transactionReference": {
            "type": "string",
            "description": "The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation.\r\nWhen set, the payment transaction completion is always triggered regardless of the reservation guarantee type and payment automation settings."
          }
        },
        "description": "With this request you can create a booking",
        "example": {
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
            "isVirtual": false
          },
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 1",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "reservations": [
            {
              "arrival": "2022-04-30",
              "departure": "2022-05-02",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "guestComment": "I need a wake up service",
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "Prepayment",
              "travelPurpose": "Business",
              "timeSlices": [
                {
                  "ratePlanId": "MUC-NONREF-FAMILY"
                },
                {
                  "ratePlanId": "MUC-NONREF-FAMILY"
                }
              ],
              "services": [
                {
                  "serviceId": "MUC-BRKF"
                },
                {
                  "serviceId": "MUC-YOGA",
                  "dates": [
                    {
                      "serviceDate": "2022-05-01",
                      "amount": {
                        "amount": 35,
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ],
              "prePaymentAmount": {
                "amount": 50,
                "currency": "EUR"
              }
            },
            {
              "arrival": "2022-05-01",
              "departure": "2022-05-03",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "CreditCard",
              "timeSlices": [
                {
                  "ratePlanId": "BER-FLEX-DBL",
                  "totalAmount": {
                    "amount": 120,
                    "currency": "EUR"
                  }
                },
                {
                  "ratePlanId": "BER-FLEX-DBL",
                  "totalAmount": {
                    "amount": 125,
                    "currency": "EUR"
                  }
                }
              ],
              "companyId": "BER-UMBRELLA",
              "commission": {
                "commissionAmount": {
                  "amount": 20,
                  "currency": "EUR"
                },
                "beforeCommissionAmount": {
                  "amount": 100,
                  "currency": "EUR"
                }
              }
            }
          ],
          "transactionReference": "564578124534890J"
        }
      },
      "CreateGroupModel": {
        "title": "CreateGroupModel",
        "required": [
          "name",
          "booker",
          "propertyIds"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comment by the booker"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/CreatePaymentAccountModel"
          },
          "propertyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of property ids the group booking belongs to"
          }
        },
        "description": "With this request you can create a group booking request",
        "example": {
          "name": "apaleo Summer Festival 2023",
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 1",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
            "isVirtual": false
          },
          "propertyIds": [
            "MUC"
          ]
        }
      },
      "CreatePaymentAccountModel": {
        "title": "CreatePaymentAccountModel",
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The account number (e.g. masked credit card number or last 4 digits)"
          },
          "accountHolder": {
            "type": "string",
            "description": "The account holder (e.g. card holder)"
          },
          "expiryMonth": {
            "type": "string",
            "description": "The credit card's expiration month"
          },
          "expiryYear": {
            "type": "string",
            "description": "The credit card's expiration year"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method (e.g. visa)"
          },
          "payerEmail": {
            "type": "string",
            "description": "The email address of the shopper / customer"
          },
          "payerReference": {
            "type": "string",
            "description": "The reference used to uniquely identify the shopper (e.g. user ID or account ID). Used for recurring payments"
          },
          "isVirtual": {
            "type": "boolean",
            "description": "Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false'"
          },
          "inactiveReason": {
            "type": "string",
            "description": "A reason why account is inactive when PayerReference was not provided"
          }
        }
      },
      "CreateReservationModel": {
        "title": "CreateReservationModel",
        "required": [
          "arrival",
          "departure",
          "adults",
          "channelCode",
          "timeSlices"
        ],
        "type": "object",
        "properties": {
          "arrival": {
            "type": "string",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "departure": {
            "type": "string",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ages of the children"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "guestComment": {
            "type": "string",
            "description": "Additional information and comments by the guest"
          },
          "externalCode": {
            "type": "string",
            "description": "Code in some system"
          },
          "channelCode": {
            "$ref": "#/components/schemas/ChannelCode"
          },
          "source": {
            "type": "string",
            "description": "Source of the reservation"
          },
          "primaryGuest": {
            "$ref": "#/components/schemas/GuestModel"
          },
          "additionalGuests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestModel"
            },
            "description": "Additional guests of the reservation."
          },
          "guaranteeType": {
            "$ref": "#/components/schemas/GuaranteeType"
          },
          "travelPurpose": {
            "$ref": "#/components/schemas/TravelPurpose"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReservationTimeSliceModel"
            },
            "description": "Gross prices including services and taxes for each time slice. They will be applied to the reservation timeslices\r\nin the order specified from arrival to departure"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookReservationServiceModel"
            },
            "description": "Additional services (extras, add-ons) that should be added to the reservation"
          },
          "companyId": {
            "type": "string",
            "description": "Set this if this reservation belongs to a company"
          },
          "corporateCode": {
            "type": "string",
            "description": "Corporate code provided during creation. Used to find offers during amend."
          },
          "prePaymentAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "commission": {
            "$ref": "#/components/schemas/CommissionModel"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer"
          }
        },
        "description": "With this request you can create a reservation"
      },
      "CreateReservationTimeSliceModel": {
        "title": "CreateReservationTimeSliceModel",
        "required": [
          "ratePlanId"
        ],
        "type": "object",
        "properties": {
          "ratePlanId": {
            "type": "string",
            "description": "The rate plan id for this time slice"
          },
          "totalAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "Date": {
        "title": "Date",
        "required": [
          "serviceDate"
        ],
        "type": "object",
        "properties": {
          "serviceDate": {
            "type": "string",
            "description": "The date the service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The number of services to book for this date. It defaults to the service offer count when not specified.",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "DesiredStayDetailsModel": {
        "title": "DesiredStayDetailsModel",
        "required": [
          "arrival",
          "departure",
          "adults",
          "timeSlices"
        ],
        "type": "object",
        "properties": {
          "arrival": {
            "type": "string",
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "departure": {
            "type": "string",
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ages of the children"
          },
          "requote": {
            "type": "boolean",
            "description": "Whether the prices for time slices with no change to the rate plan should be re-quoted based on current prices, or if\r\nonly additions like change of number of adults should be calculated. Defaults to 'false'."
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesiredTimeSliceModel"
            },
            "description": "The list of time slices"
          }
        },
        "example": {
          "arrival": "2022-04-30T17:00:00+02:00",
          "departure": "2022-05-02T11:00:00+02:00",
          "adults": 1,
          "childrenAges": [
            6
          ],
          "requote": false,
          "timeSlices": [
            {
              "ratePlanId": "MUC-NONREF-DBL",
              "totalGrossAmount": {
                "amount": 86,
                "currency": "EUR"
              }
            },
            {
              "ratePlanId": "MUC-NONREF-DBL",
              "totalGrossAmount": {
                "amount": 101,
                "currency": "EUR"
              }
            }
          ]
        }
      },
      "DesiredTimeSliceModel": {
        "title": "DesiredTimeSliceModel",
        "required": [
          "ratePlanId"
        ],
        "type": "object",
        "properties": {
          "ratePlanId": {
            "type": "string",
            "description": "The rate plan id for this time slice"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "EmbeddedCompanyModel": {
        "title": "EmbeddedCompanyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The company ID"
          },
          "code": {
            "type": "string",
            "description": "The code of the company"
          },
          "name": {
            "type": "string",
            "description": "The name of the company"
          },
          "canCheckOutOnAr": {
            "type": "boolean",
            "description": "Whether or not the company can check out on AR"
          }
        }
      },
      "EmbeddedGroupModel": {
        "title": "EmbeddedGroupModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group booking id"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          }
        }
      },
      "EmbeddedPropertyModel": {
        "title": "EmbeddedPropertyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The property id"
          },
          "code": {
            "type": "string",
            "description": "The code for the property that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the property"
          },
          "description": {
            "type": "string",
            "description": "The description for the property"
          }
        }
      },
      "EmbeddedRatePlanModel": {
        "title": "EmbeddedRatePlanModel",
        "required": [
          "id",
          "isSubjectToCityTax"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rate plan id"
          },
          "code": {
            "type": "string",
            "description": "The code for the rate plan that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "string",
            "description": "The description for the rate plan"
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not"
          }
        }
      },
      "EmbeddedServiceModel": {
        "title": "EmbeddedServiceModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The service id"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "name": {
            "type": "string",
            "description": "The name for the service"
          },
          "description": {
            "type": "string",
            "description": "The description for the service"
          }
        }
      },
      "EmbeddedUnitGroupModel": {
        "title": "EmbeddedUnitGroupModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit group id"
          },
          "code": {
            "type": "string",
            "description": "The code for the unit group that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit group"
          },
          "description": {
            "type": "string",
            "description": "The description for the unit group"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          }
        }
      },
      "EmbeddedUnitModel": {
        "title": "EmbeddedUnitModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit id"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit"
          },
          "description": {
            "type": "string",
            "description": "The description for the unit"
          },
          "unitGroupId": {
            "type": "string",
            "description": "The unit group id"
          }
        }
      },
      "GroupBlockModel": {
        "title": "GroupBlockModel",
        "required": [
          "id",
          "status",
          "property",
          "ratePlan",
          "unitGroup",
          "grossDailyRate",
          "from",
          "to",
          "blockedUnits",
          "pickedReservations",
          "created",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Block id"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "grossDailyRate": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "from": {
            "type": "string",
            "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "blockedUnits": {
            "type": "integer",
            "description": "Number of units blocked",
            "format": "int32"
          },
          "pickedReservations": {
            "type": "integer",
            "description": "Number of reservations already picked from this block",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          }
        }
      },
      "GroupCreatedModel": {
        "title": "GroupCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of newly created group booking"
          }
        },
        "example": {
          "id": "XPGMSXGF"
        }
      },
      "GroupItemModel": {
        "title": "GroupItemModel",
        "required": [
          "id",
          "name",
          "created",
          "modified",
          "propertyIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group id"
          },
          "from": {
            "type": "string",
            "description": "Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comment by the booker"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupBlockModel"
            },
            "description": "Blocks within this group"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelGroupActionNotAllowedGroupActionReason"
            },
            "description": "The list of actions for this group"
          },
          "propertyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of property ids this group belongs to"
          }
        }
      },
      "GroupListModel": {
        "title": "GroupListModel",
        "required": [
          "groups",
          "count"
        ],
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupItemModel"
            },
            "description": ""
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "GroupModel": {
        "title": "GroupModel",
        "required": [
          "id",
          "name",
          "created",
          "modified",
          "propertyIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group id"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "from": {
            "type": "string",
            "description": "Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "bookerComment": {
            "type": "string",
            "description": "Additional information and comment by the booker"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupBlockModel"
            },
            "description": "Blocks within this group"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelGroupActionNotAllowedGroupActionReason"
            },
            "description": "The list of actions for this group"
          },
          "propertyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of property ids this group belongs to"
          }
        },
        "example": {
          "id": "XPGMSXGF",
          "name": "apaleo Summer Festival 2023",
          "from": "2022-05-03T13:46:24.7698564+02:00",
          "to": "2022-05-10T13:46:24.7698564+02:00",
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 5",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "isVirtual": false,
            "isActive": false
          },
          "created": "0001-01-01T00:00:00Z",
          "modified": "0001-01-01T00:00:00Z",
          "blocks": [
            {
              "id": "MUC-HSGTDG",
              "status": "Tentative",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_SGL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard",
                "type": "BedRoom"
              },
              "grossDailyRate": {
                "amount": 160,
                "currency": "EUR"
              },
              "from": "2022-05-03T13:46:24.7698564+02:00",
              "to": "2022-05-08T13:46:24.7698564+02:00",
              "blockedUnits": 10,
              "pickedReservations": 0,
              "created": "2022-04-28T13:46:24.7698564+02:00",
              "modified": "2022-04-28T13:46:24.7698564+02:00"
            },
            {
              "id": "MUC-JAIULS",
              "status": "Definite",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-DBL",
                "code": "DBL",
                "name": "Double",
                "description": "Double",
                "type": "BedRoom"
              },
              "grossDailyRate": {
                "amount": 190,
                "currency": "EUR"
              },
              "from": "2022-05-04T13:46:24.7698564+02:00",
              "to": "2022-05-10T13:46:24.7698564+02:00",
              "blockedUnits": 8,
              "pickedReservations": 3,
              "created": "2022-04-28T13:46:24.7698564+02:00",
              "modified": "2022-04-28T13:46:24.7698564+02:00"
            }
          ],
          "propertyIds": [
            "MUC"
          ]
        }
      },
      "GuestModel": {
        "title": "GuestModel",
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/Title"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the guest"
          },
          "middleInitial": {
            "type": "string",
            "description": "Middle initial of the guest"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the guest"
          },
          "email": {
            "type": "string",
            "description": "Email address of the guest"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the guest"
          },
          "address": {
            "$ref": "#/components/schemas/PersonAddressModel"
          },
          "nationalityCountryCode": {
            "type": "string",
            "description": "The guest's nationality, in ISO 3166-1 alpha-2 code"
          },
          "identificationNumber": {
            "type": "string",
            "description": "The guest's identification number for the given identificationType."
          },
          "identificationIssueDate": {
            "type": "string",
            "description": "The issue date of the guest's identification document.",
            "format": "date",
            "example": "2020-10-10"
          },
          "identificationType": {
            "$ref": "#/components/schemas/IdentificationType"
          },
          "company": {
            "$ref": "#/components/schemas/PersonCompanyModel"
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Two-letter code (ISO Alpha-2) of a language preferred for contact"
          },
          "birthDate": {
            "type": "string",
            "description": "Guest's birthdate",
            "format": "date",
            "example": "2020-10-10"
          },
          "birthPlace": {
            "type": "string",
            "description": "Guest's place of birth"
          }
        }
      },
      "MessageItemCollection": {
        "title": "MessageItemCollection",
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "MonetaryValueModel": {
        "title": "MonetaryValueModel",
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "OfferCancellationFeeModel": {
        "title": "OfferCancellationFeeModel",
        "required": [
          "code",
          "name",
          "description",
          "dueDateTime",
          "fee"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the cancellation policy applied"
          },
          "name": {
            "type": "string",
            "description": "The name of the cancellation policy applied"
          },
          "description": {
            "type": "string",
            "description": "The description of the cancellation policy applied"
          },
          "dueDateTime": {
            "type": "string",
            "description": "The date and time the cancellation fee will be due. After that time this fee will\r\nbe charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "fee": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "OfferCityTaxItemModel": {
        "title": "OfferCityTaxItemModel",
        "required": [
          "serviceDate",
          "amount"
        ],
        "type": "object",
        "properties": {
          "serviceDate": {
            "type": "string",
            "description": "The date for this city tax",
            "format": "date",
            "example": "2020-10-10"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          }
        }
      },
      "OfferCityTaxModel": {
        "title": "OfferCityTaxModel",
        "required": [
          "id",
          "code",
          "name",
          "totalGrossAmount",
          "dates"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the city tax"
          },
          "code": {
            "type": "string",
            "description": "The code of the city tax"
          },
          "name": {
            "type": "string",
            "description": "The name for the city tax"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCityTaxItemModel"
            },
            "description": "Split per day for the city tax"
          }
        }
      },
      "OfferFeeModel": {
        "title": "OfferFeeModel",
        "required": [
          "id",
          "code",
          "name",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The fee id"
          },
          "code": {
            "type": "string",
            "description": "The code for the fee"
          },
          "name": {
            "type": "string",
            "description": "The name for the fee"
          },
          "totalAmount": {
            "$ref": "#/components/schemas/AmountModel"
          }
        }
      },
      "OfferModel": {
        "title": "OfferModel",
        "required": [
          "arrival",
          "departure",
          "unitGroup",
          "minGuaranteeType",
          "availableUnits",
          "ratePlan",
          "totalGrossAmount",
          "cancellationFee",
          "noShowFee",
          "timeSlices",
          "taxDetails",
          "isCorporate",
          "prePaymentAmount"
        ],
        "type": "object",
        "properties": {
          "arrival": {
            "type": "string",
            "description": "The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/OfferUnitGroupModel"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The number of available units for that offer",
            "format": "int32"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "cancellationFee": {
            "$ref": "#/components/schemas/OfferCancellationFeeModel"
          },
          "noShowFee": {
            "$ref": "#/components/schemas/OfferNoShowFeeModel"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTimeSliceModel"
            },
            "description": "The breakdown for each time slice for this offer"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOfferModel"
            },
            "description": "The list of the mandatory services for this offer. Such services will be automatically booked when booking this offer"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferFeeModel"
            },
            "description": "The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.StayOffer.OfferModel.TotalGrossAmount when creating the booking"
          },
          "taxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            },
            "description": "Tax breakdown, displaying net and tax amount for each VAT type"
          },
          "validationMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferValidationMessageModel"
            },
            "description": "Validation rules that were applied to the offer and show the reason why the offer is not bookable"
          },
          "companyId": {
            "type": "string",
            "description": "ID of the company the offer is created for"
          },
          "corporateCode": {
            "type": "string",
            "description": "The corporate rate code the offer is created for"
          },
          "isCorporate": {
            "type": "boolean",
            "description": "Whether the offer is for a corporate rate plan"
          },
          "prePaymentAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "cityTax": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "cityTaxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCityTaxModel"
            },
            "description": "Details of city taxes for this offer, if any"
          }
        }
      },
      "OfferNoShowFeeModel": {
        "title": "OfferNoShowFeeModel",
        "required": [
          "code",
          "name",
          "description",
          "fee"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the no-show policy applied"
          },
          "name": {
            "type": "string",
            "description": "The name of the no-show policy applied"
          },
          "description": {
            "type": "string",
            "description": "The description of the no-show policy applied"
          },
          "fee": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "OfferServiceModel": {
        "title": "OfferServiceModel",
        "required": [
          "service",
          "serviceDate",
          "count",
          "amount",
          "pricingMode"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/EmbeddedServiceModel"
          },
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
            "format": "int32"
          },
          "availableCount": {
            "type": "integer",
            "description": "If set - the number of services available (only for the limited service).\r\nIf not set - the service is unlimited.",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "pricingMode": {
            "$ref": "#/components/schemas/PricingMode"
          }
        }
      },
      "OfferTimeSliceModel": {
        "title": "OfferTimeSliceModel",
        "required": [
          "from",
          "to",
          "availableUnits",
          "baseAmount",
          "totalGrossAmount"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The number of available units for that time slice",
            "format": "int32"
          },
          "baseAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferServiceModel"
            },
            "description": "The breakdown for services included in the offer"
          }
        }
      },
      "OfferUnitGroupModel": {
        "title": "OfferUnitGroupModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "maxPersons",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit group id"
          },
          "code": {
            "type": "string",
            "description": "The code for the unit group that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit group"
          },
          "description": {
            "type": "string",
            "description": "The description for the unit group"
          },
          "maxPersons": {
            "type": "integer",
            "description": "Maximum number of persons for the unit group",
            "format": "int32"
          },
          "rank": {
            "type": "integer",
            "description": "The unit group rank",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          }
        }
      },
      "OfferValidationMessageModel": {
        "title": "OfferValidationMessageModel",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Code3"
          },
          "message": {
            "type": "string",
            "description": "The message description"
          }
        }
      },
      "Operation": {
        "title": "Operation",
        "type": "object",
        "properties": {
          "value": {},
          "path": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "from": {
            "type": "string"
          }
        }
      },
      "PayableAmountModel": {
        "title": "PayableAmountModel",
        "required": [
          "guest"
        ],
        "type": "object",
        "properties": {
          "guest": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "PaymentAccountModel": {
        "title": "PaymentAccountModel",
        "required": [
          "isActive"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The account number (e.g. masked credit card number or last 4 digits)"
          },
          "accountHolder": {
            "type": "string",
            "description": "The account holder (e.g. card holder)"
          },
          "expiryMonth": {
            "type": "string",
            "description": "The credit card's expiration month"
          },
          "expiryYear": {
            "type": "string",
            "description": "The credit card's expiration year"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method (e.g. visa)"
          },
          "payerEmail": {
            "type": "string",
            "description": "The email address of the shopper / customer"
          },
          "payerReference": {
            "type": "string",
            "description": "The payer reference. It is used to make recurring captures and its usage is allowed only in the scope of the booking.\r\nFor the reason above this is a write-only field."
          },
          "isVirtual": {
            "type": "boolean",
            "description": "Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false'"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the payment account can be used for capturing payments. A payment account is active, when it has a valid payer reference set"
          },
          "inactiveReason": {
            "type": "string",
            "description": "A reason why account is inactive"
          }
        }
      },
      "PeriodModel": {
        "title": "PeriodModel",
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "The number of hours within the period",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "description": "The number of days within the period",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "description": "The number of months within the period",
            "format": "int32"
          }
        }
      },
      "PerOccupancyPriceItemModel": {
        "title": "PerOccupancyPriceItemModel",
        "required": [
          "adults",
          "price"
        ],
        "type": "object",
        "properties": {
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "price": {
            "$ref": "#/components/schemas/PriceModel"
          }
        }
      },
      "PersonAddressModel": {
        "title": "PersonAddressModel",
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "PersonCompanyModel": {
        "title": "PersonCompanyModel",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the company"
          },
          "taxId": {
            "type": "string",
            "description": "Tax or Vat ID of the company"
          }
        }
      },
      "PickUpReservationModel": {
        "title": "PickUpReservationModel",
        "required": [
          "blockId",
          "arrival",
          "departure",
          "adults"
        ],
        "type": "object",
        "properties": {
          "blockId": {
            "type": "string",
            "description": "ID of the block"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookReservationServiceModel"
            },
            "description": "Additional services (extras, add-ons) that should be added to the reservation"
          },
          "arrival": {
            "type": "string",
            "description": "Date of arrival and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "departure": {
            "type": "string",
            "description": "Date of departure and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ages of the children"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "guestComment": {
            "type": "string",
            "description": "Additional information and comment by the guest"
          },
          "primaryGuest": {
            "$ref": "#/components/schemas/GuestModel"
          },
          "additionalGuests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestModel"
            },
            "description": "Additional guests of the reservation."
          },
          "travelPurpose": {
            "$ref": "#/components/schemas/TravelPurpose1"
          }
        },
        "description": "With this request you can pick up a reservation"
      },
      "PickUpReservationsModel": {
        "title": "PickUpReservationsModel",
        "required": [
          "reservations"
        ],
        "type": "object",
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PickUpReservationModel"
            },
            "description": "List of reservations to pick up to the existing group booking"
          }
        },
        "description": "With this request you can pick up reservations to an existing group booking",
        "example": {
          "reservations": [
            {
              "blockId": "MUC-QJNXJR",
              "arrival": "2022-04-30",
              "departure": "2022-05-02",
              "adults": 1,
              "comment": "I need a wake up service",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                },
                "company": {
                  "name": "Company GmbH",
                  "taxId": "1442"
                }
              }
            },
            {
              "blockId": "MUC-WKMCKT",
              "arrival": "2022-05-01",
              "departure": "2022-05-03",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              }
            }
          ]
        }
      },
      "PriceModel": {
        "title": "PriceModel",
        "required": [
          "grossAmount",
          "beforeTax",
          "afterTax",
          "taxes",
          "currency"
        ],
        "type": "object",
        "properties": {
          "grossAmount": {
            "type": "number",
            "description": "Price including all included services and VAT - <b>DEPRECATED: This field will be removed soon, use BeforeTax + Taxes.Tax instead</b>"
          },
          "beforeTax": {
            "type": "number",
            "description": "Price including all included services without VAT or any other taxes like city tax"
          },
          "afterTax": {
            "type": "number",
            "description": "Price including all included services, VAT and any other taxes like city tax"
          },
          "taxes": {
            "$ref": "#/components/schemas/TaxesModel"
          },
          "currency": {
            "type": "string",
            "description": "The currency for all prices and tax details"
          }
        },
        "example": {
          "grossAmount": 100,
          "beforeTax": 91.57,
          "afterTax": 101.71,
          "taxes": {
            "tax": 8.43,
            "cityTax": 1.71
          },
          "currency": "USD"
        }
      },
      "PropertyValueModel": {
        "title": "PropertyValueModel",
        "required": [
          "property",
          "totalGrossAmount",
          "balance"
        ],
        "type": "object",
        "properties": {
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "balance": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "RateRestrictionsModel": {
        "title": "RateRestrictionsModel",
        "required": [
          "closed",
          "closedOnArrival",
          "closedOnDeparture"
        ],
        "type": "object",
        "properties": {
          "minLengthOfStay": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The minimum length of stay in order to book the rate. If at least this number\r\nof time slices are covered by the stay duration the rate will be offered.",
            "format": "int32"
          },
          "maxLengthOfStay": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum length of stay in order to book the rate. If not more than this number\r\nof time slices are covered by the stay duration the rate will be offered.",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "description": "Whether the rate can be booked for a stay-through reservation"
          },
          "closedOnArrival": {
            "type": "boolean",
            "description": "Whether the rate can be booked on the reservation's arrival date"
          },
          "closedOnDeparture": {
            "type": "boolean",
            "description": "Whether the rate can be booked on the reservation's departure date"
          }
        }
      },
      "ReplaceBlockModel": {
        "title": "ReplaceBlockModel",
        "required": [
          "from",
          "to",
          "grossDailyRate",
          "timeSlices"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "to": {
            "type": "string",
            "description": "End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "grossDailyRate": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateBlockTimeSliceModel"
            },
            "description": "The list of time slices"
          }
        },
        "example": {
          "from": "2022-05-03",
          "to": "2022-05-06",
          "grossDailyRate": {
            "amount": 160,
            "currency": "EUR"
          },
          "timeSlices": [
            {
              "blockedUnits": 3
            },
            {
              "blockedUnits": 0
            },
            {
              "blockedUnits": 7
            }
          ]
        }
      },
      "ReservationAssignedUnitModel": {
        "title": "ReservationAssignedUnitModel",
        "required": [
          "unit",
          "timeRanges"
        ],
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          },
          "timeRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationAssignedUnitTimeRangeModel"
            },
            "description": "The time ranges for which the unit is assigned to the reservation"
          }
        }
      },
      "ReservationAssignedUnitTimeRangeModel": {
        "title": "ReservationAssignedUnitTimeRangeModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The start date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The end date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          }
        }
      },
      "ReservationCancellationFeeModel": {
        "title": "ReservationCancellationFeeModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "dueDateTime",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the cancellation policy applied"
          },
          "code": {
            "type": "string",
            "description": "The code of the cancellation policy applied"
          },
          "name": {
            "type": "string",
            "description": "The name of the cancellation policy applied"
          },
          "description": {
            "type": "string",
            "description": "The description of the cancellation policy applied"
          },
          "dueDateTime": {
            "type": "string",
            "description": "The date and time the cancellation fee will be due. After that time this fee will\r\nbe charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "fee": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "ReservationCreatedModel": {
        "title": "ReservationCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the reservation"
          }
        }
      },
      "ReservationItemModel": {
        "title": "ReservationItemModel",
        "required": [
          "id",
          "bookingId",
          "status",
          "property",
          "ratePlan",
          "unitGroup",
          "totalGrossAmount",
          "arrival",
          "departure",
          "created",
          "modified",
          "adults",
          "channelCode",
          "guaranteeType",
          "cancellationFee",
          "noShowFee",
          "balance",
          "hasCityTax"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reservation id"
          },
          "bookingId": {
            "type": "string",
            "description": "Booking id"
          },
          "blockId": {
            "type": "string",
            "description": "Block id"
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group"
          },
          "status": {
            "$ref": "#/components/schemas/Status2"
          },
          "checkInTime": {
            "type": "string",
            "description": "Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "checkOutTime": {
            "type": "string",
            "description": "Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "cancellationTime": {
            "type": "string",
            "description": "Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "noShowTime": {
            "type": "string",
            "description": "Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "arrival": {
            "type": "string",
            "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ages of the children"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "guestComment": {
            "type": "string",
            "description": "Additional information and comment by the guest"
          },
          "externalCode": {
            "type": "string",
            "description": "Code in external system"
          },
          "channelCode": {
            "$ref": "#/components/schemas/ChannelCode"
          },
          "source": {
            "type": "string",
            "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)"
          },
          "primaryGuest": {
            "$ref": "#/components/schemas/GuestModel"
          },
          "additionalGuests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestModel"
            },
            "description": "Additional guests of the reservation."
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "guaranteeType": {
            "$ref": "#/components/schemas/GuaranteeType1"
          },
          "cancellationFee": {
            "$ref": "#/components/schemas/ReservationCancellationFeeModel"
          },
          "noShowFee": {
            "$ref": "#/components/schemas/ReservationNoShowFeeModel"
          },
          "travelPurpose": {
            "$ref": "#/components/schemas/TravelPurpose1"
          },
          "balance": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "assignedUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationAssignedUnitModel"
            },
            "description": "The list of units assigned to this reservation"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSliceModel"
            },
            "description": "The list of time slices with the reserved units / unit groups for the stay"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationServiceItemModel"
            },
            "description": "The list of additional services (extras, add-ons) reserved for the stay"
          },
          "validationMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationValidationMessageModel"
            },
            "description": "Validation rules are applied to reservations during their lifetime.\r\nFor example a reservation that was created while the house or unit group is already fully booked.\r\nWhenever a rule was or is currently violated, a validation message will be added to this list.\r\nThey can be deleted whenever the hotel staff worked them off."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelReservationActionNotAllowedReservationActionReason"
            },
            "description": "The list of actions for this reservation"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          },
          "corporateCode": {
            "type": "string",
            "description": "Corporate code provided during creation. Used to find offers during amend."
          },
          "allFoliosHaveInvoice": {
            "type": "boolean",
            "description": "Whether all folios of a reservation have an invoice"
          },
          "hasCityTax": {
            "type": "boolean",
            "description": "Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured"
          },
          "commission": {
            "$ref": "#/components/schemas/CommissionModel"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer used to create the reservation"
          }
        }
      },
      "ReservationListModel": {
        "title": "ReservationListModel",
        "required": [
          "reservations",
          "count"
        ],
        "type": "object",
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationItemModel"
            },
            "description": "List of reservations"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "ReservationModel": {
        "title": "ReservationModel",
        "required": [
          "id",
          "bookingId",
          "status",
          "property",
          "ratePlan",
          "unitGroup",
          "totalGrossAmount",
          "arrival",
          "departure",
          "created",
          "modified",
          "adults",
          "channelCode",
          "guaranteeType",
          "cancellationFee",
          "noShowFee",
          "balance",
          "taxDetails",
          "hasCityTax",
          "payableAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reservation id"
          },
          "bookingId": {
            "type": "string",
            "description": "Booking id"
          },
          "blockId": {
            "type": "string",
            "description": "Block id"
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group"
          },
          "status": {
            "$ref": "#/components/schemas/Status2"
          },
          "checkInTime": {
            "type": "string",
            "description": "Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "checkOutTime": {
            "type": "string",
            "description": "Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "cancellationTime": {
            "type": "string",
            "description": "Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "noShowTime": {
            "type": "string",
            "description": "Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "arrival": {
            "type": "string",
            "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "adults": {
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "childrenAges": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ages of the children"
          },
          "comment": {
            "type": "string",
            "description": "Additional information and comments"
          },
          "guestComment": {
            "type": "string",
            "description": "Additional information and comment by the guest"
          },
          "externalCode": {
            "type": "string",
            "description": "Code in external system"
          },
          "channelCode": {
            "$ref": "#/components/schemas/ChannelCode"
          },
          "source": {
            "type": "string",
            "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)"
          },
          "primaryGuest": {
            "$ref": "#/components/schemas/GuestModel"
          },
          "additionalGuests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestModel"
            },
            "description": "Additional guests of the reservation."
          },
          "booker": {
            "$ref": "#/components/schemas/BookerModel"
          },
          "paymentAccount": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSliceModel"
            },
            "description": "The list of time slices with the reserved units / unit groups for the stay"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationServiceItemModel"
            },
            "description": "The list of additional services (extras, add-ons) reserved for the stay"
          },
          "guaranteeType": {
            "$ref": "#/components/schemas/GuaranteeType1"
          },
          "cancellationFee": {
            "$ref": "#/components/schemas/ReservationCancellationFeeModel"
          },
          "noShowFee": {
            "$ref": "#/components/schemas/ReservationNoShowFeeModel"
          },
          "travelPurpose": {
            "$ref": "#/components/schemas/TravelPurpose1"
          },
          "balance": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "assignedUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationAssignedUnitModel"
            },
            "description": "The list of units assigned to this reservation"
          },
          "validationMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationValidationMessageModel"
            },
            "description": "Validation rules are applied to reservations during their lifetime.\r\nFor example a reservation that was created while the house or unit group is already fully booked.\r\nWhenever a rule was or is currently violated, a validation message will be added to this list.\r\nThey can be deleted whenever the hotel staff worked them off."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelReservationActionNotAllowedReservationActionReason"
            },
            "description": "The list of actions for this reservation"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          },
          "corporateCode": {
            "type": "string",
            "description": "Corporate code provided during creation. Used to find offers during amend."
          },
          "allFoliosHaveInvoice": {
            "type": "boolean",
            "description": "Whether all folios of a reservation have an invoice"
          },
          "taxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            },
            "description": "Tax breakdown, displaying net and tax amount for each VAT type"
          },
          "hasCityTax": {
            "type": "boolean",
            "description": "Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured"
          },
          "commission": {
            "$ref": "#/components/schemas/CommissionModel"
          },
          "promoCode": {
            "type": "string",
            "description": "The promo code associated with a certain special offer used to create the reservation"
          },
          "payableAmount": {
            "$ref": "#/components/schemas/PayableAmountModel"
          }
        }
      },
      "ReservationNoShowFeeModel": {
        "title": "ReservationNoShowFeeModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the no-show policy applied"
          },
          "code": {
            "type": "string",
            "description": "The code of the no-show policy applied"
          },
          "name": {
            "type": "string",
            "description": "The name of the no-show policy applied"
          },
          "description": {
            "type": "string",
            "description": "The description of the no-show policy applied"
          },
          "fee": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "ReservationsCreatedModel": {
        "title": "ReservationsCreatedModel",
        "required": [
          "reservationIds"
        ],
        "type": "object",
        "properties": {
          "reservationIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationCreatedModel"
            },
            "description": "List of ids for newly created reservations"
          }
        },
        "example": {
          "reservationIds": [
            {
              "id": "XPGMSXGF-1"
            },
            {
              "id": "XPGMSXGF-2"
            }
          ]
        }
      },
      "ReservationServiceItemModel": {
        "title": "ReservationServiceItemModel",
        "required": [
          "service",
          "totalAmount",
          "dates"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/ServiceModel"
          },
          "totalAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDateItemModel"
            },
            "description": "The dates the service will be delivered with its price"
          }
        }
      },
      "ReservationServiceListModel": {
        "title": "ReservationServiceListModel",
        "required": [
          "services",
          "count"
        ],
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationServiceItemModel"
            },
            "description": "The list of services booked for the reservation"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "services": [
            {
              "service": {
                "id": "MUC-YOGA",
                "code": "YOGA",
                "name": "Sun Salutation",
                "description": "Start the day with a private Yoga session with one of our certified trainers.",
                "pricingUnit": "Person",
                "defaultGrossPrice": {
                  "amount": 35,
                  "currency": "EUR"
                }
              },
              "totalAmount": {
                "grossAmount": 30,
                "netAmount": 25,
                "vatType": "Normal",
                "vatPercent": 19,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2022-04-28",
                  "count": 1,
                  "amount": {
                    "grossAmount": 30,
                    "netAmount": 25,
                    "vatType": "Normal",
                    "vatPercent": 19,
                    "currency": "EUR"
                  },
                  "isMandatory": false
                }
              ]
            }
          ],
          "count": 1
        }
      },
      "ReservationServiceModel": {
        "title": "ReservationServiceModel",
        "required": [
          "service",
          "serviceDate",
          "count",
          "amount",
          "bookedAsExtra"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/EmbeddedServiceModel"
          },
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The count of booked services",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "bookedAsExtra": {
            "type": "boolean",
            "description": "Whether this service is already booked as extra"
          }
        }
      },
      "ReservationStayOfferModel": {
        "title": "ReservationStayOfferModel",
        "required": [
          "arrival",
          "departure",
          "minGuaranteeType",
          "availableUnits",
          "totalGrossAmount",
          "cancellationFee",
          "noShowFee",
          "timeSlices",
          "taxDetails",
          "isCorporate"
        ],
        "type": "object",
        "properties": {
          "arrival": {
            "type": "string",
            "description": "The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The number of available units for that offer",
            "format": "int32"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "cancellationFee": {
            "$ref": "#/components/schemas/OfferCancellationFeeModel"
          },
          "noShowFee": {
            "$ref": "#/components/schemas/OfferNoShowFeeModel"
          },
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationStayOfferTimeSliceModel"
            },
            "description": "The breakdown for each time slice for this offer"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOfferModel"
            },
            "description": "The breakdown for extra services reserved for this offer"
          },
          "taxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            },
            "description": "Tax breakdown, displaying net and tax amount for each VAT type"
          },
          "validationMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferValidationMessageModel"
            },
            "description": "Validation rules that were applied to the offer and show the reason why the offer is not bookable"
          },
          "companyId": {
            "type": "string",
            "description": "ID of the company the offer is created for"
          },
          "corporateCode": {
            "type": "string",
            "description": "The corporate rate code the offer is created for"
          },
          "isCorporate": {
            "type": "boolean",
            "description": "Whether the offer is for a corporate rate plan"
          },
          "cityTax": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "cityTaxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCityTaxModel"
            },
            "description": "Details of city taxes for this offer, if any"
          }
        }
      },
      "ReservationStayOfferServiceModel": {
        "title": "ReservationStayOfferServiceModel",
        "required": [
          "service",
          "serviceDate",
          "count",
          "amount",
          "bookedAsExtra",
          "pricingMode"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/EmbeddedServiceModel"
          },
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
            "format": "int32"
          },
          "availableCount": {
            "type": "integer",
            "description": "If set - the number of services available (only for the limited service).\r\nIf not set - the service is unlimited.",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "bookedAsExtra": {
            "type": "boolean",
            "description": "Whether this service is already booked as extra"
          },
          "pricingMode": {
            "$ref": "#/components/schemas/PricingMode"
          }
        }
      },
      "ReservationStayOffersModel": {
        "title": "ReservationStayOffersModel",
        "required": [
          "property",
          "offers"
        ],
        "type": "object",
        "properties": {
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationStayOfferModel"
            },
            "description": "List of offered unit groups with rates"
          }
        }
      },
      "ReservationStayOfferTimeSliceModel": {
        "title": "ReservationStayOfferTimeSliceModel",
        "required": [
          "from",
          "to",
          "ratePlan",
          "unitGroup",
          "baseAmount",
          "totalGrossAmount"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/OfferUnitGroupModel"
          },
          "baseAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationStayOfferServiceModel"
            },
            "description": "The breakdown for services included in the offer"
          }
        }
      },
      "ReservationValidationMessageModel": {
        "title": "ReservationValidationMessageModel",
        "required": [
          "category",
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "code": {
            "$ref": "#/components/schemas/Code4"
          },
          "message": {
            "type": "string",
            "description": "The message description"
          }
        }
      },
      "ServiceDateItemModel": {
        "title": "ServiceDateItemModel",
        "required": [
          "serviceDate",
          "count",
          "amount",
          "isMandatory"
        ],
        "type": "object",
        "properties": {
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The count of booked services",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.\r\nThey are marked as mandatory and they cannot be removed."
          }
        }
      },
      "ServiceModel": {
        "title": "ServiceModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "pricingUnit",
          "defaultGrossPrice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The service id"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "name": {
            "type": "string",
            "description": "The name for the service"
          },
          "description": {
            "type": "string",
            "description": "The description for the service"
          },
          "pricingUnit": {
            "$ref": "#/components/schemas/PricingUnit"
          },
          "defaultGrossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "ServiceOfferItemModel": {
        "title": "ServiceOfferItemModel",
        "required": [
          "serviceDate",
          "amount",
          "isDefaultDate",
          "isMandatory"
        ],
        "type": "object",
        "properties": {
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "isDefaultDate": {
            "type": "boolean",
            "description": "Depending on the postNextDay setting of the service it will by default be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day\r\nare default dates and will have this flag set to true. Those are also the dates the service will be booked for if\r\nyou do not specify dates in the book-service call. Still, you can override this and also book the dates set to IsDefaultDate = false."
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.\r\nThey are marked as mandatory and they cannot be removed."
          },
          "availableCount": {
            "type": "integer",
            "description": "The number of services available.",
            "format": "int32"
          }
        }
      },
      "ServiceOfferModel": {
        "title": "ServiceOfferModel",
        "required": [
          "service",
          "count",
          "totalAmount",
          "prePaymentAmount",
          "dates"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/ServiceModel"
          },
          "count": {
            "type": "integer",
            "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
            "format": "int32"
          },
          "availableCount": {
            "type": "integer",
            "description": "The number of services available.",
            "format": "int32"
          },
          "totalAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "prePaymentAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferFeeModel"
            },
            "description": "The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.ServiceOffer.ServiceOfferModel.TotalAmount when booking the service"
          },
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOfferItemModel"
            },
            "description": "The dates the service will be delivered with its price"
          },
          "validationMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferValidationMessageModel"
            },
            "description": "Validation rules that were applied to the offer and show the reason why the offer is not bookable"
          }
        }
      },
      "ServiceOffersModel": {
        "title": "ServiceOffersModel",
        "required": [
          "services"
        ],
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOfferModel"
            },
            "description": ""
          }
        },
        "example": {
          "services": [
            {
              "service": {
                "id": "MUC-WLAN",
                "code": "WLAN",
                "name": "High-Speed WLAN",
                "description": "Upgrade the complimentary internet access to a high speed connection.",
                "pricingUnit": "Room",
                "defaultGrossPrice": {
                  "amount": 5,
                  "currency": "EUR"
                }
              },
              "count": 1,
              "availableCount": 2,
              "totalAmount": {
                "grossAmount": 20,
                "netAmount": 16.8,
                "vatType": "Normal",
                "vatPercent": 19,
                "currency": "EUR"
              },
              "prePaymentAmount": {
                "amount": 20,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2022-04-28",
                  "amount": {
                    "grossAmount": 10,
                    "netAmount": 8.4,
                    "vatType": "Normal",
                    "vatPercent": 19,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false,
                  "availableCount": 5
                },
                {
                  "serviceDate": "2022-04-29",
                  "amount": {
                    "grossAmount": 10,
                    "netAmount": 8.4,
                    "vatType": "Normal",
                    "vatPercent": 19,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false,
                  "availableCount": 2
                }
              ]
            },
            {
              "service": {
                "id": "MUC-YOGA",
                "code": "YOGA",
                "name": "Sun Salutation",
                "description": "Start the day with a private Yoga session with one of our certified trainers.",
                "pricingUnit": "Person",
                "defaultGrossPrice": {
                  "amount": 35,
                  "currency": "EUR"
                }
              },
              "count": 1,
              "totalAmount": {
                "grossAmount": 30,
                "netAmount": 25.2,
                "vatType": "Normal",
                "vatPercent": 19,
                "currency": "EUR"
              },
              "prePaymentAmount": {
                "amount": 30,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2022-04-29",
                  "amount": {
                    "grossAmount": 30,
                    "netAmount": 25.2,
                    "vatType": "Normal",
                    "vatPercent": 19,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false
                }
              ]
            }
          ]
        }
      },
      "SourceListModel": {
        "title": "SourceListModel",
        "required": [
          "sources"
        ],
        "type": "object",
        "properties": {
          "sources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sources."
          }
        },
        "example": {
          "sources": [
            "Booking.com",
            "Expedia"
          ]
        }
      },
      "StayOffersModel": {
        "title": "StayOffersModel",
        "required": [
          "property",
          "offers"
        ],
        "type": "object",
        "properties": {
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferModel"
            },
            "description": "List of offered unit groups with rates"
          }
        },
        "example": {
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "offers": [
            {
              "arrival": "2022-04-30T17:00:00+02:00",
              "departure": "2022-05-02T11:00:00+02:00",
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard",
                "maxPersons": 1,
                "rank": 2,
                "type": "BedRoom"
              },
              "minGuaranteeType": "PM6Hold",
              "availableUnits": 4,
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "totalGrossAmount": {
                "amount": 214,
                "currency": "EUR"
              },
              "cancellationFee": {
                "code": "FLEX",
                "name": "Flexible",
                "description": "Free cancellation.",
                "dueDateTime": "2022-04-30T17:00:00+02:00",
                "fee": {
                  "amount": 214,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 214,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2022-04-30T17:00:00+02:00",
                  "to": "2022-05-01T11:00:00+02:00",
                  "availableUnits": 4,
                  "baseAmount": {
                    "grossAmount": 59,
                    "netAmount": 55.14,
                    "vatType": "Reduced",
                    "vatPercent": 7,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 50,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 5,
                      "amount": {
                        "grossAmount": 10,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2022-05-01T11:00:00+02:00",
                  "to": "2022-05-02T11:00:00+02:00",
                  "availableUnits": 5,
                  "baseAmount": {
                    "grossAmount": 59,
                    "netAmount": 55.14,
                    "vatType": "Reduced",
                    "vatPercent": 7,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 50,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 5,
                      "amount": {
                        "grossAmount": 10,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 2,
                      "amount": {
                        "grossAmount": 25,
                        "netAmount": 21.01,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Reduced",
                  "vatPercent": 14,
                  "net": {
                    "amount": 100,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false,
              "prePaymentAmount": {
                "amount": 0,
                "currency": "EUR"
              },
              "cityTaxes": [
                {
                  "id": "MUC-TAX",
                  "code": "TAX",
                  "name": "City tax",
                  "totalGrossAmount": {
                    "amount": 119,
                    "currency": "EUR"
                  },
                  "dates": [
                    {
                      "serviceDate": "2021-08-27",
                      "amount": {
                        "grossAmount": 119,
                        "netAmount": 100,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "arrival": "2022-04-30T17:00:00+02:00",
              "departure": "2022-05-02T11:00:00+02:00",
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard",
                "maxPersons": 1,
                "rank": 2,
                "type": "BedRoom"
              },
              "minGuaranteeType": "Prepayment",
              "availableUnits": 4,
              "ratePlan": {
                "id": "MUC-FLEX-DBL",
                "code": "FLEX",
                "name": "Flexible",
                "description": "Flexible",
                "isSubjectToCityTax": false
              },
              "totalGrossAmount": {
                "amount": 321,
                "currency": "EUR"
              },
              "cancellationFee": {
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Full stay amount due 24 hours after booking.",
                "dueDateTime": "2022-04-29T13:46:24.7698564+02:00",
                "fee": {
                  "amount": 321,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 107,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2022-04-30T17:00:00+02:00",
                  "to": "2022-05-01T11:00:00+02:00",
                  "availableUnits": 4,
                  "baseAmount": {
                    "grossAmount": 124,
                    "netAmount": 115.89,
                    "vatType": "Reduced",
                    "vatPercent": 7,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 100,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 5,
                      "amount": {
                        "grossAmount": 10,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2022-05-01T11:00:00+02:00",
                  "to": "2022-05-02T11:00:00+02:00",
                  "availableUnits": 5,
                  "baseAmount": {
                    "grossAmount": 124,
                    "netAmount": 115.89,
                    "vatType": "Reduced",
                    "vatPercent": 7,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 100,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 5,
                      "amount": {
                        "grossAmount": 10,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2022-04-30",
                      "count": 1,
                      "availableCount": 2,
                      "amount": {
                        "grossAmount": 25,
                        "netAmount": 21.01,
                        "vatType": "Normal",
                        "vatPercent": 19,
                        "currency": "EUR"
                      },
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Reduced",
                  "vatPercent": 14,
                  "net": {
                    "amount": 100,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14,
                    "currency": "EUR"
                  }
                },
                {
                  "vatType": "Null",
                  "vatPercent": 0,
                  "net": {
                    "amount": 100,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 0,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false,
              "prePaymentAmount": {
                "amount": 321,
                "currency": "EUR"
              }
            }
          ]
        }
      },
      "TaxDetailModel": {
        "title": "TaxDetailModel",
        "required": [
          "vatType",
          "vatPercent",
          "net",
          "tax"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "vatPercent": {
            "type": "number"
          },
          "net": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "tax": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "TaxesModel": {
        "title": "TaxesModel",
        "required": [
          "tax",
          "cityTax"
        ],
        "type": "object",
        "properties": {
          "tax": {
            "type": "number",
            "description": "The amount of taxes, which are VAT or Sales Taxes depending on the country of the property"
          },
          "cityTax": {
            "type": "number",
            "description": "The amount of City Tax including VAT"
          }
        }
      },
      "TimeSliceItemModel": {
        "title": "TimeSliceItemModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSliceOfferItemModel"
            },
            "description": "List of offers for this time slice"
          }
        }
      },
      "TimeSliceListModel": {
        "title": "TimeSliceListModel",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "timeSlices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSliceItemModel"
            },
            "description": "List of time slices"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "timeSlices": [
            {
              "from": "2022-04-28T17:00:00+02:00",
              "to": "2022-04-29T11:00:00+02:00",
              "offers": [
                {
                  "unitGroup": {
                    "id": "MUC-SGL",
                    "code": "SGL",
                    "name": "Standard",
                    "description": "Standard",
                    "type": "BedRoom"
                  },
                  "minGuaranteeType": "PM6Hold",
                  "available": 4,
                  "restrictions": {
                    "minLengthOfStay": 2,
                    "maxLengthOfStay": 30,
                    "closed": false,
                    "closedOnArrival": true,
                    "closedOnDeparture": true
                  },
                  "prices": [
                    {
                      "adults": 1,
                      "price": {
                        "grossAmount": 123,
                        "beforeTax": 111.81,
                        "afterTax": 133,
                        "taxes": {
                          "tax": 11.19,
                          "cityTax": 10
                        },
                        "currency": "EUR"
                      }
                    },
                    {
                      "adults": 2,
                      "price": {
                        "grossAmount": 170,
                        "beforeTax": 154.54,
                        "afterTax": 180,
                        "taxes": {
                          "tax": 15.46,
                          "cityTax": 10
                        },
                        "currency": "EUR"
                      }
                    }
                  ]
                },
                {
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double",
                    "type": "BedRoom"
                  },
                  "minGuaranteeType": "PM6Hold",
                  "available": 2,
                  "restrictions": {
                    "minLengthOfStay": 2,
                    "maxLengthOfStay": 30,
                    "closed": false,
                    "closedOnArrival": true,
                    "closedOnDeparture": true
                  },
                  "prices": [
                    {
                      "adults": 1,
                      "price": {
                        "grossAmount": 456,
                        "beforeTax": 414.54,
                        "afterTax": 466,
                        "taxes": {
                          "tax": 41.46,
                          "cityTax": 10
                        },
                        "currency": "EUR"
                      }
                    },
                    {
                      "adults": 2,
                      "price": {
                        "grossAmount": 630,
                        "beforeTax": 572.72,
                        "afterTax": 610,
                        "taxes": {
                          "tax": 57.28,
                          "cityTax": 10
                        },
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "count": 1
        }
      },
      "TimeSliceModel": {
        "title": "TimeSliceModel",
        "required": [
          "from",
          "to",
          "serviceDate",
          "ratePlan",
          "unitGroup",
          "baseAmount",
          "totalGrossAmount"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "serviceDate": {
            "type": "string",
            "description": "The service date for this time slice",
            "format": "date",
            "example": "2020-10-10"
          },
          "ratePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "unit": {
            "$ref": "#/components/schemas/EmbeddedUnitModel"
          },
          "baseAmount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "totalGrossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationServiceModel"
            },
            "description": "The list of services included in the rate plan (package elements)"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason"
            },
            "description": "The list of actions allowed for this time slice"
          }
        }
      },
      "TimeSliceOfferItemModel": {
        "title": "TimeSliceOfferItemModel",
        "required": [
          "unitGroup",
          "available"
        ],
        "type": "object",
        "properties": {
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType2"
          },
          "minAdvance": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "maxAdvance": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "available": {
            "type": "integer",
            "description": "The number of available units for the offer",
            "format": "int32"
          },
          "restrictions": {
            "$ref": "#/components/schemas/RateRestrictionsModel"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerOccupancyPriceItemModel"
            },
            "description": "The prices for this offer"
          }
        }
      },
      "Action": {
        "title": "Action",
        "enum": [
          "Delete",
          "Confirm",
          "Release",
          "Cancel",
          "Pickup",
          "Modify",
          "Wash"
        ],
        "type": "string",
        "example": "Delete"
      },
      "Action1": {
        "title": "Action1",
        "enum": [
          "CheckIn",
          "CheckOut",
          "Cancel",
          "AmendTimeSlices",
          "AmendArrival",
          "AmendDeparture",
          "NoShow",
          "AssignUnit",
          "UnassignUnit",
          "RemoveCityTax",
          "AddCityTax",
          "RemoveService"
        ],
        "type": "string",
        "example": "CheckIn"
      },
      "Category": {
        "title": "Category",
        "enum": [
          "OfferNotAvailable",
          "AutoUnitAssignment"
        ],
        "type": "string",
        "description": "The message category",
        "example": "OfferNotAvailable"
      },
      "ChannelCode": {
        "title": "ChannelCode",
        "enum": [
          "Direct",
          "BookingCom",
          "Ibe",
          "ChannelManager",
          "Expedia",
          "Homelike",
          "Hrs"
        ],
        "type": "string",
        "description": "Channel code",
        "example": "Direct"
      },
      "channelCode4": {
        "title": "channelCode4",
        "enum": [
          "Direct",
          "BookingCom",
          "Ibe",
          "ChannelManager",
          "Expedia",
          "Homelike",
          "Hrs"
        ],
        "type": "string",
        "example": "Direct"
      },
      "Code": {
        "title": "Code",
        "enum": [
          "DeleteNotAllowedForBlockWithReservations",
          "ReleaseNotAllowedForBlockWithReservations",
          "ReleaseNotAllowedForBlockInThePast",
          "ReleaseNotAllowedForBlockNotInStatusDefinite",
          "ConfirmNotAllowedForBlockNotInStatusTentative",
          "ConfirmNotAllowedForBlockInThePast",
          "CancelNotAllowedForBlockWithNotCancelledReservations",
          "CancelNotAllowedForBlockNotInStatusDefiniteOrTentative",
          "PickupNotAllowedForBlockNotInStatusDefinite",
          "PickupNotAllowedForBlockInThePast",
          "PickupNotAllowedForFullyPickedBlock",
          "ModifyNotAllowedForBlockInThePast",
          "ModifyNotAllowedForBlockInStatusCanceled",
          "WashNotAllowedForBlockNotInStatusDefinite",
          "WashNotAllowedForBlockWithoutReservations"
        ],
        "type": "string",
        "example": "DeleteNotAllowedForBlockWithReservations"
      },
      "Code1": {
        "title": "Code1",
        "enum": [
          "CheckInNotAllowedForReservationNotInStatusConfirmed",
          "CheckInNotAllowedBeforeArrivalDate",
          "CheckInNotAllowedAfterDepartureDateTime",
          "CheckInNotAllowedWithoutUnitAssignedForWholeStay",
          "CheckOutNotAllowedForReservationNotInStatusInHouse",
          "CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse",
          "CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture",
          "CancelNotAllowedForReservationNotInStatusConfirmed",
          "AmendNotAllowedForNotAmendableTimeSlices",
          "AmendArrivalNotAllowedForNotAmendableTimeSlices",
          "AmendArrivalNotAllowedForReservationNotInStatusConfirmed",
          "AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse",
          "AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast",
          "NoShowNotAllowedForReservationNotInStatusConfirmed",
          "NoShowNotAllowedBeforeArrivalDate",
          "AssignUnitNotAllowedForReservationInThePast",
          "AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse",
          "UnassignUnitNotAllowedForReservationInThePast",
          "UnassignUnitNotAllowedForReservationNotInStatusConfirmed",
          "UnassignUnitNotAllowedForReservationWithoutUnit",
          "RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse",
          "RemoveCityTaxNotAllowedForReservationWithPostedCharges",
          "RemoveCityTaxNotAllowedForReservationWithoutCityTax",
          "AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse",
          "AddCityTaxNotAllowedForReservationWithCityTax",
          "AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax",
          "AddCityTaxNotAllowedForReservationWithPostedCharges",
          "RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse",
          "RemoveServiceNotAllowedForReservationInThePast"
        ],
        "type": "string",
        "example": "CheckInNotAllowedForReservationNotInStatusConfirmed"
      },
      "Code2": {
        "title": "Code2",
        "enum": [
          "AmendNotAllowedWhenTimeSliceIsInThePast",
          "AmendNotAllowedWhenTimeSliceIsAlreadyPosted",
          "AmendNotAllowedForReservationInFinalStatus"
        ],
        "type": "string",
        "example": "AmendNotAllowedWhenTimeSliceIsInThePast"
      },
      "Code3": {
        "title": "Code3",
        "enum": [
          "UnitGroupFullyBooked",
          "UnitGroupCapacityExceeded",
          "RatePlanRestrictionsViolated",
          "RatePlanSurchargesNotSet",
          "RateRestrictionsViolated",
          "RatePlanChannelNotSet",
          "RatesNotSet",
          "BlockFullyBooked",
          "IncludedServicesAmountExceededRateAmount",
          "ServiceFullyBooked"
        ],
        "type": "string",
        "description": "The message Code",
        "example": "UnitGroupFullyBooked"
      },
      "Code4": {
        "title": "Code4",
        "enum": [
          "UnitGroupFullyBooked",
          "UnitGroupCapacityExceeded",
          "RatePlanRestrictionsViolated",
          "RatePlanSurchargesNotSet",
          "RateRestrictionsViolated",
          "RatePlanChannelNotSet",
          "RatesNotSet",
          "BlockFullyBooked",
          "UnitMoved",
          "IncludedServicesAmountExceededRateAmount",
          "RatePlanCompanyRestrictionsViolated",
          "ServiceFullyBooked"
        ],
        "type": "string",
        "description": "The message Code",
        "example": "UnitGroupFullyBooked"
      },
      "dateFilter": {
        "title": "dateFilter",
        "enum": [
          "Arrival",
          "Departure",
          "Stay",
          "Creation",
          "Modification",
          "Cancellation"
        ],
        "type": "string",
        "example": "Arrival"
      },
      "expand": {
        "title": "expand",
        "enum": [
          "actions",
          "timeSlices"
        ],
        "type": "string",
        "example": "actions"
      },
      "expand2": {
        "title": "expand2",
        "enum": [
          "property",
          "unitGroup",
          "ratePlan",
          "services",
          "reservations"
        ],
        "type": "string",
        "example": "property"
      },
      "expand3": {
        "title": "expand3",
        "enum": [
          "property",
          "unitGroup",
          "ratePlan",
          "services",
          "reservations",
          "propertyValues"
        ],
        "type": "string",
        "example": "property"
      },
      "expand4": {
        "title": "expand4",
        "enum": [
          "blocks",
          "actions"
        ],
        "type": "string",
        "example": "blocks"
      },
      "expand6": {
        "title": "expand6",
        "enum": [
          "booker",
          "actions",
          "timeSlices",
          "services",
          "assignedUnits",
          "company"
        ],
        "type": "string",
        "example": "booker"
      },
      "Gender": {
        "title": "Gender",
        "enum": [
          "Female",
          "Male",
          "Other"
        ],
        "type": "string",
        "description": "Gender of the booker",
        "example": "Female"
      },
      "GuaranteeType": {
        "title": "GuaranteeType",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company"
        ],
        "type": "string",
        "description": "The guarantee that has to be applied for this reservation. It has to be the same or stronger than\r\nthe minimum guarantee required by the selected rate plan",
        "example": "PM6Hold"
      },
      "GuaranteeType1": {
        "title": "GuaranteeType1",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company",
          "Ota"
        ],
        "type": "string",
        "description": "The strongest guarantee for the rate plans booked in this reservation",
        "example": "PM6Hold"
      },
      "IdentificationType": {
        "title": "IdentificationType",
        "enum": [
          "SocialInsuranceNumber",
          "PassportNumber",
          "IdNumber",
          "DriverLicenseNumber"
        ],
        "type": "string",
        "description": "The type of the identificationNumber",
        "example": "SocialInsuranceNumber"
      },
      "MinGuaranteeType": {
        "title": "MinGuaranteeType",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company"
        ],
        "type": "string",
        "description": "The minimum guarantee type for this offer",
        "example": "PM6Hold"
      },
      "MinGuaranteeType2": {
        "title": "MinGuaranteeType2",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company",
          "Ota"
        ],
        "type": "string",
        "description": "The minimum guarantee type for the offer",
        "example": "PM6Hold"
      },
      "PricingMode": {
        "title": "PricingMode",
        "enum": [
          "Included",
          "Additional"
        ],
        "type": "string",
        "description": "Whether the service price is included in or added to the base rate",
        "example": "Included"
      },
      "PricingUnit": {
        "title": "PricingUnit",
        "enum": [
          "Room",
          "Person"
        ],
        "type": "string",
        "description": "Defines the granularity (room, person) for which this item is offered and priced",
        "example": "Room"
      },
      "sort": {
        "title": "sort",
        "enum": [
          "arrival:asc",
          "arrival:desc",
          "departure:asc",
          "departure:desc",
          "created:asc",
          "created:desc",
          "updated:asc",
          "updated:desc",
          "id:asc",
          "id:desc",
          "firstname:asc",
          "firstname:desc",
          "lastname:asc",
          "lastname:desc",
          "unitname:asc",
          "unitname:desc"
        ],
        "type": "string",
        "example": "arrival:asc"
      },
      "Status": {
        "title": "Status",
        "enum": [
          "Tentative",
          "Definite",
          "Canceled"
        ],
        "type": "string",
        "description": "Status of the block",
        "example": "Tentative"
      },
      "Status1": {
        "title": "Status1",
        "enum": [
          "Tentative",
          "Definite",
          "Canceled"
        ],
        "type": "string",
        "description": "Status of the block. Tentative will just mark inventory as requested, but still allows to sell it\r\nthrough other channels. Definite will block the inventory for selling through other channels",
        "example": "Tentative"
      },
      "Status2": {
        "title": "Status2",
        "enum": [
          "Confirmed",
          "InHouse",
          "CheckedOut",
          "Canceled",
          "NoShow"
        ],
        "type": "string",
        "description": "Status of the reservation",
        "example": "Confirmed"
      },
      "status6": {
        "title": "status6",
        "enum": [
          "Tentative",
          "Definite",
          "Canceled"
        ],
        "type": "string",
        "example": "Tentative"
      },
      "status8": {
        "title": "status8",
        "enum": [
          "Confirmed",
          "InHouse",
          "CheckedOut",
          "Canceled",
          "NoShow"
        ],
        "type": "string",
        "example": "Confirmed"
      },
      "timeSliceTemplate": {
        "title": "timeSliceTemplate",
        "enum": [
          "DayUse",
          "OverNight"
        ],
        "type": "string",
        "example": "DayUse"
      },
      "Title": {
        "title": "Title",
        "enum": [
          "Mr",
          "Ms",
          "Dr",
          "Prof",
          "Mrs",
          "Other"
        ],
        "type": "string",
        "description": "Title of the guest",
        "example": "Mr"
      },
      "Title1": {
        "title": "Title1",
        "enum": [
          "Mr",
          "Ms",
          "Dr",
          "Prof",
          "Mrs",
          "Other"
        ],
        "type": "string",
        "description": "Title of the booker",
        "example": "Mr"
      },
      "TravelPurpose": {
        "title": "TravelPurpose",
        "enum": [
          "Business",
          "Leisure"
        ],
        "type": "string",
        "description": "Purpose of the trip, leisure or business",
        "example": "Business"
      },
      "TravelPurpose1": {
        "title": "TravelPurpose1",
        "enum": [
          "Business",
          "Leisure"
        ],
        "type": "string",
        "description": "The purpose of the trip, leisure or business",
        "example": "Business"
      },
      "Type": {
        "title": "Type",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "description": "The unit group type",
        "example": "BedRoom"
      },
      "unitCondition": {
        "title": "unitCondition",
        "enum": [
          "Clean",
          "CleanToBeInspected",
          "Dirty"
        ],
        "type": "string",
        "example": "Clean"
      },
      "unitGroupType": {
        "title": "unitGroupType",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "example": "BedRoom"
      },
      "validationMessageCategory": {
        "title": "validationMessageCategory",
        "enum": [
          "OfferNotAvailable",
          "AutoUnitAssignment"
        ],
        "type": "string",
        "example": "OfferNotAvailable"
      },
      "VatType": {
        "title": "VatType",
        "enum": [
          "Null",
          "VeryReduced",
          "Reduced",
          "Normal",
          "Without",
          "Special",
          "ReducedCovid19",
          "NormalCovid19"
        ],
        "type": "string",
        "example": "Null"
      }
    },
    "securitySchemes": {
      "Client credentials grant flow": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "",
            "scopes": {
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      },
      "Authorization code grant flow": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://identity.apaleo.com/connect/authorize",
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "https://identity.apaleo.com/connect/token",
            "scopes": {
              "offline_access": "This scope is active by default for connect clients.",
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Block",
      "description": ""
    },
    {
      "name": "BlockActions",
      "description": ""
    },
    {
      "name": "Booking",
      "description": ""
    },
    {
      "name": "Group",
      "description": ""
    },
    {
      "name": "Offer",
      "description": ""
    },
    {
      "name": "Reservation",
      "description": ""
    },
    {
      "name": "ReservationActions",
      "description": ""
    },
    {
      "name": "Types",
      "description": ""
    }
  ],
  "security": [
    {
      "Client credentials grant flow": []
    }
  ]
}