{
  "openapi": "3.0.3",
  "info": {
    "title": "Baserow API spec",
    "version": "1.9.1",
    "contact": {
      "url": "https://baserow.io/contact",
      "name": "Baserow"
    },
    "license": {
      "name": "MIT",
      "url": "https://gitlab.com/bramw/baserow/-/blob/master/LICENSE"
    },
    "description": "Self hosted open source no-code online database and Airtable alternative. Baserow gives you the powers of a developer without leaving your browser."
  },
  "paths": {
    "/api/admin/dashboard": {
      "get": {
        "operationId": "admin_dashboard",
        "description": "Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.\n\nThis is a **premium** feature.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDashboard"
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/admin/groups": {
      "get": {
        "operationId": "admin_list_groups",
        "description": "Returns all groups with detailed information on each group, if the requesting user is staff.\n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page should be returned."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only groups that match the query will be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many groups should be returned per page."
          },
          {
            "in": "query",
            "name": "sorts",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, name, application_count, created_on. For example `sorts=-id,-name` will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE error."
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupsAdminResponse"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PAGE_SIZE_LIMIT",
                        "ERROR_INVALID_PAGE",
                        "ERROR_ADMIN_LISTING_INVALID_SORT_DIRECTION",
                        "ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/admin/groups/{group_id}": {
      "delete": {
        "operationId": "admin_delete_group",
        "description": "Deletes the specified group and the applications inside that group, if the requesting user is staff. \n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id of the group to delete",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST",
                        "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "operationId": "admin_list_users",
        "description": "Returns all users with detailed information on each user, if the requesting user is staff. \n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page should be returned."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only users that match the query will be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many users should be returned per page."
          },
          {
            "in": "query",
            "name": "sorts",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, is_active, name, username, date_joined, last_login. For example `sorts=-id,-is_active` will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE error."
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAdminResponse"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PAGE_SIZE_LIMIT",
                        "ERROR_INVALID_PAGE",
                        "ERROR_ADMIN_LISTING_INVALID_SORT_DIRECTION",
                        "ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/admin/users/{user_id}": {
      "patch": {
        "operationId": "admin_edit_user",
        "description": "Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active. \n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id of the user to edit",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserAdminUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserAdminUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserAdminUpdate"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAdminResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "USER_ADMIN_CANNOT_DEACTIVATE_SELF",
                        "USER_ADMIN_UNKNOWN_USER",
                        "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      },
      "delete": {
        "operationId": "admin_delete_user",
        "description": "Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself. \n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id of the user to delete",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "USER_ADMIN_CANNOT_DELETE_SELF",
                        "USER_ADMIN_UNKNOWN_USER",
                        "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/applications": {
      "get": {
        "operationId": "list_all_applications",
        "description": "Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single group. All the applications of the groups that the user has access to are going to be listed here.",
        "tags": [
          "Applications"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Applications"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/applications/{application_id}": {
      "get": {
        "operationId": "get_application",
        "description": "Returns the requested application if the authorized user is in the application's group. The properties that belong to the application can differ per type.",
        "parameters": [
          {
            "in": "path",
            "name": "application_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the application related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Applications"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_application",
        "description": "Updates the existing application related to the provided `application_id` param if the authorized user is in the application's group. It is not possible to change the type, but properties like the name can be changed.",
        "parameters": [
          {
            "in": "path",
            "name": "application_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the application related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplicationUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplicationUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplicationUpdate"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Applications"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_application",
        "description": "Deletes an application if the authorized user is in the application's group. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.",
        "parameters": [
          {
            "in": "path",
            "name": "application_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the application related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/applications/group/{group_id}": {
      "get": {
        "operationId": "list_applications",
        "description": "Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If thegroup is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only applications that are in the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Applications"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_application",
        "description": "Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates an application for the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Applications"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/applications/group/{group_id}/order": {
      "post": {
        "operationId": "order_applications",
        "description": "Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the order of the applications in the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Applications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderApplications"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrderApplications"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrderApplications"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_APPLICATION_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/airtable/create-import-job": {
      "post": {
        "operationId": "create_airtable_import_job",
        "description": "Creates a new Airtable import job. This job runs asynchronously in the background and imports the Airtable base related to the provided parameters. The `get_airtable_import_job` can be used to get the state of the import job.",
        "tags": [
          "Database airtable import"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAirtableImportJob"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateAirtableImportJob"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAirtableImportJob"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AirtableImportJob"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_AIRTABLE_JOB_ALREADY_RUNNING"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/airtable/import-job/{job_id}": {
      "get": {
        "operationId": "get_airtable_import_job",
        "description": "Returns the information related to the provided Airtable import job id. This endpoint can for example be polled to get the state of the import job in real time.",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "schema": {
              "type": "integer"
            },
            "description": "The job id to lookup information about.",
            "required": true
          }
        ],
        "tags": [
          "Database airtable import"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AirtableImportJob"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_AIRTABLE_IMPORT_JOB_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/export/{job_id}": {
      "get": {
        "operationId": "get_export_job",
        "description": "Returns information such as export progress and status or the url of the exported file for the specified export job, only if the requesting user has access.",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "schema": {
              "type": "integer"
            },
            "description": "The job id to lookup information about.",
            "required": true
          }
        ],
        "tags": [
          "Database table export"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportJob"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_EXPORT_JOB_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/export/table/{table_id}": {
      "post": {
        "operationId": "export_table",
        "description": "Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "The table id to create and start an export job for",
            "required": true
          }
        ],
        "tags": [
          "Database table export"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Export"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Export"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Export"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportJob"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_TABLE_ONLY_EXPORT_UNSUPPORTED",
                        "ERROR_VIEW_UNSUPPORTED_FOR_EXPORT_TYPE",
                        "ERROR_VIEW_NOT_IN_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/fields/{field_id}": {
      "get": {
        "operationId": "get_database_table_field",
        "description": "Returns the existing field if the authorized user has access to the related database's group. Depending on the type different properties could be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the field related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldField"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_field",
        "description": "Updates the existing field if the authorized user has access to the related database's group. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the field related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFieldUpdateField"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFieldUpdateField"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFieldUpdateField"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldFieldSerializerWithRelatedFields"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_CHANGE_FIELD_TYPE",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_RESERVED_BASEROW_FIELD_NAME",
                        "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS",
                        "ERROR_INVALID_BASEROW_FIELD_NAME",
                        "ERROR_FIELD_SELF_REFERENCE",
                        "ERROR_FIELD_CIRCULAR_REFERENCE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_field",
        "description": "Deletes the existing field if the authorized user has access to the related database's group. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the field related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedFields"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_DELETE_PRIMARY_FIELD",
                        "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/fields/table/{table_id}": {
      "get": {
        "operationId": "list_database_table_fields",
        "description": "Lists all the fields of the table related to the provided parameter if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table's column.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only the fields of the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldField"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_field",
        "description": "Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a new field for the provided table related to the value.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldCreateField"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FieldCreateField"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FieldCreateField"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldFieldSerializerWithRelatedFields"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_MAX_FIELD_COUNT_EXCEEDED",
                        "ERROR_RESERVED_BASEROW_FIELD_NAME",
                        "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS",
                        "ERROR_INVALID_BASEROW_FIELD_NAME",
                        "ERROR_FIELD_SELF_REFERENCE",
                        "ERROR_FIELD_CIRCULAR_REFERENCE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/formula/{field_id}/type": {
      "post": {
        "operationId": "type_formula_field",
        "description": "Calculates and returns the new type of the specified formula field if it's formula is changed to the specified value. Does not change the state of the field in any way.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "The formula field id to type.",
            "required": true
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeFormulaRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TypeFormulaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TypeFormulaRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeFormulaResult"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_WITH_FORMULA",
                        "ERROR_FIELD_SELF_REFERENCE",
                        "ERROR_FIELD_CIRCULAR_REFERENCE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/rows/table/{table_id}": {
      "get": {
        "operationId": "list_database_table_rows",
        "description": "Lists all the rows of the table related to the provided parameter if the user has access to the related database's group. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "parameters": [
          {
            "in": "query",
            "name": "exclude",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \\\"`."
          },
          {
            "in": "query",
            "name": "filter__{field}__{filter}",
            "schema": {
              "type": "string"
            },
            "description": "The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.\n\nFor example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.\n\nThe following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not."
          },
          {
            "in": "query",
            "name": "filter_type",
            "schema": {
              "type": "string"
            },
            "description": "`AND`: Indicates that the rows must match all the provided filters.\n`OR`: Indicates that the rows only have to match one of the filters.\n\nThis works only if two or more filters are provided."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \\\"`."
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string"
            },
            "description": "Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \\\"`."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page of rows should be returned."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only rows with data that matches the search query are going to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned per page."
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the rows of the table related to the provided value.",
            "required": true
          },
          {
            "in": "query",
            "name": "user_field_names",
            "schema": {
              "type": "boolean"
            },
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). "
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerExampleRowResponseSerializerWithUserFieldNames"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_PAGE_SIZE_LIMIT",
                        "ERROR_INVALID_PAGE",
                        "ERROR_ORDER_BY_FIELD_NOT_FOUND",
                        "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE",
                        "ERROR_FILTER_FIELD_NOT_FOUND",
                        "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST",
                        "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_row",
        "description": "Creates a new row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.",
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "integer"
            },
            "description": "If provided then the newly created row will be positioned before the row with the provided id."
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a row in the table related to the provided value.",
            "required": true
          },
          {
            "in": "query",
            "name": "user_field_names",
            "schema": {
              "type": "boolean"
            },
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc)."
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequestSerializerWithUserFieldNames"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequestSerializerWithUserFieldNames"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequestSerializerWithUserFieldNames"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleRowResponseSerializerWithUserFieldNames"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/rows/table/{table_id}/{row_id}": {
      "get": {
        "operationId": "get_database_table_row",
        "description": "Fetches an existing row from the table if the user has access to the related table's group. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "parameters": [
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the row related the provided value.",
            "required": true
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the row of the table related to the provided value.",
            "required": true
          },
          {
            "in": "query",
            "name": "user_field_names",
            "schema": {
              "type": "boolean"
            },
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). "
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleRowResponseSerializerWithUserFieldNames"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_row",
        "description": "Updates an existing row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.",
        "parameters": [
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the row related to the value.",
            "required": true
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the row in the table related to the value.",
            "required": true
          },
          {
            "in": "query",
            "name": "user_field_names",
            "schema": {
              "type": "boolean"
            },
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc)."
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExampleRowRequestSerializerWithUserFieldNames"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExampleRowRequestSerializerWithUserFieldNames"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExampleRowRequestSerializerWithUserFieldNames"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleRowResponseSerializerWithUserFieldNames"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_row",
        "description": "Deletes an existing row in the table if the user has access to the table's group.",
        "parameters": [
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the row related to the value.",
            "required": true
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the row in the table related to the value.",
            "required": true
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/rows/table/{table_id}/{row_id}/move": {
      "patch": {
        "operationId": "move_database_table_row",
        "description": "Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.",
        "parameters": [
          {
            "in": "query",
            "name": "before_id",
            "schema": {
              "type": "integer"
            },
            "description": "Moves the row related to the given `row_id` before the row related to the provided value. If not provided, then the row will be moved to the end."
          },
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "Moves the row related to the value.",
            "required": true
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Moves the row in the table related to the value.",
            "required": true
          },
          {
            "in": "query",
            "name": "user_field_names",
            "schema": {
              "type": "boolean"
            },
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). "
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleRowResponseSerializerWithUserFieldNames"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_NO_PERMISSION_TO_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/tables/{table_id}": {
      "get": {
        "operationId": "get_database_table",
        "description": "Returns the requested table if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table",
        "description": "Updates the existing table if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableUpdate"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table",
        "description": "Deletes the existing table if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/tables/database/{database_id}": {
      "get": {
        "operationId": "list_database_tables",
        "description": "Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database's group. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only tables that are related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table",
        "description": "Creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a table for the database related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TableCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TableCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_INVALID_INITIAL_TABLE_DATA",
                        "ERROR_INITIAL_TABLE_DATA_LIMIT_EXCEEDED",
                        "ERROR_RESERVED_BASEROW_FIELD_NAME",
                        "ERROR_INITIAL_TABLE_DATA_HAS_DUPLICATE_NAMES",
                        "ERROR_INVALID_BASEROW_FIELD_NAME"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/tables/database/{database_id}/order": {
      "post": {
        "operationId": "order_database_tables",
        "description": "Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the order of the tables in the database related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tables"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTables"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrderTables"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrderTables"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_TABLE_NOT_IN_DATABASE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/tokens": {
      "get": {
        "operationId": "list_database_tokens",
        "description": "Lists all the API tokens that belong to the authorized user. An API token can be used to create, read, update and delete rows in the tables of the token's group. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.",
        "tags": [
          "Database tokens"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_token",
        "description": "Creates a new API token for a given group and for the authorized user.",
        "tags": [
          "Database tokens"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/tokens/{token_id}": {
      "get": {
        "operationId": "get_database_token",
        "description": "Returns the requested token if it is owned by the authorized user andif the user has access to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "token_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the token related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TOKEN_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_token",
        "description": "Updates the existing token if it is owned by the authorized user and ifthe user has access to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "token_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the token related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTokenUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTokenUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTokenUpdate"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_DATABASE_DOES_NOT_BELONG_TO_GROUP",
                        "ERROR_TABLE_DOES_NOT_BELONG_TO_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TOKEN_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_token",
        "description": "Deletes the existing token if it is owned by the authorized user and ifthe user has access to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "token_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the token related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TOKEN_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{slug}/link-row-field-lookup/{field_id}": {
      "get": {
        "operationId": "database_table_public_view_link_row_field_lookup",
        "description": "If the view is publicly shared or if an authenticated user has access to the related group, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "The field id of the link row field.",
            "required": true
          },
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "The slug related to the view.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerLinkRowValue"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST",
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{view_id}": {
      "get": {
        "operationId": "get_database_table_view",
        "description": "Returns the existing view if the authorized user has access to the related database's group. Depending on the type different propertiescould be returned.",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list of extra attributes to include on the returned view. The supported attributes are are `filters` and `sortings`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively."
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewView"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_view",
        "description": "Updates the existing view if the authorized user has access to the related database's group. The type cannot be changed. It depends on the existing type which properties can be changed.",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list of extra attributes to include on the returned view. The supported attributes are `filters` and `sortings`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively."
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewUpdateView"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewUpdateView"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewUpdateView"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewView"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_FIELD_NOT_IN_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_view",
        "description": "Deletes the existing view if the authorized user has access to the related database's group. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{view_id}/field-options": {
      "get": {
        "operationId": "get_database_table_view_field_options",
        "description": "Responds with the fields options of the provided view if the authenticated user has access to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Responds with field options related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFieldOptions"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_view_field_options",
        "description": "Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the field options related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewFieldOptions"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewFieldOptions"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedViewFieldOptions"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFieldOptions"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{view_id}/filters": {
      "get": {
        "operationId": "list_database_table_view_filters",
        "description": "Lists all filters of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only filters of the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViewFilter"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_view_filter",
        "description": "Creates a new filter for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a filter for the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewFilter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewFilter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewFilter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFilter"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_FIELD_NOT_IN_TABLE",
                        "ERROR_VIEW_FILTER_NOT_SUPPORTED",
                        "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{view_id}/rotate-slug": {
      "post": {
        "operationId": "rotate_database_view_slug",
        "description": "Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won't be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Rotates the slug of the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewView"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_CANNOT_SHARE_VIEW_TYPE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/{view_id}/sortings": {
      "get": {
        "operationId": "list_database_table_view_sortings",
        "description": "Lists all sortings of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple sortings. When all the rows are requested they will be in the desired order.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only sortings of the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViewSort"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_view_sort",
        "description": "Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a sort for the view related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewSort"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewSort"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewSort"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewSort"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_VIEW_SORT_NOT_SUPPORTED",
                        "ERROR_FIELD_NOT_IN_TABLE",
                        "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS",
                        "ERROR_VIEW_SORT_FIELD_NOT_SUPPORTED"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/filter/{view_filter_id}": {
      "get": {
        "operationId": "get_database_table_view_filter",
        "description": "Returns the existing view filter if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_filter_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the view filter related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFilter"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_view_filter",
        "description": "Updates the existing filter if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_filter_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the view filter related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewFilter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewFilter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewFilter"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewFilter"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_FIELD_NOT_IN_TABLE",
                        "ERROR_VIEW_FILTER_NOT_SUPPORTED",
                        "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_view_filter",
        "description": "Deletes the existing filter if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_filter_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the filter related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/form/{slug}/submit": {
      "get": {
        "operationId": "get_meta_database_table_form_view",
        "description": "Returns the meta data related to the form view if the form is publicly shared or if the user has access to the related group. This data can be used to construct a form with the right fields.",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "The slug related to the form form.",
            "required": true
          }
        ],
        "tags": [
          "Database table form view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicFormView"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FORM_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "submit_database_table_form_view",
        "description": "Submits the form if the form is publicly shared or if the user has access to the related group. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "The slug related to the form.",
            "required": true
          }
        ],
        "tags": [
          "Database table form view"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExampleRowRequest"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormViewSubmitted"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FORM_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/gallery/{view_id}": {
      "get": {
        "operationId": "list_database_table_gallery_view_rows",
        "description": "Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated by a limit/offset style.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean"
            },
            "description": "If provided only the count will be returned."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's order is included in here."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only rows with data that matches the search query are going to be returned."
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only rows that belong to the related view's table.",
            "required": true
          }
        ],
        "tags": [
          "Database table gallery view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GALLERY_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/grid/{slug}/public/info": {
      "get": {
        "operationId": "get_public_grid_view_info",
        "description": "Returns the required public information to display a single shared grid view.",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "The slug of the grid view to get public information about.",
            "required": true
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicGridViewInfo"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/grid/{slug}/public/rows": {
      "get": {
        "operationId": "public_list_database_table_grid_view_rows",
        "description": "Lists the requested rows of the view's table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.\n\n",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean"
            },
            "description": "If provided only the count will be returned."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. "
          },
          {
            "in": "query",
            "name": "filter__{field}__{filter}",
            "schema": {
              "type": "string"
            },
            "description": "The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.\n\nFor example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.\n\nThe following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not."
          },
          {
            "in": "query",
            "name": "filter_type",
            "schema": {
              "type": "string"
            },
            "description": "`AND`: Indicates that the rows must match all the provided filters.\n`OR`: Indicates that the rows only have to match one of the filters.\n\nThis works only if two or more filters are provided."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here."
          },
          {
            "in": "query",
            "name": "include_fields",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned."
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string"
            },
            "description": "Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A)."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only rows with data that matches the search query are going to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned."
          },
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "type": "string"
            },
            "description": "Returns only rows that belong to the related view.",
            "required": true
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GRID_DOES_NOT_EXIST",
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/grid/{view_id}": {
      "get": {
        "operationId": "list_database_table_grid_view_rows",
        "description": "Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.\n\nThe filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean"
            },
            "description": "If provided only the count will be returned."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. "
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list allowing the values of `field_options` and `row_metadata` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. The `row_metadata` object includes extra row specific data on a per row basis."
          },
          {
            "in": "query",
            "name": "include_fields",
            "schema": {
              "type": "string"
            },
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided only rows with data that matches the search query are going to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned."
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only rows that belong to the related view's table.",
            "required": true
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerWithGridViewFieldOptionsExampleRowResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GRID_DOES_NOT_EXIST",
                        "ERROR_FIELD_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "filter_database_table_grid_view_rows",
        "description": "Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only rows that belong to the related view's table.",
            "required": true
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridViewFilter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GridViewFilter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GridViewFilter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExampleRowResponse"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GRID_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/grid/{view_id}/aggregation/{field_id}": {
      "get": {
        "operationId": "get_database_table_grid_view_field_aggregation",
        "description": "Computes an aggregation of all values for a specific field from the selected grid view. You can select the aggregation type by specifying the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. The total count of rows is also always returned with the result.You need to have read permissions on the view to request aggregations.",
        "parameters": [
          {
            "in": "path",
            "name": "field_id",
            "schema": {
              "type": "integer"
            },
            "description": "The field id you want to aggregate",
            "required": true
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "if `include` is set to `total`, the total row count will be returned with the result."
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev"
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Select the view you want the aggregation for.",
            "required": true
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "anyOf": [
                        {
                          "type": "number",
                          "description": "The aggregation result for the specified field.",
                          "example": 5
                        },
                        {
                          "type": "string",
                          "description": "The aggregation result for the specified field."
                        },
                        {
                          "type": "array",
                          "items": {},
                          "description": "The aggregation result for the specified field."
                        },
                        {
                          "type": "object",
                          "description": "The aggregation result for the specified field."
                        }
                      ]
                    },
                    "total": {
                      "type": "integer",
                      "description": "The total value count. Only returned if `include=total` is specified as GET parameter.",
                      "example": 7
                    }
                  },
                  "required": [
                    "value"
                  ]
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_AGGREGATION_TYPE_DOES_NOT_EXIST",
                        "ERROR_FIELD_NOT_IN_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_FIELD_DOES_NOT_EXIST",
                        "ERROR_GRID_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/kanban/{view_id}": {
      "get": {
        "operationId": "list_database_table_kanban_view_rows",
        "description": "Responds with serialized rows grouped by the view's single select field options if the user is authenticated and has access to the related group. Additional query parameters can be provided to control the `limit` and `offset` per select option.\n\nThis is a **premium** feature.",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "Accepts `field_options` as value if the field options must also be included in the response."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned by default. This value can be overwritten per select option."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Defines from which offset the rows should be returned.This value can be overwritten per select option."
          },
          {
            "in": "query",
            "name": "select_option",
            "schema": {
              "type": "string"
            },
            "description": "Accepts multiple `select_option` parameters. If not provided, the rows of all select options will be returned. If one or more `select_option` parameters are provided, then only the rows of those will be included in the response. `?select_option=1&select_option=null` will only include the rows for both select option with id `1` and `null`. `?select_option=1,10,20` will only include the rows of select option id `1` with a limit of `10` and and offset of `20`."
          },
          {
            "in": "path",
            "name": "view_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only rows that belong to the related view's table.",
            "required": true
          }
        ],
        "tags": [
          "Database table kanban view"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KanbanViewExampleResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD",
                        "ERROR_INVALID_SELECT_OPTION_PARAMETER",
                        "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_KANBAN_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/sort/{view_sort_id}": {
      "get": {
        "operationId": "get_database_table_view_sort",
        "description": "Returns the existing view sort if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_sort_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the view sort related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewSort"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_view_sort",
        "description": "Updates the existing sort if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_sort_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the view sort related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewSort"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewSort"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateViewSort"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewSort"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_FIELD_NOT_IN_TABLE",
                        "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_view_sort",
        "description": "Deletes the existing sort if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "view_sort_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the sort related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/table/{table_id}": {
      "get": {
        "operationId": "list_database_table_views",
        "description": "Lists all views of the table related to the provided `table_id` if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters` and `sortings`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively."
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only views of the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViewView"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_view",
        "description": "Creates a new view for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.",
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters` and `sortings`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively."
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a view for the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewCreateView"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ViewCreateView"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ViewCreateView"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewView"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_FIELD_NOT_IN_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/views/table/{table_id}/order": {
      "post": {
        "operationId": "order_database_table_views",
        "description": "Changes the order of the provided view ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided views will be set to `0`.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the order of the views in the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table views"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderViews"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrderViews"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrderViews"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_VIEW_NOT_IN_TABLE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/webhooks/{webhook_id}": {
      "get": {
        "operationId": "get_database_table_webhook",
        "description": "Returns the existing webhook if the authorized user has access to the related database group.",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the webhook related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableWebhook"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_database_table_webhook",
        "description": "Updates the existing view if the authorized user has access to the related database group.",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the webhook related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableWebhookUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableWebhookUpdateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTableWebhookUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableWebhook"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_database_table_webhook",
        "description": "Deletes the existing webhook if the authorized user has access to the related database's group.",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the webhook related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/webhooks/table/{table_id}": {
      "get": {
        "operationId": "list_database_table_webhooks",
        "description": "Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database group.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only webhooks of the table related to this value.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableWebhook"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_database_table_webhook",
        "description": "Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database group.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a webhook for the table related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableWebhook"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_TABLE_WEBHOOK_MAX_LIMIT_EXCEEDED"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/database/webhooks/table/{table_id}/test-call": {
      "post": {
        "operationId": "test_call_database_table_webhook",
        "description": "This endpoint triggers a test call based on the provided data if the user has access to the group related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.",
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id of the table that must be tested.",
            "required": true
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookTestCallRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookTestCallRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TableWebhookTestCallRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableWebhookTestCallResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups": {
      "get": {
        "operationId": "list_groups",
        "description": "Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "order": {
                        "type": "integer",
                        "description": "The order of the group, lowest first.",
                        "example": 0
                      },
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the group.",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "description": "The name given to the group.",
                        "example": "Bram's group"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_group",
        "description": "Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "type": "integer",
                      "description": "The order of the group, lowest first.",
                      "example": 0
                    },
                    "id": {
                      "type": "integer",
                      "description": "The unique identifier of the group.",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the group.",
                      "example": "Bram's group"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/{group_id}": {
      "patch": {
        "operationId": "update_group",
        "description": "Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_group",
        "description": "Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "type": "integer",
                      "description": "The order of the group, lowest first.",
                      "example": 0
                    },
                    "id": {
                      "type": "integer",
                      "description": "The unique identifier of the group.",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name given to the group.",
                      "example": "Bram's group"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                        "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/{group_id}/leave": {
      "post": {
        "operationId": "leave_group",
        "description": "Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, he will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, he must either delete the group or give another member admin permissions first.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Leaves the group related to the value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_GROUP_USER_IS_LAST_ADMIN"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/invitations/{group_invitation_id}": {
      "get": {
        "operationId": "get_group_invitation",
        "description": "Returns the requested group invitation if the authorized user has admin right to the related group",
        "parameters": [
          {
            "in": "path",
            "name": "group_invitation_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the group invitation related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitation"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "update_group_invitation",
        "description": "Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_invitation_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the group invitation related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupInvitation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupInvitation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupInvitation"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitation"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_group_invitation",
        "description": "Deletes a group invitation if the authorized user has admin rights to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_invitation_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the group invitation related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/invitations/{group_invitation_id}/accept": {
      "post": {
        "operationId": "accept_group_invitation",
        "description": "Accepts a group invitation with the given id if the email address of the user matches that of the invitation.",
        "parameters": [
          {
            "in": "path",
            "name": "group_invitation_id",
            "schema": {
              "type": "integer"
            },
            "description": "Accepts the group invitation related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserGroup"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_EMAIL_MISMATCH"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/invitations/{group_invitation_id}/reject": {
      "post": {
        "operationId": "reject_group_invitation",
        "description": "Rejects a group invitation with the given id if the email address of the user matches that of the invitation.",
        "parameters": [
          {
            "in": "path",
            "name": "group_invitation_id",
            "schema": {
              "type": "integer"
            },
            "description": "Rejects the group invitation related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_EMAIL_MISMATCH"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/invitations/group/{group_id}": {
      "get": {
        "operationId": "list_group_invitations",
        "description": "Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns only invitations that are in the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitation"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_group_invitation",
        "description": "Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Creates a group invitation to the group related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupInvitation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupInvitation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupInvitation"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitation"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/invitations/token/{token}": {
      "get": {
        "operationId": "get_group_invitation_by_token",
        "description": "Responds with the serialized group invitation if an invitation with the provided token is found.",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "description": "Returns the group invitation related to the provided token.",
            "required": true
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupInvitation"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "BAD_TOKEN_SIGNATURE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/order": {
      "post": {
        "operationId": "order_groups",
        "description": "Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroups"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroups"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroups"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/groups/users/{group_user_id}": {
      "patch": {
        "operationId": "update_group_user",
        "description": "Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_user_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the group user related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateGroupUser"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserGroup"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_USER_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "delete_group_user",
        "description": "Deletes a group user if the authorized user has admin rights to the related group.",
        "parameters": [
          {
            "in": "path",
            "name": "group_user_id",
            "schema": {
              "type": "integer"
            },
            "description": "Deletes the group user related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/groups/users/group/{group_id}": {
      "get": {
        "operationId": "list_group_users",
        "description": "Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be send first.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Updates the group user related to the provided value.",
            "required": true
          }
        ],
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupUser"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses": {
      "get": {
        "operationId": "admin_premium_licenses",
        "description": "Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PremiumLicense"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "admin_register_premium_license",
        "description": "Registers a new license. After registering you can assign users to the license that will be able to use the premium features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPremiumLicense"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPremiumLicense"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPremiumLicense"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PremiumLicense"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_INVALID_PREMIUM_LICENSE",
                        "ERROR_UNSUPPORTED_PREMIUM_LICENSE",
                        "ERROR_PREMIUM_LICENSE_INSTANCE_ID_MISMATCH",
                        "ERROR_PREMIUM_LICENSE_HAS_EXPIRED",
                        "ERROR_PREMIUM_LICENSE_ALREADY_EXISTS"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}": {
      "get": {
        "operationId": "admin_get_premium_license",
        "description": "Responds with detailed information about the license related to the provided parameter.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PremiumLicenseWithUsers"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "admin_remove_premium_license",
        "description": "Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the premium version.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}/{user_id}": {
      "post": {
        "operationId": "admin_add_user_to_premium_license",
        "description": "Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          },
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user that must be added to the license.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PremiumLicenseUser"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_ALREADY_ON_PREMIUM_LICENSE",
                        "ERROR_NO_SEATS_LEFT_IN_PREMIUM_LICENSE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST",
                        "ERROR_USER_NOT_FOUND"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "admin_remove_user_from_premium_license",
        "description": "Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          },
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user that must be removed from the license.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST",
                        "ERROR_USER_NOT_FOUND"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}/check": {
      "get": {
        "operationId": "admin_premium_license_check",
        "description": "This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it's invalid. In that case a `204` status code is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PremiumLicenseWithUsers"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}/fill-seats": {
      "post": {
        "operationId": "admin_fill_remaining_seats_of_premium_license",
        "description": "Fills the remaining empty seats of the license with the first users that are found.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PremiumLicenseUser"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}/lookup-users": {
      "get": {
        "operationId": "admin_premium_license_lookup_users",
        "description": "This endpoint can be used to lookup users that must be added to a premium license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page of users should be returned."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "If provided, only users where the name or email contains the value are returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many users should be returned per page."
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerPremiumLicenseUserLookup"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/licenses/{id}/remove-all-users": {
      "post": {
        "operationId": "admin_remove_all_users_from_premium_license",
        "description": "Removes all the users the users that are on the license. This will empty all the seats.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "required": true
          }
        ],
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/row_comments/{table_id}/{row_id}": {
      "get": {
        "operationId": "get_row_comments",
        "description": "Returns all row comments for the specified table and row.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Defines how many rows should be returned."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both."
          },
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "The row to get row comments for.",
            "required": true
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned."
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "The table the row is in.",
            "required": true
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerRowComment"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create_row_comment",
        "description": "Creates a comment on the specified row.",
        "parameters": [
          {
            "in": "path",
            "name": "row_id",
            "schema": {
              "type": "integer"
            },
            "description": "The row to create a comment for.",
            "required": true
          },
          {
            "in": "path",
            "name": "table_id",
            "schema": {
              "type": "integer"
            },
            "description": "The table to find the row to comment on in.",
            "required": true
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowCommentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RowCommentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RowCommentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowComment"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_TABLE_DOES_NOT_EXIST",
                        "ERROR_ROW_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "operationId": "get_settings",
        "description": "Responds with all the admin configured settings.",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/settings/instance-id": {
      "get": {
        "operationId": "get_instance_id",
        "description": "Responds with the self hosted instance id. Only a user with staff permissions can request it.",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceId"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/settings/update": {
      "patch": {
        "operationId": "update_settings",
        "description": "Updates the admin configured settings if the user has admin permissions.",
        "tags": [
          "Settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSettings"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSettings"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSettings"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/templates": {
      "get": {
        "operationId": "list_templates",
        "description": "Lists all the template categories and the related templates that are in that category. The template's `group_id` can be used for previewing purposes because that group contains the applications that are in the template. All the `get` and `list` endpoints related to that group are publicly accessible.",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateCategories"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/templates/install/{group_id}/{template_id}": {
      "get": {
        "operationId": "install_template",
        "description": "Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id related to the group where the template applications must be installed into.",
            "required": true
          },
          {
            "in": "path",
            "name": "template_id",
            "schema": {
              "type": "integer"
            },
            "description": "The id related to the template that must be installed.",
            "required": true
          }
        ],
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Applications"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_DOES_NOT_EXIST",
                        "ERROR_TEMPLATE_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/trash": {
      "get": {
        "operationId": "get_trash_structure",
        "description": "Responds with the groups and applications available for the requesting user to inspect the trash contents of.",
        "tags": [
          "Trash"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrashStructure"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/trash/group/{group_id}": {
      "get": {
        "operationId": "get_contents",
        "description": "Responds with trash contents for a group optionally filtered to a specific application.",
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "schema": {
              "type": "integer"
            },
            "description": "Optionally filters down the trash to only items for this application in the group."
          },
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Returns the trash for the group with this id.",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Selects which page of trash contents should be returned."
          }
        ],
        "tags": [
          "Trash"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSerializerTrashContents"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_APPLICATION_NOT_IN_GROUP",
                        "ERROR_GROUP_DOES_NOT_EXIST",
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "empty_contents",
        "description": "Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.",
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "schema": {
              "type": "integer"
            },
            "description": "Optionally filters down the trash to delete to only items for this application in the group."
          },
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "The group whose trash contents to empty, including the group itself if it is also trashed.",
            "required": true
          }
        ],
        "tags": [
          "Trash"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_APPLICATION_NOT_IN_GROUP",
                        "ERROR_GROUP_DOES_NOT_EXIST",
                        "ERROR_APPLICATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/trash/restore": {
      "patch": {
        "operationId": "restore",
        "description": "Restores the specified trashed item back into baserow.",
        "tags": [
          "Trash"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTrashEntryRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTrashEntryRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTrashEntryRequest"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_USER_NOT_IN_GROUP",
                        "ERROR_TRASH_ITEM_DOES_NOT_EXIST",
                        "ERROR_CANNOT_RESTORE_PARENT_BEFORE_CHILD",
                        "ERROR_PARENT_ID_MUST_NOT_BE_PROVIDED",
                        "ERROR_PARENT_ID_MUST_BE_PROVIDED",
                        "ERROR_CANT_RESTORE_AS_RELATED_TABLE_TRASHED"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "operationId": "create_user",
        "description": "Creates a new user based on the provided values. If desired an authentication token can be generated right away. After creating an account the initial group containing a database is created.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "An object containing information related to the user.",
                      "properties": {
                        "first_name": {
                          "type": "string",
                          "description": "The first name of related user."
                        },
                        "username": {
                          "type": "string",
                          "format": "email",
                          "description": "The username of the related user. This is always an email address."
                        },
                        "language": {
                          "type": "string",
                          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB."
                        }
                      }
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_ALREADY_EXISTS",
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXISTERROR_REQUEST_BODY_VALIDATION",
                        "BAD_TOKEN_SIGNATURE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user-files/upload-file": {
      "post": {
        "operationId": "upload_file",
        "description": "Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.",
        "tags": [
          "User files"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFile"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_INVALID_FILE",
                        "ERROR_FILE_SIZE_TOO_LARGE"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user-files/upload-via-url": {
      "post": {
        "operationId": "upload_via_url",
        "description": "Uploads a file to Baserow by downloading it from the provided URL.",
        "tags": [
          "User files"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFileUploadViaURLRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserFileUploadViaURLRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserFileUploadViaURLRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFile"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_INVALID_FILE",
                        "ERROR_FILE_SIZE_TOO_LARGE",
                        "ERROR_FILE_URL_COULD_NOT_BE_REACHED",
                        "ERROR_INVALID_FILE_URL"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/account": {
      "patch": {
        "operationId": "update_account",
        "description": "Updates the account information of the authenticated user.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccount"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccount"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccount"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/change-password": {
      "post": {
        "operationId": "change_password",
        "description": "Changes the password of an authenticated user, but only if the old password matches.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBodyValidation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBodyValidation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBodyValidation"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_INVALID_OLD_PASSWORD",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/dashboard": {
      "get": {
        "operationId": "dashboard",
        "description": "Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending group invitations for that user.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/reset-password": {
      "post": {
        "operationId": "reset_password",
        "description": "Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBodyValidation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBodyValidation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBodyValidation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "BAD_TOKEN_SIGNATURE",
                        "EXPIRED_TOKEN_SIGNATURE",
                        "ERROR_USER_NOT_FOUND",
                        "ERROR_REQUEST_BODY_VALIDATION"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/send-reset-password-email": {
      "post": {
        "operationId": "send_password_reset_email",
        "description": "Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordEmailBodyValidation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordEmailBodyValidation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordEmailBodyValidation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Machine readable error indicating what went wrong.",
                      "enum": [
                        "ERROR_REQUEST_BODY_VALIDATION",
                        "ERROR_HOSTNAME_IS_NOT_ALLOWED"
                      ]
                    },
                    "detail": {
                      "oneOf": [
                        {
                          "type": "string",
                          "format": "string",
                          "description": "Human readable details about what went wrong."
                        },
                        {
                          "type": "object",
                          "format": "object",
                          "description": "Machine readable object about what went wrong."
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/token-auth": {
      "post": {
        "operationId": "token_auth",
        "description": "Authenticates an existing user based on their username, which is their email address, and their password. If successful a JWT token will be generated that can be used to authorize for other endpoints that require authorization. The token will be valid for 60 minutes, so it has to be refreshed using the **token_refresh** endpoint before that time.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NormalizedEmailWebToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NormalizedEmailWebToken"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NormalizedEmailWebToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "An object containing information related to the user.",
                      "properties": {
                        "first_name": {
                          "type": "string",
                          "description": "The first name of related user."
                        },
                        "username": {
                          "type": "string",
                          "format": "email",
                          "description": "The username of the related user. This is always an email address."
                        },
                        "language": {
                          "type": "string",
                          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB."
                        }
                      }
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A user with the provided username and password is not found."
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/token-refresh": {
      "post": {
        "operationId": "token_refresh",
        "description": "Refreshes an existing JWT token. If the the token is valid, a new token will be included in the response. It will be valid for 60 minutes.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshAuthToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RefreshAuthToken"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RefreshAuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "An object containing information related to the user.",
                      "properties": {
                        "first_name": {
                          "type": "string",
                          "description": "The first name of related user."
                        },
                        "username": {
                          "type": "string",
                          "format": "email",
                          "description": "The username of the related user. This is always an email address."
                        },
                        "language": {
                          "type": "string",
                          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB."
                        }
                      }
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The token is invalid or expired."
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/token-verify": {
      "post": {
        "operationId": "token_verify",
        "description": "Verifies if the token is still valid.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthToken"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "An object containing information related to the user.",
                      "properties": {
                        "first_name": {
                          "type": "string",
                          "description": "The first name of related user."
                        },
                        "username": {
                          "type": "string",
                          "format": "email",
                          "description": "The username of the related user. This is always an email address."
                        },
                        "language": {
                          "type": "string",
                          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB."
                        }
                      }
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The token is invalid or expired."
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "description": "This serializer must be kept in sync with `UserSerializer`.",
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "language": {
            "type": "string",
            "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
            "maxLength": 10,
            "minLength": 2
          }
        },
        "required": [
          "first_name"
        ]
      },
      "AdminDashboard": {
        "type": "object",
        "properties": {
          "total_users": {
            "type": "integer"
          },
          "total_groups": {
            "type": "integer"
          },
          "total_applications": {
            "type": "integer"
          },
          "new_users_last_24_hours": {
            "type": "integer"
          },
          "new_users_last_7_days": {
            "type": "integer"
          },
          "new_users_last_30_days": {
            "type": "integer"
          },
          "previous_new_users_last_24_hours": {
            "type": "integer"
          },
          "previous_new_users_last_7_days": {
            "type": "integer"
          },
          "previous_new_users_last_30_days": {
            "type": "integer"
          },
          "active_users_last_24_hours": {
            "type": "integer"
          },
          "active_users_last_7_days": {
            "type": "integer"
          },
          "active_users_last_30_days": {
            "type": "integer"
          },
          "previous_active_users_last_24_hours": {
            "type": "integer"
          },
          "previous_active_users_last_7_days": {
            "type": "integer"
          },
          "previous_active_users_last_30_days": {
            "type": "integer"
          },
          "new_users_per_day": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminDashboardPerDay"
            }
          },
          "active_users_per_day": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminDashboardPerDay"
            }
          }
        },
        "required": [
          "active_users_last_24_hours",
          "active_users_last_30_days",
          "active_users_last_7_days",
          "active_users_per_day",
          "new_users_last_24_hours",
          "new_users_last_30_days",
          "new_users_last_7_days",
          "new_users_per_day",
          "previous_active_users_last_24_hours",
          "previous_active_users_last_30_days",
          "previous_active_users_last_7_days",
          "previous_new_users_last_24_hours",
          "previous_new_users_last_30_days",
          "previous_new_users_last_7_days",
          "total_applications",
          "total_groups",
          "total_users"
        ]
      },
      "AdminDashboardPerDay": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "count",
          "date"
        ]
      },
      "AggregationRawTypeEnum": {
        "enum": [
          "empty_count",
          "not_empty_count",
          "unique_count",
          "min",
          "max",
          "sum",
          "average",
          "median",
          "decile",
          "variance",
          "std_dev"
        ],
        "type": "string"
      },
      "AirtableImportJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "group_id": {
            "type": "integer",
            "description": "The group where the Airtable base must be imported into.",
            "readOnly": true
          },
          "airtable_share_id": {
            "type": "string",
            "description": "Public ID of the shared Airtable base that must be imported.",
            "maxLength": 18
          },
          "progress_percentage": {
            "type": "integer",
            "description": "A percentage indicating how far along the import job is. 100 means that it's finished."
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "state": {
            "type": "string",
            "description": "Indicates the state of the import job."
          },
          "human_readable_error": {
            "type": "string",
            "description": "A human readable error message indicating what went wrong."
          },
          "database": {
            "$ref": "#/components/schemas/Application"
          }
        },
        "required": [
          "airtable_share_id",
          "database",
          "group_id",
          "id",
          "progress_percentage",
          "state"
        ]
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Group"
              }
            ],
            "description": "The group that the application belongs to."
          }
        },
        "required": [
          "group",
          "id",
          "name",
          "order",
          "type"
        ]
      },
      "ApplicationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 160
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationCreateTypeEnum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "ApplicationCreateTypeEnum": {
        "enum": [
          "database"
        ],
        "type": "string"
      },
      "Applications": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DatabaseApplication"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "database": "#/components/schemas/DatabaseApplication"
          }
        }
      },
      "ArrayFormulaTypeEnum": {
        "enum": [
          "invalid",
          "text",
          "char",
          "date_interval",
          "date",
          "boolean",
          "number",
          "single_select"
        ],
        "type": "string"
      },
      "BaseExporterOptions": {
        "type": "object",
        "properties": {
          "view_id": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "Optional: The view for this table to export using its filters, sorts and other view specific settings."
          },
          "exporter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExporterTypeEnum"
              }
            ],
            "description": "The file type to export to."
          },
          "export_charset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCharsetEnum"
              }
            ],
            "default": "utf-8",
            "description": "The character set to use when creating the export file."
          }
        },
        "required": [
          "exporter_type"
        ]
      },
      "BlankEnum": {
        "enum": [
          ""
        ]
      },
      "BooleanFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "BooleanFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "BooleanFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "BooleanFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "ChangePasswordBodyValidation": {
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string"
          },
          "new_password": {
            "type": "string"
          }
        },
        "required": [
          "new_password",
          "old_password"
        ]
      },
      "CreateAirtableImportJob": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "description": "The group ID where the Airtable base must be imported into."
          },
          "airtable_share_url": {
            "type": "string",
            "format": "uri",
            "description": "The publicly shared URL of the Airtable base (e.g. https://airtable.com/shrxxxxxxxxxxxxxx)"
          },
          "timezone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimezoneEnum"
              }
            ],
            "description": "Optionally a timezone can be provided that must be respected during import. This is for example setting the correct value of the date fields."
          }
        },
        "required": [
          "airtable_share_url",
          "group_id"
        ]
      },
      "CreateGroupInvitation": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
            "maxLength": 254
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user is going to get within the group after accepting the invitation."
          },
          "message": {
            "type": "string",
            "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation."
          },
          "base_url": {
            "type": "string",
            "format": "uri",
            "description": "The base URL where the user can publicly accept his invitation.The accept token is going to be appended to the base_url (base_url '/token')."
          }
        },
        "required": [
          "base_url",
          "email"
        ]
      },
      "CreateViewFilter": {
        "type": "object",
        "properties": {
          "field": {
            "type": "integer",
            "description": "The field of which the value must be compared to the filter value."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TypeA00Enum"
              }
            ],
            "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`)."
          },
          "value": {
            "type": "string",
            "default": "",
            "description": "The filter value that must be compared to the field's value.",
            "maxLength": 255
          }
        },
        "required": [
          "field",
          "type"
        ]
      },
      "CreateViewSort": {
        "type": "object",
        "properties": {
          "field": {
            "type": "integer",
            "description": "The field that must be sorted on."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderEnum"
              }
            ],
            "default": "ASC",
            "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
          }
        },
        "required": [
          "field"
        ]
      },
      "CreatedOnFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "name",
          "timezone",
          "type"
        ]
      },
      "CreatedOnFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "timezone",
          "type"
        ]
      },
      "CreatedOnFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "timezone",
          "type"
        ]
      },
      "CreatedOnFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "timezone"
        ]
      },
      "CsvColumnSeparatorEnum": {
        "enum": [
          ",",
          ";",
          "|",
          "tab",
          "record_separator",
          "unit_separator"
        ],
        "type": "string"
      },
      "CsvExporterOptions": {
        "type": "object",
        "properties": {
          "view_id": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "Optional: The view for this table to export using its filters, sorts and other view specific settings."
          },
          "exporter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExporterTypeEnum"
              }
            ],
            "description": "The file type to export to."
          },
          "export_charset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCharsetEnum"
              }
            ],
            "default": "utf-8",
            "description": "The character set to use when creating the export file."
          },
          "csv_column_separator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CsvColumnSeparatorEnum"
              }
            ],
            "default": ",",
            "description": "The value used to separate columns in the resulting csv file."
          },
          "csv_include_header": {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to generate a header row at the top of the csv file."
          }
        },
        "required": [
          "exporter_type"
        ]
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "group_invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupInvitation"
            }
          }
        },
        "required": [
          "group_invitations"
        ]
      },
      "DatabaseApplication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Group"
              }
            ],
            "description": "The group that the application belongs to."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            },
            "readOnly": true,
            "description": "This field is specific to the `database` application and contains an array of tables that are in the database."
          }
        },
        "required": [
          "group",
          "id",
          "name",
          "order",
          "tables",
          "type"
        ]
      },
      "DateFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "DateFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "DateFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "DateFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          }
        }
      },
      "DateFormatEnum": {
        "enum": [
          "EU",
          "US",
          "ISO"
        ],
        "type": "string"
      },
      "DateTimeFormatEnum": {
        "enum": [
          "24",
          "12"
        ],
        "type": "string"
      },
      "EmailFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "EmailFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "EmailFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "EmailFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "EventTypeEnum": {
        "enum": [
          "row.created",
          "row.updated",
          "row.deleted"
        ],
        "type": "string"
      },
      "EventsEnum": {
        "enum": [
          "row.created",
          "row.updated",
          "row.deleted"
        ],
        "type": "string"
      },
      "ExampleRowRequest": {
        "type": "object",
        "properties": {
          "field_1": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field."
          },
          "field_2": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field."
          },
          "field_3": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field."
          },
          "field_4": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.",
            "maxLength": 254
          },
          "field_5": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
            "nullable": true,
            "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field."
          },
          "field_6": {
            "type": "integer",
            "maximum": 5,
            "minimum": 0,
            "default": 0,
            "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field."
          },
          "field_7": {
            "type": "boolean",
            "default": false,
            "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field."
          },
          "field_8": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field."
          },
          "field_9": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field."
          },
          "field_10": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field."
          },
          "field_11": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            },
            "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes."
          },
          "field_12": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileFieldRequest"
            },
            "nullable": true,
            "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files."
          },
          "field_13": {
            "type": "integer",
            "nullable": true,
            "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed."
          },
          "field_14": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true,
              "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field.This field accepts a list of `integer` each of which representing thechosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field,but also the value and color is exposed."
            }
          },
          "field_15": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field.",
            "maxLength": 100
          },
          "field_16": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field."
          },
          "field_17": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field."
          }
        }
      },
      "ExampleRowRequestSerializerWithUserFieldNames": {
        "type": "object",
        "properties": {
          "field_1": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_2": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_3": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_4": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 254
          },
          "field_5": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
            "nullable": true,
            "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_6": {
            "type": "integer",
            "maximum": 5,
            "minimum": 0,
            "default": 0,
            "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_7": {
            "type": "boolean",
            "default": false,
            "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_8": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_9": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_10": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_11": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            },
            "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes."
          },
          "field_12": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileFieldRequest"
            },
            "nullable": true,
            "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files."
          },
          "field_13": {
            "type": "integer",
            "nullable": true,
            "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed."
          },
          "field_14": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true,
              "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing thechosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field,but also the value and color is exposed."
            }
          },
          "field_15": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 100
          },
          "field_16": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_17": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          }
        }
      },
      "ExampleRowResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "The unique identifier of the row in the table."
          },
          "order": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,20}(?:\\.\\d{0,20})?$",
            "description": "Indicates the position of the row, lowest first and highest last."
          },
          "field_1": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field."
          },
          "field_2": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field."
          },
          "field_3": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field."
          },
          "field_4": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.",
            "maxLength": 254
          },
          "field_5": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
            "nullable": true,
            "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field."
          },
          "field_6": {
            "type": "integer",
            "maximum": 5,
            "minimum": 0,
            "default": 0,
            "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field."
          },
          "field_7": {
            "type": "boolean",
            "default": false,
            "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field."
          },
          "field_8": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field."
          },
          "field_9": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field."
          },
          "field_10": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field."
          },
          "field_11": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkRowValue"
            },
            "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes."
          },
          "field_12": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileFieldResponse"
            },
            "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files."
          },
          "field_13": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectOption"
              }
            ],
            "nullable": true,
            "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed."
          },
          "field_14": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            },
            "nullable": true,
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field.This field accepts a list of `integer` each of which representing thechosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field,but also the value and color is exposed."
          },
          "field_15": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field.",
            "maxLength": 100
          },
          "field_16": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field."
          },
          "field_17": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field."
          }
        },
        "required": [
          "id"
        ]
      },
      "ExampleRowResponseSerializerWithUserFieldNames": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "The unique identifier of the row in the table."
          },
          "order": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,20}(?:\\.\\d{0,20})?$",
            "description": "Indicates the position of the row, lowest first and highest last."
          },
          "field_1": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_2": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_3": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_4": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 254
          },
          "field_5": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
            "nullable": true,
            "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_6": {
            "type": "integer",
            "maximum": 5,
            "minimum": 0,
            "default": 0,
            "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_7": {
            "type": "boolean",
            "default": false,
            "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_8": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_9": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_10": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_11": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkRowValue"
            },
            "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes."
          },
          "field_12": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileFieldResponse"
            },
            "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files."
          },
          "field_13": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectOption"
              }
            ],
            "nullable": true,
            "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed."
          },
          "field_14": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            },
            "nullable": true,
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing thechosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field,but also the value and color is exposed."
          },
          "field_15": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 100
          },
          "field_16": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_17": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          }
        },
        "required": [
          "id"
        ]
      },
      "Export": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CsvExporterOptions"
          },
          {
            "$ref": "#/components/schemas/BaseExporterOptions"
          },
          {
            "$ref": "#/components/schemas/BaseExporterOptions"
          }
        ],
        "discriminator": {
          "propertyName": "exporter_type",
          "mapping": {
            "csv": "#/components/schemas/CsvExporterOptions",
            "json": "#/components/schemas/BaseExporterOptions",
            "xml": "#/components/schemas/BaseExporterOptions"
          }
        }
      },
      "ExportCharsetEnum": {
        "enum": [
          "utf-8",
          "iso-8859-6",
          "windows-1256",
          "iso-8859-4",
          "windows-1257",
          "iso-8859-14",
          "iso-8859-2",
          "windows-1250",
          "gbk",
          "gb18030",
          "big5",
          "koi8-r",
          "koi8-u",
          "iso-8859-5",
          "windows-1251",
          "x-mac-cyrillic",
          "iso-8859-7",
          "windows-1253",
          "iso-8859-8",
          "windows-1255",
          "euc-jp",
          "iso-2022-jp",
          "shift-jis",
          "euc-kr",
          "macintosh",
          "iso-8859-10",
          "iso-8859-16",
          "windows-874",
          "windows-1254",
          "windows-1258",
          "iso-8859-1",
          "windows-1252",
          "iso-8859-3"
        ],
        "type": "string"
      },
      "ExportJob": {
        "type": "object",
        "description": "When mixed in to a model serializer for an ExportJob this will add an url field\nwith the actual usable url of the export job's file (if it has one).",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table": {
            "type": "integer"
          },
          "view": {
            "type": "integer",
            "nullable": true
          },
          "exporter_type": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "exported_file_name": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "progress_percentage": {
            "type": "number",
            "format": "float"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "exporter_type",
          "id",
          "status",
          "table",
          "url"
        ]
      },
      "ExporterTypeEnum": {
        "enum": [
          "csv",
          "json",
          "xml"
        ],
        "type": "string"
      },
      "Field": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "FieldCreateField": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/LongTextFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/URLFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/EmailFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/NumberFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/RatingFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/BooleanFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/DateFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/LastModifiedFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/CreatedOnFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/LinkRowFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/FileFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/SingleSelectFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/MultipleSelectFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/PhoneNumberFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/FormulaFieldCreateField"
          },
          {
            "$ref": "#/components/schemas/LookupFieldCreateField"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/TextFieldCreateField",
            "long_text": "#/components/schemas/LongTextFieldCreateField",
            "url": "#/components/schemas/URLFieldCreateField",
            "email": "#/components/schemas/EmailFieldCreateField",
            "number": "#/components/schemas/NumberFieldCreateField",
            "rating": "#/components/schemas/RatingFieldCreateField",
            "boolean": "#/components/schemas/BooleanFieldCreateField",
            "date": "#/components/schemas/DateFieldCreateField",
            "last_modified": "#/components/schemas/LastModifiedFieldCreateField",
            "created_on": "#/components/schemas/CreatedOnFieldCreateField",
            "link_row": "#/components/schemas/LinkRowFieldCreateField",
            "file": "#/components/schemas/FileFieldCreateField",
            "single_select": "#/components/schemas/SingleSelectFieldCreateField",
            "multiple_select": "#/components/schemas/MultipleSelectFieldCreateField",
            "phone_number": "#/components/schemas/PhoneNumberFieldCreateField",
            "formula": "#/components/schemas/FormulaFieldCreateField",
            "lookup": "#/components/schemas/LookupFieldCreateField"
          }
        }
      },
      "FieldField": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextFieldField"
          },
          {
            "$ref": "#/components/schemas/LongTextFieldField"
          },
          {
            "$ref": "#/components/schemas/URLFieldField"
          },
          {
            "$ref": "#/components/schemas/EmailFieldField"
          },
          {
            "$ref": "#/components/schemas/NumberFieldField"
          },
          {
            "$ref": "#/components/schemas/RatingFieldField"
          },
          {
            "$ref": "#/components/schemas/BooleanFieldField"
          },
          {
            "$ref": "#/components/schemas/DateFieldField"
          },
          {
            "$ref": "#/components/schemas/LastModifiedFieldField"
          },
          {
            "$ref": "#/components/schemas/CreatedOnFieldField"
          },
          {
            "$ref": "#/components/schemas/LinkRowFieldField"
          },
          {
            "$ref": "#/components/schemas/FileFieldField"
          },
          {
            "$ref": "#/components/schemas/SingleSelectFieldField"
          },
          {
            "$ref": "#/components/schemas/MultipleSelectFieldField"
          },
          {
            "$ref": "#/components/schemas/PhoneNumberFieldField"
          },
          {
            "$ref": "#/components/schemas/FormulaFieldField"
          },
          {
            "$ref": "#/components/schemas/LookupFieldField"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/TextFieldField",
            "long_text": "#/components/schemas/LongTextFieldField",
            "url": "#/components/schemas/URLFieldField",
            "email": "#/components/schemas/EmailFieldField",
            "number": "#/components/schemas/NumberFieldField",
            "rating": "#/components/schemas/RatingFieldField",
            "boolean": "#/components/schemas/BooleanFieldField",
            "date": "#/components/schemas/DateFieldField",
            "last_modified": "#/components/schemas/LastModifiedFieldField",
            "created_on": "#/components/schemas/CreatedOnFieldField",
            "link_row": "#/components/schemas/LinkRowFieldField",
            "file": "#/components/schemas/FileFieldField",
            "single_select": "#/components/schemas/SingleSelectFieldField",
            "multiple_select": "#/components/schemas/MultipleSelectFieldField",
            "phone_number": "#/components/schemas/PhoneNumberFieldField",
            "formula": "#/components/schemas/FormulaFieldField",
            "lookup": "#/components/schemas/LookupFieldField"
          }
        }
      },
      "FieldFieldSerializerWithRelatedFields": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/LongTextFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/URLFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/EmailFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/NumberFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/RatingFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/BooleanFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/DateFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/LastModifiedFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/CreatedOnFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/LinkRowFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/FileFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/SingleSelectFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/MultipleSelectFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/PhoneNumberFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/FormulaFieldFieldSerializerWithRelatedFields"
          },
          {
            "$ref": "#/components/schemas/LookupFieldFieldSerializerWithRelatedFields"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/TextFieldFieldSerializerWithRelatedFields",
            "long_text": "#/components/schemas/LongTextFieldFieldSerializerWithRelatedFields",
            "url": "#/components/schemas/URLFieldFieldSerializerWithRelatedFields",
            "email": "#/components/schemas/EmailFieldFieldSerializerWithRelatedFields",
            "number": "#/components/schemas/NumberFieldFieldSerializerWithRelatedFields",
            "rating": "#/components/schemas/RatingFieldFieldSerializerWithRelatedFields",
            "boolean": "#/components/schemas/BooleanFieldFieldSerializerWithRelatedFields",
            "date": "#/components/schemas/DateFieldFieldSerializerWithRelatedFields",
            "last_modified": "#/components/schemas/LastModifiedFieldFieldSerializerWithRelatedFields",
            "created_on": "#/components/schemas/CreatedOnFieldFieldSerializerWithRelatedFields",
            "link_row": "#/components/schemas/LinkRowFieldFieldSerializerWithRelatedFields",
            "file": "#/components/schemas/FileFieldFieldSerializerWithRelatedFields",
            "single_select": "#/components/schemas/SingleSelectFieldFieldSerializerWithRelatedFields",
            "multiple_select": "#/components/schemas/MultipleSelectFieldFieldSerializerWithRelatedFields",
            "phone_number": "#/components/schemas/PhoneNumberFieldFieldSerializerWithRelatedFields",
            "formula": "#/components/schemas/FormulaFieldFieldSerializerWithRelatedFields",
            "lookup": "#/components/schemas/LookupFieldFieldSerializerWithRelatedFields"
          }
        }
      },
      "FileFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "FileFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "FileFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "FileFieldRequest": {
        "type": "object",
        "properties": {
          "visible_name": {
            "type": "string",
            "description": "A visually editable name for the field."
          },
          "name": {
            "type": "string",
            "description": "Accepts the name of the already uploaded user file."
          }
        },
        "required": [
          "name"
        ]
      },
      "FileFieldResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "thumbnails": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "visible_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "mime_type": {
            "type": "string"
          },
          "is_image": {
            "type": "boolean"
          },
          "image_width": {
            "type": "integer"
          },
          "image_height": {
            "type": "integer"
          },
          "uploaded_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "image_height",
          "image_width",
          "is_image",
          "mime_type",
          "name",
          "size",
          "thumbnails",
          "uploaded_at",
          "url",
          "visible_name"
        ]
      },
      "FileFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "FilterTypeEnum": {
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "FormViewCreateView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type247Enum"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "title": {
            "type": "string",
            "description": "The title that is displayed at the beginning of the form."
          },
          "description": {
            "type": "string",
            "description": "The description that is displayed at the beginning of the form."
          },
          "cover_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The cover image that must be displayed at the top of the form."
          },
          "logo_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The logo image that must be displayed at the top of the form."
          },
          "submit_text": {
            "type": "string",
            "description": "The text displayed on the submit button."
          },
          "submit_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmitActionEnum"
              }
            ],
            "description": "The action that must be performed after the visitor has filled out the form."
          },
          "submit_action_message": {
            "type": "string",
            "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form."
          },
          "submit_action_redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
            "maxLength": 200
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "name",
          "slug",
          "type"
        ]
      },
      "FormViewFieldOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "By default, the name of the related field will be shown to the visitor. Optionally another name can be used by setting this name.",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "If provided, then this value be will be shown under the field name."
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the field is included in the form."
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the field is required for the visitor to fill out."
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "description": "The order that the field has in the form. Lower value is first."
          }
        }
      },
      "FormViewSubmitted": {
        "type": "object",
        "properties": {
          "submit_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmitActionEnum"
              }
            ],
            "description": "The action that must be performed after the visitor has filled out the form."
          },
          "submit_action_message": {
            "type": "string",
            "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form."
          },
          "submit_action_redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
            "maxLength": 200
          }
        }
      },
      "FormViewView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          "sortings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewSort"
            }
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "title": {
            "type": "string",
            "description": "The title that is displayed at the beginning of the form."
          },
          "description": {
            "type": "string",
            "description": "The description that is displayed at the beginning of the form."
          },
          "cover_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The cover image that must be displayed at the top of the form."
          },
          "logo_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The logo image that must be displayed at the top of the form."
          },
          "submit_text": {
            "type": "string",
            "description": "The text displayed on the submit button."
          },
          "submit_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmitActionEnum"
              }
            ],
            "description": "The action that must be performed after the visitor has filled out the form."
          },
          "submit_action_message": {
            "type": "string",
            "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form."
          },
          "submit_action_redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
            "maxLength": 200
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "slug",
          "table",
          "table_id",
          "type"
        ]
      },
      "FormulaFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "formula": {
            "type": "string"
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "formula",
          "name",
          "type"
        ]
      },
      "FormulaFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "formula": {
            "type": "string"
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "formula",
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "FormulaFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "formula": {
            "type": "string"
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "formula",
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "FormulaFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "formula": {
            "type": "string"
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "formula"
        ]
      },
      "FormulaTypeEnum": {
        "enum": [
          "invalid",
          "text",
          "char",
          "date_interval",
          "date",
          "boolean",
          "number",
          "array",
          "single_select"
        ],
        "type": "string"
      },
      "GalleryViewCreateView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type247Enum"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "GalleryViewFieldOptions": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "Whether or not the field should be hidden in the card."
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "description": "The order that the field has in the form. Lower value is first."
          }
        }
      },
      "GalleryViewView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          "sortings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewSort"
            }
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table",
          "table_id",
          "type"
        ]
      },
      "GridViewCreateView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type247Enum"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "name",
          "slug",
          "type"
        ]
      },
      "GridViewFieldOptions": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "The width of the table field in the related view."
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether or not the field should be hidden in the current view."
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "description": "The position that the field has within the view, lowest first. If there is another field with the same order value then the field with the lowest id must be shown first."
          },
          "aggregation_type": {
            "type": "string",
            "description": "Indicates how the field value is aggregated. This value is different from the `aggregation_raw_type`. The `aggregation_raw_type` is the value extracted from the database, while the `aggregation_type` can implies further calculations. For example: if you want to compute an average, `sum` is going to be the `aggregation_raw_type`, the value extracted from database, and `sum / row_count` will be the aggregation result displayed to the user. This aggregation_type should be used by the client to compute the final value.",
            "maxLength": 48
          },
          "aggregation_raw_type": {
            "default": "",
            "description": "Indicates how to compute the raw aggregation value from database. This type must be registered in the backend prior to use it.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregationRawTypeEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              }
            ]
          }
        }
      },
      "GridViewFilter": {
        "type": "object",
        "properties": {
          "field_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Only the fields related to the provided ids are added to the response. If None are provided all fields will be returned."
          },
          "row_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Only rows related to the provided ids are added to the response."
          }
        },
        "required": [
          "row_ids"
        ]
      },
      "GridViewView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          "sortings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewSort"
            }
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "slug",
          "table",
          "table_id",
          "type"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GroupAdminUsers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user has within the group."
          }
        },
        "required": [
          "email",
          "id"
        ]
      },
      "GroupInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "group": {
            "type": "integer",
            "description": "The group that the user will get access to once the invitation is accepted."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
            "maxLength": 254
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user is going to get within the group after accepting the invitation."
          },
          "message": {
            "type": "string",
            "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_on",
          "email",
          "group",
          "id"
        ]
      },
      "GroupUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "group": {
            "type": "integer",
            "description": "The group that the user has access to."
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user has within the group."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_on",
          "email",
          "group",
          "id",
          "name"
        ]
      },
      "GroupUserGroup": {
        "type": "object",
        "description": "This serializers returns all the fields that the GroupSerializer has, but also\nsome user specific values related to the group user relation.",
        "properties": {
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Unique order that the group has for the user."
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user has within the group."
          }
        },
        "required": [
          "order"
        ]
      },
      "GroupsAdminResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupAdminUsers"
            }
          },
          "application_count": {
            "type": "integer"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "application_count",
          "created_on",
          "id",
          "name",
          "users"
        ]
      },
      "InstanceId": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string",
            "readOnly": true,
            "pattern": "^[-a-zA-Z0-9_]+$"
          }
        },
        "required": [
          "instance_id"
        ]
      },
      "KanbanViewCreateView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type247Enum"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "single_select_field": {
            "type": "integer",
            "nullable": true
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "KanbanViewExampleResponse": {
        "type": "object",
        "properties": {
          "OPTION_ID": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KanbanViewExampleResponseStack"
              }
            ],
            "description": "Every select option related to the view's single select field can have its own entry like this."
          },
          "field_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KanbanViewFieldOptions"
            }
          }
        },
        "required": [
          "OPTION_ID",
          "field_options"
        ]
      },
      "KanbanViewExampleResponseStack": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total count of rows that are included in this group."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExampleRowResponse"
            },
            "description": "All the rows that belong in this group related with the provided `limit` and `offset`."
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "KanbanViewFieldOptions": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "Whether or not the field should be hidden in the card."
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "description": "The order that the field has in the form. Lower value is first."
          }
        }
      },
      "KanbanViewView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          "sortings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewSort"
            }
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "single_select_field": {
            "type": "integer",
            "nullable": true
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table",
          "table_id",
          "type"
        ]
      },
      "LastModifiedFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "name",
          "timezone",
          "type"
        ]
      },
      "LastModifiedFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "timezone",
          "type"
        ]
      },
      "LastModifiedFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "timezone",
          "type"
        ]
      },
      "LastModifiedFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              }
            ],
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
          },
          "date_include_time": {
            "type": "boolean",
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              }
            ],
            "description": "24 (14:30) or 12 (02:30 PM)"
          },
          "timezone": {
            "$ref": "#/components/schemas/TimezoneEnum"
          }
        },
        "required": [
          "timezone"
        ]
      },
      "LinkRowFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "link_row_table": {
            "type": "integer",
            "description": "The table that the field has a relation with."
          },
          "link_row_related_field": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "link_row_related_field",
          "name",
          "type"
        ]
      },
      "LinkRowFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "link_row_table": {
            "type": "integer",
            "description": "The table that the field has a relation with."
          },
          "link_row_related_field": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "link_row_related_field",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "LinkRowFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "link_row_table": {
            "type": "integer",
            "description": "The table that the field has a relation with."
          },
          "link_row_related_field": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "link_row_related_field",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "LinkRowFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "link_row_table": {
            "type": "integer",
            "description": "The table that the field has a relation with."
          },
          "link_row_related_field": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "link_row_related_field"
        ]
      },
      "LinkRowValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "The unique identifier of the row in the related table."
          },
          "value": {
            "type": "string",
            "description": "The primary field's value as a string of the row in the related table."
          }
        },
        "required": [
          "id"
        ]
      },
      "LongTextFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "LongTextFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "LongTextFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "LongTextFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "LookupFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "through_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required."
          },
          "through_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the link row field to lookup values for."
          },
          "target_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required."
          },
          "target_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the field in the table linked to by the through_field to lookup."
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "LookupFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "through_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required."
          },
          "through_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the link row field to lookup values for."
          },
          "target_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required."
          },
          "target_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the field in the table linked to by the through_field to lookup."
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "LookupFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "through_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required."
          },
          "through_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the link row field to lookup values for."
          },
          "target_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required."
          },
          "target_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the field in the table linked to by the through_field to lookup."
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "LookupFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "through_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required."
          },
          "through_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the link row field to lookup values for."
          },
          "target_field_id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required."
          },
          "target_field_name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the field in the table linked to by the through_field to lookup."
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        }
      },
      "MultipleSelectFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "MultipleSelectFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "MultipleSelectFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "MultipleSelectFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        }
      },
      "NormalizedEmailWebToken": {
        "type": "object",
        "description": "Serializer class used to validate a username and password.\n\n'username' is identified by the custom UserModel.USERNAME_FIELD.\n\nReturns a JSON Web Token that can be used to authenticate later calls.",
        "properties": {
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "token": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "password",
          "token",
          "username"
        ]
      },
      "NullEnum": {
        "enum": [
          null
        ]
      },
      "NumberDecimalPlacesB02Enum": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer"
      },
      "NumberFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "number_decimal_places": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              }
            ],
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "number_negative": {
            "type": "boolean",
            "description": "Indicates if negative values are allowed."
          },
          "number_type": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "NumberFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "number_decimal_places": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              }
            ],
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "number_negative": {
            "type": "boolean",
            "description": "Indicates if negative values are allowed."
          },
          "number_type": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "NumberFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "number_decimal_places": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              }
            ],
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "number_negative": {
            "type": "boolean",
            "description": "Indicates if negative values are allowed."
          },
          "number_type": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "NumberFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "number_decimal_places": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              }
            ],
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "number_negative": {
            "type": "boolean",
            "description": "Indicates if negative values are allowed."
          },
          "number_type": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "OrderApplications": {
        "type": "object",
        "properties": {
          "application_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Application ids in the desired order."
          }
        },
        "required": [
          "application_ids"
        ]
      },
      "OrderEnum": {
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      },
      "OrderGroups": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Group ids in the desired order."
          }
        },
        "required": [
          "groups"
        ]
      },
      "OrderTables": {
        "type": "object",
        "properties": {
          "table_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Table ids in the desired order."
          }
        },
        "required": [
          "table_ids"
        ]
      },
      "OrderViews": {
        "type": "object",
        "properties": {
          "view_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "View ids in the desired order."
          }
        },
        "required": [
          "view_ids"
        ]
      },
      "PaginationSerializerExampleRowResponseSerializerWithUserFieldNames": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExampleRowResponseSerializerWithUserFieldNames"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerLinkRowValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkRowValue"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerPremiumLicenseUserLookup": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PremiumLicenseUserLookup"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerRowComment": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowComment"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerTrashContents": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrashContents"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GalleryViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          },
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExampleRowResponse"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PaginationSerializerWithGridViewFieldOptionsExampleRowResponse": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GridViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          },
          "row_metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RowMetadata"
            },
            "description": "An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so."
          },
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExampleRowResponse"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PatchedAccount": {
        "type": "object",
        "description": "This serializer must be kept in sync with `UserSerializer`.",
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "language": {
            "type": "string",
            "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
            "maxLength": 10,
            "minLength": 2
          }
        }
      },
      "PatchedApplicationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 160
          }
        }
      },
      "PatchedExampleRowRequestSerializerWithUserFieldNames": {
        "type": "object",
        "properties": {
          "field_1": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_2": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_3": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_4": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 254
          },
          "field_5": {
            "type": "string",
            "format": "decimal",
            "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
            "nullable": true,
            "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_6": {
            "type": "integer",
            "maximum": 5,
            "minimum": 0,
            "default": 0,
            "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_7": {
            "type": "boolean",
            "default": false,
            "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_8": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_9": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_10": {
            "type": "string",
            "format": "date-time",
            "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_11": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            },
            "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes."
          },
          "field_12": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileFieldRequest"
            },
            "nullable": true,
            "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files."
          },
          "field_13": {
            "type": "integer",
            "nullable": true,
            "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed."
          },
          "field_14": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true,
              "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing thechosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field,but also the value and color is exposed."
            }
          },
          "field_15": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
            "maxLength": 100
          },
          "field_16": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          },
          "field_17": {
            "type": "string",
            "nullable": true,
            "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field."
          }
        }
      },
      "PatchedFieldUpdateField": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/LongTextFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/URLFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/EmailFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/NumberFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/RatingFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/BooleanFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/DateFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/LastModifiedFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/CreatedOnFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/LinkRowFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/FileFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/SingleSelectFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/MultipleSelectFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/PhoneNumberFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/FormulaFieldUpdateField"
          },
          {
            "$ref": "#/components/schemas/LookupFieldUpdateField"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/TextFieldUpdateField",
            "long_text": "#/components/schemas/LongTextFieldUpdateField",
            "url": "#/components/schemas/URLFieldUpdateField",
            "email": "#/components/schemas/EmailFieldUpdateField",
            "number": "#/components/schemas/NumberFieldUpdateField",
            "rating": "#/components/schemas/RatingFieldUpdateField",
            "boolean": "#/components/schemas/BooleanFieldUpdateField",
            "date": "#/components/schemas/DateFieldUpdateField",
            "last_modified": "#/components/schemas/LastModifiedFieldUpdateField",
            "created_on": "#/components/schemas/CreatedOnFieldUpdateField",
            "link_row": "#/components/schemas/LinkRowFieldUpdateField",
            "file": "#/components/schemas/FileFieldUpdateField",
            "single_select": "#/components/schemas/SingleSelectFieldUpdateField",
            "multiple_select": "#/components/schemas/MultipleSelectFieldUpdateField",
            "phone_number": "#/components/schemas/PhoneNumberFieldUpdateField",
            "formula": "#/components/schemas/FormulaFieldUpdateField",
            "lookup": "#/components/schemas/LookupFieldUpdateField"
          }
        }
      },
      "PatchedGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          }
        }
      },
      "PatchedSettings": {
        "type": "object",
        "properties": {
          "allow_new_signups": {
            "type": "boolean",
            "description": "Indicates whether new users can create a new account when signing up."
          },
          "allow_signups_via_group_invitations": {
            "type": "boolean",
            "description": "Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled."
          }
        }
      },
      "PatchedTableUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "PatchedTableWebhookUpdateRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL that must be called when the webhook is triggered.",
            "maxLength": 2000
          },
          "include_all_events": {
            "type": "boolean",
            "description": "Indicates whether this webhook should listen to all events."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventsEnum"
            },
            "description": "A list containing the events that will trigger this webhook."
          },
          "request_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestMethodEnum"
              }
            ],
            "description": "The request method that be used when the event occurs."
          },
          "headers": {
            "type": "object",
            "additionalProperties": {},
            "description": "The additional headers as an object where the key is the name and the value the value."
          },
          "name": {
            "type": "string",
            "description": "An internal name of the webhook.",
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated."
          },
          "use_user_field_names": {
            "type": "boolean",
            "description": "Indicates whether the field names must be used as payload key instead of the id."
          }
        }
      },
      "PatchedTokenUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name of the token for the user.",
            "maxLength": 100
          },
          "permissions": {
            "type": "object",
            "description": "Indicates per operation which permissions the API token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[[\"database\", 1]]` means create permissions for all tables in the database with id 1.\n\nExample:\n```json\n{\n  \"create\": true// Allows creating rows in all tables.\n  // Allows reading rows from database 1 and table 10.\n  \"read\": [[\"database\", 1], [\"table\", 10]],\n  \"update\": false  // Denies updating rows in all tables.\n  \"delete\": []  // Denies deleting rows in all tables.\n }\n```",
            "properties": {
              "create": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "read": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "update": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "delete": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "rotate_key": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if a new key must be generated."
          }
        }
      },
      "PatchedTrashEntryRequest": {
        "type": "object",
        "description": "Mixin to a DRF serializer class to raise an exception if data with unknown fields\nis provided to the serializer.",
        "properties": {
          "trash_item_id": {
            "type": "integer",
            "minimum": 0
          },
          "parent_trash_item_id": {
            "type": "integer",
            "minimum": 0,
            "nullable": true
          },
          "trash_item_type": {
            "$ref": "#/components/schemas/TrashItemTypeEnum"
          }
        }
      },
      "PatchedUpdateGroupInvitation": {
        "type": "object",
        "properties": {
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user is going to get within the group after accepting the invitation."
          }
        }
      },
      "PatchedUpdateGroupUser": {
        "type": "object",
        "properties": {
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user has within the group."
          }
        }
      },
      "PatchedUpdateViewFilter": {
        "type": "object",
        "properties": {
          "field": {
            "type": "integer",
            "description": "The field of which the value must be compared to the filter value."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TypeA00Enum"
              }
            ],
            "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`)."
          },
          "value": {
            "type": "string",
            "description": "The filter value that must be compared to the field's value.",
            "maxLength": 255
          }
        }
      },
      "PatchedUpdateViewSort": {
        "type": "object",
        "properties": {
          "field": {
            "type": "integer",
            "description": "The field that must be sorted on."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderEnum"
              }
            ],
            "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
          }
        }
      },
      "PatchedUserAdminUpdate": {
        "type": "object",
        "description": "Serializes a request body for updating a given user. Do not use for returning user\ndata as the password will be returned also.",
        "properties": {
          "username": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string",
            "maxLength": 150
          },
          "is_active": {
            "type": "boolean",
            "title": "Active",
            "description": "Designates whether this user should be treated as active. Set this to false instead of deleting accounts."
          },
          "is_staff": {
            "type": "boolean",
            "title": "Staff status",
            "description": "Designates whether this user is an admin and has access to all groups and Baserow's admin areas. "
          },
          "password": {
            "type": "string"
          }
        }
      },
      "PatchedViewFieldOptions": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/grid_view_field_options"
          },
          {
            "$ref": "#/components/schemas/gallery_view_field_options"
          },
          {
            "$ref": "#/components/schemas/form_view_field_options"
          },
          {
            "$ref": "#/components/schemas/kanban_view_field_options"
          }
        ]
      },
      "PatchedViewUpdateView": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/grid_view_update"
          },
          {
            "$ref": "#/components/schemas/gallery_view_update"
          },
          {
            "$ref": "#/components/schemas/form_view_update"
          },
          {
            "$ref": "#/components/schemas/kanban_view_update"
          }
        ]
      },
      "PermissionsEnum": {
        "enum": [
          "ADMIN",
          "MEMBER"
        ],
        "type": "string"
      },
      "PhoneNumberFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "PhoneNumberFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "PhoneNumberFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "PhoneNumberFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "PremiumLicense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "license_id": {
            "type": "string",
            "description": "Unique identifier of the license."
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the backend deems the license valid."
          },
          "last_check": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "description": "From which timestamp the license becomes active."
          },
          "valid_through": {
            "type": "string",
            "format": "date-time",
            "description": "Until which timestamp the license is active."
          },
          "seats_taken": {
            "type": "integer",
            "readOnly": true,
            "description": "The amount of users that are currently using the license."
          },
          "seats": {
            "type": "integer",
            "description": "The maximum amount of users that can use the license."
          },
          "product_code": {
            "type": "string",
            "description": "The product code that indicates what the license unlocks."
          },
          "issued_on": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used."
          },
          "issued_to_email": {
            "type": "string",
            "format": "email",
            "description": "Indicates to which email address the license has been issued."
          },
          "issued_to_name": {
            "type": "string",
            "description": "Indicates to whom the license has been issued."
          }
        },
        "required": [
          "id",
          "is_active",
          "issued_on",
          "issued_to_email",
          "issued_to_name",
          "license_id",
          "product_code",
          "seats",
          "seats_taken",
          "valid_from",
          "valid_through"
        ]
      },
      "PremiumLicenseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          }
        },
        "required": [
          "id"
        ]
      },
      "PremiumLicenseUserLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "The name and the email address of the user."
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "PremiumLicenseWithUsers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "license_id": {
            "type": "string",
            "description": "Unique identifier of the license."
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the backend deems the license valid."
          },
          "last_check": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "description": "From which timestamp the license becomes active."
          },
          "valid_through": {
            "type": "string",
            "format": "date-time",
            "description": "Until which timestamp the license is active."
          },
          "seats_taken": {
            "type": "integer",
            "readOnly": true,
            "description": "The amount of users that are currently using the license."
          },
          "seats": {
            "type": "integer",
            "description": "The maximum amount of users that can use the license."
          },
          "product_code": {
            "type": "string",
            "description": "The product code that indicates what the license unlocks."
          },
          "issued_on": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used."
          },
          "issued_to_email": {
            "type": "string",
            "format": "email",
            "description": "Indicates to which email address the license has been issued."
          },
          "issued_to_name": {
            "type": "string",
            "description": "Indicates to whom the license has been issued."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PremiumLicenseUser"
            },
            "readOnly": true
          }
        },
        "required": [
          "id",
          "is_active",
          "issued_on",
          "issued_to_email",
          "issued_to_name",
          "license_id",
          "product_code",
          "seats",
          "seats_taken",
          "users",
          "valid_from",
          "valid_through"
        ]
      },
      "PublicField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "PublicFormView": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title that is displayed at the beginning of the form."
          },
          "description": {
            "type": "string",
            "description": "The description that is displayed at the beginning of the form."
          },
          "cover_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The user file cover image that is displayed at the top of the form."
          },
          "logo_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The user file logo image that is displayed at the top of the form."
          },
          "submit_text": {
            "type": "string",
            "description": "The text displayed on the submit button."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicFormViewFieldOptions"
            }
          }
        },
        "required": [
          "fields"
        ]
      },
      "PublicFormViewField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "PublicFormViewFieldOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "If provided, then this value will be visible above the field input."
          },
          "description": {
            "type": "string",
            "description": "If provided, then this value be will be shown under the field name."
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the field is required for the visitor to fill out."
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "description": "The order that the field has in the form. Lower value is first."
          },
          "field": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicFormViewField"
              }
            ],
            "readOnly": true,
            "description": "The properties of the related field. These can be used to construct the correct input. Additional properties could be added depending on the field type."
          }
        },
        "required": [
          "field",
          "name"
        ]
      },
      "PublicGridView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "table": {
            "$ref": "#/components/schemas/PublicGridViewTable"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "sortings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicViewSort"
            },
            "readOnly": true
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug where the view can be accessed publicly on.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "slug",
          "sortings",
          "table",
          "type"
        ]
      },
      "PublicGridViewInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicField"
            },
            "readOnly": true
          },
          "view": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicGridView"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "fields",
          "view"
        ]
      },
      "PublicGridViewTable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "database_id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "database_id",
          "id"
        ]
      },
      "PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GridViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          },
          "count": {
            "type": "integer",
            "description": "The total amount of results."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the next page."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExampleRowResponse"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PublicViewSort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "view": {
            "type": "string",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "field": {
            "type": "integer",
            "description": "The field that must be sorted on."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderEnum"
              }
            ],
            "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
          }
        },
        "required": [
          "field",
          "id",
          "view"
        ]
      },
      "RatingFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "max_value": {
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "description": "Maximum value the rating can take."
          },
          "color": {
            "type": "string",
            "description": "Color of the symbols.",
            "maxLength": 50
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StyleEnum"
              }
            ],
            "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "RatingFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "max_value": {
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "description": "Maximum value the rating can take."
          },
          "color": {
            "type": "string",
            "description": "Color of the symbols.",
            "maxLength": 50
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StyleEnum"
              }
            ],
            "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "RatingFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "max_value": {
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "description": "Maximum value the rating can take."
          },
          "color": {
            "type": "string",
            "description": "Color of the symbols.",
            "maxLength": 50
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StyleEnum"
              }
            ],
            "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "RatingFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "max_value": {
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "description": "Maximum value the rating can take."
          },
          "color": {
            "type": "string",
            "description": "Color of the symbols.",
            "maxLength": 50
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StyleEnum"
              }
            ],
            "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
          }
        }
      },
      "RefreshAuthToken": {
        "type": "object",
        "description": "Serializer used for refreshing JWTs.",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "Register": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address is also going to be the username."
          },
          "password": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "default": "en",
            "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
            "maxLength": 10,
            "minLength": 2
          },
          "authenticate": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether an authentication token should be generated and be included in the response."
          },
          "group_invitation_token": {
            "type": "string",
            "description": "If provided and valid, the user accepts the group invitation and will have access to the group after signing up."
          },
          "template_id": {
            "type": "integer",
            "description": "The id of the template that must be installed after creating the account. This only works if the `group_invitation_token` param is not provided."
          }
        },
        "required": [
          "email",
          "name",
          "password"
        ]
      },
      "RegisterPremiumLicense": {
        "type": "object",
        "properties": {
          "license": {
            "type": "string",
            "description": "The license that you want to register."
          }
        },
        "required": [
          "license"
        ]
      },
      "RelatedFields": {
        "type": "object",
        "properties": {
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "related_fields"
        ]
      },
      "RequestMethodEnum": {
        "enum": [
          "POST",
          "GET",
          "PUT",
          "PATCH",
          "DELETE"
        ],
        "type": "string"
      },
      "ResetPasswordBodyValidation": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "password",
          "token"
        ]
      },
      "RowComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "description": "The table the row this comment is for is found in. ",
            "readOnly": true
          },
          "row_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "The id of the row the comment is for."
          },
          "comment": {
            "type": "string",
            "description": "The users comment."
          },
          "first_name": {
            "type": "string",
            "maxLength": 32
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "user_id": {
            "type": "integer",
            "description": "The user who made the comment.",
            "readOnly": true
          }
        },
        "required": [
          "comment",
          "created_on",
          "first_name",
          "id",
          "row_id",
          "table_id",
          "updated_on",
          "user_id"
        ]
      },
      "RowCommentCreate": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "maxLength": 10000
          }
        },
        "required": [
          "comment"
        ]
      },
      "RowMetadata": {
        "type": "object",
        "properties": {
          "row_comment_count": {
            "type": "integer",
            "minimum": 0,
            "description": "How many row comments exist for this row."
          }
        }
      },
      "SelectOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "value": {
            "type": "string",
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "color",
          "value"
        ]
      },
      "SendResetPasswordEmailBodyValidation": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user that has requested a password reset."
          },
          "base_url": {
            "type": "string",
            "format": "uri",
            "description": "The base URL where the user can reset his password. The reset token is going to be appended to the base_url (base_url '/token')."
          }
        },
        "required": [
          "base_url",
          "email"
        ]
      },
      "Settings": {
        "type": "object",
        "properties": {
          "allow_new_signups": {
            "type": "boolean",
            "description": "Indicates whether new users can create a new account when signing up."
          },
          "allow_signups_via_group_invitations": {
            "type": "boolean",
            "description": "Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled."
          }
        }
      },
      "SingleSelectFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "SingleSelectFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "SingleSelectFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "SingleSelectFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "select_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        }
      },
      "StatusEnum": {
        "enum": [
          "pending",
          "exporting",
          "cancelled",
          "complete",
          "failed",
          "expired"
        ],
        "type": "string"
      },
      "StyleEnum": {
        "enum": [
          "star",
          "heart",
          "thumbs-up",
          "flag",
          "smile"
        ],
        "type": "string"
      },
      "SubmitActionEnum": {
        "enum": [
          "MESSAGE",
          "REDIRECT"
        ],
        "type": "string"
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "database_id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "database_id",
          "id",
          "name",
          "order"
        ]
      },
      "TableCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "data": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The value of the cell."
              },
              "description": "The row containing all the values."
            },
            "description": "A list of rows that needs to be created as initial table data. If not provided some example data is going to be created.",
            "minItems": 1
          },
          "first_row_header": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called \"Column N\""
          }
        },
        "required": [
          "name"
        ]
      },
      "TableWebhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "events": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true,
            "description": "A list containing the events that will trigger this webhook."
          },
          "headers": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true,
            "description": "The additional headers as an object where the key is the name and the value the value."
          },
          "calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableWebhookCall"
            },
            "description": "All the calls that this webhook made."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "use_user_field_names": {
            "type": "boolean",
            "description": "Indicates whether the field names must be used as payload key instead of the id."
          },
          "url": {
            "type": "string",
            "description": "The URL that must be called when the webhook is triggered.",
            "maxLength": 2000,
            "format": "uri"
          },
          "request_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestMethodEnum"
              }
            ],
            "description": "The request method that be used when the event occurs."
          },
          "name": {
            "type": "string",
            "description": "An internal name of the webhook.",
            "maxLength": 255
          },
          "include_all_events": {
            "type": "boolean",
            "description": "Indicates whether this webhook should listen to all events."
          },
          "failed_triggers": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "The amount of failed webhook calls."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated."
          }
        },
        "required": [
          "calls",
          "created_on",
          "events",
          "headers",
          "id",
          "name",
          "updated_on",
          "url"
        ]
      },
      "TableWebhookCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "event_type": {
            "type": "string",
            "maxLength": 50
          },
          "called_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "called_url": {
            "type": "string",
            "maxLength": 2000,
            "format": "uri"
          },
          "request": {
            "type": "string",
            "nullable": true,
            "description": "A text copy of the request headers and body."
          },
          "response": {
            "type": "string",
            "nullable": true,
            "description": "A text copy of the response headers and body."
          },
          "response_status": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "description": "The HTTP response status code."
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "An internal error reflecting what went wrong."
          }
        },
        "required": [
          "called_url",
          "event_type",
          "id"
        ]
      },
      "TableWebhookCreateRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL that must be called when the webhook is triggered.",
            "maxLength": 2000
          },
          "include_all_events": {
            "type": "boolean",
            "description": "Indicates whether this webhook should listen to all events."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventsEnum"
            },
            "description": "A list containing the events that will trigger this webhook."
          },
          "request_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestMethodEnum"
              }
            ],
            "description": "The request method that be used when the event occurs."
          },
          "headers": {
            "type": "object",
            "additionalProperties": {},
            "description": "The additional headers as an object where the key is the name and the value the value."
          },
          "name": {
            "type": "string",
            "description": "An internal name of the webhook.",
            "maxLength": 255
          },
          "use_user_field_names": {
            "type": "boolean",
            "description": "Indicates whether the field names must be used as payload key instead of the id."
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "TableWebhookTestCallRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL that must be called when the webhook is triggered.",
            "maxLength": 2000,
            "format": "uri"
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventTypeEnum"
              }
            ],
            "description": "The event type that must be used for the test call."
          },
          "request_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestMethodEnum"
              }
            ],
            "description": "The request method that be used when the event occurs."
          },
          "headers": {
            "type": "object",
            "additionalProperties": {},
            "description": "The additional headers as an object where the key is the name and the value the value."
          },
          "use_user_field_names": {
            "type": "boolean",
            "description": "Indicates whether the field names must be used as payload key instead of the id."
          }
        },
        "required": [
          "event_type",
          "url"
        ]
      },
      "TableWebhookTestCallResponse": {
        "type": "object",
        "properties": {
          "request": {
            "type": "string",
            "readOnly": true,
            "description": "A text copy of the request headers and body."
          },
          "response": {
            "type": "string",
            "readOnly": true,
            "description": "A text copy of the response headers and body."
          },
          "status_code": {
            "type": "integer",
            "readOnly": true,
            "description": "The HTTP response status code."
          },
          "is_unreachable": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates whether the provided URL could be reached."
          }
        },
        "required": [
          "is_unreachable",
          "request",
          "response",
          "status_code"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "icon": {
            "type": "string",
            "description": "The font awesome class name that can be used for displaying purposes.",
            "maxLength": 32
          },
          "keywords": {
            "type": "string",
            "description": "Keywords related to the template that can be used for search."
          },
          "group_id": {
            "type": "integer",
            "nullable": true,
            "description": "The group containing the applications related to the template. The read endpoints related to that group are publicly accessible for preview purposes.",
            "readOnly": true
          },
          "is_default": {
            "type": "string",
            "readOnly": true,
            "description": "Indicates if the template must be selected by default. The web-frontend automatically selects the first `is_default` template that it can find."
          }
        },
        "required": [
          "group_id",
          "icon",
          "id",
          "is_default",
          "name"
        ]
      },
      "TemplateCategories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 32
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "templates"
        ]
      },
      "TextFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "text_default": {
            "type": "string",
            "description": "If set, this value is going to be added every time a new row created.",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "TextFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "text_default": {
            "type": "string",
            "description": "If set, this value is going to be added every time a new row created.",
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "TextFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          },
          "text_default": {
            "type": "string",
            "description": "If set, this value is going to be added every time a new row created.",
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "TextFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          },
          "text_default": {
            "type": "string",
            "description": "If set, this value is going to be added every time a new row created.",
            "maxLength": 255
          }
        }
      },
      "TimezoneEnum": {
        "enum": [
          "Africa/Abidjan",
          "Africa/Accra",
          "Africa/Addis_Ababa",
          "Africa/Algiers",
          "Africa/Asmara",
          "Africa/Asmera",
          "Africa/Bamako",
          "Africa/Bangui",
          "Africa/Banjul",
          "Africa/Bissau",
          "Africa/Blantyre",
          "Africa/Brazzaville",
          "Africa/Bujumbura",
          "Africa/Cairo",
          "Africa/Casablanca",
          "Africa/Ceuta",
          "Africa/Conakry",
          "Africa/Dakar",
          "Africa/Dar_es_Salaam",
          "Africa/Djibouti",
          "Africa/Douala",
          "Africa/El_Aaiun",
          "Africa/Freetown",
          "Africa/Gaborone",
          "Africa/Harare",
          "Africa/Johannesburg",
          "Africa/Juba",
          "Africa/Kampala",
          "Africa/Khartoum",
          "Africa/Kigali",
          "Africa/Kinshasa",
          "Africa/Lagos",
          "Africa/Libreville",
          "Africa/Lome",
          "Africa/Luanda",
          "Africa/Lubumbashi",
          "Africa/Lusaka",
          "Africa/Malabo",
          "Africa/Maputo",
          "Africa/Maseru",
          "Africa/Mbabane",
          "Africa/Mogadishu",
          "Africa/Monrovia",
          "Africa/Nairobi",
          "Africa/Ndjamena",
          "Africa/Niamey",
          "Africa/Nouakchott",
          "Africa/Ouagadougou",
          "Africa/Porto-Novo",
          "Africa/Sao_Tome",
          "Africa/Timbuktu",
          "Africa/Tripoli",
          "Africa/Tunis",
          "Africa/Windhoek",
          "America/Adak",
          "America/Anchorage",
          "America/Anguilla",
          "America/Antigua",
          "America/Araguaina",
          "America/Argentina/Buenos_Aires",
          "America/Argentina/Catamarca",
          "America/Argentina/ComodRivadavia",
          "America/Argentina/Cordoba",
          "America/Argentina/Jujuy",
          "America/Argentina/La_Rioja",
          "America/Argentina/Mendoza",
          "America/Argentina/Rio_Gallegos",
          "America/Argentina/Salta",
          "America/Argentina/San_Juan",
          "America/Argentina/San_Luis",
          "America/Argentina/Tucuman",
          "America/Argentina/Ushuaia",
          "America/Aruba",
          "America/Asuncion",
          "America/Atikokan",
          "America/Atka",
          "America/Bahia",
          "America/Bahia_Banderas",
          "America/Barbados",
          "America/Belem",
          "America/Belize",
          "America/Blanc-Sablon",
          "America/Boa_Vista",
          "America/Bogota",
          "America/Boise",
          "America/Buenos_Aires",
          "America/Cambridge_Bay",
          "America/Campo_Grande",
          "America/Cancun",
          "America/Caracas",
          "America/Catamarca",
          "America/Cayenne",
          "America/Cayman",
          "America/Chicago",
          "America/Chihuahua",
          "America/Coral_Harbour",
          "America/Cordoba",
          "America/Costa_Rica",
          "America/Creston",
          "America/Cuiaba",
          "America/Curacao",
          "America/Danmarkshavn",
          "America/Dawson",
          "America/Dawson_Creek",
          "America/Denver",
          "America/Detroit",
          "America/Dominica",
          "America/Edmonton",
          "America/Eirunepe",
          "America/El_Salvador",
          "America/Ensenada",
          "America/Fort_Nelson",
          "America/Fort_Wayne",
          "America/Fortaleza",
          "America/Glace_Bay",
          "America/Godthab",
          "America/Goose_Bay",
          "America/Grand_Turk",
          "America/Grenada",
          "America/Guadeloupe",
          "America/Guatemala",
          "America/Guayaquil",
          "America/Guyana",
          "America/Halifax",
          "America/Havana",
          "America/Hermosillo",
          "America/Indiana/Indianapolis",
          "America/Indiana/Knox",
          "America/Indiana/Marengo",
          "America/Indiana/Petersburg",
          "America/Indiana/Tell_City",
          "America/Indiana/Vevay",
          "America/Indiana/Vincennes",
          "America/Indiana/Winamac",
          "America/Indianapolis",
          "America/Inuvik",
          "America/Iqaluit",
          "America/Jamaica",
          "America/Jujuy",
          "America/Juneau",
          "America/Kentucky/Louisville",
          "America/Kentucky/Monticello",
          "America/Knox_IN",
          "America/Kralendijk",
          "America/La_Paz",
          "America/Lima",
          "America/Los_Angeles",
          "America/Louisville",
          "America/Lower_Princes",
          "America/Maceio",
          "America/Managua",
          "America/Manaus",
          "America/Marigot",
          "America/Martinique",
          "America/Matamoros",
          "America/Mazatlan",
          "America/Mendoza",
          "America/Menominee",
          "America/Merida",
          "America/Metlakatla",
          "America/Mexico_City",
          "America/Miquelon",
          "America/Moncton",
          "America/Monterrey",
          "America/Montevideo",
          "America/Montreal",
          "America/Montserrat",
          "America/Nassau",
          "America/New_York",
          "America/Nipigon",
          "America/Nome",
          "America/Noronha",
          "America/North_Dakota/Beulah",
          "America/North_Dakota/Center",
          "America/North_Dakota/New_Salem",
          "America/Nuuk",
          "America/Ojinaga",
          "America/Panama",
          "America/Pangnirtung",
          "America/Paramaribo",
          "America/Phoenix",
          "America/Port-au-Prince",
          "America/Port_of_Spain",
          "America/Porto_Acre",
          "America/Porto_Velho",
          "America/Puerto_Rico",
          "America/Punta_Arenas",
          "America/Rainy_River",
          "America/Rankin_Inlet",
          "America/Recife",
          "America/Regina",
          "America/Resolute",
          "America/Rio_Branco",
          "America/Rosario",
          "America/Santa_Isabel",
          "America/Santarem",
          "America/Santiago",
          "America/Santo_Domingo",
          "America/Sao_Paulo",
          "America/Scoresbysund",
          "America/Shiprock",
          "America/Sitka",
          "America/St_Barthelemy",
          "America/St_Johns",
          "America/St_Kitts",
          "America/St_Lucia",
          "America/St_Thomas",
          "America/St_Vincent",
          "America/Swift_Current",
          "America/Tegucigalpa",
          "America/Thule",
          "America/Thunder_Bay",
          "America/Tijuana",
          "America/Toronto",
          "America/Tortola",
          "America/Vancouver",
          "America/Virgin",
          "America/Whitehorse",
          "America/Winnipeg",
          "America/Yakutat",
          "America/Yellowknife",
          "Antarctica/Casey",
          "Antarctica/Davis",
          "Antarctica/DumontDUrville",
          "Antarctica/Macquarie",
          "Antarctica/Mawson",
          "Antarctica/McMurdo",
          "Antarctica/Palmer",
          "Antarctica/Rothera",
          "Antarctica/South_Pole",
          "Antarctica/Syowa",
          "Antarctica/Troll",
          "Antarctica/Vostok",
          "Arctic/Longyearbyen",
          "Asia/Aden",
          "Asia/Almaty",
          "Asia/Amman",
          "Asia/Anadyr",
          "Asia/Aqtau",
          "Asia/Aqtobe",
          "Asia/Ashgabat",
          "Asia/Ashkhabad",
          "Asia/Atyrau",
          "Asia/Baghdad",
          "Asia/Bahrain",
          "Asia/Baku",
          "Asia/Bangkok",
          "Asia/Barnaul",
          "Asia/Beirut",
          "Asia/Bishkek",
          "Asia/Brunei",
          "Asia/Calcutta",
          "Asia/Chita",
          "Asia/Choibalsan",
          "Asia/Chongqing",
          "Asia/Chungking",
          "Asia/Colombo",
          "Asia/Dacca",
          "Asia/Damascus",
          "Asia/Dhaka",
          "Asia/Dili",
          "Asia/Dubai",
          "Asia/Dushanbe",
          "Asia/Famagusta",
          "Asia/Gaza",
          "Asia/Harbin",
          "Asia/Hebron",
          "Asia/Ho_Chi_Minh",
          "Asia/Hong_Kong",
          "Asia/Hovd",
          "Asia/Irkutsk",
          "Asia/Istanbul",
          "Asia/Jakarta",
          "Asia/Jayapura",
          "Asia/Jerusalem",
          "Asia/Kabul",
          "Asia/Kamchatka",
          "Asia/Karachi",
          "Asia/Kashgar",
          "Asia/Kathmandu",
          "Asia/Katmandu",
          "Asia/Khandyga",
          "Asia/Kolkata",
          "Asia/Krasnoyarsk",
          "Asia/Kuala_Lumpur",
          "Asia/Kuching",
          "Asia/Kuwait",
          "Asia/Macao",
          "Asia/Macau",
          "Asia/Magadan",
          "Asia/Makassar",
          "Asia/Manila",
          "Asia/Muscat",
          "Asia/Nicosia",
          "Asia/Novokuznetsk",
          "Asia/Novosibirsk",
          "Asia/Omsk",
          "Asia/Oral",
          "Asia/Phnom_Penh",
          "Asia/Pontianak",
          "Asia/Pyongyang",
          "Asia/Qatar",
          "Asia/Qostanay",
          "Asia/Qyzylorda",
          "Asia/Rangoon",
          "Asia/Riyadh",
          "Asia/Saigon",
          "Asia/Sakhalin",
          "Asia/Samarkand",
          "Asia/Seoul",
          "Asia/Shanghai",
          "Asia/Singapore",
          "Asia/Srednekolymsk",
          "Asia/Taipei",
          "Asia/Tashkent",
          "Asia/Tbilisi",
          "Asia/Tehran",
          "Asia/Tel_Aviv",
          "Asia/Thimbu",
          "Asia/Thimphu",
          "Asia/Tokyo",
          "Asia/Tomsk",
          "Asia/Ujung_Pandang",
          "Asia/Ulaanbaatar",
          "Asia/Ulan_Bator",
          "Asia/Urumqi",
          "Asia/Ust-Nera",
          "Asia/Vientiane",
          "Asia/Vladivostok",
          "Asia/Yakutsk",
          "Asia/Yangon",
          "Asia/Yekaterinburg",
          "Asia/Yerevan",
          "Atlantic/Azores",
          "Atlantic/Bermuda",
          "Atlantic/Canary",
          "Atlantic/Cape_Verde",
          "Atlantic/Faeroe",
          "Atlantic/Faroe",
          "Atlantic/Jan_Mayen",
          "Atlantic/Madeira",
          "Atlantic/Reykjavik",
          "Atlantic/South_Georgia",
          "Atlantic/St_Helena",
          "Atlantic/Stanley",
          "Australia/ACT",
          "Australia/Adelaide",
          "Australia/Brisbane",
          "Australia/Broken_Hill",
          "Australia/Canberra",
          "Australia/Currie",
          "Australia/Darwin",
          "Australia/Eucla",
          "Australia/Hobart",
          "Australia/LHI",
          "Australia/Lindeman",
          "Australia/Lord_Howe",
          "Australia/Melbourne",
          "Australia/NSW",
          "Australia/North",
          "Australia/Perth",
          "Australia/Queensland",
          "Australia/South",
          "Australia/Sydney",
          "Australia/Tasmania",
          "Australia/Victoria",
          "Australia/West",
          "Australia/Yancowinna",
          "Brazil/Acre",
          "Brazil/DeNoronha",
          "Brazil/East",
          "Brazil/West",
          "CET",
          "CST6CDT",
          "Canada/Atlantic",
          "Canada/Central",
          "Canada/Eastern",
          "Canada/Mountain",
          "Canada/Newfoundland",
          "Canada/Pacific",
          "Canada/Saskatchewan",
          "Canada/Yukon",
          "Chile/Continental",
          "Chile/EasterIsland",
          "Cuba",
          "EET",
          "EST",
          "EST5EDT",
          "Egypt",
          "Eire",
          "Etc/GMT",
          "Etc/GMT+0",
          "Etc/GMT+1",
          "Etc/GMT+10",
          "Etc/GMT+11",
          "Etc/GMT+12",
          "Etc/GMT+2",
          "Etc/GMT+3",
          "Etc/GMT+4",
          "Etc/GMT+5",
          "Etc/GMT+6",
          "Etc/GMT+7",
          "Etc/GMT+8",
          "Etc/GMT+9",
          "Etc/GMT-0",
          "Etc/GMT-1",
          "Etc/GMT-10",
          "Etc/GMT-11",
          "Etc/GMT-12",
          "Etc/GMT-13",
          "Etc/GMT-14",
          "Etc/GMT-2",
          "Etc/GMT-3",
          "Etc/GMT-4",
          "Etc/GMT-5",
          "Etc/GMT-6",
          "Etc/GMT-7",
          "Etc/GMT-8",
          "Etc/GMT-9",
          "Etc/GMT0",
          "Etc/Greenwich",
          "Etc/UCT",
          "Etc/UTC",
          "Etc/Universal",
          "Etc/Zulu",
          "Europe/Amsterdam",
          "Europe/Andorra",
          "Europe/Astrakhan",
          "Europe/Athens",
          "Europe/Belfast",
          "Europe/Belgrade",
          "Europe/Berlin",
          "Europe/Bratislava",
          "Europe/Brussels",
          "Europe/Bucharest",
          "Europe/Budapest",
          "Europe/Busingen",
          "Europe/Chisinau",
          "Europe/Copenhagen",
          "Europe/Dublin",
          "Europe/Gibraltar",
          "Europe/Guernsey",
          "Europe/Helsinki",
          "Europe/Isle_of_Man",
          "Europe/Istanbul",
          "Europe/Jersey",
          "Europe/Kaliningrad",
          "Europe/Kiev",
          "Europe/Kirov",
          "Europe/Lisbon",
          "Europe/Ljubljana",
          "Europe/London",
          "Europe/Luxembourg",
          "Europe/Madrid",
          "Europe/Malta",
          "Europe/Mariehamn",
          "Europe/Minsk",
          "Europe/Monaco",
          "Europe/Moscow",
          "Europe/Nicosia",
          "Europe/Oslo",
          "Europe/Paris",
          "Europe/Podgorica",
          "Europe/Prague",
          "Europe/Riga",
          "Europe/Rome",
          "Europe/Samara",
          "Europe/San_Marino",
          "Europe/Sarajevo",
          "Europe/Saratov",
          "Europe/Simferopol",
          "Europe/Skopje",
          "Europe/Sofia",
          "Europe/Stockholm",
          "Europe/Tallinn",
          "Europe/Tirane",
          "Europe/Tiraspol",
          "Europe/Ulyanovsk",
          "Europe/Uzhgorod",
          "Europe/Vaduz",
          "Europe/Vatican",
          "Europe/Vienna",
          "Europe/Vilnius",
          "Europe/Volgograd",
          "Europe/Warsaw",
          "Europe/Zagreb",
          "Europe/Zaporozhye",
          "Europe/Zurich",
          "GB",
          "GB-Eire",
          "GMT",
          "GMT+0",
          "GMT-0",
          "GMT0",
          "Greenwich",
          "HST",
          "Hongkong",
          "Iceland",
          "Indian/Antananarivo",
          "Indian/Chagos",
          "Indian/Christmas",
          "Indian/Cocos",
          "Indian/Comoro",
          "Indian/Kerguelen",
          "Indian/Mahe",
          "Indian/Maldives",
          "Indian/Mauritius",
          "Indian/Mayotte",
          "Indian/Reunion",
          "Iran",
          "Israel",
          "Jamaica",
          "Japan",
          "Kwajalein",
          "Libya",
          "MET",
          "MST",
          "MST7MDT",
          "Mexico/BajaNorte",
          "Mexico/BajaSur",
          "Mexico/General",
          "NZ",
          "NZ-CHAT",
          "Navajo",
          "PRC",
          "PST8PDT",
          "Pacific/Apia",
          "Pacific/Auckland",
          "Pacific/Bougainville",
          "Pacific/Chatham",
          "Pacific/Chuuk",
          "Pacific/Easter",
          "Pacific/Efate",
          "Pacific/Enderbury",
          "Pacific/Fakaofo",
          "Pacific/Fiji",
          "Pacific/Funafuti",
          "Pacific/Galapagos",
          "Pacific/Gambier",
          "Pacific/Guadalcanal",
          "Pacific/Guam",
          "Pacific/Honolulu",
          "Pacific/Johnston",
          "Pacific/Kanton",
          "Pacific/Kiritimati",
          "Pacific/Kosrae",
          "Pacific/Kwajalein",
          "Pacific/Majuro",
          "Pacific/Marquesas",
          "Pacific/Midway",
          "Pacific/Nauru",
          "Pacific/Niue",
          "Pacific/Norfolk",
          "Pacific/Noumea",
          "Pacific/Pago_Pago",
          "Pacific/Palau",
          "Pacific/Pitcairn",
          "Pacific/Pohnpei",
          "Pacific/Ponape",
          "Pacific/Port_Moresby",
          "Pacific/Rarotonga",
          "Pacific/Saipan",
          "Pacific/Samoa",
          "Pacific/Tahiti",
          "Pacific/Tarawa",
          "Pacific/Tongatapu",
          "Pacific/Truk",
          "Pacific/Wake",
          "Pacific/Wallis",
          "Pacific/Yap",
          "Poland",
          "Portugal",
          "ROC",
          "ROK",
          "Singapore",
          "Turkey",
          "UCT",
          "US/Alaska",
          "US/Aleutian",
          "US/Arizona",
          "US/Central",
          "US/East-Indiana",
          "US/Eastern",
          "US/Hawaii",
          "US/Indiana-Starke",
          "US/Michigan",
          "US/Mountain",
          "US/Pacific",
          "US/Samoa",
          "UTC",
          "Universal",
          "W-SU",
          "WET",
          "Zulu"
        ],
        "type": "string"
      },
      "Token": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The human readable name of the token for the user.",
            "maxLength": 100
          },
          "group": {
            "type": "integer",
            "description": "Only the tables of the group can be accessed."
          },
          "key": {
            "type": "string",
            "description": "The unique token key that can be used to authorize for the table row endpoints.",
            "maxLength": 32
          },
          "permissions": {
            "type": "object",
            "description": "Indicates per operation which permissions the API token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[[\"database\", 1]]` means create permissions for all tables in the database with id 1.\n\nExample:\n```json\n{\n  \"create\": true// Allows creating rows in all tables.\n  // Allows reading rows from database 1 and table 10.\n  \"read\": [[\"database\", 1], [\"table\", 10]],\n  \"update\": false  // Denies updating rows in all tables.\n  \"delete\": []  // Denies deleting rows in all tables.\n }\n```",
            "properties": {
              "create": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "read": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "update": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "delete": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Indicating if the API token has permissions to all tables.",
                    "example": true
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "database",
                            "description": "First element should indicate the reference type `database` or `table`."
                          },
                          {
                            "type": "number",
                            "example": 1,
                            "description": "Second element should indicate the ID of the reference."
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "required": [
          "group",
          "id",
          "key",
          "name",
          "permissions"
        ]
      },
      "TokenCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name of the token for the user.",
            "maxLength": 100
          },
          "group": {
            "type": "integer",
            "description": "Only the tables of the group can be accessed."
          }
        },
        "required": [
          "group",
          "name"
        ]
      },
      "TrashContents": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user_who_trashed": {
            "type": "string",
            "readOnly": true
          },
          "trash_item_type": {
            "type": "string"
          },
          "trash_item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "parent_trash_item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true
          },
          "trashed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "application": {
            "type": "integer",
            "nullable": true
          },
          "group": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_name": {
            "type": "string",
            "nullable": true
          },
          "extra_description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "group",
          "id",
          "name",
          "trash_item_id",
          "trash_item_type",
          "trashed_at",
          "user_who_trashed"
        ]
      },
      "TrashItemTypeEnum": {
        "enum": [
          "group",
          "application",
          "table",
          "field",
          "row"
        ],
        "type": "string"
      },
      "TrashStructure": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrashStructureGroup"
            }
          }
        },
        "required": [
          "groups"
        ]
      },
      "TrashStructureApplication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 160
          },
          "trashed": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "TrashStructureGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0
          },
          "trashed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrashStructureApplication"
            }
          }
        },
        "required": [
          "applications",
          "id",
          "name",
          "trashed"
        ]
      },
      "Type247Enum": {
        "enum": [
          "grid",
          "gallery",
          "form",
          "kanban"
        ],
        "type": "string"
      },
      "Type9b0Enum": {
        "enum": [
          "text",
          "long_text",
          "url",
          "email",
          "number",
          "rating",
          "boolean",
          "date",
          "last_modified",
          "created_on",
          "link_row",
          "file",
          "single_select",
          "multiple_select",
          "phone_number",
          "formula",
          "lookup"
        ],
        "type": "string"
      },
      "TypeA00Enum": {
        "enum": [
          "equal",
          "not_equal",
          "filename_contains",
          "has_file_type",
          "contains",
          "contains_not",
          "length_is_lower_than",
          "higher_than",
          "lower_than",
          "date_equal",
          "date_before",
          "date_after",
          "date_not_equal",
          "date_equals_today",
          "date_equals_month",
          "date_equals_day_of_month",
          "date_equals_year",
          "single_select_equal",
          "single_select_not_equal",
          "link_row_has",
          "link_row_has_not",
          "boolean",
          "empty",
          "not_empty",
          "multiple_select_has",
          "multiple_select_has_not"
        ],
        "type": "string"
      },
      "TypeFormulaRequest": {
        "type": "object",
        "properties": {
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula"
        ]
      },
      "TypeFormulaResult": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "nullable": true
          },
          "date_format": {
            "nullable": true,
            "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "date_include_time": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the field also includes a time."
          },
          "date_time_format": {
            "nullable": true,
            "description": "24 (14:30) or 12 (02:30 PM)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFormatEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "number_decimal_places": {
            "nullable": true,
            "description": "The amount of digits allowed after the point.",
            "minimum": -2147483648,
            "maximum": 2147483647,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberDecimalPlacesB02Enum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "array_formula_type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArrayFormulaTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "formula": {
            "type": "string"
          },
          "formula_type": {
            "$ref": "#/components/schemas/FormulaTypeEnum"
          }
        },
        "required": [
          "formula"
        ]
      },
      "URLFieldCreateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "URLFieldField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "table_id",
          "type"
        ]
      },
      "URLFieldFieldSerializerWithRelatedFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "table_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Lowest first."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the related field."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row."
          },
          "related_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "readOnly": true,
            "description": "A list of related fields which also changed."
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "related_fields",
          "table_id",
          "type"
        ]
      },
      "URLFieldUpdateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/Type9b0Enum"
          }
        }
      },
      "UserAdminGroups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsEnum"
              }
            ],
            "description": "The permissions that the user has within the group."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "UserAdminResponse": {
        "type": "object",
        "description": "Serializes the safe user attributes to expose for a response back to the user.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string",
            "maxLength": 150
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAdminGroups"
            }
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          },
          "is_active": {
            "type": "boolean",
            "title": "Active",
            "description": "Designates whether this user should be treated as active. Set this to false instead of deleting accounts."
          },
          "is_staff": {
            "type": "boolean",
            "title": "Staff status",
            "description": "Designates whether this user is an admin and has access to all groups and Baserow's admin areas. "
          }
        },
        "required": [
          "groups",
          "id",
          "name",
          "username"
        ]
      },
      "UserFile": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "mime_type": {
            "type": "string",
            "maxLength": 127
          },
          "is_image": {
            "type": "boolean"
          },
          "image_width": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0,
            "nullable": true
          },
          "image_height": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0,
            "nullable": true
          },
          "uploaded_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "thumbnails": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "original_name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "original_name",
          "size",
          "thumbnails",
          "uploaded_at",
          "url"
        ]
      },
      "UserFileUploadViaURLRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "url"
        ]
      },
      "UserGroupInvitation": {
        "type": "object",
        "description": "This serializer is used for displaying the invitation to the user that doesn't\nhave access to the group yet, so not for invitation management purposes.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "invited_by": {
            "type": "string",
            "readOnly": true
          },
          "group": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
            "maxLength": 254
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "email_exists": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "created_on",
          "email",
          "email_exists",
          "group",
          "id",
          "invited_by",
          "message"
        ]
      },
      "VerifyAuthToken": {
        "type": "object",
        "description": "Serializer used for verifying JWTs.",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "ViewCreateView": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GridViewCreateView"
          },
          {
            "$ref": "#/components/schemas/GalleryViewCreateView"
          },
          {
            "$ref": "#/components/schemas/FormViewCreateView"
          },
          {
            "$ref": "#/components/schemas/KanbanViewCreateView"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "grid": "#/components/schemas/GridViewCreateView",
            "gallery": "#/components/schemas/GalleryViewCreateView",
            "form": "#/components/schemas/FormViewCreateView",
            "kanban": "#/components/schemas/KanbanViewCreateView"
          }
        }
      },
      "ViewFieldOptions": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/grid_view_field_options"
          },
          {
            "$ref": "#/components/schemas/gallery_view_field_options"
          },
          {
            "$ref": "#/components/schemas/form_view_field_options"
          },
          {
            "$ref": "#/components/schemas/kanban_view_field_options"
          }
        ]
      },
      "ViewFilter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "view": {
            "type": "integer",
            "description": "The view to which the filter applies. Each view can have his own filters."
          },
          "field": {
            "type": "integer",
            "description": "The field of which the value must be compared to the filter value."
          },
          "type": {
            "type": "string",
            "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).",
            "maxLength": 48
          },
          "value": {
            "type": "string",
            "description": "The filter value that must be compared to the field's value.",
            "maxLength": 255
          },
          "preload_values": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true,
            "description": "Can contain unique preloaded values per filter. This is for example used by the `link_row_has` filter to communicate the display name if a value is provided."
          }
        },
        "required": [
          "field",
          "id",
          "preload_values",
          "type",
          "view"
        ]
      },
      "ViewSort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "view": {
            "type": "integer",
            "description": "The view to which the sort applies. Each view can have his own sortings."
          },
          "field": {
            "type": "integer",
            "description": "The field that must be sorted on."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderEnum"
              }
            ],
            "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
          }
        },
        "required": [
          "field",
          "id",
          "view"
        ]
      },
      "ViewView": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GridViewView"
          },
          {
            "$ref": "#/components/schemas/GalleryViewView"
          },
          {
            "$ref": "#/components/schemas/FormViewView"
          },
          {
            "$ref": "#/components/schemas/KanbanViewView"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "grid": "#/components/schemas/GridViewView",
            "gallery": "#/components/schemas/GalleryViewView",
            "form": "#/components/schemas/FormViewView",
            "kanban": "#/components/schemas/KanbanViewView"
          }
        }
      },
      "form_view_field_options": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FormViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          }
        },
        "required": [
          "field_options"
        ]
      },
      "form_view_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "title": {
            "type": "string",
            "description": "The title that is displayed at the beginning of the form."
          },
          "description": {
            "type": "string",
            "description": "The description that is displayed at the beginning of the form."
          },
          "cover_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The cover image that must be displayed at the top of the form."
          },
          "logo_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "nullable": true,
            "description": "The logo image that must be displayed at the top of the form."
          },
          "submit_text": {
            "type": "string",
            "description": "The text displayed on the submit button."
          },
          "submit_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubmitActionEnum"
              }
            ],
            "description": "The action that must be performed after the visitor has filled out the form."
          },
          "submit_action_message": {
            "type": "string",
            "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form."
          },
          "submit_action_redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
            "maxLength": 200
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "slug"
        ]
      },
      "gallery_view_field_options": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GalleryViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          }
        },
        "required": [
          "field_options"
        ]
      },
      "gallery_view_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        }
      },
      "grid_view_field_options": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GridViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          }
        },
        "required": [
          "field_options"
        ]
      },
      "grid_view_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "public": {
            "type": "boolean",
            "description": "Indicates whether the view is publicly accessible to visitors."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The unique slug that can be used to construct a public URL."
          }
        },
        "required": [
          "slug"
        ]
      },
      "kanban_view_field_options": {
        "type": "object",
        "properties": {
          "field_options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/KanbanViewFieldOptions"
            },
            "description": "An object containing the field id as key and the properties related to view as value."
          }
        },
        "required": [
          "field_options"
        ]
      },
      "kanban_view_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "filter_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterTypeEnum"
              }
            ],
            "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
          },
          "filters_disabled": {
            "type": "boolean",
            "description": "Allows users to see results unfiltered while still keeping the filters saved for the view."
          },
          "single_select_field": {
            "type": "integer",
            "nullable": true
          },
          "card_cover_image_field": {
            "type": "integer",
            "nullable": true,
            "description": "References a file field of which the first image must be shown as card cover image."
          }
        }
      }
    },
    "securitySchemes": {
      "Token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Token",
        "description": "Baserow uses a simple token based authentication. You need to generate at least one API token in your settings to use the endpoints described below. It is possible to give create, read, update and delete permissions up until table level per token. You can authenticate to the API by providing your API token in the HTTP authorization bearer token header. All API requests must be authenticated and made over HTTPS."
      },
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Settings"
    },
    {
      "name": "User"
    },
    {
      "name": "User files"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Group invitations"
    },
    {
      "name": "Templates"
    },
    {
      "name": "Trash"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Database tables"
    },
    {
      "name": "Database table fields"
    },
    {
      "name": "Database table views"
    },
    {
      "name": "Database table view filters"
    },
    {
      "name": "Database table view sortings"
    },
    {
      "name": "Database table grid view"
    },
    {
      "name": "Database table gallery view"
    },
    {
      "name": "Database table form view"
    },
    {
      "name": "Database table kanban view"
    },
    {
      "name": "Database table rows"
    },
    {
      "name": "Database table export"
    },
    {
      "name": "Database table webhooks"
    },
    {
      "name": "Database tokens"
    },
    {
      "name": "Database airtable import"
    },
    {
      "name": "Admin"
    }
  ],
  "servers": [
    {
      "url": "https://api.baserow.io",
      "description": ""
    }
  ]
}