{
  "openapi": "3.0.0",
  "info": {
    "description": "uData API",
    "title": "uData API",
    "version": "1.0"
  },
  "paths": {
    "/activity": {
      "get": {
        "operationId": "activity",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "Filter activities for that particular user",
            "in": "query",
            "name": "user",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter activities for that particular organization",
            "in": "query",
            "name": "organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActivityPage"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Fetch site activity, optionally filtered by user of org",
        "tags": [
          "site"
        ]
      }
    },
    "/avatars/{identifier}/{size}": {
      "get": {
        "operationId": "avatars",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a deterministic avatar given an identifier at a given size",
        "tags": [
          "avatars"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "identifier",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "size",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/datasets/": {
      "get": {
        "operationId": "list_datasets",
        "parameters": [
          {
            "description": "The search query",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Selected facets to fetch",
            "in": "query",
            "name": "facets",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all",
                "tag",
                "badge",
                "organization",
                "owner",
                "license",
                "geozone",
                "granularity",
                "format",
                "schema",
                "schema_version",
                "resource_type",
                "reuses",
                "temporal_coverage",
                "featured"
              ]
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "badge",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "license",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "geozone",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "granularity",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "schema",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "schema_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resource_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reuses",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "quite",
                "many"
              ]
            }
          },
          {
            "description": "Une couverture temporelle est exprimée par début-fin où les deux dates sont au format ISO (c'est-à-dire YYYY-MM-DD-YYYY-MM-DD)",
            "in": "query",
            "name": "temporal_coverage",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The field (and direction) on which sorting apply",
            "in": "query",
            "name": "sort",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "created",
                "last_modified",
                "reuses",
                "followers",
                "views",
                "-title",
                "-created",
                "-last_modified",
                "-reuses",
                "-followers",
                "-views"
              ]
            }
          },
          {
            "description": "The page to display",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "description": "The page size",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetPage"
                }
              }
            }
          }
        },
        "summary": "List or search all datasets",
        "tags": [
          "datasets"
        ]
      },
      "post": {
        "operationId": "create_dataset",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Dataset"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a new dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/badges/": {
      "get": {
        "operationId": "available_dataset_badges",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List all available dataset badges and their labels",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/community_resources/": {
      "get": {
        "operationId": "list_community_resources",
        "parameters": [
          {
            "description": "The sorting attribute",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-created"
            }
          },
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "Filter activities for that particular organization",
            "in": "query",
            "name": "organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter activities for that particular dataset",
            "in": "query",
            "name": "dataset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter activities for that particular user",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResourcePage"
                }
              }
            }
          }
        },
        "summary": "List all community resources",
        "tags": [
          "datasets"
        ]
      },
      "post": {
        "operationId": "create_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CommunityResource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              }
            }
          }
        },
        "summary": "Create a new community resource",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/community_resources/{community}/": {
      "delete": {
        "operationId": "delete_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              }
            }
          }
        },
        "summary": "Delete a given community resource",
        "tags": [
          "datasets"
        ]
      },
      "get": {
        "operationId": "retrieve_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              }
            }
          }
        },
        "summary": "Retrieve a community resource given its identifier",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The community resource unique identifier",
          "in": "path",
          "name": "community",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The dataset ID or slug",
          "in": "query",
          "name": "dataset",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CommunityResource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              }
            }
          }
        },
        "summary": "Update a given community resource",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/community_resources/{community}/upload/": {
      "parameters": [
        {
          "description": "The community resource unique identifier",
          "in": "path",
          "name": "community",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The dataset ID or slug",
          "in": "query",
          "name": "dataset",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "upload_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedResource"
                }
              }
            }
          }
        },
        "summary": "Update the file related to a given community resource",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/extensions/": {
      "get": {
        "operationId": "allowed_extensions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all allowed resources extensions",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/frequencies/": {
      "get": {
        "operationId": "list_frequencies",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Frequency"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all available frequencies",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/licenses/": {
      "get": {
        "operationId": "list_licenses",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/License"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all available licenses",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/r/{id}": {
      "get": {
        "operationId": "redirect_resource",
        "parameters": [
          {
            "description": "The dataset ID or slug",
            "in": "query",
            "name": "dataset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Redirect to the latest version of a resource given its identifier",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/datasets/resource_types/": {
      "get": {
        "operationId": "resource_types",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceType"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all resource types",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/schemas/": {
      "get": {
        "operationId": "schemas",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Schema"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all available schemas",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/suggest/": {
      "get": {
        "operationId": "suggest_datasets",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatasetSuggestion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Suggest datasets",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/suggest/formats/": {
      "get": {
        "operationId": "suggest_formats",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Suggest file formats",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/suggest/mime/": {
      "get": {
        "operationId": "suggest_mime",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Suggest mime types",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/": {
      "delete": {
        "operationId": "delete_dataset",
        "responses": {
          "204": {
            "description": "Dataset deleted"
          },
          "404": {
            "description": "Dataset not found"
          },
          "410": {
            "description": "Dataset has been deleted"
          }
        },
        "summary": "Delete a dataset given its identifier",
        "tags": [
          "datasets"
        ]
      },
      "get": {
        "operationId": "get_dataset",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found"
          },
          "410": {
            "description": "Dataset has been deleted"
          }
        },
        "summary": "Get a dataset given its identifier",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_dataset",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Dataset"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "Validation error: your data cannot be updated for now, we have been notified of the error and we will fix it as soon as possible."
          },
          "404": {
            "description": "Dataset not found"
          },
          "410": {
            "description": "Dataset has been deleted"
          }
        },
        "summary": "Update a dataset given its identifier",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/badges/": {
      "post": {
        "operationId": "add_dataset_badge",
        "parameters": [
          {
            "description": "The dataset ID or slug",
            "in": "path",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Badge"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badge"
                }
              }
            }
          }
        },
        "summary": "Create a new badge for a given dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/badges/{badge_kind}/": {
      "delete": {
        "operationId": "delete_dataset_badge",
        "parameters": [
          {
            "description": "The dataset ID or slug",
            "in": "path",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Delete a badge for a given dataset",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "badge_kind",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/datasets/{dataset}/featured/": {
      "delete": {
        "operationId": "unfeature_dataset",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          }
        },
        "summary": "Unmark the dataset as featured",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "feature_dataset",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          }
        },
        "summary": "Mark the dataset as featured",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/rdf": {
      "get": {
        "operationId": "rdf_dataset",
        "responses": {
          "404": {
            "description": "Dataset not found"
          },
          "410": {
            "description": "Dataset has been deleted"
          }
        },
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/datasets/{dataset}/rdf.{format}": {
      "get": {
        "operationId": "rdf_dataset",
        "responses": {
          "404": {
            "description": "Dataset not found"
          },
          "410": {
            "description": "Dataset has been deleted"
          }
        },
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "format",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/datasets/{dataset}/resources/": {
      "post": {
        "operationId": "create_resource",
        "parameters": [
          {
            "description": "The dataset ID or slug",
            "in": "path",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Resource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        },
        "summary": "Create a new resource for a given dataset",
        "tags": [
          "datasets"
        ]
      },
      "put": {
        "operationId": "update_resources",
        "parameters": [
          {
            "description": "The dataset ID or slug",
            "in": "path",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Resource"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Reorder resources",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/resources/{rid}/": {
      "delete": {
        "operationId": "delete_resource",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Delete a given resource on a given dataset",
        "tags": [
          "datasets"
        ]
      },
      "get": {
        "operationId": "get_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        },
        "summary": "Get a resource given its identifier",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The resource unique identifier",
          "in": "path",
          "name": "rid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Resource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        },
        "summary": "Update a given resource on a given dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/resources/{rid}/check/": {
      "get": {
        "operationId": "check_dataset_resource",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Checks that a resource's URL exists and returns metadata",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "description": "The resource unique identifier",
          "in": "path",
          "name": "rid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/datasets/{dataset}/resources/{rid}/upload/": {
      "parameters": [
        {
          "description": "The resource unique identifier",
          "in": "path",
          "name": "rid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "upload_dataset_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedResource"
                }
              }
            }
          }
        },
        "summary": "Upload a file related to a given resource on a given dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/upload/": {
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "upload_new_dataset_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upload_new_dataset_resource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedResource"
                }
              }
            }
          }
        },
        "summary": "Upload a new dataset resource",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{dataset}/upload/community/": {
      "parameters": [
        {
          "description": "The dataset ID or slug",
          "in": "path",
          "name": "dataset",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "upload_new_community_resource",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upload_new_dataset_resource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedResource"
                }
              }
            }
          }
        },
        "summary": "Upload a new community resource",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{id}/followers/": {
      "delete": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "unfollow_dataset",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Unfollow an object given its ID",
        "tags": [
          "datasets"
        ]
      },
      "get": {
        "operationId": "list_dataset_followers",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowPage"
                }
              }
            }
          }
        },
        "summary": "List all followers for a given object",
        "tags": [
          "datasets"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "follow_dataset",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Follow an object given its ID",
        "tags": [
          "datasets"
        ]
      }
    },
    "/discussions/": {
      "get": {
        "operationId": "list_discussions",
        "parameters": [
          {
            "description": "The sorting attribute",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-created"
            }
          },
          {
            "description": "Filters discussions on their closed status if specified",
            "in": "query",
            "name": "closed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter discussions for a given subject",
            "in": "query",
            "name": "for",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionPage"
                }
              }
            }
          }
        },
        "summary": "List all Discussions",
        "tags": [
          "discussions"
        ]
      },
      "post": {
        "operationId": "create_discussion",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionStart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discussion"
                }
              }
            }
          }
        },
        "summary": "Create a new Discussion",
        "tags": [
          "discussions"
        ]
      }
    },
    "/discussions/{id}/": {
      "delete": {
        "operationId": "delete_discussion",
        "responses": {
          "403": {
            "description": "Not allowed to delete this discussion"
          }
        },
        "summary": "Delete a discussion given its ID",
        "tags": [
          "discussions"
        ]
      },
      "get": {
        "operationId": "get_discussion",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discussion"
                }
              }
            }
          }
        },
        "summary": "Get a discussion given its ID",
        "tags": [
          "discussions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "comment_discussion",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discussion"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to close this discussion"
          }
        },
        "summary": "Add comment and optionally close a discussion given its ID",
        "tags": [
          "discussions"
        ]
      }
    },
    "/discussions/{id}/comments/{cidx}": {
      "delete": {
        "operationId": "delete_discussion_comment",
        "responses": {
          "403": {
            "description": "Not allowed to delete this comment"
          }
        },
        "summary": "Delete a comment given its index",
        "tags": [
          "discussions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "cidx",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/harvest/backends": {
      "get": {
        "operationId": "harvest_backends",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestBackend"
                }
              }
            }
          }
        },
        "summary": "List all available harvest backends",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/job/{ident}/": {
      "get": {
        "operationId": "get_harvest_job",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJob"
                }
              }
            }
          }
        },
        "summary": "List all jobs for a given source",
        "tags": [
          "harvest"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/harvest/job_status": {
      "get": {
        "operationId": "get_list_harvester_api",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all available harvesters",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/source/preview": {
      "post": {
        "operationId": "preview_harvest_source_config",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HarvestSource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJobPreview"
                }
              }
            }
          }
        },
        "summary": "Preview an harvesting from a source created with the given payload",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/source/{ident}": {
      "delete": {
        "operationId": "delete_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "tags": [
          "harvest"
        ]
      },
      "get": {
        "operationId": "get_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Get a single source given an ID or a slug",
        "tags": [
          "harvest"
        ]
      },
      "parameters": [
        {
          "description": "A source ID or slug",
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HarvestSource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Update a harvest source",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/source/{ident}/jobs/": {
      "get": {
        "operationId": "list_harvest_jobs",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJobPage"
                }
              }
            }
          }
        },
        "summary": "List all jobs for a given source",
        "tags": [
          "harvest"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/harvest/source/{ident}/preview": {
      "get": {
        "operationId": "preview_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJobPreview"
                }
              }
            }
          }
        },
        "summary": "Preview a single harvest source given an ID or a slug",
        "tags": [
          "harvest"
        ]
      },
      "parameters": [
        {
          "description": "A source ID or slug",
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/harvest/source/{ident}/schedule": {
      "delete": {
        "operationId": "unschedule_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Unschedule an harvest source",
        "tags": [
          "harvest"
        ]
      },
      "parameters": [
        {
          "description": "A source ID or slug",
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "schedule_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "A cron expression",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Schedule an harvest source",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/source/{ident}/validate": {
      "parameters": [
        {
          "description": "A source ID or slug",
          "in": "path",
          "name": "ident",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "validate_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HarvestSourceValidation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Validate or reject an harvest source",
        "tags": [
          "harvest"
        ]
      }
    },
    "/harvest/sources/": {
      "get": {
        "operationId": "list_harvest_sources",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "The organization or user ID to filter on",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include sources flaggued as deleted",
            "in": "query",
            "name": "deleted",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HarvestSourcePage"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all harvest sources",
        "tags": [
          "harvest"
        ]
      },
      "post": {
        "operationId": "create_harvest_source",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HarvestSource"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSource"
                }
              }
            }
          }
        },
        "summary": "Create a new harvest source",
        "tags": [
          "harvest"
        ]
      }
    },
    "/me/": {
      "delete": {
        "operationId": "delete_me",
        "responses": {
          "204": {
            "description": "Object deleted"
          }
        },
        "summary": "Delete my profile",
        "tags": [
          "me"
        ]
      },
      "get": {
        "operationId": "get_me",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          }
        },
        "summary": "Fetch the current user (me) identity",
        "tags": [
          "me"
        ]
      },
      "put": {
        "operationId": "update_me",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Me"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Update my profile",
        "tags": [
          "me"
        ]
      }
    },
    "/me/apikey": {
      "delete": {
        "operationId": "clear_apikey",
        "responses": {
          "204": {
            "description": "API Key deleted/cleared"
          }
        },
        "summary": "Clear/destroy an apikey",
        "tags": [
          "me"
        ]
      },
      "post": {
        "operationId": "generate_apikey",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "201": {
            "description": "API Key generated"
          }
        },
        "summary": "(Re)Generate my API Key",
        "tags": [
          "me"
        ]
      }
    },
    "/me/avatar": {
      "post": {
        "operationId": "my_avatar",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Upload a new avatar",
        "tags": [
          "me"
        ]
      }
    },
    "/me/datasets/": {
      "get": {
        "operationId": "my_datasets",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all my datasets (including private ones)",
        "tags": [
          "me"
        ]
      }
    },
    "/me/metrics/": {
      "get": {
        "operationId": "my_metrics",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MyMetrics"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Fetch the current user (me) metrics",
        "tags": [
          "me"
        ]
      }
    },
    "/me/org_community_resources/": {
      "get": {
        "operationId": "my_org_community_resources",
        "parameters": [
          {
            "description": "The string to filter items",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommunityResource"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all community resources related to me and my organizations",
        "tags": [
          "me"
        ]
      }
    },
    "/me/org_datasets/": {
      "get": {
        "operationId": "my_org_datasets",
        "parameters": [
          {
            "description": "The string to filter items",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all datasets related to me and my organizations",
        "tags": [
          "me"
        ]
      }
    },
    "/me/org_discussions/": {
      "get": {
        "operationId": "my_org_discussions",
        "parameters": [
          {
            "description": "The string to filter items",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Discussion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all discussions related to my organizations",
        "tags": [
          "me"
        ]
      }
    },
    "/me/org_reuses/": {
      "get": {
        "operationId": "my_org_reuses",
        "parameters": [
          {
            "description": "The string to filter items",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Reuse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all reuses related to me and my organizations",
        "tags": [
          "me"
        ]
      }
    },
    "/me/reuses/": {
      "get": {
        "operationId": "my_reuses",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Reuse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all my reuses (including private ones)",
        "tags": [
          "me"
        ]
      }
    },
    "/metrics/{id}": {
      "get": {
        "operationId": "metrics_for",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "site"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/notifications/": {
      "get": {
        "operationId": "get_notifications",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all current user pending notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/oembed": {
      "get": {
        "description": "See: http://oembed.com/\n\nSupport datasets and reuses URLs",
        "operationId": "oembed",
        "parameters": [
          {
            "description": "The URL to retrieve embedding information for",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "description": "The maximum width of the embedded resource",
            "in": "query",
            "name": "maxwidth",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum height of the embedded resource",
            "in": "query",
            "name": "maxheight",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The required response format.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "An OEmbed compliant API endpoint",
        "tags": [
          "site"
        ]
      }
    },
    "/oembeds/": {
      "get": {
        "description": "See: http://oembed.com/\n\nThe `references` are composed by a keyword (`kind`) followed by\nthe `id` each of those separated by commas.\nE.g:\ndataset-5369992aa3a729239d205183,\nterritory-fr:departement:33@1860-07-01:emploi_dep\n\nOnly datasets and territories are supported for now.",
        "operationId": "oembeds",
        "parameters": [
          {
            "description": "References of the resources to embed.",
            "in": "query",
            "name": "references",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "The returned payload is a list of OEmbed formatted responses",
        "tags": [
          "site"
        ]
      }
    },
    "/organizations/": {
      "get": {
        "operationId": "list_organizations",
        "parameters": [
          {
            "description": "The search query",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Selected facets to fetch",
            "in": "query",
            "name": "facets",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all",
                "reuses",
                "badge",
                "datasets",
                "followers"
              ]
            }
          },
          {
            "in": "query",
            "name": "reuses",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "in": "query",
            "name": "badge",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasets",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "in": "query",
            "name": "followers",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "description": "The field (and direction) on which sorting apply",
            "in": "query",
            "name": "sort",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "reuses",
                "datasets",
                "followers",
                "views",
                "created",
                "last_modified",
                "-name",
                "-reuses",
                "-datasets",
                "-followers",
                "-views",
                "-created",
                "-last_modified"
              ]
            }
          },
          {
            "description": "The page to display",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "description": "The page size",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPage"
                }
              }
            }
          }
        },
        "summary": "List or search all organizations",
        "tags": [
          "organizations"
        ]
      },
      "post": {
        "operationId": "create_organization",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization"
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a new organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/badges/": {
      "get": {
        "operationId": "available_organization_badges",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List all available organization badges and their labels",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/roles/": {
      "get": {
        "operationId": "org_roles",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrganizationRole"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all possible organization roles",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/suggest/": {
      "get": {
        "operationId": "suggest_organizations",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSuggestion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Suggest organizations",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{id}/followers/": {
      "delete": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "unfollow_organization",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Unfollow an object given its ID",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "operationId": "list_organization_followers",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowPage"
                }
              }
            }
          }
        },
        "summary": "List all followers for a given object",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "follow_organization",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Follow an object given its ID",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/": {
      "delete": {
        "operationId": "delete_organization",
        "responses": {
          "204": {
            "description": "Organization deleted"
          },
          "404": {
            "description": "Organization not found"
          },
          "410": {
            "description": "Organization has been deleted"
          }
        },
        "summary": "Delete a organization given its identifier",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "operationId": "get_organization",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found"
          },
          "410": {
            "description": "Organization has been deleted"
          }
        },
        "summary": "Get a organization given its identifier",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_organization",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Organization"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "description": "Validation error: your data cannot be updated for now, we have been notified of the error and we will fix it as soon as possible."
          },
          "403": {
            "$ref": "#/components/responses/PermissionDenied"
          },
          "404": {
            "description": "Organization not found"
          },
          "410": {
            "description": "Organization has been deleted"
          }
        },
        "summary": "Update a organization given its identifier",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/badges/": {
      "post": {
        "operationId": "add_organization_badge",
        "parameters": [
          {
            "description": "The organization ID or slug",
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Badge"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badge"
                }
              }
            }
          }
        },
        "summary": "Create a new badge for a given organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/badges/{badge_kind}/": {
      "delete": {
        "operationId": "delete_organization_badge",
        "parameters": [
          {
            "description": "The organization ID or slug",
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Delete a badge for a given organization",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "badge_kind",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{org}/catalog": {
      "get": {
        "operationId": "rdf_organization",
        "responses": {
          "404": {
            "description": "Organization not found"
          },
          "410": {
            "description": "Organization has been deleted"
          }
        },
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{org}/catalog.{format}": {
      "get": {
        "operationId": "rdf_organization",
        "responses": {
          "404": {
            "description": "Organization not found"
          },
          "410": {
            "description": "Organization has been deleted"
          }
        },
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "format",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{org}/datasets/": {
      "get": {
        "operationId": "list_organization_datasets",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "The sorting attribute",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-created"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetPage"
                }
              }
            }
          }
        },
        "summary": "List organization datasets (including private ones when member)",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{org}/discussions/": {
      "get": {
        "operationId": "list_organization_discussions",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Discussion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List organization discussions",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{org}/logo": {
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "organization_logo",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Upload a new logo",
        "tags": [
          "organizations"
        ]
      },
      "put": {
        "operationId": "resize_organization_logo",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Set the logo BBox",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/member/{user}": {
      "delete": {
        "operationId": "delete_organization_member",
        "responses": {
          "403": {
            "description": "Not Authorized"
          }
        },
        "summary": "Delete member from an organization",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "user",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "create_organization_member",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Member"
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized"
          },
          "409": {
            "description": "User is already member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Add a member into a given organization",
        "tags": [
          "organizations"
        ]
      },
      "put": {
        "operationId": "update_organization_member",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Member"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized"
          }
        },
        "summary": "Update member status into a given organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/membership/": {
      "get": {
        "operationId": "list_membership_requests",
        "parameters": [
          {
            "description": "If provided, only return requests ith a given status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MembershipRequest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized"
          }
        },
        "summary": "List membership requests for a given organization",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "description": "The organization ID or slug",
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "post_membership_request_api_/organizations/<org:org>/membership/",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipRequest"
                }
              }
            }
          }
        },
        "summary": "Apply for membership to a given organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/membership/{id}/accept/": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "accept_membership",
        "parameters": [
          {
            "description": "The organization ID or slug",
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Accept user membership to a given organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/membership/{id}/refuse/": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "refuse_membership",
        "parameters": [
          {
            "description": "The organization ID or slug",
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefuseMembership"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Refuse user membership to a given organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org}/reuses/": {
      "get": {
        "operationId": "list_organization_reuses",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Reuse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List organization reuses (including private ones when member)",
        "tags": [
          "organizations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "org",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/posts/": {
      "get": {
        "operationId": "list_posts",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "The sorting attribute",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPage"
                }
              }
            }
          }
        },
        "summary": "List all posts",
        "tags": [
          "posts"
        ]
      },
      "post": {
        "operationId": "create_post",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Post"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a post",
        "tags": [
          "posts"
        ]
      }
    },
    "/posts/{post}/": {
      "delete": {
        "operationId": "delete_post",
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Delete a given post",
        "tags": [
          "posts"
        ]
      },
      "get": {
        "operationId": "get_post",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Get a given post",
        "tags": [
          "posts"
        ]
      },
      "parameters": [
        {
          "description": "The post ID or slug",
          "in": "path",
          "name": "post",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_post",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Post"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Update a given post",
        "tags": [
          "posts"
        ]
      }
    },
    "/posts/{post}/image": {
      "parameters": [
        {
          "in": "path",
          "name": "post",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "post_image",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Upload a new image",
        "tags": [
          "posts"
        ]
      },
      "put": {
        "operationId": "resize_post_image",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Set the image BBox",
        "tags": [
          "posts"
        ]
      }
    },
    "/posts/{post}/publish": {
      "delete": {
        "operationId": "unpublish_post",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "summary": "Publish an existing post",
        "tags": [
          "posts"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "post",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "publish_post",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "summary": "Publish an existing post",
        "tags": [
          "posts"
        ]
      }
    },
    "/reuses/": {
      "get": {
        "operationId": "list_reuses",
        "parameters": [
          {
            "description": "The search query",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Selected facets to fetch",
            "in": "query",
            "name": "facets",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all",
                "tag",
                "organization",
                "owner",
                "dataset",
                "type",
                "datasets",
                "followers",
                "badge",
                "featured",
                "topic"
              ]
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dataset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasets",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "in": "query",
            "name": "followers",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "in": "query",
            "name": "badge",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "topic",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The field (and direction) on which sorting apply",
            "in": "query",
            "name": "sort",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "created",
                "last_modified",
                "datasets",
                "followers",
                "views",
                "-title",
                "-created",
                "-last_modified",
                "-datasets",
                "-followers",
                "-views"
              ]
            }
          },
          {
            "description": "The page to display",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "description": "The page size",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReusePage"
                }
              }
            }
          }
        },
        "tags": [
          "reuses"
        ]
      },
      "post": {
        "operationId": "create_reuse",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Reuse"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a new object",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/badges/": {
      "get": {
        "operationId": "available_reuse_badges",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List all available reuse badges and their labels",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/suggest/": {
      "get": {
        "operationId": "suggest_reuses",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReuseSuggestion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Suggest reuses",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/topics/": {
      "get": {
        "operationId": "reuse_topics",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReuseTopic"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all reuse topics",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/types/": {
      "get": {
        "operationId": "reuse_types",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReuseType"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all reuse types",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{id}/followers/": {
      "delete": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "unfollow_reuse",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Unfollow an object given its ID",
        "tags": [
          "reuses"
        ]
      },
      "get": {
        "operationId": "list_reuse_followers",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowPage"
                }
              }
            }
          }
        },
        "summary": "List all followers for a given object",
        "tags": [
          "reuses"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "follow_reuse",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Follow an object given its ID",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{reuse}/": {
      "delete": {
        "operationId": "delete_reuse",
        "responses": {
          "204": {
            "description": "Reuse deleted"
          },
          "404": {
            "description": "Reuse not found"
          },
          "410": {
            "description": "Reuse has been deleted"
          }
        },
        "summary": "Delete a given reuse",
        "tags": [
          "reuses"
        ]
      },
      "get": {
        "operationId": "get_reuse",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          },
          "404": {
            "description": "Reuse not found"
          },
          "410": {
            "description": "Reuse has been deleted"
          }
        },
        "summary": "Fetch a given reuse",
        "tags": [
          "reuses"
        ]
      },
      "parameters": [
        {
          "description": "The reuse ID or slug",
          "in": "path",
          "name": "reuse",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_reuse",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Reuse"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error: your data cannot be updated for now, we have been notified of the error and we will fix it as soon as possible."
          },
          "404": {
            "description": "Reuse not found"
          },
          "410": {
            "description": "Reuse has been deleted"
          }
        },
        "summary": "Update a given reuse",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{reuse}/badges/": {
      "post": {
        "operationId": "add_reuse_badge",
        "parameters": [
          {
            "description": "The reuse ID or slug",
            "in": "path",
            "name": "reuse",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Badge"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badge"
                }
              }
            }
          }
        },
        "summary": "Create a new badge for a given reuse",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{reuse}/badges/{badge_kind}/": {
      "delete": {
        "operationId": "delete_reuse_badge",
        "parameters": [
          {
            "description": "The reuse ID or slug",
            "in": "path",
            "name": "reuse",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Delete a badge for a given reuse",
        "tags": [
          "reuses"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "badge_kind",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/reuses/{reuse}/datasets/": {
      "post": {
        "operationId": "reuse_add_dataset",
        "parameters": [
          {
            "description": "The reuse ID or slug",
            "in": "path",
            "name": "reuse",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The dataset is already present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          }
        },
        "summary": "Add a dataset to a given reuse",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{reuse}/featured/": {
      "delete": {
        "operationId": "unfeature_reuse",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          }
        },
        "summary": "Unmark a reuse as featured",
        "tags": [
          "reuses"
        ]
      },
      "parameters": [
        {
          "description": "The reuse ID or slug",
          "in": "path",
          "name": "reuse",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "feature_reuse",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reuse"
                }
              }
            }
          }
        },
        "summary": "Mark a reuse as featured",
        "tags": [
          "reuses"
        ]
      }
    },
    "/reuses/{reuse}/image": {
      "parameters": [
        {
          "description": "The reuse ID or slug",
          "in": "path",
          "name": "reuse",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "reuse_image",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Upload a new reuse image",
        "tags": [
          "reuses"
        ]
      }
    },
    "/site/": {
      "get": {
        "operationId": "get_site",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "summary": "Site-wide variables",
        "tags": [
          "site"
        ]
      }
    },
    "/site/catalog": {
      "get": {
        "operationId": "get_site_rdf_catalog",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Root RDF endpoint with content negociation handling",
        "tags": [
          "site"
        ]
      }
    },
    "/site/catalog.{format}": {
      "get": {
        "operationId": "get_site_rdf_catalog_format",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "site"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "format",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/site/context.jsonld": {
      "get": {
        "operationId": "get_site_json_ld_context",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "site"
        ]
      }
    },
    "/site/data.{format}": {
      "get": {
        "operationId": "get_site_data_portal",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Root RDF endpoint with content negociation handling",
        "tags": [
          "site"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "format",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/site/home/datasets/": {
      "get": {
        "operationId": "get_home_datasets",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List homepage datasets",
        "tags": [
          "site"
        ]
      },
      "put": {
        "operationId": "set_home_datasets",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Dataset IDs to put in homepage",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Set the homepage datasets editorial selection",
        "tags": [
          "site"
        ]
      }
    },
    "/site/home/reuses/": {
      "get": {
        "operationId": "get_home_reuses",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Reuse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List homepage featured reuses",
        "tags": [
          "site"
        ]
      },
      "put": {
        "operationId": "set_home_reuses",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Reuse IDs to put in homepage",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Reuse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Set the homepage reuses editorial selection",
        "tags": [
          "site"
        ]
      }
    },
    "/spatial/coverage/{level}/": {
      "get": {
        "operationId": "spatial_coverage",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GeoJSONFeatureCollection"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List each zone for a given level with their datasets count",
        "tags": [
          "spatial"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "level",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/spatial/granularities/": {
      "get": {
        "operationId": "spatial_granularities",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GeoGranularity"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all known spatial granularities",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/levels/": {
      "get": {
        "operationId": "spatial_levels",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GeoLevel"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all known levels",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/zone/{id}/": {
      "get": {
        "operationId": "spatial_zone",
        "parameters": [
          {
            "description": "A zone identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Fetch a zone",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/zone/{id}/children/": {
      "get": {
        "operationId": "spatial_zone_children",
        "parameters": [
          {
            "description": "A zone identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GeoJSONFeatureCollection"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Fetch children of a zone",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/zone/{id}/datasets/": {
      "get": {
        "operationId": "spatial_zone_datasets",
        "parameters": [
          {
            "description": "A zone identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Append dynamic datasets",
            "in": "query",
            "name": "dynamic",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The amount of datasets to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetReference"
                }
              }
            }
          }
        },
        "summary": "Fetch datasets for a given zone",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/zones/suggest/": {
      "get": {
        "operationId": "suggest_zones",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TerritorySuggestion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Suggest geospatial zones",
        "tags": [
          "spatial"
        ]
      }
    },
    "/spatial/zones/{ids}/": {
      "get": {
        "operationId": "spatial_zones",
        "parameters": [
          {
            "description": "A zone identifiers list (comma separated)",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoJSONFeatureCollection"
                }
              }
            }
          }
        },
        "summary": "Fetch a zone list as GeoJSON",
        "tags": [
          "spatial"
        ]
      }
    },
    "/tags/suggest/": {
      "get": {
        "operationId": "suggest_tags",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 8
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Suggest tags",
        "tags": [
          "tags"
        ]
      }
    },
    "/territory/suggest/": {
      "get": {
        "operationId": "suggest_territory",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum result size",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "site"
        ]
      }
    },
    "/topics/": {
      "get": {
        "operationId": "list_topics",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicPage"
                }
              }
            }
          }
        },
        "summary": "List all topics",
        "tags": [
          "topics"
        ]
      },
      "post": {
        "operationId": "create_topic",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Topic"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a topic",
        "tags": [
          "topics"
        ]
      }
    },
    "/topics/{topic}/": {
      "delete": {
        "operationId": "delete_topic",
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Delete a given topic",
        "tags": [
          "topics"
        ]
      },
      "get": {
        "operationId": "get_topic",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Get a given topic",
        "tags": [
          "topics"
        ]
      },
      "parameters": [
        {
          "description": "The topic ID or slug",
          "in": "path",
          "name": "topic",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_topic",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Topic"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Update a given topic",
        "tags": [
          "topics"
        ]
      }
    },
    "/transfer/": {
      "get": {
        "operationId": "list_transfers",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Transfer"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all transfer requests",
        "tags": [
          "transfer"
        ]
      },
      "post": {
        "operationId": "request_transfer",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          }
        },
        "summary": "Initiate transfer request",
        "tags": [
          "transfer"
        ]
      }
    },
    "/transfer/{id}/": {
      "get": {
        "operationId": "get_transfer",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          }
        },
        "summary": "Fetch a transfer request given its identifier",
        "tags": [
          "transfer"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "respond_to_transfer",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          }
        },
        "summary": "Respond to a transfer request",
        "tags": [
          "transfer"
        ]
      }
    },
    "/users/": {
      "get": {
        "operationId": "list_users",
        "parameters": [
          {
            "description": "The search query",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Selected facets to fetch",
            "in": "query",
            "name": "facets",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "all",
                "organization",
                "datasets",
                "followers"
              ]
            }
          },
          {
            "in": "query",
            "name": "organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasets",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "in": "query",
            "name": "followers",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "few",
                "many"
              ]
            }
          },
          {
            "description": "The field (and direction) on which sorting apply",
            "in": "query",
            "name": "sort",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "last_name",
                "first_name",
                "datasets",
                "reuses",
                "followers",
                "views",
                "created",
                "-last_name",
                "-first_name",
                "-datasets",
                "-reuses",
                "-followers",
                "-views",
                "-created"
              ]
            }
          },
          {
            "description": "The page to display",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "description": "The page size",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPage"
                }
              }
            }
          }
        },
        "summary": "List all users",
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "create_user",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        },
        "summary": "Create a new object",
        "tags": [
          "users"
        ]
      }
    },
    "/users/roles/": {
      "get": {
        "operationId": "user_roles",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRole"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all possible user roles",
        "tags": [
          "users"
        ]
      }
    },
    "/users/suggest/": {
      "get": {
        "operationId": "suggest_users",
        "parameters": [
          {
            "description": "The string to autocomplete/suggest",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of suggestion to fetch",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserSuggestion"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "Suggest users",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/followers/": {
      "delete": {
        "description": "Returns the number of followers left after the operation",
        "operationId": "unfollow_user",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Unfollow an object given its ID",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "list_user_followers",
        "parameters": [
          {
            "description": "The page to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "description": "The page size to fetch",
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowPage"
                }
              }
            }
          }
        },
        "summary": "List all followers for a given object",
        "tags": [
          "users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "follow_user",
        "responses": {
          "403": {
            "description": "When trying to follow yourself"
          }
        },
        "summary": "Follow a user given its ID",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user}/": {
      "delete": {
        "operationId": "delete_user",
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "403": {
            "description": "When trying to delete yourself"
          },
          "404": {
            "description": "User not found"
          },
          "410": {
            "description": "User is not active or has been deleted"
          }
        },
        "summary": "Delete a user given its identifier",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "get_user",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "410": {
            "description": "User is not active or has been deleted"
          }
        },
        "summary": "Get a user given its identifier",
        "tags": [
          "users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "update_user",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "User not found"
          },
          "410": {
            "description": "User is not active or has been deleted"
          }
        },
        "summary": "Update a user given its identifier",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user}/avatar": {
      "parameters": [
        {
          "in": "path",
          "name": "user",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "user_avatar",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/my_avatar"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedImage"
                }
              }
            }
          }
        },
        "summary": "Upload a new avatar for a given user",
        "tags": [
          "users"
        ]
      }
    },
    "/workers/jobs/": {
      "get": {
        "operationId": "list_jobs",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all scheduled jobs",
        "tags": [
          "workers"
        ]
      },
      "post": {
        "operationId": "post_jobs_api",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Job"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "summary": "Create a new scheduled job",
        "tags": [
          "workers"
        ]
      }
    },
    "/workers/jobs/schedulables": {
      "get": {
        "operationId": "get_jobs_reference_api",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "summary": "List all schedulable jobs",
        "tags": [
          "workers"
        ]
      }
    },
    "/workers/jobs/{id}": {
      "delete": {
        "operationId": "delete_job_api",
        "responses": {
          "204": {
            "description": "Successfuly deleted"
          }
        },
        "summary": "Delete a single scheduled job",
        "tags": [
          "workers"
        ]
      },
      "get": {
        "operationId": "get_job_api",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "summary": "Fetch a single scheduled job",
        "tags": [
          "workers"
        ]
      },
      "parameters": [
        {
          "description": "A job ID",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "put_job_api",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "summary": "Update a single scheduled job",
        "tags": [
          "workers"
        ]
      }
    },
    "/workers/tasks/{id}": {
      "get": {
        "operationId": "get_task_api",
        "parameters": [
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "type": "string",
              "format": "mask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "summary": "Get a tasks status given its ID",
        "tags": [
          "workers"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "tags": [
    {
      "description": "Site global namespace",
      "name": "site"
    },
    {
      "description": "Spatial references",
      "name": "spatial"
    },
    {
      "description": "Discussion related operations",
      "name": "discussions"
    },
    {
      "description": "User related operations",
      "name": "users"
    },
    {
      "description": "Connected user related operations",
      "name": "me"
    },
    {
      "description": "Dataset related operations",
      "name": "datasets"
    },
    {
      "description": "Reuse related operations",
      "name": "reuses"
    },
    {
      "description": "Organization related operations",
      "name": "organizations"
    },
    {
      "description": "Asynchronous workers related operations",
      "name": "workers"
    },
    {
      "description": "Tags related operations",
      "name": "tags"
    },
    {
      "description": "Topics related operations",
      "name": "topics"
    },
    {
      "description": "Posts related operations",
      "name": "posts"
    },
    {
      "name": "transfer"
    },
    {
      "description": "Notifications API",
      "name": "notifications"
    },
    {
      "description": "Avatars",
      "name": "avatars"
    },
    {
      "description": "Harvest related operations",
      "name": "harvest"
    }
  ],
  "servers": [
    {
      "url": "//www.data.gouv.fr/api/1"
    }
  ],
  "components": {
    "responses": {
      "MaskError": {
        "description": "When any error occurs on mask"
      },
      "ParseError": {
        "description": "When a mask can't be parsed"
      },
      "PermissionDenied": {
        "description": "Error occuring when the user does not have the required permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedFileType": {
        "description": "Error occuring when the user try to upload a non-allowed file type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UploadError": {
        "description": "API Upload response handler",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadStatus"
            }
          }
        }
      },
      "UploadProgress": {
        "description": "API Upload response handler",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadStatus"
            }
          }
        }
      },
      "UploadStatus": {
        "description": "API Upload response handler",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadStatus"
            }
          }
        }
      },
      "ValueError": {
        "description": "A generic value error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Badge": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Badge"
            }
          }
        },
        "required": true
      },
      "my_avatar": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string",
                  "format": "binary"
                },
                "bbox": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Post": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Post"
            }
          }
        },
        "required": true
      },
      "Dataset": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Dataset"
            }
          }
        },
        "required": true
      },
      "Reuse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Reuse"
            }
          }
        },
        "required": true
      },
      "CommunityResource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CommunityResource"
            }
          }
        },
        "required": true
      },
      "Resource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        },
        "required": true
      },
      "upload_new_dataset_resource": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string",
                  "format": "binary"
                },
                "uuid": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "partindex": {
                  "type": "integer"
                },
                "partbyteoffset": {
                  "type": "integer"
                },
                "totalparts": {
                  "type": "integer"
                },
                "chunksize": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "HarvestSource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HarvestSource"
            }
          }
        },
        "required": true
      },
      "Organization": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        },
        "required": true
      },
      "Member": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Member"
            }
          }
        },
        "required": true
      },
      "Topic": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Topic"
            }
          }
        },
        "required": true
      },
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "apikey": {
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey"
      }
    },
    "schemas": {
      "Activity": {
        "properties": {
          "actor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The user who performed the action",
            "readOnly": true
          },
          "created_at": {
            "description": "When the action has been performed",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "icon": {
            "description": "The icon of the activity",
            "type": "string"
          },
          "key": {
            "description": "The key of the activity",
            "type": "string"
          },
          "kwargs": {
            "description": "Some action specific context",
            "type": "object"
          },
          "label": {
            "description": "The label of the activity",
            "type": "string"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference"
              }
            ],
            "description": "The organization who performed the action",
            "readOnly": true
          },
          "related_to": {
            "description": "The activity target name",
            "type": "string"
          },
          "related_to_id": {
            "description": "The activity target object identifier",
            "type": "string"
          },
          "related_to_kind": {
            "description": "The activity target object class name",
            "type": "string"
          },
          "related_to_url": {
            "description": "The activity target model",
            "type": "string"
          }
        },
        "required": [
          "icon",
          "key",
          "label",
          "related_to",
          "related_to_id",
          "related_to_kind",
          "related_to_url"
        ],
        "type": "object"
      },
      "ActivityPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "ApiKey": {
        "properties": {
          "apikey": {
            "description": "The user API Key",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Badge": {
        "properties": {
          "kind": {
            "description": "Kind of badge (certified, etc), specific to each model",
            "type": "string"
          }
        },
        "required": [
          "kind"
        ],
        "type": "object"
      },
      "BaseReference": {
        "discriminator": {
          "propertyName": "class"
        },
        "properties": {
          "class": {
            "description": "The object class",
            "type": "string"
          },
          "id": {
            "description": "The object unique identifier",
            "type": "string"
          }
        },
        "required": [
          "class",
          "id"
        ],
        "type": "object"
      },
      "Checksum": {
        "properties": {
          "type": {
            "default": "sha1",
            "description": "The hashing algorithm used to compute the checksum",
            "enum": [
              "sha1",
              "sha2",
              "sha256",
              "md5",
              "crc"
            ],
            "example": "sha1",
            "type": "string"
          },
          "value": {
            "description": "The resulting checksum/hash",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "CommunityResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "dataset": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatasetReference"
                  }
                ],
                "description": "Reference to the associated dataset"
              },
              "organization": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationReference"
                  }
                ],
                "description": "The producer organization"
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserReference"
                  }
                ],
                "description": "The user information"
              }
            },
            "type": "object"
          }
        ]
      },
      "CommunityResourcePage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/CommunityResource"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "Crontab": {
        "properties": {
          "day_of_month": {
            "default": "*",
            "description": "Cron expression for day of month",
            "type": "string"
          },
          "day_of_week": {
            "default": "*",
            "description": "Cron expression for day of week",
            "type": "string"
          },
          "hour": {
            "default": "*",
            "description": "Cron expression for hour",
            "type": "string"
          },
          "minute": {
            "default": "*",
            "description": "Cron expression for minute",
            "type": "string"
          },
          "month_of_year": {
            "default": "*",
            "description": "Cron expression for month of year",
            "type": "string"
          }
        },
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month_of_year"
        ],
        "type": "object"
      },
      "Dataset": {
        "properties": {
          "acronym": {
            "description": "An optional dataset acronym",
            "type": "string"
          },
          "archived": {
            "description": "The archival date if archived",
            "format": "date-time",
            "type": "string"
          },
          "badges": {
            "description": "The dataset badges",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "readOnly": true,
            "type": "array"
          },
          "community_resources": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              ],
              "description": "The dataset community submitted resources"
            },
            "type": "array"
          },
          "created_at": {
            "description": "The dataset creation date",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "description": "The deletion date if deleted",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The dataset description in markdown",
            "format": "markdown",
            "type": "string"
          },
          "extras": {
            "description": "Extras attributes as key-value pairs",
            "type": "object"
          },
          "featured": {
            "description": "Is the dataset featured",
            "type": "boolean"
          },
          "frequency": {
            "default": "unknown",
            "description": "The update frequency",
            "enum": [
              "unknown",
              "punctual",
              "continuous",
              "hourly",
              "fourTimesADay",
              "threeTimesADay",
              "semidaily",
              "daily",
              "fourTimesAWeek",
              "threeTimesAWeek",
              "semiweekly",
              "weekly",
              "biweekly",
              "threeTimesAMonth",
              "semimonthly",
              "monthly",
              "bimonthly",
              "quarterly",
              "threeTimesAYear",
              "semiannual",
              "annual",
              "biennial",
              "triennial",
              "quinquennial",
              "irregular"
            ],
            "example": "unknown",
            "type": "string"
          },
          "frequency_date": {
            "description": "Next expected update date, you will be notified once that date is reached.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The dataset identifier",
            "readOnly": true,
            "type": "string"
          },
          "last_modified": {
            "description": "The dataset last modification date",
            "format": "date-time",
            "type": "string"
          },
          "last_update": {
            "description": "The resources last modification date",
            "format": "date-time",
            "type": "string"
          },
          "license": {
            "default": "notspecified",
            "description": "The dataset license",
            "type": "string"
          },
          "metrics": {
            "description": "The dataset metrics",
            "type": "object"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference"
              }
            ],
            "description": "The producer organization"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The user information"
          },
          "page": {
            "description": "The dataset page URL",
            "type": "string"
          },
          "private": {
            "description": "Is the dataset private to the owner or the organization",
            "type": "boolean"
          },
          "quality": {
            "description": "The dataset quality",
            "readOnly": true,
            "type": "object"
          },
          "resources": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Resource"
                }
              ],
              "description": "The dataset resources"
            },
            "type": "array"
          },
          "slug": {
            "description": "The dataset permalink string",
            "type": "string"
          },
          "spatial": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpatialCoverage"
              }
            ],
            "description": "The spatial coverage"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temporal_coverage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemporalCoverage"
              }
            ],
            "description": "The temporal coverage"
          },
          "title": {
            "description": "The dataset title",
            "type": "string"
          },
          "uri": {
            "description": "The dataset API URI",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "description",
          "frequency",
          "last_modified",
          "last_update",
          "page",
          "slug",
          "title",
          "uri"
        ],
        "type": "object",
        "x-mask": "{id,title,acronym,slug,description,created_at,last_modified,deleted,private,tags,badges,resources,frequency,frequency_date,extras,metrics,organization,owner,temporal_coverage,spatial,license,uri,page,last_update,archived}"
      },
      "DatasetPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object",
        "x-mask": "{data{id,title,acronym,slug,description,created_at,last_modified,deleted,private,tags,badges,resources,frequency,frequency_date,extras,metrics,organization,owner,temporal_coverage,spatial,license,uri,page,last_update,archived},*}"
      },
      "DatasetPreview": {
        "properties": {
          "acronym": {
            "description": "An optional dataset acronym",
            "type": "string"
          },
          "archived": {
            "description": "The archival date if archived",
            "format": "date-time",
            "type": "string"
          },
          "badges": {
            "description": "The dataset badges",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "readOnly": true,
            "type": "array"
          },
          "community_resources": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CommunityResource"
                }
              ],
              "description": "The dataset community submitted resources"
            },
            "type": "array"
          },
          "created_at": {
            "description": "The dataset creation date",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "description": "The deletion date if deleted",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The dataset description in markdown",
            "format": "markdown",
            "type": "string"
          },
          "extras": {
            "description": "Extras attributes as key-value pairs",
            "type": "object"
          },
          "featured": {
            "description": "Is the dataset featured",
            "type": "boolean"
          },
          "frequency": {
            "default": "unknown",
            "description": "The update frequency",
            "enum": [
              "unknown",
              "punctual",
              "continuous",
              "hourly",
              "fourTimesADay",
              "threeTimesADay",
              "semidaily",
              "daily",
              "fourTimesAWeek",
              "threeTimesAWeek",
              "semiweekly",
              "weekly",
              "biweekly",
              "threeTimesAMonth",
              "semimonthly",
              "monthly",
              "bimonthly",
              "quarterly",
              "threeTimesAYear",
              "semiannual",
              "annual",
              "biennial",
              "triennial",
              "quinquennial",
              "irregular"
            ],
            "example": "unknown",
            "type": "string"
          },
          "frequency_date": {
            "description": "Next expected update date, you will be notified once that date is reached.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The dataset identifier",
            "readOnly": true,
            "type": "string"
          },
          "last_modified": {
            "description": "The dataset last modification date",
            "format": "date-time",
            "type": "string"
          },
          "last_update": {
            "description": "The resources last modification date",
            "format": "date-time",
            "type": "string"
          },
          "license": {
            "default": "notspecified",
            "description": "The dataset license",
            "type": "string"
          },
          "metrics": {
            "description": "The dataset metrics",
            "type": "object"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference"
              }
            ],
            "description": "The producer organization"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The user information"
          },
          "page": {
            "description": "The dataset page URL (fake)",
            "type": "string"
          },
          "private": {
            "description": "Is the dataset private to the owner or the organization",
            "type": "boolean"
          },
          "quality": {
            "description": "The dataset quality",
            "readOnly": true,
            "type": "object"
          },
          "resources": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Resource"
                }
              ],
              "description": "The dataset resources"
            },
            "type": "array"
          },
          "slug": {
            "description": "The dataset permalink string",
            "type": "string"
          },
          "spatial": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpatialCoverage"
              }
            ],
            "description": "The spatial coverage"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temporal_coverage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemporalCoverage"
              }
            ],
            "description": "The temporal coverage"
          },
          "title": {
            "description": "The dataset title",
            "type": "string"
          },
          "uri": {
            "description": "The dataset API URI (fake)",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "description",
          "frequency",
          "last_modified",
          "last_update",
          "slug",
          "title"
        ],
        "type": "object"
      },
      "DatasetReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReference"
          },
          {
            "properties": {
              "acronym": {
                "description": "An optional dataset acronym",
                "readOnly": true,
                "type": "string"
              },
              "page": {
                "description": "The web page URL for this dataset",
                "readOnly": true,
                "type": "string"
              },
              "title": {
                "description": "The dataset title",
                "readOnly": true,
                "type": "string"
              },
              "uri": {
                "description": "The API URI for this dataset",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "DatasetSuggestion": {
        "properties": {
          "acronym": {
            "description": "An optional dataset acronym",
            "type": "string"
          },
          "id": {
            "description": "The dataset identifier",
            "type": "string"
          },
          "image_url": {
            "description": "The dataset (organization) logo URL",
            "type": "string"
          },
          "page": {
            "description": "The web page URL for this dataset",
            "type": "string"
          },
          "score": {
            "description": "The internal match score",
            "type": "number"
          },
          "slug": {
            "description": "The dataset permalink string",
            "type": "string"
          },
          "title": {
            "description": "The dataset title",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Discussion": {
        "discriminator": {
          "propertyName": "class"
        },
        "properties": {
          "class": {
            "description": "The object class",
            "type": "string"
          },
          "closed": {
            "description": "The discussion closing date",
            "format": "date-time",
            "type": "string"
          },
          "closed_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The user who closed the discussion"
          },
          "created": {
            "description": "The discussion creation date",
            "format": "date-time",
            "type": "string"
          },
          "discussion": {
            "$ref": "#/components/schemas/DiscussionMessage"
          },
          "extras": {
            "description": "Extra attributes as key-value pairs",
            "type": "object"
          },
          "id": {
            "description": "The discussion identifier",
            "type": "string"
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelReference"
              }
            ],
            "description": "The discussion target object"
          },
          "title": {
            "description": "The discussion title",
            "type": "string"
          },
          "url": {
            "description": "The discussion API URI",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The discussion author"
          }
        },
        "required": [
          "class"
        ],
        "type": "object"
      },
      "DiscussionMessage": {
        "properties": {
          "content": {
            "description": "The message body",
            "type": "string"
          },
          "posted_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The message author"
          },
          "posted_on": {
            "description": "The message posting date",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscussionPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Discussion"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "DiscussionResponse": {
        "properties": {
          "close": {
            "description": "Is this a closing response. Only subject owner can close",
            "type": "boolean"
          },
          "comment": {
            "description": "The comment to submit",
            "type": "string"
          }
        },
        "required": [
          "comment"
        ],
        "type": "object"
      },
      "DiscussionStart": {
        "properties": {
          "comment": {
            "description": "The content of the initial comment",
            "type": "string"
          },
          "extras": {
            "description": "Extras attributes as key-value pairs",
            "type": "object"
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelReference"
              }
            ],
            "description": "The discussion target object"
          },
          "title": {
            "description": "The title of the discussion to open",
            "type": "string"
          }
        },
        "required": [
          "comment",
          "subject",
          "title"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Follow": {
        "properties": {
          "follower": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The follower",
            "readOnly": true
          },
          "id": {
            "description": "The follow object technical ID",
            "readOnly": true,
            "type": "string"
          },
          "since": {
            "description": "The date from which the user started following",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FollowPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Follow"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "Frequency": {
        "properties": {
          "id": {
            "description": "The frequency identifier",
            "type": "string"
          },
          "label": {
            "description": "The frequency display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoGranularity": {
        "properties": {
          "id": {
            "description": "The granularity identifier",
            "type": "string"
          },
          "name": {
            "description": "The granularity name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "GeoJSON": {
        "properties": {
          "coordinates": {
            "description": "The geometry as coordinates lists",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "description": "The GeoJSON Type",
            "enum": [
              "Point",
              "LineString",
              "Polygon",
              "MultiPoint",
              "MultiLineString",
              "MultiPolygon"
            ],
            "example": "Point",
            "type": "string"
          }
        },
        "required": [
          "coordinates",
          "type"
        ],
        "type": "object"
      },
      "GeoJSONFeature": {
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/GeoJSON"
          },
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object"
          },
          "type": {
            "enum": [
              "Feature"
            ],
            "example": "Feature",
            "type": "string"
          }
        },
        "required": [
          "geometry",
          "type"
        ],
        "type": "object"
      },
      "GeoJSONFeatureCollection": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/GeoJSONFeature"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "FeatureCollection"
            ],
            "example": "FeatureCollection",
            "type": "string"
          }
        },
        "required": [
          "features",
          "type"
        ],
        "type": "object"
      },
      "GeoLevel": {
        "properties": {
          "id": {
            "description": "The level identifier",
            "type": "string"
          },
          "name": {
            "description": "The level name",
            "type": "string"
          },
          "parents": {
            "description": "The parent levels",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "HarvestBackend": {
        "properties": {
          "features": {
            "description": "The backend optional features",
            "items": {
              "$ref": "#/components/schemas/HarvestFeature"
            },
            "type": "array"
          },
          "filters": {
            "description": "The backend supported filters",
            "items": {
              "$ref": "#/components/schemas/HarvestFilter"
            },
            "type": "array"
          },
          "id": {
            "description": "The backend identifier",
            "type": "string"
          },
          "label": {
            "description": "The backend display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HarvestError": {
        "properties": {
          "created_at": {
            "description": "The error creation date",
            "format": "date-time",
            "type": "string"
          },
          "details": {
            "description": "Optional details (ie. stacktrace)",
            "type": "string"
          },
          "message": {
            "description": "The error short message",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "message"
        ],
        "type": "object"
      },
      "HarvestFeature": {
        "properties": {
          "default": {
            "description": "The feature default state (true is enabled)",
            "type": "string"
          },
          "description": {
            "description": "Some details about the behavior",
            "type": "string"
          },
          "key": {
            "description": "The feature key",
            "type": "string"
          },
          "label": {
            "description": "A localized human-readable and descriptive label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HarvestFilter": {
        "properties": {
          "description": {
            "description": "The filter details",
            "type": "string"
          },
          "key": {
            "description": "The filter key",
            "type": "string"
          },
          "label": {
            "description": "A localized human-readable label",
            "type": "string"
          },
          "type": {
            "description": "The filter expected type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HarvestItem": {
        "properties": {
          "args": {
            "default": [],
            "description": "The item positional arguments",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created": {
            "description": "The item creation date",
            "format": "date-time",
            "type": "string"
          },
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetReference"
              }
            ],
            "description": "The processed dataset"
          },
          "ended": {
            "description": "The item end date",
            "format": "date-time",
            "type": "string"
          },
          "errors": {
            "description": "The item errors",
            "items": {
              "$ref": "#/components/schemas/HarvestError"
            },
            "type": "array"
          },
          "kwargs": {
            "default": {},
            "description": "The item keyword arguments",
            "type": "object"
          },
          "remote_id": {
            "description": "The item remote ID to process",
            "type": "string"
          },
          "started": {
            "description": "The item start date",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The item status",
            "enum": [
              "pending",
              "started",
              "done",
              "failed",
              "skipped",
              "archived"
            ],
            "example": "pending",
            "type": "string"
          }
        },
        "required": [
          "created",
          "remote_id",
          "status"
        ],
        "type": "object"
      },
      "HarvestItemPreview": {
        "properties": {
          "args": {
            "default": [],
            "description": "The item positional arguments",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created": {
            "description": "The item creation date",
            "format": "date-time",
            "type": "string"
          },
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetPreview"
              }
            ],
            "description": "The processed dataset"
          },
          "ended": {
            "description": "The item end date",
            "format": "date-time",
            "type": "string"
          },
          "errors": {
            "description": "The item errors",
            "items": {
              "$ref": "#/components/schemas/HarvestError"
            },
            "type": "array"
          },
          "kwargs": {
            "default": {},
            "description": "The item keyword arguments",
            "type": "object"
          },
          "remote_id": {
            "description": "The item remote ID to process",
            "type": "string"
          },
          "started": {
            "description": "The item start date",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The item status",
            "enum": [
              "pending",
              "started",
              "done",
              "failed",
              "skipped",
              "archived"
            ],
            "example": "pending",
            "type": "string"
          }
        },
        "required": [
          "created",
          "remote_id",
          "status"
        ],
        "type": "object"
      },
      "HarvestJob": {
        "properties": {
          "created": {
            "description": "The job creation date",
            "format": "date-time",
            "type": "string"
          },
          "ended": {
            "description": "The job end date",
            "format": "date-time",
            "type": "string"
          },
          "errors": {
            "description": "The job initialization errors",
            "items": {
              "$ref": "#/components/schemas/HarvestError"
            },
            "type": "array"
          },
          "id": {
            "description": "The job execution ID",
            "type": "string"
          },
          "items": {
            "description": "The job collected items",
            "items": {
              "$ref": "#/components/schemas/HarvestItem"
            },
            "type": "array"
          },
          "source": {
            "description": "The source owning the job",
            "type": "string"
          },
          "started": {
            "description": "The job start date",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The job status",
            "enum": [
              "pending",
              "initializing",
              "initialized",
              "processing",
              "done",
              "done-errors",
              "failed"
            ],
            "example": "pending",
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "source",
          "status"
        ],
        "type": "object"
      },
      "HarvestJobPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/HarvestJob"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "HarvestJobPreview": {
        "properties": {
          "created": {
            "description": "The job creation date",
            "format": "date-time",
            "type": "string"
          },
          "ended": {
            "description": "The job end date",
            "format": "date-time",
            "type": "string"
          },
          "errors": {
            "description": "The job initialization errors",
            "items": {
              "$ref": "#/components/schemas/HarvestError"
            },
            "type": "array"
          },
          "id": {
            "description": "The job execution ID",
            "type": "string"
          },
          "items": {
            "description": "The job collected items",
            "items": {
              "$ref": "#/components/schemas/HarvestItemPreview"
            },
            "type": "array"
          },
          "source": {
            "description": "The source owning the job",
            "type": "string"
          },
          "started": {
            "description": "The job start date",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The job status",
            "enum": [
              "pending",
              "initializing",
              "initialized",
              "processing",
              "done",
              "done-errors",
              "failed"
            ],
            "example": "pending",
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "source",
          "status"
        ],
        "type": "object"
      },
      "HarvestSource": {
        "properties": {
          "active": {
            "default": false,
            "description": "Is this source active",
            "type": "boolean"
          },
          "autoarchive": {
            "default": true,
            "description": "If enabled, datasets not present on the remote source will be automatically archived",
            "type": "boolean"
          },
          "backend": {
            "description": "The source backend",
            "enum": [
              "dcat",
              "ods",
              "maaf",
              "ckan",
              "dkan"
            ],
            "example": "dcat",
            "type": "string"
          },
          "config": {
            "description": "The configuration as key-value pairs",
            "type": "object"
          },
          "created_at": {
            "description": "The source creation date",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "description": "The source deletion date",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The source description",
            "format": "markdown",
            "type": "string"
          },
          "id": {
            "description": "The source unique identifier",
            "readOnly": true,
            "type": "string"
          },
          "last_job": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HarvestJob"
              }
            ],
            "description": "The last job for this source",
            "readOnly": true
          },
          "name": {
            "description": "The source display name",
            "type": "string"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference"
              }
            ],
            "description": "The producer organization"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The owner information"
          },
          "schedule": {
            "description": "The source schedule (interval or cron expression)",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "The source base URL",
            "type": "string"
          },
          "validation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HarvestSourceValidation"
              }
            ],
            "description": "Has the source been validated",
            "readOnly": true
          }
        },
        "required": [
          "active",
          "autoarchive",
          "backend",
          "created_at",
          "name",
          "url"
        ],
        "type": "object"
      },
      "HarvestSourcePage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/HarvestSource"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "HarvestSourceValidation": {
        "properties": {
          "by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "Who performed the validation",
            "readOnly": true
          },
          "comment": {
            "description": "A comment about the validation. Required on rejection",
            "type": "string"
          },
          "on": {
            "description": "Date date on which validation was performed",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Is it validated or not",
            "enum": [
              "pending",
              "accepted",
              "refused"
            ],
            "example": "pending",
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "Interval": {
        "properties": {
          "every": {
            "description": "The interval without unit",
            "type": "integer"
          },
          "period": {
            "description": "The period/interval type",
            "enum": [
              "days",
              "hours",
              "minutes",
              "seconds",
              "microseconds"
            ],
            "example": "days",
            "type": "string"
          }
        },
        "required": [
          "every",
          "period"
        ],
        "type": "object"
      },
      "Job": {
        "properties": {
          "args": {
            "default": [],
            "description": "The job execution arguments",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "crontab": {
            "$ref": "#/components/schemas/Crontab"
          },
          "description": {
            "description": "The job description",
            "type": "string"
          },
          "enabled": {
            "default": false,
            "description": "Is this job enabled",
            "type": "boolean"
          },
          "id": {
            "description": "The job unique identifier",
            "readOnly": true,
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Interval"
          },
          "kwargs": {
            "default": {},
            "description": "The job execution keyword arguments",
            "type": "object"
          },
          "last_run_at": {
            "description": "The last job execution date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_run_id": {
            "description": "The last execution task id",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The job unique name",
            "type": "string"
          },
          "schedule": {
            "description": "The schedule display",
            "readOnly": true,
            "type": "string"
          },
          "task": {
            "description": "The task name",
            "enum": [
              "test-high-queue",
              "test-default-queue",
              "harvest",
              "piwik-bulk-track-api",
              "export-csv",
              "purge-reuses",
              "recommendations-clean",
              "test-error",
              "apigouvfr-load-apis",
              "recommendations-add",
              "piwik-update-metrics",
              "purge-datasets",
              "piwik-current-metrics",
              "purge-harvest-jobs",
              "compute-site-metrics",
              "send-frequency-reminder",
              "purge-chunks",
              "piwik-yesterday-metrics",
              "test-log",
              "update-datasets-reuses-metrics",
              "purge-harvesters",
              "test-low-queue",
              "purge-organizations",
              "count-tags"
            ],
            "example": "test-high-queue",
            "type": "string"
          }
        },
        "required": [
          "name",
          "task"
        ],
        "type": "object"
      },
      "License": {
        "properties": {
          "alternate_titles": {
            "description": "Same alternative known titles (improve rematch)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "alternate_urls": {
            "description": "Same alternative known URLs (improve rematch)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "flags": {
            "description": "Some arbitry flags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The license identifier",
            "type": "string"
          },
          "maintainer": {
            "description": "The license official maintainer",
            "type": "string"
          },
          "title": {
            "description": "The resource title",
            "type": "string"
          },
          "url": {
            "description": "The license official URL",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title"
        ],
        "type": "object"
      },
      "Me": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "properties": {
              "apikey": {
                "description": "The user API Key",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "Member": {
        "properties": {
          "role": {
            "default": "editor",
            "description": "The member role in the organization",
            "enum": [
              "admin",
              "editor"
            ],
            "example": "admin",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          }
        },
        "required": [
          "role"
        ],
        "type": "object"
      },
      "MembershipRequest": {
        "properties": {
          "comment": {
            "description": "A request comment from the user",
            "type": "string"
          },
          "created": {
            "description": "The request creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "The current request status",
            "enum": [
              "pending",
              "accepted",
              "refused"
            ],
            "example": "pending",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          }
        },
        "required": [
          "comment",
          "status"
        ],
        "type": "object"
      },
      "ModelReference": {
        "properties": {
          "class": {
            "description": "The model class",
            "type": "string"
          },
          "id": {
            "description": "The object identifier",
            "type": "string"
          }
        },
        "required": [
          "class",
          "id"
        ],
        "type": "object"
      },
      "MyMetrics": {
        "properties": {
          "datasets_count": {
            "description": "The user's datasets number",
            "readOnly": true,
            "type": "integer"
          },
          "datasets_org_count": {
            "description": "The user's orgs datasets number",
            "readOnly": true,
            "type": "integer"
          },
          "followers_count": {
            "description": "The user's followers number",
            "readOnly": true,
            "type": "integer"
          },
          "followers_org_count": {
            "description": "The user's orgs followers number",
            "readOnly": true,
            "type": "integer"
          },
          "id": {
            "description": "The user identifier",
            "type": "string"
          },
          "resources_availability": {
            "description": "The user's resources availability percentage",
            "readOnly": true,
            "type": "number"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Notification": {
        "properties": {
          "created_on": {
            "description": "The notification creation datetime",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "details": {
            "description": "Key-Value details depending on notification type",
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "description": "The notification type",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "properties": {
          "acronym": {
            "description": "The organization acronym",
            "type": "string"
          },
          "badges": {
            "description": "The organization badges",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "readOnly": true,
            "type": "array"
          },
          "created_at": {
            "description": "The organization creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted": {
            "description": "The organization deletion date if deleted",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The organization description in Markdown",
            "format": "markdown",
            "type": "string"
          },
          "id": {
            "description": "The organization identifier",
            "type": "string"
          },
          "last_modified": {
            "description": "The organization last modification date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "logo": {
            "description": "The organization logo URL",
            "type": "string"
          },
          "logo_thumbnail": {
            "description": "The organization logo thumbnail URL. This is the square (100x100) and cropped version.",
            "type": "string"
          },
          "members": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Member"
                }
              ],
              "description": "The organization members"
            },
            "type": "array"
          },
          "metrics": {
            "description": "The organization metrics",
            "readOnly": true,
            "type": "object"
          },
          "name": {
            "description": "The organization name",
            "type": "string"
          },
          "page": {
            "description": "The organization page URL",
            "readOnly": true,
            "type": "string"
          },
          "slug": {
            "description": "The organization string used as permalink",
            "type": "string"
          },
          "uri": {
            "description": "The organization API URI",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "The organization website URL",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "slug"
        ],
        "type": "object"
      },
      "OrganizationPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "OrganizationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReference"
          },
          {
            "properties": {
              "acronym": {
                "description": "The organization acronym",
                "type": "string"
              },
              "badges": {
                "description": "The organization badges",
                "items": {
                  "$ref": "#/components/schemas/Badge"
                },
                "readOnly": true,
                "type": "array"
              },
              "logo": {
                "description": "The organization logo URL",
                "type": "string"
              },
              "logo_thumbnail": {
                "description": "The organization logo thumbnail URL. This is the square (100x100) and cropped version.",
                "type": "string"
              },
              "name": {
                "description": "The organization name",
                "readOnly": true,
                "type": "string"
              },
              "page": {
                "description": "The organization web page URL",
                "readOnly": true,
                "type": "string"
              },
              "slug": {
                "description": "The organization string used as permalink",
                "type": "string"
              },
              "uri": {
                "description": "The organization API URI",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "slug"
            ],
            "type": "object"
          }
        ]
      },
      "OrganizationRole": {
        "properties": {
          "id": {
            "description": "The role identifier",
            "type": "string"
          },
          "label": {
            "description": "The role label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationSuggestion": {
        "properties": {
          "acronym": {
            "description": "The organization acronym",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The organization identifier",
            "readOnly": true,
            "type": "string"
          },
          "image_url": {
            "description": "The organization logo URL",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The organization name",
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "description": "The organization web page URL",
            "readOnly": true,
            "type": "string"
          },
          "score": {
            "description": "The internal match score",
            "readOnly": true,
            "type": "number"
          },
          "slug": {
            "description": "The organization permalink string",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Post": {
        "properties": {
          "content": {
            "description": "The post content in Markdown",
            "format": "markdown",
            "type": "string"
          },
          "created_at": {
            "description": "The post creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "credit_to": {
            "description": "An optional credit line (associated to the image)",
            "type": "string"
          },
          "credit_url": {
            "description": "An optional link associated to the credits",
            "type": "string"
          },
          "datasets": {
            "description": "The post datasets",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array"
          },
          "headline": {
            "description": "The post headline",
            "type": "string"
          },
          "id": {
            "description": "The post identifier",
            "type": "string"
          },
          "image": {
            "description": "The post image",
            "readOnly": true,
            "type": "string"
          },
          "last_modified": {
            "description": "The post last modification date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The post name",
            "type": "string"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The owner user",
            "readOnly": true
          },
          "page": {
            "description": "The post page URL",
            "readOnly": true,
            "type": "string"
          },
          "published": {
            "description": "The post publication date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "reuses": {
            "description": "The post reuses",
            "items": {
              "$ref": "#/components/schemas/Reuse"
            },
            "type": "array"
          },
          "slug": {
            "description": "The post permalink string",
            "readOnly": true,
            "type": "string"
          },
          "tags": {
            "description": "Some keywords to help in search",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "description": "The post API URI",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "content",
          "headline",
          "name"
        ],
        "type": "object",
        "x-mask": "{*,datasets{title,acronym,uri,page},reuses{title,image,image_thumbnail,uri,page}}"
      },
      "PostPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Post"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "RefuseMembership": {
        "properties": {
          "comment": {
            "description": "The refusal comment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Resource": {
        "properties": {
          "checksum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Checksum"
              }
            ],
            "description": "A checksum to validate file validity"
          },
          "created_at": {
            "description": "The resource creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The resource markdown description",
            "format": "markdown",
            "type": "string"
          },
          "extras": {
            "description": "Extra attributes as key-value pairs",
            "type": "object"
          },
          "filesize": {
            "description": "The resource file size in bytes",
            "type": "integer"
          },
          "filetype": {
            "description": "Whether the resource is an uploaded file, a remote file or an API",
            "enum": [
              "file",
              "remote"
            ],
            "example": "file",
            "type": "string"
          },
          "format": {
            "description": "The resource format",
            "type": "string"
          },
          "id": {
            "description": "The resource unique ID",
            "readOnly": true,
            "type": "string"
          },
          "last_modified": {
            "description": "The resource last modification date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "latest": {
            "description": "The permanent URL redirecting to the latest version of the resource. When the resource data is updated, the URL will change, the latest URL won't.",
            "readOnly": true,
            "type": "string"
          },
          "metrics": {
            "description": "The resource metrics",
            "readOnly": true,
            "type": "object"
          },
          "mime": {
            "description": "The resource mime type",
            "type": "string"
          },
          "preview_url": {
            "description": "An optional preview URL to be loaded as a standalone page (ie. iframe or new page)",
            "readOnly": true,
            "type": "string"
          },
          "published": {
            "description": "The resource publication date",
            "format": "date-time",
            "type": "string"
          },
          "schema": {
            "description": "Reference to the associated schema",
            "readOnly": true,
            "type": "object"
          },
          "title": {
            "description": "The resource title",
            "type": "string"
          },
          "type": {
            "description": "Resource type (documentation, API...)",
            "enum": [
              "main",
              "documentation",
              "update",
              "api",
              "code",
              "other"
            ],
            "example": "main",
            "type": "string"
          },
          "url": {
            "description": "The resource URL",
            "type": "string"
          }
        },
        "required": [
          "filetype",
          "format",
          "title",
          "type",
          "url"
        ],
        "type": "object"
      },
      "ResourceType": {
        "properties": {
          "id": {
            "description": "The resource type identifier",
            "type": "string"
          },
          "label": {
            "description": "The resource type display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Reuse": {
        "properties": {
          "badges": {
            "description": "The reuse badges",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "readOnly": true,
            "type": "array"
          },
          "created_at": {
            "description": "The reuse creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "datasets": {
            "description": "The reused datasets",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array"
          },
          "deleted": {
            "description": "The organization identifier",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The reuse description in Markdown",
            "format": "markdown",
            "type": "string"
          },
          "featured": {
            "description": "Is the reuse featured",
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "description": "The reuse identifier",
            "readOnly": true,
            "type": "string"
          },
          "image": {
            "description": "The reuse thumbnail thumbnail (cropped) URL",
            "type": "string"
          },
          "image_thumbnail": {
            "description": "The reuse thumbnail thumbnail URL. This is the square (500x500) and cropped version.",
            "type": "string"
          },
          "last_modified": {
            "description": "The reuse last modification date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metrics": {
            "description": "The reuse metrics",
            "readOnly": true,
            "type": "object"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference"
              }
            ],
            "description": "The publishing organization",
            "readOnly": true
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The owner user",
            "readOnly": true
          },
          "page": {
            "description": "The reuse page URL",
            "readOnly": true,
            "type": "string"
          },
          "private": {
            "description": "Is the reuse private to the owner or the organization",
            "type": "boolean"
          },
          "slug": {
            "description": "The reuse permalink string",
            "readOnly": true,
            "type": "string"
          },
          "tags": {
            "description": "Some keywords to help in search",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "The reuse title",
            "type": "string"
          },
          "topic": {
            "description": "The reuse topic",
            "enum": [
              "health",
              "transport_and_mobility",
              "housing_and_development",
              "food_and_agriculture",
              "culture_and_recreation",
              "economy_and_business",
              "environment_and_energy",
              "work_and_training",
              "politics_and_public_life",
              "safety_and_security",
              "education_and_research",
              "society_and_demography",
              "law_and_justice",
              "open_data_tools",
              "others"
            ],
            "example": "health",
            "type": "string"
          },
          "type": {
            "description": "The reuse type",
            "enum": [
              "api",
              "application",
              "idea",
              "news_article",
              "paper",
              "post",
              "visualization",
              "hardware"
            ],
            "example": "api",
            "type": "string"
          },
          "uri": {
            "description": "The reuse API URI",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "The reuse remote URL (website)",
            "type": "string"
          }
        },
        "required": [
          "description",
          "title",
          "topic",
          "type",
          "url"
        ],
        "type": "object",
        "x-mask": "{*,datasets{title,uri,page}}"
      },
      "ReusePage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Reuse"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "ReuseReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReference"
          },
          {
            "properties": {
              "image": {
                "description": "The reuse thumbnail thumbnail (cropped) URL",
                "type": "string"
              },
              "image_thumbnail": {
                "description": "The reuse thumbnail thumbnail URL. This is the square (500x500) and cropped version.",
                "type": "string"
              },
              "page": {
                "description": "The reuse page URL",
                "readOnly": true,
                "type": "string"
              },
              "title": {
                "description": "The reuse title",
                "readOnly": true,
                "type": "string"
              },
              "uri": {
                "description": "The reuse API URI",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ReuseSuggestion": {
        "properties": {
          "id": {
            "description": "The reuse identifier",
            "readOnly": true,
            "type": "string"
          },
          "image_url": {
            "description": "The reuse thumbnail URL",
            "type": "string"
          },
          "page": {
            "description": "The reuse page URL",
            "readOnly": true,
            "type": "string"
          },
          "score": {
            "description": "The internal match score",
            "readOnly": true,
            "type": "number"
          },
          "slug": {
            "description": "The reuse permalink string",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "description": "The reuse title",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReuseTopic": {
        "properties": {
          "id": {
            "description": "The reuse topic identifier",
            "type": "string"
          },
          "label": {
            "description": "The reuse topic display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReuseType": {
        "properties": {
          "id": {
            "description": "The reuse type identifier",
            "type": "string"
          },
          "label": {
            "description": "The reuse type display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Schema": {
        "properties": {
          "id": {
            "description": "The schema identifier",
            "type": "string"
          },
          "label": {
            "description": "The schema display name",
            "type": "string"
          },
          "versions": {
            "description": "The available versions of the schema",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Site": {
        "properties": {
          "id": {
            "description": "The Site unique identifier",
            "type": "string"
          },
          "metrics": {
            "default": {},
            "description": "The associated metrics",
            "type": "object"
          },
          "title": {
            "description": "The site display title",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title"
        ],
        "type": "object"
      },
      "SpatialCoverage": {
        "properties": {
          "geom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoJSON"
              }
            ],
            "description": "A multipolygon for the whole coverage"
          },
          "granularity": {
            "default": "other",
            "description": "The spatial/territorial granularity",
            "type": "string"
          },
          "zones": {
            "description": "The covered zones identifiers",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Task": {
        "properties": {
          "exc": {
            "description": "The exception thrown during execution",
            "type": "string"
          },
          "id": {
            "description": "Tha task execution ID",
            "readOnly": true,
            "type": "string"
          },
          "result": {
            "description": "The task results if exists",
            "type": "string"
          },
          "status": {
            "description": "Cron expression for hour",
            "enum": [
              "FAILURE",
              "PENDING",
              "REVOKED",
              "SUCCESS",
              "STARTED",
              "RETRY",
              "RECEIVED"
            ],
            "example": "FAILURE",
            "readOnly": true,
            "type": "string"
          },
          "traceback": {
            "description": "The execution traceback",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TemporalCoverage": {
        "properties": {
          "end": {
            "description": "The temporal coverage end date",
            "format": "date-time",
            "type": "string"
          },
          "start": {
            "description": "The temporal coverage start date",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "end",
          "start"
        ],
        "type": "object"
      },
      "TerritorySuggestion": {
        "properties": {
          "code": {
            "description": "The territory main code",
            "type": "string"
          },
          "id": {
            "description": "The territory identifier",
            "type": "string"
          },
          "keys": {
            "description": "The territory known codes",
            "type": "object"
          },
          "level": {
            "description": "The territory administrative level",
            "type": "string"
          },
          "name": {
            "description": "The territory name",
            "type": "string"
          },
          "score": {
            "description": "The internal match score",
            "type": "number"
          }
        },
        "required": [
          "code",
          "id",
          "level",
          "name",
          "score"
        ],
        "type": "object"
      },
      "Topic": {
        "properties": {
          "created_at": {
            "description": "The topic creation date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "datasets": {
            "description": "The topic datasets",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array"
          },
          "deleted": {
            "description": "The organization identifier",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The topic description in Markdown",
            "format": "markdown",
            "type": "string"
          },
          "featured": {
            "description": "Is the topic featured",
            "type": "boolean"
          },
          "id": {
            "description": "The topic identifier",
            "type": "string"
          },
          "last_modified": {
            "description": "The topic last modification date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The topic name",
            "type": "string"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference"
              }
            ],
            "description": "The owner user",
            "readOnly": true
          },
          "page": {
            "description": "The topic page URL",
            "readOnly": true,
            "type": "string"
          },
          "private": {
            "description": "Is the topic private",
            "type": "boolean"
          },
          "reuses": {
            "description": "The topic reuses",
            "items": {
              "$ref": "#/components/schemas/Reuse"
            },
            "type": "array"
          },
          "slug": {
            "description": "The topic permalink string",
            "readOnly": true,
            "type": "string"
          },
          "tags": {
            "description": "Some keywords to help in search",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "description": "The topic API URI",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "tags"
        ],
        "type": "object",
        "x-mask": "{*,datasets{id,title,uri,page},reuses{id,title,image,image_thumbnail,uri,page}}"
      },
      "TopicPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/Topic"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "Transfer": {
        "properties": {
          "comment": {
            "description": "A comment about the transfer request",
            "readOnly": true,
            "type": "string"
          },
          "created": {
            "description": "The transfer request date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The transfer unique identifier",
            "readOnly": true,
            "type": "string"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReference"
              }
            ],
            "description": "The user or organization currently owning the transfered object",
            "readOnly": true
          },
          "recipient": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReference"
              }
            ],
            "description": "The user or organization receiving the transfered object",
            "readOnly": true
          },
          "reponse_comment": {
            "description": "A comment about the transfer response",
            "readOnly": true,
            "type": "string"
          },
          "responded": {
            "description": "The transfer response date",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "The current transfer request status",
            "enum": [
              "pending",
              "accepted",
              "refused"
            ],
            "example": "pending",
            "type": "string"
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReference"
              }
            ],
            "description": "The transfered object",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TransferRequest": {
        "properties": {
          "comment": {
            "description": "An explanation about the transfer request",
            "type": "string"
          },
          "recipient": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReference"
              }
            ],
            "description": "The transfer recipient, either an user or an organization"
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReference"
              }
            ],
            "description": "The transfered subject"
          }
        },
        "required": [
          "comment",
          "recipient",
          "subject"
        ],
        "type": "object"
      },
      "TransferResponse": {
        "properties": {
          "comment": {
            "description": "An optional comment about the transfer response",
            "type": "string"
          },
          "response": {
            "description": "The response",
            "enum": [
              "accept",
              "refuse"
            ],
            "example": "accept",
            "type": "string"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "UploadStatus": {
        "properties": {
          "error": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UploadedImage": {
        "properties": {
          "image": {
            "type": "string"
          },
          "success": {
            "default": true,
            "description": "Whether the upload succeeded or not.",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UploadedResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "success": {
                "default": true,
                "description": "Whether the upload succeeded or not.",
                "readOnly": true,
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "User": {
        "properties": {
          "about": {
            "description": "The user self description",
            "format": "markdown",
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "avatar": {
            "description": "The user avatar URL",
            "type": "string"
          },
          "avatar_thumbnail": {
            "description": "The user avatar thumbnail URL. This is the square (500x500) and cropped version.",
            "type": "string"
          },
          "email": {
            "description": "The user email",
            "readOnly": true,
            "type": "object"
          },
          "first_name": {
            "description": "The user first name",
            "type": "string"
          },
          "id": {
            "description": "The user identifier",
            "type": "string"
          },
          "last_name": {
            "description": "The user last name",
            "type": "string"
          },
          "metrics": {
            "description": "The user metrics",
            "readOnly": true,
            "type": "object"
          },
          "organizations": {
            "description": "The organization the user belongs to",
            "items": {
              "$ref": "#/components/schemas/OrganizationReference"
            },
            "type": "array"
          },
          "page": {
            "description": "The user profile page URL",
            "readOnly": true,
            "type": "string"
          },
          "roles": {
            "description": "Site wide user roles",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "since": {
            "description": "The registeration date",
            "format": "date-time",
            "type": "string"
          },
          "slug": {
            "description": "The user permalink string",
            "type": "string"
          },
          "uri": {
            "description": "The user API URI",
            "type": "string"
          },
          "website": {
            "description": "The user website",
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "id",
          "last_name",
          "since",
          "slug",
          "uri"
        ],
        "type": "object"
      },
      "UserPage": {
        "properties": {
          "data": {
            "description": "The page data",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          },
          "facets": {
            "description": "Search facets results if any",
            "type": "object"
          },
          "next_page": {
            "description": "The next page URL if exists",
            "type": "string"
          },
          "page": {
            "description": "The current page",
            "minimum": 1,
            "type": "integer"
          },
          "page_size": {
            "description": "The page size used for pagination",
            "minimum": 0,
            "type": "integer"
          },
          "previous_page": {
            "description": "The previous page URL if exists",
            "type": "string"
          },
          "total": {
            "description": "The total paginated items",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size",
          "total"
        ],
        "type": "object"
      },
      "UserReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReference"
          },
          {
            "properties": {
              "avatar": {
                "description": "The user avatar URL",
                "type": "string"
              },
              "avatar_thumbnail": {
                "description": "The user avatar thumbnail URL. This is the square (500x500) and cropped version.",
                "type": "string"
              },
              "first_name": {
                "description": "The user first name",
                "readOnly": true,
                "type": "string"
              },
              "last_name": {
                "description": "The user larst name",
                "readOnly": true,
                "type": "string"
              },
              "page": {
                "description": "The user profile page URL",
                "readOnly": true,
                "type": "string"
              },
              "slug": {
                "description": "The user permalink string",
                "type": "string"
              },
              "uri": {
                "description": "The user API URI",
                "type": "string"
              }
            },
            "required": [
              "slug",
              "uri"
            ],
            "type": "object"
          }
        ]
      },
      "UserRole": {
        "properties": {
          "name": {
            "description": "The role name",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSuggestion": {
        "properties": {
          "avatar_url": {
            "description": "The user avatar URL",
            "type": "string"
          },
          "first_name": {
            "description": "The user first name",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The user identifier",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "description": "The user last name",
            "readOnly": true,
            "type": "string"
          },
          "score": {
            "description": "The internal match score",
            "readOnly": true,
            "type": "number"
          },
          "slug": {
            "description": "The user permalink string",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}