{
  "openapi": "3.0.0",
  "info": {
    "title": "Thinkific Admin API",
    "description": "Thinkific's public API can be used to integrate your application with your Thinkific site.",
    "contact": {
      "email": "developers@thinkific.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.thinkific.com/api/public/v1",
      "variables": {}
    }
  ],
  "paths": {
    "/bundles/{id}": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "getBundleByID",
        "description": "Retrieves the Bundle identified by the provided id",
        "operationId": "getBundleByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Bundle in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bundle Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/bundles/{id}/courses": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "List Courses by bundle ID",
        "description": "Retrieves the Courses within the Bundle identified by the provided id",
        "operationId": "ListCoursesbybundleID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Bundle in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Courses Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoursesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/bundles/{id}/enrollments": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "getBundleEnrollments",
        "description": "Retrieves all the enrollments in the bundle identified by the provided id",
        "operationId": "getBundleEnrollments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Bundle in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          },
          {
            "name": "query[user_id]",
            "in": "query",
            "description": "Search Bundle Enrollments by User ID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "example": 123
            }
          },
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search Bundle Enrollments by User email",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "user@example.com"
            }
          },
          {
            "name": "query[completed]",
            "in": "query",
            "description": "Filter for only completed Bundle Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[expired]",
            "in": "query",
            "description": "Filter for only expired Bundle Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[created_after]",
            "in": "query",
            "description": "Filter for only Enrollments created after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[created_before]",
            "in": "query",
            "description": "Filter for only Enrollments created before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[created_on]",
            "in": "query",
            "description": "Filter for only Enrollments created on the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[created_on_or_after]",
            "in": "query",
            "description": "Filter for only Enrollments created on or after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[created_on_or_before]",
            "in": "query",
            "description": "Filter for only Enrollments created on or before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[updated_after]",
            "in": "query",
            "description": "Filter for only Enrollments updated after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[updated_before]",
            "in": "query",
            "description": "Filter for only Enrollments updated before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[updated_on]",
            "in": "query",
            "description": "Filter for only Enrollments updated on the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[updated_on_or_after]",
            "in": "query",
            "description": "Filter for only Enrollments created on or after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          },
          {
            "name": "query[updated_on_or_before]",
            "in": "query",
            "description": "Filter for only Enrollments updated on or before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-04-27T00:00:00Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bundle Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEnrollmentsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Bundles"
        ],
        "summary": "createEnrollmentInBundle",
        "description": "This endpoint enrolls a User in a Bundle and each of the Courses contained within the Bundle",
        "operationId": "createEnrollmentInBundle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the bundle in a form of integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundlesEnrollmentsRequest"
              },
              "example": {
                "user_id": 1,
                "activated_at": "2015-08-26T03:33:33.723Z",
                "expiry_date": "2016-08-26T03:33:33.723Z"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Enrollments created synchronously",
            "headers": {},
            "content": {}
          },
          "202": {
            "description": "Enrollments created asynchronously",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Bundles"
        ],
        "summary": "updateEnrollmentsInBundle",
        "description": "This endpoint updates a User’s Enrollment in a Bundle and each of the Courses contained within the Bundle.",
        "operationId": "updateEnrollmentsInBundle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the bundle in a form of integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundlesEnrollmentsRequest"
              },
              "example": {
                "user_id": 1,
                "activated_at": "2015-08-26T03:33:33.723Z",
                "expiry_date": "2016-08-26T03:33:33.723Z"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Enrollments Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "getCollections",
        "description": "Retrieves a list of Collections **NOTE: This endpoint will be renamed to /categories in future API versions.**",
        "operationId": "getCollections",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collections response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "crateCollection",
        "description": "Creates a new Category",
        "operationId": "crateCollection",
        "parameters": [],
        "requestBody": {
          "description": "New collections attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Collection response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              },
              "UnprocessableEntity": {
                "schema": {}
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/collections/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "GetCollectionbyID",
        "description": "Retrieves a Collection",
        "operationId": "GetCollectionbyID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "updateCollectioByID",
        "description": "Updates the Category identified by the provided id",
        "operationId": "updateCollectioByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Collections attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Collection Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "deleteCollectionByID",
        "description": "Deletes the Category identified by the provided id",
        "operationId": "deleteCollectionByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Collection deleted",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/collections/{id}/products": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "getProductsbyID",
        "description": "Retrieves Products within the Category identified by the provided id",
        "operationId": "getProductsbyID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Chapter in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/collection_memberships/{id}": {
      "post": {
        "tags": [
          "Category Memberships"
        ],
        "summary": "addProductsToCategory",
        "description": "Create one or more Products to a Category",
        "operationId": "addProductsToCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "An array of the IDs of the Products that should be added to the Category as integers.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Products added to category",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Category Memberships"
        ],
        "summary": "deleteProductsByID",
        "description": "Delete one or more Products from a Category.",
        "operationId": "deleteProductsByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Products removed from category",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/chapters/{id}": {
      "get": {
        "tags": [
          "Chapters"
        ],
        "summary": "getChapterByID",
        "description": "Returns a chapter",
        "operationId": "getChapterByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Chapter in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chapters response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChapterResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/chapters/{id}/contents": {
      "get": {
        "tags": [
          "Chapters"
        ],
        "summary": "getContentsByID",
        "description": "Retrieves the Contents within the Chapter identified by the provided id",
        "operationId": "getContentsByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Chapter in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chapters response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContentsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/contents/{id}": {
      "get": {
        "tags": [
          "Contents"
        ],
        "summary": "getContentByID",
        "description": "Retrieves a Content",
        "operationId": "getContentByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Content in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/coupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "getCoupons",
        "description": "Retrieve a list of all Coupons",
        "operationId": "getCoupons",
        "parameters": [
          {
            "name": "promotion_id",
            "in": "query",
            "description": "The ID of the Promotion for which to get the Coupons in the form of an integer.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCouponResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "createCoupon",
        "description": "Create a Coupon",
        "operationId": "createCoupon",
        "parameters": [
          {
            "name": "promotion_id",
            "in": "query",
            "description": "ID of the Promotion to add the Coupon to in the form of an integer.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "New Coupon attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCouponRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create Coupon Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              },
              "UnprocessableEntity": {
                "schema": {}
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/coupons/bulk_create": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "bulkCreateCoupons",
        "description": "Bulk Create Coupons",
        "operationId": "bulkCreateCoupons",
        "parameters": [
          {
            "name": "promotion_id",
            "in": "query",
            "description": "The ID of the Promotion for which to bulk create the Coupons.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "New Coupon attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateCouponRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create Coupon Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBulkCouponResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/coupons/{id}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "getCouponByID",
        "description": "Retrieve a Coupon",
        "operationId": "getCouponByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Coupon in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "updateCoupon",
        "description": "Update an existing Coupon",
        "operationId": "updateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Coupon in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existing coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCoupon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Coupon Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              },
              "UnprocessableEntity": {
                "schema": {}
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "deleteCouponByID",
        "description": "Deletes a coupon identified by the provided id",
        "operationId": "deleteCouponByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Coupon in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Coupon Deleted",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/courses": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "getCourses",
        "description": "Retrieve a list of Courses",
        "operationId": "getCourses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Courses Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoursesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/courses/{id}": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "getCourseByID",
        "description": "Returns the Course identified by the provided id.",
        "operationId": "getCourseByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Course in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Courses response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/courses/{id}/chapters": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "getChapterOfCourseByID",
        "description": "Returns the Chapter of the course identified by the provided id.",
        "operationId": "getChapterOfCourseByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Chapter in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chapter of a course response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChaptersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/course_reviews": {
      "get": {
        "tags": [
          "Course Reviews"
        ],
        "summary": "getCourseReviews",
        "description": "Retrieve a list of Course Reviews",
        "operationId": "getCourseReviews",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "description": "ID of the Course in the form of an integer.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          },
          {
            "name": "approved",
            "in": "query",
            "description": "If true, returns only approved Course Reviews.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CourseReviews",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCourseReviewsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Course Reviews"
        ],
        "summary": "createCourseReview",
        "description": "Create a course review",
        "operationId": "createCourseReview",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "description": "ID of the Course for which the review needs to be created for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Course Review Attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Course Review Created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseReviewResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/course_reviews/{id}": {
      "get": {
        "tags": [
          "Course Reviews"
        ],
        "summary": "getCourseReviewByID",
        "description": "Retrieve a Course Review identified by the provided id.",
        "operationId": "getCourseReviewByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Course Review in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CourseReviewByID",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseReviewResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/custom_profile_field_definitions": {
      "get": {
        "tags": [
          "Custom Profile Field Definitions"
        ],
        "summary": "getCustomProfileFields",
        "description": "Retrieve a list of Custom Profile Field Definitions",
        "operationId": "getCustomProfileFields",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Profile Field Definitions",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomProfileFieldDefinitions"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enrollments": {
      "get": {
        "tags": [
          "Enrollments"
        ],
        "summary": "getEnrollments",
        "description": "Returns a list of enrollments",
        "operationId": "getEnrollments",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          },
          {
            "name": "query[user_id]",
            "in": "query",
            "description": "Search Enrollments by User ID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "query[course_id]",
            "in": "query",
            "description": "Search Enrollments by Course ID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search Enrollments by User email.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[free_trial]",
            "in": "query",
            "description": "Filter for only Free Trial Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query[full]",
            "in": "query",
            "description": "Filter for only full Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query[completed]",
            "in": "query",
            "description": "Filter for only completed Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query[expired]",
            "in": "query",
            "description": "Filter for only expired Enrollments when set to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query[created_on]",
            "in": "query",
            "description": "Filter for only Enrollments created on the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[created_before]",
            "in": "query",
            "description": "Filter for only Enrollments created before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[created_on_or_before]",
            "in": "query",
            "description": "Filter for only Enrollments created on or before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[created_after]",
            "in": "query",
            "description": "Filter for only Enrollments created after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[created_on_or_after]",
            "in": "query",
            "description": "Filter for only Enrollments created on or after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[updated_on]",
            "in": "query",
            "description": "Filter for only Enrollments updated on the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[updated_before]",
            "in": "query",
            "description": "Filter for only Enrollments updated before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[updated_on_or_before]",
            "in": "query",
            "description": "Filter for only Enrollments updated on or before the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[updated_after]",
            "in": "query",
            "description": "Filter for only Enrollments updated after the date specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollments response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEnrollmentsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Enrollments"
        ],
        "summary": "createEnrollment",
        "description": "Creates a new Enrollment for specified student in specified course",
        "operationId": "createEnrollment",
        "parameters": [],
        "requestBody": {
          "description": "New enrollment attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnrollmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Enrollment response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enrollments/{id}": {
      "get": {
        "tags": [
          "Enrollments"
        ],
        "summary": "getEnrollmentsByID",
        "description": "Returns the Enrollment identified by the provided id.",
        "operationId": "getEnrollmentsByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enrollment in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Enrollments"
        ],
        "summary": "updateEnrollment",
        "description": "Updates a Enrollment for specified student in specified course",
        "operationId": "updateEnrollment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enrollment in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "New enrollment attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnrollmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Enrollment Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/external_orders": {
      "post": {
        "tags": [
          "External Orders"
        ],
        "summary": "createExternalOrder",
        "description": "Please note that any External Orders created through the API do not appear on the orders report or dashboard in your Thinkific site. Using the External Orders endpoints will simply store the information in our database.",
        "operationId": "createExternalOrder",
        "parameters": [],
        "requestBody": {
          "description": "External Order request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalOrderRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "External Order created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/external_orders/{id}/transactions/refund": {
      "post": {
        "tags": [
          "External Orders"
        ],
        "summary": "refund transaction",
        "description": "This endpoint will create a new transaction refund for the External Order.",
        "operationId": "refundtransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External Order ID as integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalOrderTransaction"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Transaction created",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/external_orders/{id}/transactions/purchase": {
      "post": {
        "tags": [
          "External Orders"
        ],
        "summary": "purchase transaction",
        "description": "This endpoint will create a new transaction purchase for the External Order.",
        "operationId": "purchasetransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External Order ID",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalOrderTransaction"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Transaction created",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "getGroups",
        "description": "Retrieves a list of groups",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "createGroup",
        "description": "Creates a group",
        "operationId": "createGroup",
        "parameters": [],
        "requestBody": {
          "description": "Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Group response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "getGroup",
        "description": "Retrieves a specific group",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Group to fetch.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                },
                "example": {
                  "error": "[\"Record not found.\"]"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/groups/{group_id}/analysts": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "getGroupAnalysts",
        "description": "Retrieves a list of group analysts",
        "operationId": "getGroupAnalysts",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID of the Group in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupAnalystsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                },
                "example": {
                  "error": "[{\"group_id\":\"Could not find group with ID 1.\"}]"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                },
                "example": {
                  "errors": [
                    {
                      "user_ids": "Invalid user IDs: 1"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "postGroupAnalysts",
        "description": "Assign Group Analysts to a group. Users need to be assigned the Group Analyst (group_analyst) role.",
        "operationId": "postGroupAnalysts",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID of the Group in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Group Analyst",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddAnalystRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Group Analyst response",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/groups/{group_id}/analysts/{user_id}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "removeAnalystFromGroup",
        "description": "Remove an analyst from a group",
        "operationId": "removeAnalystFromGroup",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "ID of the Group in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the User in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group Analyst response",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                },
                "example": {
                  "error": "{\"user_id\":[\"Could not find user with ID 1.\"],\"group_id\":[\"Could not find group with ID 1.\"]}"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/group_analysts/{user_id}/groups": {
      "post": {
        "tags": [
          "Group Analysts"
        ],
        "summary": "addGroupToAnalyst",
        "description": "Assign Group Analyst to groups. User need to be assigned the Group Analyst (group_analyst) role.",
        "operationId": "addGroupToAnalyst",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the User in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Group Analyst",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAnalystsAddGroupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Group Analyst response",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                },
                "example": {
                  "error": "{\"user_id\":[\"Could not find user with ID 1.\"]}"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/group_analysts/{user_id}/groups/{group_id}": {
      "delete": {
        "tags": [
          "Group Analysts"
        ],
        "summary": "removeGroupFromAnalyst",
        "description": "Remove an analyst from a group",
        "operationId": "removeGroupFromAnalyst",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the User in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "ID of the Group in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group Analyst response",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                },
                "example": {
                  "error": "{\"user_id\":[\"Could not find user with ID 1.\"],\"group_id\":[\"Could not find group with ID 1.\"]}"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/group_users": {
      "post": {
        "tags": [
          "Group Users"
        ],
        "summary": "createGroupUsers",
        "description": "Create an existing User to existing Groups",
        "operationId": "createGroupUsers",
        "parameters": [],
        "requestBody": {
          "description": "Group Users attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group Users response",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/instructors": {
      "get": {
        "tags": [
          "Instructors"
        ],
        "summary": "getInstructors",
        "description": "Retrieve a list of Instructors",
        "operationId": "getInstructors",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instructors response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstructorsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Instructors"
        ],
        "summary": "createInstructor",
        "description": "Creates a new Instructor ",
        "operationId": "createInstructor",
        "parameters": [],
        "requestBody": {
          "description": "New instructor attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstructorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Instructor response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstructorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/instructors/{id}": {
      "get": {
        "tags": [
          "Instructors"
        ],
        "summary": "getInstructorByID",
        "description": "Returns the Instructor identified by the provided id.",
        "operationId": "getInstructorByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Instructor in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instructor response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstructorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Instructors"
        ],
        "summary": "updateInstructor",
        "description": "Updates the Instructor identified by the provided id",
        "operationId": "updateInstructor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Instructor in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "New instructor attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstructorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Instructor Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Instructors"
        ],
        "summary": "deleteInstructorByID",
        "description": "Delete the Instructor identified by the provided id",
        "operationId": "deleteInstructorByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Instructor in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Instructor deleted",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "getOrders",
        "description": "Retrieve a list of Orders",
        "operationId": "getOrders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "getOrderByID",
        "description": "Returns the orders identified by the provided id.",
        "operationId": "getOrderByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Orders in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/product_publish_requests": {
      "get": {
        "tags": [
          "Product Publish Request"
        ],
        "summary": "getProductPublishRequests",
        "description": "Returns a list of Product Publish Requests.",
        "operationId": "getProductPublishRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Publish Requests response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductPublishResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/product_publish_requests/{id}": {
      "get": {
        "tags": [
          "Product Publish Request"
        ],
        "summary": "getProductPublishRequestByID",
        "description": "Returns the Product Publish Request identified by the provided id.",
        "operationId": "getProductPublishRequestByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Product Publish Request in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Publish Request success response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPublishRequest"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/product_publish_requests/{id}/approve": {
      "post": {
        "tags": [
          "Product Publish Request"
        ],
        "summary": "Approves Product Publish Request",
        "description": "Approves the Product Publish Request identified by the provided id.",
        "operationId": "ApprovesProductPublishRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Product Publish Request in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Publish Request approved",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/product_publish_requests/{id}/deny": {
      "post": {
        "tags": [
          "Product Publish Request"
        ],
        "summary": "Denies Product Publish Request",
        "description": "Denies the Product Publish Request identified by the provided id.",
        "operationId": "DeniesProductPublishRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Product Publish Request in the form of an integer.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product Publish Request denied",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "getProducts",
        "description": "List products",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "getProductByID",
        "description": "Returns the Product identified by the provided id.",
        "operationId": "getProductByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/products/{id}/related": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "getRelatedProductByProductID",
        "description": "Returns a list of products that are related to the Product identified by the provided id.",
        "operationId": "getRelatedProductByProductID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/promotions": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "getPromotions",
        "description": "List promotions",
        "operationId": "getPromotions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Promotions response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromotionsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "createPromotion",
        "description": "Create a new promotion",
        "operationId": "createPromotion",
        "parameters": [],
        "requestBody": {
          "description": "New Promotion parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Promotions response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/promotions/{id}": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "getPromotionByID",
        "description": "Get promotion by provided ID",
        "operationId": "getPromotionByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the promotion in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Promotions response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Promotions"
        ],
        "summary": "updatePromotionByID",
        "description": "Update promotion by provided ID",
        "operationId": "updatePromotionByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the promotion in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "Promotion attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Promotion Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Promotions"
        ],
        "summary": "deletePromotionByID",
        "description": "Delete promotion by provided ID",
        "operationId": "deletePromotionByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the promotion in the form of an integer",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Promotions deleted",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/promotions/by_coupon": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get Promotion associated with the provided Coupon code.",
        "description": "Find a Promotion by Coupon Code and Product",
        "operationId": "GetPromotionassociatedwiththeprovidedCouponcode.",
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "description": "The id of the Product to which the promotion applies.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "coupon_code",
            "in": "query",
            "description": "The Coupon code to be used as search critieria.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Promotions response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/site_scripts": {
      "get": {
        "tags": [
          "Site Scripts"
        ],
        "summary": "getSiteScripts",
        "description": "Retrieve a list of site scripts",
        "operationId": "getSiteScripts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Scripts response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSiteScriptsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenInsufficientScope"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Site Scripts"
        ],
        "summary": "createSiteScript",
        "description": "Create a new Site Script",
        "operationId": "createSiteScript",
        "parameters": [],
        "requestBody": {
          "description": "Create Site Script request body\n\nTo create Site Scripts, either the `src` or `content` attribute must be provided. Only one should be specified.\n\nWhen using the `src` attribute, the top-level domain of the URL should match the top-level domain of the App URL. When using the `content` attribute, the header `HMAC-SHA256-SIGNATURE` generated using the app's secret and content must be included in the request.\n\nUse the drop down menu to view examples with `src` or `content` attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteScriptRequest"
              },
              "examples": {
                "CreateSiteScriptWithContentRequest": {
                  "summary": "Site Script with content",
                  "value": {
                    "content": "console.log('Hello! This is a Site Script')",
                    "name": "MyApp's Tracking Script",
                    "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                    "page_scopes": [
                      "landing_pages",
                      "course_player"
                    ],
                    "location": "footer",
                    "load_method": "async",
                    "category": "marketing"
                  }
                },
                "CreateSiteScriptWithSrcRequest": {
                  "summary": "Site Script with src",
                  "value": {
                    "src": "https://your-site.com/site-script.js",
                    "name": "MyApp's Tracking Script",
                    "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                    "page_scopes": [
                      "landing_pages",
                      "course_player"
                    ],
                    "location": "footer",
                    "load_method": "async",
                    "category": "marketing"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Site Script created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteScriptResponse"
                },
                "examples": {
                  "CreateSiteScriptWithContentResponse": {
                    "summary": "Site Script with content",
                    "value": {
                      "site_script": {
                        "id": "123e4567-e89b-12d3-a456-426614174999",
                        "content": "console.log('Hello! This is a Site Script')",
                        "name": "MyApp's Tracking Script",
                        "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                        "page_scopes": [
                          "landing_pages",
                          "course_player"
                        ],
                        "location": "footer",
                        "load_method": "async",
                        "category": "marketing"
                      }
                    }
                  },
                  "CreateSiteScriptWithSrcResponse": {
                    "summary": "Site Script with src",
                    "value": {
                      "site_script": {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "src": "https://your-site.com/site-script.js",
                        "name": "MyApp's Tracking Script",
                        "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                        "page_scopes": [
                          "landing_pages",
                          "course_player"
                        ],
                        "location": "footer",
                        "load_method": "async",
                        "category": "marketing"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenInsufficientScope"
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/site_scripts/{id}": {
      "get": {
        "tags": [
          "Site Scripts"
        ],
        "summary": "getSiteScriptByID",
        "description": "Retrieves a Site Script identified by the provided ID",
        "operationId": "getSiteScriptByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Site Script in the form of a string",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Script Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteScriptResponse"
                },
                "examples": {
                  "GetSiteScriptWithContentResponse": {
                    "summary": "Site Script with content",
                    "value": {
                      "site_script": {
                        "id": "123e4567-e89b-12d3-a456-426614174999",
                        "content": "console.log('Hello! This is a Site Script')",
                        "name": "MyApp's Tracking Script",
                        "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                        "page_scopes": [
                          "landing_pages",
                          "course_player"
                        ],
                        "location": "footer",
                        "load_method": "async",
                        "category": "marketing"
                      }
                    }
                  },
                  "GetSiteScriptWithSrcResponse": {
                    "summary": "Site Script with src",
                    "value": {
                      "site_script": {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "src": "https://your-site.com/site-script.js",
                        "name": "MyApp's Tracking Script",
                        "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                        "page_scopes": [
                          "landing_pages",
                          "course_player"
                        ],
                        "location": "footer",
                        "load_method": "async",
                        "category": "marketing"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenInsufficientScope"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Site Scripts"
        ],
        "summary": "updateSiteScriptByID",
        "description": "Updates the Site Script specified by the provided ID",
        "operationId": "updateSiteScriptByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Site Script in the form of a string",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Site Script request body\n\nWhen updating Site Scripts, only one of `src` or `content` should be specified.\n\nWhen using the `src` attribute, the top-level domain of the URL should match the top-level domain of the app.\nWhen using the `content` attribute, the header `HMAC-SHA256-SIGNATURE` generated using the app's secret and content must be included in the request.\n\nUse the dropdown menu to view examples with `src` or `content` attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteScriptRequest"
              },
              "examples": {
                "UpdateSiteScriptWithContentRequest": {
                  "summary": "Site Script with content",
                  "value": {
                    "content": "console.log('Hello! This is a Site Script')",
                    "name": "MyApp's Tracking Script",
                    "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                    "page_scopes": [
                      "landing_pages",
                      "course_player"
                    ],
                    "location": "footer",
                    "load_method": "async",
                    "category": "marketing"
                  }
                },
                "UpdateSiteScriptWithSrcRequest": {
                  "summary": "Site Script with src",
                  "value": {
                    "src": "https://your-site.com/site-script.js",
                    "name": "MyApp's Tracking Script",
                    "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                    "page_scopes": [
                      "landing_pages",
                      "course_player"
                    ],
                    "location": "footer",
                    "load_method": "async",
                    "category": "marketing"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Site Script Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenInsufficientScope"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Site Scripts"
        ],
        "summary": "deleteSiteScriptByID",
        "description": "Deletes a Site Script identified by the provided ID",
        "operationId": "deleteSiteScriptByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Site Script in the form of a string",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Site Script Deleted",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenInsufficientScope"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "getUsers",
        "description": "Retrieve a list of users",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page within the collection to fetch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 25
            }
          },
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search Users by email.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[role]",
            "in": "query",
            "description": "Search Users by role.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[external_source]",
            "in": "query",
            "description": "Search Users by external source.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[custom_profile_field_label]",
            "in": "query",
            "description": "Search by custom profile field label (must be combined with custom_profile_field_value)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[custom_profile_field_value]",
            "in": "query",
            "description": "Search by custom profile field value (must be combined with custom_profile_field_label)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[group_id]",
            "in": "query",
            "description": "Search by group id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "createUser",
        "description": "Create a new user",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "description": "Create user request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User Created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "getUserByID",
        "description": "Retrieves a User identified by the provided id",
        "operationId": "getUserByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Accepts a Thinkific generated ID (in the form of an integer), or an External ID (as a string) when accompanied by the \"provider\" parameter.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "Provider from which the user's External Id is associated (Required if using External Id as id parameter)",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/provider2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "updateUserByID",
        "description": "Updates the user specified by the provided id",
        "operationId": "updateUserByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Accepts a Thinkific generated ID (in the form of an integer), or an External ID (as a string) when accompanied by the \"provider\" parameter.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "Provider from which the user's External Id is associated (Required if using External Id as id parameter)",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/provider2"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User Updated",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "deleteUserByID",
        "description": "Deletes a User identified by the provided id",
        "operationId": "deleteUserByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Accepts a Thinkific generated ID (in the form of an integer), or an External ID (as a string) when accompanied by the \"provider\" parameter.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "Provider from which the user's External Id is associated (Required if using External Id as id parameter)",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/provider2"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User Deleted",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "NotFound",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/{id}/authentications/{provider}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "getUserAuthByIDAndProvider",
        "description": "Retrieves a User authentication data identified by the id and provider",
        "operationId": "getUserAuthByIDAndProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Accepts a Thinkific generated ID (in the form of an integer)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "description": "Provider from which the user's External Id is associated",
            "required": true,
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/provider2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenAppsNotAvailable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "BundleResponse": {
        "title": "BundleResponse",
        "required": [
          "id",
          "name",
          "course_ids"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Bundle",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Bundle",
            "example": "A Bundle"
          },
          "description": {
            "type": "string",
            "description": "The description on the Bundle",
            "example": "The Bundle description"
          },
          "tagline": {
            "type": "string",
            "description": "The tagline for the Bundle (Deprecated)",
            "example": "Bundle tagline"
          },
          "banner_image_url": {
            "type": "string",
            "description": "Deprecated - use 'bundle_card_image_url'* - The banner image url for the Bundle.",
            "example": "http://example.com/image.jpg"
          },
          "course_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": ""
          },
          "bundle_card_image_url": {
            "type": "string",
            "description": "The card image url for the Bundle",
            "example": "http://example.com/image.jpg"
          }
        }
      },
      "GetChaptersResponse": {
        "title": "GetChaptersResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChapterResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ChapterResponse": {
        "title": "ChapterResponse",
        "required": [
          "id",
          "name",
          "position",
          "content_ids"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Chapter as an integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Chapter",
            "example": "Chapter 1"
          },
          "position": {
            "type": "number",
            "description": "The position of the Chapter within the Course",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "The description of the Chapter",
            "example": "The first Chapter"
          },
          "duration_in_seconds": {
            "type": "number",
            "description": "The duration of the Chapter in seconds. This is the sum of the length of the video lessons in the Chapter",
            "example": 60
          },
          "content_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "",
            "example": [
              1,
              2,
              3
            ]
          }
        }
      },
      "GetCollectionsResponse": {
        "title": "GetCollectionsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "CollectionResponse": {
        "title": "CollectionResponse",
        "required": [
          "id",
          "name",
          "description",
          "created_at",
          "product_ids",
          "default"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Category as an integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Category",
            "example": "All Courses"
          },
          "description": {
            "type": "string",
            "description": "The description of the Category",
            "example": "All the Courses in the Site"
          },
          "slug": {
            "type": "string",
            "description": "courses (string, required) - The slug of the Category",
            "example": "all"
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when the Category was created",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "product_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "",
            "example": [
              1,
              2
            ]
          },
          "default": {
            "type": "boolean",
            "description": "A boolean indicating whether the Category is the default",
            "example": true
          }
        }
      },
      "CollectionRequest": {
        "title": "CollectionRequest",
        "required": [
          "name",
          "description",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Category",
            "example": "My Category"
          },
          "description": {
            "type": "string",
            "description": "The description of the Category",
            "example": "This is a description of my category"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the Category.",
            "example": "my-category"
          }
        }
      },
      "GetContentsResponse": {
        "title": "GetContentsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ContentResponse": {
        "title": "ContentResponse",
        "required": [
          "id",
          "name",
          "position",
          "chapter_id",
          "contentable_type",
          "free",
          "take_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Content as an integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Content",
            "example": "Video Lesson"
          },
          "position": {
            "type": "number",
            "description": "The position of the Content within a Chapter.",
            "example": 1
          },
          "chapter_id": {
            "type": "number",
            "description": "The ID of the Chapter that the Content is in as an integer",
            "example": 1
          },
          "contentable_type": {
            "$ref": "#/components/schemas/ContentableType"
          },
          "free": {
            "type": "boolean",
            "description": "A boolean indicating whether the Content is free",
            "example": false
          },
          "take_url": {
            "type": "string",
            "description": "The url of the Content in the Course Player",
            "example": "http://somesite.thinkific.com/courses/take/xxx/yyy"
          }
        }
      },
      "GetCourseReviewsResponse": {
        "title": "GetCourseReviewsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseReviewResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "CourseReviewResponse": {
        "title": "CourseReviewResponse",
        "required": [
          "id",
          "rating",
          "title",
          "review_text",
          "user_id",
          "course_id",
          "approved"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Course Review as an integer.",
            "example": 1
          },
          "rating": {
            "type": "number",
            "description": "The rating, out of 5, of the Course Review.",
            "example": 4
          },
          "title": {
            "type": "string",
            "description": "The Course Review title.",
            "example": "My Review"
          },
          "review_text": {
            "type": "string",
            "description": "The body of the Course Review.",
            "example": "It was great!"
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User writing the Course Review as an integer.",
            "example": 1
          },
          "course_id": {
            "type": "number",
            "description": "The ID of the Course being reviewed as an integer.",
            "example": 1
          },
          "approved": {
            "type": "boolean",
            "description": "A boolean indicating whether the Course Review has been approved.",
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the Course Review was created.",
            "format": "date-time",
            "example": "2017-04-30T01:00:00Z"
          }
        }
      },
      "CreateCourseReviewRequest": {
        "title": "CreateCourseReviewRequest",
        "required": [
          "rating",
          "title",
          "review_text",
          "user_id",
          "approved"
        ],
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "description": "The rating, out of 5, of the Course Review.",
            "example": 4
          },
          "title": {
            "type": "string",
            "description": "The Course Review title.",
            "example": "My Review"
          },
          "review_text": {
            "type": "string",
            "description": "The body of the Course Review.",
            "example": "It was great!"
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User writing the Course Review as an integer.",
            "example": 1
          },
          "approved": {
            "type": "boolean",
            "description": "A boolean indicating whether the Course Review has been approved.",
            "example": true
          }
        }
      },
      "MembershipsRequest": {
        "title": "MembershipsRequest",
        "required": [
          "product_ids"
        ],
        "type": "object",
        "properties": {
          "product_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "UpdateCoupon": {
        "title": "UpdateCoupon",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The Coupon code.",
            "example": "ABCD"
          },
          "note": {
            "type": "string",
            "description": "A note associated with the Coupon. NOTE: this will be deprecated in future versions of the API.",
            "example": "Black Friday Coupon"
          },
          "quantity_used": {
            "type": "string",
            "description": "The number of times the Coupon has been used.",
            "example": "4"
          },
          "quantity": {
            "type": "number",
            "description": "The number of times the Coupon can be used. If this value if not set, the Coupon can be used an unlimited number of times.",
            "example": 10
          }
        }
      },
      "CreateBulkCouponResponse": {
        "title": "CreateBulkCouponResponse",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponResponse"
            },
            "description": ""
          }
        }
      },
      "BulkCreateCouponRequest": {
        "title": "BulkCreateCouponRequest",
        "type": "object",
        "properties": {
          "bulk_quantity_per_coupon": {
            "type": "number",
            "description": "The number of times each of the autogenerated Coupons can be used. Defaults to allowing unlimited use.",
            "example": 10
          },
          "bulk_coupon_code_length": {
            "type": "number",
            "description": "The length of the Coupon code. The minimum length is 6.",
            "example": 10
          },
          "bulk_quantity": {
            "type": "number",
            "description": "The number of unique Coupons to create. Maximum value is 1000.",
            "example": 100
          }
        }
      },
      "CreateCouponRequest": {
        "title": "CreateCouponRequest",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The Coupon code.",
            "example": "ABCD"
          },
          "note": {
            "type": "string",
            "description": "A note associated with the Coupon. NOTE: this will be deprecated in future versions of the API.",
            "example": "Black Friday Coupon"
          },
          "quantity": {
            "type": "number",
            "description": "The number of times the Coupon can be used. If this value if not set, the Coupon can be used an unlimited number of times.",
            "example": 10
          }
        }
      },
      "GetCouponResponse": {
        "title": "GetCouponResponse",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "CouponResponse": {
        "title": "CouponResponse",
        "required": [
          "id",
          "code",
          "note",
          "quantity_used",
          "quantity",
          "promotion_id",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Coupon as an integer.",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "The Coupon code.",
            "example": "abc123"
          },
          "note": {
            "type": "string",
            "description": "A note associated with the Coupon. NOTE: this will be deprecated in future versions of the API.",
            "example": "A note"
          },
          "quantity_used": {
            "type": "number",
            "description": "The number of times the Coupon has been used.",
            "example": 4
          },
          "quantity": {
            "type": "number",
            "description": "The number of times the Coupon can be used. If this value if not set, the Coupon can be used an unlimited number of times.",
            "example": 10
          },
          "promotion_id": {
            "type": "number",
            "description": "The ID of the associated Promotion as an integer.",
            "example": 12
          },
          "created_at": {
            "type": "string",
            "description": "The data and time the Coupon was created.",
            "format": "date-time",
            "example": "2017-04-30T01:00:00Z"
          }
        }
      },
      "GetCoursesResponse": {
        "title": "GetCoursesResponse",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "CourseResponse": {
        "title": "CourseResponse",
        "required": [
          "id",
          "name",
          "product_id",
          "chapter_ids",
          "reviews_enabled",
          "instructor_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the course",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the course",
            "example": "My Course"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly version of the course name. Used to construct URL for course Landing Pages & Course Player.",
            "example": "my-course"
          },
          "subtitle": {
            "type": "string",
            "description": "Deprecated - Used in legacy themes to display the subtitle of the Course.",
            "example": "My Course Subtitle"
          },
          "product_id": {
            "type": "number",
            "description": "The Course's Product ID"
          },
          "description": {
            "type": "string",
            "description": "The description of the Course(V2 themes currently don't have that info)",
            "example": "Course description"
          },
          "course_card_text": {
            "type": "string",
            "description": "Deprecated - use 'description'.* - Used in legacy themes to populate the text for a Course card.",
            "example": "my course"
          },
          "intro_video_youtube": {
            "type": "string",
            "description": "Deprecated - Used in legacy themes to designate an intro video from Youtube.",
            "example": "youtube01"
          },
          "contact_information": {
            "type": "string",
            "description": "Deprecated - The contact information of the Course.",
            "example": "Contact info"
          },
          "keywords": {
            "type": "string",
            "description": "The keywords of the Course",
            "example": "course,learn,great"
          },
          "duration": {
            "type": "string",
            "description": "Deprecated - Used in legacy themes to display the duration of the Course.",
            "example": "22"
          },
          "banner_image_url": {
            "type": "string",
            "description": "Deprecated - use 'course_card_image_url'* - The landing page banner image url of the Course.",
            "example": "http://example.com/banner.jpg"
          },
          "course_card_image_url": {
            "type": "string",
            "description": "The card image url of the Course",
            "example": "http://example.com/card.jpg"
          },
          "intro_video_wistia_identifier": {
            "type": "string",
            "description": "Deprecated - Used in legacy themes to designate an intro video from Wistia.",
            "example": "wistia0123"
          },
          "administrator_user_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "",
            "example": [
              1,
              2
            ]
          },
          "chapter_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "",
            "example": [
              1,
              2
            ]
          },
          "reviews_enabled": {
            "type": "boolean",
            "description": "A boolean indicating whether reviews are enabled for the Course",
            "example": false
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User that created the Course",
            "example": 1
          },
          "instructor_id": {
            "type": "number",
            "description": "The ID of the Instructor of the Course",
            "example": 1
          }
        }
      },
      "GetCustomProfileFieldDefinitions": {
        "title": "GetCustomProfileFieldDefinitions",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProfileFieldDefinitionsResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "CustomProfileFieldDefinitionsResponse": {
        "title": "CustomProfileFieldDefinitionsResponse",
        "required": [
          "id",
          "label",
          "field_type",
          "required"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Custom Profile Field Definition as an integer.",
            "example": 1
          },
          "label": {
            "type": "string",
            "description": "The label of the Custom Profile Field Definition.",
            "example": "Phone"
          },
          "field_type": {
            "type": "string",
            "description": "The Course's Product ID as an integer.",
            "example": "1"
          },
          "required": {
            "type": "boolean",
            "description": "A boolean indicating whether the Custom Profile Field Definition is required.",
            "example": true
          }
        }
      },
      "GetEnrollmentsResponse": {
        "title": "GetEnrollmentsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrollmentResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "EnrollmentResponse": {
        "title": "EnrollmentResponse",
        "required": [
          "id",
          "user_email",
          "user_name",
          "user_id",
          "course_name",
          "course_id",
          "percentage_completed",
          "expired",
          "is_free_trial",
          "completed",
          "started_at",
          "activated_at",
          "completed_at",
          "updated_at",
          "expiry_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Enrollment as an integer.",
            "example": 1
          },
          "user_email": {
            "type": "string",
            "description": "The email of the User owning the Enrollment.",
            "example": "bob@example.com"
          },
          "user_name": {
            "type": "string",
            "description": "The full name of the User owning the Enrollment.",
            "example": "Bob Smith"
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User owning the Enrollment as an integer.",
            "example": 1
          },
          "course_name": {
            "type": "string",
            "description": "The name of the Course.",
            "example": "My Course"
          },
          "course_id": {
            "type": "number",
            "description": "The ID of the Course as an integer.",
            "example": 1
          },
          "percentage_completed": {
            "type": "number",
            "description": "The percentage complete of the Enrollment. A number between 0.0 and 1.0. For example, to represent a percentage complete of 75%, this value would be 0.75.",
            "example": 1
          },
          "expired": {
            "type": "boolean",
            "description": "A boolean indicating whether the Enrollment is expired.",
            "example": false
          },
          "is_free_trial": {
            "type": "boolean",
            "description": "A boolean indicating whether the Enrollment is a free trial.",
            "example": false
          },
          "completed": {
            "type": "boolean",
            "description": "A boolean indicating whether the Enrollment is complete.",
            "example": true
          },
          "started_at": {
            "type": "string",
            "description": "The date/time that the Enrollment started.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "activated_at": {
            "type": "string",
            "description": "The date/time that the Enrollment was activated.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "completed_at": {
            "type": "string",
            "description": "The date/time that the Enrollment was completed.",
            "format": "date-time",
            "example": "2018-01-31T01:01:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date/time that the Enrollment was updated last.",
            "format": "date-time",
            "example": "2018-01-31T01:01:00Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "The date/time that the Enrollment expires.",
            "format": "date-time",
            "example": "2019-01-01T01:01:00Z"
          }
        }
      },
      "CreateEnrollmentRequest": {
        "title": "CreateEnrollmentRequest",
        "type": "object",
        "properties": {
          "course_id": {
            "type": "number",
            "description": "The ID of the Course as an integer.",
            "example": 1
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User owning the Enrollment as an integer.",
            "example": 1
          },
          "activated_at": {
            "type": "string",
            "description": "The date/time at which the Enrollment is activated. If not provided, the Enrollment is a free trial.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "The date/time at which the Enrollment expired. If not provided, the Enrollment does not expire.",
            "format": "date-time",
            "example": "2019-01-01T01:01:00Z"
          }
        }
      },
      "UpdateEnrollmentRequest": {
        "title": "UpdateEnrollmentRequest",
        "type": "object",
        "properties": {
          "activated_at": {
            "type": "string",
            "description": "The date/time at which the Enrollment is activated. If not provided, the Enrollment is a free trial.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "The date/time at which the Enrollment expired. If not provided, the Enrollment does not expire.",
            "format": "date-time",
            "example": "2019-01-01T01:01:00Z"
          }
        }
      },
      "ExternalOrderRequest": {
        "title": "ExternalOrderRequest",
        "required": [
          "payment_provider",
          "user_id",
          "product_id",
          "order_type"
        ],
        "type": "object",
        "properties": {
          "payment_provider": {
            "type": "string",
            "description": "An identifier to external provider",
            "example": "ExternalProvider"
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the user as an integer",
            "example": 1
          },
          "product_id": {
            "type": "number",
            "description": "The ID of the product as an integer",
            "example": 1
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "transaction": {
            "$ref": "#/components/schemas/ExternalOrderTransaction"
          }
        },
        "description": "External Order Request"
      },
      "ExternalOrderTransaction": {
        "title": "ExternalOrderTransaction",
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "the order amount in currency's smallest unit",
            "example": 10000
          },
          "currency": {
            "type": "string",
            "description": "the order currency",
            "example": "USD"
          },
          "reference": {
            "type": "string",
            "description": "reference number provided by external payment provider",
            "example": "123abc"
          },
          "action": {
            "type": "string",
            "description": "Action of the transaction",
            "example": "purchase"
          }
        },
        "description": "External Order Transaction"
      },
      "GetInstructorsResponse": {
        "title": "GetInstructorsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstructorResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "InstructorResponse": {
        "title": "InstructorResponse",
        "required": [
          "id",
          "first_name",
          "last_name",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Instructor as an integer.",
            "example": 1
          },
          "user_id": {
            "type": "number",
            "description": "The ID of the User owning the Instructor",
            "example": 12
          },
          "title": {
            "type": "string",
            "description": "The title of the Instructor",
            "example": "Mr."
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the Instructor.",
            "example": "My Course"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the Instructor.",
            "example": "My Course"
          },
          "bio": {
            "type": "string",
            "description": "The bio of the Instructor",
            "example": "Bob Jones is an instructor of note."
          },
          "slug": {
            "type": "string",
            "description": "The slug of the Instructor NOTE: This will be removed in future API versions",
            "example": "bob"
          },
          "avatar_url": {
            "type": "string",
            "description": "The fully-qualified url of the Instructor's avatar",
            "example": "https://example.com/avatar.png"
          },
          "email": {
            "type": "string",
            "description": "The email of the Instructor",
            "example": "bob_jones@example.com"
          },
          "created_at": {
            "type": "string",
            "description": "The date/time that the Instructor was created."
          }
        }
      },
      "InstructorRequest": {
        "title": "InstructorRequest",
        "required": [
          "first_name",
          "last_name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": "The ID of the User owning the Instructor",
            "example": 12
          },
          "title": {
            "type": "string",
            "description": "The title of the Instructor",
            "example": "Mr."
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the Instructor",
            "example": "Bob"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the Instructor",
            "example": "Jones"
          },
          "bio": {
            "type": "string",
            "description": "The bio of the Instructor",
            "example": "Bob Jones is an instructor of note."
          },
          "slug": {
            "type": "string",
            "description": "The slug of the Instructor NOTE: This will be removed in future API versions",
            "example": "bob"
          },
          "avatar_url": {
            "type": "string",
            "description": "The fully-qualified url of the Instructor's avatar",
            "example": "https://example.com/avatar.png"
          },
          "email": {
            "type": "string",
            "description": "The email of the Instructor",
            "example": "bob_jones@example.com"
          }
        }
      },
      "GetGroupsResponse": {
        "title": "GetGroupsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "GroupResponse": {
        "title": "GroupResponse",
        "required": [
          "id",
          "name",
          "token",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Group",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Group",
            "example": "New Group 1"
          },
          "token": {
            "type": "string",
            "description": "The 8-character unique identifier for the Group",
            "example": "c2395613"
          },
          "created_at": {
            "type": "string",
            "description": "The date/time the Group was created",
            "format": "date-time",
            "example": "2019-01-01T01:01:00Z"
          }
        }
      },
      "GroupRequest": {
        "title": "GroupRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Group",
            "example": "New Group 1"
          }
        }
      },
      "GroupAddAnalystRequest": {
        "title": "GroupAddAnalystRequest",
        "required": [
          "user_ids"
        ],
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The list of User IDs to add as analysts to the Group",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "GetGroupAnalystsResponse": {
        "title": "GetGroupAnalystsResponse",
        "required": [
          "group_analysts"
        ],
        "type": "object",
        "properties": {
          "group_analysts": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The list of User IDs to add as analysts to the Group",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "GroupAnalystsAddGroupRequest": {
        "title": "GroupAnalystsAddGroupRequest",
        "required": [
          "group_ids"
        ],
        "type": "object",
        "properties": {
          "group_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The list of Group IDs to add the analyst",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "GetOrdersResponse": {
        "title": "GetOrdersResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "OrderResponse": {
        "title": "OrderResponse",
        "required": [
          "user_id",
          "user_email",
          "user_name",
          "product_name",
          "product_id",
          "amount_dollars",
          "amount_cents",
          "subscription",
          "status",
          "id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": "The ID of the User owning the Order as an integer.",
            "example": 1
          },
          "user_email": {
            "type": "string",
            "description": "The Email ID of the User.",
            "example": "bob@example.com"
          },
          "user_name": {
            "type": "string",
            "description": "The full name of the User owning the Order.",
            "example": "Bob Smith"
          },
          "product_name": {
            "type": "string",
            "description": "The name of the Product purchased.",
            "example": "My Course"
          },
          "product_id": {
            "type": "number",
            "description": "The ID of the Product purchased as an integer.",
            "example": 1
          },
          "amount_dollars": {
            "type": "number",
            "description": "The Order amount in dollars.",
            "example": 20
          },
          "amount_cents": {
            "type": "number",
            "description": "The Order amount in cents.",
            "example": 2000
          },
          "subscription": {
            "type": "boolean",
            "description": "A boolean indicating whether the Order was for a subscription.",
            "example": false
          },
          "coupon_code": {
            "type": "string",
            "description": "The Coupon code used on the Order.",
            "example": "abc123"
          },
          "coupon_id": {
            "type": "number",
            "description": "The ID of the Coupon used on the Order as an integer.",
            "example": 1
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "Products included in the Order."
          },
          "affiliate_referral_code": {
            "type": "string",
            "description": "The Affiliate referral code used on the Order.",
            "example": "exexex"
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "example": "complete"
          },
          "created at": {
            "type": "string",
            "description": "The date/time that the Order was created."
          },
          "id": {
            "type": "number",
            "description": "The ID of the Order as an integer.",
            "example": 1
          }
        }
      },
      "CreateGroupUsersRequest": {
        "title": "CreateGroupUsersRequest",
        "required": [
          "user_id",
          "group_names"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": "The ID of the User to add to Groups",
            "example": 3251643
          },
          "group_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Group names to add selected User to",
            "example": [
              "New Group 1",
              "New Group 2"
            ]
          }
        }
      },
      "ProductPublishRequest": {
        "title": "ProductPublishRequest",
        "required": [
          "product_id",
          "status",
          "requesting_user_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "number",
            "description": "The ID pf the Product as an integer.",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "The approval status of the Product Publish Request. Can be either 'approved' or 'denied'.",
            "example": "approved"
          },
          "response_text": {
            "type": "string",
            "description": "The text of the response provided by the approver.",
            "example": "Wow! Great course!"
          },
          "requesting_user_id": {
            "type": "number",
            "description": "The ID of the requesting User as an integer.",
            "example": 2
          },
          "responding_user_id": {
            "type": "number",
            "description": "The ID of the responding User as an integer."
          },
          "completed_at": {
            "type": "string",
            "description": "The date/time the Product Publish Request was completed."
          },
          "created_at": {
            "type": "string",
            "description": "The date/time the Product Publish Request was created."
          },
          "updated_at": {
            "type": "string",
            "description": "The date/time the Product Publish Request was last updated."
          }
        }
      },
      "GetProductPublishResponse": {
        "title": "GetProductPublishResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ProductResponse": {
        "title": "ProductResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Product as an integer.",
            "example": 6
          },
          "created_at": {
            "type": "string",
            "description": "The date and time that the Product was created.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "productable_id": {
            "type": "number",
            "description": "The ID of the Course or Bundle that is represented by the Product.",
            "example": 6
          },
          "productable_type": {
            "type": "string",
            "description": "The type of item that the Product represents.",
            "example": "Course"
          },
          "price": {
            "type": "number",
            "description": "The price of the Product. ** NOTE: price will be deprecated in future versions of the API **",
            "example": 10.99
          },
          "position": {
            "type": "number",
            "description": "The position of the Product within the site. Used for ordering.",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "The status of the Product. Can be either 'published' or 'draft'.",
            "example": "published"
          },
          "name": {
            "type": "string",
            "description": "The name of the Product.",
            "example": "My Course"
          },
          "private": {
            "type": "boolean",
            "description": "A boolean indicating whether the Product is private. When private, a Product cannot be purchased. A user must be enrolled manually.",
            "example": false
          },
          "hidden": {
            "type": "boolean",
            "description": "A boolean indicating whether the Product is hidden. When hidden, the Product will not appear on any site pages. It's landing page will be still be accessible via a link, however.",
            "example": false
          },
          "subscription": {
            "type": "boolean",
            "description": "A boolean indicating whether the Product is a subscription or not.",
            "example": false
          },
          "days_until_expiry": {
            "type": "number",
            "description": "If access to a Product can end, this value controls how many days access is granted for from the date of enrollment.",
            "example": 365
          },
          "has_certificate": {
            "type": "boolean",
            "description": "A boolean indicating whether the Product has a certificate.",
            "example": false
          },
          "keywords": {
            "type": "string",
            "description": "Keywords associated with the Product.",
            "example": "some key words"
          },
          "seo_title": {
            "type": "string",
            "description": "The SEO title of the Product.",
            "example": "Product Title"
          },
          "seo_description": {
            "type": "string",
            "description": "The SEO description of the Product.",
            "example": "Description"
          },
          "collection_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The IDs of the Categories to which this Product belongs as integers.",
            "example": [
              2,
              3,
              5
            ]
          },
          "related_product_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The IDs of any related Products as integers.",
            "example": [
              16,
              22
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the product (course or bundle)",
            "example": "Product Description"
          },
          "card_image_url": {
            "type": "string",
            "description": "The card image URL for the product.",
            "example": "http://example.com/card.jpg"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product",
            "example": "new-product"
          },
          "product_prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPriceResponse"
            },
            "description": "The Product Price objects for the Product."
          }
        }
      },
      "ProductPriceResponse": {
        "title": "ProductPriceResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Product Price as an integer.",
            "example": 4
          },
          "is_primary": {
            "type": "boolean",
            "description": "A boolean indicating whether the Product Price is the default.",
            "default": false,
            "example": true
          },
          "payment_type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "label": {
            "type": "string",
            "description": "The description for the Product Price. This value is required when is_primary is false."
          },
          "price": {
            "type": "string",
            "description": "The amount in dollars to be charged.",
            "example": "10.0"
          },
          "days_until_expiry": {
            "type": "string",
            "description": "The number of days, after purchase, that a student will be enrolled in the course."
          },
          "pay_button_text": {
            "type": "string",
            "description": "This text that is displayed on the Buy Button on the course card and the course landing page."
          },
          "number_of_payments": {
            "type": "string",
            "description": "The number of recurring payments for a Product Price with payment_type of 'payment-plan'."
          },
          "interval": {
            "$ref": "#/components/schemas/Interval"
          },
          "interval_count": {
            "type": "string",
            "description": "The number of intervals between billings. For example, if interval is 'month' and interval_count is '1', the billing frequency is once every month.",
            "example": "1"
          },
          "trial_interval": {
            "$ref": "#/components/schemas/TrialInterval"
          },
          "trial_interval_count": {
            "type": "string",
            "description": "The number of intervals for the trial period. For example, if trial_interval is 'month' and trial_interval_count is '6', the free trial will end (and regular payments will begin) in 6 months."
          },
          "custom_first_price": {
            "type": "string",
            "description": "Students pay this amount for the first payment period of the subscription."
          },
          "price_name": {
            "type": "string",
            "description": "The name of the Product Price. If is_primary is true, returns the name of the product, otherwise returns \"{Product name} - {Product Price label}\".",
            "example": "Learn Jiu Jitsu"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code of the Product Price. Must be a supported currency.",
            "default": "usd",
            "example": "usd"
          }
        }
      },
      "GetProductsResponse": {
        "title": "GetProductsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "GetPromotionsResponse": {
        "title": "GetPromotionsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "PromotionResponse": {
        "title": "PromotionResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the Promotion as an integer.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the Promotion.",
            "example": "A Promo"
          },
          "description": {
            "type": "string",
            "description": "A description for the Promotion.",
            "example": "The promo description"
          },
          "starts_at": {
            "type": "string",
            "description": "The date and time when the Promotion begins.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "expires_at": {
            "type": "string",
            "description": "The date and time when the Promotion ends.",
            "format": "date-time",
            "example": "2018-01-31T01:01:00Z"
          },
          "discount_type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the discount. If 'fixed', must be a dollar value. If 'percentage', must be a number greater than 0 and less than or equal to 100.",
            "example": 10
          },
          "coupon_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The coupon ids related to the promotion.",
            "example": [
              1,
              2,
              3
            ]
          },
          "duration": {
            "type": "number",
            "description": "The duration for which the Promotion is applied. ** This value only applies to Promotions set on Products that are set as subscriptions or Payment Plans. **",
            "example": 3
          }
        }
      },
      "PromotionRequest": {
        "title": "PromotionRequest",
        "required": [
          "name",
          "discount_type",
          "amount"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Promotion.",
            "example": "A Promo"
          },
          "description": {
            "type": "string",
            "description": "A description for the Promotion.",
            "example": "The promo description"
          },
          "starts_at": {
            "type": "string",
            "description": "The date and time when the Promotion begins.",
            "format": "date-time",
            "example": "2018-01-01T01:01:00Z"
          },
          "expires_at": {
            "type": "string",
            "description": "The date and time when the Promotion ends.",
            "format": "date-time",
            "example": "2018-01-31T01:01:00Z"
          },
          "discount_type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the discount. If 'fixed', must be a dollar value. If 'percentage', must be a number greater than 0 and less than or equal to 100.",
            "example": 10
          },
          "product_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The Products to apply the Promotion to. If none are specified, the Promotion is applicable to all Products."
          },
          "coupon_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The coupon ids related to the promotion.",
            "example": [
              1,
              2,
              3
            ]
          },
          "duration": {
            "type": "number",
            "description": "The duration for which the Promotion is applied. ** This value only applies to Promotions set on Products that are set as subscriptions or Payment Plans. **",
            "example": 3
          }
        }
      },
      "GetUsersResponse": {
        "title": "GetUsersResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": ""
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "UserResponse": {
        "title": "UserResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User's ID",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "description": "User's created date",
            "format": "date-time",
            "example": "2018-07-12T23:19:00.154Z"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the User.",
            "example": "Bob"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the User.",
            "example": "Smith"
          },
          "full_name": {
            "type": "string",
            "description": "The email of the User.",
            "example": "Bob Smith"
          },
          "company": {
            "type": "string",
            "description": "The company of the User.",
            "example": "The user's company"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bob@example.com"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "Any specific roles that the User should be placed in. Possible roles are: affiliate, course_admin, group_analyst, site_admin.",
            "example": [
              "affiliate"
            ]
          },
          "avatar_url": {
            "type": "string",
            "description": "The fully-qualified avatar url of the User.",
            "example": "https://example.com/avatar/123"
          },
          "bio": {
            "type": "string",
            "description": "The bio of the User.",
            "example": "User's bio"
          },
          "headline": {
            "type": "string",
            "description": "The headline/title of the User.",
            "example": "User's headline"
          },
          "affiliate_code": {
            "type": "string",
            "description": "The affiliate code of the User. ** Required only if the User is an affiliate. **",
            "example": "abc123"
          },
          "external_source": {
            "type": "string",
            "description": "User's external source"
          },
          "affiliate_commission": {
            "type": "number",
            "description": "The affiliate commission % of the User. ** Required only if the User is an affiliate. This should be greater than 0 and less than or equal to 100. **",
            "example": 20
          },
          "affiliate_commission_type": {
            "type": "string",
            "description": "The affiliate payout type, it can be either % (percentage, default) or $ (fixed amount). ** Required only if the User is an affiliate. **",
            "example": "%"
          },
          "affiliate_payout_email": {
            "type": "string",
            "description": "The email of the User. ** Required only if the user is an affiliate. Used to pay the User out. **",
            "example": "bob@example.com"
          },
          "administered_course_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "User's administered course ids"
          },
          "custom_profile_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProfileField"
            },
            "description": "Custom profile fields for the User."
          }
        }
      },
      "AuthenticationResponse": {
        "title": "AuthenticationResponse",
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "external_id": {
            "type": "string",
            "description": "User External Id given by the provider.",
            "example": "abc123"
          }
        }
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "product_id": {
            "type": "number",
            "description": "Product ID",
            "example": 1
          },
          "product_name": {
            "type": "string",
            "description": "Product name",
            "example": "My Course"
          },
          "amount_dollars": {
            "type": "number",
            "description": "Product price in dollars",
            "example": 20
          },
          "amount_cents": {
            "type": "number",
            "description": "Product price in cents",
            "example": 2000
          }
        }
      },
      "CustomProfileField": {
        "title": "CustomProfileField",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Custom profile field ID",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "Custom profile field value",
            "example": "887 909 9999"
          },
          "label": {
            "type": "string",
            "description": "Custom profile field label",
            "example": "Phone"
          },
          "custom_profile_field_definition_id": {
            "type": "number",
            "description": "Custom profile field definition ID",
            "example": 1
          }
        }
      },
      "CreateUserRequest": {
        "title": "CreateUserRequest",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "User's first name",
            "example": "Bob"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bob@example.com"
          },
          "password": {
            "minLength": 6,
            "type": "string",
            "description": "The password of the User. If not included, the Express Sign In Link becomes activated for the User.",
            "example": "password"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "User's roles",
            "example": [
              "affiliate"
            ]
          },
          "bio": {
            "type": "string",
            "description": "User's bio",
            "example": "The user's bio"
          },
          "company": {
            "type": "string",
            "description": "User's Company Name",
            "example": "The user's company"
          },
          "headline": {
            "type": "string",
            "description": "User's headline",
            "example": "The user's job title"
          },
          "affiliate_code": {
            "type": "string",
            "description": "User's affiliate code",
            "example": "abc123"
          },
          "affiliate_commission": {
            "type": "number",
            "description": "Required only if the User is an affiliate. This should be greater than 0 and less than or equal to 100 if the type is percentage or lower than 9999.99 if is a fixed type.",
            "example": 20
          },
          "affiliate_commission_type": {
            "type": "string",
            "description": "The affiliate payout type, it can be either % (percentage, default) or $ (fixed amount). Required only if the User is an affiliate.",
            "example": "%"
          },
          "affiliate_payout_email": {
            "type": "string",
            "description": "The email of the User. Required only if the user is an affiliate. Used to pay the User out.",
            "example": "bob@example.com"
          },
          "custom_profile_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProfileFieldRequest"
            },
            "description": "Custom profile fields for the User."
          },
          "skip_custom_fields_validation": {
            "type": "boolean",
            "description": "Option to skip required custom profile fields validation.",
            "default": false
          },
          "send_welcome_email": {
            "type": "boolean",
            "description": "Option to send the Site Welcome email to the User.",
            "default": false
          },
          "external_id": {
            "type": "string",
            "description": "Optional identifier of the user in an external system. Typically used in conjunction with Thinkific's single sign-on. For further information on this, please read [this](https://help.thinkific.com/support/solutions/articles/221622-sso-automatically-sign-in-from-your-own-website)"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider1"
          }
        }
      },
      "CustomProfileFieldRequest": {
        "title": "CustomProfileFieldRequest",
        "required": [
          "custom_profile_field_definition_id"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Custom profile field value",
            "example": "887 909 9999"
          },
          "custom_profile_field_definition_id": {
            "type": "number",
            "description": "Custom profile field definition id",
            "example": 1
          }
        }
      },
      "UpdateUserRequest": {
        "title": "UpdateUserRequest",
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "User's first name",
            "example": "Bob"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email. This can only be updated by private integrations.",
            "example": "bob@example.com"
          },
          "password": {
            "minLength": 6,
            "type": "string",
            "description": "The password of the User.",
            "example": "password"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "User's roles",
            "example": [
              "affiliate"
            ]
          },
          "avatar_url": {
            "type": "string",
            "description": "The fully-qualified avatar url of the User.",
            "example": "https://example.com/avatar/123"
          },
          "bio": {
            "type": "string",
            "description": "User's bio",
            "example": "The user's bio"
          },
          "company": {
            "type": "string",
            "description": "User's Company Name",
            "example": "The user's company"
          },
          "headline": {
            "type": "string",
            "description": "User's headline",
            "example": "The user's job title"
          },
          "external_source": {
            "type": "string",
            "description": "User's external source",
            "example": "The external source that the user was created from"
          },
          "affiliate_code": {
            "type": "string",
            "description": "User's affiliate code",
            "example": "abc123"
          },
          "affiliate_commission": {
            "type": "number",
            "description": "Required only if the User is an affiliate. This should be greater than 0 and less than or equal to 100 if the type is percentage or lower than 9999.99 if is a fixed type.",
            "example": 20
          },
          "affiliate_commission_type": {
            "type": "string",
            "description": "The affiliate payout type, it can be either % (percentage, default) or $ (fixed amount). Required only if the User is an affiliate.",
            "example": "%"
          },
          "affiliate_payout_email": {
            "type": "string",
            "description": "The email of the User. Required only if the user is an affiliate. Used to pay the User out.",
            "example": "bob@example.com"
          },
          "custom_profile_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProfileField"
            },
            "description": "Custom profile fields for the User."
          }
        }
      },
      "Meta": {
        "title": "Meta",
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "current_page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "next_page": {
            "type": "number",
            "description": "Next page number",
            "example": 2
          },
          "prev_page": {
            "type": "number",
            "description": "Previous page number"
          },
          "total_pages": {
            "type": "number",
            "description": "Number of total pages",
            "example": 10
          },
          "total_items": {
            "type": "number",
            "description": "Number of total items",
            "example": 250
          },
          "entries_info": {
            "type": "string",
            "description": "Entries info",
            "example": "1-10 of 10"
          }
        },
        "description": "Pagination metadata"
      },
      "UnprocessableEntityError": {
        "title": "UnprocessableEntityError",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": ""
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "validation error"
          }
        }
      },
      "ErrorNotFound": {
        "title": "ErrorNotFound",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "item not found error"
          }
        },
        "example": {
          "error": "Record not found."
        }
      },
      "ErrorForbiddenAppsNotAvailable": {
        "title": "ErrorForbiddenAppsNotAvailable",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "access forbidden"
          }
        },
        "example": {
          "error": "Access to Apps is not available on your plan. Upgrade to gain access"
        }
      },
      "ErrorForbiddenInsufficientScope": {
        "title": "ErrorForbiddenInsufficientScope",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "access forbidden"
          }
        },
        "example": {
          "error": "Access token has insufficient scope."
        }
      },
      "ErrorBadRequest": {
        "title": "ErrorBadRequest",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Malformed request error"
          }
        },
        "example": {
          "error": "Parameter ID is required."
        }
      },
      "SiteScriptRequest": {
        "title": "SiteScriptRequest",
        "required": [
          "name",
          "description",
          "page_scopes",
          "category"
        ],
        "type": "object",
        "properties": {
          "src": {
            "type": "string",
            "description": "A URL that points to where the script is hosted. Required if `content` is not provided. Note the TLD of the src url must match the app's url.",
            "example": "https://your-site.com/site-script.js"
          },
          "content": {
            "type": "string",
            "description": "A string containing HTML/Javascript. Required if `src` is not provided. When providing the script using content, the header HMAC-SHA256-SIGNATURE is also require to be sent. Generate the signature using the app's client secret and the value.",
            "example": "console.log('Hello! This is a Site Script')"
          },
          "name": {
            "type": "string",
            "description": "A short and user-friendly string to identify the script.",
            "example": "MyApp's Tracking Script"
          },
          "description": {
            "type": "string",
            "description": "A user-friendly explanation of the script's purpose and what it does.",
            "example": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers."
          },
          "page_scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageScope"
            },
            "description": "An array of page and domain identifiers that the Site Script should be injected onto. `page_scopes` can contain identifiers that are groupings of pages and/or the pages themselves.\n\nThe majority of the page identifiers correspond to Liquid pages. For more details, take a look at our [Liquid API docs](https://developers.thinkific.com/themes/liquid-api/pages/).\n\nGroupings and Page Identifiers:\n\n| Page Grouping | Page Identifiers Included |\n| ------- | --------|\n| landing_pages   | home_landing_page, course_landing_page, collections_landing_page, bundle_landing_page, coming_soon_page, page_template (used for custom pages)   |\n| checkout   | checkout_thankyou_page   |\n| learning_experience   | student_dashboard, course_player   |\n| all   | all page identifiers listed above   |",
            "example": [
              "landing_pages",
              "course_player"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "load_method": {
            "$ref": "#/components/schemas/LoadMethod"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "SiteScriptResponse": {
        "title": "SiteScriptResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Site Script's ID.",
            "example": "01A6BCDEF19GHIJ7K4LMNOP87Q"
          },
          "content": {
            "type": "string",
            "description": "A string containing HTML/Javascript. Required if `src` is not provided.",
            "example": "console.log('Hello! This is a Site Script')"
          },
          "src": {
            "type": "string",
            "description": "A URL that points to where the script is hosted. Required if `content` is not provided.",
            "example": "https://your-site.com/site-script.js"
          },
          "name": {
            "type": "string",
            "description": "A short and user-friendly string to identify the script.",
            "example": "MyApp's Tracking Script"
          },
          "description": {
            "type": "string",
            "description": "A user-friendly explanation of the script's purpose and what it does.",
            "example": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers."
          },
          "page_scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageScope"
            },
            "description": "An array of page and domain identifiers that the Site Script should be injected onto. `page_scopes` can contain identifiers that are groupings of pages and/or the pages themselves.\n\nThe majority of the page identifiers correspond to Liquid pages. For more details, take a look at our [Liquid API docs](https://developers.thinkific.com/themes/liquid-api/pages/).\n\nGroupings and Page Identifiers:\n\n| Page Grouping | Page Identifiers Included |\n| ------- | --------|\n| landing_pages   | home_landing_page, course_landing_page, collections_landing_page, bundle_landing_page, coming_soon_page, page_template (used for custom pages)   |\n| checkout   | checkout_thankyou_page   |\n| learning_experience   | student_dashboard, course_player   |\n| all   | all page identifiers listed above   |",
            "example": [
              "landing_pages",
              "course_player"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "load_method": {
            "$ref": "#/components/schemas/LoadMethod"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "created_at": {
            "type": "string",
            "description": "Site Script's created date",
            "format": "date-time",
            "example": "2018-07-12T23:19:00.154Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Site Script's updated date",
            "format": "date-time",
            "example": "2018-07-12T23:19:00.154Z"
          }
        }
      },
      "GetSiteScriptsResponse": {
        "title": "GetSiteScriptsResponse",
        "required": [
          "items",
          "meta"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteScriptResponse"
            },
            "description": "",
            "example": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "src": "https://your-site.com/site-script.js",
                "name": "MyApp's Tracking Script",
                "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                "page_scopes": [
                  "landing_pages",
                  "course_player"
                ],
                "location": "footer",
                "load_method": "async",
                "category": "marketing"
              },
              {
                "id": "123e4567-e89b-12d3-a456-426614174999",
                "content": "console.log('Hello! This is a Site Script')",
                "name": "MyApp's Tracking Script",
                "description": "MyApp's Tracking Script runs on your site's landing pages and tracks information about your user's visits. MyApp uses this data in our reporting tools so you can better understand your customers.",
                "page_scopes": [
                  "landing_pages",
                  "course_player"
                ],
                "location": "footer",
                "load_method": "async",
                "category": "marketing"
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "BundlesEnrollmentsRequest": {
        "title": "BundlesEnrollmentsRequest",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number"
          },
          "activated_at": {
            "type": "string",
            "description": "The date/time at which the Enrollment is to be activated. If not provided, the Enrollment will only provide access to free preview content within the Courses. Provide full access to courses by setting this value to the current date/time.",
            "format": "date-time"
          },
          "expiry_date": {
            "type": "string",
            "description": "The date/time at which the Enrollment should be expired. If not provided, the Enrollment does not expire.",
            "format": "date-time"
          }
        }
      },
      "Category": {
        "title": "Category",
        "enum": [
          "functional",
          "analytics",
          "marketing"
        ],
        "type": "string",
        "description": "Describes the purpose of the script. Accepted values are: functional, analytics, marketing",
        "example": "marketing"
      },
      "ContentableType": {
        "title": "ContentableType",
        "enum": [
          "Assignment",
          "Audio",
          "Download",
          "BrilliumExam",
          "Disqus",
          "HtmlItem",
          "Iframe",
          "LiveLesson",
          "Lesson",
          "Pdf",
          "Presentation",
          "Quiz",
          "Survey"
        ],
        "type": "string",
        "description": "The type of the Content",
        "example": "Lesson"
      },
      "DiscountType": {
        "title": "DiscountType",
        "enum": [
          "fixed",
          "percentage"
        ],
        "type": "string",
        "description": "The type of discount. Must be either 'fixed' or 'percentage'.",
        "example": "fixed"
      },
      "ExternalOrdersResponse": {
        "title": "ExternalOrdersResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          }
        }
      },
      "Interval": {
        "title": "Interval",
        "enum": [
          "month",
          "year"
        ],
        "type": "string",
        "description": "The billing frequency. Must be one of 'month' or 'year'.",
        "example": "month"
      },
      "LoadMethod": {
        "title": "LoadMethod",
        "enum": [
          "async",
          "defer",
          "default"
        ],
        "type": "string",
        "description": "How the Site Script will be loaded into the page. Accepted values are: async, defer, and default",
        "example": "async"
      },
      "Location": {
        "title": "Location",
        "enum": [
          "head",
          "footer"
        ],
        "type": "string",
        "description": "Where in the HTML the script should be injected. Accepted values are: head or footer",
        "example": "footer"
      },
      "OrderType": {
        "title": "OrderType",
        "enum": [
          "one-time",
          "subscription",
          "payment-plan"
        ],
        "type": "string",
        "description": "type of the order",
        "example": "one-time"
      },
      "PageScope": {
        "title": "PageScope",
        "enum": [
          "landing_pages",
          "checkout",
          "learning_experience",
          "all",
          "home_landing_page",
          "course_landing_page",
          "collections_landing_page",
          "bundle_landing_page",
          "coming_soon_page",
          "page_template",
          "checkout_thankyou_page",
          "student_dashboard",
          "course_player"
        ],
        "type": "string"
      },
      "PaymentType": {
        "title": "PaymentType",
        "enum": [
          "free",
          "one-time",
          "subscription",
          "payment-plan"
        ],
        "type": "string",
        "description": "The type of payment. Must be one of 'free', 'one-time', 'subscription', or 'payment-plan'.",
        "example": "subscription"
      },
      "Provider": {
        "title": "Provider",
        "enum": [
          "SSO",
          "OPENID_CONNECT"
        ],
        "type": "string",
        "description": "Authentication provider associated with the user.",
        "example": "OPENID_CONNECT"
      },
      "Provider1": {
        "title": "Provider1",
        "enum": [
          "SSO",
          "OPENID_CONNECT"
        ],
        "type": "string",
        "description": "When using Thinkific single sign-on and providing an external_id, specify the provider type to distinguish which single sign-on type the user should be associated with."
      },
      "provider2": {
        "title": "provider2",
        "enum": [
          "SSO",
          "OPENID_CONNECT"
        ],
        "type": "string",
        "description": "Provider that creates the user and with which the External Id is associated.",
        "example": "SSO"
      },
      "Role": {
        "title": "Role",
        "enum": [
          "affiliate",
          "course_admin",
          "group_analyst",
          "site_admin"
        ],
        "type": "string"
      },
      "TrialInterval": {
        "title": "TrialInterval",
        "enum": [
          "day",
          "month"
        ],
        "type": "string",
        "description": "The interval for the trial period. Must be one of 'day' or 'month'."
      }
    },
    "securitySchemes": {
      "OAuthAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "ApiKey": {
        "type": "apiKey",
        "description": "Used together with ApiKeySubdomain",
        "name": "X-Auth-API-Key",
        "in": "header"
      },
      "ApiKeySubdomain": {
        "type": "apiKey",
        "description": "Used together with ApiKey",
        "name": "X-Auth-Subdomain",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "OAuthAccessToken": []
    },
    {
      "ApiKey": [],
      "ApiKeySubdomain": []
    }
  ],
  "tags": [
    {
      "name": "Bundles",
      "description": "Bundle operations"
    },
    {
      "name": "Categories",
      "description": "Categories operations"
    },
    {
      "name": "Category Memberships",
      "description": "Category Memberships operations"
    },
    {
      "name": "Chapters",
      "description": "Chapters operations"
    },
    {
      "name": "Contents",
      "description": "Contents operations"
    },
    {
      "name": "Coupons",
      "description": "Coupons operations"
    },
    {
      "name": "Courses",
      "description": "Courses operations"
    },
    {
      "name": "Course Reviews",
      "description": "Course Reviews operations"
    },
    {
      "name": "Custom Profile Field Definitions",
      "description": "Custom Profile Field Definitions"
    },
    {
      "name": "Enrollments",
      "description": "Enrollments operations"
    },
    {
      "name": "External Orders",
      "description": "Please note that any External Orders created through the API do not appear on the orders report or dashboard in your Thinkific site. Using the External Orders endpoints will simply store the information in our database."
    },
    {
      "name": "Groups",
      "description": "Groups operations"
    },
    {
      "name": "Group Analysts",
      "description": "Group Analyst operations"
    },
    {
      "name": "Group Users",
      "description": "Group Users operations"
    },
    {
      "name": "Instructors",
      "description": "Instructors operations"
    },
    {
      "name": "Orders",
      "description": "Orders operations"
    },
    {
      "name": "Product Publish Request",
      "description": "Product Publish Request operations"
    },
    {
      "name": "Products",
      "description": "Products operations"
    },
    {
      "name": "Promotions",
      "description": "Promotions operations"
    },
    {
      "name": "Site Scripts",
      "description": "Site Scripts operations [Scope Required](https://developers.thinkific.com/building-apps/site-scripts/#oauth-scope)"
    },
    {
      "name": "Users",
      "description": "Users operations"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Thinkifc's API",
    "url": "http://developers.thinkific.com/api/api-documentation/"
  }
}