{
  "openapi": "3.0.0",
  "info": {
    "title": "UChat API",
    "description": "Help article is available [here](https://docs.uchat.com.au)",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://www.uchat.com.au/api"
    }
  ],
  "paths": {
    "/flow/bot-fields": {
      "get": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Get list of bot fields by flow",
        "description": "`Scope required: (Manage Flow)` — Get list of bot fields by flow",
        "operationId": "flowBotFields",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for bot field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotFieldResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/create-bot-field": {
      "post": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Create new bot field",
        "description": "`Scope required: (Manage Flow)` — create new bot field",
        "operationId": "flowCreateBotField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Body",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BotField"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/set-bot-field": {
      "put": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Update bot field value",
        "description": "`Scope required: (Manage Flow)` — update bot field value",
        "operationId": "flowUpdateBotField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Bot Field",
                "required": [
                  "var_ns",
                  "value"
                ],
                "properties": {
                  "var_ns": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotField"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/set-bot-field-by-name": {
      "put": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Update bot field value by bot field name",
        "description": "`Scope required: (Manage Flow)` — update bot field value by bot field name",
        "operationId": "flowUpdateBotFieldByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Bot Field",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotField"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-bot-field": {
      "delete": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Delete bot field",
        "description": "`Scope required: (Manage Flow)` — Delete bot field",
        "operationId": "flowDeleteBotField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Bot Field",
                "required": [
                  "var_ns"
                ],
                "properties": {
                  "var_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-bot-field-by-name": {
      "delete": {
        "tags": [
          "Flow Bot Field"
        ],
        "summary": "Delete bot field by name",
        "description": "`Scope required: (Manage Flow)` — Delete bot field by name",
        "operationId": "flowDeleteBotFieldByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Bot Field",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscribers": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Get list of subscribers",
        "description": "`Scope required: (Manage Flow)` — Get list of subscribers by seaching for name, phone, email, tag, custom user field and so on.",
        "operationId": "flowBotUsers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response, between 1 and 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for subscriber name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Search for subscriber phone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Search for subscriber email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_channel",
            "in": "query",
            "description": "Search for subscriber is from channel, available value 'facebook', 'instagram', 'whatsapp', 'google', 'telegram', 'line', 'viber', 'vk', 'wechat', 'web'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_opt_in_email",
            "in": "query",
            "description": "Search for subscriber is opted in email, available value 'yes', 'no'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_opt_in_sms",
            "in": "query",
            "description": "Search for subscriber is opted in SMS, available value 'yes', 'no'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_interacted_in_last_24h",
            "in": "query",
            "description": "Search for subscriber is interacted within last 24 hours, available value 'yes', 'no'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag_ns",
            "in": "query",
            "description": "Search for subscriber has tag with specified tag_ns",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_field_ns",
            "in": "query",
            "description": "Search for subscriber has custom user field with specified value from `user_field_value`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_field_value",
            "in": "query",
            "description": "specified value for custom user field `user_field_ns`",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotUserResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/get-info": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Get subscriber info",
        "description": "`Scope required: (Manage Flow)` — Get subscriber info",
        "operationId": "flowBotUserInfo",
        "parameters": [
          {
            "name": "user_ns",
            "in": "query",
            "description": "Subscriber user_ns",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotUser"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/get-info-by-user-id": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Get subscriber info by user id",
        "description": "`Scope required: (Manage Flow)` — Get subscriber info by user unique id from channel, e.g. Facebook user id, WhatsApp user id, WeChat user id...",
        "operationId": "flowBotUserInfoByUserId",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Subscriber user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotUser"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/create": {
      "post": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Create new subscriber",
        "description": "`Scope required: (Manage Flow)` — Create new subscriber, phone or email is required",
        "operationId": "flowCreateBotUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "phone",
                  "email"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "gender": {
                    "description": "male,female",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotUser"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/update": {
      "put": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Update subscriber data",
        "description": "`Scope required: (Manage Flow)` — Update subscriber data",
        "operationId": "flowUpdateBotUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "phone",
                  "email"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotUser"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/delete": {
      "delete": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Delete subscriber",
        "description": "`Scope required: (Manage Flow)` — Delete subscriber",
        "operationId": "flowDeleteBotUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/add-tag": {
      "post": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Add tag to subscriber",
        "description": "`Scope required: (Manage Flow)` — Add tag to subscriber",
        "operationId": "flowBotUserAddTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "tag_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "tag_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/add-tag-by-name": {
      "post": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Add tag to subscriber by tag name",
        "description": "`Scope required: (Manage Flow)` — Add tag to subscriber by tag name",
        "operationId": "flowBotUserAddTagByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "tag_name"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "tag_name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/remove-tag": {
      "delete": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Remove tag from subscriber",
        "description": "`Scope required: (Manage Flow)` — Remove tag from subscriber",
        "operationId": "flowBotUserRemoveTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "tag_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "tag_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/remove-tag-by-name": {
      "delete": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Remove tag from subscriber by tag name",
        "description": "`Scope required: (Manage Flow)` — Remove tag from subscriber by tag name",
        "operationId": "flowBotUserRemoveTagByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "tag_name"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "tag_name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/set-user-field": {
      "put": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Set or update subscriber user field value",
        "description": "`Scope required: (Manage Flow)` — Set or update subscriber user field value",
        "operationId": "flowBotUserSetUserField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "var_ns",
                  "value"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "var_ns": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/set-user-field-by-name": {
      "put": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Set or update subscriber",
        "description": "`Scope required: (Manage Flow)` — Set or update subscriber user field value by field name",
        "operationId": "flowBotUserSetUserFieldByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "field_name",
                  "value"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "field_name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/send-main-flow": {
      "post": {
        "tags": [
          "Sending"
        ],
        "summary": "Send main flow to subscriber",
        "description": "`Scope required: (Manage Flow)` — Send main flow to subscriber",
        "operationId": "flowBotUserSendMainFlow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/send-sub-flow": {
      "post": {
        "tags": [
          "Sending"
        ],
        "summary": "Send sub flow to subscriber",
        "description": "`Scope required: (Manage Flow)` — Send sub flow to subscriber",
        "operationId": "flowBotUserSendSubFlow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "sub_flow_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "sub_flow_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/send-content": {
      "post": {
        "tags": [
          "Sending"
        ],
        "summary": "Send content to subscriber",
        "description": "`Scope required: (Manage Flow)` — Send content to subscriber, learn more about how to use dynamic content [https://docs.uchat.com.au/for-developers/](https://docs.uchat.com.au/for-developers/)",
        "operationId": "flowBotUserSendContent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "data"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "data": {
                    "properties": {
                      "version": {
                        "type": "string",
                        "enum": [
                          "v1"
                        ],
                        "example": "v1"
                      },
                      "content": {
                        "properties": {
                          "messages": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "text",
                                    "image",
                                    "audio",
                                    "video",
                                    "file",
                                    "cards"
                                  ],
                                  "example": "text"
                                },
                                "text": {
                                  "type": "string",
                                  "example": "text message"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "actions": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "add_tag",
                                    "remove_tag",
                                    "set_field_value",
                                    "unset_field_value"
                                  ],
                                  "example": "add_tag"
                                },
                                "tag_name": {
                                  "type": "string",
                                  "example": "tag name"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "quick_replies": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "node",
                                    "url",
                                    "dynamic_block_callback"
                                  ],
                                  "example": "node"
                                },
                                "caption": {
                                  "type": "string",
                                  "example": "Show"
                                },
                                "target": {
                                  "type": "string",
                                  "example": "node_ns"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "goto": {
                            "type": "string",
                            "example": "node name or node_ns"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/app-trigger": {
      "post": {
        "tags": [
          "Mini-App"
        ],
        "summary": "Trigger an app event",
        "description": "`Scope required: (Manage Flow)` — Trigger an app event on subscriber from installed min-app",
        "operationId": "flowBotUserAppTrigger",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "trigger_name"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "trigger_name": {
                    "type": "string"
                  },
                  "context": {
                    "properties": {
                      "product_name": {
                        "type": "string",
                        "example": "apple"
                      },
                      "product_id": {
                        "type": "string",
                        "example": "123"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/subflows": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get list of sub flows",
        "description": "`Scope required: (Manage Flow)` — Get list of sub flows",
        "operationId": "flowSubFlows",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for sub flow name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubFlowResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/tags": {
      "get": {
        "tags": [
          "Flow Tag"
        ],
        "summary": "Get list of tags by flow",
        "description": "`Scope required: (Manage Flow)` — Get list of tags by flow",
        "operationId": "flowTags",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for tag name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/create-tag": {
      "post": {
        "tags": [
          "Flow Tag"
        ],
        "summary": "Create new tag",
        "description": "`Scope required: (Manage Flow)` — create new tag",
        "operationId": "flowCreateTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Tag",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-tag": {
      "delete": {
        "tags": [
          "Flow Tag"
        ],
        "summary": "Delete tag",
        "description": "`Scope required: (Manage Flow)` — Delete tag",
        "operationId": "flowDeleteTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Tag",
                "required": [
                  "tag_ns"
                ],
                "properties": {
                  "tag_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-tag-by-name": {
      "delete": {
        "tags": [
          "Flow Tag"
        ],
        "summary": "Delete tag by tag name",
        "description": "`Scope required: (Manage Flow)` — Delete tag by tag name",
        "operationId": "flowDeleteTagByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Tag",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/user-fields": {
      "get": {
        "tags": [
          "Flow User Field"
        ],
        "summary": "Get list of user fields by flow",
        "description": "`Scope required: (Manage Flow)` — Get list of user fields by flow",
        "operationId": "flowUserFields",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for user field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFieldResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/create-user-field": {
      "post": {
        "tags": [
          "Flow User Field"
        ],
        "summary": "Create new user field",
        "description": "`Scope required: (Manage Flow)` — create new user field",
        "operationId": "flowCreateUserField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Body",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserField"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-user-field": {
      "delete": {
        "tags": [
          "Flow User Field"
        ],
        "summary": "Delete user field",
        "description": "`Scope required: (Manage Flow)` — Delete user field",
        "operationId": "flowDeleteUserField",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "User Field",
                "required": [
                  "var_ns"
                ],
                "properties": {
                  "var_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/flow/delete-user-field-by-name": {
      "delete": {
        "tags": [
          "Flow User Field"
        ],
        "summary": "Delete user field by name",
        "description": "`Scope required: (Manage Flow)` — Delete user field by name",
        "operationId": "flowDeleteUserFieldByName",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "User Field",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/cart": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get subscriber shopping cart",
        "description": "`Scope required: (Manage Flow)` — Get subscriber shopping cart detail",
        "operationId": "flowBotUserCart",
        "parameters": [
          {
            "name": "user_ns",
            "in": "query",
            "description": "Subscriber user_ns",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDetailResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/empty-cart": {
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Empty subscriber shopping cart",
        "description": "`Scope required: (Manage Flow)` — Empty subscriber shopping cart items",
        "operationId": "flowBotUserEmptyCart",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/add-to-cart": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Add item to subscriber shopping cart",
        "description": "`Scope required: (Manage Flow)` — Add item to subscriber shopping cart",
        "operationId": "flowBotUserAddToCart",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "variant_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "qty": {
                    "type": "integer",
                    "example": 1
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/remove-from-cart": {
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Remove item from subscriber shopping cart",
        "description": "`Scope required: (Manage Flow)` — Remove item from subscriber shopping cart",
        "operationId": "flowBotUserRemoveFromCart",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "variant_id": {
                    "type": "integer",
                    "example": 123
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/cart-paid": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Checkout subscriber shopping cart",
        "description": "`Scope required: (Manage Flow)` — Checkout subscriber shopping cart and mark as paid",
        "operationId": "flowBotUserCartPaid",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "shipping_method": {
                    "type": "string",
                    "example": "pickup,delivery"
                  },
                  "payment_method": {
                    "type": "string",
                    "example": "cash,card..."
                  },
                  "reference_no": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "phone": {
                    "description": "Contact phone",
                    "type": "string"
                  },
                  "name": {
                    "description": "Contact name",
                    "type": "string"
                  },
                  "email": {
                    "description": "Contact email",
                    "type": "string"
                  },
                  "address": {
                    "description": "Shipping address",
                    "type": "string"
                  },
                  "suburb": {
                    "description": "Shipping suburb",
                    "type": "string"
                  },
                  "state": {
                    "description": "Shipping state",
                    "type": "string"
                  },
                  "postcode": {
                    "description": "Shipping postcode",
                    "type": "string"
                  },
                  "country": {
                    "description": "Shipping country",
                    "type": "string"
                  },
                  "tracking_no": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber/update-order-status": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Update order status",
        "description": "`Scope required: (Manage Flow)` — Update order status to paid,ordered,processing,shipped,completed,cancelled,refunded",
        "operationId": "flowBotUserUpdateOrderStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "user_ns",
                  "order_id",
                  "status"
                ],
                "properties": {
                  "user_ns": {
                    "type": "string"
                  },
                  "order_id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string",
                    "example": "paid,ordered,processing,shipped,completed,cancelled,refunded"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/orders": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get list of orders",
        "description": "`Scope required: (Manage Team)` — Get list of orders",
        "operationId": "Orders",
        "parameters": [
          {
            "name": "user_ns",
            "in": "query",
            "description": "Subscriber user_ns",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Body",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": "12"
                          },
                          "total": {
                            "type": "string",
                            "example": "25.00"
                          },
                          "currency": {
                            "type": "string",
                            "example": "usd"
                          },
                          "status": {
                            "type": "string",
                            "example": "paid"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/orders/{orderId}/get-info": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get order info",
        "description": "`Scope required: (Manage Team)` — Get order info",
        "operationId": "OrderGetInfo",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get list of products",
        "description": "`Scope required: (Manage Team)` — Get list of products",
        "operationId": "Products",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for product name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/get-info": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get product info",
        "description": "`Scope required: (Manage Team)` — Get product info",
        "operationId": "ProductGetInfo",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/create": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Create new product",
        "description": "`Scope required: (Manage Team)` — Create new product",
        "operationId": "CreateProduct",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                  },
                  "note": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "example": "active"
                  },
                  "type": {
                    "type": "string"
                  },
                  "vendor": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "use_variant": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "price": {
                    "type": "integer",
                    "example": 12.99
                  },
                  "compare_price": {
                    "type": "integer",
                    "example": 15.99
                  },
                  "sku": {
                    "type": "string"
                  },
                  "barcode": {
                    "type": "string"
                  },
                  "track_stock": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "allow_no_stock_sell": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "qty": {
                    "type": "integer",
                    "example": 100
                  },
                  "variant_1_name": {
                    "type": "string",
                    "example": "color"
                  },
                  "variant_2_name": {
                    "type": "string",
                    "example": "size"
                  },
                  "variants": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "image": {
                          "type": "string",
                          "example": "https://example.com/image.png"
                        },
                        "variant_1_value": {
                          "type": "string",
                          "example": "blue"
                        },
                        "variant_2_value": {
                          "type": "string",
                          "example": "large"
                        },
                        "price": {
                          "type": "integer",
                          "example": 12.99
                        },
                        "compare_price": {
                          "type": "integer",
                          "example": 15.99
                        },
                        "taxable": {
                          "type": "integer",
                          "enum": [
                            0,
                            1
                          ],
                          "example": 0
                        },
                        "sku": {
                          "type": "string"
                        },
                        "barcode": {
                          "type": "string"
                        },
                        "track_stock": {
                          "type": "integer",
                          "enum": [
                            0,
                            1
                          ],
                          "example": 0
                        },
                        "allow_no_stock_sell": {
                          "type": "integer",
                          "enum": [
                            0,
                            1
                          ],
                          "example": 0
                        },
                        "qty": {
                          "type": "integer",
                          "example": 100
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/update": {
      "put": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Update product info only",
        "description": "`Scope required: (Manage Team)` — Update product info only. To update variants, use /shop/products/update-variant",
        "operationId": "UpdateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                  },
                  "note": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "example": "active"
                  },
                  "type": {
                    "type": "string"
                  },
                  "vendor": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/delete": {
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Delete product",
        "description": "`Scope required: (Manage Team)` — Delete product",
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/variants": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get list of product variants",
        "description": "`Scope required: (Manage Team)` — Get list of product variants",
        "operationId": "ProductVariants",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/variants/{variantId}/get-info": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get product variant info",
        "description": "`Scope required: (Manage Team)` — Get product variant info",
        "operationId": "ProductVariantInfo",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variantId",
            "in": "path",
            "description": "Variant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Variant"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/variants/create": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Create new product variant",
        "description": "`Scope required: (Manage Team)` — Create new product variant",
        "operationId": "CreateProductVariant",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "properties": {
                  "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                  },
                  "variant_1_value": {
                    "type": "string",
                    "example": "blue"
                  },
                  "variant_2_value": {
                    "type": "string",
                    "example": "large"
                  },
                  "price": {
                    "type": "integer",
                    "example": 12.99
                  },
                  "compare_price": {
                    "type": "integer",
                    "example": 15.99
                  },
                  "taxable": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "sku": {
                    "type": "string"
                  },
                  "barcode": {
                    "type": "string"
                  },
                  "track_stock": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "allow_no_stock_sell": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "qty": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Variant"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/variants/{variantId}/update": {
      "put": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Update product variant info",
        "description": "`Scope required: (Manage Team)` — Update product variant info",
        "operationId": "UpdateProductVariant",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variantId",
            "in": "path",
            "description": "Variant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "properties": {
                  "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                  },
                  "variant_1_value": {
                    "type": "string",
                    "example": "blue"
                  },
                  "variant_2_value": {
                    "type": "string",
                    "example": "large"
                  },
                  "price": {
                    "type": "integer",
                    "example": 12.99
                  },
                  "compare_price": {
                    "type": "integer",
                    "example": 15.99
                  },
                  "taxable": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "sku": {
                    "type": "string"
                  },
                  "barcode": {
                    "type": "string"
                  },
                  "track_stock": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "allow_no_stock_sell": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "example": 0
                  },
                  "qty": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Variant"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/{productId}/variants/{variantId}/delete": {
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Delete product variant",
        "description": "`Scope required: (Manage Team)` — Delete product variant",
        "operationId": "DeleteProductVariant",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variantId",
            "in": "path",
            "description": "Variant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOk"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get list of templates",
        "description": "`Scope required: (Manage Team)` — Get list of templates",
        "operationId": "Templates",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for template name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResource"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/template/{templateNs}/generate-one-time-link": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Generate template one time install link",
        "description": "`Scope required: (Manage Team)` — Generate template one time install link",
        "operationId": "TemplateOneTimeLink",
        "parameters": [
          {
            "name": "templateNs",
            "in": "path",
            "description": "Template Ns",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "add days to expire the link, default is 30",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Body",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TemplateOneTimeLinkResource"
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user info",
        "description": "Get current user info",
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Response Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BotField": {
        "title": "Bot Field",
        "description": "Flow User Field model",
        "required": [
          "name",
          "var_type",
          "value"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Field name",
            "type": "string"
          },
          "var_ns": {
            "title": "Field Ns",
            "type": "string"
          },
          "var_type": {
            "title": "Field Type",
            "type": "string",
            "enum": [
              "text",
              "number",
              "boolean",
              "date",
              "datetime",
              "array"
            ],
            "example": "text"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "description": "Field value",
            "type": "string",
            "example": "'string', 123, true, '2018-07-18', '2018-07-02T00:00:00+00:00'"
          },
          "is_template_field": {
            "title": "is_template_field",
            "description": "is this bot field a Template field",
            "type": "boolean",
            "example": "false"
          }
        },
        "type": "object",
        "xml": {
          "name": "BotField"
        }
      },
      "BotUser": {
        "title": "Subscriber",
        "description": "Flow Subscriber model",
        "required": [
          "name",
          "email",
          "phone"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Subscriber name",
            "type": "string"
          },
          "user_ns": {
            "title": "User Ns",
            "description": "User unique id generated by UChat",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "description": "User unique id in channel, e.g. Facebook, WhatsApp, WeChat...",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "gender": {
            "title": "Gender",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "male"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "locale": {
            "title": "Locale",
            "type": "string"
          },
          "language": {
            "title": "Language",
            "type": "string"
          },
          "profile_pic": {
            "title": "Profile Image",
            "type": "string"
          },
          "subscribed": {
            "title": "Subscribed at time",
            "type": "string",
            "format": "datetime",
            "example": "2020-11-27 17:50:45"
          },
          "opted_in_email": {
            "title": "Email Opted-In at time",
            "type": "string",
            "format": "datetime",
            "example": "2020-11-27 17:50:45"
          },
          "opted_in_sms": {
            "title": "SMS Opted-In at time",
            "type": "string",
            "format": "datetime",
            "example": "2020-11-27 17:50:45"
          },
          "opted_in_through": {
            "title": "Opted-In through",
            "type": "string"
          },
          "last_interaction": {
            "title": "Last interaction time",
            "type": "string",
            "format": "datetime",
            "example": "2020-11-27 17:50:45"
          },
          "last_seen": {
            "title": "Last seen at time",
            "type": "string",
            "format": "datetime",
            "example": "2020-11-27 17:50:45"
          },
          "tags": {
            "title": "Subscriber Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "user_fields": {
            "title": "Subscriber user fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "BotUser"
        }
      },
      "ChatMsg": {
        "title": "Chat Message",
        "description": "Chat message model",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "enum": [
              "in",
              "out",
              "agent"
            ],
            "example": "text"
          }
        },
        "type": "object",
        "xml": {
          "name": "ChatMsg"
        }
      },
      "Flow": {
        "title": "Flow",
        "description": "Flow model",
        "required": [
          "name",
          "flow_ns"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Flow name",
            "type": "string"
          },
          "flow_ns": {
            "title": "Flow Ns",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "Flow"
        }
      },
      "SubFlow": {
        "title": "Sub Flow",
        "description": "Sub Flow model",
        "required": [
          "name",
          "sub_flow_ns"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Sub Flow name",
            "type": "string"
          },
          "sub_flow_ns": {
            "title": "Sub Flow Ns",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "SubFlow"
        }
      },
      "Tag": {
        "title": "Tag",
        "description": "Flow Tag model",
        "required": [
          "name",
          "tag_ns"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Tag name",
            "type": "string"
          },
          "tag_ns": {
            "title": "Tag Ns",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "Tag"
        }
      },
      "UserField": {
        "title": "User Field",
        "description": "Flow User Field model",
        "required": [
          "name",
          "var_type",
          "value"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Field name",
            "type": "string"
          },
          "var_ns": {
            "title": "Field Ns",
            "type": "string"
          },
          "var_type": {
            "title": "Field Type",
            "type": "string",
            "enum": [
              "text",
              "number",
              "boolean",
              "date",
              "datetime",
              "array"
            ],
            "example": "text"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "description": "Field value",
            "type": "string",
            "example": "'string', 123, true, '2018-07-18', '2018-07-02T00:00:00+00:00'"
          }
        },
        "type": "object",
        "xml": {
          "name": "UserField"
        }
      },
      "ResponseError": {
        "title": "Response Error",
        "properties": {
          "message": {
            "title": "Message",
            "description": "Error message",
            "type": "string",
            "example": "Error message"
          }
        },
        "type": "object",
        "xml": {
          "name": "ResponseError"
        }
      },
      "ResponseOk": {
        "title": "Response Success",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "example": "ok"
          }
        },
        "type": "object",
        "xml": {
          "name": "ResponseOk"
        }
      },
      "CartItem": {
        "title": "Cart Item",
        "description": "Cart Item model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Variant Id",
            "type": "integer",
            "example": 12356
          },
          "product_id": {
            "title": "Id",
            "description": "Product Id",
            "type": "integer",
            "example": 78
          },
          "name": {
            "title": "Name",
            "description": "Product name",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "description": "Product Description",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "Product Image",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "description": "Product Price",
            "type": "number",
            "format": "float",
            "example": 10
          },
          "compare_price": {
            "title": "Compare Price",
            "description": "Product compare price",
            "type": "number",
            "format": "float",
            "example": 12
          },
          "currency": {
            "title": "Currency",
            "description": "Currency",
            "type": "string",
            "example": "aud"
          },
          "num": {
            "title": "Quantity",
            "description": "Number of products",
            "type": "integer",
            "example": 2
          },
          "subtotal": {
            "title": "Subtotal Price for this item",
            "description": "Subtotal price",
            "type": "number",
            "format": "float",
            "example": 20
          }
        },
        "type": "object",
        "xml": {
          "name": "CartItem"
        }
      },
      "Order": {
        "title": "Order",
        "description": "Order model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Order Id",
            "type": "integer",
            "example": 78
          },
          "total_price": {
            "title": "Total price",
            "description": "Total price",
            "type": "integer",
            "example": 200
          },
          "num_of_items": {
            "title": "Number of items",
            "description": "Number of items",
            "type": "integer",
            "example": 2
          }
        },
        "type": "object",
        "xml": {
          "name": "Order"
        }
      },
      "Product": {
        "title": "Product",
        "description": "Product model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Product Id",
            "type": "integer",
            "example": 78
          },
          "name": {
            "title": "Name",
            "description": "Product name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "Product description",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "Product Image",
            "type": "string"
          },
          "use_variant": {
            "title": "Use variant",
            "description": "Use variant",
            "type": "boolean",
            "example": true
          },
          "total_qty": {
            "title": "Total number of stock",
            "description": "Total number of stock",
            "type": "integer",
            "example": 200
          },
          "num_of_variants": {
            "title": "Number of variants",
            "description": "Number of variants",
            "type": "integer",
            "example": 2
          },
          "track_stock": {
            "title": "Track Stock",
            "description": "Track Stock",
            "type": "boolean",
            "example": false
          },
          "type": {
            "title": "Product Type",
            "description": "Product Type",
            "type": "string"
          },
          "vendor": {
            "title": "Product Vendor",
            "description": "Product Vendor",
            "type": "string"
          },
          "variants": {
            "title": "Product Variants",
            "description": "Product Variants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantJsonVarResource"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "Product"
        }
      },
      "Variant": {
        "title": "Product Variant",
        "description": "Product Variant model",
        "properties": {
          "id": {
            "title": "Variant Id",
            "description": "Variant Id",
            "type": "integer",
            "example": 278
          },
          "product_id": {
            "title": "Product Id",
            "description": "Product Id",
            "type": "integer",
            "example": 78
          },
          "variant_1_value": {
            "title": "Option 1 value",
            "description": "Option 1 value",
            "type": "string"
          },
          "variant_2_value": {
            "title": "Option 2 value",
            "description": "Option 2 value",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "Variant Image",
            "type": "string"
          },
          "price": {
            "title": "Variant price",
            "description": "Variant price",
            "type": "integer",
            "example": 12.99
          },
          "compare_price": {
            "title": "Compare at price",
            "description": "Compare at price",
            "type": "integer",
            "example": 15.99
          },
          "taxable": {
            "title": "Taxable",
            "description": "Taxable",
            "type": "boolean",
            "example": true
          },
          "sku": {
            "title": "Sku",
            "description": "Variant Sku",
            "type": "string"
          },
          "barcode": {
            "title": "Barcode",
            "description": "Variant Barcode",
            "type": "string"
          },
          "track_stock": {
            "title": "Track Stock",
            "description": "Track Stock",
            "type": "boolean",
            "example": false
          },
          "allow_no_stock_sell": {
            "title": "Allow no stock sell",
            "description": "If allow to continue sell when no stock available",
            "type": "boolean",
            "example": false
          },
          "qty": {
            "title": "Number of stock",
            "description": "Number of stock",
            "type": "integer",
            "example": 200
          },
          "display_order": {
            "title": "Dislay order",
            "description": "Dislay order for all variants of a product",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object",
        "xml": {
          "name": "Product Variant"
        }
      },
      "Template": {
        "title": "Template",
        "description": "Template model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Template Id",
            "type": "integer",
            "example": 78
          },
          "template_ns": {
            "title": "Template ns",
            "description": "Template ns",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "description": "Template name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "Template description",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "Template Image",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "description": "Template Price",
            "type": "integer"
          },
          "type": {
            "title": "Flow Type",
            "description": "Flow Type",
            "type": "string"
          },
          "scope": {
            "title": "Template Scope",
            "description": "Template Scope, e.g. bot_sub_flow",
            "type": "string"
          },
          "status": {
            "title": "Template Status",
            "description": "Template Status",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "Template"
        }
      },
      "User": {
        "title": "User",
        "description": "User",
        "properties": {
          "id": {
            "title": "User Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "description": "User name",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "User"
        }
      },
      "ActivityLogResource": {
        "title": "ActivityLogResource",
        "description": "Error log resource",
        "xml": {
          "name": "ActivityLogResource"
        }
      },
      "BotFieldResource": {
        "title": "BotFieldResource",
        "description": "Bot Field resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BotField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "BotFieldResource"
        }
      },
      "BotUserResource": {
        "title": "SubscriberResource",
        "description": "Subscriber resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BotUser"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "BotUserResource"
        }
      },
      "BroadcastResource": {
        "title": "BroadcastResource",
        "description": "Broadcast resource",
        "xml": {
          "name": "BroadcastResource"
        }
      },
      "ChatMsgResource": {
        "title": "ChatMsgResource",
        "description": "Chat Message resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMsg"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ChatMsgResource"
        }
      },
      "FlowResource": {
        "title": "FlowResource",
        "description": "Flow resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flow"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "FlowResource"
        }
      },
      "SubFlowResource": {
        "title": "SubFlowResource",
        "description": "Sub Flow resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubFlow"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "SubFlowResource"
        }
      },
      "TagResource": {
        "title": "TagResource",
        "description": "Tag resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TagResource"
        }
      },
      "UserFieldResource": {
        "title": "UserFieldResource",
        "description": "User Field resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "UserFieldResource"
        }
      },
      "CartDetailResource": {
        "title": "CartDetailResource",
        "description": "Cart Detail resource",
        "properties": {
          "id": {
            "title": "Cart Id",
            "description": "Cart id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "description": "Cart created at time",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "description": "Cart updated at time",
            "type": "string",
            "format": "date-time"
          },
          "items": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "num_of_items": {
            "title": "Total Quantity",
            "description": "Total number of items",
            "type": "integer",
            "example": 2
          },
          "total_price": {
            "title": "Total price for the cart",
            "description": "Total price",
            "type": "number",
            "format": "float",
            "example": 20
          }
        },
        "type": "object",
        "xml": {
          "name": "CartDetailResource"
        }
      },
      "OrderDetailResource": {
        "title": "OrderDetailResource",
        "description": "Order Detail resource",
        "xml": {
          "name": "OrderDetailResource"
        }
      },
      "OrderResource": {
        "title": "OrderResource",
        "description": "Order resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "OrderResource"
        }
      },
      "ProductResource": {
        "title": "ProductResource",
        "description": "Product resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ProductResource"
        }
      },
      "VariantJsonVarResource": {
        "title": "VariantJsonVarResource",
        "description": "Product Variant JsonVarResource",
        "properties": {
          "id": {
            "title": "Variant Id",
            "description": "Variant Id",
            "type": "integer",
            "example": 278
          },
          "product_id": {
            "title": "Product Id",
            "description": "Product Id",
            "type": "integer",
            "example": 78
          },
          "option_1": {
            "title": "Option 1 name",
            "description": "Option 1 name",
            "type": "string"
          },
          "option_2": {
            "title": "Option 2 name",
            "description": "Option 2 name",
            "type": "string"
          },
          "option_1_value": {
            "title": "Option 1 value",
            "description": "Option 1 value",
            "type": "string"
          },
          "option_2_value": {
            "title": "Option 2 value",
            "description": "Option 2 value",
            "type": "string"
          },
          "name": {
            "title": "Product name",
            "description": "Product name",
            "type": "string"
          },
          "desc": {
            "title": "Product description",
            "description": "Product description",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "Variant Image",
            "type": "string"
          },
          "price": {
            "title": "Variant price",
            "description": "Variant price",
            "type": "integer",
            "example": 12.99
          },
          "compare_price": {
            "title": "Compare at price",
            "description": "Compare at price",
            "type": "integer",
            "example": 15.99
          },
          "sku": {
            "title": "Sku",
            "description": "Variant Sku",
            "type": "string"
          },
          "barcode": {
            "title": "Barcode",
            "description": "Variant Barcode",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "VariantJsonVarResource"
        }
      },
      "VariantResource": {
        "title": "VariantResource",
        "description": "Variant resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variant"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "VariantResource"
        }
      },
      "TemplateOneTimeLinkResource": {
        "title": "TemplateOneTimeLinkResource",
        "description": "Template one time link resource",
        "properties": {
          "expired_at": {
            "title": "Expired time",
            "description": "Link will expire after the time",
            "type": "string"
          },
          "one_time_token": {
            "title": "Token",
            "description": "Token",
            "type": "string"
          },
          "url": {
            "title": "Template url",
            "description": "Template url",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "TemplateOneTimeLinkResource"
        }
      },
      "TemplateResource": {
        "title": "TemplateResource",
        "description": "Template resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TemplateResource"
        }
      }
    },
    "securitySchemes": {
      "API KEY": {
        "type": "http",
        "description": "To generate the key folow those steps: https://docs.uchat.com.au/for-developers/API/#generate-api-key-http-bearer",
        "scheme": "bearer",
        "bearerFormat": "Bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Flow",
      "description": ""
    },
    {
      "name": "Flow Tag",
      "description": ""
    },
    {
      "name": "Flow User Field",
      "description": ""
    },
    {
      "name": "Flow Bot Field",
      "description": ""
    },
    {
      "name": "Subscriber",
      "description": ""
    },
    {
      "name": "Sending",
      "description": ""
    },
    {
      "name": "Mini-App",
      "description": ""
    },
    {
      "name": "Ecommerce",
      "description": ""
    }
  ],
  "security": [
    {
      "API KEY": []
    }
  ]
}