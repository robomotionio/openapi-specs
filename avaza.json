{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "Avaza API Documentation",
    "description": "Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>"
  },
  "paths": {
    "/api/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Account Details",
        "operationId": "Account_Get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_account"
            ]
          }
        ]
      }
    },
    "/api/Company/Lookup": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets minimal list of Companies.",
        "description": "Certain roles see a restricted set of companies based on their project memberships",
        "operationId": "CompanyLookup",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string to match against Company title",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      }
    },
    "/api/Company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets list of Companies",
        "operationId": "Company_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "1 based page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "(optional) Supply one of: \"DateUpdated\", \"DateCreated\", \"CompanyName\",\"DateUpdated desc\",\"DateCreated desc\", \"CompanyName desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update a Company record.",
        "description": "Requires CompanyID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.",
        "operationId": "Company_Put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a Company",
        "operationId": "Company_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompany"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewCompany"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewCompany"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewCompany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      }
    },
    "/api/Company/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets Company by Company ID",
        "operationId": "Company_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID Number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      }
    },
    "/api/Contact": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Gets list of Contacts",
        "operationId": "Contact_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Contact",
        "operationId": "Contact_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyContact"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyContact"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyContact"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyContact"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      }
    },
    "/api/Contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Gets Contact by Contact ID",
        "operationId": "Contact_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      }
    },
    "/api/CreditNote": {
      "get": {
        "tags": [
          "CreditNote"
        ],
        "summary": "Gets list of CreditNotes",
        "operationId": "CreditNote_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/CreditNote/{id}": {
      "get": {
        "tags": [
          "CreditNote"
        ],
        "summary": "Gets Credit Note by CreditNoteID",
        "operationId": "CreditNote_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Credit Note ID Number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNote"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNote"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNote"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Gets list of Currencies",
        "operationId": "Currency_Get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              }
            }
          }
        }
      }
    },
    "/api/Estimate": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Gets list of Estimates",
        "description": "EstimateStatusCode values are: \"Draft\", \"Sent\", \"Accepted\", \"Converted\", \"Expired\", \"Rejected\"",
        "operationId": "Estimate_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Create a new draft Estimate",
        "operationId": "Estimate_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEstimate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEstimate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewEstimate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewEstimate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewEstimate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_financials"
            ]
          }
        ]
      }
    },
    "/api/Estimate/{id}": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Gets Estimate by Estimate ID",
        "operationId": "Estimate_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Estimate Estimate ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Expense/Attachment": {
      "post": {
        "tags": [
          "Expense"
        ],
        "operationId": "ExpenseAttachment",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "File": {
                    "description": "Upload software package",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "File"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseAttachmentUploadResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseAttachmentUploadResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseAttachmentUploadResult"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseAttachmentUploadResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpenseApproval/Submit": {
      "post": {
        "tags": [
          "Expense"
        ],
        "summary": "Submit Expenses for Approval.",
        "operationId": "ExpenseApproval",
        "parameters": [
          {
            "name": "UserID",
            "in": "query",
            "description": "The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SendNotifications",
            "in": "query",
            "description": "Send email alerts to expense approvers. Defaults to true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "description": "A collection of ExpenseID's that should be submitted for approval. If not provided, submits all verified expenses for approval.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      }
    },
    "/api/Expense": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Gets list of Expenses",
        "operationId": "Expense_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ExpenseDateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ExpenseDateTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserEmail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CategoryName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CustomerID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProjectID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isChargeable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isInvoiced",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ExpenseReimbursementIDFK",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ExpensePaymentMethodIDFK",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ExpenseApprovalStatusCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Expense"
        ],
        "summary": "Update an Expense",
        "description": "Update an Expense",
        "operationId": "Expense_Put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpense"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpense"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpense"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpense"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Expense"
        ],
        "summary": "Create an Expense",
        "description": "Create an Expense",
        "operationId": "Expense_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExpense"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExpense"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewExpense"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewExpense"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewExpense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Expense"
        ],
        "summary": "Delete a Timesheet Entry",
        "operationId": "Expense_Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "description": "A collection of ExpenseIDs to delete",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDeleteResultSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDeleteResultSet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDeleteResultSet"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDeleteResultSet"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      }
    },
    "/api/Expense/{id}": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Gets an Expense Entry by Expense ID",
        "operationId": "Expense_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Expense ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpenseCategory": {
      "get": {
        "tags": [
          "ExpenseCategory"
        ],
        "summary": "Gets list of Expense Categories",
        "description": "The default sort order is by Name asc",
        "operationId": "ExpenseCategory_Get",
        "parameters": [
          {
            "name": "isEnabled",
            "in": "query",
            "description": "Optional filter on for enabled/disabled categories. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategoryList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategoryList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategoryList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategoryList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpenseGroup/Lookup": {
      "get": {
        "tags": [
          "ExpenseGroup"
        ],
        "summary": "Gets minimal list of Expense Groups.",
        "description": "Expense Groups are for adhoc grouping of reported expenses. e.g. for expenses incurred on a Trip",
        "operationId": "ExpenseGroupLookup",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string to match against Expense Group Name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseGroupDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseGroupDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseGroupDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseGroupDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpenseMerchant/Lookup": {
      "get": {
        "tags": [
          "ExpenseMerchant"
        ],
        "summary": "Gets minimal list of Expense Merchants.",
        "operationId": "ExpenseMerchangeLookup",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string to match against Expense Group Name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseMerchantDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseMerchantDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseMerchantDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseMerchantDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpensePaymentMethod/Lookup": {
      "get": {
        "tags": [
          "ExpensePaymentMethod"
        ],
        "summary": "Gets minimal list of Expense Payment Methods.",
        "operationId": "ExpensePaymentMethodLookup",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePaymentMethodDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePaymentMethodDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePaymentMethodDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpensePaymentMethodDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/ExpenseSummary": {
      "get": {
        "tags": [
          "ExpenseSummary"
        ],
        "summary": "Gets Basic Summary of Expense Statistics",
        "operationId": "ExpenseSummary_Get",
        "parameters": [
          {
            "name": "model.groupBy",
            "in": "query",
            "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Category\", \"ChargeableStatus\", \"Merchant\", \"ApprovalStatus\", \"ReimbursementStatus\", \"Customer\", \"Project\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "model.expenseDateFrom",
            "in": "query",
            "description": "(Required) Filter for expenses with expense dates greater or equal to the specified date. e.g. 2019-01-25.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "model.expenseDateTo",
            "in": "query",
            "description": "(Required) Filter for expenses with an expense date smaller or equal to the specified  date. e.g. 2019-01-25.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "model.userID",
            "in": "query",
            "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose expenses should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "model.projectID",
            "in": "query",
            "description": "(Optional) Filter by Project",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseSummaryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseSummaryResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseSummaryResult"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseSummaryResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/FixedAmount": {
      "get": {
        "tags": [
          "FixedAmount"
        ],
        "summary": "Gets list of Fixed Amounts",
        "operationId": "FixedAmount_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EntryDateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EntryDateTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ProjectID",
            "in": "query",
            "description": "(Optional) The ProjectID of a Project to filter Fixed Amounts for",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TaskID",
            "in": "query",
            "description": "(Optional) The TaskID of a Task to filter Fixed Amounts for",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isInvoiced",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\",\"EntryDate\", \"EntryDate desc\", \"StartTimeLocal\",\"StartTimeLocal desc\", \"TimeSheetEntryID\", \"TimeSheetEntryID desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedAmountList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedAmountList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FixedAmountList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FixedAmountList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Gets list of Inventory",
        "description": "",
        "operationId": "Inventory_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Inventory/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Gets InventoryItem by InventoryItem ID",
        "operationId": "Inventory_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "InventoryItem ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets list of Invoices",
        "description": "TransactionStatusCode values are: \"Draft\", \"Sent\", \"Late\", \"Paid\", \"Partial\", \"Void\"",
        "operationId": "Invoice_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Create a new draft invoice",
        "operationId": "Invoice_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_financials"
            ]
          }
        ]
      }
    },
    "/api/Invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets Invoice by Invoice ID",
        "operationId": "Invoice_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Transaction ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets list of Payments",
        "operationId": "Payment_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create new Payment and optionally assign payment allocations to Invoices",
        "operationId": "Payment_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_financials"
            ]
          }
        ]
      }
    },
    "/api/Payment/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets Payment by Payment Transaction ID",
        "operationId": "Payment_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Transaction ID Number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Project/Lookup": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Gets minimal list of active Projects for the current user",
        "operationId": "ProjectLookup",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TimesheetUserID",
            "in": "query",
            "description": "Optionally Filter to the projects that the supplied UserID can add timesheets to",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "description": "Optionally Filter for a specific Company ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string to match against Project title and Customer name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/Project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Gets list of Projects",
        "operationId": "Project_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Only show project records updated after a certain date (UTC)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "A column to sort on. Current possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TimesheetUserID",
            "in": "query",
            "description": "Filter to the projects that the supplied UserID can add timesheets to",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Include Archived Projects in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update an Project",
        "description": "Update a Project",
        "operationId": "Project_Put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a Project",
        "operationId": "Project_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Gets Project by Project ID",
        "operationId": "Project_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/ProjectMember": {
      "post": {
        "tags": [
          "ProjectMember"
        ],
        "summary": "Assign a user as a Member of a Project",
        "description": "the Amount columns for Cost, Budget, Rates should be specified as a decimal. Financial amounts assume the currency of the Customer company. Budget units depend on the Budget method set on the Project.",
        "operationId": "ProjectMember_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectMember"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectMember"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectMember"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectMember"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/ProjectTimesheetCategory": {
      "get": {
        "tags": [
          "ProjectTimesheetCategory"
        ],
        "summary": "Gets list of Project Timesheet Categories",
        "description": "The default sort order is by isBillable desc, Name asc",
        "operationId": "ProjectTimesheetCategory_Get",
        "parameters": [
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Get categories filtered by ProjectID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectTimesheetCategory"
        ],
        "summary": "Assign a TimeSheetCategory to a Project.",
        "description": "",
        "operationId": "ProjectTimesheetCategory_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectTimesheetCategory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectTimesheetCategory"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectTimesheetCategory"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectTimesheetCategory"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectTimesheetCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTimesheetCategoryDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/ScheduleAssignment": {
      "get": {
        "tags": [
          "ScheduleAssignment"
        ],
        "summary": "Gets list of Schedule Assignments.",
        "description": "Schedule assignments are per-day, and link to a parent Schedule Series.",
        "operationId": "ScheduleAssignment_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Limit results to records updated after the specified date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleDateFrom",
            "in": "query",
            "description": "Filter for schedule assignement  that are  on or after a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleDateTo",
            "in": "query",
            "description": "Filter for schedules that are on or before a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleSeriesID",
            "in": "query",
            "description": "Filter to records for a particular Schedule Series",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserEmail",
            "in": "query",
            "description": "The email of the user who has been scheduled",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleAssignmentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleAssignmentList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleAssignmentList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleAssignmentList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_schedule"
            ]
          }
        ]
      }
    },
    "/ScheduleSeries/AddBooking": {
      "post": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Create new Schedule Booking",
        "operationId": "ScheduleSeries_AddBooking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_schedule"
            ]
          }
        ]
      }
    },
    "/ScheduleSeries/AddLeave": {
      "post": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Create new Leave Booking",
        "operationId": "ScheduleSeries_AddLeave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeave"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeave"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeave"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeave"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeave"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_schedule"
            ]
          }
        ]
      }
    },
    "/ScheduleSeries/EditLeave": {
      "put": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Edit Leave Booking",
        "operationId": "ScheduleSeries_EditLeave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditLeave"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditLeave"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditLeave"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditLeave"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EditLeave"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_schedule"
            ]
          }
        ]
      }
    },
    "/ScheduleSeries/EditBooking": {
      "put": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Edit Booking",
        "operationId": "ScheduleSeries_EditBooking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditBooking"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditBooking"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditBooking"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditBooking"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EditBooking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_schedule"
            ]
          }
        ]
      }
    },
    "/api/ScheduleSeries": {
      "get": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Gets list of Schedule Series",
        "description": "Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.",
        "operationId": "ScheduleSeries_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Limit results to records updated after the specified date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleStartDateFrom",
            "in": "query",
            "description": "Filter for schedules that start on or after a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleStartDateTo",
            "in": "query",
            "description": "Filter for schedules that start on or before a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleEndDateFrom",
            "in": "query",
            "description": "Filter for schedules that end on or after a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduleEndDateTo",
            "in": "query",
            "description": "Filter for schedules that end on or before a specific date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserEmail",
            "in": "query",
            "description": "The email of the user who has been scheduled",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TimeSheetCategoryID",
            "in": "query",
            "description": "Filter for schedule records linked to a specific timesheeet category",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TimeSheetCategoryName",
            "in": "query",
            "description": "Filter for schedule records with a specific timesheeet category name (exact string match)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LeaveTypeID",
            "in": "query",
            "description": "Filter to records of a particular leave type",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Filter to only include books linked to a specific project",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CompanyID",
            "in": "query",
            "description": "Filter to only include records linked to projects, where that project belongs to a specific customer company",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSeriesList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_schedule"
            ]
          }
        ]
      }
    },
    "/api/Section": {
      "get": {
        "tags": [
          "Section"
        ],
        "summary": "Gets list of Sections",
        "operationId": "Section_Get",
        "parameters": [
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Get sections for Project with ProjectID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SectionList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SectionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Section"
        ],
        "summary": "Create a Section",
        "operationId": "Section_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSection"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewSection"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewSection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewSection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Section"
        ],
        "summary": "Delete a Section",
        "operationId": "Section_Delete",
        "parameters": [
          {
            "name": "SectionID",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Task/Lookup": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets minimal list of Tasks for the current user",
        "description": "Groups Tasks by Section. Default sort is by Section Title followed by Task Title",
        "operationId": "TaskLookup",
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "(required) The ProjectID to use when filtering Tasks",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hideCompleted",
            "in": "query",
            "description": "(optional) true/false to hide completed tasks. Defaults false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "(optional) Search string to match against Task title. Performs begins-with match",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDropdownList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDropdownList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDropdownList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDropdownList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/Task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets list of Tasks",
        "operationId": "Task_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Optional filter to records updated after a specific date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page. Defaults to 20.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1. Defaults to 1",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\", \"SectionTitle\", \"Title\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isComplete",
            "in": "query",
            "description": "Optional filter to only display tasks linked to a Task Status where isComplete=false, or where isComplete=true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Optional filter to only display tasks belonging to a specific ProjectID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update a Task.",
        "description": "Requires TaskID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.",
        "operationId": "Task_Put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a Task",
        "operationId": "Task_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete a Task",
        "operationId": "Task_Delete",
        "parameters": [
          {
            "name": "TaskID",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets Task by Task ID",
        "operationId": "Task_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/TaskStatus": {
      "get": {
        "tags": [
          "TaskStatus"
        ],
        "summary": "Gets list of Task Statuses",
        "operationId": "TaskStatus_Get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/TaskType": {
      "get": {
        "tags": [
          "TaskType"
        ],
        "summary": "Gets list of Task Types",
        "operationId": "TaskType_Get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTypeList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTypeList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTypeList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTypeList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/Tax": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Get List of Taxes configured in the Avaza account.",
        "operationId": "Tax_Get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaxList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaxList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Timesheet": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Gets list of Timsheets",
        "operationId": "Timesheet_Get",
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EntryDateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EntryDateTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserEmail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CategoryName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ProjectID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isBillable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isInvoiced",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTimerRunning",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInvoiceDetails",
            "in": "query",
            "description": "Defaults to false. When true, the InvoiceIDFK value will be included in the response.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\",\"EntryDate\", \"EntryDate desc\", \"StartTimeLocal\",\"StartTimeLocal desc\", \"TimeSheetEntryID\", \"TimeSheetEntryID desc\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Update a Timesheet",
        "description": "The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude \"ProjectIDFK\", \"TimeSheetCategoryIDFK\", \"TaskIDFK\", \"Duration\", \"EntryDate\", \"Notes\", \"hasStartEndTime\", \"CustomMetadata\". If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).",
        "operationId": "Timesheet_Put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetModel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Create a new Timesheet Entry",
        "operationId": "Timesheet_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTimesheet"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTimesheet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewTimesheet"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewTimesheet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewTimesheet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/Timesheet/{id}": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Gets a Timesheet Entry by Timesheet ID",
        "operationId": "Timesheet_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Delete a Timesheet Entry",
        "operationId": "Timesheet_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the timesheet entry to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetSubmission": {
      "post": {
        "tags": [
          "TimesheetSubmission"
        ],
        "summary": "Submit Timesheets for Approval.",
        "description": "Either provide a a specific Day (WholeDayOf) or any day in a Week (WholeWeekOf) to submit all draft timesheets in that day or week",
        "operationId": "TimesheetSubmission_Post",
        "parameters": [
          {
            "name": "SendNotifications",
            "in": "query",
            "description": "Send email alerts to timesheet approvers. Defaults to true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "WholeWeekOf",
            "in": "query",
            "description": "A date (yyyy-MM-dd) that falls within  a Week to have all timesheets in that week submitted. Respects the First Day of Week setting in your account Timesheet Settings to determine the week range.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "WholeDayOf",
            "in": "query",
            "description": "A date (yyyy-MM-dd) to submit all timesheets on this day",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The user to submit timesheets for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetSummary": {
      "get": {
        "tags": [
          "TimesheetSummary"
        ],
        "summary": "Gets Basic Summary of Timesheet Statistics",
        "operationId": "TimesheetSummary_Get",
        "parameters": [
          {
            "name": "model.groupBy",
            "in": "query",
            "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Customer\", \"Project\", \"Category\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "model.entryDateFrom",
            "in": "query",
            "description": "(Required) Filter for timesheets greater or equal to the specified date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "model.entryDateTo",
            "in": "query",
            "description": "(Required) Filter for timesheets with an entry date smaller or equal to the specified  date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "model.userID",
            "in": "query",
            "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose timesheets should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "model.projectID",
            "in": "query",
            "description": "(Optional) Filter by Project",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "model.isBillable",
            "in": "query",
            "description": "(Optional) Filter by the billable status of Timesheets.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "model.isInvoiced",
            "in": "query",
            "description": "(Optional) Filter for timesheets by whether they have been Invoiced or not.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetSummaryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetSummaryResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetSummaryResult"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetSummaryResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetTimer": {
      "get": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Gets the  Running Timer if there is one for a user.",
        "operationId": "TimesheetTimer_GetRunningTimer",
        "parameters": [
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetTimer/{id}": {
      "post": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Starts a Timer running on an existing Timesheet Entry",
        "operationId": "TimesheetTimer_StartTimer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of timesheet entry that should be used as the basis for running a timer. If the existing timesheet is not on the current day, or you have start/end times enabled, then a new timesheet will be created for the timer.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Stop the timer running on an existing Timesheet Entry",
        "operationId": "TimesheetTimer_StopTimer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the existing timesheet entry that needs its timer stopped",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/UserProfile": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Get Collection of Users who have roles in the current Avaza account.",
        "description": "Admin and Invoice Managers can see all. Other users are limited to seeing their own profile.",
        "operationId": "UserProfile_Get",
        "parameters": [
          {
            "name": "Roles",
            "in": "query",
            "description": "Optional list of comma separated role codes to filter users by (e.g. \"TimesheetUser,Admin\")",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentUserOnly",
            "in": "query",
            "description": "Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "description": "Optionally filter by Company ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_users"
            ]
          }
        ]
      }
    },
    "/api/Webhook": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get list of Webhook Subscriptions",
        "operationId": "Webhook_Get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Subscribe to Webhook. On success, returns ID of webhook subscription.",
        "description": "When you receive a webhook, you should respond with Http 200 OK Status Code, otherwise we will retry. To create a webhook, you need both the webhook_notifications scope, as well as the scope for the required entity being monitored.  Event values are: \"company_created\", \"company_deleted\", \"company_updated\", \"contact_created\", \"contact_deleted\", \"contact_updated\", \"invoice_created\", \"invoice_sent\",\"invoice_updated\",\"invoice_deleted\", \"project_created\", \"project_deleted\", \"project_updated\", \"task_created\", \"task_updated\",\"task_deleted\", \"timesheet_created\", \"timesheet_deleted\", \"timesheet_updated\".  You can subscribe to any webhook, but you will only receive notifications for data appropriate to the roles of your user account. There is an optional  Secret parameter (string 255 char max). This allows for webhook authentication. If provided, the Secret will be BASE 64 encoded and passed with notications as a basic authentication http header. i.e. Authorization Basic [BASE64 of Secret]\"",
        "operationId": "Webhook_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscription created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribeResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribeResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribeResult"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribeResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Duplicate subscription already exists"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications",
              "read_contacts",
              "read_account",
              "read_users",
              "read_financials",
              "read_projects",
              "read_schedule",
              "read_timesheets",
              "read_expenses",
              "write_contacts",
              "write_account",
              "write_users",
              "write_financials",
              "write_projects",
              "write_schedule",
              "write_timesheets",
              "write_expenses"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete webhook subscription by URL",
        "operationId": "Webhook_DeleteByUrl",
        "parameters": [
          {
            "name": "target_url",
            "in": "query",
            "description": "Target URL that should be used to delete subscriptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription Deleted OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      }
    },
    "/api/Webhook/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get Webhook Subscription by SubscriptionID",
        "operationId": "Webhook_GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete Webhook Subscription by ID",
        "operationId": "Webhook_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription id to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription deleted ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.avaza.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://any.avaza.com/oauth2/authorize",
            "scopes": {
              "read_contacts": "Read access to Customers, Contacts",
              "read_account": "Read access to Account metadata",
              "read_users": "Read access to User Profiles",
              "read_financials": "Read access to Estimates, Invoices, Payments, Credit Notes",
              "read_projects": "Read access to Projects, Project Settings, Tasks",
              "read_schedule": "Read access to Schedule Details",
              "read_timesheets": "Read access to Timesheet Details",
              "read_expenses": "Read access to Expense Details",
              "write_contacts": "Write access to Customers, Contacts",
              "write_account": "Write access to Account metadata",
              "write_users": "Write access to User Profiles",
              "write_financials": "Write access to Estimates, Invoices, Payments, Credit Notes",
              "write_projects": "Write access to Projects, Project Settings, Tasks",
              "write_schedule": "Write access to Schedule module",
              "write_timesheets": "Write access to Timesheets module",
              "write_expenses": "Write access to Expense module",
              "webhook_notifications": "Read access to webhook notification events"
            }
          }
        }
      }
    },
    "schemas": {
      "AccountDetails": {
        "type": "object",
        "properties": {
          "AccountID": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "Subdomain": {
            "type": "string"
          },
          "AccountEmail": {
            "type": "string"
          },
          "hasStartEndTimesheets": {
            "type": "boolean"
          },
          "has24HourTimesheetFormat": {
            "type": "boolean"
          },
          "WeeklyTimesheetReminder": {
            "type": "boolean"
          },
          "LockApprovedTimesheets": {
            "type": "boolean"
          },
          "TimesheetDayOfWeek": {
            "format": "int32",
            "type": "integer"
          },
          "TimesheetDisplayFormatCode": {
            "type": "string"
          },
          "AllowHidingCompletedTasksOnTimesheet": {
            "type": "boolean"
          },
          "CurrentServerTimeISO": {
            "description": "Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"",
            "type": "string"
          },
          "SC": {
            "type": "string"
          },
          "DefaultCurrencyCode": {
            "description": "ISO 3 letter base Currency Code for the account",
            "type": "string"
          },
          "ExpenseApprovalRequired": {
            "description": "Whether the account requires expenses be approved.",
            "type": "boolean"
          },
          "LockApprovedExpenses": {
            "description": "Approved expenses get locked from subsequent editing by standard expense users.",
            "type": "boolean"
          },
          "BrandPrimaryColor": {
            "description": "A custom branding color for the account. Available on paid accounts.",
            "type": "string"
          },
          "BrandPrimaryColorLuminance": {
            "description": "A determination of the luminance of the Brand Primary Color (possible values: 'Dark', 'Medium', 'Light'). This can be used to determine appropriate font colors to sit on top of the brand color.",
            "type": "string"
          }
        }
      },
      "CompanyDropdownList": {
        "type": "object",
        "properties": {
          "Companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyMinimal"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CompanyMinimal": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "format": "int64",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          }
        }
      },
      "CompanyList": {
        "type": "object",
        "properties": {
          "Companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "BillingAddressLine": {
            "type": "string"
          },
          "BillingAddressCity": {
            "type": "string"
          },
          "BillingAddressState": {
            "type": "string"
          },
          "BillingAddressPostCode": {
            "type": "string"
          },
          "BillingCountryCode": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "TaxNumber": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "DefaultTradingTermIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "Contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyContact"
            }
          }
        }
      },
      "CompanyContact": {
        "type": "object",
        "properties": {
          "ContactID": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Mobile": {
            "type": "string"
          },
          "PositionTitle": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "NewCompany": {
        "required": [
          "CompanyName"
        ],
        "type": "object",
        "properties": {
          "CompanyName": {
            "type": "string"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "BillingAddressLine": {
            "type": "string"
          },
          "BillingAddressCity": {
            "type": "string"
          },
          "BillingAddressState": {
            "type": "string"
          },
          "BillingAddressPostCode": {
            "type": "string"
          },
          "BillingCountryCode": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "TaxNumber": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          }
        }
      },
      "UpdateCompany": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "format": "int32",
            "type": "integer"
          },
          "FieldsToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CompanyName": {
            "type": "string"
          },
          "BillingAddressLine": {
            "type": "string"
          },
          "BillingAddressCity": {
            "type": "string"
          },
          "BillingAddressState": {
            "type": "string"
          },
          "BillingAddressPostCode": {
            "type": "string"
          },
          "BillingCountryCode": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "TaxNumber": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          }
        }
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "Contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyContact"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "NewCompanyContact": {
        "required": [
          "ContactEmail",
          "Firstname",
          "Lastname"
        ],
        "type": "object",
        "properties": {
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "CompanyBillingAddress": {
            "type": "string"
          },
          "CompanyBillingAddressLine": {
            "type": "string"
          },
          "CompanyBillingAddressCity": {
            "type": "string"
          },
          "CompanyBillingAddressState": {
            "type": "string"
          },
          "CompanyBillingAddressPostCode": {
            "type": "string"
          },
          "CompanyBillingAddressCountryCode": {
            "type": "string"
          },
          "ContactEmail": {
            "type": "string"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "PositionTitle": {
            "type": "string"
          },
          "Mobile": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "UpdateExisting": {
            "type": "boolean"
          }
        }
      },
      "CreditNoteList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "CreditNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditNote"
            }
          }
        }
      },
      "CreditNote": {
        "type": "object",
        "properties": {
          "TransactionID": {
            "format": "int64",
            "type": "integer"
          },
          "TransactionPrefix": {
            "type": "string"
          },
          "CreditNoteNumber": {
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DateIssued": {
            "format": "date-time",
            "type": "string"
          },
          "TransactionStatusCode": {
            "type": "string"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "Notes": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "CreditNoteAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditNoteAllocation"
            }
          },
          "CreditNoteLineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditNoteLineItem"
            }
          }
        }
      },
      "CreditNoteAllocation": {
        "type": "object",
        "properties": {
          "TransactionAllocationID": {
            "format": "int64",
            "type": "integer"
          },
          "InvoiceTransactionIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "CreditNoteTransactionIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "AllocationDate": {
            "format": "date-time",
            "type": "string"
          },
          "AllocationAmount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "CreditNoteLineItem": {
        "type": "object",
        "properties": {
          "TransactionLineItemID": {
            "format": "int64",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          },
          "UnitPrice": {
            "format": "double",
            "type": "number"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "CurrencyList": {
        "type": "object",
        "properties": {
          "Currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        }
      },
      "Currency": {
        "type": "object",
        "properties": {
          "CurrencyCode": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Symbol": {
            "type": "string"
          },
          "Symbol2": {
            "type": "string"
          },
          "DecimalPlaces": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "EstimateList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "Estimates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateDetails"
            }
          }
        }
      },
      "EstimateDetails": {
        "type": "object",
        "properties": {
          "EstimateID": {
            "format": "int64",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "EstimatePrefix": {
            "type": "string"
          },
          "EstimateItemNumber": {
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "DateIssued": {
            "format": "date-time",
            "type": "string"
          },
          "DateSent": {
            "format": "date-time",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "type": "string"
          },
          "EstimateStatusCode": {
            "type": "string"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "EstimateTaxConfigCode": {
            "type": "string"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "ExchangeRate": {
            "format": "double",
            "type": "number"
          },
          "Notes": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateLineItemDetails"
            }
          },
          "Links": {
            "$ref": "#/components/schemas/EstimateLinks"
          },
          "Issuer": {
            "$ref": "#/components/schemas/IssuerDetails"
          },
          "Recipient": {
            "$ref": "#/components/schemas/RecipientDetails"
          }
        }
      },
      "EstimateLineItemDetails": {
        "type": "object",
        "properties": {
          "EstimateLineItemID": {
            "format": "int64",
            "type": "integer"
          },
          "InventoryItemIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "InventoryItemName": {
            "type": "string"
          },
          "InventoryItemSKU": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          },
          "UnitPrice": {
            "format": "double",
            "type": "number"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaxCode": {
            "type": "string"
          },
          "TaxName": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "EstimateLinks": {
        "type": "object",
        "properties": {
          "ClientView": {
            "type": "string"
          },
          "View": {
            "type": "string"
          },
          "Edit": {
            "type": "string"
          }
        }
      },
      "IssuerDetails": {
        "type": "object",
        "properties": {
          "BillingAddress": {
            "type": "string"
          },
          "BillingAddressLine": {
            "type": "string"
          },
          "BillingAddressCity": {
            "type": "string"
          },
          "BillingAddressState": {
            "type": "string"
          },
          "BillingAddressPostCode": {
            "type": "string"
          },
          "BillingCountryCode": {
            "type": "string"
          },
          "TaxNumber": {
            "type": "string"
          }
        }
      },
      "RecipientDetails": {
        "type": "object",
        "properties": {
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "RecipientFormattedBillingAddress": {
            "type": "string"
          },
          "RecipientBillingAddressLine": {
            "type": "string"
          },
          "RecipientBillingAddressCity": {
            "type": "string"
          },
          "RecipientBillingAddressState": {
            "type": "string"
          },
          "RecipientBillingAddressPostCode": {
            "type": "string"
          },
          "RecipientBillingAddressCountryCode": {
            "type": "string"
          }
        }
      },
      "NewEstimate": {
        "description": "New Estimate to be created",
        "type": "object",
        "properties": {
          "EstimatePrefix": {
            "description": "A prefix for the Estimate number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.",
            "type": "string"
          },
          "EstimateNumber": {
            "description": "Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next Estimate number in the sequence.",
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "description": "If left blank then you must specify Company Name.",
            "type": "integer"
          },
          "CompanyName": {
            "description": "If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the Estimate creation will be rejected.",
            "type": "string"
          },
          "Firstname": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "Lastname": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "Email": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "CurrencyCode": {
            "description": "Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the Estimate will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.",
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "description": "Exchange rate is only valid for Estimates in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.",
            "type": "number"
          },
          "InvoiceTemplateIDFK": {
            "format": "int32",
            "description": "If left blank the account default Estimate template will be used.",
            "type": "integer"
          },
          "Subject": {
            "description": "Plain UTF8 text. (no HTML). 255 characters max",
            "type": "string"
          },
          "CustomerPONumber": {
            "description": "Plain UTF8 text. 100 characters max",
            "type": "string"
          },
          "DateIssued": {
            "format": "date-time",
            "description": "If not specified it will use today's date. The date should be specified as local date.",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "description": "It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)",
            "type": "string"
          },
          "EstimateTaxConfigCode": {
            "description": "Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.",
            "type": "string"
          },
          "Notes": {
            "description": "Plain UTF8 text. (no HTML). Max 2000 characters",
            "type": "string"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewEstimateLineItem"
            }
          }
        }
      },
      "NewEstimateLineItem": {
        "description": "Line item to be added to new Estimate",
        "required": [
          "Quantity",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "InventoryItemIDFK": {
            "format": "int32",
            "description": "If not specified then Inventory Item Name must be specified.",
            "type": "integer"
          },
          "InventoryItemName": {
            "description": "If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Plain UTF8 text. (no HTML)",
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "description": "The quantity for the line item",
            "type": "number"
          },
          "UnitPrice": {
            "format": "double",
            "description": "The unit price for the lineitem.",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "description": "If specified then it must match an existing Tax ID. If not specified then Tax Name and Tax Percent must be specified.",
            "type": "integer"
          },
          "TaxName": {
            "description": "Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.",
            "type": "string"
          },
          "TaxPercent": {
            "format": "double",
            "description": "The Tax Percent will only be used if a new tax is being created.",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "description": "Enter 10.5 to give a 10.5% discount",
            "type": "number"
          }
        }
      },
      "ExpenseAttachmentUploadResult": {
        "type": "object",
        "properties": {
          "FileAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileAttachmentDetails"
            }
          }
        }
      },
      "FileAttachmentDetails": {
        "type": "object",
        "properties": {
          "FileAttachmentID": {
            "format": "int64",
            "type": "integer"
          },
          "SizeBytes": {
            "format": "int64",
            "type": "integer"
          },
          "OriginalFilename": {
            "type": "string"
          },
          "PublicFileURL": {
            "type": "string"
          },
          "PreviewBaseURL": {
            "type": "string"
          }
        }
      },
      "ExpenseList": {
        "type": "object",
        "properties": {
          "Expenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExpenseDetails": {
        "type": "object",
        "properties": {
          "ExpenseID": {
            "format": "int64",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTitle": {
            "type": "string"
          },
          "ExpenseCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ExpenseCategoryName": {
            "type": "string"
          },
          "ExpenseCategoryHasUnitPrice": {
            "type": "boolean"
          },
          "ExpenseCategoryUnitPrice": {
            "format": "double",
            "type": "number"
          },
          "ExpenseCategoryUnitName": {
            "type": "string"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "type": "number"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaxName": {
            "type": "string"
          },
          "TransactionTaxConfigCode": {
            "type": "string"
          },
          "TransactionTaxConfigName": {
            "type": "string"
          },
          "isOfficialExchangeRate": {
            "type": "boolean"
          },
          "ExpenseApprovalStatusCode": {
            "type": "string"
          },
          "ExpensePaymentMethodIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ExpensePaymentMethodName": {
            "type": "string"
          },
          "isChargeable": {
            "type": "boolean"
          },
          "ChargeableStatusCode": {
            "type": "string"
          },
          "isReimbursable": {
            "type": "boolean"
          },
          "ExpenseReimbursementStatusCode": {
            "type": "string"
          },
          "ExpenseReimbursementIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "ExpenseDate": {
            "format": "date-time",
            "type": "string"
          },
          "FileAttachmentIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "AttachmentURL": {
            "type": "string"
          },
          "AttachmentPreviewURL": {
            "type": "string"
          },
          "Merchant": {
            "type": "string"
          },
          "MerchantTaxNumber": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "ExpenseReportIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "ExpenseReportName": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "NewExpense": {
        "type": "object",
        "properties": {
          "ExpenseDate": {
            "format": "date-time",
            "description": "The date of the expense entry (Required)",
            "type": "string"
          },
          "UserIDFK": {
            "format": "int32",
            "description": "UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided",
            "type": "integer"
          },
          "UserEmail": {
            "description": "The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.",
            "type": "string"
          },
          "ExpenseCategoryIDFK": {
            "format": "int32",
            "description": "The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided",
            "type": "integer"
          },
          "ExpenseCategoryName": {
            "description": "Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.",
            "type": "string"
          },
          "isChargeable": {
            "description": "aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.",
            "type": "boolean"
          },
          "isReimbursable": {
            "description": "Defaults to false if not provided.",
            "type": "boolean"
          },
          "Quantity": {
            "format": "double",
            "description": "Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage",
            "type": "number"
          },
          "CustomerIDFK": {
            "format": "int32",
            "description": "The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.",
            "type": "integer"
          },
          "CustomerName": {
            "description": "The name of an existing customer in Avaza. Must be an exact (case insensitive) match.",
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "description": "The Avaza project ID to associate the Expense with.",
            "type": "integer"
          },
          "ProjectName": {
            "description": "Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.",
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "description": "(optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.",
            "type": "integer"
          },
          "CurrencyCode": {
            "description": "A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.",
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "description": "Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)",
            "type": "number"
          },
          "Amount": {
            "format": "double",
            "description": "Expense Amount (Required). Must be &gt;= 0",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "description": "Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.",
            "type": "integer"
          },
          "TaxName": {
            "description": "Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.",
            "type": "string"
          },
          "TransactionTaxConfigCode": {
            "description": "Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.",
            "type": "string"
          },
          "GroupTripName": {
            "description": "Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.",
            "type": "string"
          },
          "ExpensePaymentMethodIDFK": {
            "format": "int32",
            "description": "(Optional) ID of Expense Payment Method.",
            "type": "integer"
          },
          "Merchant": {
            "description": "The name of the merchant.",
            "type": "string"
          },
          "MerchantTaxNumber": {
            "description": "A Tax number identifier for the merchant.",
            "type": "string"
          },
          "Notes": {
            "description": "Expense Notes",
            "type": "string"
          },
          "VerifyAndSave": {
            "description": "Pass false if creating a draft expense. True otherwise.",
            "type": "boolean"
          },
          "FileAttachmentIDs": {
            "description": "Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ExpenseDeleteResultSet": {
        "type": "object",
        "properties": {
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseDeleteResult"
            }
          }
        }
      },
      "ExpenseDeleteResult": {
        "type": "object",
        "properties": {
          "ExpenseID": {
            "format": "int64",
            "type": "integer"
          },
          "Success": {
            "type": "boolean"
          },
          "ErrorMessage": {
            "type": "string"
          }
        }
      },
      "UpdateExpense": {
        "required": [
          "ExpenseID",
          "FieldsToUpdate"
        ],
        "type": "object",
        "properties": {
          "ExpenseID": {
            "format": "int64",
            "type": "integer"
          },
          "FieldsToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ExpenseDate": {
            "format": "date-time",
            "description": "The date of the expense entry",
            "type": "string"
          },
          "ExpenseCategoryIDFK": {
            "format": "int32",
            "description": "The expense category to link the Expense to.",
            "type": "integer"
          },
          "isChargeable": {
            "description": "aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.",
            "type": "boolean"
          },
          "isReimbursable": {
            "description": "Defaults to false if not provided.",
            "type": "boolean"
          },
          "Quantity": {
            "format": "double",
            "description": "Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage",
            "type": "number"
          },
          "CustomerIDFK": {
            "format": "int32",
            "description": "The Avaza Customer ID to associate the Expense with.",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "description": "The Avaza project ID to associate the Expense with.",
            "type": "integer"
          },
          "TaskIDFK": {
            "format": "int32",
            "description": "(optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.",
            "type": "integer"
          },
          "CurrencyCode": {
            "description": "A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.",
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "description": "Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)",
            "type": "number"
          },
          "Amount": {
            "format": "double",
            "description": "Expense Amount (Required). Must be &gt;= 0",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "description": "Avaza Tax ID the expense belongs to.",
            "type": "integer"
          },
          "TransactionTaxConfigCode": {
            "description": "Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.",
            "type": "string"
          },
          "GroupTripName": {
            "description": "Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.",
            "type": "string"
          },
          "ExpensePaymentMethodIDFK": {
            "format": "int32",
            "description": "(Optional) ID of Expense Payment Method.",
            "type": "integer"
          },
          "Merchant": {
            "description": "The name of the merchant.",
            "type": "string"
          },
          "MerchantTaxNumber": {
            "description": "A Tax number identifier for the merchant.",
            "type": "string"
          },
          "Notes": {
            "description": "Expense Notes",
            "type": "string"
          },
          "VerifyAndSave": {
            "description": "Pass false if creating a draft expense. True otherwise.",
            "type": "boolean"
          },
          "FileAttachmentIDs": {
            "description": "Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ExpenseCategoryList": {
        "type": "object",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseCategoryDetails"
            }
          }
        }
      },
      "ExpenseCategoryDetails": {
        "type": "object",
        "properties": {
          "ExpenseCategoryID": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "hasUnitPrice": {
            "type": "boolean"
          },
          "UnitPrice": {
            "format": "double",
            "type": "number"
          },
          "UnitName": {
            "type": "string"
          }
        }
      },
      "ExpenseGroupDropdownList": {
        "type": "object",
        "properties": {
          "ExpenseGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseGroupMinimal"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExpenseGroupMinimal": {
        "type": "object",
        "properties": {
          "ExpenseGroupID": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ExpenseMerchantDropdownList": {
        "type": "object",
        "properties": {
          "ExpenseMerchants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseMerchantMinimal"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExpenseMerchantMinimal": {
        "type": "object",
        "properties": {
          "MerchantName": {
            "type": "string"
          }
        }
      },
      "ExpensePaymentMethodDropdownList": {
        "type": "object",
        "properties": {
          "ExpensePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpensePaymentMethodMinimal"
            }
          }
        }
      },
      "ExpensePaymentMethodMinimal": {
        "type": "object",
        "properties": {
          "ExpensePaymentMethodID": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ExpenseSummaryRequest": {
        "type": "object",
        "properties": {
          "GroupBy": {
            "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Category\", \"ChargeableStatus\", \"Merchant\", \"ApprovalStatus\", \"ReimbursementStatus\", \"Customer\", \"Project\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ExpenseDateFrom": {
            "format": "date-time",
            "description": "(Required) Filter for expenses with expense dates greater or equal to the specified date. e.g. 2019-01-25.",
            "type": "string"
          },
          "ExpenseDateTo": {
            "format": "date-time",
            "description": "(Required) Filter for expenses with an expense date smaller or equal to the specified  date. e.g. 2019-01-25.",
            "type": "string"
          },
          "UserID": {
            "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose expenses should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ProjectID": {
            "format": "int32",
            "description": "(Optional) Filter by Project",
            "type": "integer"
          }
        }
      },
      "ExpenseSummaryResult": {
        "type": "object",
        "properties": {
          "ExpenseDateFrom": {
            "format": "date-time",
            "type": "string"
          },
          "ExpenseDateTo": {
            "format": "date-time",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "UserID": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "GroupingLevels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "GroupData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseSummaryGroup"
            }
          }
        }
      },
      "ExpenseSummaryGroup": {
        "type": "object",
        "properties": {
          "GroupID": {
            "type": "string"
          },
          "GroupName": {
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "GroupData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseSummaryGroup"
            }
          }
        }
      },
      "FixedAmountList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "FixedAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixedAmountDetails"
            }
          }
        }
      },
      "FixedAmountDetails": {
        "type": "object",
        "properties": {
          "FixedAmountID": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTitle": {
            "type": "string"
          },
          "InventoryItemIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "InventoryItemName": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Notes": {
            "type": "string"
          },
          "isInvoiced": {
            "type": "boolean"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "UpdatedByUserIDFK": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "InventoryList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "Inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          }
        }
      },
      "InventoryItem": {
        "type": "object",
        "properties": {
          "InventoryItemID": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "SKU": {
            "type": "string"
          },
          "CostPrice": {
            "format": "double",
            "type": "number"
          },
          "SalePrice": {
            "format": "double",
            "type": "number"
          },
          "SaleTaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "isHidden": {
            "type": "boolean"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "InvoiceList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "Invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "TransactionID": {
            "format": "int64",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TransactionPrefix": {
            "type": "string"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "DateIssued": {
            "format": "date-time",
            "type": "string"
          },
          "DateSent": {
            "format": "date-time",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "type": "string"
          },
          "TransactionStatusCode": {
            "type": "string"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "TransactionTaxConfigCode": {
            "type": "string"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "ExchangeRate": {
            "format": "double",
            "type": "number"
          },
          "Notes": {
            "type": "string"
          },
          "CustomerPONumber": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            }
          },
          "Links": {
            "$ref": "#/components/schemas/InvoiceLinks"
          },
          "Issuer": {
            "$ref": "#/components/schemas/IssuerDetails"
          },
          "Recipient": {
            "$ref": "#/components/schemas/RecipientDetails"
          }
        }
      },
      "InvoiceLineItem": {
        "type": "object",
        "properties": {
          "TransactionLineItemID": {
            "format": "int64",
            "type": "integer"
          },
          "InventoryItemIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "InventoryItemName": {
            "type": "string"
          },
          "InventoryItemSKU": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          },
          "UnitPrice": {
            "format": "double",
            "type": "number"
          },
          "TaxAmount": {
            "format": "double",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaxCode": {
            "type": "string"
          },
          "TaxName": {
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "InvoiceLinks": {
        "type": "object",
        "properties": {
          "ClientView": {
            "type": "string"
          },
          "View": {
            "type": "string"
          },
          "Edit": {
            "type": "string"
          }
        }
      },
      "NewInvoice": {
        "description": "New invoice to be created",
        "type": "object",
        "properties": {
          "TransactionPrefix": {
            "description": "A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.",
            "type": "string"
          },
          "InvoiceNumber": {
            "description": "Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.",
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "description": "If left blank then you must specify Company Name.",
            "type": "integer"
          },
          "CompanyName": {
            "description": "If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.",
            "type": "string"
          },
          "Firstname": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "Lastname": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "Email": {
            "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
            "type": "string"
          },
          "CurrencyCode": {
            "description": "Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.",
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "description": "Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.",
            "type": "number"
          },
          "InvoiceTemplateIDFK": {
            "format": "int32",
            "description": "If left blank the account default invoice template will be used.",
            "type": "integer"
          },
          "Subject": {
            "description": "Plain UTF8 text. (no HTML). 255 characters max",
            "type": "string"
          },
          "CustomerPONumber": {
            "description": "Plain UTF8 text. 100 characters max",
            "type": "string"
          },
          "DateIssued": {
            "format": "date-time",
            "description": "If not specified it will use today's date. The date should be specified as local date.",
            "type": "string"
          },
          "PaymentTerms": {
            "format": "int32",
            "description": " \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:\r\n(-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)",
            "type": "integer"
          },
          "DueDate": {
            "format": "date-time",
            "description": "It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)",
            "type": "string"
          },
          "TransactionTaxConfigCode": {
            "description": "Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.",
            "type": "string"
          },
          "Notes": {
            "description": "Plain UTF8 text. (no HTML). Max 2000 characters",
            "type": "string"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewInvoiceLineItem"
            }
          }
        }
      },
      "NewInvoiceLineItem": {
        "description": "Line item to be added to new invoice",
        "required": [
          "Quantity",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "InventoryItemIDFK": {
            "format": "int32",
            "description": "If not specified then Inventory Item Name must be specified.",
            "type": "integer"
          },
          "InventoryItemName": {
            "description": "If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Plain UTF8 text. (no HTML)",
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "description": "The quantity for the line item",
            "type": "number"
          },
          "UnitPrice": {
            "format": "double",
            "description": "The unit price for the lineitem.",
            "type": "number"
          },
          "TaxIDFK": {
            "format": "int32",
            "description": "If specified then it must match an existing Tax ID. If not specified then Tax Name and Tax Percent must be specified.",
            "type": "integer"
          },
          "TaxName": {
            "description": "Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.",
            "type": "string"
          },
          "TaxPercent": {
            "format": "double",
            "description": "The Tax Percent will only be used if a new tax is being created.",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "description": "Enter 10.5 to give a 10.5% discount",
            "type": "number"
          },
          "ProjectIDFK": {
            "format": "int32",
            "description": "Optional. Project ID of an Avaza Project that belongs to this customer, so line item is attributed to that Project for reporting.",
            "type": "integer"
          }
        }
      },
      "PaymentList": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "TransactionID": {
            "format": "int64",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TransactionPrefix": {
            "type": "string"
          },
          "PaymentNumber": {
            "type": "string"
          },
          "TransactionReference": {
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DateIssued": {
            "format": "date-time",
            "type": "string"
          },
          "TransactionStatusCode": {
            "type": "string"
          },
          "PaymentProviderCode": {
            "type": "string"
          },
          "ExchangeRate": {
            "format": "double",
            "type": "number"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "CurrencyCode": {
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "type": "number"
          },
          "Notes": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "PaymentAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentAllocation"
            }
          }
        }
      },
      "PaymentAllocation": {
        "type": "object",
        "properties": {
          "TransactionAllocationID": {
            "format": "int64",
            "type": "integer"
          },
          "InvoiceTransactionIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "PaymentTransactionIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "AllocationDate": {
            "format": "date-time",
            "type": "string"
          },
          "AllocationAmount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "NewPayment": {
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "PaymentNumber": {
            "description": "Optional. If not specified will be automatically generated",
            "type": "string"
          },
          "DateIssued": {
            "format": "date-time",
            "description": "Date of Payment. If not specified, assumes today.",
            "type": "string"
          },
          "TransactionPrefix": {
            "description": "Optional to override the default prefix added to Payment Numbers",
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "description": "Only required if no invoice allocations specified.",
            "type": "integer"
          },
          "ExchangeRate": {
            "format": "double",
            "description": "Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.",
            "type": "number"
          },
          "TransactionReference": {
            "description": "Optional for storing the reference # of the payment method.",
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "PaymentProviderCode": {
            "description": "Optional for storing the payment provider who was the source of funds.",
            "type": "string"
          },
          "PaymentAllocations": {
            "description": "List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPaymentAllocation"
            }
          }
        }
      },
      "NewPaymentAllocation": {
        "type": "object",
        "properties": {
          "InvoiceTransactionIDFK": {
            "format": "int64",
            "description": "The Avaza Invoice TransactionID that is having a payment amount allocated to it.",
            "type": "integer"
          },
          "AllocationAmount": {
            "format": "double",
            "description": "The Amount being allocated to the invoice. Expects same currency as invoice currency",
            "type": "number"
          },
          "AllocationDate": {
            "format": "date-time",
            "description": "Optional. Defaults to the current time in the Avaza account's timezone. The date the allocation is applied to the invoice. Can be difference from the Payment Date when doing prepayments etc.",
            "type": "string"
          }
        }
      },
      "ProjectDropdownList": {
        "type": "object",
        "properties": {
          "companies": {
            "description": "List of Projects grouped by Customer Name",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCompanyGroup"
            }
          },
          "pageNumber": {
            "format": "int32",
            "description": "Current page number (1 based)",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "description": "Current page size",
            "type": "integer"
          },
          "hasMore": {
            "description": "More records probably exist",
            "type": "boolean"
          }
        }
      },
      "ProjectCompanyGroup": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "format": "int64",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectDropdownSelection"
            }
          }
        }
      },
      "ProjectDropdownSelection": {
        "type": "object",
        "properties": {
          "ProjectID": {
            "format": "int64",
            "type": "integer"
          },
          "ProjectCode": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        }
      },
      "ProjectList": {
        "type": "object",
        "properties": {
          "Projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectListDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ProjectListDetails": {
        "type": "object",
        "properties": {
          "ProjectID": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectCode": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          },
          "Notes": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectCategoryIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "ProjectCategoryName": {
            "type": "string"
          },
          "isTaskRequiredOnTimesheet": {
            "type": "boolean"
          },
          "DefaultAccountTaskTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultAccountTaskTypeName": {
            "type": "string"
          },
          "ProjectOwnerUserIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "NewProjectModel": {
        "required": [
          "ProjectTitle"
        ],
        "type": "object",
        "properties": {
          "CompanyIDFK": {
            "format": "int32",
            "description": "An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName",
            "type": "integer"
          },
          "CompanyName": {
            "description": "The name for a Company to create the project under. Will create company unless it matches an existing company name",
            "type": "string"
          },
          "CurrencyCode": {
            "description": "The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.",
            "type": "string"
          },
          "ProjectTitle": {
            "description": "The title of the new project. (255 characters max)",
            "type": "string"
          },
          "ProjectCode": {
            "description": "Used when Manual Project Codes are enabled",
            "type": "string"
          },
          "ProjectNotes": {
            "description": "Any descriptive notes about the project. (2000 characters max)",
            "type": "string"
          },
          "TimesheetApprovalRequiredbyDefault": {
            "type": "boolean"
          },
          "PopulateDefaultProjectMembers": {
            "description": "Defaults to true.",
            "type": "boolean"
          },
          "isTaskRequiredOnTimesheet": {
            "type": "boolean"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "BudgetAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetHours": {
            "format": "double",
            "type": "number"
          },
          "ProjectStatusCode": {
            "type": "string"
          },
          "ProjectCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ProjectDetails": {
        "type": "object",
        "properties": {
          "ProjectID": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectOwnerUserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectStatusCode": {
            "description": "Possible values: NotStarted, InProgress, Complete",
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          },
          "ProjectBillableTypeCode": {
            "description": "Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly",
            "type": "string"
          },
          "ProjectBudgetTypeCode": {
            "description": "Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours",
            "type": "string"
          },
          "BudgetAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetHours": {
            "format": "double",
            "type": "number"
          },
          "ProjectHourlyRate": {
            "format": "double",
            "type": "number"
          },
          "ProjectCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectCategoryName": {
            "type": "string"
          },
          "isTaskRequiredOnTimesheet": {
            "type": "boolean"
          },
          "DefaultAccountTaskTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultAccountTaskTypeName": {
            "type": "string"
          },
          "ProjectCategoryColor": {
            "description": "Html Hex Color Code starting with #",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "Sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectSectionDetails"
            }
          },
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberDetails"
            }
          },
          "ProjectTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTagItem"
            }
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ProjectSectionDetails": {
        "type": "object",
        "properties": {
          "SectionID": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "DisplayOrder": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ProjectMemberDetails": {
        "type": "object",
        "properties": {
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "Fullname": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "CostAmount": {
            "format": "double",
            "type": "number"
          },
          "RateAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetAmount": {
            "format": "double",
            "type": "number"
          },
          "isMemberDisabled": {
            "type": "boolean"
          },
          "isProjectManager": {
            "type": "boolean"
          },
          "isTimesheetAllowed": {
            "type": "boolean"
          },
          "isTimesheetApprover": {
            "type": "boolean"
          },
          "isTimesheetApprovalRequired": {
            "type": "boolean"
          },
          "canCreateTasks": {
            "type": "boolean"
          },
          "canDeleteTasks": {
            "type": "boolean"
          },
          "canCommentOnTasks": {
            "type": "boolean"
          },
          "canUpdateTasks": {
            "type": "boolean"
          }
        }
      },
      "ProjectTagItem": {
        "type": "object",
        "properties": {
          "ProjectTagID": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "UpdateProjectModel": {
        "type": "object",
        "properties": {
          "ProjectID": {
            "format": "int32",
            "description": "The ID of the Project to update",
            "type": "integer"
          },
          "FieldsToUpdate": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProjectTitle": {
            "description": "(optional) An updated project title. (255 characters max)",
            "type": "string"
          },
          "ProjectNotes": {
            "description": "(optional) Any descriptive notes about the project. (2000 characters max)",
            "type": "string"
          },
          "TimesheetApprovalRequiredbyDefault": {
            "description": "Whether timesheet approval should be required by default for newly added project members.",
            "type": "boolean"
          },
          "isTaskRequiredOnTimesheet": {
            "description": "Whether timesheets entered against this project require a task to be selected.",
            "type": "boolean"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "BudgetAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetHours": {
            "format": "double",
            "type": "number"
          },
          "ProjectStatusCode": {
            "description": "Update the project status (string, optional): (Possible values: NotStarted, InProgress, Complete, OnHold)",
            "type": "string"
          },
          "ProjectCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectBillableTypeCode": {
            "description": "The billing method of the project. (string, optional) Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly",
            "type": "string"
          },
          "ProjectBudgetTypeCode": {
            "description": "The project budgeting type. (string, optional) Possible values: NoBudget, PersonHours, ProjectFees, ProjectHours, CategoryHours",
            "type": "string"
          }
        }
      },
      "NewProjectMember": {
        "type": "object",
        "properties": {
          "isProjectManager": {
            "type": "boolean"
          },
          "isTimesheetAllowed": {
            "type": "boolean"
          },
          "isTimesheetApprover": {
            "type": "boolean"
          },
          "isTimesheetApprovalRequired": {
            "type": "boolean"
          },
          "canCreateTasks": {
            "type": "boolean"
          },
          "canDeleteTasks": {
            "type": "boolean"
          },
          "canCommentOnTasks": {
            "type": "boolean"
          },
          "canUpdateTasks": {
            "type": "boolean"
          },
          "ProjectIDFK": {
            "format": "int32",
            "description": "Required. The ProjectID",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "description": "Required. The UserID to assign",
            "type": "integer"
          },
          "CostAmount": {
            "format": "double",
            "description": "Optional. If not provided, defaults to the User's default Cost Amount.",
            "type": "number"
          },
          "RateAmount": {
            "format": "double",
            "description": "Optional. If not provided, defaults to the User's default Rate Amount.",
            "type": "number"
          },
          "BudgetAmount": {
            "format": "double",
            "description": "Optional",
            "type": "number"
          }
        }
      },
      "ProjectTimesheetCategoryList": {
        "type": "object",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTimesheetCategoryDetails"
            }
          }
        }
      },
      "ProjectTimesheetCategoryDetails": {
        "type": "object",
        "properties": {
          "TimeSheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "isBillable": {
            "type": "boolean"
          },
          "RateAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetHours": {
            "format": "double",
            "type": "number"
          },
          "CostAmount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "AssignProjectTimesheetCategory": {
        "type": "object",
        "properties": {
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TimesheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "isBillable": {
            "type": "boolean"
          },
          "RateAmount": {
            "format": "double",
            "type": "number"
          },
          "BudgetHours": {
            "format": "double",
            "type": "number"
          },
          "CostAmount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "ScheduleAssignmentList": {
        "type": "object",
        "properties": {
          "ScheduleAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleAssignmentDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ScheduleAssignmentDetails": {
        "type": "object",
        "properties": {
          "ScheduleAssignmentID": {
            "format": "int64",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ScheduleSeriesIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "ScheduleDate": {
            "format": "date-time",
            "type": "string"
          },
          "Duration": {
            "format": "double",
            "type": "number"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "CreateBooking": {
        "type": "object",
        "properties": {
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "HoursPerDay": {
            "format": "double",
            "type": "number"
          },
          "TotalDuration": {
            "format": "double",
            "type": "number"
          },
          "DurationType": {
            "type": "string"
          },
          "ScheduleOnDaysOff": {
            "type": "boolean"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Notes": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ScheduleSeriesDetails": {
        "type": "object",
        "properties": {
          "ScheduleSeriesID": {
            "format": "int64",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "TimeSheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TimeSheetCategoryName": {
            "type": "string"
          },
          "LeaveTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "LeaveTypeName": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "HoursPerDay": {
            "format": "double",
            "type": "number"
          },
          "TotalDuration": {
            "format": "double",
            "type": "number"
          },
          "ScheduleOnDaysOff": {
            "type": "boolean"
          },
          "Notes": {
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTitle": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "UpdatedByUserIDFK": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CreateLeave": {
        "type": "object",
        "properties": {
          "LeaveUserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "LeaveNotify": {
            "type": "boolean"
          },
          "LeaveHoursPerDay": {
            "format": "double",
            "type": "number"
          },
          "LeaveTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "LeaveNotes": {
            "type": "string"
          },
          "LeaveStartDate": {
            "format": "date-time",
            "type": "string"
          },
          "LeaveEndDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "EditLeave": {
        "type": "object",
        "properties": {
          "ScheduleSeriesID": {
            "format": "int64",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "HoursPerDay": {
            "format": "double",
            "type": "number"
          },
          "LeaveTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Notes": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "EditBooking": {
        "type": "object",
        "properties": {
          "ScheduleSeriesID": {
            "format": "int64",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "HoursPerDay": {
            "format": "double",
            "type": "number"
          },
          "TotalDuration": {
            "format": "double",
            "type": "number"
          },
          "DurationType": {
            "type": "string"
          },
          "ScheduleOnDaysOff": {
            "type": "boolean"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Notes": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ScheduleSeriesList": {
        "type": "object",
        "properties": {
          "ScheduleSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleSeriesDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SectionList": {
        "type": "object",
        "properties": {
          "Sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectionDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SectionDetails": {
        "type": "object",
        "properties": {
          "SectionID": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "DisplayOrder": {
            "format": "int32",
            "type": "integer"
          },
          "StartDateUTC": {
            "format": "date-time",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateUTC": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "NewSection": {
        "type": "object",
        "properties": {
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "StartDateUTC": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateUTC": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "TaskDropdownList": {
        "type": "object",
        "properties": {
          "sections": {
            "description": "List of Task grouped by Section",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSectionGroup"
            }
          },
          "pageNumber": {
            "format": "int32",
            "description": "Current page number (1 based)",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "description": "Current page size",
            "type": "integer"
          },
          "hasMore": {
            "description": "More records probably exist",
            "type": "boolean"
          }
        }
      },
      "TaskSectionGroup": {
        "type": "object",
        "properties": {
          "SectionTitle": {
            "type": "string"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDropdownSelection"
            }
          }
        }
      },
      "TaskDropdownSelection": {
        "type": "object",
        "properties": {
          "TaskID": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        }
      },
      "TaskList": {
        "type": "object",
        "properties": {
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TaskDetails": {
        "type": "object",
        "properties": {
          "TaskID": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "SectionTitle": {
            "type": "string"
          },
          "SectionIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DescriptionNoHTML": {
            "type": "string"
          },
          "AssignedToFirstname": {
            "type": "string"
          },
          "AssignedToLastname": {
            "type": "string"
          },
          "AssignedToEmail": {
            "type": "string"
          },
          "AssignedToUserIDFK": {
            "type": "string"
          },
          "DateStart": {
            "format": "date-time",
            "type": "string"
          },
          "DateDue": {
            "format": "date-time",
            "type": "string"
          },
          "DateCompleted": {
            "format": "date-time",
            "type": "string"
          },
          "EstimatedEffort": {
            "format": "double",
            "type": "number"
          },
          "ActualTime": {
            "format": "double",
            "type": "number"
          },
          "Tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagItem"
            }
          },
          "AccountTaskTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskStatusCode": {
            "type": "string"
          },
          "TaskStatusName": {
            "type": "string"
          },
          "isCompleteStatus": {
            "type": "boolean"
          },
          "PercentComplete": {
            "format": "double",
            "type": "number"
          },
          "TaskPriorityCode": {
            "type": "string"
          },
          "TaskPriorityName": {
            "type": "string"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "TagItem": {
        "type": "object",
        "properties": {
          "TagID": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Color": {
            "type": "string"
          }
        }
      },
      "UpdateTask": {
        "required": [
          "TaskID",
          "FieldsToUpdate"
        ],
        "type": "object",
        "properties": {
          "TaskID": {
            "format": "int32",
            "type": "integer"
          },
          "FieldsToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SectionIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "AssignedToUserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "DateStart": {
            "format": "date-time",
            "type": "string"
          },
          "DateDue": {
            "format": "date-time",
            "type": "string"
          },
          "TaskPriorityCode": {
            "type": "string"
          },
          "EstimatedEffort": {
            "format": "double",
            "description": "Decimal hours",
            "type": "number"
          },
          "TaskStatusCode": {
            "type": "string"
          },
          "PercentComplete": {
            "format": "int32",
            "type": "integer"
          },
          "Tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewTag"
            }
          }
        }
      },
      "NewTag": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Color": {
            "description": "Hex color code in format #000000",
            "type": "string"
          }
        }
      },
      "NewTask": {
        "required": [
          "ProjectIDFK",
          "SectionIDFK",
          "Title"
        ],
        "type": "object",
        "properties": {
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "SectionIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "AccountTaskTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "AssignedToUserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskPriorityCode": {
            "type": "string"
          },
          "DateStart": {
            "format": "date-time",
            "type": "string"
          },
          "DateDue": {
            "format": "date-time",
            "type": "string"
          },
          "EstimatedEffort": {
            "format": "double",
            "description": "Decimal hours",
            "type": "number"
          },
          "Tags": {
            "description": "Collection of tags specifying Name and Color (Hex)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewTag"
            }
          }
        }
      },
      "TaskStatusList": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStatusDetails"
            }
          }
        }
      },
      "TaskStatusDetails": {
        "type": "object",
        "properties": {
          "TaskStatusCode": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Color": {
            "type": "string"
          },
          "DisplayOrder": {
            "format": "int32",
            "type": "integer"
          },
          "isComplete": {
            "type": "boolean"
          },
          "AccountTaskTypeIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTypeName": {
            "type": "string"
          }
        }
      },
      "TaskTypeList": {
        "type": "object",
        "properties": {
          "tasktypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTaskTypeDetails"
            }
          }
        }
      },
      "AccountTaskTypeDetails": {
        "type": "object",
        "properties": {
          "AccountTaskTypeID": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Icon": {
            "type": "string"
          },
          "IconType": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "TaxList": {
        "type": "object",
        "properties": {
          "Taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxItem"
            }
          }
        }
      },
      "TaxItem": {
        "type": "object",
        "properties": {
          "TaxID": {
            "format": "int32",
            "type": "integer"
          },
          "TaxCode": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "CalculatedPercent": {
            "format": "double",
            "type": "number"
          },
          "TaxComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxComponent"
            }
          }
        }
      },
      "TaxComponent": {
        "type": "object",
        "properties": {
          "TaxComponentID": {
            "format": "int32",
            "type": "integer"
          },
          "TaxIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ComponentTaxCode": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Percentage": {
            "format": "double",
            "type": "number"
          },
          "isCompound": {
            "type": "boolean"
          }
        }
      },
      "TimesheetList": {
        "type": "object",
        "properties": {
          "Timesheets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetListDetails"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "PageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TimesheetListDetails": {
        "type": "object",
        "properties": {
          "TimesheetEntryID": {
            "format": "int64",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "TimesheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryName": {
            "type": "string"
          },
          "Duration": {
            "format": "double",
            "type": "number"
          },
          "TimesheetEntryApprovalStatusCode": {
            "type": "string"
          },
          "HasTimer": {
            "type": "boolean"
          },
          "TimerStartedAtUTC": {
            "format": "date-time",
            "type": "string"
          },
          "isBillable": {
            "type": "boolean"
          },
          "isInvoiced": {
            "type": "boolean"
          },
          "EntryDate": {
            "format": "date-time",
            "type": "string"
          },
          "StartTimeLocal": {
            "format": "date-time",
            "type": "string"
          },
          "StartTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "EndTimeLocal": {
            "format": "date-time",
            "type": "string"
          },
          "EndTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "TimesheetUserTimeZone": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTitle": {
            "type": "string"
          },
          "InvoiceIDFK": {
            "format": "int64",
            "description": "This InvoiceIDFK is only included when the api get parameter includeInvoiceDetails==true",
            "type": "integer"
          },
          "InvoiceLineItemIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "DateApproved": {
            "format": "date-time",
            "type": "string"
          },
          "ApprovedBy": {
            "type": "string"
          },
          "CustomMetadata": {
            "type": "string"
          }
        }
      },
      "NewTimesheet": {
        "type": "object",
        "properties": {
          "UserIDFK": {
            "format": "int32",
            "description": "UserID for a Timesheet user in Avaza",
            "type": "integer"
          },
          "ProjectIDFK": {
            "format": "int32",
            "description": "The project to associate the timesheet with.",
            "type": "integer"
          },
          "TimesheetCategoryIDFK": {
            "format": "int32",
            "description": "The Project timesheet category to link the timesheet to",
            "type": "integer"
          },
          "Duration": {
            "format": "double",
            "description": "The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.",
            "type": "number"
          },
          "isInvoiced": {
            "description": "Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.",
            "type": "boolean"
          },
          "EntryDate": {
            "format": "date-time",
            "description": "The date of the timesheet entry, with an optional start time component.",
            "type": "string"
          },
          "hasStartEndTime": {
            "description": "If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate",
            "type": "boolean"
          },
          "Notes": {
            "description": "Timesheet Notes",
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "description": "Optional. Link the timesheet to a specific task",
            "type": "integer"
          },
          "CustomMetadata": {
            "description": "Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.",
            "type": "string"
          }
        }
      },
      "TimesheetDetails": {
        "type": "object",
        "properties": {
          "TimesheetEntryID": {
            "format": "int64",
            "type": "integer"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "ProjectTitle": {
            "type": "string"
          },
          "ProjectCode": {
            "type": "string"
          },
          "CustomerIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "TimesheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryName": {
            "type": "string"
          },
          "Duration": {
            "format": "double",
            "type": "number"
          },
          "TimesheetEntryApprovalStatusCode": {
            "type": "string"
          },
          "HasTimer": {
            "type": "boolean"
          },
          "TimerStartedAtUTC": {
            "format": "date-time",
            "type": "string"
          },
          "isBillable": {
            "type": "boolean"
          },
          "isInvoiced": {
            "type": "boolean"
          },
          "EntryDate": {
            "format": "date-time",
            "type": "string"
          },
          "StartTimeLocal": {
            "format": "date-time",
            "type": "string"
          },
          "StartTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "EndTimeLocal": {
            "format": "date-time",
            "type": "string"
          },
          "EndTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "TimesheetUserTimeZone": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskTitle": {
            "type": "string"
          },
          "InvoiceIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "InvoiceLineItemIDFK": {
            "format": "int64",
            "type": "integer"
          },
          "DateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "DateUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "DateApproved": {
            "format": "date-time",
            "type": "string"
          },
          "ApprovedBy": {
            "type": "string"
          },
          "CustomMetadata": {
            "type": "string"
          }
        }
      },
      "UpdateTimesheetModel": {
        "required": [
          "TimeSheetEntryID",
          "FieldsToUpdate",
          "ProjectIDFK"
        ],
        "type": "object",
        "properties": {
          "TimeSheetEntryID": {
            "format": "int64",
            "type": "integer"
          },
          "FieldsToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProjectIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TimesheetCategoryIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "TaskIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Duration": {
            "format": "double",
            "type": "number"
          },
          "EntryDate": {
            "format": "date-time",
            "type": "string"
          },
          "hasStartEndTime": {
            "type": "boolean"
          },
          "Notes": {
            "type": "string"
          },
          "CustomMetadata": {
            "description": "Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.",
            "type": "string"
          }
        }
      },
      "TimesheetSummaryRequest": {
        "type": "object",
        "properties": {
          "GroupBy": {
            "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Customer\", \"Project\", \"Category\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EntryDateFrom": {
            "format": "date-time",
            "description": "(Required) Filter for timesheets greater or equal to the specified date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00",
            "type": "string"
          },
          "EntryDateTo": {
            "format": "date-time",
            "description": "(Required) Filter for timesheets with an entry date smaller or equal to the specified  date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00",
            "type": "string"
          },
          "UserID": {
            "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose timesheets should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ProjectID": {
            "format": "int32",
            "description": "(Optional) Filter by Project",
            "type": "integer"
          },
          "isBillable": {
            "description": "(Optional) Filter by the billable status of Timesheets.",
            "type": "boolean"
          },
          "isInvoiced": {
            "description": "(Optional) Filter for timesheets by whether they have been Invoiced or not.",
            "type": "boolean"
          }
        }
      },
      "TimesheetSummaryResult": {
        "type": "object",
        "properties": {
          "EntryDateFrom": {
            "format": "date-time",
            "type": "string"
          },
          "EntryDateTo": {
            "format": "date-time",
            "type": "string"
          },
          "TotalHours": {
            "format": "double",
            "type": "number"
          },
          "BillableHours": {
            "format": "double",
            "type": "number"
          },
          "UserID": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "GroupingLevels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "GroupData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetSummaryGroup"
            }
          }
        }
      },
      "TimesheetSummaryGroup": {
        "type": "object",
        "properties": {
          "GroupID": {
            "type": "string"
          },
          "GroupName": {
            "type": "string"
          },
          "TotalHours": {
            "format": "double",
            "type": "number"
          },
          "BillableHours": {
            "format": "double",
            "type": "number"
          },
          "GroupData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetSummaryGroup"
            }
          }
        }
      },
      "UserList": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDetails"
            }
          }
        }
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "UserID": {
            "format": "int32",
            "type": "integer"
          },
          "AccountIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "Email": {
            "type": "string"
          },
          "Firstname": {
            "type": "string"
          },
          "Lastname": {
            "type": "string"
          },
          "PositionTitle": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Mobile": {
            "type": "string"
          },
          "TimeZone": {
            "description": "Windows Timezone ID",
            "type": "string"
          },
          "IANATimezone": {
            "description": "IANA tz database timezone name",
            "type": "string"
          },
          "isTeamMember": {
            "type": "boolean"
          },
          "CompanyIDFK": {
            "format": "int32",
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "DefaultBillableRate": {
            "format": "double",
            "type": "number"
          },
          "DefaultCostRate": {
            "format": "double",
            "type": "number"
          },
          "MondayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "TuesdayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "WednesdayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "ThursdayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "FridayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "SaturdayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "SundayAvailableHours": {
            "format": "double",
            "type": "number"
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDetails"
            }
          },
          "Tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagDetails"
            }
          }
        }
      },
      "RoleDetails": {
        "type": "object",
        "properties": {
          "RoleCode": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          }
        }
      },
      "UserTagDetails": {
        "type": "object",
        "properties": {
          "UserTagID": {
            "format": "int32",
            "type": "integer"
          },
          "UserTagName": {
            "type": "string"
          }
        }
      },
      "CreateSubscription": {
        "description": "New Subscription to be Created",
        "required": [
          "target_url",
          "event"
        ],
        "type": "object",
        "properties": {
          "target_url": {
            "description": "The URL that should be notified of the event.",
            "type": "string"
          },
          "event": {
            "description": "The event code to be notified about. Possible values: company_created, contact_created, invoice_created, invoice_sent, project_created, task_created",
            "type": "string"
          },
          "secret": {
            "description": "Optional Secret string (255 char max). If provided, the secret will be BASE 64 encoded and used as a basic authentication http header with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]\"",
            "type": "string"
          }
        }
      },
      "SubscribeResult": {
        "type": "object",
        "properties": {
          "ID": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "WebhookList": {
        "type": "object",
        "properties": {
          "Webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookDetails"
            }
          }
        }
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "SubscriptionID": {
            "format": "int32",
            "type": "integer"
          },
          "EventCode": {
            "type": "string"
          },
          "NotificationURL": {
            "type": "string"
          },
          "UserIDFK": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    }
  }
}