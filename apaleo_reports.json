{
  "openapi": "3.0.0",
  "info": {
    "title": "apaleo Reports API",
    "description": "Management reports, guest statistics and similar aggregated reports.",
    "contact": {
      "url": "https://apaleo.dev/",
      "name": "Apaleo"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.apaleo.com",
      "variables": {}
    }
  ],
  "paths": {
    "/reports/v1/reports/ordered-services": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "ReportsReportsOrdered-servicesGet",
        "description": "Returns a list of ordered services per day with information about the guest and the reservation this service was ordered for.<br>You must have this scope: 'reports.read'.",
        "operationId": "ReportsReportsOrdered-servicesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Property Id",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIds",
            "in": "query",
            "description": "Service ids the report should be generated for",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The inclusive start date of the interval.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The exclusive end date of the interval.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderedServicesListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reports.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/reports/v1/reports/arrivals": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "ReportsReportsArrivalsGet",
        "description": "Returns number of arriving guests for a property for a certain month. Only over-night rateplans are considered.<br />\r\nIncludes statistical information on purpose of travel, and nationality. The data is taken from the primary guest only.\r\nThe status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.",
        "operationId": "ReportsReportsArrivalsGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Requested property.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Requested month for the report.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Requested year for the report.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestReportModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reports.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/reports/v1/reports/property-performance": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "ReportsReportsProperty-performanceGet",
        "description": "The property performance API return you key performance indicator for the selected property like occupancy, ADR and RevPAR.\r\nIt only considers the originally booked amounts for sold units excluding any additional services or manually posted charges\r\nor allowances. The results can be filterd to only show you data for a certain part of the business. For example you can exclude\r\nday-use reservations or complimentary rate plans.<br>You must have this scope: 'reports.read'.",
        "operationId": "ReportsReportsProperty-performanceGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "The ID of the property",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The inclusive start date of the interval",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The inclusive end date of the interval",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "The company IDs used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "The rate plan IDs used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "The unit group types used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "The unit group IDs used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "The time slice definition IDs used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelCodes",
            "in": "query",
            "description": "The channel codes used to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/channelCode"
              }
            }
          },
          {
            "name": "travelPurpose",
            "in": "query",
            "description": "The travel purpose to filter the retrieved data",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/travelPurpose"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: businessDays. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyPerformanceReportModel"
                }
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reports.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/reports/v1/reports/company-invoices-vat": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "ReportsReportsCompany-invoices-vatGet",
        "description": "<br>You must have this scope: 'reports.read'.",
        "operationId": "ReportsReportsCompany-invoices-vatGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Property ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "Company IDs the report should be generated for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateFilter",
            "in": "query",
            "description": "Set a date interval to get the report for. Cannot be more than 1 month.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompaniesVatReportListModel"
                }
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reports.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/reports/v1/reports/revenues": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "ReportsReportsRevenuesGet",
        "description": "<br>You must have this scope: 'reports.read'.",
        "operationId": "ReportsReportsRevenuesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Property ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The inclusive start date of the interval.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The exclusive end date of the interval. The interval is limited to 3 months.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "The language for the the report",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevenuesReportItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "reports.read",
              "admin"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddressModel": {
        "title": "AddressModel",
        "required": [
          "addressLine1",
          "postalCode",
          "city",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "CompaniesVatReportItemModel": {
        "title": "CompaniesVatReportItemModel",
        "required": [
          "company",
          "invoice"
        ],
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyModel"
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceModel"
          }
        }
      },
      "CompaniesVatReportListModel": {
        "title": "CompaniesVatReportListModel",
        "required": [
          "companyInvoices",
          "count"
        ],
        "type": "object",
        "properties": {
          "companyInvoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompaniesVatReportItemModel"
            },
            "description": "List of company invoices"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "CompanyModel": {
        "title": "CompanyModel",
        "required": [
          "id",
          "code",
          "name",
          "address"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the company"
          },
          "code": {
            "type": "string",
            "description": "The code for the company"
          },
          "name": {
            "type": "string",
            "description": "The name of the company"
          },
          "taxId": {
            "type": "string",
            "description": "The tax ID of the company"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "EmbeddedUnitGroupModel": {
        "title": "EmbeddedUnitGroupModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit group id"
          },
          "code": {
            "type": "string",
            "description": "The code for the unit group that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit group"
          },
          "description": {
            "type": "string",
            "description": "The description for the unit group"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          }
        }
      },
      "ExportAccountModel": {
        "title": "ExportAccountModel",
        "required": [
          "name",
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The account name"
          },
          "number": {
            "type": "string",
            "description": "The account number"
          },
          "parentNumber": {
            "type": "string",
            "description": "The number of the parent account"
          },
          "type": {
            "$ref": "#/components/schemas/Type1"
          }
        }
      },
      "GuestReportModel": {
        "title": "GuestReportModel",
        "required": [
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number for all guests.",
            "format": "int32"
          },
          "travelPurposeBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelPurposeEntry"
            },
            "description": "Breakdown by travel purpose. Data where the travel purpose is unknown is excluded."
          },
          "nationalityBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NationalityEntry"
            },
            "description": "Breakdown by nationality. Data where the nationality is unknown is excluded."
          }
        }
      },
      "InvoiceModel": {
        "title": "InvoiceModel",
        "required": [
          "date",
          "subTotal"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Invoice number"
          },
          "date": {
            "type": "string",
            "description": "Date the invoice has been created",
            "format": "date",
            "example": "2020-10-10"
          },
          "subTotal": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "outstandingPayment": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "taxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            },
            "description": "The subtotal, displaying net and tax amount for each VAT type"
          }
        }
      },
      "MessageItemCollection": {
        "title": "MessageItemCollection",
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "MonetaryValueModel": {
        "title": "MonetaryValueModel",
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "NationalityEntry": {
        "title": "NationalityEntry",
        "required": [
          "countryCode",
          "number",
          "percent"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "2 letter ISO country code"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "percent": {
            "type": "number"
          }
        }
      },
      "OrderedServicesGuestModel": {
        "title": "OrderedServicesGuestModel",
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/Title"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the guest"
          },
          "middleInitial": {
            "type": "string",
            "description": "Middle initial of the guest"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the guest"
          }
        }
      },
      "OrderedServicesItemModel": {
        "title": "OrderedServicesItemModel",
        "required": [
          "id",
          "code",
          "name",
          "serviceDate",
          "count",
          "reservation",
          "unitGroup"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The service id"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "name": {
            "type": "string",
            "description": "The name for the service"
          },
          "serviceDate": {
            "type": "string",
            "description": "The date this service is delivered",
            "format": "date",
            "example": "2020-10-10"
          },
          "count": {
            "type": "integer",
            "description": "The count of services ordered",
            "format": "int32"
          },
          "guest": {
            "$ref": "#/components/schemas/OrderedServicesGuestModel"
          },
          "reservation": {
            "$ref": "#/components/schemas/OrderedServicesReservationModel"
          },
          "unit": {
            "$ref": "#/components/schemas/OrderedServicesUnitModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/OrderedServicesUnitGroupModel"
          }
        }
      },
      "OrderedServicesListModel": {
        "title": "OrderedServicesListModel",
        "required": [
          "orderedServices",
          "count"
        ],
        "type": "object",
        "properties": {
          "orderedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedServicesItemModel"
            },
            "description": "List of ordered services"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "orderedServices": [
            {
              "id": "MUC-BRK",
              "code": "BRK",
              "name": "Breakfast",
              "serviceDate": "2022-05-01",
              "count": 1,
              "guest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "John",
                "middleInitial": "G.",
                "lastName": "Doe"
              },
              "reservation": {
                "id": "XPGMSXGF-1",
                "arrival": "2022-04-30T17:00:00+02:00",
                "departure": "2022-05-02T17:00:00+02:00",
                "persons": 2
              },
              "unit": {
                "id": "HDHD",
                "name": "A.001"
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Single room"
              }
            }
          ],
          "count": 1
        }
      },
      "OrderedServicesReservationModel": {
        "title": "OrderedServicesReservationModel",
        "required": [
          "id",
          "arrival",
          "departure",
          "persons"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reservation id"
          },
          "arrival": {
            "type": "string",
            "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "persons": {
            "type": "integer",
            "description": "Number of persons",
            "format": "int32"
          }
        }
      },
      "OrderedServicesUnitGroupModel": {
        "title": "OrderedServicesUnitGroupModel",
        "required": [
          "id",
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit group id"
          },
          "code": {
            "type": "string",
            "description": "The code for the unit group"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit group"
          }
        }
      },
      "OrderedServicesUnitModel": {
        "title": "OrderedServicesUnitModel",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit id"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit"
          }
        }
      },
      "PropertyPerformancePerUnitGroupModel": {
        "title": "PropertyPerformancePerUnitGroupModel",
        "required": [
          "unitGroup",
          "houseCount",
          "houseItemsCount",
          "soldCount",
          "soldItemsCount",
          "unsoldCount",
          "unsoldItemsCount",
          "outOfOrderCount",
          "outOfOrderItemsCount",
          "tentativelyBlockedCount",
          "tentativelyBlockedItemsCount",
          "arrivalsCount",
          "departuresCount",
          "noShowsCount",
          "cancellationsCount",
          "occupancyPercentage",
          "grossUnitRevenue",
          "netUnitRevenue",
          "grossAccommodationRevenue",
          "netAccommodationRevenue",
          "grossFoodAndBeveragesRevenue",
          "netFoodAndBeveragesRevenue",
          "grossOtherRevenue",
          "netOtherRevenue",
          "grossAdr",
          "netAdr",
          "revPar"
        ],
        "type": "object",
        "properties": {
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "houseCount": {
            "type": "integer",
            "description": "The number of units physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "houseItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "soldCount": {
            "type": "integer",
            "description": "The number of sold units plus definitely blocked units from group bookings",
            "format": "int32"
          },
          "soldItemsCount": {
            "type": "integer",
            "description": "The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings",
            "format": "int32"
          },
          "unsoldCount": {
            "type": "integer",
            "description": "The number of unsold units: house count minus sold units and out of order units",
            "format": "int32"
          },
          "unsoldItemsCount": {
            "type": "integer",
            "description": "The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items",
            "format": "int32"
          },
          "outOfOrderCount": {
            "type": "integer",
            "description": "The number of units which are out of order",
            "format": "int32"
          },
          "outOfOrderItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) which are out of order",
            "format": "int32"
          },
          "tentativelyBlockedCount": {
            "type": "integer",
            "description": "The number of units which are tentatively blocked",
            "format": "int32"
          },
          "tentativelyBlockedItemsCount": {
            "type": "integer",
            "description": "The number of items (beds, seats, etc.) which are tentatively blocked",
            "format": "int32"
          },
          "arrivalsCount": {
            "type": "integer",
            "description": "The number of arrivals units",
            "format": "int32"
          },
          "departuresCount": {
            "type": "integer",
            "description": "The number of departures units",
            "format": "int32"
          },
          "noShowsCount": {
            "type": "integer",
            "description": "The number of no-show units",
            "format": "int32"
          },
          "cancellationsCount": {
            "type": "integer",
            "description": "The number of cancelled units",
            "format": "int32"
          },
          "occupancyPercentage": {
            "type": "number",
            "description": "The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units"
          },
          "grossUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "revPar": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "PropertyPerformanceReportItemModel": {
        "title": "PropertyPerformanceReportItemModel",
        "required": [
          "businessDay",
          "houseCount",
          "houseItemsCount",
          "soldCount",
          "soldItemsCount",
          "unsoldCount",
          "unsoldItemsCount",
          "outOfOrderCount",
          "outOfOrderItemsCount",
          "tentativelyBlockedCount",
          "tentativelyBlockedItemsCount",
          "arrivalsCount",
          "departuresCount",
          "noShowsCount",
          "cancellationsCount",
          "occupancyPercentage",
          "grossUnitRevenue",
          "netUnitRevenue",
          "grossAccommodationRevenue",
          "netAccommodationRevenue",
          "grossFoodAndBeveragesRevenue",
          "netFoodAndBeveragesRevenue",
          "grossOtherRevenue",
          "netOtherRevenue",
          "grossAdr",
          "netAdr",
          "revPar",
          "unitGroups"
        ],
        "type": "object",
        "properties": {
          "businessDay": {
            "type": "string",
            "description": "The business day",
            "format": "date",
            "example": "2020-10-10"
          },
          "houseCount": {
            "type": "integer",
            "description": "The number of units physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "houseItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "soldCount": {
            "type": "integer",
            "description": "The number of sold units plus definitely blocked units from group bookings",
            "format": "int32"
          },
          "soldItemsCount": {
            "type": "integer",
            "description": "The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings",
            "format": "int32"
          },
          "unsoldCount": {
            "type": "integer",
            "description": "The number of unsold units: house count minus sold units and out of order units",
            "format": "int32"
          },
          "unsoldItemsCount": {
            "type": "integer",
            "description": "The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items",
            "format": "int32"
          },
          "outOfOrderCount": {
            "type": "integer",
            "description": "The number of units which are out of order",
            "format": "int32"
          },
          "outOfOrderItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) which are out of order",
            "format": "int32"
          },
          "tentativelyBlockedCount": {
            "type": "integer",
            "description": "The number of units which are tentatively blocked",
            "format": "int32"
          },
          "tentativelyBlockedItemsCount": {
            "type": "integer",
            "description": "The number of items (beds, seats, etc.) which are tentatively blocked",
            "format": "int32"
          },
          "arrivalsCount": {
            "type": "integer",
            "description": "The number of arrivals units",
            "format": "int32"
          },
          "departuresCount": {
            "type": "integer",
            "description": "The number of departures units",
            "format": "int32"
          },
          "noShowsCount": {
            "type": "integer",
            "description": "The number of no-show units",
            "format": "int32"
          },
          "cancellationsCount": {
            "type": "integer",
            "description": "The number of cancelled units",
            "format": "int32"
          },
          "occupancyPercentage": {
            "type": "number",
            "description": "The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units"
          },
          "grossUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "revPar": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "unitGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyPerformancePerUnitGroupModel"
            },
            "description": "The breakdown per unit group"
          }
        }
      },
      "PropertyPerformanceReportModel": {
        "title": "PropertyPerformanceReportModel",
        "required": [
          "houseCount",
          "houseItemsCount",
          "soldCount",
          "soldItemsCount",
          "unsoldCount",
          "unsoldItemsCount",
          "outOfOrderCount",
          "outOfOrderItemsCount",
          "tentativelyBlockedCount",
          "tentativelyBlockedItemsCount",
          "arrivalsCount",
          "departuresCount",
          "noShowsCount",
          "cancellationsCount",
          "occupancyPercentage",
          "grossUnitRevenue",
          "netUnitRevenue",
          "grossAccommodationRevenue",
          "netAccommodationRevenue",
          "grossFoodAndBeveragesRevenue",
          "netFoodAndBeveragesRevenue",
          "grossOtherRevenue",
          "netOtherRevenue",
          "grossAdr",
          "netAdr",
          "revPar"
        ],
        "type": "object",
        "properties": {
          "houseCount": {
            "type": "integer",
            "description": "The number of units physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "houseItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory",
            "format": "int32"
          },
          "soldCount": {
            "type": "integer",
            "description": "The number of sold units plus definitely blocked units from group bookings",
            "format": "int32"
          },
          "soldItemsCount": {
            "type": "integer",
            "description": "The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings",
            "format": "int32"
          },
          "unsoldCount": {
            "type": "integer",
            "description": "The number of unsold units: house count minus sold units and out of order units",
            "format": "int32"
          },
          "unsoldItemsCount": {
            "type": "integer",
            "description": "The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items",
            "format": "int32"
          },
          "outOfOrderCount": {
            "type": "integer",
            "description": "The number of units which are out of order",
            "format": "int32"
          },
          "outOfOrderItemsCount": {
            "type": "integer",
            "description": "The number of items (e.g. beds, seats, etc.) which are out of order",
            "format": "int32"
          },
          "tentativelyBlockedCount": {
            "type": "integer",
            "description": "The number of units which are tentatively blocked",
            "format": "int32"
          },
          "tentativelyBlockedItemsCount": {
            "type": "integer",
            "description": "The number of items (beds, seats, etc.) which are tentatively blocked",
            "format": "int32"
          },
          "arrivalsCount": {
            "type": "integer",
            "description": "The number of arrivals units",
            "format": "int32"
          },
          "departuresCount": {
            "type": "integer",
            "description": "The number of departures units",
            "format": "int32"
          },
          "noShowsCount": {
            "type": "integer",
            "description": "The number of no-show units",
            "format": "int32"
          },
          "cancellationsCount": {
            "type": "integer",
            "description": "The number of cancelled units",
            "format": "int32"
          },
          "occupancyPercentage": {
            "type": "number",
            "description": "The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units"
          },
          "grossUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netUnitRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAccommodationRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netFoodAndBeveragesRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netOtherRevenue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "netAdr": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "revPar": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "businessDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyPerformanceReportItemModel"
            },
            "description": "The breakdown by business day for the specified filter criteria"
          }
        }
      },
      "RevenuesReportItemModel": {
        "title": "RevenuesReportItemModel",
        "required": [
          "account",
          "netAmount",
          "grossAmount"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "netAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "grossAmount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevenuesReportItemModel"
            },
            "description": "Child accounts of this account"
          }
        },
        "example": {
          "account": {
            "name": "Revenues",
            "number": "5000",
            "type": "Revenues"
          },
          "netAmount": {
            "amount": 8000,
            "currency": "EUR"
          },
          "grossAmount": {
            "amount": 10000,
            "currency": "EUR"
          },
          "children": [
            {
              "account": {
                "name": "Revenues Accommodation",
                "number": "RevenueAccommodation",
                "type": "Revenues"
              },
              "netAmount": {
                "amount": 5000,
                "currency": "EUR"
              },
              "grossAmount": {
                "amount": 6000,
                "currency": "EUR"
              },
              "children": [
                {
                  "account": {
                    "name": "Revenues Accommodation (7%)",
                    "number": "RevenuesAccommodation_Reduced",
                    "type": "Revenues"
                  },
                  "netAmount": {
                    "amount": 5000,
                    "currency": "EUR"
                  },
                  "grossAmount": {
                    "amount": 6000,
                    "currency": "EUR"
                  }
                }
              ]
            },
            {
              "account": {
                "name": "Revenues F&B",
                "number": "RevenueFoodAndBeverages",
                "type": "Revenues"
              },
              "netAmount": {
                "amount": 3000,
                "currency": "EUR"
              },
              "grossAmount": {
                "amount": 4000,
                "currency": "EUR"
              }
            }
          ]
        }
      },
      "TaxDetailModel": {
        "title": "TaxDetailModel",
        "required": [
          "vatType",
          "vatPercent",
          "net",
          "tax"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "vatPercent": {
            "type": "number"
          },
          "net": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "tax": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "TravelPurposeEntry": {
        "title": "TravelPurposeEntry",
        "required": [
          "purpose",
          "number",
          "percent"
        ],
        "type": "object",
        "properties": {
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "percent": {
            "type": "number"
          }
        }
      },
      "channelCode": {
        "title": "channelCode",
        "enum": [
          "Direct",
          "BookingCom",
          "Ibe",
          "ChannelManager",
          "Expedia",
          "Homelike",
          "Hrs"
        ],
        "type": "string",
        "example": "Direct"
      },
      "expand": {
        "title": "expand",
        "enum": [
          "businessDays"
        ],
        "type": "string",
        "example": "businessDays"
      },
      "Gender": {
        "title": "Gender",
        "enum": [
          "Female",
          "Male",
          "Other"
        ],
        "type": "string",
        "description": "Gender of the guest",
        "example": "Female"
      },
      "Purpose": {
        "title": "Purpose",
        "enum": [
          "Business",
          "Leisure"
        ],
        "type": "string",
        "example": "Business"
      },
      "Title": {
        "title": "Title",
        "enum": [
          "Mr",
          "Ms",
          "Dr",
          "Prof",
          "Mrs",
          "Other"
        ],
        "type": "string",
        "description": "Title of the guest",
        "example": "Mr"
      },
      "travelPurpose": {
        "title": "travelPurpose",
        "enum": [
          "Business",
          "Leisure"
        ],
        "type": "string",
        "example": "Business"
      },
      "Type": {
        "title": "Type",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "description": "The unit group type",
        "example": "BedRoom"
      },
      "Type1": {
        "title": "Type1",
        "enum": [
          "Revenues",
          "Payments",
          "Liabilities",
          "Receivables",
          "Vat",
          "House",
          "AccountsReceivable",
          "CityTaxes",
          "TransitoryItems",
          "VatOnLiabilities",
          "LossOfAccountsReceivable"
        ],
        "type": "string",
        "description": "The account type",
        "example": "Revenues"
      },
      "unitGroupType": {
        "title": "unitGroupType",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "example": "BedRoom"
      },
      "VatType": {
        "title": "VatType",
        "enum": [
          "Null",
          "VeryReduced",
          "Reduced",
          "Normal",
          "Without",
          "Special",
          "ReducedCovid19",
          "NormalCovid19"
        ],
        "type": "string",
        "example": "Null"
      }
    },
    "securitySchemes": {
      "Client credentials grant flow": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "",
            "scopes": {
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      },
      "Authorization code grant flow": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://identity.apaleo.com/connect/authorize",
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "https://identity.apaleo.com/connect/token",
            "scopes": {
              "offline_access": "This scope is active by default for connect clients.",
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Client credentials grant flow": []
    }
  ],
  "tags": [
    {
      "name": "Reports",
      "description": ""
    }
  ]
}