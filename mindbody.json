{
  "openapi": "3.0.0",
  "info": {
    "version": "v6",
    "title": "MINDBODY Public API"
  },
  "paths": {
    "/public/v{version}/appointment/addappointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Book a new appointment.",
        "description": "To book an appointment, you must use a location ID, staff ID, client ID, session type ID, and the `StartDateTime` of the appointment. You can get most of this information using `GET BookableItems`.",
        "operationId": "Appointment_AddAppointment",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/updateappointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update an existing appointment.",
        "description": "To update the information for a specific appointment, you must have a staff user token with the proper permissions. Note that you can only update the appointment’s `StartDateTime`, `EndDateTime`, `StaffId`, `Notes`, and `SessionTypeId`.",
        "operationId": "Appointment_UpdateAppointment",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/availabledates": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get dates where there is scheduled appointment availability for the given session types.",
        "description": "Returns a list of available dates for the given session types.",
        "operationId": "Appointment_GetAvailableDates",
        "parameters": [
          {
            "name": "request.sessionTypeId",
            "in": "query",
            "description": "required requested session type ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "optional requested location ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "optional requested staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/bookableitems": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get staff appointment availability.",
        "description": "Returns a list of availabilities with the information needed to book appointments. Availabilities include information such as the location and its amenities, staff members, programs, and session types.",
        "operationId": "Appointment_GetBookableItems",
        "parameters": [
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "A list of the requested session type IDs.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.appointmentId",
            "in": "query",
            "description": "If provided, filters out the appointment with this ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.ignoreDefaultSessionLength",
            "in": "query",
            "description": "When `true`, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.<br />\r\nWhen `false`, only availabilities that have the default session length return.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "A list of the requested location IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "A list of the requested staff IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/activesessiontimes": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get active session times.",
        "description": "Returns a list of the times that can be booked for a given program schedule type. `ActiveSessionTimes` represent the scheduling increments that can be booked during the active business hours for services.",
        "operationId": "Appointment_GetActiveSessionTimes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endTime",
            "in": "query",
            "description": "Filters results to times that end on or before this time on the current date. Any date provided is ignored..\r\n<br />Default: **23:59:59**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.scheduleType",
            "in": "query",
            "description": "Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "Class",
                "Enrollment",
                "Appointment",
                "Resource",
                "Media",
                "Arrival"
              ]
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.startTime",
            "in": "query",
            "description": "Filters results to times that start on or after this time on the current date. Any date provided is ignored.\r\n<br />Default: **00:00:00**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/scheduleitems": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment schedule.",
        "description": "Returns a list of schedule items, including appointments, availabilities, and unavailabilities. Unavailabilities are the times at which appointments cannot be booked, for example, on holidays or after hours when the business is closed.",
        "operationId": "Appointment_GetScheduleItems",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end date of the requested date range. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.ignorePrepFinishTimes",
            "in": "query",
            "description": "When `true`, appointment preparation and finish unavailabilities are not returned. \r\n<br />Default: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "A list of requested location IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "A list of requested staff IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/appointmentoptions": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment-related settings.",
        "description": "This endpoint has no query parameters.",
        "operationId": "Appointment_GetAppointmentOptions",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/staffappointments": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointments grouped by staff member.",
        "description": "Returns a list of appointments by staff member.",
        "operationId": "Appointment_GetStaffAppointments",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.appointmentIds",
            "in": "query",
            "description": "A list of the requested appointment IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The client ID to be returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "A list of the requested location IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "List of staff IDs to be returned. Use a value of zero to return all staff appointments.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start date of the requested date range. If omitted, the default is used. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/addons": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get add ons",
        "description": "Returns a list of appointment addons optionally filtered by those that can be performed by the given staff member",
        "operationId": "Appointment_GetAddOns",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "Optionally filter add ons that can be performed by this staff",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/addappointmentaddon": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Add Appointment Add-On",
        "description": "Creates an Add On to an existing appointment",
        "operationId": "Appointment_AddAppointmentAddOn",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/deleteappointmentaddon": {
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Early Cancel/Remove an Appointment Add-On",
        "description": "Cross Regional Add On payments are not currently supported.  Returns 204 No Content on success.",
        "operationId": "Appointment_DeleteAppointmentAddOn",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/public/v{version}/appointment/removefromappointmentwaitlist": {
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Remove an appointment from waitlist",
        "operationId": "Appointment_RemoveFromWaitlist",
        "parameters": [
          {
            "name": "request.waitlistEntryIds",
            "in": "query",
            "description": "A list of waiting list IDs to remove from waiting lists.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/availabilities": {
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update availability/unavailability of the staff",
        "operationId": "Appointment_UpdateAvailability",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Add Availabillity/Unavailabillity.",
        "description": "To Add Availabillity/Unavailabillity, you must use a location ID, staff IDs and the `StartDate/EndDate` of the Availabillity/Unavailabillity.",
        "operationId": "Appointment_AddAvailabilities",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/appointment/availability": {
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Delete availability/unavailability of the staff",
        "operationId": "Appointment_DeleteAvailability",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "deleteAvailabilityRequest.availabilityId",
            "in": "query",
            "description": "Availability Id to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteAvailabilityRequest.test",
            "in": "query",
            "description": "The test flag",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/public/v{version}/class/classes": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Get scheduled classes.",
        "operationId": "Class_GetClasses",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classDescriptionIds",
            "in": "query",
            "description": "The requested class description IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.classIds",
            "in": "query",
            "description": "The requested class IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.classScheduleIds",
            "in": "query",
            "description": "The requested classScheduleIds.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The requested end date for filtering.\r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.hideCanceledClasses",
            "in": "query",
            "description": "When `true`, canceled classes are removed from the response.<br />\r\nWhen `false`, canceled classes are included in the response.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.lastModifiedDate",
            "in": "query",
            "description": "When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "A list of location IDs on which to base the search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "A list of program IDs on which to base the search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.schedulingWindow",
            "in": "query",
            "description": "When `true`, classes outside scheduling window are removed from the response.<br />\r\nWhen `false`, classes are included in the response, regardless of the scheduling window.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.semesterIds",
            "in": "query",
            "description": "A list of semester IDs on which to base the search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "A list of session type IDs on which to base the search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "The requested IDs of the teaching staff members.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The requested start date for filtering. \r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/classdescriptions": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Get class descriptions.",
        "description": "To find class descriptions associated with **scheduled classes**, pass `StaffId`, `StartClassDateTime`, `EndClassDateTime`, or `LocationId` in the request.",
        "operationId": "Class_GetClassDescriptions",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classDescriptionId",
            "in": "query",
            "description": "Filters to the single result with the given ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.endClassDateTime",
            "in": "query",
            "description": "Filters the results to class descriptions for scheduled classes that happen before the given date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "Filters results to classes descriptions for schedule classes as the given location.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "Filters results to class descriptions belonging to the given programs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "Filters results to class descriptions for scheduled classes taught by the given staff member.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startClassDateTime",
            "in": "query",
            "description": "Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/classvisits": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Get information about clients booked in a class.",
        "description": "Returns a list of visits that contain information for a specified class. On success, this request returns the class object in the response with a list of visits.",
        "operationId": "Class_GetClassVisits",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classID",
            "in": "query",
            "description": "The class ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.lastModifiedDate",
            "in": "query",
            "description": "When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/removeclientfromclass": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Remove a client from a class.",
        "operationId": "Class_RemoveClientFromClass",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/addclassschedule": {
      "post": {
        "tags": [
          "Class"
        ],
        "operationId": "Class_AddClassSchedule",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/updateclassschedule": {
      "post": {
        "tags": [
          "Class"
        ],
        "operationId": "Class_UpdateClassSchedule",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/addclienttoclass": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Book a client into a class.",
        "description": "This endpoint adds a client to a class or to a class waiting list. It is helpful to use this endpoint in the following situations:\r\n* Use after calling `GET Clients` and `GET Classes` so that you are sure which client to book in which class.\r\n* If adding a client to a class from a waiting list, use this call after you call `GET WaitlistEntries` and determine the ID of the waiting list from which you are moving the client.\r\n* If adding a client to a class and using a pricing option that the client has already purchased, use this call after you call `GET ClientServices` to determine the ID of the pricing option that the client wants to use.\r\n\r\nIf you add a client to a class and the client purchases a new pricing option, use `GET Services`, `GET Classes`, and then `POST CheckoutShoppingCart` in place of this call.\r\n\r\nThis endpoint also supports cross-regional class bookings. If you want to perform a cross-regional class booking, set `CrossRegionalBooking` to `true`. This endpoint does not support adding a user to a waiting list using a cross-regional client pricing option(service). Cross-regional booking workflows do not support client service scheduling restrictions.\r\n\r\nWhen performing a cross-regional class booking, this endpoint loops through the first ten sites that the client is associated with, looks for client pricing options at each of those sites, and then uses the oldest client pricing option found.It is important to note that this endpoint only loops through a maximum of ten associated client sites. If a `ClientID` is associated with more than ten sites in an organization, this endpoint only loops through the first ten.If you know that a client has a client service at another site, you can specify that site using the `CrossRegionalBookingClientServiceSiteId` query parameter.\r\n\r\nIf you perform a cross-regional booking, two additional fields are included in the `SessionType` object of the response:\r\n* `SiteID`, which specifies where the client service is coming from\r\n* `CrossRegionalBookingPerformed`, a Boolean field that is set to `true`\r\n\r\nAs a prerequisite to using this endpoint, your `SourceName` must have been granted access to the organization to which the site belongs.",
        "operationId": "Class_AddClientToClass",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/classschedules": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Get class schedules.",
        "operationId": "Class_GetClassSchedules",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classScheduleIds",
            "in": "query",
            "description": "The class schedule IDs.\r\n<br />Default: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end date of the range. Return any active enrollments that occur on or before this day.\r\n<br />Default: **StartDate**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "The location IDs. \r\n<br />Default: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "The program IDs. \r\n<br />Default: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "The session type IDs. \r\n<br />Default: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "The staff IDs. \r\n<br />Default: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start date of the range. Return any active enrollments that occur on or after this day.\r\n<br />Default: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/waitlistentries": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Get waiting list entries.",
        "description": "Returns a list of waiting list entries for a specified class schedule or class. The request requires staff credentials and either a class schedule ID or class ID.",
        "operationId": "Class_GetWaitlistEntries",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classIds",
            "in": "query",
            "description": "The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClassIds**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.classScheduleIds",
            "in": "query",
            "description": "The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClassScheduleIds**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.clientIds",
            "in": "query",
            "description": "The requested client IDs.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClientIds**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.hidePastEntries",
            "in": "query",
            "description": "When `true`, indicates that past waiting list entries are hidden from clients.<br />\r\nWhen `false`, indicates that past entries are not hidden from clients.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.waitlistEntryIds",
            "in": "query",
            "description": "The requested waiting list entry IDs.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all WaitlistEntryIds**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/removefromwaitlist": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Remove a client from a waiting list.",
        "description": "This endpoint does not return a response. If a call to this endpoint results in a 200 OK HTTP status code, then the call was successful.",
        "operationId": "Class_RemoveFromWaitlist",
        "parameters": [
          {
            "name": "request.waitlistEntryIds",
            "in": "query",
            "description": "A list of waiting list IDs to remove from waiting lists.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/substituteclassteacher": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Substitute a class teacher.",
        "operationId": "Class_SubstituteClassTeacher",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/removeclientsfromclasses": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Remove a clients from a classes.",
        "operationId": "Class_RemoveClientsFromClasses",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/courses": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Fetch the list of the course for a studio",
        "operationId": "Class_GetCourses",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "getCoursesRequest.courseIDs",
            "in": "query",
            "description": "(optional) The requested course IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "getCoursesRequest.endDate",
            "in": "query",
            "description": "The end date range. Any active courses that are on or before this day.\r\n<br />(optional) Defaults to StartDate.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "getCoursesRequest.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "getCoursesRequest.locationIDs",
            "in": "query",
            "description": "(optional) The requested locations.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "getCoursesRequest.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "getCoursesRequest.programIDs",
            "in": "query",
            "description": "(optional) The requested program IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "getCoursesRequest.semesterIDs",
            "in": "query",
            "description": "(optional) The requested semester IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "getCoursesRequest.staffIDs",
            "in": "query",
            "description": "(optional) The requested StaffIDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "getCoursesRequest.startDate",
            "in": "query",
            "description": "The start date range. Any active courses that are on or after this day.\r\n<br />(optional) Defaults to today.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/cancelsingleclass": {
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Cancels a single class instance.",
        "operationId": "Class_CancelSingleClass",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/class/semesters": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Fetch the list of the Semesters",
        "operationId": "Class_GetSemestersAsync",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "Get Active semesters",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filter semesters with end date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.semesterIDs",
            "in": "query",
            "description": "Get with semester ids",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filter semesters with start date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clients": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get clients.",
        "operationId": "Client_GetClients",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientIDs",
            "in": "query",
            "description": "The requested client IDs.\r\nDefault: **all IDs** that the authenticated user’s access level allows.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.includeInactive",
            "in": "query",
            "description": "When `true`, indicates the results to include active and inactive clients.<br />\r\nWhen `false`, indicates that only those clients who are marked as active should be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.isProspect",
            "in": "query",
            "description": "When `true`, filters the results to include only those clients marked as prospects for the business.<br />\r\nWhen `false`, indicates that only those clients who are not marked prospects should be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.lastModifiedDate",
            "in": "query",
            "description": "Filters the results to include only the clients that have been modified on or after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.searchText",
            "in": "query",
            "description": "Text to use in the search. Can include FirstName, LastName, and Email. Note that user credentials must be provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.uniqueIds",
            "in": "query",
            "description": "Filters results to clients with these `UniqueIDs`. This parameter cannot be used with `ClientIDs` or `SearchText`.\r\nDefault: **all UniqueIDs** that the authenticated user’s access level allows.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientduplicates": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get client records that would be considered duplicates of the client values passed in.",
        "operationId": "Client_GetClientDuplicates",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.email",
            "in": "query",
            "description": "The client email to match on when searching for duplicates.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.firstName",
            "in": "query",
            "description": "The client first name to match on when searching for duplicates.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.lastName",
            "in": "query",
            "description": "The client last name to match on when searching for duplicates.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientformulanotes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's formula notes.",
        "operationId": "Client_GetClientFormulaNotes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.appointmentId",
            "in": "query",
            "description": "The appointment ID of the appointment that the formula notes are related to.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The client ID of the client whose formula notes are being requested.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientformulanote": {
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Deletes client's formula note.",
        "operationId": "Client_DeleteClientFormulaNote",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The client ID of the client whose formula notes are being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.formulaNoteId",
            "in": "query",
            "description": "The Formula Note ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/public/v{version}/client/addclientformulanote": {
      "post": {
        "tags": [
          "Client"
        ],
        "operationId": "Client_AddFormulaNote",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/uploadclientdocument": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Upload a document to a client's profile.",
        "description": "Returns a string representation of the image byte array. The maximum document size is 1MB.\r\n\r\nThe maximum size file that can be uploaded is 4 MB.",
        "operationId": "Client_UploadClientDocument",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/uploadclientphoto": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Upload a profile photo to a client's profile.",
        "description": "The maximum file size is 4 MB and acceptable file types are:\r\n* bmp\r\n* jpeg\r\n* gif\r\n* tiff\r\n* png",
        "operationId": "Client_UploadClientPhoto",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientcontracts": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get contracts that a client has purchased.",
        "operationId": "Client_GetClientContracts",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "Determines how many sites are skipped over when retrieving a client’s cross regional contracts. Used when a client ID is linked to more than ten sites in an organization. Only a maximum of ten site databases are queried when this call is made and `CrossRegionalLookup` is set to `true`. To change which sites are queried, change this offset value.\r\nDefault: **0**",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "When `true`, indicates that the requesting client’s cross regional contracts are returned, if any.<br />\r\nWhen `false`, indicates that cross regional contracts are not returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientservices": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get pricing options that a client has purchased.",
        "operationId": "Client_GetClientServices",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client to query. The results are a list of pricing options that the client has purchased. Note that “service” and “pricing option” are synonymous in this section of the documentation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classId",
            "in": "query",
            "description": "Filters results to only those pricing options that can be used to pay for this class.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filters results to pricing options that are valid on or before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.ignoreCrossRegionalSiteLimit",
            "in": "query",
            "description": "Used to specify if the number of cross regional sites used to search for client’s pricing options should be ignored. \r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "Filters results to pricing options that can be used at the listed location IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "Filters results to pricing options that belong to one of the given program IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sessionTypeId",
            "in": "query",
            "description": "Filters results to pricing options that will pay for the given session type ID. Use this to find pricing options that will pay for a specific appointment type.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.showActiveOnly",
            "in": "query",
            "description": "When `true`, includes active services only.\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filters results to pricing options that are valid on or after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.visitCount",
            "in": "query",
            "description": "A filter on the minimum number of visits a service can pay for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientvisits": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's visit history.",
        "operationId": "Client_GetClientVisits",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the requested client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "The number of sites to skip when returning the site associated with a client.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "When `true`, indicates that past and scheduled client visits across all sites in the region are returned.<br />\r\nWhen `false`, indicates that only visits at the current site are returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The date past which class visits are not returned.\r\nDefault: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The date before which class visits are not returned.\r\nDefault: **the end date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.unpaidsOnly",
            "in": "query",
            "description": "When `true`, indicates that only visits that have not been paid for are returned.<br />\r\nWhen `false`, indicates that all visits are returned, regardless of whether they have been paid for.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientschedule": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Gets a client's schedule history.",
        "operationId": "Client_GetClientSchedule",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the requested client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "The number of sites to skip when returning the site associated with a client.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "When `true`, indicates that past and scheduled client visits across all sites in the region are returned.\r\nWhen `false`, indicates that only visits at the current site are returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The date past which class visits are not returned.\r\nDefault is today’s date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The date before which class visits are not returned.\r\nDefault is the end date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/activeclientmemberships": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's active memberships.",
        "operationId": "Client_GetActiveClientMemberships",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client whose membership was requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The ID of the location where the requested membership was created.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/requiredclientfields": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get client required fields for a site.",
        "description": "Gets the list of fields that a new client has to fill out in business mode, specifically for the sign-up process. `AddClient` and `UpdateClient` validate against these fields.\r\n\r\nThis endpoint has no query parameters.",
        "operationId": "Client_GetRequiredClientFields",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientreferraltypes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a site's configured client referral types.",
        "description": "Gets a list of referral types. Referral types are options that new clients can choose to identify how they learned about the business. Referral types are typically used for the sign-up process.",
        "operationId": "Client_GetClientReferralTypes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.includeInactive",
            "in": "query",
            "description": "When `true`, filters the results to include subtypes and inactive referral types.<br />\r\nWhen `false`, includes no subtypes and only active types.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientaccountbalances": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get account balance information for one or more client(s).",
        "operationId": "Client_GetClientAccountBalances",
        "parameters": [
          {
            "name": "request.clientIds",
            "in": "query",
            "description": "The list of clients IDs for which you want account balances.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.balanceDate",
            "in": "query",
            "description": "The date you want a balance relative to. \r\nDefault: **the current date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.classId",
            "in": "query",
            "description": "The class ID of the event for which you want a balance.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientpurchases": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's purchase history.",
        "operationId": "Client_GetClientPurchases",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client you are querying for purchases.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filters results to purchases made before this timestamp.<br />\r\nDefault: **end of today**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.saleId",
            "in": "query",
            "description": "Filters results to the single record associated with this ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filters results to purchases made on or after this timestamp.<br />\r\nDefault: **now**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientindexes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a site's configured client indexes and client index values.",
        "description": "Client indexes are used to analyze client demographics. A business owner can set up different categories with sets of values which they can assign to each client. Client indexes are used in client searches, for tagging clients so that the owner can send mass emails to similar groups, and for many reports.\r\n\r\nFor more information, see Client Indexes and [Client Index Values (video tutorial)](https://support.mindbodyonline.com/s/article/203261653-Client-indexes-and-client-index-values-video-tutorial?language=en_USclient).",
        "operationId": "Client_GetClientIndexes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.requiredOnly",
            "in": "query",
            "description": "When `true`, filters the results to only indexes that are required on creation.<br />\r\nWhen `false` or omitted, returns all of the client indexes.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/customclientfields": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a site's configured custom client fields.",
        "operationId": "Client_GetCustomClientFields",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/addcontactlog": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Add a contact log to a client's account.",
        "operationId": "Client_AddContactLog",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/updatecontactlog": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Update a contact log on a client's account.",
        "operationId": "Client_UpdateContactLog",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/crossregionalclientassociations": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's cross regional site associations.",
        "description": "Returns a list of sites that a particular client ID (also referred to as an RSSID) or a client email address is associated with in a cross-regional organization. Either the `ClientID` or `Email` parameter is required. If both are provided, the `ClientID` is used.\r\n\r\nUse this endpoint to retrieve information for other Public API endpoints, about the same client at multiple sites within an organization. To use this endpoint, your developer account must have been granted permission to the site’s entire organization.\r\n\r\nNote that this endpoint does not work on the Developer Sandbox site, as it is not set up for cross-regional use cases.",
        "operationId": "Client_GetCrossRegionalClientAssociations",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientId",
            "in": "query",
            "description": "Looks up the cross regional associations by the client’s ID. Either `ClientId` or `Email` must be provided. If both are provided, the `ClientId` is used by default.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.email",
            "in": "query",
            "description": "Looks up the cross regional associations by the client’s email address. Either `ClientId` or `Email` must be provided. If both are provided, the `ClientId` is used by default.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/addclient": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Add a client to a site.",
        "description": "The `FirstName` and `LastName` parameters are always required in this request. All other parameters are optional, but note that any of the optional parameters could be required by a particular business, depending on how the business has configured the site settings.\r\n\r\nUse after calling the `GetRequiredClientFields` endpoint to make sure you are collecting all required pieces of information.",
        "operationId": "Client_AddClient",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/updateclient": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Update a client at a site.",
        "description": "Updates an existing client for a specific subscriber. Use this endpoint as follows:\r\n* If you need to update the `ReferredBy` parameter, use this endpoint after calling `GET ClientReferralTypes`.\r\n* When updating a client’s home location, use after calling `GET Locations`.\r\n* If you are updating a client’s stored credit card, use after calling `GET AcceptedCardTypes` so that you can make sure the card is a type that is accepted at the subscriber.\r\nIf this endpoint is used on a cross-regional site, passing in a client’s RSSID and email address creates a cross-regional link. This means that the client is created in cross-regional sites where the client does not exist and `GET CrossRegionalClientAssociations` returns all appropriate cross-regional sites. When `CrossRegionalUpdate` is omitted or set to `true`, the client’s updated information is propagated to all of the region’s sites. If `CrossRegionalUpdate` is set to `false`, only the local client is updated.\r\n\r\nNote that the following items cannot be updated for a cross-regional client:\r\n* `ClientIndexes`\r\n* `ClientRelationships`\r\n* `CustomClientFields`\r\n* `SalesReps`\r\n* `SendAccountEmails`\r\n* `SendAccountTexts`\r\n* `SendPromotionalEmails`\r\n* `SendPromotionalTexts`\r\n* `SendScheduleEmails`\r\n* `SendScheduleTexts`",
        "operationId": "Client_UpdateClient",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/updateclientvisit": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Update a client's visit.",
        "operationId": "Client_UpdateClientVisit",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/addarrival": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Add an arrival for a client.",
        "operationId": "Client_AddArrival",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/sendpasswordresetemail": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Send a password reset email to a client.",
        "operationId": "Client_SendPasswordResetEmail",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/contactlogs": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get contact logs on a client's account.",
        "description": "This endpoint contains a variety of filters that can return not just all contact logs, but also system-generated contact logs, contact logs assigned to specific staff members, and contact logs of specific types or subtypes.",
        "operationId": "Client_GetContactLogs",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client whose contact logs are being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filters the results to contact logs created before this date.<br />\r\nDefault: **the start date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.showSystemGenerated",
            "in": "query",
            "description": "When `true`, system-generated contact logs are returned in the results.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "Filters the results to return contact logs assigned to one or more staff IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filters the results to contact logs created on or after this date.<br />\r\nDefault: **the current date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.subtypeIds",
            "in": "query",
            "description": "Filters the results to contact logs assigned one or more of these subtype IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.typeIds",
            "in": "query",
            "description": "Filters the results to contact logs assigned one or more of these type IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/updateclientservice": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Update a client's purchase pricing option.",
        "description": "Updates the active date and/or expiration date of a client pricing option. This request requires staff user credentials. If the active date is modified, the expiration date is also modified accordingly. If the expiration date is modified, the active date is unchanged.",
        "operationId": "Client_UpdateClientService",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientdirectdebitinfo": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get direct debit info for a client.",
        "operationId": "Client_GetDirectDebitInfo",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Delete direct debit info for a client.",
        "operationId": "Client_DeleteDirectDebitInfo",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/addclientdirectdebitinfo": {
      "post": {
        "tags": [
          "Client"
        ],
        "operationId": "Client_AddClientDirectDebitInfo",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientrewards": {
      "get": {
        "tags": [
          "Client"
        ],
        "operationId": "Client_GetClientRewards",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client whose reward information is being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filters the results to rewards transactions created before this date.<br />\r\nDefault: **the start date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filters the results to rewards transactions created on or after this date.<br />\r\nDefault: **the current date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "operationId": "Client_UpdateClientRewards",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/clientcompleteinfo": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get Services, Contracts, MemberShips and Arrivals for Client as per requirement",
        "operationId": "Client_GetClientCompleteInfo",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The ID of the client to query.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "Used to retrieve a client’s data from multiple sites within an organization.\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filters results to pricing options that are valid on or before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.requiredClientData",
            "in": "query",
            "description": "Used to store the required type of data for particular client",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filters results to pricing options that are valid on or after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/contactlogtypes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get All Active Contact Log Types",
        "operationId": "Client_GetContactLogTypes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.contactLogTypeId",
            "in": "query",
            "description": "The ID of the Contact Log Type",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/deletecontactlog": {
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Delete client's contact log.",
        "operationId": "Client_DeleteContactLog",
        "parameters": [
          {
            "name": "request.clientId",
            "in": "query",
            "description": "The client ID of the client whose Contact Log is being deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.contactLogId",
            "in": "query",
            "description": "The Contact Log ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.test",
            "in": "query",
            "description": "When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.\r\nWhen `false`, the database is updated.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/sendautoemail": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Send a client a supported auto email",
        "operationId": "Client_SendAutoEmail",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/activeclientsmemberships": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a client's active memberships.",
        "operationId": "Client_GetActiveClientsMemberships",
        "parameters": [
          {
            "name": "request.clientIds",
            "in": "query",
            "description": "The ID's of the clients whose membership was requested.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientAssociatedSitesOffset",
            "in": "query",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.crossRegionalLookup",
            "in": "query",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The ID of the location where the requested membership was created.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/terminatecontract": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Terminate client contract",
        "operationId": "Client_TerminateContract",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/updateclientcontractautopays": {
      "post": {
        "tags": [
          "Client"
        ],
        "operationId": "Client_UpdateClientContractAutopays",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/client/suspendcontract": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Suspend client contract",
        "operationId": "Client_SuspendContract",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/enrollment/addclienttoenrollment": {
      "post": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Book a client into an enrollment.",
        "operationId": "Enrollment_AddClientToEnrollment",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/enrollment/enrollments": {
      "get": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Get enrollments scheduled at a site.",
        "description": "Returns a list of enrollments. An enrollment is a service, such as a workshop or an event, that a staff member offers to multiple students, who commit to coming to all or most of the scheduled sessions. Enrollments typically run for a limited time only.",
        "operationId": "Enrollment_GetEnrollments",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classScheduleIds",
            "in": "query",
            "description": "A list of the requested class schedule IDs. If omitted, all class schedule IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "The end of the date range. The response returns any active enrollments that occur on or before this day.<br />\r\nDefault: **StartDate**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "List of the IDs for the requested locations. If omitted, all location IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "List of the IDs for the requested programs. If omitted, all program IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "List of the IDs for the requested session types. If omitted, all session types IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "List of the IDs for the requested staff IDs. If omitted, all staff IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "The start of the date range. The response returns any active enrollments that occur on or after this day.<br />\r\nDefault: **today’s date**",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/enrollment/addenrollmentschedule": {
      "post": {
        "tags": [
          "Enrollment"
        ],
        "operationId": "Enrollment_AddEnrollmentSchedule",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/enrollment/updateenrollmentschedule": {
      "post": {
        "tags": [
          "Enrollment"
        ],
        "operationId": "Enrollment_UpdateEnrollmentSchedule",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/livestream/generateSignedUrl": {
      "post": {
        "tags": [
          "LiveStream"
        ],
        "summary": "Create an encrypted link to VWP live stream for third party integration customer.",
        "operationId": "LiveStream_GenerateSignedLiveStreamUrl",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/payroll/scheduledserviceearnings": {
      "get": {
        "tags": [
          "Payroll"
        ],
        "summary": "Get class payroll for staff members.",
        "description": "A staff authorization token is not required for this endpoint, but if one is passed, its permissions are honored. Depending on the access permissions configured for the staff member whose token is passed, the endpoint returns either only the payroll information for that staff member or it returns the payroll information for all staff members.\r\n\r\nNote that if a staff member is not paid for a class, earnings of zero are returned by this endpoint.\r\n\r\nNote that this endpoint calculates both bonus and no-reg rates for assistants.These rates are not supported by the Payroll report in the web interface.\r\n\r\nNote that this endpoint returns both the teacher’s adjusted rate and the assistant’s pay rate when the assistant is paid by the teacher.The Payroll report in the web interface only returns the teacher’s adjusted rate.",
        "operationId": "Payroll_GetScheduledServiceEarnings",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.scheduledServiceId",
            "in": "query",
            "description": "The ID for the instance of the service offered",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.scheduledServiceType",
            "in": "query",
            "description": "Defines a payroll filter for the type of service offered, either \"Class\", \"Appointment\", or \"Enrollment\".",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/payroll/timecards": {
      "get": {
        "tags": [
          "Payroll"
        ],
        "summary": "Get time card payroll for staff members.",
        "operationId": "Payroll_GetTimeCards",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/payroll/commissions": {
      "get": {
        "tags": [
          "Payroll"
        ],
        "summary": "Get commission payroll for staff members.",
        "description": "A staff authorization token is not required for this endpoint, but if one is passed, its permissions are honored. Depending on the access permissions configured for the staff member whose token is passed, the endpoint returns either only the payroll information for that staff member or it returns the payroll information for all staff members.",
        "operationId": "Payroll_GetCommissions",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/payroll/tips": {
      "get": {
        "tags": [
          "Payroll"
        ],
        "summary": "Get tips for staff members.",
        "operationId": "Payroll_GetTips",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/pickaspot/v1/class": {
      "get": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_ClassList",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/pickaspot/v1/class/{classId}": {
      "get": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_Class",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/pickaspot/v1/reservation/{pathInfo}": {
      "get": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_ReservationGet",
        "parameters": [
          {
            "name": "pathInfo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_ReservationPut",
        "parameters": [
          {
            "name": "pathInfo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_ReservationPost",
        "parameters": [
          {
            "name": "pathInfo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PickASpotv"
        ],
        "operationId": "PickASpotv_ReservationDelete",
        "parameters": [
          {
            "name": "pathInfo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/PricingOption/UpdatePricingOption": {
      "post": {
        "tags": [
          "PricingOption"
        ],
        "summary": "Update Pricing Option data such as name, details, price, discontinued using PricingOptionId(product id)",
        "operationId": "PricingOption_UpdatePricingOption",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/products": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get retail products available for purchase at a site.",
        "operationId": "Sale_GetProducts",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.categoryIds",
            "in": "query",
            "description": "A list of category IDs to filter by.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The location ID to use to determine the tax for the products that this request returns.<br />\r\nDefault: **online store**",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.productIds",
            "in": "query",
            "description": "An ID filter for products.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.searchText",
            "in": "query",
            "description": "A search filter, used for searching by term.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.sellOnline",
            "in": "query",
            "description": "When `true`, only products that can be sold online are returned.<br />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.subCategoryIds",
            "in": "query",
            "description": "A list of subcategory IDs to filter by.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update retail products available for purchase at a site.",
        "operationId": "Product_UpdateProducts",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/sales": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales completed at a site.",
        "operationId": "Sale_GetSales",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endSaleDateTime",
            "in": "query",
            "description": "Filters results to sales that happened before this date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.paymentMethodId",
            "in": "query",
            "description": "Filters results to sales paid for by the given payment method ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.saleId",
            "in": "query",
            "description": "Filters results to the requested sale ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.startSaleDateTime",
            "in": "query",
            "description": "Filters results to sales that happened after this date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/returnsale": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Retunn sale",
        "operationId": "Sale_ReturnSale",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/purchasecontract": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Purchase a contract for a client.",
        "description": "Allows a client to sign up for a contract or autopay using the information returned from the `GET Contracts` endpoint. The client can pay with a new credit card or with a stored credit card. The client must exist at the site specified before this call is made.\r\n\r\nThis endpoint allows a developer to specify whether a client pays now or pays on the `StartDate`.If you are building a client-facing experience, you should talk with the business owner to understand the owner’s policies before you give clients a choice of the two payment types.",
        "operationId": "Sale_PurchaseContract",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/checkoutshoppingcart": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Purchase pricing options, packages, retail products, or tips for a client.",
        "description": "This endpoint provides a wide range of functionality. For example, you can use it when a client purchases new pricing options, retail products, packages, and tips. You can also combine purchasing a new pricing option and many other functions, such as booking a client into a class, booking a new appointment for a client, enrolling a client into an enrollment or course, or reconciling an unpaid, already booked appointment or class. Use this call when a client purchases:\r\n* a pricing option, after calling `GET Services` and choosing a specific pricing option’s ID\r\n* a retail product, after calling `GET Products` and choosing a specific retail product’s ID\r\n* a package, after calling `GET Packages` and choosing a specific package’s ID\r\n* a tip to give to a staff member, after calling `GET Staff` and choosing a specific staff member ID, and the amount that the client wants to tip\r\nThe documentation provides explanations of the request body and response, as well as the cart item metadata, payment item metadata, and purchased cart items.",
        "operationId": "Sale_CheckoutShoppingCart",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/giftcards": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get gift cards available for purchase at a site.",
        "operationId": "Sale_GetGiftCards",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.ids",
            "in": "query",
            "description": "Filters the results to the requested gift card IDs.<br />\r\nDefault: **all** gift cards.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.includeCustomLayouts",
            "in": "query",
            "description": "When `true`, includes custom gift card layouts.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "When included, returns gift cards that are sold at the provided location ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.soldOnline",
            "in": "query",
            "description": "When `true`, only returns gift cards that are sold online.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/services": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get pricing options available for purchase at a site",
        "operationId": "Sale_GetServices",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.classId",
            "in": "query",
            "description": "Filters to the pricing options for the specified class ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.classScheduleId",
            "in": "query",
            "description": "Filters to the pricing options for the specified class schedule ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.hideRelatedPrograms",
            "in": "query",
            "description": "When `true`, indicates that pricing options of related programs are omitted from the response.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.includeDiscontinued",
            "in": "query",
            "description": "When `true`, indicates that the filtered pricing option list includes discontinued pricing options.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.includeSaleInContractOnly",
            "in": "query",
            "description": "When `true`, indicates that the filtered pricing option list includes sale in contract only pricing options.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "When specified, for each returned pricing option, `TaxRate` and `TaxIncluded` are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate` is set to zero.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "Filters to pricing options with the specified program IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sellOnline",
            "in": "query",
            "description": "When `true`, filters to the pricing options that can be sold online.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.serviceIds",
            "in": "query",
            "description": "Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "Filters to the pricing options with the specified session types IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "Sets `Price` and `OnlinePrice` to the particular pricing of a specific staff member, if allowed by the business.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sale"
        ],
        "summary": "Update unit price and online price of provided services.",
        "operationId": "Sale_UpdateServices",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/productsinventory": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get retail products inventory data available at a site.",
        "operationId": "Sale_GetProductsInventory",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.barcodeIds",
            "in": "query",
            "description": "An IDs is barcodeId to filter for products inventory data.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "description": "The location IDs to use to determine the inventory data of the product of specific location.<br />\r\nDefault: **online store**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.productIds",
            "in": "query",
            "description": "An IDs filter for products inventory data.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/acceptedcardtypes": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get credit cards types that a site accepts.",
        "description": "Gets a list of card types that the site accepts. You can also use `GET Sites` to return the Site object, which contains individual accepted card types for requested sites.\r\n\r\nThis endpoint has no query parameters.The response returns a list of strings. Possible values are:\r\n* Visa\r\n* MasterCard\r\n* Discover\r\n* AMEX",
        "operationId": "Sale_GetAcceptedCardTypes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/contracts": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get contracts available for purchase at a site.",
        "operationId": "Sale_GetContracts",
        "parameters": [
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The ID of the location that has the requested contracts and AutoPay options.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.consumerId",
            "in": "query",
            "description": "The ID of the client.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.contractIds",
            "in": "query",
            "description": "When included, the response only contains details about the specified contract IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.promoCode",
            "in": "query",
            "description": "PromoCode to apply",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.soldOnline",
            "in": "query",
            "description": "When `true`, the response only contains details about contracts and AutoPay options that can be sold online.<br />\r\nWhen `false`, only contracts that are not intended to be sold online are returned.<br />\r\nDefault: **all contracts**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/custompaymentmethods": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get payment methods that can be used to pay for sales at a site.",
        "operationId": "Sale_GetCustomPaymentMethods",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/purchaseaccountcredit": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Purchases account credit for a client",
        "operationId": "Sale_PurchaseAccountCredit",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/purchasegiftcard": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Purchase a gift card for a client.",
        "description": "Allows a client to purchase a gift card from a business in a variety of designs. The card can be emailed to the recipient on a specific day, and a card title and a personal message can be added.",
        "operationId": "Sale_PurchaseGiftCard",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/packages": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get packages available for purchase at a site.",
        "description": "A package is typically used to combine multiple services and/or products into a single offering. Staff members can check out multiple appointments while selling the package, and can discount the items included. For example, a spa might bundle a massage, a pedicure, a manicure, a facial, and a few selected beauty products into a package.",
        "operationId": "Sale_GetPackages",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The location ID to use to determine the tax for the products that this request returns.<br />\r\nDefault: **online store**",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.packageIds",
            "in": "query",
            "description": "A list of the packages IDs to filter by.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.sellOnline",
            "in": "query",
            "description": "When `true`, only returns products that can be sold online.<br />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/giftcardbalance": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get a gift card's remaining balance.",
        "operationId": "Sale_GetGiftCardBalance",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "barcodeId",
            "in": "query",
            "description": "The barcode ID of the gift card for which you want the balance.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/transactions": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get transactions completed at a site.",
        "operationId": "Sale_GetTransactions",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.clientId",
            "in": "query",
            "description": "Filters results to the requested client ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "Filters results to the requested location ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.saleId",
            "in": "query",
            "description": "Filters results to the requested sale ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "request.status",
            "in": "query",
            "description": "Filters results to the requested status.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.transactionEndDateTime",
            "in": "query",
            "description": "Filters results to transactions that happened before this date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.transactionId",
            "in": "query",
            "description": "Filters results to the requested transaction ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.transactionStartDateTime",
            "in": "query",
            "description": "Filters results to transactions that happened after this date and time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/updateproductprice": {
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "Update retail product's unit and online price.",
        "operationId": "Sale_UpdateProductPrice",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/updatesaledate": {
      "put": {
        "tags": [
          "Sale"
        ],
        "operationId": "Sale_UpdateSaleDate",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/sale/initializecreditcardentry": {
      "post": {
        "tags": [
          "Sale"
        ],
        "operationId": "Sale_InitializeCreditCardEntry",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/sites": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get all sites that can be accessed by an API Key.",
        "description": "Gets a list of sites that the developer has permission to view.\r\n* Passing in no `SiteIds` returns all sites that the developer has access to.\r\n* Passing in one `SiteIds` returns more detailed information about the specified site.",
        "operationId": "Site_GetSites",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.siteIds",
            "in": "query",
            "description": "List of the requested site IDs. When omitted, returns all sites that the source has access to.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/sessiontypes": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get the session types used at a site.",
        "operationId": "Site_GetSessionTypes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.onlineOnly",
            "in": "query",
            "description": "When `true`, indicates that only the session types that can be booked online should be returned.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.programIDs",
            "in": "query",
            "description": "Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/locations": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get locations for a site.",
        "operationId": "Site_GetLocations",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/programs": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get service categories offered at a site.",
        "operationId": "Site_GetPrograms",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.onlineOnly",
            "in": "query",
            "description": "If `true`, filters results to show only those programs that are shown online.<br />\r\nIf `false`, all programs are returned.<br />\r\nDefault: **false**",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.scheduleType",
            "in": "query",
            "description": "A schedule type used to filter the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "Class",
                "Enrollment",
                "Appointment",
                "Resource",
                "Media",
                "Arrival"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/resources": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get resources used at a site.",
        "operationId": "Site_GetResources",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.endDateTime",
            "in": "query",
            "description": "The time the resource ends. This parameter is ignored if `EndDateTime` or `LocationID` is not set.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "The location of the resource. This parameter is ignored if `EndDateTime` or `LocationID` is not set.<br />\r\nDefault: **all**",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.sessionTypeIds",
            "in": "query",
            "description": "List of session type IDs.<br />\r\nDefault: **all**",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "The time the resource starts. This parameter is ignored if `EndDateTime` or `LocationID` is not set.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/activationcode": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get an activation code for a site.",
        "description": "Before you can use this endpoint, MINDBODY must approve your developer account for live access. If you have finished testing in the sandbox and are ready to begin working with MINDBODY customers, log into your account and request to go live.\r\n\r\nSee [Accessing Business Data From MINDBODY](https://developers.mindbodyonline.com/PublicDocumentation/V6#accessing-business-data) for more information about the activation code and how to use it.\r\n\r\nOnce you are approved, this endpoint returns an activation code.This endpoint supports only one site per call.",
        "operationId": "Site_GetActivationCode",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/memberships": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get the memberships at a site.",
        "operationId": "Site_GetMemberships",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.membershipIds",
            "in": "query",
            "description": "Filters results to memberships that belong to one of the given membership IDs. If omitted, all memberships are returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/genders": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get the gender options at a site.",
        "operationId": "Site_GetGenders",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/addpromocode": {
      "post": {
        "tags": [
          "Site"
        ],
        "summary": "Add promo code to a site.",
        "operationId": "Site_AddPromoCode",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/promocodes": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get promocodes for a site.",
        "operationId": "Site_GetPromoCodes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.activeOnly",
            "in": "query",
            "description": "Filter only active, defaults to true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.endDate",
            "in": "query",
            "description": "Filter by activation end date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.onlineOnly",
            "in": "query",
            "description": "Filter only the ones that can be sold online",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.startDate",
            "in": "query",
            "description": "Filter by activation start date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/categories": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get categories for site.",
        "operationId": "Site_GetCategories",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "The requested Active type categories. true indicates for Active Categories and false indicates for Deactivated Categories.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.categoryIds",
            "in": "query",
            "description": "The requested category IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.service",
            "in": "query",
            "description": "The requested Service type. true indicates for Revenue Categories and false indicates for Product Revenue Categories.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.subCategoryIds",
            "in": "query",
            "description": "The requested sub category IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/paymenttypes": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get payment types for a site.",
        "operationId": "Site_GetPaymentTypes",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "The requested Active payment types. true indicates for Active payment types and false indicates for Deactivated payment types.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/relationships": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Returns all active relationships of the site.",
        "operationId": "Site_GetRelationships",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "The requested Active type Relationships. true indicates for Active Relationships and false indicates for Deactivated Relationships.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/mobileproviders": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Gets a list of active mobile providers for the site.",
        "operationId": "Site_GetMobileProviders",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "When true, the response only contains mobile providers which are activated. When false, only deactivated mobile providers are returned. Default: All Mobile Providers",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/site/prospectstages": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Gets a list of prospect stages for a site.",
        "operationId": "Site_GetProspectStages",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.active",
            "in": "query",
            "description": "The requested Active type Prospect Stages. true indicates for Active Prospect Stages and false indicates for Deactivated Prospect Stages.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/staff": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get staff members at a site.",
        "operationId": "Staff_GetStaff",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.filters",
            "in": "query",
            "description": "Filters to apply to the search. Possible values are:\r\n* StaffViewable\r\n* AppointmentInstructor\r\n* ClassInstructor\r\n* Male\r\n* Female",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.locationId",
            "in": "query",
            "description": "Return only staff members that are available at the specified location. You must supply a valid `SessionTypeID` and `StartDateTime` to use this parameter.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.sessionTypeId",
            "in": "query",
            "description": "Return only staff members that are available for the specified session type. You must supply a valid `StartDateTime` and `LocationID` to use this parameter.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.staffIds",
            "in": "query",
            "description": "A list of the requested staff IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "request.startDateTime",
            "in": "query",
            "description": "Return only staff members that are available at the specified date and time. You must supply a valid `SessionTypeID` and `LocationID` to use this parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/staffpermissions": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get configured staff permissions for a staff member.",
        "operationId": "Staff_GetStaffPermissions",
        "parameters": [
          {
            "name": "request.staffId",
            "in": "query",
            "description": "The ID of the staff member whose permissions you want to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/imageurl": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get image URLs for the given staff ID in the request.",
        "operationId": "Staff_GetStaffImageURL",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.staffId",
            "in": "query",
            "description": "A requested staff ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/updatestaffpermissions": {
      "post": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_UpdateStaffPermissions",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/addstaff": {
      "post": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_AddStaff",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/updatestaff": {
      "post": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_UpdateStaff",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/staffavailability": {
      "post": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_AddStaffAvailability",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/public/v{version}/staff/sessiontypes": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get the session types used at a site for a staff member.",
        "operationId": "Staff_GetStaffSessionTypes",
        "parameters": [
          {
            "name": "request.staffId",
            "in": "query",
            "description": "Filters returned session types to only those the staff member performs.  Staff should be active.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.onlineOnly",
            "in": "query",
            "description": "Only session types that can be booked online.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.programIds",
            "in": "query",
            "description": "Filters results to session types that belong in program IDs.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/assignsessiontype": {
      "post": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_AssignStaffSessionType",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/staff/salesreps": {
      "get": {
        "tags": [
          "Staff"
        ],
        "operationId": "Staff_GetSalesReps",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "request.activeOnly",
            "in": "query",
            "description": "This is to filter out the active sales rep from the list",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.limit",
            "in": "query",
            "description": "Number of results to include, defaults to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.offset",
            "in": "query",
            "description": "Page offset, defaults to 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "request.salesRepNumbers",
            "in": "query",
            "description": "This is the list of rep numbers to be fetched",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/usertoken/issue": {
      "post": {
        "tags": [
          "UserToken"
        ],
        "summary": "Get a staff user token.",
        "operationId": "UserToken_Issue",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/v{version}/usertoken/revoke": {
      "delete": {
        "tags": [
          "UserToken"
        ],
        "summary": "Revoke a user token.",
        "description": "Revokes the user token in the Authorization header.",
        "operationId": "UserToken_Revoke",
        "parameters": [
          {
            "name": "siteId",
            "in": "header",
            "description": "ID of the site from which to pull data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "A staff user authorization token.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.mindbodyonline.com"
    }
  ],
  "components": {
    "requestBodies": {
      "Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          },
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest"
            }
          }
        },
        "required": true
      },
      "Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          },
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "API-Key": {
        "type": "apiKey",
        "description": "API Key Authentication",
        "name": "API-Key",
        "in": "header"
      }
    },
    "schemas": {
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentRequest": {
        "required": [
          "ClientId",
          "LocationId",
          "SessionTypeId",
          "StaffId",
          "StartDateTime"
        ],
        "type": "object",
        "properties": {
          "ApplyPayment": {
            "description": "When `true`, indicates that a payment should be applied to the appointment. \r\n<br />Default: **true**",
            "type": "boolean"
          },
          "ClientId": {
            "description": "The RRSID of the client for whom the new appointment is being made.",
            "type": "string"
          },
          "Duration": {
            "format": "int32",
            "description": "The duration of the appointment. This parameter is used to change the default duration of an appointment.",
            "type": "integer"
          },
          "Execute": {
            "description": "The action taken to add this appointment.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end date and time of the new appointment. <br />\r\nDefault: **StartDateTime**, offset by the staff member’s default appointment duration.",
            "type": "string"
          },
          "GenderPreference": {
            "description": "The client’s service provider gender preference.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the new appointment is to take place.",
            "type": "integer"
          },
          "Notes": {
            "description": "Any general notes about this appointment.",
            "type": "string"
          },
          "ProviderId": {
            "description": "If a user has Complementary and Alternative Medicine features enabled, this parameter assigns a provider ID to the appointment.",
            "type": "string"
          },
          "ResourceIds": {
            "description": "A list of resource IDs to associate with the new appointment.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SendEmail": {
            "description": " Whether to send client an email for cancellations. An email is sent only if the client has an email address and automatic emails have been set up. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The session type associated with the new appointment.",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who is adding the new appointment.",
            "type": "integer"
          },
          "StaffRequested": {
            "description": "When `true`, indicates that the staff member was requested specifically by the client.",
            "type": "boolean"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The start date and time of the new appointment.",
            "type": "string"
          },
          "Test": {
            "description": " When true, indicates that the method is to be validated, but no new appointment data is added. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "IsWaitlist": {
            "description": "Whether to add appointment to waitlist.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentResponse": {
        "type": "object",
        "properties": {
          "Appointment": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Appointment"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Appointment": {
        "description": "Contains information about an appointment.",
        "type": "object",
        "properties": {
          "GenderPreference": {
            "description": "The preferred gender of the appointment provider.",
            "enum": [
              "None",
              "Female",
              "Male"
            ],
            "type": "string"
          },
          "Duration": {
            "format": "int32",
            "description": "The duration of the appointment.",
            "type": "integer"
          },
          "ProviderId": {
            "description": "If a user has Complementary and Alternative Medicine features enabled, this property indicates the provider assigned to the appointment.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The unique ID of the appointment.",
            "type": "integer"
          },
          "Status": {
            "description": "The status of this appointment.",
            "enum": [
              "None",
              "Requested",
              "Booked",
              "Completed",
              "Confirmed",
              "Arrived",
              "NoShow",
              "Cancelled",
              "LateCancelled"
            ],
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The date and time the appointment is to start.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time the appointment is to end.",
            "type": "string"
          },
          "Notes": {
            "description": "Any notes associated with the appointment.",
            "type": "string"
          },
          "StaffRequested": {
            "description": "When `true`, indicates that the staff member was requested specifically by the client.",
            "type": "boolean"
          },
          "ProgramId": {
            "format": "int32",
            "description": "The ID of the program to which this appointment belongs.",
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The ID of the session type of this appointment.",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where this appointment is to take place.",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member providing the service for this appointment.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The RSSID of the client who is booked for this appointment.",
            "type": "string"
          },
          "FirstAppointment": {
            "description": "When `true`, indicates that this is the client’s first appointment at this site.",
            "type": "boolean"
          },
          "IsWaitlist": {
            "description": "Whether to add appointment to waitlist.",
            "type": "boolean"
          },
          "WaitlistEntryId": {
            "format": "int64",
            "description": "ID of the appointment waitlist.",
            "type": "integer"
          },
          "ClientServiceId": {
            "format": "int64",
            "description": "The ID of the pass on the client’s account that is to pay for this appointment.",
            "type": "integer"
          },
          "Resources": {
            "description": "The resources this appointment is to use.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Resource"
            }
          },
          "AddOns": {
            "description": "Any AddOns associated with the appointment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddOnSmall"
            }
          },
          "OnlineDescription": {
            "description": "Online Description associated with the appointment",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Resource": {
        "description": "Contains information about resources, such as rooms.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the resource.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the resource.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AddOnSmall": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The unique ID of the appointment add on.",
            "type": "integer"
          },
          "Name": {
            "description": "The Name of the appointment add on.",
            "type": "string"
          },
          "StaffId": {
            "format": "int64",
            "description": "The unique ID of the staff for the add on.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentRequest": {
        "required": [
          "AppointmentId"
        ],
        "type": "object",
        "properties": {
          "AppointmentId": {
            "format": "int64",
            "description": "The appointments unique ID.",
            "type": "integer"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end date and time of the new appointment. \r\n<br />Default: **StartDateTime**, offset by the staff member’s default appointment duration.",
            "type": "string"
          },
          "Execute": {
            "description": "The action taken to add this appointment.",
            "type": "string"
          },
          "GenderPreference": {
            "description": "The client’s service provider gender preference.",
            "type": "string"
          },
          "Notes": {
            "description": "Any general notes about this appointment.",
            "type": "string"
          },
          "ProviderId": {
            "description": "If a user has Complementary and Alternative Medicine features enabled, this parameter assigns a provider ID to the appointment.",
            "type": "string"
          },
          "ResourceIds": {
            "description": "A list of resource IDs to associate with the new appointment.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SendEmail": {
            "description": "Whether to send client an email for cancellations. An email is sent only if the client has an email address and automatic emails have been set up. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The session type associated with the new appointment.",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who is adding the new appointment.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The start date and time of the new appointment.",
            "type": "string"
          },
          "Test": {
            "description": "When `true`, indicates that the method is to be validated, but no new appointment data is added. \r\n<br />Default: **false**",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAppointmentResponse": {
        "type": "object",
        "properties": {
          "Appointment": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Appointment"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesRequest": {
        "required": [
          "SessionTypeId"
        ],
        "type": "object",
        "properties": {
          "SessionTypeId": {
            "format": "int32",
            "description": "required requested session type ID.",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "optional requested location ID.",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "optional requested staff ID.",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAvailableDatesResponse": {
        "description": "",
        "type": "object",
        "properties": {
          "AvailableDates": {
            "description": "A list of dates where scheduled appointment availability was found after applying request filters.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsRequest": {
        "required": [
          "SessionTypeIds"
        ],
        "type": "object",
        "properties": {
          "SessionTypeIds": {
            "description": "A list of the requested session type IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationIds": {
            "description": "A list of the requested location IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StaffIds": {
            "description": "A list of the requested staff IDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "type": "string"
          },
          "AppointmentId": {
            "format": "int64",
            "description": "If provided, filters out the appointment with this ID.",
            "type": "integer"
          },
          "IgnoreDefaultSessionLength": {
            "description": "When `true`, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.<br />\r\nWhen `false`, only availabilities that have the default session length return.",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetBookableItemsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Availabilities": {
            "description": "Contains information about the availabilities for appointment booking.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Availability"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PaginationResponse": {
        "type": "object",
        "properties": {
          "RequestedLimit": {
            "format": "int32",
            "description": "Limit from pagination request",
            "type": "integer"
          },
          "RequestedOffset": {
            "format": "int32",
            "description": "Offset from pagination request",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "description": "Number of results returned in this response",
            "type": "integer"
          },
          "TotalResults": {
            "format": "int32",
            "description": "Total number of results in dataset",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Availability": {
        "description": "A staff availability entry",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the availability.",
            "type": "integer"
          },
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "SessionType": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SessionType"
          },
          "Programs": {
            "description": "Contains information about the programs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The date and time the availability starts.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time the availability ends.",
            "type": "string"
          },
          "BookableEndDateTime": {
            "format": "date-time",
            "description": "The time of day that the last appointment can start.",
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "PrepTime": {
            "format": "int32",
            "description": "Prep time in minutes",
            "type": "integer"
          },
          "FinishTime": {
            "format": "int32",
            "description": "Finish time in minutes",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Staff": {
        "type": "object",
        "properties": {
          "Address": {
            "description": "The address of the staff member who is teaching the class.",
            "type": "string"
          },
          "AppointmentInstructor": {
            "description": "When `true`, indicates that the staff member offers appointments.<br />\r\nWhen `false`, indicates that the staff member does not offer appointments.",
            "type": "boolean"
          },
          "AlwaysAllowDoubleBooking": {
            "description": "When `true`, indicates that the staff member can be scheduled for overlapping services.<br />\r\nWhen `false`, indicates that the staff can only be scheduled for one service at a time in any given time-frame.",
            "type": "boolean"
          },
          "Bio": {
            "description": "The staff member’s biography. This string contains HTML.",
            "type": "string"
          },
          "City": {
            "description": "The staff member’s city.",
            "type": "string"
          },
          "Country": {
            "description": "The staff member’s country.",
            "type": "string"
          },
          "Email": {
            "description": "The staff member’s email address.",
            "type": "string"
          },
          "FirstName": {
            "description": "The staff member’s first name.",
            "type": "string"
          },
          "DisplayName": {
            "description": "The staff member’s Nickname.",
            "type": "string"
          },
          "HomePhone": {
            "description": "The staff member’s home phone number.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The ID assigned to the staff member.",
            "type": "integer"
          },
          "IndependentContractor": {
            "description": "When `true`, indicates that the staff member is an independent contractor.\r\nWhen `false`, indicates that the staff member is not an independent contractor.",
            "type": "boolean"
          },
          "IsMale": {
            "description": "When `true`, indicates that the staff member is male.\r\nWhen `false`, indicates that the staff member is female.",
            "type": "boolean"
          },
          "LastName": {
            "description": "The staff member’s last name.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The staff member’s mobile phone number.",
            "type": "string"
          },
          "Name": {
            "description": "The staff member’s name.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The staff member’s postal code.",
            "type": "string"
          },
          "ClassTeacher": {
            "description": "When `true`, indicates that the staff member can teach classes.\r\nWhen `false`, indicates that the staff member cannot teach classes.",
            "type": "boolean"
          },
          "SortOrder": {
            "format": "int32",
            "description": "If configured by the business owner, this field determines a staff member’s weight when sorting. Use this field to sort staff members on your interface.",
            "type": "integer"
          },
          "State": {
            "description": "The staff member’s state.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The staff member’s work phone number.",
            "type": "string"
          },
          "ImageUrl": {
            "description": "The URL of the staff member’s image, if one has been uploaded.",
            "type": "string"
          },
          "ClassAssistant": {
            "description": "Is the staff an assistant",
            "type": "boolean"
          },
          "ClassAssistant2": {
            "description": "Is the staff an assistant2",
            "type": "boolean"
          },
          "EmploymentStart": {
            "format": "date-time",
            "description": "The start date of employment",
            "type": "string"
          },
          "EmploymentEnd": {
            "format": "date-time",
            "description": "The end date of employment",
            "type": "string"
          },
          "ProviderIDs": {
            "description": "A list of ProviderIds for the staff.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Rep": {
            "description": "return true if staff is sales Rep 1 else false.",
            "type": "boolean"
          },
          "Rep2": {
            "description": "return true if staff is sales Rep 2 else false.",
            "type": "boolean"
          },
          "Rep3": {
            "description": "return true if staff is sales Rep 3 else false.",
            "type": "boolean"
          },
          "Rep4": {
            "description": "return true if staff is sales Rep 4 else false.",
            "type": "boolean"
          },
          "Rep5": {
            "description": "return true if staff is sales Rep 5 else false.",
            "type": "boolean"
          },
          "Rep6": {
            "description": "return true if staff is sales Rep 6 else false.",
            "type": "boolean"
          },
          "StaffSettings": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffSetting"
          },
          "Appointments": {
            "description": "A list of appointments for the staff.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Appointment"
            }
          },
          "Unavailabilities": {
            "description": "A list of unavailabilities for the staff.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Unavailability"
            }
          },
          "Availabilities": {
            "description": "A list of availabilities for the staff.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Availability"
            }
          },
          "EmpID": {
            "description": "The EmpID assigned to the staff member.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SessionType": {
        "type": "object",
        "properties": {
          "Type": {
            "description": "Contains the class description session type.",
            "enum": [
              "All",
              "Class",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "DefaultTimeLength": {
            "format": "int32",
            "description": "The default amount of time that a session of this type typically lasts.",
            "type": "integer"
          },
          "StaffTimeLength": {
            "format": "int32",
            "description": "The amount of time that a session of this type will last for a specific Staff (when applicable.)",
            "type": "integer"
          },
          "Id": {
            "format": "int32",
            "description": "This session type’s unique ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this session type.",
            "type": "string"
          },
          "OnlineDescription": {
            "description": "The OnlineDescription of this session type.",
            "type": "string"
          },
          "NumDeducted": {
            "format": "int32",
            "description": "The number of sessions that this session type deducts from the pricing option used to pay for this type of session.",
            "type": "integer"
          },
          "ProgramId": {
            "format": "int32",
            "description": "This session type’s service category ID.",
            "type": "integer"
          },
          "Category": {
            "description": "This session type’s category.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "This session type’s category ID.",
            "type": "integer"
          },
          "Subcategory": {
            "description": "This session type’s subcategory.",
            "type": "string"
          },
          "SubcategoryId": {
            "format": "int32",
            "description": "This session type’s subcategory ID.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Program": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The service category’s ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this service category.",
            "type": "string"
          },
          "ScheduleType": {
            "description": "The service category’s schedule type.",
            "enum": [
              "All",
              "Class",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "CancelOffset": {
            "format": "int32",
            "description": "The offset to use for the service category.",
            "type": "integer"
          },
          "ContentFormats": {
            "description": "The content delivery platform(s) used by the service category.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Location": {
        "type": "object",
        "properties": {
          "AdditionalImageURLs": {
            "description": "A list of URLs of any images associated with this location.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Address": {
            "description": "The first line of the location’s street address.",
            "type": "string"
          },
          "Address2": {
            "description": "A second address line for the location’s street address, if needed.",
            "type": "string"
          },
          "Amenities": {
            "description": "A list of strings representing amenities available at the location.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Amenity"
            }
          },
          "BusinessDescription": {
            "description": "The business description for the location, as configured by the business owner.",
            "type": "string"
          },
          "City": {
            "description": "The location’s city.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the location.",
            "type": "string"
          },
          "HasClasses": {
            "description": "When `true`, indicates that classes are held at this location.<br />\r\nWhen `false`, Indicates that classes are not held at this location.",
            "type": "boolean"
          },
          "Id": {
            "format": "int32",
            "description": "The ID assigned to this location.",
            "type": "integer"
          },
          "Latitude": {
            "format": "double",
            "description": "The location’s latitude.",
            "type": "number"
          },
          "Longitude": {
            "format": "double",
            "description": "The location’s longitude.",
            "type": "number"
          },
          "Name": {
            "description": "The name of this location.",
            "type": "string"
          },
          "Phone": {
            "description": "The location’s phone number.",
            "type": "string"
          },
          "PhoneExtension": {
            "description": "The location’s phone extension.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The location’s postal code.",
            "type": "string"
          },
          "SiteID": {
            "format": "int32",
            "description": "The ID number assigned to this location.",
            "type": "integer"
          },
          "StateProvCode": {
            "description": "The location’s state or province code.",
            "type": "string"
          },
          "Tax1": {
            "format": "float",
            "description": "A decimal representation of the location’s first tax rate. Tax properties are provided to apply all taxes to the purchase price that the purchase is subject to. Use as many tax properties as needed to represent all the taxes that apply in the location. Enter a decimal number that represents the appropriate tax rate. For example, for an 8% sales tax, enter 0.08.",
            "type": "number"
          },
          "Tax2": {
            "format": "float",
            "description": "A decimal representation of the location’s second tax rate. See the example in the description of Tax1.",
            "type": "number"
          },
          "Tax3": {
            "format": "float",
            "description": "A decimal representation of the location’s third tax rate. See the example in the description of Tax1.",
            "type": "number"
          },
          "Tax4": {
            "format": "float",
            "description": "A decimal representation of the location’s fourth tax rate. See the example in the description of Tax1.",
            "type": "number"
          },
          "Tax5": {
            "format": "float",
            "description": "A decimal representation of the location’s fifth tax rate. See the example in the description of Tax1.",
            "type": "number"
          },
          "TotalNumberOfRatings": {
            "format": "int32",
            "description": "The number of reviews that clients have left for this location.",
            "type": "integer"
          },
          "AverageRating": {
            "format": "double",
            "description": "The average rating for the location, out of five stars.",
            "type": "number"
          },
          "TotalNumberOfDeals": {
            "format": "int64",
            "description": "The number of distinct introductory pricing options available for purchase at this location.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffSetting": {
        "type": "object",
        "properties": {
          "UseStaffNicknames": {
            "type": "boolean"
          },
          "ShowStaffLastNamesOnSchedules": {
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Unavailability": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the unavailability.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The date and time the unavailability starts.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time the unavailability ends.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the unavailability.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Amenity": {
        "description": "Definition of a location amenity",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID number of the amenity.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the amenity, for example, food or lockers.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesRequest": {
        "type": "object",
        "properties": {
          "ScheduleType": {
            "description": "Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.",
            "enum": [
              "All",
              "Class",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "SessionTypeIds": {
            "description": "Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartTime": {
            "format": "date-time",
            "description": "Filters results to times that start on or after this time on the current date. Any date provided is ignored.\r\n<br />Default: **00:00:00**",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "description": "Filters results to times that end on or before this time on the current date. Any date provided is ignored..\r\n<br />Default: **23:59:59**",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetActiveSessionTimesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ActiveSessionTimes": {
            "description": "List of available start times for active sessions. Note the following:\r\n* The times returned represent possibilities for scheduling a session, not necessarily currently scheduled sessions.\r\n* The response includes either all schedule types or those filtered by supplying `ScheduleType` or `SessionTypeIds`.\r\n* Each session has an associated schedule type, but when you supply `SessionTypeIds`, they may map to one or more of the schedule types.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsRequest": {
        "type": "object",
        "properties": {
          "LocationIds": {
            "description": "A list of requested location IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StaffIds": {
            "description": "A list of requested staff IDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date of the requested date range. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date of the requested date range. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "IgnorePrepFinishTimes": {
            "description": "When `true`, appointment preparation and finish unavailabilities are not returned. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetScheduleItemsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "StaffMembers": {
            "description": "Contains information about staff members with schedule items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAppointmentOptionsResponse": {
        "type": "object",
        "properties": {
          "Options": {
            "description": "Contains information about the appointment options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentOption"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentOption": {
        "description": "An appointment option name/value pair",
        "type": "object",
        "properties": {
          "DisplayName": {
            "description": "The name displayed for this appointment option.",
            "type": "string"
          },
          "Name": {
            "description": "The name given to this option.",
            "type": "string"
          },
          "Value": {
            "description": "The value of the option.",
            "type": "string"
          },
          "Type": {
            "description": "The data type of the option value.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsRequest": {
        "type": "object",
        "properties": {
          "AppointmentIds": {
            "description": "A list of the requested appointment IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationIds": {
            "description": "A list of the requested location IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date of the requested date range. If omitted, the default is used. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date of the requested date range. \r\n<br />Default: **StartDate**",
            "type": "string"
          },
          "StaffIds": {
            "description": "List of staff IDs to be returned. Use a value of zero to return all staff appointments.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ClientId": {
            "description": "The client ID to be returned.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetStaffAppointmentsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Appointments": {
            "description": "Contains information about appointments and their details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Appointment"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsRequest": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int32",
            "description": "Optionally filter add ons that can be performed by this staff",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.GetAddOnsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "AddOns": {
            "description": "Contains information about the availabilities for appointment booking.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AppointmentAddOn"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentAddOn": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "NumDeducted": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryId": {
            "format": "int32",
            "type": "integer"
          },
          "Category": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnRequest": {
        "description": "Creates an add-on for an appointment",
        "type": "object",
        "properties": {
          "ApplyPayment": {
            "description": "Currently not supported Apply Payment for this add-on service.  Optional defaults to true",
            "type": "boolean"
          },
          "AppointmentId": {
            "format": "int64",
            "description": "The unique identifier for the appointment we are adding on to",
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The service we are adding on to the appointment",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "Optional.  The staff performing the service will default to the appointment staff if unspecified",
            "type": "integer"
          },
          "Test": {
            "description": "Optional.  When true only performs validation of the request.  Defaults to False.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAppointmentAddOnResponse": {
        "type": "object",
        "properties": {
          "AppointmentId": {
            "format": "int64",
            "description": "This is the id of the main appointment we added on to",
            "type": "integer"
          },
          "AddOnAppointmentId": {
            "format": "int64",
            "description": "This is the id for the newly created add-on appointment",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistRequest": {
        "required": [
          "WaitlistEntryIds"
        ],
        "type": "object",
        "properties": {
          "WaitlistEntryIds": {
            "description": "A list of waiting list IDs to remove from waiting lists.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveFromWaitlistResponse": {
        "type": "object",
        "properties": {}
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityRequest": {
        "description": "This is the update avaialability request coming DTO",
        "type": "object",
        "properties": {
          "AvailabilityIds": {
            "description": "Availability Ids that are to be updated",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "PublicDisplay": {
            "description": "Choice that decides whether the availablity should be publicly visible, masked or hidden.",
            "enum": [
              "Hide",
              "Show",
              "Mask"
            ],
            "type": "string"
          },
          "DaysOfWeek": {
            "description": "The day of the week",
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            }
          },
          "ProgramIds": {
            "description": "The program Ids",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end date and time",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location id",
            "type": "integer"
          },
          "UnavailableDescription": {
            "description": "The description for the unavailability",
            "type": "string"
          },
          "Test": {
            "description": "The test flag",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.UpdateAvailabilityResponse": {
        "description": "This is the update avaialability response",
        "type": "object",
        "properties": {
          "StaffMembers": {
            "description": "This is the success list of the trainer availability",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ApiError"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ApiError": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Code": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesRequest": {
        "type": "object",
        "properties": {
          "Test": {
            "description": "Whether to use test mode. When test mode is enabled, the method will be validated, \r\nbut no availability data will be added or updated.<br />\r\n(optional) Defaults to false.",
            "type": "boolean"
          },
          "LocationID": {
            "format": "int32",
            "description": "Location of availability.\r\n<br />Not used when IsUnavailable is true.",
            "type": "integer"
          },
          "StaffIDs": {
            "description": "A list of requested staff IDs.<br />\r\n(optional) Defaults to staff ID of user credentials. Use 0 for all.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ProgramIDs": {
            "description": "A list of program IDs.<br />\r\n(optional) Defaults to all.\r\n<br />Not used when IsUnavailable is true.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The start date and time of the requested date range.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end date and time of the requested date range.",
            "type": "string"
          },
          "DaysOfWeek": {
            "description": "The days of the week to set.<br />\r\n(optional) Defaults to all.",
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            }
          },
          "UnavailableDescription": {
            "description": "Description of unavalability.\r\n<br />Only used when IsUnavailable is true.",
            "type": "string"
          },
          "IsUnavailable": {
            "description": "If the create is for an unavailability.<br />\r\n(optional) Defaults to false.",
            "type": "boolean"
          },
          "PublicDisplay": {
            "description": "Sets the public display of the availability.<br /><ul><li>Show</li><li>Mask</li><li>Hide</li></ul>\r\n(optional) Defaults to Show.",
            "enum": [
              "Hide",
              "Show",
              "Mask"
            ],
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.AddAvailabilitiesResponse": {
        "type": "object",
        "properties": {
          "StaffMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Staff"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.ApiError"
            }
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Staff": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Bio": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "ForeignZip": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "WorkPhone": {
            "type": "string"
          },
          "HomePhone": {
            "type": "string"
          },
          "CellPhone": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "IsSystem": {
            "type": "boolean"
          },
          "SmodeId": {
            "format": "int32",
            "type": "integer"
          },
          "AppointmentTrn": {
            "type": "boolean"
          },
          "AlwaysAllowDoubleBooking": {
            "type": "boolean"
          },
          "IndependentContractor": {
            "type": "boolean"
          },
          "ImageUrl": {
            "type": "string"
          },
          "IsMale": {
            "type": "boolean"
          },
          "ReservationTrn": {
            "type": "boolean"
          },
          "SortOrder": {
            "format": "int32",
            "type": "integer"
          },
          "MultiLocationPermission": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "ProviderIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "StaffSettings": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.StaffSetting"
          },
          "Rep": {
            "type": "boolean"
          },
          "Rep2": {
            "type": "boolean"
          },
          "Rep3": {
            "type": "boolean"
          },
          "Rep4": {
            "type": "boolean"
          },
          "Rep5": {
            "type": "boolean"
          },
          "Rep6": {
            "type": "boolean"
          },
          "Assistant": {
            "type": "boolean"
          },
          "Assistant2": {
            "type": "boolean"
          },
          "EmploymentStart": {
            "format": "date-time",
            "type": "string"
          },
          "EmploymentEnd": {
            "format": "date-time",
            "type": "string"
          },
          "EmpID": {
            "type": "string"
          },
          "Appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Appointment"
            }
          },
          "Unavailabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Unavailability"
            }
          },
          "Availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Availability"
            }
          },
          "LoginLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Location"
            }
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.ApiError": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Code": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.StaffSetting": {
        "type": "object",
        "properties": {
          "UseStaffNicknames": {
            "type": "boolean"
          },
          "ShowStaffLastNamesOnSchedules": {
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Appointment": {
        "type": "object",
        "properties": {
          "GenderPreference": {
            "type": "string"
          },
          "Duration": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderId": {
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "Status": {
            "enum": [
              "Booked",
              "Completed",
              "Confirmed",
              "Arrived",
              "NoShow",
              "Cancelled",
              "LateCancelled"
            ],
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "StaffRequested": {
            "type": "boolean"
          },
          "ProgramId": {
            "format": "int32",
            "type": "integer"
          },
          "WaitlistEntryId": {
            "format": "int64",
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "type": "integer"
          },
          "ClientId": {
            "type": "string"
          },
          "FirstAppointment": {
            "type": "boolean"
          },
          "ClientServiceId": {
            "format": "int64",
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Resource"
            }
          },
          "AddOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.AddOnSmall"
            }
          },
          "IsWaitlist": {
            "type": "boolean"
          },
          "OnlineDescription": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Unavailability": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Availability": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Staff"
          },
          "SessionType": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.SessionType"
          },
          "Programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Program"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "BookableEndDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Location"
          },
          "PrepTime": {
            "format": "int32",
            "type": "integer"
          },
          "FinishTime": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Location": {
        "type": "object",
        "properties": {
          "BusinessId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "BusinessDescription": {
            "type": "string"
          },
          "AdditionalImageURLs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "FacilitySquareFeet": {
            "format": "int32",
            "type": "integer"
          },
          "ProSpaFinderSite": {
            "type": "boolean"
          },
          "HasClasses": {
            "type": "boolean"
          },
          "PhoneExtension": {
            "type": "string"
          },
          "Action": {
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "Tax1": {
            "format": "float",
            "type": "number"
          },
          "Tax2": {
            "format": "float",
            "type": "number"
          },
          "Tax3": {
            "format": "float",
            "type": "number"
          },
          "Tax4": {
            "format": "float",
            "type": "number"
          },
          "Tax5": {
            "format": "float",
            "type": "number"
          },
          "Phone": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "StateProvCode": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "Latitude": {
            "format": "double",
            "type": "number"
          },
          "Longitude": {
            "format": "double",
            "type": "number"
          },
          "DistanceInMiles": {
            "format": "double",
            "type": "number"
          },
          "ImageURL": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "HasSite": {
            "type": "boolean"
          },
          "CanBook": {
            "type": "boolean"
          },
          "NumberTreatmentRooms": {
            "format": "int32",
            "type": "integer"
          },
          "Active": {
            "type": "boolean"
          },
          "InvActive": {
            "type": "boolean"
          },
          "WsShow": {
            "type": "boolean"
          },
          "Email": {
            "type": "string"
          },
          "ContactName": {
            "type": "string"
          },
          "ShipAddress": {
            "type": "string"
          },
          "ShipState": {
            "type": "string"
          },
          "ShipPostal": {
            "type": "string"
          },
          "ShipPhone": {
            "type": "string"
          },
          "ShipPOC": {
            "type": "string"
          },
          "TaxGrouping": {
            "type": "boolean"
          },
          "LabelTax1": {
            "type": "string"
          },
          "LabelTax2": {
            "type": "string"
          },
          "LabelTax3": {
            "type": "string"
          },
          "LabelTax4": {
            "type": "string"
          },
          "LabelTax5": {
            "type": "string"
          },
          "WAC": {
            "type": "boolean"
          },
          "ShipAddress2": {
            "type": "string"
          },
          "MasterLocId": {
            "format": "int32",
            "type": "integer"
          },
          "StreetAddress": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Ext": {
            "type": "string"
          },
          "Amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Amenity"
            }
          },
          "TotalNumberOfDeals": {
            "format": "int64",
            "type": "integer"
          },
          "TotalNumberOfRatings": {
            "format": "int32",
            "type": "integer"
          },
          "AverageRating": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Resource": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.AddOnSmall": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "StaffId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.SessionType": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "All",
              "DropIn",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "DefaultTimeLength": {
            "format": "int32",
            "type": "integer"
          },
          "StaffTimeLength": {
            "format": "int32",
            "type": "integer"
          },
          "ProgramId": {
            "format": "int32",
            "type": "integer"
          },
          "NumDeducted": {
            "format": "int32",
            "type": "integer"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Capacity": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceRequired": {
            "type": "boolean"
          },
          "Category": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.ServiceTag"
          },
          "Subcategory": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.ServiceTag"
          },
          "OnlineDescription": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Program": {
        "type": "object",
        "properties": {
          "CancelOffset": {
            "format": "int32",
            "type": "integer"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "ScheduleType": {
            "enum": [
              "All",
              "DropIn",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "ContentFormat": {
            "enum": [
              "InPerson",
              "Mindbody",
              "Other"
            ],
            "type": "string"
          },
          "OnlineBookingDisabled": {
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Amenity": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.ServiceTag": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AppointmentController.DeleteAvailabilityRequest": {
        "description": "This is the delete availability request coming DTO",
        "type": "object",
        "properties": {
          "AvailabilityId": {
            "format": "int32",
            "description": "Availability Id to be deleted",
            "type": "integer"
          },
          "Test": {
            "description": "The test flag",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesRequest": {
        "type": "object",
        "properties": {
          "ClassDescriptionIds": {
            "description": "The requested class description IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ClassIds": {
            "description": "The requested class IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ClassScheduleIds": {
            "description": "The requested classScheduleIds.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StaffIds": {
            "description": "The requested IDs of the teaching staff members.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The requested start date for filtering. \r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The requested end date for filtering.\r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "ClientId": {
            "description": "The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.",
            "type": "string"
          },
          "ProgramIds": {
            "description": "A list of program IDs on which to base the search.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SessionTypeIds": {
            "description": "A list of session type IDs on which to base the search.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationIds": {
            "description": "A list of location IDs on which to base the search.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SemesterIds": {
            "description": "A list of semester IDs on which to base the search.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "HideCanceledClasses": {
            "description": "When `true`, canceled classes are removed from the response.<br />\r\nWhen `false`, canceled classes are included in the response.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "SchedulingWindow": {
            "description": "When `true`, classes outside scheduling window are removed from the response.<br />\r\nWhen `false`, classes are included in the response, regardless of the scheduling window.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LastModifiedDate": {
            "format": "date-time",
            "description": "When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Classes": {
            "description": "A list of the requested classes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Class": {
        "description": "Represents a single class instance. The class meets at the start time, goes until the end time.",
        "type": "object",
        "properties": {
          "ClassScheduleId": {
            "format": "int32",
            "description": "The ID used to retrieve the class schedule for the desired class.",
            "type": "integer"
          },
          "Visits": {
            "description": "Contains information about visits.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Visit"
            }
          },
          "Clients": {
            "description": "Contains information about clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
            }
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "Resource": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Resource"
          },
          "MaxCapacity": {
            "format": "int32",
            "description": "The maximum number of clients allowed in the class.",
            "type": "integer"
          },
          "WebCapacity": {
            "format": "int32",
            "description": "The maximum number of clients allowed to sign up online for the class.",
            "type": "integer"
          },
          "TotalBooked": {
            "format": "int32",
            "description": "The total number of clients booked in the class.",
            "type": "integer"
          },
          "TotalSignedIn": {
            "format": "int32",
            "description": "The total number of clients signed into the class.",
            "type": "integer"
          },
          "TotalBookedWaitlist": {
            "format": "int32",
            "description": "The total number of booked clients on the waiting list for the class.",
            "type": "integer"
          },
          "WebBooked": {
            "format": "int32",
            "description": "The total number of clients who signed up online for the class.",
            "type": "integer"
          },
          "SemesterId": {
            "format": "int32",
            "description": "The ID of the semester that the class is a part of, if any.",
            "type": "integer"
          },
          "IsCanceled": {
            "description": "When `true`, indicates that the class has been cancelled.<br />\r\nWhen `false`, indicates that the class has not been cancelled.",
            "type": "boolean"
          },
          "Substitute": {
            "description": "When `true`, indicates that the class is being taught by a substitute teacher.<br />\r\nWhen `false`, indicates that the class is being taught by its regular teacher.",
            "type": "boolean"
          },
          "Active": {
            "description": "When `true`, indicates that the class is shown to clients when in consumer mode.<br />\r\nWhen `false`, indicates that the class is not shown to clients when in consumer mode.",
            "type": "boolean"
          },
          "IsWaitlistAvailable": {
            "description": "When `true`, indicates that the clients can be placed on a waiting list for the class.<br />\r\nWhen `false`, indicates that the clients cannot be placed on a waiting list for the class.",
            "type": "boolean"
          },
          "IsEnrolled": {
            "description": "When `true`, indicates that the client with the given `ClientId` is enrolled in this class.<br />\r\nWhen `false`, indicates that the client with the given `ClientId` is not enrolled in this class.",
            "type": "boolean"
          },
          "HideCancel": {
            "description": "When `true`, indicates that this class is hidden when cancelled.<br />\r\nWhen `false`, indicates that this class is not hidden when cancelled.",
            "type": "boolean"
          },
          "Id": {
            "format": "int32",
            "description": "The unique identifier for the class.",
            "type": "integer"
          },
          "IsAvailable": {
            "description": "When `true`, indicates that the client with the given client ID can book this class.<br />\r\nWhen `false`, indicates that the client with the given client ID cannot book this class.",
            "type": "boolean"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The time this class is scheduled to start.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The time this class is scheduled to end.",
            "type": "string"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "The last time this class was modified.",
            "type": "string"
          },
          "ClassDescription": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassDescription"
          },
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "BookingWindow": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.BookingWindow"
          },
          "BookingStatus": {
            "description": "Contains the booking’s payment status.",
            "enum": [
              "PaymentRequired",
              "BookAndPayLater",
              "Free"
            ],
            "type": "string"
          },
          "VirtualStreamLink": {
            "description": "The URL for the live stream for the class if hosted on the mindbody virtual wellness platform",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Visit": {
        "description": "Represents a specific visit to a class",
        "type": "object",
        "properties": {
          "AppointmentId": {
            "format": "int32",
            "description": "The appointment’s ID.",
            "type": "integer"
          },
          "AppointmentGenderPreference": {
            "description": "The gender of staff member with whom the client prefers to book appointments.",
            "enum": [
              "None",
              "Female",
              "Male"
            ],
            "type": "string"
          },
          "AppointmentStatus": {
            "description": "The status of the appointment.",
            "enum": [
              "None",
              "Requested",
              "Booked",
              "Completed",
              "Confirmed",
              "Arrived",
              "NoShow",
              "Cancelled",
              "LateCancelled"
            ],
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "The class ID that was used to retrieve the visits.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The ID of the client associated with the visit.",
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The time this class is scheduled to start.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time the visit ends. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The ID of the visit.",
            "type": "integer"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "When included in the request, only records modified on or after the specified `LastModifiedDate` are included in the response. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.",
            "type": "string"
          },
          "LateCancelled": {
            "description": "When `true`, indicates that the class has been `LateCancelled`.<br />\r\nWhen `false`, indicates that the class has not been `LateCancelled`.",
            "type": "boolean"
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the site the visit occurred",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the visit took place or is to take place.",
            "type": "integer"
          },
          "MakeUp": {
            "description": "When `true`, the client can make up this session and a session is not deducted from the pricing option that was used to sign the client into the enrollment. When the client has the make-up session, a session is automatically removed from a pricing option that matches the service category of the enrollment and is within the same date range of the missed session.<br />\r\nWhen `false`, the client cannot make up this session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US) for more information.",
            "type": "boolean"
          },
          "Name": {
            "description": "The name of the class.",
            "type": "string"
          },
          "ServiceId": {
            "format": "int64",
            "description": "The ID of the client's pricing option applied to the class visit.",
            "type": "integer"
          },
          "ServiceName": {
            "description": "The name of the pricing option applied to the class visit.",
            "type": "string"
          },
          "ProductId": {
            "format": "int64",
            "description": "The business' ID of the type of pricing option used to pay for the class visit.",
            "type": "integer"
          },
          "SignedIn": {
            "description": "When `true`, indicates that the client has been signed in.<br />\r\nWhen `false`, indicates that the client has not been signed in.",
            "type": "boolean"
          },
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who is teaching the class.",
            "type": "integer"
          },
          "WebSignup": {
            "description": "When `true`, indicates that the client signed up online.<br />\r\nWhen `false`, indicates that the client was signed up by a staff member.",
            "type": "boolean"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "Missed": {
            "description": "When `true`, indicates that the class has been `Missed`.<br />\r\nWhen `false`, indicates that the class has not been `Missed`.",
            "type": "boolean"
          },
          "VisitType": {
            "format": "int32",
            "description": "Indicates the class visit type id",
            "type": "integer"
          },
          "TypeGroup": {
            "format": "int32",
            "description": "Indicates the type group id of the class",
            "type": "integer"
          },
          "TypeTaken": {
            "description": "Indicates the type taken by the class",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Client": {
        "description": "A Client",
        "type": "object",
        "properties": {
          "AppointmentGenderPreference": {
            "description": "The gender of staff member with whom the client prefers to book appointments.",
            "enum": [
              "None",
              "Female",
              "Male"
            ],
            "type": "string"
          },
          "BirthDate": {
            "format": "date-time",
            "description": "The client’s date of birth.",
            "type": "string"
          },
          "Country": {
            "description": "The client’s country.",
            "type": "string"
          },
          "CreationDate": {
            "format": "date-time",
            "description": "The date the client’s profile was created and added to the business, either by the client from the online store, or by a staff member. This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.",
            "type": "string"
          },
          "CustomClientFields": {
            "description": "Contains information about the custom client fields assigned to the client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CustomClientFieldValue"
            }
          },
          "ClientCreditCard": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientCreditCard"
          },
          "ClientIndexes": {
            "description": "Contains the IDs of the client’s assigned ClientIndexes and ClientIndexValues.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AssignedClientIndex"
            }
          },
          "ClientRelationships": {
            "description": "Contains information about the relationship between two clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientRelationship"
            }
          },
          "FirstAppointmentDate": {
            "format": "date-time",
            "description": "The date of the client’s first booked appointment at the business.",
            "type": "string"
          },
          "FirstName": {
            "description": "The client’s first name.",
            "type": "string"
          },
          "Id": {
            "description": "The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.",
            "type": "string"
          },
          "IsCompany": {
            "description": "When `true`, indicates that the client should be marked as a company at the business.<br />\r\nWhen `false`, indicates the client is an individual and does not represent a company.",
            "type": "boolean"
          },
          "IsProspect": {
            "description": "This value is set only if the business owner allows individuals to be prospects.<br />\r\nWhen `true`, indicates that the client should be marked as a prospect for the business.<br />\r\nWhen `false`, indicates that the client should not be marked as a prospect for the business.",
            "type": "boolean"
          },
          "LastName": {
            "description": "The client’s last name.",
            "type": "string"
          },
          "Liability": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Liability"
          },
          "LiabilityRelease": {
            "description": "Passing `true` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `true`.\r\n* `AgreementDate` is set to the time zone of the business when the call was processed.\r\n* `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.\r\nPassing `false` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `false`.\r\n* `AgreementDate` is set to `null`.\r\n* `ReleasedBy` is set to `null`.",
            "type": "boolean"
          },
          "MembershipIcon": {
            "format": "int32",
            "description": "The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US) displayed next to the client’s name, if the client has a membership on their account.",
            "type": "integer"
          },
          "MobileProvider": {
            "format": "int32",
            "description": "The client’s mobile provider.",
            "type": "integer"
          },
          "Notes": {
            "description": "Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.",
            "type": "string"
          },
          "State": {
            "description": "The client’s state.",
            "type": "string"
          },
          "UniqueId": {
            "format": "int64",
            "description": "The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.",
            "type": "integer"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "The UTC date and time when the client’s information was last modified.",
            "type": "string"
          },
          "RedAlert": {
            "description": "Contains any red alert information entered by the business owner for the client.",
            "type": "string"
          },
          "YellowAlert": {
            "description": "Contains any yellow alert information entered by the business owner for the client.",
            "type": "string"
          },
          "MiddleName": {
            "description": "The client’s middle name.",
            "type": "string"
          },
          "ProspectStage": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProspectStage"
          },
          "Email": {
            "description": "The client’s email address.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The client’s mobile phone number.",
            "type": "string"
          },
          "HomePhone": {
            "description": "The client’s home phone number.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The client’s work phone number.",
            "type": "string"
          },
          "AccountBalance": {
            "format": "double",
            "description": "The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).",
            "type": "number"
          },
          "AddressLine1": {
            "description": "The first line of the client’s street address.",
            "type": "string"
          },
          "AddressLine2": {
            "description": "The second line of the client’s street address, if needed.",
            "type": "string"
          },
          "City": {
            "description": "The client’s city.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The client’s postal code.",
            "type": "string"
          },
          "WorkExtension": {
            "description": "The client’s work phone extension number.",
            "type": "string"
          },
          "ReferredBy": {
            "description": "Specifies how the client was referred to the business. You can get a list of possible strings using the `GetClientReferralTypes` endpoint.",
            "type": "string"
          },
          "PhotoUrl": {
            "description": "The URL of the client’s photo for the client profile.",
            "type": "string"
          },
          "EmergencyContactInfoName": {
            "description": "The name of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoEmail": {
            "description": "The email address of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoPhone": {
            "description": "The phone number of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoRelationship": {
            "description": "The client’s relationship with the emergency contact.",
            "type": "string"
          },
          "Gender": {
            "description": "The gender of the client.",
            "type": "string"
          },
          "LastFormulaNotes": {
            "description": "The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.",
            "type": "string"
          },
          "Active": {
            "description": "When `true`, indicates that the client’s profile is marked as active on the site.<br />\r\nWhen `false`, the client’s profile is inactive.\r\nDefaults to `true` based on the assumption that if a client is currently inactive OR is to be marked inactive, this property will explicitly be mapped/set to `false`.",
            "type": "boolean"
          },
          "SalesReps": {
            "description": "A list of sales representatives.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SalesRep"
            }
          },
          "Status": {
            "description": "The status of the client in the business. Possible values are:\r\n* Declined\r\n* Non-Member\r\n* Active\r\n* Expired\r\n* Suspended\r\n* Terminated",
            "type": "string"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "SendAccountEmails": {
            "description": "When `true`, indicates that the client has opted to receive general account notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendAccountTexts": {
            "description": "When `true`, indicates that the client has opted to receive general account notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "SendPromotionalEmails": {
            "description": "When `true`, indicates that the client has opted to receive promotional notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendPromotionalTexts": {
            "description": "When `true`, indicates that the client has opted to receive promotional notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "SendScheduleEmails": {
            "description": "When `true`, indicates that the client has opted to receive schedule notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendScheduleTexts": {
            "description": "When `true`, indicates that the client has opted to receive schedule notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "HomeLocation": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "LockerNumber": {
            "description": "The clients locker number.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassDescription": {
        "description": "Represents a class definition. The class meets at the start time, goes until the end time.",
        "type": "object",
        "properties": {
          "Active": {
            "description": "When `true`, indicates that the business can assign this class description to new class schedules.<br />\r\nWhen `false`, indicates that the business cannot assign this class description to new class schedules.",
            "type": "boolean"
          },
          "Description": {
            "description": "The long version of the class description.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The class description's ID.",
            "type": "integer"
          },
          "ImageURL": {
            "description": "The class description's image URL, if any. If it does not exist, nothing is returned.",
            "type": "string"
          },
          "LastUpdated": {
            "format": "date-time",
            "description": "The date this class description was last modified.",
            "type": "string"
          },
          "Level": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Level"
          },
          "Name": {
            "description": "The name of this class description.",
            "type": "string"
          },
          "Notes": {
            "description": "Any notes about the class description.",
            "type": "string"
          },
          "Prereq": {
            "description": "Any prerequisites for the class.",
            "type": "string"
          },
          "Program": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
          },
          "SessionType": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SessionType"
          },
          "Category": {
            "description": "The category of this class description.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category ID of this class description.",
            "type": "integer"
          },
          "Subcategory": {
            "description": "The subcategory of this class description.",
            "type": "string"
          },
          "SubcategoryId": {
            "format": "int32",
            "description": "The subcategory ID of this class description.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.BookingWindow": {
        "description": "The booking window for registration",
        "type": "object",
        "properties": {
          "StartDateTime": {
            "format": "date-time",
            "description": "Date and time that the booking window opens; that is, the first day of sales.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "Date and time that the booking window closes; that is, the last day of sales.",
            "type": "string"
          },
          "DailyStartTime": {
            "format": "date-time",
            "description": "The time that the booking window opens; that is, the time that the store opens.",
            "type": "string"
          },
          "DailyEndTime": {
            "format": "date-time",
            "description": "The time that the booking window closes; that is, the time that the store closes.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CustomClientFieldValue": {
        "description": "The value of a custom client field",
        "type": "object",
        "properties": {
          "Value": {
            "description": "The value of a specific custom field for a client.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The ID of the custom client field.",
            "type": "integer"
          },
          "DataType": {
            "description": "The data type of the field.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the field.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientCreditCard": {
        "description": "A client credit card.",
        "type": "object",
        "properties": {
          "Address": {
            "description": "The billing address for the credit card.",
            "type": "string"
          },
          "CardHolder": {
            "description": "The name of the card holder.",
            "type": "string"
          },
          "CardNumber": {
            "description": "The credit card number.",
            "type": "string"
          },
          "CardType": {
            "description": "The type of credit card, for example Visa or MasterCard.",
            "type": "string"
          },
          "City": {
            "description": "The city in which the billing address is located.",
            "type": "string"
          },
          "ExpMonth": {
            "description": "The month in which the credit card expires.",
            "type": "string"
          },
          "ExpYear": {
            "description": "The year in which the credit card expires.",
            "type": "string"
          },
          "LastFour": {
            "description": "The last four digits of the credit card number.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The postal code where the billing address is located.",
            "type": "string"
          },
          "State": {
            "description": "The state that the billing address is located in.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AssignedClientIndex": {
        "description": "Represents a client index value assigned to a client",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The index ID assigned to the client.",
            "type": "integer"
          },
          "ValueId": {
            "format": "int32",
            "description": "The index’s value ID.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientRelationship": {
        "description": "A relation between two clients.",
        "type": "object",
        "properties": {
          "RelatedClientId": {
            "description": "The RSSID of the related client.",
            "type": "string"
          },
          "Relationship": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Relationship"
          },
          "RelationshipName": {
            "description": "The name of the relationship of the related client.",
            "type": "string"
          },
          "Delete": {
            "description": "When true, this relationship is removed from the associated clients.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Liability": {
        "type": "object",
        "properties": {
          "AgreementDate": {
            "format": "date-time",
            "description": "The date and time at which the client agreed to the liability waiver for the business.",
            "type": "string"
          },
          "IsReleased": {
            "description": "The client’s liability release status.<br />\r\nWhen `true`, indicates that the client has agreed to the liability release for the business.<br />\r\nWhen `false`, indicates that the client has not agreed to the liability release for the business.",
            "type": "boolean"
          },
          "ReleasedBy": {
            "format": "int64",
            "description": "An ID indicating who released liability for the client. If the client agreed to the liability waiver by signing into an account online, this value is `null`. If a staff member marked the waiver as signed on behalf of the client, it is the staff member’s ID. `0` indicates that the business owner marked the liability waiver as signed on behalf of the client.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ProspectStage": {
        "type": "object",
        "properties": {
          "Active": {
            "description": "When `true`, indicates that the client is a prospect at the business and has not yet purchased any of the business pricing options.\r\nWhen `false`, indicates that the client has already purchased at least one pricing option from the business.",
            "type": "boolean"
          },
          "Description": {
            "description": "A description of the prospect stage.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The ID of the prospect stage assigned to the client.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SalesRep": {
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "The first name of the sales representative.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The staff ID of the sales representative.",
            "type": "integer"
          },
          "LastName": {
            "description": "The last name of the sales representative.",
            "type": "string"
          },
          "SalesRepNumber": {
            "format": "int32",
            "description": "This value is the number that identifies the type of sales representative assigned to this client. One to six types of sales representatives can be assigned to a client at any given time, depending on site settings.",
            "type": "integer"
          },
          "SalesRepNumbers": {
            "description": "A list of the different types of sales representative functions assigned to this staff member.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Level": {
        "description": "A session level.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The level's ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The level's name.",
            "type": "string"
          },
          "Description": {
            "description": "The level's description.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Relationship": {
        "description": "Jim is a RelationshipName1 of John. John is a RelationshipName2 of Jim.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the relationship.",
            "type": "integer"
          },
          "RelationshipName1": {
            "description": "The name of the first relationship.",
            "type": "string"
          },
          "RelationshipName2": {
            "description": "The name of the second relationship.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsRequest": {
        "type": "object",
        "properties": {
          "ClassDescriptionId": {
            "format": "int32",
            "description": "Filters to the single result with the given ID.",
            "type": "integer"
          },
          "ProgramIds": {
            "description": "Filters results to class descriptions belonging to the given programs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartClassDateTime": {
            "format": "date-time",
            "description": "Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.",
            "type": "string"
          },
          "EndClassDateTime": {
            "format": "date-time",
            "description": "Filters the results to class descriptions for scheduled classes that happen before the given date and time.",
            "type": "string"
          },
          "StaffId": {
            "format": "int64",
            "description": "Filters results to class descriptions for scheduled classes taught by the given staff member.",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "Filters results to classes descriptions for schedule classes as the given location.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassDescriptionsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClassDescriptions": {
            "description": "Contains information about the class descriptions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassDescription"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsRequest": {
        "type": "object",
        "properties": {
          "ClassID": {
            "format": "int64",
            "description": "The class ID.",
            "type": "integer"
          },
          "LastModifiedDate": {
            "format": "date-time",
            "description": "When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassVisitsResponse": {
        "type": "object",
        "properties": {
          "Class": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassRequest": {
        "required": [
          "ClientId",
          "ClassId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The RSSID of the client to remove from the specified class.",
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "The ID of the class that you want to remove the client from.",
            "type": "integer"
          },
          "Test": {
            "description": "When `true`, the request ensures that its parameters are valid without affecting real data.<br />\r\nWhen `false`, the request performs as intended and may affect live client data.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "SendEmail": {
            "description": "When `true`, indicates that the client should be sent an email. Depending on the site and client settings, an email may or may not be sent.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LateCancel": {
            "description": "When `true`, indicates that the client is to be late cancelled from the class.<br />\r\nWhen `false`, indicates that the client is to be early cancelled from the class.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "VisitId": {
            "format": "int32",
            "description": "The Visit Id is an optional field to removed perticular visit from class of client",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientFromClassResponse": {
        "type": "object",
        "properties": {
          "Class": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AddClassEnrollmentScheduleRequest": {
        "type": "object",
        "properties": {
          "ClassDescriptionId": {
            "format": "int32",
            "description": "The class description for which the class is being scheduled under",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location where the class is taking place",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Class start time (use null for TBD)",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Class end time (ignored if StartTime is null)",
            "type": "string"
          },
          "StartTime": {
            "format": "date-time",
            "description": "Class start time (use null for TBD)",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "description": "Class end time (ignored if StartTime is null)",
            "type": "string"
          },
          "DaySunday": {
            "description": "(optional) - If the class occurs on Sunday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayMonday": {
            "description": "(optional) - If the class occurs on Monday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayTuesday": {
            "description": "(optional) - If the class occurs on Tuesday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayWednesday": {
            "description": "(optional) - If the class occurs on Wednesday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayThursday": {
            "description": "(optional) - If the class occurs on Thursday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayFriday": {
            "description": "(optional) - If the class occurs on Friday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DaySaturday": {
            "description": "(optional) - If the class occurs on Saturday (ignored if EndDate is null",
            "type": "boolean"
          },
          "StaffId": {
            "format": "int64",
            "description": "The staff member teaching the class",
            "type": "integer"
          },
          "StaffPayRate": {
            "format": "int32",
            "description": "The staff pay rate",
            "type": "integer"
          },
          "ResourceId": {
            "format": "int32",
            "description": "(optional) - The room where the class is taking place",
            "type": "integer"
          },
          "MaxCapacity": {
            "format": "int32",
            "description": "How many people can attend",
            "type": "integer"
          },
          "WebCapacity": {
            "format": "int32",
            "description": "How many people can signup online (if 0 clients cannot signup online)",
            "type": "integer"
          },
          "WaitlistCapacity": {
            "format": "int32",
            "description": "One of: PaymentRequired, BookAndPayLater, Free",
            "type": "integer"
          },
          "BookingStatus": {
            "description": "One of: PaymentRequired, BookAndPayLater, Free",
            "type": "string"
          },
          "AllowOpenEnrollment": {
            "description": "Allow clients to choose which sessions they'd like to sign up for",
            "type": "boolean"
          },
          "AllowDateForwardEnrollment": {
            "description": "Allow booking after the enrollment has started",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UpdateClassEnrollmentScheduleRequest": {
        "type": "object",
        "properties": {
          "ClassId": {
            "format": "int32",
            "description": "The class id, a block of schedules",
            "type": "integer"
          },
          "ClassDescriptionId": {
            "format": "int32",
            "description": "Used only internally, overridden if sent",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location where the class is taking place",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Class start time (use null for TBD)",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Class end time (ignored if StartTime is null)",
            "type": "string"
          },
          "StartTime": {
            "format": "date-time",
            "description": "Class start time (use null for TBD)",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "description": "Class end time (ignored if StartTime is null)",
            "type": "string"
          },
          "DaySunday": {
            "description": "(optional) - If the class occurs on Sunday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayMonday": {
            "description": "(optional) - If the class occurs on Monday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayTuesday": {
            "description": "(optional) - If the class occurs on Tuesday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayWednesday": {
            "description": "(optional) - If the class occurs on Wednesday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayThursday": {
            "description": "(optional) - If the class occurs on Thursday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DayFriday": {
            "description": "(optional) - If the class occurs on Friday (ignored if EndDate is null)",
            "type": "boolean"
          },
          "DaySaturday": {
            "description": "(optional) - If the class occurs on Saturday (ignored if EndDate is null",
            "type": "boolean"
          },
          "StaffId": {
            "format": "int64",
            "description": "The staff member teaching the class",
            "type": "integer"
          },
          "StaffPayRate": {
            "format": "int32",
            "description": "The staff pay rate",
            "type": "integer"
          },
          "ResourceId": {
            "format": "int32",
            "description": "(optional) - The room where the class is taking place",
            "type": "integer"
          },
          "MaxCapacity": {
            "format": "int32",
            "description": "How many people can attend",
            "type": "integer"
          },
          "WebCapacity": {
            "format": "int32",
            "description": "How many people can signup online (if 0 clients cannot signup online)",
            "type": "integer"
          },
          "WaitlistCapacity": {
            "format": "int32",
            "description": "One of: PaymentRequired, BookAndPayLater, Free",
            "type": "integer"
          },
          "BookingStatus": {
            "description": "One of: PaymentRequired, BookAndPayLater, Free",
            "type": "string"
          },
          "AllowOpenEnrollment": {
            "description": "Allow clients to choose which sessions they'd like to sign up for",
            "type": "boolean"
          },
          "AllowDateForwardEnrollment": {
            "description": "Allow booking after the enrollment has started",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassRequest": {
        "required": [
          "ClientId",
          "ClassId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client who is being booked into the class",
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "The ID of the class into which the client is being booked",
            "type": "integer"
          },
          "Test": {
            "description": "When `true`, indicates that input information is validated, but not committed.<br />\r\nWhen `false`, the information is committed and the database is affected.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "RequirePayment": {
            "description": "When `true`, the client must have an active, usable pricing option on their account.<br />\r\nWhen `false` or omitted, an active pricing option is not required to complete the client’s booking.",
            "type": "boolean"
          },
          "Waitlist": {
            "description": "When `true`, indicates that the client should be added to a specific class waiting list.<br />\r\nWhen `false`, the client should not be added to the waiting list.",
            "type": "boolean"
          },
          "SendEmail": {
            "description": "When `true`, the subscriber’s configured Booking Confirmation automatic email is sent to the client. Note that an email is sent only if the client has an email address and automatic emails have been set up.<br />\r\nWhen `false`, indicates that the client does not receive emails.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "WaitlistEntryId": {
            "format": "int32",
            "description": "The ID of the waiting list entry from which you are moving a client into a class.",
            "type": "integer"
          },
          "ClientServiceId": {
            "format": "int32",
            "description": "The ID of the pricing option on the client’s account that you want to use to pay for this booking, if payment is required at the time of the update.",
            "type": "integer"
          },
          "CrossRegionalBooking": {
            "description": "When `true`, cross regional series are checked and used if applicable.",
            "type": "boolean"
          },
          "CrossRegionalBookingClientServiceSiteId": {
            "format": "int32",
            "description": "If the request is cross regional, use a purchased pricing option from this specified site. If omitted, an attempt is made to use an applicable pricing option from the local site.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToClassResponse": {
        "type": "object",
        "properties": {
          "Visit": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ExtensionModels.AddClientToClassVisit"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ExtensionModels.AddClientToClassVisit": {
        "type": "object",
        "properties": {
          "AppointmentId": {
            "format": "int32",
            "description": "The appointment’s ID.",
            "type": "integer"
          },
          "AppointmentGenderPreference": {
            "description": "The gender of staff member with whom the client prefers to book appointments.",
            "enum": [
              "None",
              "Female",
              "Male"
            ],
            "type": "string"
          },
          "AppointmentStatus": {
            "description": "The status of the appointment.",
            "enum": [
              "None",
              "Requested",
              "Booked",
              "Completed",
              "Confirmed",
              "Arrived",
              "NoShow",
              "Cancelled",
              "LateCancelled"
            ],
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "The class ID that was used to retrieve the visits.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The ID of the client associated with the visit.",
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The time this class is scheduled to start.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time the visit ends. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The ID of the visit.",
            "type": "integer"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "When included in the request, only records modified on or after the specified `LastModifiedDate` are included in the response. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.",
            "type": "string"
          },
          "LateCancelled": {
            "description": "When `true`, indicates that the class has been `LateCancelled`.<br />\r\nWhen `false`, indicates that the class has not been `LateCancelled`.",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the visit took place or is to take place.",
            "type": "integer"
          },
          "MakeUp": {
            "description": "When `true`, the client can make up this session and a session is not deducted from the pricing option that was used to sign the client into the enrollment. When the client has the make-up session, a session is automatically removed from a pricing option that matches the service category of the enrollment and is within the same date range of the missed session.<br />\r\nWhen `false`, the client cannot make up this session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US) for more information.",
            "type": "boolean"
          },
          "Name": {
            "description": "The name of the class.",
            "type": "string"
          },
          "ServiceId": {
            "format": "int64",
            "description": "The ID of the client's pricing option applied to the class visit.",
            "type": "integer"
          },
          "ServiceName": {
            "description": "The name of the pricing option applied to the class visit.",
            "type": "string"
          },
          "ProductId": {
            "format": "int64",
            "description": "The business' ID of the type of pricing option used to pay for the class visit.",
            "type": "integer"
          },
          "SignedIn": {
            "description": "When `true`, indicates that the client has been signed in.<br />\r\nWhen `false`, indicates that the client has not been signed in.",
            "type": "boolean"
          },
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who is teaching the class.",
            "type": "integer"
          },
          "WebSignup": {
            "description": "When `true`, indicates that the client signed up online.<br />\r\nWhen `false`, indicates that the client was signed up by a staff member.",
            "type": "boolean"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "CrossRegionalBookingPerformed": {
            "description": "When `true`, indicates that the client is paying for the visit using a pricing option from one of their associated cross-regional profiles.",
            "type": "boolean"
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the business from which cross-regional payment is applied.",
            "type": "integer"
          },
          "WaitlistEntryId": {
            "format": "int32",
            "description": "When this value is not null, it indicates that the client is on the waiting list for the requested class. The only additional fields that are populated when this is not null are:\r\n* ClassId\r\n* ClientId\r\n\r\nYou can call GET WaitlistEntries using `WaitlistEntryId` to obtain more data about this waiting list entry.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesRequest": {
        "type": "object",
        "properties": {
          "ClassScheduleIds": {
            "description": "The class schedule IDs.\r\n<br />Default: **all**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date of the range. Return any active enrollments that occur on or before this day.\r\n<br />Default: **StartDate**",
            "type": "string"
          },
          "LocationIds": {
            "description": "The location IDs. \r\n<br />Default: **all**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ProgramIds": {
            "description": "The program IDs. \r\n<br />Default: **all**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SessionTypeIds": {
            "description": "The session type IDs. \r\n<br />Default: **all**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StaffIds": {
            "description": "The staff IDs. \r\n<br />Default: **all**",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date of the range. Return any active enrollments that occur on or after this day.\r\n<br />Default: **today’s date**",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetClassSchedulesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClassSchedules": {
            "description": "Contains information about the class schedules.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassSchedule": {
        "description": "Represents a single class instance. The class meets at the start time, goes until the end time.",
        "type": "object",
        "properties": {
          "Classes": {
            "description": "Contains information about classes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
            }
          },
          "Clients": {
            "description": "Contains information about clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
            }
          },
          "Course": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Course"
          },
          "SemesterId": {
            "format": "int32",
            "description": "The semester ID for the enrollment (if any).",
            "type": "integer"
          },
          "IsAvailable": {
            "description": "When `true`, indicates that the enrollment shows in consumer mode, has not started yet, and there is room in each class of the enrollment.<br />\r\nWhen `false`, indicates that either the enrollment does not show in consumer mode, has already started, or there is no room in some classes of the enrollment.",
            "type": "boolean"
          },
          "Id": {
            "format": "int32",
            "description": "The unique ID of the class schedule.",
            "type": "integer"
          },
          "ClassDescription": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassDescription"
          },
          "DaySunday": {
            "description": "When `true`, indicates that this schedule occurs on Sundays.",
            "type": "boolean"
          },
          "DayMonday": {
            "description": "When `true`, indicates that this schedule occurs on Mondays.",
            "type": "boolean"
          },
          "DayTuesday": {
            "description": "When `true`, indicates that this schedule occurs on Tuesdays.",
            "type": "boolean"
          },
          "DayWednesday": {
            "description": "When `true`, indicates that this schedule occurs on Wednesdays.",
            "type": "boolean"
          },
          "DayThursday": {
            "description": "When `true`, indicates that this schedule occurs on Thursdays.",
            "type": "boolean"
          },
          "DayFriday": {
            "description": "When `true`, indicates that this schedule occurs on Fridays.",
            "type": "boolean"
          },
          "DaySaturday": {
            "description": "When `true`, indicates that this schedule occurs on Saturdays.",
            "type": "boolean"
          },
          "AllowOpenEnrollment": {
            "description": "When `true`, indicates that the enrollment allows booking after the enrollment has started.",
            "type": "boolean"
          },
          "AllowDateForwardEnrollment": {
            "description": "When `true`, indicates that this the enrollment shows in consumer mode, the enrollment has not started yet, and there is room in each class of the enrollment.",
            "type": "boolean"
          },
          "StartTime": {
            "format": "date-time",
            "description": "The time this class schedule starts.",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "description": "The time this class schedule ends.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The date this class schedule starts.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The date this class schedule ends.",
            "type": "string"
          },
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Course": {
        "description": "A course.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The course ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The course name.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the course.",
            "type": "string"
          },
          "Notes": {
            "description": "Any notes that have been written about the course.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Date and time that the course starts.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Date and time that the course ends.",
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "Organizer": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "Program": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
          },
          "ImageUrl": {
            "description": "The URL of the image associated with this course, if one exists.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesRequest": {
        "type": "object",
        "properties": {
          "ClassIds": {
            "description": "The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClassIds**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ClassScheduleIds": {
            "description": "The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClassScheduleIds**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ClientIds": {
            "description": "The requested client IDs.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all ClientIds**",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "HidePastEntries": {
            "description": "When `true`, indicates that past waiting list entries are hidden from clients.<br />\r\nWhen `false`, indicates that past entries are not hidden from clients.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "WaitlistEntryIds": {
            "description": "The requested waiting list entry IDs.<br />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />\r\nDefault: **all WaitlistEntryIds**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetWaitlistEntriesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "WaitlistEntries": {
            "description": "Contains information about the waiting list entries.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.WaitlistEntry"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.WaitlistEntry": {
        "type": "object",
        "properties": {
          "ClassDate": {
            "format": "date-time",
            "description": "The date of the class or enrollment.",
            "type": "string"
          },
          "ClassId": {
            "format": "int64",
            "description": "The ID of the class or enrollment.",
            "type": "integer"
          },
          "ClassSchedule": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
          },
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
          },
          "EnrollmentDateForward": {
            "format": "date-time",
            "description": "If the waiting list entry was created for an enrollment, this is the date on or after which the client can be added to the enrollment from the waitlist.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The ID of the waiting list entry.",
            "type": "integer"
          },
          "RequestDateTime": {
            "format": "date-time",
            "description": "The date and time that the request to be on the waiting list was made.",
            "type": "string"
          },
          "VisitRefNo": {
            "format": "int32",
            "description": "The ID of the visit that is associated with the waiting list entry.",
            "type": "integer"
          },
          "Web": {
            "description": "If `true`, the entry on the waiting list was requested online.<br />\r\nIf `false`, the entry on the waiting list was requested off-line, for example in person or by phone.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherRequest": {
        "required": [
          "ClassId",
          "StaffId"
        ],
        "type": "object",
        "properties": {
          "ClassId": {
            "format": "int32",
            "description": "The ID of the class to which a substitute teacher needs to be assigned.",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "The staff ID of the teacher to substitute.",
            "type": "integer"
          },
          "OverrideConflicts": {
            "description": "When `true`, overrides any conflicts in the schedule.",
            "type": "boolean"
          },
          "SendClientEmail": {
            "description": "When `true`, sends the client an automatic email about the substitution, if the client has opted to receive email.",
            "type": "boolean"
          },
          "SendOriginalTeacherEmail": {
            "description": "When `true`, sends the originally scheduled teacher an automatic email about the substitution.",
            "type": "boolean"
          },
          "SendSubstituteTeacherEmail": {
            "description": "When `true`, sends the substituted teacher an automatic email about the substitution.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.SubstituteClassTeacherResponse": {
        "type": "object",
        "properties": {
          "Class": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SubstituteTeacherClass"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SubstituteTeacherClass": {
        "description": "Represents a single class instance. Used in SubstituteClassTeacher endpoint.",
        "type": "object",
        "properties": {
          "ClassScheduleId": {
            "format": "int32",
            "description": "The class schedule ID of the requested class.",
            "type": "integer"
          },
          "Location": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "MaxCapacity": {
            "format": "int32",
            "description": "The total number of bookings allowed in the class.",
            "type": "integer"
          },
          "WebCapacity": {
            "format": "int32",
            "description": "The total number of online bookings allowed in the class.",
            "type": "integer"
          },
          "TotalBooked": {
            "format": "int32",
            "description": "The total number of clients who are booked into the class prior to this call being made.",
            "type": "integer"
          },
          "TotalBookedWaitlist": {
            "format": "int32",
            "description": "The total number of booked clients who are on the waiting list for the class prior to this call being made.",
            "type": "integer"
          },
          "WebBooked": {
            "format": "int32",
            "description": "The total number of bookings in the class made by online users, prior to this call being made. This property is the current number of bookings counted toward the `WebCapacity` limit.",
            "type": "integer"
          },
          "SemesterId": {
            "format": "int32",
            "description": "Identifies the semester assigned to this class.",
            "type": "integer"
          },
          "IsCanceled": {
            "description": "When `true`, indicates that the class has been canceled.<br />\r\nWhen `false`, indicates that the class has not been canceled and may still be bookable.",
            "type": "boolean"
          },
          "Substitute": {
            "description": "When `true`, indicates that the class is being taught by a substitute teacher.",
            "type": "boolean"
          },
          "Active": {
            "description": "When `true`, indicates that the class is being shown to clients in consumer mode.",
            "type": "boolean"
          },
          "IsWaitlistAvailable": {
            "description": "When `true`, indicates that the class has a waiting list and there is space available on the waiting list for another client.<br />\r\nWhen `false`, indicates either that the class does not have a waiting list or there is no space available on the class waiting list.",
            "type": "boolean"
          },
          "HideCancel": {
            "description": "When `true`, indicates that this class is should not be shown to clients when `IsCancelled` is `true`.<br />\r\nWhen `false`, indicates that this class is should be shown to clients when `IsCancelled` is `true`.<br />\r\nThis property can be ignored when the `IsCancelled` property is `false`.",
            "type": "boolean"
          },
          "Id": {
            "format": "int32",
            "description": "The unique identifier of the class.",
            "type": "integer"
          },
          "IsAvailable": {
            "description": "When `true`, indicates that the class can be booked.<br />\r\nWhen `false`, that the class cannot be booked at this time.",
            "type": "boolean"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The date and time that this class is scheduled to start.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time when this class is scheduled to end.",
            "type": "string"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "The last time the class was modified.",
            "type": "string"
          },
          "ClassDescription": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassDescription"
          },
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "VirtualStreamLink": {
            "description": "The URL for the pre-recorded live stream for the class if hosted on the mindbody virtual wellness platform",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesRequest": {
        "description": "Remove Clients From Classes Request",
        "type": "object",
        "properties": {
          "Details": {
            "description": "List of Class Client detail object to remove",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassController.ClassClientDetail"
            }
          },
          "Test": {
            "description": "When `true`, the request ensures that its parameters are valid without affecting real data.<br />\r\nWhen `false`, the request performs as intended and may affect live client data.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "SendEmail": {
            "description": "When `true`, indicates that the client should be sent an email. Depending on the site and client settings, an email may or may not be sent.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LateCancel": {
            "description": "When `true`, indicates that the client is to be late cancelled from the class.<br />\r\nWhen `false`, indicates that the client is to be early cancelled from the class.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.ClassClientDetail": {
        "description": "Class Client Detail Object",
        "required": [
          "ClientIds",
          "ClassId"
        ],
        "type": "object",
        "properties": {
          "ClientIds": {
            "description": "The RSSID of the clients to remove from the specified classes.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ClassId": {
            "format": "int32",
            "description": "The ID of the classes that you want to remove the clients from.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.RemoveClientsFromClassesResponse": {
        "description": "Remove Clients From Classes Response",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Classes": {
            "description": "Contains information about the classes from which the clients were removed.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
            }
          },
          "Errors": {
            "description": "Contains information about the errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ApiError"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesRequest": {
        "description": "This is the request class for the get courses API",
        "type": "object",
        "properties": {
          "LocationIDs": {
            "description": "(optional) The requested locations.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "CourseIDs": {
            "description": "(optional) The requested course IDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StaffIDs": {
            "description": "(optional) The requested StaffIDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ProgramIDs": {
            "description": "(optional) The requested program IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start date range. Any active courses that are on or after this day.\r\n<br />(optional) Defaults to today.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end date range. Any active courses that are on or before this day.\r\n<br />(optional) Defaults to StartDate.",
            "type": "string"
          },
          "SemesterIDs": {
            "description": "(optional) The requested semester IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetCoursesReponse": {
        "description": "This is the response class for the get courses API",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Courses": {
            "description": "This is the list course data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Course"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassRequest": {
        "type": "object",
        "properties": {
          "ClassID": {
            "format": "int64",
            "description": "Class ID to lookup.",
            "type": "integer"
          },
          "HideCancel": {
            "description": "Hide canceled class.",
            "type": "boolean"
          },
          "SendClientEmail": {
            "description": "Client auto email.",
            "type": "boolean"
          },
          "SendStaffEmail": {
            "description": "Staff auto email.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.CancelSingleClassResponse": {
        "type": "object",
        "properties": {
          "Class": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Class"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersRequest": {
        "description": "Get Semesters Request Model",
        "type": "object",
        "properties": {
          "SemesterIDs": {
            "description": "Get with semester ids",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filter semesters with start date",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filter semesters with end date",
            "type": "string"
          },
          "Active": {
            "description": "Get Active semesters",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetSemestersResponse": {
        "description": "Get Semesters Response Model",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Semesters": {
            "description": "A list of Semesters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Semester"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Semester": {
        "description": "Semesters help you quickly classify enrollments.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "type": "string"
          },
          "MultiRegistrationDiscount": {
            "format": "double",
            "type": "number"
          },
          "MultiRegistrationDeadline": {
            "format": "date-time",
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsRequest": {
        "type": "object",
        "properties": {
          "ClientIDs": {
            "description": "The requested client IDs.\r\nDefault: **all IDs** that the authenticated user’s access level allows.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SearchText": {
            "description": "Text to use in the search. Can include FirstName, LastName, and Email. Note that user credentials must be provided.",
            "type": "string"
          },
          "IsProspect": {
            "description": "When `true`, filters the results to include only those clients marked as prospects for the business.<br />\r\nWhen `false`, indicates that only those clients who are not marked prospects should be returned.",
            "type": "boolean"
          },
          "LastModifiedDate": {
            "format": "date-time",
            "description": "Filters the results to include only the clients that have been modified on or after this date.",
            "type": "string"
          },
          "UniqueIds": {
            "description": "Filters results to clients with these `UniqueIDs`. This parameter cannot be used with `ClientIDs` or `SearchText`.\r\nDefault: **all UniqueIDs** that the authenticated user’s access level allows.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "IncludeInactive": {
            "description": "When `true`, indicates the results to include active and inactive clients.<br />\r\nWhen `false`, indicates that only those clients who are marked as active should be returned.",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Clients": {
            "description": "The requested clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientWithSuspensionInfo"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientWithSuspensionInfo": {
        "description": "A Client DTO with Suspension Informatoin",
        "type": "object",
        "properties": {
          "SuspensionInfo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientSuspensionInfo"
          },
          "AppointmentGenderPreference": {
            "description": "The gender of staff member with whom the client prefers to book appointments.",
            "enum": [
              "None",
              "Female",
              "Male"
            ],
            "type": "string"
          },
          "BirthDate": {
            "format": "date-time",
            "description": "The client’s date of birth.",
            "type": "string"
          },
          "Country": {
            "description": "The client’s country.",
            "type": "string"
          },
          "CreationDate": {
            "format": "date-time",
            "description": "The date the client’s profile was created and added to the business, either by the client from the online store, or by a staff member. This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.",
            "type": "string"
          },
          "CustomClientFields": {
            "description": "Contains information about the custom client fields assigned to the client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CustomClientFieldValue"
            }
          },
          "ClientCreditCard": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientCreditCard"
          },
          "ClientIndexes": {
            "description": "Contains the IDs of the client’s assigned ClientIndexes and ClientIndexValues.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AssignedClientIndex"
            }
          },
          "ClientRelationships": {
            "description": "Contains information about the relationship between two clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientRelationship"
            }
          },
          "FirstAppointmentDate": {
            "format": "date-time",
            "description": "The date of the client’s first booked appointment at the business.",
            "type": "string"
          },
          "FirstName": {
            "description": "The client’s first name.",
            "type": "string"
          },
          "Id": {
            "description": "The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.",
            "type": "string"
          },
          "IsCompany": {
            "description": "When `true`, indicates that the client should be marked as a company at the business.<br />\r\nWhen `false`, indicates the client is an individual and does not represent a company.",
            "type": "boolean"
          },
          "IsProspect": {
            "description": "This value is set only if the business owner allows individuals to be prospects.<br />\r\nWhen `true`, indicates that the client should be marked as a prospect for the business.<br />\r\nWhen `false`, indicates that the client should not be marked as a prospect for the business.",
            "type": "boolean"
          },
          "LastName": {
            "description": "The client’s last name.",
            "type": "string"
          },
          "Liability": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Liability"
          },
          "LiabilityRelease": {
            "description": "Passing `true` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `true`.\r\n* `AgreementDate` is set to the time zone of the business when the call was processed.\r\n* `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.\r\nPassing `false` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `false`.\r\n* `AgreementDate` is set to `null`.\r\n* `ReleasedBy` is set to `null`.",
            "type": "boolean"
          },
          "MembershipIcon": {
            "format": "int32",
            "description": "The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US) displayed next to the client’s name, if the client has a membership on their account.",
            "type": "integer"
          },
          "MobileProvider": {
            "format": "int32",
            "description": "The client’s mobile provider.",
            "type": "integer"
          },
          "Notes": {
            "description": "Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.",
            "type": "string"
          },
          "State": {
            "description": "The client’s state.",
            "type": "string"
          },
          "UniqueId": {
            "format": "int64",
            "description": "The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.",
            "type": "integer"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "The UTC date and time when the client’s information was last modified.",
            "type": "string"
          },
          "RedAlert": {
            "description": "Contains any red alert information entered by the business owner for the client.",
            "type": "string"
          },
          "YellowAlert": {
            "description": "Contains any yellow alert information entered by the business owner for the client.",
            "type": "string"
          },
          "MiddleName": {
            "description": "The client’s middle name.",
            "type": "string"
          },
          "ProspectStage": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProspectStage"
          },
          "Email": {
            "description": "The client’s email address.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The client’s mobile phone number.",
            "type": "string"
          },
          "HomePhone": {
            "description": "The client’s home phone number.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The client’s work phone number.",
            "type": "string"
          },
          "AccountBalance": {
            "format": "double",
            "description": "The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).",
            "type": "number"
          },
          "AddressLine1": {
            "description": "The first line of the client’s street address.",
            "type": "string"
          },
          "AddressLine2": {
            "description": "The second line of the client’s street address, if needed.",
            "type": "string"
          },
          "City": {
            "description": "The client’s city.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The client’s postal code.",
            "type": "string"
          },
          "WorkExtension": {
            "description": "The client’s work phone extension number.",
            "type": "string"
          },
          "ReferredBy": {
            "description": "Specifies how the client was referred to the business. You can get a list of possible strings using the `GetClientReferralTypes` endpoint.",
            "type": "string"
          },
          "PhotoUrl": {
            "description": "The URL of the client’s photo for the client profile.",
            "type": "string"
          },
          "EmergencyContactInfoName": {
            "description": "The name of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoEmail": {
            "description": "The email address of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoPhone": {
            "description": "The phone number of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoRelationship": {
            "description": "The client’s relationship with the emergency contact.",
            "type": "string"
          },
          "Gender": {
            "description": "The gender of the client.",
            "type": "string"
          },
          "LastFormulaNotes": {
            "description": "The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.",
            "type": "string"
          },
          "Active": {
            "description": "When `true`, indicates that the client’s profile is marked as active on the site.<br />\r\nWhen `false`, the client’s profile is inactive.\r\nDefaults to `true` based on the assumption that if a client is currently inactive OR is to be marked inactive, this property will explicitly be mapped/set to `false`.",
            "type": "boolean"
          },
          "SalesReps": {
            "description": "A list of sales representatives.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SalesRep"
            }
          },
          "Status": {
            "description": "The status of the client in the business. Possible values are:\r\n* Declined\r\n* Non-Member\r\n* Active\r\n* Expired\r\n* Suspended\r\n* Terminated",
            "type": "string"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "SendAccountEmails": {
            "description": "When `true`, indicates that the client has opted to receive general account notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendAccountTexts": {
            "description": "When `true`, indicates that the client has opted to receive general account notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "SendPromotionalEmails": {
            "description": "When `true`, indicates that the client has opted to receive promotional notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendPromotionalTexts": {
            "description": "When `true`, indicates that the client has opted to receive promotional notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "SendScheduleEmails": {
            "description": "When `true`, indicates that the client has opted to receive schedule notifications by email. This property is editable. \r\n<br />Default: **false**",
            "type": "boolean"
          },
          "SendScheduleTexts": {
            "description": "When `true`, indicates that the client has opted to receive schedule notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.",
            "type": "boolean"
          },
          "HomeLocation": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "LockerNumber": {
            "description": "The clients locker number.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientSuspensionInfo": {
        "description": "A Client DTO with Suspension Informatoin",
        "type": "object",
        "properties": {
          "BookingSuspended": {
            "description": "When 'true', indicates that the client is suspended from booking",
            "type": "boolean"
          },
          "SuspensionStartDate": {
            "description": "Indicates the Date that BookingSuspension starts 'YYYY-MM-DD'",
            "type": "string"
          },
          "SuspensionEndDate": {
            "description": "Indicates the Date that BookingSuspension ends 'YYYY-MM-DD'",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesRequest": {
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "The client first name to match on when searching for duplicates.",
            "type": "string"
          },
          "LastName": {
            "description": "The client last name to match on when searching for duplicates.",
            "type": "string"
          },
          "Email": {
            "description": "The client email to match on when searching for duplicates.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientDuplicatesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClientDuplicates": {
            "description": "The requested clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientDuplicate"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientDuplicate": {
        "description": "A client record that is considered a duplicate based on matching of the client's first name, last name, AND email fields",
        "type": "object",
        "properties": {
          "Id": {
            "description": "The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.",
            "type": "string"
          },
          "UniqueId": {
            "format": "int64",
            "description": "The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.",
            "type": "integer"
          },
          "FirstName": {
            "description": "The client’s first name.",
            "type": "string"
          },
          "LastName": {
            "description": "The client’s last name.",
            "type": "string"
          },
          "Email": {
            "description": "The client’s email address.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesRequest": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The client ID of the client whose formula notes are being requested.",
            "type": "string"
          },
          "AppointmentId": {
            "format": "int64",
            "description": "The appointment ID of the appointment that the formula notes are related to.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientFormulaNotesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "FormulaNotes": {
            "description": "Contains details about the client’s formula.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.FormulaNoteResponse": {
        "description": "An individual Client Formula Note.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The unique Id of the Formula Note.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The unique Id of the Client for the formula note",
            "type": "string"
          },
          "AppointmentId": {
            "format": "int64",
            "description": "The unique Id of the Appointment if the Formula Note was added to a specific appointment.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date-time",
            "description": "The Date the Formula Note was created.",
            "type": "string"
          },
          "Note": {
            "description": "The Note itself",
            "type": "string"
          },
          "SiteId": {
            "format": "int32",
            "description": "The SiteId where the Formula Note originated.",
            "type": "integer"
          },
          "SiteName": {
            "description": "The name of the Site where the Formula Note originated.",
            "type": "string"
          },
          "StaffFirstName": {
            "description": "The first name of the Staff for the associated appointment.",
            "type": "string"
          },
          "StaffLastName": {
            "description": "The last name of the Staff for the associated appointment.",
            "type": "string"
          },
          "StaffDisplayName": {
            "description": "The display name of the Staff for the associated appointment.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.DeleteClientFormulaNoteRequest": {
        "required": [
          "ClientId",
          "FormulaNoteId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The client ID of the client whose formula notes are being requested.",
            "type": "string"
          },
          "FormulaNoteId": {
            "format": "int64",
            "description": "The Formula Note ID.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddFormulaNoteRequest": {
        "required": [
          "ClientId",
          "Note"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "Required.  The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients.",
            "type": "string"
          },
          "AppointmentId": {
            "format": "int64",
            "description": "The optional appointment Id associated with the formula note",
            "type": "integer"
          },
          "Note": {
            "description": "The note itself",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentRequest": {
        "required": [
          "ClientId",
          "File"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The RSSID of the client for whom the document is to be uploaded.",
            "type": "string"
          },
          "File": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientDocument"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientDocument": {
        "required": [
          "FileName",
          "MediaType",
          "Buffer"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "description": "The name of the file to be used on the client’s documents page when it is uploaded.",
            "type": "string"
          },
          "MediaType": {
            "description": "The type of file or file extension. Possible values are:\r\n* pdf\r\n* jpg\r\n* jpeg\r\n* tif\r\n* tiff\r\n* png\r\n* doc\r\n* docx\r\n* bmp\r\n* txt\r\n* rtf\r\n* xlsx\r\n* xls\r\n* gif\r\n* zip\r\n* ppt\r\n* pptx\r\n* mov",
            "type": "string"
          },
          "Buffer": {
            "format": "byte",
            "description": "A Base64-encoded string representation of the file’s byte array.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientDocumentResponse": {
        "type": "object",
        "properties": {
          "FileSize": {
            "format": "int64",
            "description": "The size of the uploaded file.",
            "type": "integer"
          },
          "FileName": {
            "description": "The name of the uploaded file.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoRequest": {
        "required": [
          "Bytes",
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "Bytes": {
            "format": "byte",
            "description": "A Base64-encoded string representation of the image’s byte array.",
            "type": "string"
          },
          "ClientId": {
            "description": "The RSSID of the client for whom the photo is to be uploaded.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UploadClientPhotoResponse": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The RSSID of the client for whom the photo was uploaded.",
            "type": "string"
          },
          "PhotoUrl": {
            "description": "The URL of the uploaded photo.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client.",
            "type": "string"
          },
          "CrossRegionalLookup": {
            "description": "When `true`, indicates that the requesting client’s cross regional contracts are returned, if any.<br />\r\nWhen `false`, indicates that cross regional contracts are not returned.",
            "type": "boolean"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "Determines how many sites are skipped over when retrieving a client’s cross regional contracts. Used when a client ID is linked to more than ten sites in an organization. Only a maximum of ten site databases are queried when this call is made and `CrossRegionalLookup` is set to `true`. To change which sites are queried, change this offset value.\r\nDefault: **0**",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientContractsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Contracts": {
            "description": "Contains the details of the client’s contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientContract"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientContract": {
        "description": "A client contract",
        "type": "object",
        "properties": {
          "AgreementDate": {
            "format": "date-time",
            "description": "The date on which the contract was signed.",
            "type": "string"
          },
          "AutopayStatus": {
            "description": "The status of the client’s autopay.",
            "enum": [
              "Active",
              "Inactive",
              "Suspended"
            ],
            "type": "string"
          },
          "ContractName": {
            "description": "The name of the contract.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The date that the contract expires.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The unique ID of the contract.",
            "type": "integer"
          },
          "OriginationLocationId": {
            "format": "int32",
            "description": "The ID of the location where the contract was issued.",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The date that the contract became active.",
            "type": "string"
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the site where the contract was issued.",
            "type": "integer"
          },
          "UpcomingAutopayEvents": {
            "description": "Contains details of the autopay events.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpcomingAutopayEvent"
            }
          },
          "ContractID": {
            "format": "int32",
            "description": "The ID of the contract",
            "type": "integer"
          },
          "TerminationDate": {
            "format": "date-time",
            "description": "The date that the contract was terminated.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UpcomingAutopayEvent": {
        "type": "object",
        "properties": {
          "ClientContractId": {
            "format": "int32",
            "description": "The ID of the contract.",
            "type": "integer"
          },
          "ChargeAmount": {
            "format": "double",
            "description": "The amount charged.",
            "type": "number"
          },
          "PaymentMethod": {
            "description": "The payment method.",
            "enum": [
              "Other",
              "CreditCard",
              "DebitAccount",
              "ACH"
            ],
            "type": "string"
          },
          "ScheduleDate": {
            "format": "date-time",
            "description": "The date and time of the next payment.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client to query. The results are a list of pricing options that the client has purchased. Note that “service” and “pricing option” are synonymous in this section of the documentation.",
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "Filters results to only those pricing options that can be used to pay for this class.",
            "type": "integer"
          },
          "ProgramIds": {
            "description": "Filters results to pricing options that belong to one of the given program IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "Filters results to pricing options that will pay for the given session type ID. Use this to find pricing options that will pay for a specific appointment type.",
            "type": "integer"
          },
          "LocationIds": {
            "description": "Filters results to pricing options that can be used at the listed location IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "VisitCount": {
            "format": "int32",
            "description": "A filter on the minimum number of visits a service can pay for.",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filters results to pricing options that are valid on or after this date.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filters results to pricing options that are valid on or before this date.",
            "type": "string"
          },
          "ShowActiveOnly": {
            "description": "When `true`, includes active services only.\r\nDefault: **false**",
            "type": "boolean"
          },
          "CrossRegionalLookup": {
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "type": "boolean"
          },
          "IgnoreCrossRegionalSiteLimit": {
            "description": "Used to specify if the number of cross regional sites used to search for client’s pricing options should be ignored. \r\nDefault: **false**",
            "type": "boolean"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientServicesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClientServices": {
            "description": "Contains information about client pricing options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientService"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientService": {
        "description": "A service that is on a client's account.",
        "type": "object",
        "properties": {
          "ActiveDate": {
            "format": "date-time",
            "description": "The date that this pricing option became active and could be used to pay for services.",
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "description": "The number of service sessions this pricing option contained when first purchased.",
            "type": "integer"
          },
          "Current": {
            "description": "When `true`, there are service sessions remaining on the pricing option that can be used pay for the current session.<br />\r\nWhen `false`, the client cannot use this pricing option to pay for other services.",
            "type": "boolean"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "The date when the pricing option expires and can no longer be used to pay for services, even if unused service sessions remain on the option; expressed as UTC.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The unique ID assigned to this pricing option, specific to when it was purchased by the client.",
            "type": "integer"
          },
          "ProductId": {
            "format": "int32",
            "description": "The unique ID of this pricing option, not specific to any client's purchase of it.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this pricing option.",
            "type": "string"
          },
          "PaymentDate": {
            "format": "date-time",
            "description": "The date on which the client paid for this pricing option.",
            "type": "string"
          },
          "Program": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
          },
          "Remaining": {
            "format": "int32",
            "description": "The number of service sessions remaining in the pricing option that can still be used.",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the subscriber site associated with this pricing option.",
            "type": "integer"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the requested client.",
            "type": "string"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "The number of sites to skip when returning the site associated with a client.",
            "type": "integer"
          },
          "CrossRegionalLookup": {
            "description": "When `true`, indicates that past and scheduled client visits across all sites in the region are returned.<br />\r\nWhen `false`, indicates that only visits at the current site are returned.",
            "type": "boolean"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The date past which class visits are not returned.\r\nDefault: **today’s date**",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The date before which class visits are not returned.\r\nDefault: **the end date**",
            "type": "string"
          },
          "UnpaidsOnly": {
            "description": "When `true`, indicates that only visits that have not been paid for are returned.<br />\r\nWhen `false`, indicates that all visits are returned, regardless of whether they have been paid for.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientVisitsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Visits": {
            "description": "Contains information about client visits.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Visit"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the requested client.",
            "type": "string"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "The number of sites to skip when returning the site associated with a client.",
            "type": "integer"
          },
          "CrossRegionalLookup": {
            "description": "When `true`, indicates that past and scheduled client visits across all sites in the region are returned.\r\nWhen `false`, indicates that only visits at the current site are returned.",
            "type": "boolean"
          },
          "EndDate": {
            "format": "date-time",
            "description": "The date past which class visits are not returned.\r\nDefault is today’s date",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The date before which class visits are not returned.\r\nDefault is the end date",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientScheduleResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Visits": {
            "description": "Contains information about client visits.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Visit"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client whose membership was requested.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the requested membership was created.",
            "type": "integer"
          },
          "CrossRegionalLookup": {
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "type": "boolean"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientMembershipsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClientMemberships": {
            "description": "Details about the requested memberships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientMembership"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientMembership": {
        "type": "object",
        "properties": {
          "RestrictedLocations": {
            "description": "The locations that the membership is restricted to, if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
            }
          },
          "IconCode": {
            "description": "Text code that represents the `MembershipIcon`.",
            "type": "string"
          },
          "MembershipId": {
            "format": "int32",
            "description": "The membership's ID.",
            "type": "integer"
          },
          "ActiveDate": {
            "format": "date-time",
            "description": "The date that this pricing option became active and could be used to pay for services.",
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "description": "The number of service sessions this pricing option contained when first purchased.",
            "type": "integer"
          },
          "Current": {
            "description": "When `true`, there are service sessions remaining on the pricing option that can be used pay for the current session.<br />\r\nWhen `false`, the client cannot use this pricing option to pay for other services.",
            "type": "boolean"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "The date when the pricing option expires and can no longer be used to pay for services, even if unused service sessions remain on the option; expressed as UTC.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "description": "The unique ID assigned to this pricing option, specific to when it was purchased by the client.",
            "type": "integer"
          },
          "ProductId": {
            "format": "int32",
            "description": "The unique ID of this pricing option, not specific to any client's purchase of it.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this pricing option.",
            "type": "string"
          },
          "PaymentDate": {
            "format": "date-time",
            "description": "The date on which the client paid for this pricing option.",
            "type": "string"
          },
          "Program": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
          },
          "Remaining": {
            "format": "int32",
            "description": "The number of service sessions remaining in the pricing option that can still be used.",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the subscriber site associated with this pricing option.",
            "type": "integer"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetRequiredClientFieldsResponse": {
        "type": "object",
        "properties": {
          "RequiredClientFields": {
            "description": "A list of strings that maps to the client fields that are required by the site.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesRequest": {
        "type": "object",
        "properties": {
          "IncludeInactive": {
            "description": "When `true`, filters the results to include subtypes and inactive referral types.<br />\r\nWhen `false`, includes no subtypes and only active types.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientReferralTypesResponse": {
        "type": "object",
        "properties": {
          "ReferralTypes": {
            "description": "The list of available referral types.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesRequest": {
        "required": [
          "ClientIds"
        ],
        "type": "object",
        "properties": {
          "BalanceDate": {
            "format": "date-time",
            "description": "The date you want a balance relative to. \r\nDefault: **the current date**",
            "type": "string"
          },
          "ClassId": {
            "format": "int32",
            "description": "The class ID of the event for which you want a balance.",
            "type": "integer"
          },
          "ClientIds": {
            "description": "The list of clients IDs for which you want account balances.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientAccountBalancesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Clients": {
            "description": "A list of clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client you are querying for purchases.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filters results to purchases made on or after this timestamp.<br />\r\nDefault: **now**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filters results to purchases made before this timestamp.<br />\r\nDefault: **end of today**",
            "type": "string"
          },
          "SaleId": {
            "format": "int32",
            "description": "Filters results to the single record associated with this ID.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientPurchasesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Purchases": {
            "description": "Contains information that describes the item sold and the payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientPurchaseRecord"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientPurchaseRecord": {
        "description": "A record of a specific client purchase",
        "type": "object",
        "properties": {
          "Sale": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Sale"
          },
          "Description": {
            "description": "The item name and description.",
            "type": "string"
          },
          "AccountPayment": {
            "description": "If `true`, the item was a payment credited to an account.",
            "type": "boolean"
          },
          "Price": {
            "format": "double",
            "description": "The item's price before taxes and discounts.",
            "type": "number"
          },
          "AmountPaid": {
            "format": "double",
            "description": "The amount paid for the item.",
            "type": "number"
          },
          "Discount": {
            "format": "double",
            "description": "The discount amount that was applied to the item.",
            "type": "number"
          },
          "Tax": {
            "format": "double",
            "description": "The amount of tax that was applied to the item.",
            "type": "number"
          },
          "Returned": {
            "description": "The return status of the item. If `true`, this item was returned.",
            "type": "boolean"
          },
          "Quantity": {
            "format": "int32",
            "description": "The quantity of the item purchased.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Sale": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The sale ID.",
            "type": "integer"
          },
          "SaleDate": {
            "format": "date-time",
            "description": "The date the item was sold.",
            "type": "string"
          },
          "SaleTime": {
            "description": "The time the item was sold.",
            "type": "string"
          },
          "SaleDateTime": {
            "format": "date-time",
            "description": "The date and time the item was sold.",
            "type": "string"
          },
          "OriginalSaleDateTime": {
            "format": "date-time",
            "description": "The date and time the item was sold originally.",
            "type": "string"
          },
          "SalesRepId": {
            "format": "int64",
            "description": "The sales representative ID",
            "type": "integer"
          },
          "ClientId": {
            "description": "The ID of the client who made the purchase.",
            "type": "string"
          },
          "RecipientClientId": {
            "format": "int64",
            "description": "Recipient Client Id",
            "type": "integer"
          },
          "PurchasedItems": {
            "description": "Contains information that describes the purchased items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PurchasedItem"
            }
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the sale takes place.",
            "type": "integer"
          },
          "Payments": {
            "description": "Contains information that describes the payments that contributed to this sale.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SalePayment"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PurchasedItem": {
        "type": "object",
        "properties": {
          "SaleDetailId": {
            "format": "int32",
            "description": "The ID of the sale detail",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "description": "The ProductID of the item.",
            "type": "integer"
          },
          "IsService": {
            "description": "When `true`, indicates that the purchased item was a pricing option for a service.",
            "type": "boolean"
          },
          "BarcodeId": {
            "description": "The BarcodeId of the item.\r\nFor services, BarcodeId may be null\r\nIf no barcode id is explicitly set by the business it is the internal id in a string format.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the sale transaction/pricing option description",
            "type": "string"
          },
          "ContractId": {
            "format": "int32",
            "description": "Contract ID purchased by the client",
            "type": "integer"
          },
          "CategoryId": {
            "format": "int32",
            "description": "Revenue Category ID",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "Revenue Subcategory ID",
            "type": "integer"
          },
          "UnitPrice": {
            "format": "double",
            "description": "Per unit price of the item sold",
            "type": "number"
          },
          "Quantity": {
            "format": "int32",
            "description": "Quantity of the products",
            "type": "integer"
          },
          "DiscountPercent": {
            "format": "double",
            "description": "Discount % applied during sale",
            "type": "number"
          },
          "DiscountAmount": {
            "format": "double",
            "description": "Discount Amount",
            "type": "number"
          },
          "Tax1": {
            "format": "double",
            "description": "Tax1 applicable for the product",
            "type": "number"
          },
          "Tax2": {
            "format": "double",
            "description": "Tax2 applicable for the product",
            "type": "number"
          },
          "Tax3": {
            "format": "double",
            "description": "Tax3 applicable for the product",
            "type": "number"
          },
          "Tax4": {
            "format": "double",
            "description": "Tax4 applicable for the product",
            "type": "number"
          },
          "Tax5": {
            "format": "double",
            "description": "Tax5 applicable for the product",
            "type": "number"
          },
          "TaxAmount": {
            "format": "double",
            "description": "Tax rate applicable for the product",
            "type": "number"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Charged to the customer for paying",
            "type": "number"
          },
          "Notes": {
            "description": "Notes",
            "type": "string"
          },
          "Returned": {
            "description": "Returned or not",
            "type": "boolean"
          },
          "PaymentRefId": {
            "format": "int32",
            "description": "Payment Reference ID",
            "type": "integer"
          },
          "ExpDate": {
            "format": "date-time",
            "description": "Expiration date of the pricing option purchased",
            "type": "string"
          },
          "ActiveDate": {
            "format": "date-time",
            "description": "Activation date of pricing option purchased",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SalePayment": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "A unique identifier for this payment.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "The amount of this payment.",
            "type": "number"
          },
          "Method": {
            "format": "int32",
            "description": "The method for this payment.",
            "type": "integer"
          },
          "Type": {
            "description": "The type of payment.",
            "type": "string"
          },
          "Notes": {
            "description": "Notes about this payment.",
            "type": "string"
          },
          "TransactionId": {
            "format": "int32",
            "description": "The payment transaction ID",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesRequest": {
        "type": "object",
        "properties": {
          "RequiredOnly": {
            "description": "When `true`, filters the results to only indexes that are required on creation.<br />\r\nWhen `false` or omitted, returns all of the client indexes.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientIndexesResponse": {
        "type": "object",
        "properties": {
          "ClientIndexes": {
            "description": "Contains information about the client indexes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientIndex"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientIndex": {
        "description": "A client index.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unique ID of the client index.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the client index.",
            "type": "string"
          },
          "RequiredBusinessMode": {
            "description": "When `true`, indicates that the index is required when creating profiles in business mode.",
            "type": "boolean"
          },
          "RequiredConsumerMode": {
            "description": "When `true`, indicates that the index is required when creating profiles in consumer mode.",
            "type": "boolean"
          },
          "Values": {
            "description": "Contains information about the index's possible values.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientIndexValue"
            }
          },
          "Action": {
            "description": "The action performed on this object.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientIndexValue": {
        "description": "A client index value.",
        "type": "object",
        "properties": {
          "Active": {
            "description": "When `true`, indicates that the index value can be assigned to its parent index.<br />\r\nWhen `false`, indicates that the index value has been deactivated and cannot be assigned to its parent index.",
            "type": "boolean"
          },
          "Id": {
            "format": "int32",
            "description": "The index value’s ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the client index value.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsRequest": {
        "type": "object",
        "properties": {
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCustomClientFieldsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "CustomClientFields": {
            "description": "Contains information about the available custom client fields.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CustomClientField"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CustomClientField": {
        "description": "A custom client field",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the custom client field.",
            "type": "integer"
          },
          "DataType": {
            "description": "The data type of the field.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the field.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddContactLogRequest": {
        "required": [
          "ClientId",
          "ContactMethod"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client whose contact log is being added.",
            "type": "string"
          },
          "AssignedToStaffId": {
            "format": "int64",
            "description": "The ID of the staff member to whom the contact log is assigned.",
            "type": "integer"
          },
          "Text": {
            "description": "The body of the contact log.",
            "type": "string"
          },
          "FollowupByDate": {
            "format": "date-time",
            "description": "The date by which the assigned staff member should complete this contact log.",
            "type": "string"
          },
          "ContactMethod": {
            "description": "How the client wants to be contacted.",
            "type": "string"
          },
          "ContactName": {
            "description": "The name of the person to be contacted by the assigned staff member.",
            "type": "string"
          },
          "IsComplete": {
            "description": "Mark the Complete checkbox as checked if ContactLog is complete",
            "type": "boolean"
          },
          "Comments": {
            "description": "Any comments on the contact log.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Types": {
            "description": "The contact log types used to tag this contact log.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AddContactLogType"
            }
          },
          "Test": {
            "description": "When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.<br />\r\nWhen `false`, the database is updated.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AddContactLogType": {
        "description": "Defines what sort of subtypes we want to add to this contact log type",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The contact log type’s ID.",
            "type": "integer"
          },
          "SubTypes": {
            "description": "A list of the subtype IDs used to tag this contact log type.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ContactLog": {
        "description": "A contact log.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The contact log’s ID.",
            "type": "integer"
          },
          "Text": {
            "description": "The contact log’s body text.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The local date and time when the contact log was created.",
            "type": "string"
          },
          "FollowupByDate": {
            "format": "date-time",
            "description": "The date by which the assigned staff member should close or follow up on this contact log.",
            "type": "string"
          },
          "ContactMethod": {
            "description": "The method by which the client wants to be contacted.",
            "type": "string"
          },
          "ContactName": {
            "description": "The name of the client to contact.",
            "type": "string"
          },
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          },
          "Comments": {
            "description": "The contact log’s comments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLogComment"
            }
          },
          "Types": {
            "description": "Contains information about contact log types.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLogType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ContactLogComment": {
        "description": "A contact log comment.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The comment’s ID.",
            "type": "integer"
          },
          "Text": {
            "description": "The comment’s body text.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The local time when the comment was created.",
            "type": "string"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ContactLogType": {
        "description": "A contact log type.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The contact log type’s ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The type's Name",
            "type": "string"
          },
          "SubTypes": {
            "description": "A list of the subtypes being used to tag this contact log type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLogSubType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ContactLogSubType": {
        "description": "A contact log subtype.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The contact log subtype’s ID.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateContactLogRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the contact log being updated.",
            "type": "integer"
          },
          "Test": {
            "description": "When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.<br />\r\nWhen `false`, the database is updated.",
            "type": "boolean"
          },
          "AssignedToStaffId": {
            "format": "int64",
            "description": "The ID of the staff member to whom the contact log is now being assigned.",
            "type": "integer"
          },
          "Text": {
            "description": "The contact log’s new text.",
            "type": "string"
          },
          "ContactName": {
            "description": "The name of the new person to be contacted by the assigned staff member.",
            "type": "string"
          },
          "FollowupByDate": {
            "format": "date-time",
            "description": "The new date by which the assigned staff member should complete this contact log.",
            "type": "string"
          },
          "ContactMethod": {
            "description": "The new method by which the client wants to be contacted.",
            "type": "string"
          },
          "IsComplete": {
            "description": "Mark the Complete checkbox as checked if ContactLog is complete",
            "type": "boolean"
          },
          "Comments": {
            "description": "Contains information about the comments being updated or added to the contact log. Comments that have an ID of `0` are added to the contact log.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateContactLogComment"
            }
          },
          "Types": {
            "description": "Contains information about the contact logs types being assigned to the contact log, in addition to the contact log types that are already assigned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.UpdateContactLogType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UpdateContactLogComment": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the contact log comment to be updated. Pass a value of `0` to add a new comment to the contact log.",
            "type": "integer"
          },
          "Text": {
            "description": "The new text for the comment.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UpdateContactLogType": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the contact log type to update the subtypes of.",
            "type": "integer"
          },
          "SubTypes": {
            "description": "The subtype IDs that are to be added to the contact log.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsRequest": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "Looks up the cross regional associations by the client’s ID. Either `ClientId` or `Email` must be provided. If both are provided, the `ClientId` is used by default.",
            "type": "string"
          },
          "Email": {
            "description": "Looks up the cross regional associations by the client’s email address. Either `ClientId` or `Email` must be provided. If both are provided, the `ClientId` is used by default.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetCrossRegionalClientAssociationsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "CrossRegionalClientAssociations": {
            "description": "Contains information about the client’s cross regional associations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CrossRegionalClientAssociation"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CrossRegionalClientAssociation": {
        "description": "A client cross region association",
        "type": "object",
        "properties": {
          "SiteId": {
            "format": "int32",
            "description": "The ID of the site to which the client belongs.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The client’s RSSID.",
            "type": "string"
          },
          "UniqueId": {
            "format": "int64",
            "description": "The client’s unique ID.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientRequest": {
        "required": [
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "AccountBalance": {
            "format": "double",
            "description": "The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).",
            "type": "number"
          },
          "Action": {
            "description": "The action taken.",
            "enum": [
              "None",
              "Added",
              "Updated",
              "Failed",
              "Removed"
            ],
            "type": "string"
          },
          "Active": {
            "description": "When `true`, indicates that the client is active at the site.<br />\r\nWhen `false`, indicates that the client is not active at the site.",
            "type": "boolean"
          },
          "AddressLine1": {
            "description": "The first line of the client’s street address.",
            "type": "string"
          },
          "AddressLine2": {
            "description": "The second line of the client’s street address, if needed.",
            "type": "string"
          },
          "ApptGenderPrefMale": {
            "description": "When `true`, indicates that the client prefers services to be provided by a male service provider.<br />\r\nWhen `false`, indicates that the client prefers services to be provided by a female service provider.<br />\r\nWhen `null`, indicates that the client has no preference.\r\nDefault: **null**",
            "type": "boolean"
          },
          "BirthDate": {
            "format": "date-time",
            "description": "The client’s date of birth.",
            "type": "string"
          },
          "City": {
            "description": "The client’s city.",
            "type": "string"
          },
          "ClientCreditCard": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientCreditCard"
          },
          "ClientIndexes": {
            "description": "Contains a list of the indexes and client index values to be assigned to the client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AssignedClientIndex"
            }
          },
          "ClientRelationships": {
            "description": "Contains information about client relationships to be assigned to the client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientRelationship"
            }
          },
          "Country": {
            "description": "The country in which the client is located.",
            "type": "string"
          },
          "CreationDate": {
            "format": "date-time",
            "description": "The date when the client was added to the business, either by the client from the online store or by a staff member at the subscriber’s business. This value always returns in the format yyyy-mm-ddThh:mm:ss:ms.",
            "type": "string"
          },
          "CustomClientFields": {
            "description": "Contains information about the custom fields to be assigned to the client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CustomClientFieldValue"
            }
          },
          "Email": {
            "description": "The client’s email address.",
            "type": "string"
          },
          "EmergencyContactInfoEmail": {
            "description": "The email address of the client’s emergency contact.<br />\r\nFor more information, see [Children’s program features(emergency contact information)](https://support.mindbodyonline.com/s/article/203259283-Children-s-program-features-emergency-contact-information?language=en_US).",
            "type": "string"
          },
          "EmergencyContactInfoName": {
            "description": "The name of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoPhone": {
            "description": "The phone number of the client’s emergency contact.",
            "type": "string"
          },
          "EmergencyContactInfoRelationship": {
            "description": "The client’s relationship with the emergency contact, for example, mother or spouse.",
            "type": "string"
          },
          "FirstAppointmentDate": {
            "format": "date-time",
            "description": "The date of the client’s first booked appointment at the business.",
            "type": "string"
          },
          "FirstName": {
            "description": "The client’s first name. You must specify a first name when you add a client.",
            "type": "string"
          },
          "Gender": {
            "description": "The client’s gender.",
            "type": "string"
          },
          "HomeLocation": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
          },
          "HomePhone": {
            "description": "The client’s home phone number.",
            "type": "string"
          },
          "IsCompany": {
            "description": "When `true`, indicates that the client should be marked as a company at the business.<br />\r\nWhen `false`, indicates the client is an individual and does not represent a company.",
            "type": "boolean"
          },
          "IsProspect": {
            "description": "This value is set only if the business owner allows individuals to be prospects.<br />\r\nWhen `true`, indicates that the client should be marked as a prospect for the business.<br />\r\nWhen `false`, indicates that the client should not be marked as a prospect for the business.",
            "type": "boolean"
          },
          "LastFormulaNotes": {
            "description": "The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.",
            "type": "string"
          },
          "LastModifiedDateTime": {
            "format": "date-time",
            "description": "The UTC date and time when the client’s information was last modified.",
            "type": "string"
          },
          "LastName": {
            "description": "The client’s last name. You must specify a last name when you add a client.",
            "type": "string"
          },
          "Liability": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Liability"
          },
          "LiabilityRelease": {
            "description": "Passing `true` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `true`.\r\n* `AgreementDate` is set to the time zone of the business when the call was processed.\r\n* `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.\r\nPassing `false` sets the client’s liability information as follows:\r\n* `IsReleased` is set to `false`.\r\n* `AgreementDate` is set to `null`.\r\n* `ReleasedBy` is set to `null`.",
            "type": "boolean"
          },
          "MembershipIcon": {
            "format": "int32",
            "description": "The ID of the membership icon displayed next to the client’s name, if the client has a membership on their account.",
            "type": "integer"
          },
          "MiddleName": {
            "description": "The client’s middle name.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The client’s mobile phone number.",
            "type": "string"
          },
          "MobileProvider": {
            "format": "int32",
            "description": "The client's mobile provider.",
            "type": "integer"
          },
          "NewId": {
            "description": "When passed, sets the client's ID to this value. Otherwise, the client's ID will match their `UniqueId`.",
            "type": "string"
          },
          "Notes": {
            "description": "Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.",
            "type": "string"
          },
          "PhotoUrl": {
            "description": "The URL for the client’s photo, if one has been uploaded.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The client’s postal code.",
            "type": "string"
          },
          "ProspectStage": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProspectStage"
          },
          "RedAlert": {
            "description": "Contains any red alert information entered by the business owner for the client.",
            "type": "string"
          },
          "ReferredBy": {
            "description": "Specifies how the client was referred to the business. You can get a list of possible strings using the `GET ClientReferralTypes` endpoint.<br />\r\nFor more information, see [Referral types and referral subtypes](https://support.mindbodyonline.com/s/article/203259393-Referral-types-and-referral-subtypes?language=en_US).",
            "type": "string"
          },
          "SalesReps": {
            "description": "Contains information about the sales representatives to be assigned to the new client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SalesRep"
            }
          },
          "SiteId": {
            "format": "int32",
            "description": "The ID of the site.",
            "type": "integer"
          },
          "State": {
            "description": "The client’s state.",
            "type": "string"
          },
          "Status": {
            "description": "The client’s status.",
            "type": "string"
          },
          "Test": {
            "description": "When `true`, indicates that test mode is enabled. The method is validated, but no client data is added or updated.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "UniqueId": {
            "format": "int64",
            "description": "The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.",
            "type": "integer"
          },
          "WorkExtension": {
            "description": "The client’s work phone extension number.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The client’s work phone number.",
            "type": "string"
          },
          "YellowAlert": {
            "description": "Contains any yellow alert information entered by the business owner for the client.",
            "type": "string"
          },
          "SendScheduleEmails": {
            "description": "When `true`, indicates that the client opts to receive schedule emails.",
            "type": "boolean"
          },
          "SendAccountEmails": {
            "description": "When `true`, indicates that the client opts to receive account emails.",
            "type": "boolean"
          },
          "SendPromotionalEmails": {
            "description": "When `true`, indicates that the client opts to receive promotional emails.",
            "type": "boolean"
          },
          "SendScheduleTexts": {
            "description": "When `true`, indicates that the client opts to receive schedule texts.",
            "type": "boolean"
          },
          "SendAccountTexts": {
            "description": "When `true`, indicates that the client opts to receive account texts.",
            "type": "boolean"
          },
          "SendPromotionalTexts": {
            "description": "When `true`, indicates that the client opts to receive promotional texts.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientResponse": {
        "type": "object",
        "properties": {
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Client"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRequest": {
        "required": [
          "Client"
        ],
        "type": "object",
        "properties": {
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientWithSuspensionInfo"
          },
          "Test": {
            "description": "When `true`, indicates that test mode is enabled. The method is validated, but no client data is added or updated.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "CrossRegionalUpdate": {
            "description": "When `true`, the updated information is propagated to all of the region’s sites where the client has a profile.<br />\r\nWhen `false`, only the local client is updated.<br />\r\nDefault: **true**",
            "type": "boolean"
          },
          "NewId": {
            "description": "The new RSSID to be used for the client. Use `NewId` to assign a specific number to be a client’s ID. If that number is not available, the call returns an error. This RSSID must be unique within the subscriber’s site. If this is a cross-regional update, the RSSID must be unique across the region. If the requested number is already in use, an error is returned.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientResponse": {
        "type": "object",
        "properties": {
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientWithSuspensionInfo"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitRequest": {
        "required": [
          "VisitId"
        ],
        "type": "object",
        "properties": {
          "VisitId": {
            "format": "int32",
            "description": "The ID of the visit to be updated.",
            "type": "integer"
          },
          "Makeup": {
            "description": "When `true`, indicates that the visit is eligible to be made up.",
            "type": "boolean"
          },
          "SignedIn": {
            "description": "When `true`, indicates that the client has signed in for the visit.",
            "type": "boolean"
          },
          "Execute": {
            "description": "The execute code used to update this visit. Possible values are:\r\n* Cancel\r\n* Latecancel\r\n* Unlatecancel",
            "type": "string"
          },
          "Test": {
            "description": "When `true`, indicates that test mode is enabled. When test mode is enabled, input information is validated, but not committed.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "SendEmail": {
            "description": "When `true`, indicates that the client should be sent an email for cancellations. Note that email is not sent unless the client has an email address and automatic emails have been set up correctly.<br />\r\nDefault: **false**",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientVisitResponse": {
        "type": "object",
        "properties": {
          "Visit": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Visit"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalRequest": {
        "required": [
          "ClientId",
          "LocationId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the requested client.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location for the requested arrival.",
            "type": "integer"
          },
          "ArrivalTypeId": {
            "format": "int32",
            "description": "The ID of the arrival type to take. \r\nOPTIONAL: will take first payment found if not provided",
            "type": "integer"
          },
          "Test": {
            "description": "OPTIONAL: If test is true only validation is ran",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddArrivalResponse": {
        "type": "object",
        "properties": {
          "ArrivalAdded": {
            "description": "When `true`, indicates that the arrival was added to the database.",
            "type": "boolean"
          },
          "ClientService": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientService"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.SendPasswordResetEmailRequest": {
        "description": "Request to send a password reset email to a user",
        "required": [
          "UserEmail",
          "UserFirstName",
          "UserLastName"
        ],
        "type": "object",
        "properties": {
          "UserEmail": {
            "description": "The user’s email address. The software uses this parameter as the username.",
            "type": "string"
          },
          "UserFirstName": {
            "description": "The user’s first name. The software uses this parameter to verify the user.",
            "type": "string"
          },
          "UserLastName": {
            "description": "The user’s last name. The software uses this parameter to verify the user.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client whose contact logs are being requested.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filters the results to contact logs created on or after this date.<br />\r\nDefault: **the current date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filters the results to contact logs created before this date.<br />\r\nDefault: **the start date**",
            "type": "string"
          },
          "StaffIds": {
            "description": "Filters the results to return contact logs assigned to one or more staff IDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ShowSystemGenerated": {
            "description": "When `true`, system-generated contact logs are returned in the results.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "TypeIds": {
            "description": "Filters the results to contact logs assigned one or more of these type IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SubtypeIds": {
            "description": "Filters the results to contact logs assigned one or more of these subtype IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ContactLogs": {
            "description": "Contains the information about the contact logs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLog"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceRequest": {
        "required": [
          "ServiceId"
        ],
        "type": "object",
        "properties": {
          "ServiceId": {
            "format": "int32",
            "description": "The ID of the service to update.",
            "type": "integer"
          },
          "ActiveDate": {
            "format": "date-time",
            "description": "The date that the service became active.",
            "type": "string"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "The date that the service is to expire.",
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "description": "Total number of sessions",
            "type": "integer"
          },
          "Test": {
            "description": "When `true`, indicates that input information is to be validated, but not committed.<br />\r\nWhen `false` or omitted, the database is affected.<br />\r\nDefault: **false**",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientServiceResponse": {
        "type": "object",
        "properties": {
          "ClientService": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientService"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.DirectDebitInfo": {
        "type": "object",
        "properties": {
          "NameOnAccount": {
            "description": "The name on the bank account.",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "The routing number for the bank.",
            "type": "string"
          },
          "AccountNumber": {
            "description": "The bank account number.",
            "type": "string"
          },
          "AccountType": {
            "description": "The account type. Either Checking or Savings.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoRequest": {
        "type": "object",
        "properties": {
          "Test": {
            "description": "A value of true performs a dry run exectuion",
            "type": "boolean"
          },
          "ClientId": {
            "description": "The ID of the client being updated",
            "type": "string"
          },
          "NameOnAccount": {
            "description": "The name on the bank account being added",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "The routing number of the bank account being added",
            "type": "string"
          },
          "AccountNumber": {
            "description": "The account number of the bank account being added",
            "type": "string"
          },
          "AccountType": {
            "description": "Either \"Checking\" or \"Savings\"",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.AddClientDirectDebitInfoResponse": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client being updated",
            "type": "string"
          },
          "NameOnAccount": {
            "description": "The name on the bank account being added",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "The routing number of the bank account being added",
            "type": "string"
          },
          "AccountNumber": {
            "description": "The account number of the bank account being added",
            "type": "string"
          },
          "AccountType": {
            "description": "Either \"Checking\" or \"Savings\"",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client whose reward information is being requested.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filters the results to rewards transactions created on or after this date.<br />\r\nDefault: **the current date**",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filters the results to rewards transactions created before this date.<br />\r\nDefault: **the start date**",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientRewardsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Balance": {
            "format": "int64",
            "description": "Current balance of client rewards",
            "type": "integer"
          },
          "Transactions": {
            "description": "List of client reward transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientRewardTransaction"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientRewardTransaction": {
        "description": "Client reward transaction",
        "type": "object",
        "properties": {
          "ActionDateTime": {
            "format": "date-time",
            "description": "Timestamp of the transaction",
            "type": "string"
          },
          "Action": {
            "description": "Action that was performed",
            "enum": [
              "Earned",
              "Redeemed",
              "Returned",
              "Removed",
              "LateCanceled"
            ],
            "type": "string"
          },
          "Source": {
            "description": "Source of transaction",
            "type": "string"
          },
          "SourceID": {
            "format": "int64",
            "description": "Unique ID of transaction type",
            "type": "integer"
          },
          "ExpirationDateTime": {
            "format": "date-time",
            "description": "Expiration of earned points",
            "type": "string"
          },
          "Points": {
            "format": "int64",
            "description": "Value of the transaction",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.UpdateClientRewardsRequest": {
        "description": "Request object for using the API to Earn or Redeem reward points",
        "required": [
          "ClientId",
          "Points",
          "Action"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "Required.  The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients.",
            "type": "string"
          },
          "Points": {
            "format": "int64",
            "description": "Required. The amount of Rewards Points we are earning/redeeming",
            "minimum": 1,
            "type": "integer"
          },
          "Source": {
            "description": "Required if Action is \"Earned\".  Must be one of \"Sale\",\"Class Booking\",\"Appointment Booking\", or \"Referral\"",
            "type": "string"
          },
          "SourceId": {
            "format": "int64",
            "description": "Optional.  The unique Id in the MINDBODY System for the Source of the reward.  For example, If the Action is \"Earned\" and Source is \"Sale\" then the SourceId is the unique Id for the \r\nsale in the MINDBODY System.  If action is redeemed, the RedemptionType will be \"Purchase\" and if provided the SourceId is the unique id of the sale in the MINDBODY system where the points were redeemed.",
            "type": "integer"
          },
          "Action": {
            "description": "Required.  The Action we are taking on the rewards points.  Must be either \"Earned\" or \"Redeemed\"",
            "type": "string"
          },
          "ActionDateTime": {
            "format": "date-time",
            "description": "Optional.  The Date and Time the Action Occurred in UTC.  May not be in the future, if omitted defaults to current Date/Time in UTC.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoRequest": {
        "description": "request for GetClientCompleteInfoRequest",
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client to query.",
            "type": "string"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filters results to pricing options that are valid on or after this date.",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filters results to pricing options that are valid on or before this date.",
            "type": "string"
          },
          "CrossRegionalLookup": {
            "description": "Used to retrieve a client’s data from multiple sites within an organization.\r\nDefault: **false**",
            "type": "boolean"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "type": "integer"
          },
          "RequiredClientData": {
            "description": "Used to store the required type of data for particular client",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetClientCompleteInfoResponse": {
        "type": "object",
        "properties": {
          "Client": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientWithSuspensionInfo"
          },
          "ClientServices": {
            "description": "Contains information about client pricing options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientService"
            }
          },
          "ClientContracts": {
            "description": "Contains the details of the client’s contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientContract"
            }
          },
          "ClientMemberships": {
            "description": "Details about the requested memberships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientMembership"
            }
          },
          "ClientArrivals": {
            "description": "Details about the active client arrival programs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientArrival"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientArrival": {
        "type": "object",
        "properties": {
          "ArrivalProgramID": {
            "format": "int32",
            "description": "Arrival program id",
            "type": "integer"
          },
          "ArrivalProgramName": {
            "description": "Arrival program name",
            "type": "string"
          },
          "CanAccess": {
            "description": "Property to check client can access arrival service.",
            "type": "boolean"
          },
          "LocationsIDs": {
            "description": "List of locations where arrival service can availed",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesRequest": {
        "type": "object",
        "properties": {
          "ContactLogTypeId": {
            "format": "int32",
            "description": "The ID of the Contact Log Type",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetContactLogTypesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ContactLogTypes": {
            "description": "Contains the information about the contact log types.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContactLogType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.DeleteContactLogRequest": {
        "required": [
          "ClientId",
          "ContactLogId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The client ID of the client whose Contact Log is being deleted.",
            "type": "string"
          },
          "ContactLogId": {
            "format": "int64",
            "description": "The Contact Log ID.",
            "type": "integer"
          },
          "Test": {
            "description": "When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.\r\nWhen `false`, the database is updated.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.SendAutoEmailRequest": {
        "required": [
          "ClientId",
          "EmailType"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The Unique Id of the client as assigned by the business.",
            "type": "string"
          },
          "EmailType": {
            "description": "The type of auto email to send (currently only BusinessWelcomeEmail or ConsumerWelcomeEmail are supported.)",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsRequest": {
        "required": [
          "ClientIds"
        ],
        "type": "object",
        "properties": {
          "ClientIds": {
            "description": "The ID's of the clients whose membership was requested.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the requested membership was created.",
            "type": "integer"
          },
          "CrossRegionalLookup": {
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.\r\nDefault: **false**",
            "type": "boolean"
          },
          "ClientAssociatedSitesOffset": {
            "format": "int32",
            "description": "Used to retrieve a client’s memberships from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetActiveClientsMembershipsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ClientMemberships": {
            "description": "Details about the requested memberships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientMemberships"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientMemberships": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "ID of the client.",
            "type": "string"
          },
          "Memberships": {
            "description": "Client membership details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientMembership"
            }
          },
          "ErrorMessage": {
            "description": "Used to return error message on conditional basis",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractRequest": {
        "required": [
          "ClientId",
          "ClientContractId",
          "TerminationDate"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The RSSID of the client for whom the contract is getting terminated.",
            "type": "string"
          },
          "ClientContractId": {
            "format": "int32",
            "description": "The unique ID of the sale of the contract",
            "type": "integer"
          },
          "TerminationDate": {
            "format": "date-time",
            "description": "The date to terminate contract",
            "type": "string"
          },
          "TerminationCode": {
            "description": "The termination code",
            "type": "string"
          },
          "TerminationComments": {
            "description": "The termination comments",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.TerminateContractResponse": {
        "type": "object",
        "properties": {
          "Contract": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientContract"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateClientContractAutopaysRequest": {
        "type": "object",
        "properties": {
          "ClientContractId": {
            "format": "int32",
            "description": "Client Contract Id",
            "type": "integer"
          },
          "AutopayStartDate": {
            "format": "date-time",
            "description": "Autopay start date",
            "type": "string"
          },
          "AutopayEndDate": {
            "format": "date-time",
            "description": "(optional) - Indefinite if not provided",
            "type": "string"
          },
          "ProductId": {
            "format": "int32",
            "description": "Product Id to update (optional if contract has only one product)",
            "type": "integer"
          },
          "ReplaceWithProductId": {
            "format": "int32",
            "description": "(optional) - Replaces the product with this product",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "Overrides autopay amount or amount that would come from ProductId",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Contract": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The contract’s ID at the subscriber’s business.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the contract.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the contract.",
            "type": "string"
          },
          "AssignsMembershipId": {
            "format": "int32",
            "description": "The ID of the membership that was assigned to the client when the client signed up for a contract.",
            "type": "integer"
          },
          "AssignsMembershipName": {
            "description": "The name of the membership that was assigned to the client when the client signed up for this contract.",
            "type": "string"
          },
          "SoldOnline": {
            "description": "When `true`, indicates that this membership is intended to be shown to clients in client experiences.<br />\r\nWhen `false`, this contract should only be shown to staff members.",
            "type": "boolean"
          },
          "ContractItems": {
            "description": "Contains information about the items in the contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ContractItem"
            }
          },
          "IntroOffer": {
            "description": "Defines whether this contract is treated as an introductory offer. If this is an introductory offer, then clients are always charged a set number of times rather than month to month, using their AutoPays. Possible values are:\r\n* None\r\n* NewConsumer\r\n* NewAndReturningConsumer",
            "type": "string"
          },
          "AutopaySchedule": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.AutopaySchedule"
          },
          "NumberOfAutopays": {
            "format": "int32",
            "description": "The number of times that the AutoPay is to be run. This value is null if `FrequencyType` is `MonthToMonth`.",
            "type": "integer"
          },
          "AutopayTriggerType": {
            "description": "Defines whether the AutoPay, if applicable to this contract, runs on a set schedule or when the pricing option runs out or expires. Possible values are:\r\n* OnSetSchedule\r\n* PricingOptionRunsOutOrExpires",
            "type": "string"
          },
          "ActionUponCompletionOfAutopays": {
            "description": "The renewal action to be taken when this AutoPay is completed. Possible values are:\r\n* ContractExpires\r\n* ContractAutomaticallyRenews",
            "type": "string"
          },
          "ClientsChargedOn": {
            "description": "The value that indicates when clients are charged. Possible values are:\r\n* OnSaleDate\r\n* FirstOfTheMonth\r\n* FifteenthOfTheMonth\r\n* LastDayOfTheMonth\r\n* FirstOrFifteenthOfTheMonth\r\n* FirstOrSixteenthOfTheMonth\r\n* FifteenthOrEndOfTheMonth\r\n* SpecificDate",
            "type": "string"
          },
          "ClientsChargedOnSpecificDate": {
            "format": "date-time",
            "description": "If `ClientsChargedOn` is defined as a specific date, this property holds the value of that date. Otherwise, this property is null.",
            "type": "string"
          },
          "DiscountAmount": {
            "format": "double",
            "description": "The calculated discount applied to the items in this contract.",
            "type": "number"
          },
          "DepositAmount": {
            "format": "double",
            "description": "The amount of the deposit required for this contract.",
            "type": "number"
          },
          "FirstAutopayFree": {
            "description": "When `true`, indicates that the first payment for the AutoPay is free.",
            "type": "boolean"
          },
          "LastAutopayFree": {
            "description": "When `true`, indicates that the last payment for the AutoPay is free.",
            "type": "boolean"
          },
          "ClientTerminateOnline": {
            "description": "When `true`, indicates that the client can terminate this contract on the Internet.",
            "type": "boolean"
          },
          "MembershipTypeRestrictions": {
            "description": "Contains information about the memberships that can purchase this contract. If null, then no membership restrictions exist, and anyone can purchase the contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.MembershipTypeRestriction"
            }
          },
          "LocationPurchaseRestrictionIds": {
            "description": "The IDs of the locations where this contract may be sold. If there are no restrictions, this value is null.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationPurchaseRestrictionNames": {
            "description": "Location names where the contract may be purchased. If this value is null, there are no restrictions.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AgreementTerms": {
            "description": "Business-defined terms and conditions for the contract.",
            "type": "string"
          },
          "RequiresElectronicConfirmation": {
            "description": "When `true`, clients who purchase the contract are prompted to agree to the terms of the contract the next time that they log in.",
            "type": "boolean"
          },
          "AutopayEnabled": {
            "description": "When `true`, this contract establishes an AutoPay on the client’s account.",
            "type": "boolean"
          },
          "FirstPaymentAmountSubtotal": {
            "format": "double",
            "description": "The subtotal of the amount that the client is to be charged when signing up for the contract.",
            "type": "number"
          },
          "FirstPaymentAmountTax": {
            "format": "double",
            "description": "The amount of tax that the client is to be charged when signing up for the contract.",
            "type": "number"
          },
          "FirstPaymentAmountTotal": {
            "format": "double",
            "description": "The total amount that the client is to be charged when signing up for the contract.",
            "type": "number"
          },
          "RecurringPaymentAmountSubtotal": {
            "format": "double",
            "description": "The subtotal amount that the client is to be charged on an ongoing basis.",
            "type": "number"
          },
          "RecurringPaymentAmountTax": {
            "format": "double",
            "description": "The amount of tax the client is to be charged on an ongoing basis.",
            "type": "number"
          },
          "RecurringPaymentAmountTotal": {
            "format": "double",
            "description": "The total amount that the client is to be charged on an ongoing basis.",
            "type": "number"
          },
          "TotalContractAmountSubtotal": {
            "format": "double",
            "description": "The subtotal amount that the client is to be charged over the lifespan of the contract.",
            "type": "number"
          },
          "TotalContractAmountTax": {
            "format": "double",
            "description": "The total amount of tax the client is to be charged over the lifespan of the contract.",
            "type": "number"
          },
          "TotalContractAmountTotal": {
            "format": "double",
            "description": "The total amount the client is to be charged over the lifespan of the contract.",
            "type": "number"
          },
          "PromoPaymentAmountSubtotal": {
            "format": "double",
            "description": "Subtotal promotional period",
            "type": "number"
          },
          "PromoPaymentAmountTax": {
            "format": "double",
            "description": "Taxes of promotional period",
            "type": "number"
          },
          "PromoPaymentAmountTotal": {
            "format": "double",
            "description": "Total of promotional period",
            "type": "number"
          },
          "NumberOfPromoAutopays": {
            "format": "int32",
            "description": "Number of times that the AutoPay runs under the promotional period",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ContractItem": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "The ID of the item.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the item.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the item.",
            "type": "string"
          },
          "Type": {
            "description": "The type of the item.",
            "type": "string"
          },
          "Price": {
            "format": "double",
            "description": "The price of the item.",
            "type": "number"
          },
          "Quantity": {
            "format": "int32",
            "description": "The quantity of the item.",
            "type": "integer"
          },
          "OneTimeItem": {
            "description": "When `true`, indicates that the item is charged only once.<br />\r\nWhen `false`, indicates that the item is charged multiple times.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.AutopaySchedule": {
        "type": "object",
        "properties": {
          "FrequencyType": {
            "description": "Defines how often clients are charged. Possible values are:\r\n* SetNumberOfAutopays\r\n* MonthToMonth",
            "type": "string"
          },
          "FrequencyValue": {
            "format": "int32",
            "description": "The interval of AutoPay frequency, combined with `FrequencyTimeUnit`. This value is null if `FrequencyType` is `MonthToMonth`.",
            "type": "integer"
          },
          "FrequencyTimeUnit": {
            "description": "Defines the time unit that sets how often to run the AutoPay, combined with `FrequencyValue`. This value is null if `FrequencyType` is `MonthToMonth`. Possible values are:\r\n* Weekly\r\n* Monthly\r\n* Yearly",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.MembershipTypeRestriction": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the membership that is allowed to purchase the contract.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the membership type.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractRequest": {
        "required": [
          "ClientId",
          "ClientContractId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The RSSID of the client for whom the contract is getting suspended.",
            "type": "string"
          },
          "ClientContractId": {
            "format": "int32",
            "description": "The unique ID of the sale of the contract",
            "type": "integer"
          },
          "SuspensionType": {
            "description": "The suspension type",
            "type": "string"
          },
          "SuspensionStart": {
            "format": "date-time",
            "description": "The date to start contract suspension",
            "type": "string"
          },
          "Duration": {
            "format": "int32",
            "description": "The number of (DurationUnit) the suspension lasts",
            "type": "integer"
          },
          "DurationUnit": {
            "format": "int32",
            "description": "The unit applied to duration",
            "type": "integer"
          },
          "OpenEnded": {
            "description": "Indicates open ended suspension",
            "type": "boolean"
          },
          "SuspensionNotes": {
            "description": "The suspension notes",
            "type": "string"
          },
          "SuspensionFee": {
            "format": "double",
            "description": "charge to suspend a contract for a set period of time",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.SuspendContractResponse": {
        "type": "object",
        "properties": {
          "Contract": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClientContract"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.AddClientToEnrollmentRequest": {
        "required": [
          "ClientId",
          "ClassScheduleId"
        ],
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client who is being booked into the enrollment.",
            "type": "string"
          },
          "ClassScheduleId": {
            "format": "int32",
            "description": "The ID of the class schedule (enrollment) into which the client is being booked.",
            "type": "integer"
          },
          "EnrollDateForward": {
            "format": "date-time",
            "description": "Enroll the clients from this date forward. `EnrollDateForward` takes priority over open enrollment.",
            "type": "string"
          },
          "EnrollOpen": {
            "description": "Enroll for selected days.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          },
          "Test": {
            "description": "When `true`, input information is validated, but not committed.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "SendEmail": {
            "description": "When `true`, indicates that the client should be sent an email. An email is only sent if the client has an email address and automatic emails have been set up.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Waitlist": {
            "description": "When `true`, the client is added to a specific enrollments waiting list.",
            "type": "boolean"
          },
          "WaitlistEntryId": {
            "format": "int32",
            "description": "The waiting list entry to add. Used to add a client to an enrollment from a waiting list entry.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsRequest": {
        "type": "object",
        "properties": {
          "ClassScheduleIds": {
            "description": "A list of the requested class schedule IDs. If omitted, all class schedule IDs return.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "EndDate": {
            "format": "date-time",
            "description": "The end of the date range. The response returns any active enrollments that occur on or before this day.<br />\r\nDefault: **StartDate**",
            "type": "string"
          },
          "LocationIds": {
            "description": "List of the IDs for the requested locations. If omitted, all location IDs return.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ProgramIds": {
            "description": "List of the IDs for the requested programs. If omitted, all program IDs return.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SessionTypeIds": {
            "description": "List of the IDs for the requested session types. If omitted, all session types IDs return.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "StaffIds": {
            "description": "List of the IDs for the requested staff IDs. If omitted, all staff IDs return.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "StartDate": {
            "format": "date-time",
            "description": "The start of the date range. The response returns any active enrollments that occur on or after this day.<br />\r\nDefault: **today’s date**",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClassController.GetEnrollmentsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Enrollments": {
            "description": "Contains information about the enrollments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ClassSchedule"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlRequest": {
        "description": "Request to create an encrypted live stream url",
        "type": "object",
        "properties": {
          "ClientId": {
            "format": "int64",
            "description": "Id of client at the studio",
            "type": "integer"
          },
          "SubscriberId": {
            "format": "int32",
            "description": "Id of studio aka studioId/siteId",
            "type": "integer"
          },
          "UserDisplayName": {
            "description": "User name displayed in VWP live stream",
            "type": "string"
          },
          "ServiceId": {
            "format": "int32",
            "description": "Id of class instance at studio on given date/time right now since it only supports classes (different from class id)",
            "type": "integer"
          },
          "ApiUser": {
            "description": "Identification of 3rd party integrator",
            "type": "string"
          },
          "ServiceType": {
            "description": "Possible values are: \"class\", \"appointment\"",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.LiveStreamController.GenerateSignedLiveStreamUrlResponse": {
        "description": "Response with encrypted live stream url",
        "type": "object",
        "properties": {
          "SignedUrl": {
            "description": "Encrypted URL that will allow a user to join a live stream without logging in.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsRequest": {
        "type": "object",
        "properties": {
          "ScheduledServiceType": {
            "description": "Defines a payroll filter for the type of service offered, either \"Class\", \"Appointment\", or \"Enrollment\".",
            "type": "string"
          },
          "ScheduledServiceId": {
            "format": "int64",
            "description": "The ID for the instance of the service offered",
            "type": "integer"
          },
          "StaffId": {
            "format": "int64",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetScheduledServiceEarningsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ScheduledServiceEarnings": {
            "description": "Contains the class payroll events.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ScheduledServiceEarningsEvent"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ScheduledServiceEarningsEvent": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who taught the class.",
            "type": "integer"
          },
          "ScheduledServiceId": {
            "format": "int64",
            "description": "The class' ID.",
            "type": "integer"
          },
          "ScheduledServiceType": {
            "description": "The type of the scheduled service; i.e, a class, appointment, or enrollment.",
            "enum": [
              "Class",
              "Appointment",
              "Enrollment",
              "All"
            ],
            "type": "string"
          },
          "Earnings": {
            "format": "double",
            "description": "The total monetary amount the staff is to be paid for this class.",
            "type": "number"
          },
          "DateTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsRequest": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTimeCardsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "TimeCards": {
            "description": "Information about time card entries, ordered by staff ID.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.TimeCardEvent"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.TimeCardEvent": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the requested staff member.",
            "type": "integer"
          },
          "Task": {
            "description": "The staff member’s job title.",
            "type": "string"
          },
          "TimeIn": {
            "format": "date-time",
            "description": "The time that the staff member started the job task.",
            "type": "string"
          },
          "TimeOut": {
            "format": "date-time",
            "description": "The time that the staff member stopped doing the job task.",
            "type": "string"
          },
          "Hours": {
            "format": "double",
            "description": "The number of hours on this time card, rounded to the nearest fourth decimal place.",
            "type": "number"
          },
          "HourlyRate": {
            "format": "double",
            "description": "The hourly rate the business pays this staff for this `Task`.",
            "type": "number"
          },
          "Earnings": {
            "format": "double",
            "description": "The total amount earned by the staff member for this time card entry.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsRequest": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetCommissionsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Commissions": {
            "description": "Contains information about commissions earned by staff for sales within the given date range. Results are ordered by `SaleId`, then by `StaffId`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CommissionPayrollPurchaseEvent"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CommissionPayrollPurchaseEvent": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who earned commissions.",
            "type": "integer"
          },
          "SaleDateTime": {
            "format": "date-time",
            "description": "The date and time when the sale occurred.",
            "type": "string"
          },
          "SaleId": {
            "format": "int64",
            "description": "The sale’s ID.",
            "type": "integer"
          },
          "SaleType": {
            "description": "The Sales type. When this is \"Purchase\" indicates that this sale paid commission to a staff. When this is \"Return\"",
            "type": "string"
          },
          "ProductId": {
            "format": "int64",
            "description": "The product ID of the item for which the staff earned commissions.",
            "type": "integer"
          },
          "EarningsDetails": {
            "description": "Contains information about which commissions the staff earned for this item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CommissionDetail"
            }
          },
          "Earnings": {
            "format": "double",
            "description": "The total commissions earned by the staff for this item.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CommissionDetail": {
        "type": "object",
        "properties": {
          "CommissionType": {
            "description": "The type of commission earned. Possible values are:\r\n* ItemStandardPercentageCommission\r\n* ItemStandardFlatCommission\r\n* ItemPromotionalPercentageCommission\r\n* ItemPromotionalFlatCommission\r\n* StaffStandardPercentageCommission\r\n* StaffStandardFlatCommission\r\n* StaffPromotionalPercentageCommission\r\n* StaffPromotionalFlatCommission",
            "type": "string"
          },
          "CommissionEarnings": {
            "format": "double",
            "description": "The portion of `Earnings` earned by this `CommissionType`.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsRequest": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "A list of staff IDs that you want to retrieve payroll information for. If you do not supply a `StaffId`, all active staff members return, ordered by staff ID.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The beginning of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.\r\n* If you do not supply a `StartDateTime`, data returns for the seven days prior to the `EndDateTime` that you supply.\r\n* If you do not supply either a `StartDateTime` or an `EndDateTime`, the data returns for seven days prior to today’s date.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The end of the date range for the payroll information to be returned. The maximum allowed date range is 14 days.<br />\r\nDefault: **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data returns for the period from the `StartDateTime` that you supply to today’s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`, data returns for the seven days prior to today’s date.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "A LocationId that you want to retrieve payroll information for. If you do not supply a `LocationId`, data from all locations is returned.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PayrollController.GetTipsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Tips": {
            "description": "Contains information about tips given to staff members within the given date range. Results are ordered by StaffId.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Tip"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Tip": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member the tip is for.",
            "type": "integer"
          },
          "SaleId": {
            "format": "int64",
            "description": "The sale’s ID associated with the tip.",
            "type": "integer"
          },
          "SaleDateTime": {
            "format": "date-time",
            "description": "The date and time when the tip was given.",
            "type": "string"
          },
          "Earnings": {
            "format": "double",
            "description": "The amount tipped to the staff member.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PricingOptionController.UpdatePricingOptionRequest": {
        "description": "To Update pricing option data",
        "required": [
          "ProductId"
        ],
        "type": "object",
        "properties": {
          "ProductId": {
            "format": "double",
            "description": "The id of the pricing option (legacy Id in mongo db)",
            "type": "number"
          },
          "Name": {
            "description": "Pricing option name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "Price": {
            "format": "double",
            "description": "Price of this Pricing option.",
            "pattern": "^-?\\d+\\.?\\d{0,2}?$",
            "type": "number"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "Online price of this Pricing option.",
            "pattern": "^-?\\d+\\.?\\d{0,2}?$",
            "type": "number"
          },
          "Count": {
            "format": "int32",
            "description": "Number of sessions for this pricing option",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "SellOnline": {
            "description": "Whether this pricing option sell online or not",
            "type": "boolean"
          },
          "RevenueCategory": {
            "description": "Revenue Category of this pricing option",
            "maxLength": 35,
            "minLength": 0,
            "type": "string"
          },
          "Discontinued": {
            "description": "Whether this pricing option active or inactive",
            "type": "boolean"
          },
          "MembershipId": {
            "format": "int32",
            "description": "The ID of the membership required to purchase the pricing option\r\nDefault is -1 and will not update Membership if it is not passed in body",
            "type": "integer"
          },
          "IsThirdPartyDiscountPricing": {
            "description": "Is this pricing option sold at discounted rates by third-parties\r\nOnce set to true it cannot be changed",
            "type": "boolean"
          },
          "Priority": {
            "description": "The priority of the pricing option\r\nPriority can be set to Low(-1), Medium (0), High(1)",
            "type": "string"
          },
          "SellAtLocationIds": {
            "description": "The location IDs where this pricing option is sold \r\n(default is null and will not update SellAtLocation if it is not passed in body)",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "UseAtLocationIds": {
            "description": "The location IDs where this pricing option is used\r\n(default is null and will not update UseAtLocation if it is not passed in body)",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ExpirationUnit": {
            "description": "The Expiration unit, either Days or Months",
            "type": "string"
          },
          "ExpirationLength": {
            "format": "int32",
            "description": "The number of days or months that the pricing option is active for.",
            "maximum": 32767,
            "minimum": 1,
            "type": "integer"
          },
          "ExpirationType": {
            "description": "The date the pricing option begins its activation, \r\neither the SaleDate or DateOfClientFirstVisit",
            "type": "string"
          },
          "RestrictedMembershipIds": {
            "description": "This pricing option can be used under these memberships only\r\nIf null/empty then not restricted to any membership",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductRequest": {
        "description": "Update Product Request Model",
        "type": "object",
        "properties": {
          "BarcodeId": {
            "description": "The unique ID of the product variant, for example, a particular size and color combination.",
            "type": "string"
          },
          "Price": {
            "format": "double",
            "description": "The price of the product.",
            "minimum": 0,
            "type": "number"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "The online price of the product.",
            "minimum": 0,
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Products": {
            "description": "Contains information about the products.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Product"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Product": {
        "type": "object",
        "properties": {
          "ProductId": {
            "format": "int32",
            "description": "A ProductID of the product.",
            "type": "integer"
          },
          "Id": {
            "description": "The unique ID of the product variant, for example, a particular size and color combination.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "A CategoryID of the product.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "A SubCategoryID of the product.",
            "type": "integer"
          },
          "Price": {
            "format": "double",
            "description": "The price of the product.",
            "type": "number"
          },
          "TaxIncluded": {
            "format": "double",
            "description": "If tax inclusive-pricing is enabled, this field shows how much tax was added to the price.",
            "type": "number"
          },
          "TaxRate": {
            "format": "double",
            "description": "The tax rate that was applied to this purchase.",
            "type": "number"
          },
          "GroupId": {
            "format": "int32",
            "description": "The unique ID of the product group.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the product.",
            "type": "string"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "The online price of the product.",
            "type": "number"
          },
          "ShortDescription": {
            "description": "A short description of the product.",
            "type": "string"
          },
          "LongDescription": {
            "description": "A longer description of the product.",
            "type": "string"
          },
          "TypeGroup": {
            "format": "int32",
            "description": "A TypeGroup of the product.",
            "type": "integer"
          },
          "SupplierId": {
            "format": "int32",
            "description": "A SupplierID of the product.",
            "type": "integer"
          },
          "SupplierName": {
            "description": "A Supplier name of the product.",
            "type": "string"
          },
          "ImageURL": {
            "description": "",
            "type": "string"
          },
          "Color": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Color"
          },
          "Size": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Size"
          },
          "ManufacturerId": {
            "description": "The ManufacturerId of the product.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Color": {
        "description": "A color used by products.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the product color.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the product color.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Size": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the product size.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the product size.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsRequest": {
        "type": "object",
        "properties": {
          "ProductIds": {
            "description": "An ID filter for products.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SearchText": {
            "description": "A search filter, used for searching by term.",
            "type": "string"
          },
          "CategoryIds": {
            "description": "A list of category IDs to filter by.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SubCategoryIds": {
            "description": "A list of subcategory IDs to filter by.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SellOnline": {
            "description": "When `true`, only products that can be sold online are returned.<br />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location ID to use to determine the tax for the products that this request returns.<br />\r\nDefault: **online store**",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesRequest": {
        "type": "object",
        "properties": {
          "SaleId": {
            "format": "int64",
            "description": "Filters results to the requested sale ID.",
            "type": "integer"
          },
          "StartSaleDateTime": {
            "format": "date-time",
            "description": "Filters results to sales that happened after this date and time.",
            "type": "string"
          },
          "EndSaleDateTime": {
            "format": "date-time",
            "description": "Filters results to sales that happened before this date and time.",
            "type": "string"
          },
          "PaymentMethodId": {
            "format": "int32",
            "description": "Filters results to sales paid for by the given payment method ID.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetSalesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Sales": {
            "description": "Contains the Sale objects, each of which describes the sale and payment for a purchase event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Sale"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleRequest": {
        "description": "ReturnSaleRequest",
        "type": "object",
        "properties": {
          "SaleId": {
            "format": "int64",
            "description": "SaleId",
            "type": "integer"
          },
          "ReturnReason": {
            "description": "ReturnReason",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.ReturnSaleResponse": {
        "description": "ReturnSaleResponse",
        "type": "object",
        "properties": {
          "ReturnSaleID": {
            "format": "int64",
            "description": "The returned sale ID",
            "type": "integer"
          },
          "TrainerID": {
            "format": "int64",
            "description": "The trainer ID who returned the sale",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "The returned amount",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractRequest": {
        "required": [
          "ClientId",
          "ContractId"
        ],
        "type": "object",
        "properties": {
          "Test": {
            "description": "When `true`, the Public API validates input information, but does not commit it, so no client data is affected.<br />\r\nWhen `false` or omitted, the transaction is committed, and client data is affected.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the client is purchasing the contract; used for AutoPays.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The ID of the client. Note that this is not the same as the client’s unique ID.",
            "type": "string"
          },
          "ContractId": {
            "format": "int32",
            "description": "The ID of the contract being purchased.",
            "type": "integer"
          },
          "StartDate": {
            "format": "date-time",
            "description": "The date that the contract starts.<br />\r\nDefault: **today’s date**",
            "type": "string"
          },
          "FirstPaymentOccurs": {
            "description": "The date on which the first payment is to occur. Possible values:\r\n* Instant\r\n* `StartDate`",
            "type": "string"
          },
          "ClientSignature": {
            "format": "byte",
            "description": "A representation of the client’s signature. This value can take the form of Base64-encoded byte array. The file type should be PNG. The picture of the client’s signature is uploaded and viewable from the Client Documents page in the Core Business Mode software. The title of the document is:<br />\r\nclientContractSignature-{uniquePurchasedClientContractID}-{contractName}-{contractStartDate}.{fileType}",
            "type": "string"
          },
          "PromotionCode": {
            "description": "A promotion code, if one applies. Promotion codes are applied to items that are both marked as pay now in a contract and are discounted by the promotion code. If a pay now item is an autopay item, its autopay price is the price at the time of checkout, so, if a promotion code was applied, all autopays are scheduled using that discounted price.",
            "type": "string"
          },
          "CreditCardInfo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CreditCardInfo"
          },
          "StoredCardInfo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StoredCardInfo"
          },
          "SendNotifications": {
            "description": "When `true`, indicates that email and SMS notifications should be sent to the client after purchase.<br />\r\nDefault: **true**",
            "type": "boolean"
          },
          "SalesRepId": {
            "format": "int64",
            "description": "The ID of the staff member who is to be marked as the sales rep for this contract purchase.",
            "type": "integer"
          },
          "UseDirectDebit": {
            "description": "When `true`, indicates that the direct debit information stored on the client's account is to be used to pay for the contract.<br />\r\nThis is only required if both `CreditCardInfo` and `StoredCardInfo` are not passed.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "ConsumerPresent": {
            "description": " When `true`, indicates that the consumer is available to address any SCA challenge issued by the bank.  EU Only.<br /> \r\nDefault: **false**",
            "type": "boolean"
          },
          "PaymentAuthenticationCallbackUrl": {
            "description": "This is the Url the consumer will be redirected back to after completion of the Banks SCA challenge.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CreditCardInfo": {
        "description": "INformation about an individual credit card",
        "type": "object",
        "properties": {
          "CreditCardNumber": {
            "type": "string"
          },
          "ExpMonth": {
            "type": "string"
          },
          "ExpYear": {
            "type": "string"
          },
          "BillingName": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "BillingCity": {
            "type": "string"
          },
          "BillingState": {
            "type": "string"
          },
          "BillingPostalCode": {
            "type": "string"
          },
          "SaveInfo": {
            "type": "boolean"
          },
          "CardId": {
            "description": "Card Id of a stored instruments card",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StoredCardInfo": {
        "type": "object",
        "properties": {
          "LastFour": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseContractResponse": {
        "type": "object",
        "properties": {
          "ClientId": {
            "description": "The ID of the client who is purchasing the contract.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the contract is being purchased.",
            "type": "integer"
          },
          "ContractId": {
            "format": "int32",
            "description": "The ID of the general contract being purchased.",
            "type": "integer"
          },
          "ClientContractId": {
            "format": "int32",
            "description": "The ID of the specific contract being purchased by this specific client, not to be confused with the `ContractId`, which refers to a general contract that the business offers.",
            "type": "integer"
          },
          "PaymentProcessingFailures": {
            "description": "Any cart processing failures, for example when SCA challenged, the cart is in PaymentAuthenticationRequired state and at least one of the failures listed will provide an authentication Url.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PaymentProcessingFailure"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PaymentProcessingFailure": {
        "description": "Contains information about any payment processing failure.  Specifically for when an SCA challenge is",
        "type": "object",
        "properties": {
          "Type": {
            "description": "The type of the failure",
            "type": "string"
          },
          "Message": {
            "description": "Descriptive message for the failure",
            "type": "string"
          },
          "AuthenticationRedirectUrl": {
            "description": "For SCA aware flows, this is the url provided by the bank where the consumer can authorize the transaction",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutShoppingCartRequest": {
        "required": [
          "ClientId",
          "Items",
          "Payments"
        ],
        "type": "object",
        "properties": {
          "CartId": {
            "description": "The unique ID of the shopping cart to be processed. You can use this value to maintain a persistent cart. If you do not specify a cart ID, the MINDBODY software generates one.",
            "type": "string"
          },
          "ClientId": {
            "description": "The RSSID of the client making the purchase. A cart can be validated without a client ID, but a client ID must be specified to complete a sale.",
            "type": "string"
          },
          "Test": {
            "description": "When `true`, indicates that the contents of the cart are validated, but the transaction does not take place. You should use this parameter during testing and when checking the calculated totals of the items in the cart.<br />\r\nWhen `false`, the transaction takes place and the database is affected.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Items": {
            "description": "A list of the items in the cart.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutItemWrapper"
            }
          },
          "InStore": {
            "description": "When `true`, indicates that the cart is to be completed by a staff member and is to take place at one of the business’ physical locations.<br />\r\nWhen `false`, indicates that the cart is to be completed by a client from the business’ online store.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "CalculateTax": {
            "description": "If true tax calculation should be done.",
            "type": "boolean"
          },
          "PromotionCode": {
            "description": "Promotion code to be applied to the cart.",
            "type": "string"
          },
          "Payments": {
            "description": "A list of payment information objects to be applied to payment against the items in the cart.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Payments.CheckoutPaymentInfo"
            }
          },
          "SendEmail": {
            "description": "When `true`, sends a purchase receipt email to the client. Note that all appropriate permissions and settings must be enabled for the client to receive an email.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location ID to be used for pulling business mode prices and taxes. If no location ID is supplied, it defaults to the online store, represented by a null value. \r\nDefault: **null** (the online store)",
            "type": "integer"
          },
          "Image": {
            "format": "byte",
            "description": "The byte array data of the signature image.",
            "type": "string"
          },
          "ImageFileName": {
            "description": "The name of the signature image being uploaded.",
            "type": "string"
          },
          "ConsumerPresent": {
            "description": "Set to true to indicate that the consumer is present.  \r\nUsed in conjunction with EU SCA requirements.  If true you must also provide a PaymentAuthenticationCallbackUrl for consumer authorization of the transaction",
            "type": "boolean"
          },
          "PaymentAuthenticationCallbackUrl": {
            "description": "The URL that the EU consumer is redirected to upon authorizing the transaction with the bank's SCA (Strong Customer Authentication) challenge",
            "type": "string"
          },
          "TransactionIds": {
            "description": "The list of TransactionIds provided with initial response containing SCA Challenge URLs for ConsumerPresent transactions",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "IsBillingPostalCodeRequired": {
            "description": "the flag to check billing post code is required or not.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutItemWrapper": {
        "type": "object",
        "properties": {
          "Item": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Items.CheckoutItem"
          },
          "DiscountAmount": {
            "format": "double",
            "description": "The amount the item is discounted. This parameter is ignored for packages.",
            "type": "number"
          },
          "AppointmentBookingRequests": {
            "description": "A list of appointments to be booked then paid for by this item. This parameter applies only to pricing option items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutAppointmentBookingRequest"
            }
          },
          "EnrollmentIds": {
            "description": "A list of enrollment IDs that this item is to pay for. This parameter applies only to pricing option items.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ClassIds": {
            "description": "A list of class IDs that this item is to pay for. This parameter applies only to pricing option items.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "CourseIds": {
            "description": "A list of course IDs that this item is to pay for. This parameter applies only to pricing option items.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "VisitIds": {
            "description": "A list of visit IDs that this item is to pay for. This parameter applies only to pricing option items.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "AppointmentIds": {
            "description": "A list of appointment IDs that this item is to reconcile.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "Id": {
            "format": "int32",
            "description": "The item’s unique ID within the cart.",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "description": "The number of this item to be purchased.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Payments.CheckoutPaymentInfo": {
        "type": "object",
        "properties": {
          "Type": {
            "description": "The type of payment. Possible values are:\r\n* CreditCard - Indicates that this payment item is a credit card.\r\n* StoredCard - Indicates that this payment item is a credit card stored on the client’s account.\r\n* EncryptedTrackData - Indicates that this payment item is a swiped credit card.\r\n* TrackData - Indicates that this payment item is a swiped credit card.\r\n* DebitAccount - Indicates that funds should be debited from the client’s account.\r\n* Custom - Indicates that this payment item is a custom payment method configured by the business.\r\n* Comp - Indicates that this payment item is making all or part of the cart’s total complementary.\r\n* Cash - Indicates that this payment item is cash.\r\n* Check - Indicates that this payment item is a check.\r\n* GiftCard - Indicates that this payment item is a gift card.",
            "type": "string"
          },
          "Metadata": {
            "description": "Contains information about the cart’s payments. See [Payment Item Metadata](https://developers.mindbodyonline.com/PublicDocumentation/V6#payment-item-metadata) for more information.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Items.CheckoutItem": {
        "type": "object",
        "properties": {
          "Type": {
            "description": "The type of item. Possible values are:\r\n* Service - Indicates that this item is a pricing option.\r\n* Product - Indicates that this item is a retail product.\r\n* Package - Indicates that this item is a package.\r\n* Tip - Indicates that this item is a tip.",
            "type": "string"
          },
          "Metadata": {
            "description": "Contains information about the item to be purchased. See [Cart Item Metadata](https://developers.mindbodyonline.com/PublicDocumentation/V6#cart-item-metadata) for more information.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.CheckoutAppointmentBookingRequest": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member who is to provide the service being booked.",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the appointment is to take place.",
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The ID of the session type of this appointment.",
            "type": "integer"
          },
          "Resources": {
            "description": "Contains information about the resources to be used for the appointment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Resource"
            }
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The date and time that the appointment is to start in the business’ timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The date and time that the appointment is to end in the business’ timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.",
            "type": "string"
          },
          "ProviderId": {
            "description": "The National Provider Identifier (NPI) of the staff member who is to provide the service. For an explanation of Provider IDs, see [Provider IDs](https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?language=en_US).",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardsRequest": {
        "type": "object",
        "properties": {
          "LocationId": {
            "format": "int32",
            "description": "When included, returns gift cards that are sold at the provided location ID.",
            "type": "integer"
          },
          "SoldOnline": {
            "description": "When `true`, only returns gift cards that are sold online.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "IncludeCustomLayouts": {
            "description": "When `true`, includes custom gift card layouts.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Ids": {
            "description": "Filters the results to the requested gift card IDs.<br />\r\nDefault: **all** gift cards.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "GiftCards": {
            "description": "Contains information about the gift cards.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.GiftCard"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.GiftCard": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The gift card's `ProductID`.",
            "type": "integer"
          },
          "LocationIds": {
            "description": "The IDs of the locations where the gift card is sold.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Description": {
            "description": "A description of the gift card.",
            "type": "string"
          },
          "EditableByConsumer": {
            "description": "When `true`, indicates that the gift card can be edited by the client.",
            "type": "boolean"
          },
          "CardValue": {
            "format": "double",
            "description": "The value of the gift card.",
            "type": "number"
          },
          "SalePrice": {
            "format": "double",
            "description": "The sale price of the gift card, if applicable.",
            "type": "number"
          },
          "SoldOnline": {
            "description": "When `true`, indicates that the gift card is sold online.",
            "type": "boolean"
          },
          "MembershipRestrictionIds": {
            "description": "A list of IDs for membership restrictions, if this card is restricted to members with certain types of memberships.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "GiftCardTerms": {
            "description": "The terms of the gift card.",
            "type": "string"
          },
          "ContactInfo": {
            "description": "Contact information for the gift card.",
            "type": "string"
          },
          "DisplayLogo": {
            "description": "When `true`, indicates that the logo should be displayed on the gift card.",
            "type": "boolean"
          },
          "Layouts": {
            "description": "A list of layouts available for the gift card.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.GiftCardLayout"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.GiftCardLayout": {
        "description": "Gift card layout",
        "type": "object",
        "properties": {
          "LayoutId": {
            "format": "int32",
            "description": "The ID of the layout.",
            "type": "integer"
          },
          "LayoutName": {
            "description": "The name of the layout.",
            "type": "string"
          },
          "LayoutUrl": {
            "description": "The URL of the layout.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesRequest": {
        "type": "object",
        "properties": {
          "ProgramIds": {
            "description": "Filters to pricing options with the specified program IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SessionTypeIds": {
            "description": "Filters to the pricing options with the specified session types IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ServiceIds": {
            "description": "Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ClassId": {
            "format": "int32",
            "description": "Filters to the pricing options for the specified class ID.",
            "type": "integer"
          },
          "ClassScheduleId": {
            "format": "int32",
            "description": "Filters to the pricing options for the specified class schedule ID.",
            "type": "integer"
          },
          "SellOnline": {
            "description": "When `true`, filters to the pricing options that can be sold online.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "When specified, for each returned pricing option, `TaxRate` and `TaxIncluded` are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate` is set to zero.",
            "type": "integer"
          },
          "HideRelatedPrograms": {
            "description": "When `true`, indicates that pricing options of related programs are omitted from the response.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "StaffId": {
            "format": "int64",
            "description": "Sets `Price` and `OnlinePrice` to the particular pricing of a specific staff member, if allowed by the business.",
            "type": "integer"
          },
          "IncludeDiscontinued": {
            "description": "When `true`, indicates that the filtered pricing option list includes discontinued pricing options.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "IncludeSaleInContractOnly": {
            "description": "When `true`, indicates that the filtered pricing option list includes sale in contract only pricing options.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetServicesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Services": {
            "description": "Contains information about the services.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Service"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Service": {
        "type": "object",
        "properties": {
          "Price": {
            "format": "double",
            "description": "The cost of the pricing option when sold at a physical location.",
            "type": "number"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "The cost of the pricing option when sold online.",
            "type": "number"
          },
          "TaxIncluded": {
            "format": "double",
            "description": "The amount of tax included in the price, if inclusive pricing is enabled.",
            "type": "number"
          },
          "ProgramId": {
            "format": "int32",
            "description": "The ID of the program that this pricing option applies to.",
            "type": "integer"
          },
          "TaxRate": {
            "format": "double",
            "description": "The tax rate applied to the pricing option. This field is populated only when you include a `LocationID` in the request.",
            "type": "number"
          },
          "ProductId": {
            "format": "int32",
            "description": "The unique ID of the pricing option.",
            "type": "integer"
          },
          "Id": {
            "description": "The barcode ID of the pricing option.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the pricing option.",
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "description": "The initial count of usages available for the pricing option.",
            "type": "integer"
          },
          "SellOnline": {
            "description": "A flag for whether or not the pricing option is sold online.",
            "type": "boolean"
          },
          "SaleInContractOnly": {
            "description": "A flag for whether or not the pricing option is contractonly.",
            "type": "boolean"
          },
          "Type": {
            "description": "Indicates if the pricing option is a drop-in, series, or unlimiited.",
            "type": "string"
          },
          "ExpirationType": {
            "description": "Indicates if the pricing option begins its activation on the date of sale or first usage.",
            "type": "string"
          },
          "ExpirationUnit": {
            "description": "The unit, either days or months, of ExpirationLength.",
            "type": "string"
          },
          "ExpirationLength": {
            "format": "int32",
            "description": "The lifetime of a pricing option.",
            "type": "integer"
          },
          "RevenueCategory": {
            "description": "The revenue category of the pricing option.",
            "type": "string"
          },
          "MembershipId": {
            "format": "int32",
            "description": "The ID that this pricing option grants membership to.",
            "type": "integer"
          },
          "SellAtLocationIds": {
            "description": "The location IDs where this pricing option is sold.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "UseAtLocationIds": {
            "description": "The location IDs where this pricing option may be used.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Priority": {
            "description": "The priority of the pricing option.",
            "type": "string"
          },
          "IsIntroOffer": {
            "description": "A flag that indicates if this pricing option is an introductory offer.",
            "type": "boolean"
          },
          "IntroOfferType": {
            "description": "Indicates if this pricing option may be purchased to new clients or all clients.",
            "type": "string"
          },
          "IsThirdPartyDiscountPricing": {
            "description": "A flag that indicates if this pricing option involves a third party discount",
            "type": "boolean"
          },
          "Program": {
            "description": "The name of the program corresponding to ProgramId.",
            "type": "string"
          },
          "Discontinued": {
            "description": "Whether this pricing option has been discontinued or not",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceRequest": {
        "description": "This class represents the request parameters for the update service API",
        "type": "object",
        "properties": {
          "BarcodeId": {
            "description": "The barcode ID of the pricing option.",
            "type": "string"
          },
          "Price": {
            "format": "double",
            "description": "The cost of the pricing option when sold at a physical location.",
            "minimum": 0,
            "type": "number"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "The cost of the pricing option when sold online.",
            "minimum": 0,
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateServiceResponse": {
        "description": "A response from the Update Services API method.",
        "type": "object",
        "properties": {
          "Services": {
            "description": "List of services as response",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Service"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryRequest": {
        "type": "object",
        "properties": {
          "ProductIds": {
            "description": "An IDs filter for products inventory data.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LocationIds": {
            "description": "The location IDs to use to determine the inventory data of the product of specific location.<br />\r\nDefault: **online store**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "BarcodeIds": {
            "description": "An IDs is barcodeId to filter for products inventory data.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetProductsInventoryResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "ProductsInventory": {
            "description": "Contains information about the products inventory.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProductsInventory"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ProductsInventory": {
        "type": "object",
        "properties": {
          "ProductId": {
            "format": "int32",
            "description": "A ProductId of the product.",
            "type": "integer"
          },
          "BarcodeId": {
            "description": "The Id is barcode Id of the product.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The LocationId of the product.",
            "type": "integer"
          },
          "UnitsLogged": {
            "format": "int32",
            "description": "UnitsLogged of the product.",
            "type": "integer"
          },
          "UnitsSold": {
            "format": "int32",
            "description": "UnitsSold of the product.",
            "type": "integer"
          },
          "UnitsInStock": {
            "format": "int32",
            "description": "The units in stock of the product",
            "type": "integer"
          },
          "ReorderLevel": {
            "format": "int32",
            "description": "ReorderLevel of the product.",
            "type": "integer"
          },
          "MaxLevel": {
            "format": "int32",
            "description": "MaxLevel of the product.",
            "type": "integer"
          },
          "CreatedDateTimeUTC": {
            "format": "date-time",
            "description": "CreatedDateTimeUTC of the product.",
            "type": "string"
          },
          "ModifiedDateTimeUTC": {
            "format": "date-time",
            "description": "ModifiedDateTimeUTC of the product.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsRequest": {
        "required": [
          "LocationId"
        ],
        "type": "object",
        "properties": {
          "ContractIds": {
            "description": "When included, the response only contains details about the specified contract IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SoldOnline": {
            "description": "When `true`, the response only contains details about contracts and AutoPay options that can be sold online.<br />\r\nWhen `false`, only contracts that are not intended to be sold online are returned.<br />\r\nDefault: **all contracts**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location that has the requested contracts and AutoPay options.",
            "type": "integer"
          },
          "ConsumerId": {
            "format": "int64",
            "description": "The ID of the client.",
            "type": "integer"
          },
          "PromoCode": {
            "description": "PromoCode to apply",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetContractsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Contracts": {
            "description": "Contains information about each contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Contract"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsRequest": {
        "type": "object",
        "properties": {
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetCustomPaymentMethodsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "PaymentMethods": {
            "description": "Contains information about the custom payment methods.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.CustomPaymentMethod"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.CustomPaymentMethod": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the custom payment method.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the custom payment method.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditRequest": {
        "required": [
          "ClientId"
        ],
        "type": "object",
        "properties": {
          "Test": {
            "description": "When `true`, the Public API validates input information, but does not commit it, so no client data is affected.<br />\r\nWhen `false` or omitted, the transaction is committed, and client data is affected.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the client is purchasing the contract; used for AutoPays.",
            "type": "integer"
          },
          "ClientId": {
            "description": "The ID of the client. Note that this is not the same as the client’s unique ID.",
            "type": "string"
          },
          "SendEmailReceipt": {
            "description": "When `true`, indicates that a purchase receipt email should be sent to the purchasing client, if all settings are correctly configured.<br />\r\nWhen `false`, no email is sent to the purchaser.",
            "type": "boolean"
          },
          "SalesRepId": {
            "format": "int64",
            "description": "The ID of the staff member who is to be marked as the sales rep for this gift card purchase.",
            "type": "integer"
          },
          "ConsumerPresent": {
            "description": " When `true`, indicates that the consumer is available to address any SCA challenge issued by the bank.  EU Only.<br /> \r\nDefault: **false**",
            "type": "boolean"
          },
          "PaymentAuthenticationCallbackUrl": {
            "description": "This is the Url the consumer will be redirected back to after completion of the Banks SCA challenge.",
            "type": "string"
          },
          "PaymentInfo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Payments.CheckoutPaymentInfo"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseAccountCreditResponse": {
        "type": "object",
        "properties": {
          "AmountPaid": {
            "format": "double",
            "description": "The amount paid for the gift card by the purchaser.",
            "type": "number"
          },
          "ClientId": {
            "description": "The client ID of the purchaser.",
            "type": "string"
          },
          "SaleId": {
            "format": "int64",
            "description": "The sale ID of the gift card.",
            "type": "integer"
          },
          "EmailReceipt": {
            "description": "Whether or not an email receipt was sent to the purchaser. If true, a receipt was sent.",
            "type": "boolean"
          },
          "PaymentProcessingFailures": {
            "description": "Any cart processing failures, for example when SCA challenged, the cart is in PaymentAuthenticationRequired state and at least one of the failures listed will provide an authentication Url.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PaymentProcessingFailure"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardRequest": {
        "required": [
          "LocationId",
          "PurchaserClientId",
          "GiftCardId"
        ],
        "type": "object",
        "properties": {
          "Test": {
            "description": "When `true`, allows you to test the request without affecting the database.<br />\r\nWhen `false`, the request is carried out and the database is affected.",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the gift card is being sold.",
            "type": "integer"
          },
          "LayoutId": {
            "format": "int32",
            "description": "The ID of the layout used for the gift card’s image.",
            "type": "integer"
          },
          "PurchaserClientId": {
            "description": "The RSSID of the client who is purchasing the gift card.",
            "type": "string"
          },
          "GiftCardId": {
            "format": "int32",
            "description": "The product ID of the gift card being purchased.",
            "type": "integer"
          },
          "SendEmailReceipt": {
            "description": "When `true`, indicates that a purchase receipt email should be sent to the purchasing client, if all settings are correctly configured.<br />\r\nWhen `false`, no email is sent to the purchaser.",
            "type": "boolean"
          },
          "RecipientEmail": {
            "description": "The email address to send the gift card image to. This parameter is required if the `LayoutId` is not 0.<br />\r\nMaximum length: **100**",
            "type": "string"
          },
          "RecipientName": {
            "description": "The name of the person who is to receive the gift card. This parameter is required if the `LayoutId` is not 0.<br />\r\nMaximum length: **20**",
            "type": "string"
          },
          "Title": {
            "description": "The text to use as the title of the gift card, for example: Happy Birthday, Maria! This parameter is required if the `LayoutId` is not 0.<br />\r\nMaximum length: **20**",
            "type": "string"
          },
          "GiftMessage": {
            "description": "A personal message to include in the gift card.<br />\r\nMaximum length: **300**",
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date-time",
            "description": "The date that the gift card’s image is to be delivered to the recipient. This parameter cannot be set to a date in the past. This parameter is required if the `LayoutId` is not 0.\r\nDefault: **today**\r\nMinimum: **today**",
            "type": "string"
          },
          "PaymentInfo": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.CheckoutRequest.Payments.CheckoutPaymentInfo"
          },
          "SalesRepId": {
            "format": "int64",
            "description": "The ID of the staff member who is to be marked as the sales rep for this gift card purchase.",
            "type": "integer"
          },
          "ConsumerPresent": {
            "description": " When `true`, indicates that the consumer is available to address any SCA challenge issued by the bank.  EU Only.<br /> \r\nDefault: **false**",
            "type": "boolean"
          },
          "PaymentAuthenticationCallbackUrl": {
            "description": "This is the Url the consumer will be redirected back to after completion of the Banks SCA challenge.",
            "type": "string"
          },
          "BarcodeId": {
            "description": "Sets the barcode ID of the giftcard. When not provided, a barcode ID is automatically generated.<br />\r\nIf a giftcard with the given barcode ID already exists and the site supports reloadable giftcards, the existing giftcard is reloaded<br />\r\nMaximum length: **100**",
            "pattern": "^[^<>'\"]{1,100}$",
            "type": "string"
          },
          "SenderName": {
            "description": "Overrides the name that would otherwise be populated by specifying PurchaserClientId.<br />\r\nMaximum length: **20**",
            "pattern": "^[^<>'\"]{1,20}$",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.PurchaseGiftCardResponse": {
        "type": "object",
        "properties": {
          "BarcodeId": {
            "description": "The barcode ID assigned to the purchased gift card.",
            "type": "string"
          },
          "Value": {
            "format": "double",
            "description": "The monetary value of the gift card.",
            "type": "number"
          },
          "AmountPaid": {
            "format": "double",
            "description": "The amount paid for the gift card by the purchaser.",
            "type": "number"
          },
          "FromName": {
            "description": "The name of the purchaser.",
            "type": "string"
          },
          "LayoutId": {
            "format": "int32",
            "description": "The ID of the layout used for this gift card.",
            "type": "integer"
          },
          "EmailReceipt": {
            "description": "Whether or not an email receipt was sent to the purchaser. If true, a receipt was sent.",
            "type": "boolean"
          },
          "PurchaserClientId": {
            "description": "The client ID of the purchaser.",
            "type": "string"
          },
          "PurchaserEmail": {
            "description": "The purchaser’s email address.",
            "type": "string"
          },
          "RecipientEmail": {
            "description": "The recipient’s email address.",
            "type": "string"
          },
          "SaleId": {
            "format": "int64",
            "description": "The sale ID of the gift card.",
            "type": "integer"
          },
          "PaymentProcessingFailures": {
            "description": "Any cart processing failures, for example when SCA challenged, the cart is in PaymentAuthenticationRequired state and at least one of the failures listed will provide an authentication Url.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SaleController.PaymentProcessingFailure"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesRequest": {
        "type": "object",
        "properties": {
          "PackageIds": {
            "description": "A list of the packages IDs to filter by.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SellOnline": {
            "description": "When `true`, only returns products that can be sold online.<br />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "LocationId": {
            "format": "int32",
            "description": "The location ID to use to determine the tax for the products that this request returns.<br />\r\nDefault: **online store**",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetPackagesResponse": {
        "type": "object",
        "properties": {
          "Packages": {
            "description": "Contains information about the resulting packages.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Package"
            }
          },
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Package": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The ID of the package.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the package.",
            "type": "string"
          },
          "DiscountPercentage": {
            "format": "double",
            "description": "The discount percentage applied to the package.",
            "type": "number"
          },
          "SellOnline": {
            "description": "When `true`, only products that can be sold online are returned.<br />\r\nWhen `false`, all products are returned.",
            "type": "boolean"
          },
          "Services": {
            "description": "Information about the services in the packages.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Service"
            }
          },
          "Products": {
            "description": "Information about the products in the packages.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Product"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetGiftCardBalanceResponse": {
        "type": "object",
        "properties": {
          "BarcodeId": {
            "description": "The gift card's barcode ID.",
            "type": "string"
          },
          "RemainingBalance": {
            "format": "double",
            "description": "The gift card's remaining balance.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsRequest": {
        "description": "Transactions Request",
        "type": "object",
        "properties": {
          "SaleId": {
            "format": "int64",
            "description": "Filters results to the requested sale ID.",
            "type": "integer"
          },
          "TransactionId": {
            "format": "int32",
            "description": "Filters results to the requested transaction ID.",
            "type": "integer"
          },
          "ClientId": {
            "format": "int64",
            "description": "Filters results to the requested client ID.",
            "type": "integer"
          },
          "LocationId": {
            "format": "int32",
            "description": "Filters results to the requested location ID.",
            "type": "integer"
          },
          "Status": {
            "description": "Filters results to the requested status.",
            "type": "string"
          },
          "TransactionStartDateTime": {
            "format": "date-time",
            "description": "Filters results to transactions that happened after this date and time.",
            "type": "string"
          },
          "TransactionEndDateTime": {
            "format": "date-time",
            "description": "Filters results to transactions that happened before this date and time.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.GetTransactionsResponse": {
        "description": "Transactions Response Properties",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Transactions": {
            "description": "Contains the transaction objects, each of which describes the transaction details for a purchase event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Transaction"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Transaction": {
        "type": "object",
        "properties": {
          "TransactionId": {
            "format": "int32",
            "description": "The transaction ID.",
            "type": "integer"
          },
          "SaleId": {
            "format": "int64",
            "description": "The sale ID.",
            "type": "integer"
          },
          "ClientId": {
            "format": "int64",
            "description": "The ID of the client who made the purchase.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "The amount charged on the card",
            "type": "number"
          },
          "Settled": {
            "description": "Whether it is settled or not",
            "type": "boolean"
          },
          "Status": {
            "description": "Status of the transaction",
            "type": "string"
          },
          "TransactionTime": {
            "format": "date-time",
            "description": "Time of card swiped",
            "type": "string"
          },
          "AuthTime": {
            "format": "date-time",
            "description": "Time of card authorized",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "The ID of the location where the sale takes place.",
            "type": "integer"
          },
          "MerchantId": {
            "description": "Merchant ID of the studio",
            "type": "string"
          },
          "TerminalId": {
            "description": "Terminal ID used for payment. Not applicable for CNP/Bank",
            "type": "string"
          },
          "CardExpirationMonth": {
            "description": "Expiry month of the card",
            "type": "string"
          },
          "CardExpirationYear": {
            "description": "Expiry year of the card",
            "type": "string"
          },
          "CCLastFour": {
            "description": "Last 4 digits of CC",
            "type": "string"
          },
          "CardType": {
            "description": "Type of the card",
            "type": "string"
          },
          "CCSwiped": {
            "description": "Whether card is swiped or not",
            "type": "boolean"
          },
          "ACHLastFour": {
            "description": "Customer’s ACH last 4 digits",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceRequest": {
        "description": "Update Product Price Request Model",
        "type": "object",
        "properties": {
          "BarcodeId": {
            "description": "An BarcodeID filter for product.",
            "type": "string"
          },
          "Price": {
            "format": "double",
            "description": "The price of the product.",
            "type": "number"
          },
          "OnlinePrice": {
            "format": "double",
            "description": "The online price of the product.",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateProductPriceResponse": {
        "description": "Update Product Price Response Model",
        "type": "object",
        "properties": {
          "Product": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Product"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateRequest": {
        "description": "Update Sales Date Request Model",
        "type": "object",
        "properties": {
          "SaleID": {
            "format": "int64",
            "type": "integer"
          },
          "SaleDate": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.UpdateSaleDateResponse": {
        "type": "object",
        "properties": {
          "Sale": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Sale"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryRequest": {
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string"
          },
          "MerchantAccountId": {
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SaleController.InitializeCreditCardEntryResponse": {
        "type": "object",
        "properties": {
          "CallbackUrl": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesRequest": {
        "type": "object",
        "properties": {
          "SiteIds": {
            "description": "List of the requested site IDs. When omitted, returns all sites that the source has access to.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSitesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Sites": {
            "description": "Contains information about the sites.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Site"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Site": {
        "type": "object",
        "properties": {
          "AcceptsAmericanExpress": {
            "description": "When `true`, indicates that this site accepts American Express cards.<br />\r\nWhen `false`, indicates that this site does not accept American Express credit cards.",
            "type": "boolean"
          },
          "AcceptsDiscover": {
            "description": "When `true`, indicates that this site accepts Discover cards.<br />\r\nWhen `false`, indicates that this site does not accept Discover credit cards.",
            "type": "boolean"
          },
          "AcceptsMasterCard": {
            "description": "When `true`, indicates that this site accepts MasterCard cards.<br />\r\nWhen `false`, indicates that this site does not accept MasterCard credit cards.",
            "type": "boolean"
          },
          "AcceptsVisa": {
            "description": "When `true`, indicates that this site accepts Visa cards.<br />\r\nWhen `false`, indicates that this site does not accept Visa credit cards.",
            "type": "boolean"
          },
          "AllowsDashboardAccess": {
            "description": "When `true`, indicates that this site allows access to its dashboard.<br />\r\nWhen `false`, indicates that this site does not allow access to its dashboard.",
            "type": "boolean"
          },
          "ContactEmail": {
            "description": "The site’s email address.",
            "type": "string"
          },
          "Description": {
            "description": "A description of the site.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The site ID.",
            "type": "integer"
          },
          "LogoUrl": {
            "description": "The URL to the site’s logo.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the site.",
            "type": "string"
          },
          "PageColor1": {
            "description": "A hex code for a color the business owner uses in marketing. This color can be used to set a theme for an integration so that it matches the configured color-scheme for the business.",
            "type": "string"
          },
          "PageColor2": {
            "description": "The hex code for a second color, to be used in the same manner as `pageColor1`.",
            "type": "string"
          },
          "PageColor3": {
            "description": "The hex code for a third color, to be used in the same manner as `pageColor1`.",
            "type": "string"
          },
          "PageColor4": {
            "description": "The hex code for a fourth color, to be used in the same manner as `pageColor1`.",
            "type": "string"
          },
          "PricingLevel": {
            "description": "The MINDBODY pricing level for the business. Possible values are:\r\nAccelerate - The business is on MINDBODY’s Accelerate pricing tier.\r\nGrow - The business is on MINDBODY’s Essential pricing tier.\r\nLegacy - The business is on an older MINDBODY pricing tier that is no longer offered.\r\nListing - The business is on an older MINDBODY pricing tier that is no longer offered.\r\nPro - The business is on an older MINDBODY pricing tier that is no longer offered.\r\nSolo - The business is on an older MINDBODY pricing tier that is no longer offered.\r\nUltimate - The business is on MINDBODY’s Ultimate pricing tier.",
            "type": "string"
          },
          "SmsPackageEnabled": {
            "description": "When `true`, indicates that the business uses SMS text messages to communicate with its clients.<br />\r\nWhen `false`, indicates that the business does not use SMS text messages to communicate with its clients.",
            "type": "boolean"
          },
          "TaxInclusivePrices": {
            "description": "When `true`, indicates that the total includes tax.<br />\r\nWhen `false`, indicates that the total does not include tax.",
            "type": "boolean"
          },
          "CurrencyIsoCode": {
            "description": "The currency ISO code for the site.",
            "type": "string"
          },
          "CountryCode": {
            "description": "The country code for the site.",
            "type": "string"
          },
          "TimeZone": {
            "description": "The time zone the site is located in.",
            "type": "string"
          },
          "AcceptsDirectDebit": {
            "description": "When `true`, indicates that direct debit can be used by clients at this site.<br />\r\nWhen `false`, indicates that direct debit can not by used by clients at this site.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesRequest": {
        "type": "object",
        "properties": {
          "ProgramIDs": {
            "description": "Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "OnlineOnly": {
            "description": "When `true`, indicates that only the session types that can be booked online should be returned.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetSessionTypesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "SessionTypes": {
            "description": "Contains information about sessions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SessionType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsRequest": {
        "type": "object",
        "properties": {
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetLocationsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Locations": {
            "description": "Contains information about the locations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Location"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsRequest": {
        "type": "object",
        "properties": {
          "ScheduleType": {
            "description": "A schedule type used to filter the returned results.",
            "enum": [
              "All",
              "Class",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "OnlineOnly": {
            "description": "If `true`, filters results to show only those programs that are shown online.<br />\r\nIf `false`, all programs are returned.<br />\r\nDefault: **false**",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProgramsResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Programs": {
            "description": "Contains information about the programs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Program"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesRequest": {
        "type": "object",
        "properties": {
          "SessionTypeIds": {
            "description": "List of session type IDs.<br />\r\nDefault: **all**",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationId": {
            "format": "int32",
            "description": "The location of the resource. This parameter is ignored if `EndDateTime` or `LocationID` is not set.<br />\r\nDefault: **all**",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "The time the resource starts. This parameter is ignored if `EndDateTime` or `LocationID` is not set.",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "description": "The time the resource ends. This parameter is ignored if `EndDateTime` or `LocationID` is not set.",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetResourcesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Resources": {
            "description": "Contains information about resources as the business.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Resource"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetActivationCodeResponse": {
        "type": "object",
        "properties": {
          "ActivationCode": {
            "description": "An activation code used to provide access to a site’s business data through MINDBODY.",
            "type": "string"
          },
          "ActivationLink": {
            "description": "A link to the Manage Credentials screen.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMembershipsRequest": {
        "type": "object",
        "properties": {
          "MembershipIds": {
            "description": "Filters results to memberships that belong to one of the given membership IDs. If omitted, all memberships are returned.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ClientController.GetMembershipsResponse": {
        "type": "object",
        "properties": {
          "Memberships": {
            "description": "Details about the memberships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Membership"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Membership": {
        "type": "object",
        "properties": {
          "MembershipId": {
            "format": "int32",
            "description": "The membership id.",
            "type": "integer"
          },
          "MembershipName": {
            "description": "The membership name.",
            "type": "string"
          },
          "Priority": {
            "format": "int32",
            "description": "The priority/sort order.",
            "type": "integer"
          },
          "MemberRetailDiscount": {
            "format": "double",
            "description": "The membership discount for retail as a percentage.",
            "type": "number"
          },
          "MemberServiceDiscount": {
            "format": "double",
            "description": "The membership discount for services as a percentage.",
            "type": "number"
          },
          "AllowClientsToScheduleUnpaid": {
            "description": "Allow clients in this membership to schedule unpaid.",
            "type": "boolean"
          },
          "OnlineBookingRestrictedToMembersOnly": {
            "description": "List of programs that are restricted to clients in this membership only.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProgramMembership"
            }
          },
          "DayOfMonthSchedulingOpensForNextMonth": {
            "format": "int32",
            "description": "Day of month scheduling opens for next month.  Unrestricted is a null value.",
            "type": "integer"
          },
          "RestrictSelfSignInToMembersOnly": {
            "description": "Restrict self sign in to members only.",
            "type": "boolean"
          },
          "AllowMembersToBookAppointmentsWithoutPaying": {
            "description": "Allow members to book appointments without paying.",
            "type": "boolean"
          },
          "AllowMembersToPurchaseNonMembersServices": {
            "description": "Allow members to purchase non-members services.",
            "type": "boolean"
          },
          "AllowMembersToPurchaseNonMembersProducts": {
            "description": "Allow members to purchase non-members products.",
            "type": "boolean"
          },
          "IsActive": {
            "description": "Indicates if the membership is active.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ProgramMembership": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The service category’s ID.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this service category.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetGendersResponse": {
        "type": "object",
        "properties": {
          "GenderOptions": {
            "description": "A list of the gender options and their properties at the site",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.GenderOption"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.GenderOption": {
        "description": "A gender option available at a site",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The id of the gender option",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the gender option",
            "type": "string"
          },
          "IsActive": {
            "description": "Whether the gender option is active and can be assigned to a consumer profile",
            "type": "boolean"
          },
          "IsDefault": {
            "description": "Whether the gender option is the default value applied to a consumer profile",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeRequest": {
        "required": [
          "Code",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "description": "Promotion Code.",
            "type": "string"
          },
          "Name": {
            "description": "Promotion Name.",
            "type": "string"
          },
          "Active": {
            "description": "Active status",
            "type": "boolean"
          },
          "Discount": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Discount"
          },
          "ActivationDate": {
            "format": "date-time",
            "description": "Date activated",
            "type": "string"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "Date expired",
            "type": "string"
          },
          "MaxUses": {
            "format": "int32",
            "description": "How many times it can be used",
            "type": "integer"
          },
          "DaysAfterCloseDate": {
            "format": "int32",
            "description": "Days after close date",
            "type": "integer"
          },
          "AllowOnline": {
            "description": "Whether it can be used online",
            "type": "boolean"
          },
          "DaysValid": {
            "description": "What days the promo code can be used",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ApplicableItems": {
            "description": "Items that the promo code will have the discount for.\r\nIf Null, promo code applies to all items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ApplicableItem"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.Discount": {
        "description": "Discount for a promo code",
        "type": "object",
        "properties": {
          "Type": {
            "description": "Type of discount percentage/amount",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of discount",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.ApplicableItem": {
        "description": "Item that will be applied to a promo code",
        "type": "object",
        "properties": {
          "Type": {
            "description": "Type of a promo code",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "ID of the item",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the item",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.AddPromoCodeResponse": {
        "type": "object",
        "properties": {
          "PromoCode": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PromoCode"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.PromoCode": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the promo code",
            "type": "string"
          },
          "Code": {
            "description": "Code to be used at purchase for discount",
            "type": "string"
          },
          "Active": {
            "description": "Active status",
            "type": "boolean"
          },
          "Discount": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Discount"
          },
          "ActivationDate": {
            "format": "date-time",
            "description": "Date activated",
            "type": "string"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "Date expired",
            "type": "string"
          },
          "MaxUses": {
            "format": "int32",
            "description": "How many times it can be used",
            "type": "integer"
          },
          "DaysAfterCloseDate": {
            "format": "int32",
            "description": "Days after close date",
            "type": "integer"
          },
          "AllowOnline": {
            "description": "Whether it can be used online",
            "type": "boolean"
          },
          "DaysValid": {
            "description": "What days the promo code can be used",
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            }
          },
          "ApplicableItems": {
            "description": "Items that the promo code will have the discount for",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ApplicableItem"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesRequest": {
        "type": "object",
        "properties": {
          "ActiveOnly": {
            "description": "Filter only active, defaults to true",
            "type": "boolean"
          },
          "OnlineOnly": {
            "description": "Filter only the ones that can be sold online",
            "type": "boolean"
          },
          "StartDate": {
            "format": "date-time",
            "description": "Filter by activation start date",
            "type": "string"
          },
          "EndDate": {
            "format": "date-time",
            "description": "Filter by activation end date",
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPromoCodesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "PromoCodes": {
            "description": "Contains information about Promocodes at a site",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PromoCode"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesRequest": {
        "description": "Get Categories Request Model",
        "type": "object",
        "properties": {
          "CategoryIds": {
            "description": "The requested category IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SubCategoryIds": {
            "description": "The requested sub category IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Service": {
            "description": "The requested Service type. true indicates for Revenue Categories and false indicates for Product Revenue Categories.",
            "type": "boolean"
          },
          "Active": {
            "description": "The requested Active type categories. true indicates for Active Categories and false indicates for Deactivated Categories.",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetCategoriesResponse": {
        "description": "Get Categories Response Model",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Categories": {
            "description": "The requested categories.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.Category"
            }
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.Category": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "CategoryName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Service": {
            "type": "boolean"
          },
          "Active": {
            "type": "boolean"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "IsSecondary": {
            "type": "boolean"
          },
          "CreatedDateTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "ModifiedDateTimeUTC": {
            "format": "date-time",
            "type": "string"
          },
          "SubCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.SubCategory"
            }
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.SubCategory": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "SubCategoryName": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesRequest": {
        "description": "Get Payment Types Request Model",
        "type": "object",
        "properties": {
          "Active": {
            "description": "The requested Active payment types. true indicates for Active payment types and false indicates for Deactivated payment types.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetPaymentTypesResponse": {
        "description": "Get Payment Types Response Model",
        "type": "object",
        "properties": {
          "PaymentTypes": {
            "description": "The requested payment types.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.PaymentType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.PaymentType": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "PaymentTypeName": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Fee": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsRequest": {
        "description": "Get Relationships Request Model",
        "type": "object",
        "properties": {
          "Active": {
            "description": "The requested Active type Relationships. true indicates for Active Relationships and false indicates for Deactivated Relationships.",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetRelationshipsResponse": {
        "description": "Get Relationships Response Model",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "Relationships": {
            "description": "A list of relationships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Relationship"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersRequest": {
        "description": "Get Mobile Providers Request Object",
        "type": "object",
        "properties": {
          "Active": {
            "description": "When true, the response only contains mobile providers which are activated. When false, only deactivated mobile providers are returned. Default: All Mobile Providers",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetMobileProvidersResponse": {
        "description": "Get Mobile Providers Response Object",
        "type": "object",
        "properties": {
          "MobileProviders": {
            "description": "A list of mobile providers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Common.Models.MobileProvider"
            }
          }
        }
      },
      "Mindbody.PublicApi.Common.Models.MobileProvider": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Active": {
            "type": "boolean"
          },
          "ProviderName": {
            "type": "string"
          },
          "ProviderAddress": {
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesRequest": {
        "description": "Get Prospect Stages Request Model",
        "type": "object",
        "properties": {
          "Active": {
            "description": "The requested Active type Prospect Stages. true indicates for Active Prospect Stages and false indicates for Deactivated Prospect Stages.",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SiteController.GetProspectStagesResponse": {
        "description": "Get Prospect Stages Response Model",
        "type": "object",
        "properties": {
          "ProspectStages": {
            "description": "List of Prospect Stages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.ProspectStage"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffRequest": {
        "type": "object",
        "properties": {
          "StaffIds": {
            "description": "A list of the requested staff IDs.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "Filters": {
            "description": "Filters to apply to the search. Possible values are:\r\n* StaffViewable\r\n* AppointmentInstructor\r\n* ClassInstructor\r\n* Male\r\n* Female",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "Return only staff members that are available for the specified session type. You must supply a valid `StartDateTime` and `LocationID` to use this parameter.",
            "type": "integer"
          },
          "StartDateTime": {
            "format": "date-time",
            "description": "Return only staff members that are available at the specified date and time. You must supply a valid `SessionTypeID` and `LocationID` to use this parameter.",
            "type": "string"
          },
          "LocationId": {
            "format": "int32",
            "description": "Return only staff members that are available at the specified location. You must supply a valid `SessionTypeID` and `StartDateTime` to use this parameter.",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "StaffMembers": {
            "description": "A list of staff members.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsRequest": {
        "required": [
          "StaffId"
        ],
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member whose permissions you want to return.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffPermissionsResponse": {
        "type": "object",
        "properties": {
          "UserGroup": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffPermissionGroup"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffPermissionGroup": {
        "type": "object",
        "properties": {
          "PermissionGroupName": {
            "description": "The name of the permission group.",
            "type": "string"
          },
          "IpRestricted": {
            "description": "When `true`, the staff member’s permissions are restricted to specific IP addresses.<br />\r\nWhen `false`, the staff member’s permissions are not restricted to specific IP addresses.",
            "type": "boolean"
          },
          "AllowedPermissions": {
            "description": "A list of the permissions allowed to the staff member. See [Permission Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#epermission-values) for descriptions of the possible permissions.",
            "type": "array",
            "items": {
              "enum": [
                "ManageClassAndEventDescriptions",
                "ManageClassSchedules",
                "ScheduleFreeClassesAndEvents",
                "ScheduleResourcesForClassesAndEvents",
                "SubstituteClassAndEventTeachers",
                "BulkEditClassSchedules",
                "AddStaffMembers",
                "ManagePersonalInfoForStaff",
                "ManageStaffSettings",
                "ManageStaffLogins",
                "ManageStaffSchedules",
                "ManageStaffPayRates",
                "AccessBusinessInformationScreen",
                "AccessGeneralSetupOptionsScreen",
                "AccessNewsEventsScreen",
                "ManageHolidays",
                "ClassAndEventOptionsScreen",
                "AppointmentOptionsScreen",
                "AccessMediaManagementScreen",
                "AccessMembershipSetupScreen",
                "ManagePaymentMethods",
                "ManageRoomNumbers",
                "AccessResourceManagementScreen",
                "AccessResourcesSchedulingTab",
                "AccessLinksScreen",
                "BulkCancelClientReservations",
                "FindDuplicateClients",
                "MergeDuplicateClients",
                "ManageAutoEmails",
                "ManageRevenueCategoriesForServices",
                "ManageRevenueCategoriesForProducts",
                "AccessActiveSessionTimesScreen",
                "AccessClassSessionTypeScreens",
                "AccessServiceCategoriesScreen",
                "ManageSubscriberPricing",
                "AddIntroOffersOnAcquisitionDashboard",
                "ManageMindbodyNetworkSettings",
                "ManageProducts",
                "ViewProductCost",
                "ManageMembershipSettingsForPricing",
                "ManagePromotionCodes",
                "EditSales",
                "PrintProductBarcodes",
                "MakeSales",
                "AddProductsOnRetailScreen",
                "EditSaleDateOnRetailScreen",
                "EditSalePriceCountOnRetailScreen",
                "EditActivationDateOnRetailScreen",
                "ApplyCustomDiscountsOnRetailScreen",
                "PayForAnotherClientOnRetailScreen",
                "VoidEditPastSales",
                "RefundSales",
                "RefundSalesToCreditCards",
                "LocationSwitching",
                "PullReportsForAllLocations",
                "LogInventory",
                "AdjustInventory",
                "TransferInventory",
                "ManagePurchaseOrders",
                "ManageLocationLocalization",
                "ManagePermissionGroups",
                "ManageConstantContactSettings",
                "AccessServicesPricingScreen",
                "ManageSemesters",
                "ManageRetentionMarketing",
                "ManageSubscriberSetupChecklist",
                "ViewClassAndEventReservations",
                "BookClassesAndEvents",
                "BookClassesAndEventsInThePast",
                "BookClassesAndEventsWithoutPayment",
                "CancelClassesAndEvents",
                "ManageClassNotes",
                "ViewAppointmentSchedule",
                "ViewPersonalAppointmentSchedule",
                "EditPersonalAppointmentSchedule",
                "ViewAppointmentDetails",
                "ManageAppointmentRequests",
                "BookAppointmentsForOtherStaffMembers",
                "BookAppointmentsInThePast",
                "ChangeAppointmentDetails",
                "UseAnyAppointmentAsAnAddon",
                "ChangeAppointmentDuration",
                "CancelAppointments",
                "ApplyPaymentToAppointments",
                "CheckOutAppointments",
                "OverrideAssignedPricing",
                "ManageAppointmentColors",
                "ViewAllLocationOnClientLookupScreen",
                "AddClient",
                "ViewClientProfileScreen",
                "EditClientProfileScreen",
                "AssignClientIndexes",
                "ManageClientSuspensions",
                "ViewClientPastVisits",
                "ViewClientAccountAndPurchaseHistory",
                "EditClientServiceDurationAndAssignedVisits",
                "EditClientServiceSessionCount",
                "IgnoreServiceCategoriesWhenReassigningPayment",
                "ViewClientAutoPaySchedules",
                "ManageClientAutoPaySchedules",
                "ViewClientDocuments",
                "AddClientDocuments",
                "DeleteClientDocuments",
                "ViewClientFutureVisits",
                "ViewClientBillingInformation",
                "EditClientBillingInformation",
                "ManageClientLogins",
                "UnassignClientGiftCards",
                "IgnoreCancellationPolicy",
                "LaunchSignInScreen",
                "DeleteAndTerminateClientContracts",
                "ReleaseContractDeposits",
                "AutoRenewAndSuspendContracts",
                "ManageClassTests",
                "ScheduleClassTests",
                "ManageClientRequiredFields",
                "ManageClientAlerts",
                "ManageClientTypesAndClientIndexes",
                "ManageClientReferralTypes",
                "ManageClientRelationshipTypes",
                "ManageClientGenders",
                "ClientAcquisitionAndAnalyticsDashboards",
                "ViewRetentionMarketingDashboard",
                "ExportReports",
                "ManageTaggedClients",
                "StaffPhoneBookReport",
                "ScheduleAtAGlanceReportForAllStaff",
                "PersonalScheduleAtAGlanceReport",
                "AttendanceWithRevenueReport",
                "CancellationsReport",
                "PersonalCancellationsReport",
                "AccountBalancesReport",
                "BulkAutoPaySchedulingFromAccountBalancesReport",
                "EventInvoicesReport",
                "CashDrawerReportCurrentDate",
                "CashDrawerReportAnyDate",
                "DailyCloseoutReport",
                "SalesReports",
                "SalesBySupplierAndProductReports",
                "PromoteFeesReport",
                "GiftCardsReport",
                "InventoryReports",
                "MarketingReports",
                "AnalysisReports",
                "ClientIndexesReports",
                "PayrollReportsForAllStaff",
                "PersonalPayrollReports",
                "StaffPerformanceReports",
                "OnlineMetricsReport",
                "RetentionManagementReport",
                "EntryLogsReport",
                "StaffActivityLogReport",
                "MembershipReport",
                "ManageOnlineOrdersReport",
                "TasksReport",
                "ClockSelfInAndOut",
                "ClockOthersInAndOut",
                "AccessTimeclockReport",
                "ManageTimeClocks",
                "ManageTimeClockTasks",
                "ManageContactLogTypes",
                "ViewContactLogs",
                "AddContactLogs",
                "EditOtherStaffMemberContactLogs",
                "DeleteContactLogs",
                "ContactLogAnalysisReport",
                "SalesForecastReport",
                "ViewAllClients",
                "ManageClientSalesReps",
                "CreateRetailTickets",
                "EditRetailTickets",
                "ManageTaskAssignments",
                "MerchantAccountReports",
                "VoidCreditCardTransactions",
                "SettleCreditCardTransactions",
                "UseStoredCreditCards",
                "ManageAutoPays",
                "ViewPersonalReviews",
                "ViewOthersReviews",
                "ViewClientNamesOnReviewReport",
                "EmailClientsFromReviewReport",
                "FlagReviewForRemoval",
                "RespondPubliclyToReviews"
              ],
              "type": "string"
            }
          },
          "DeniedPermissions": {
            "description": "A list of the permissions that the staff member is not allowed to exercise. See [Permission Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#epermission-values) for descriptions of the possible permissions.",
            "type": "array",
            "items": {
              "enum": [
                "ManageClassAndEventDescriptions",
                "ManageClassSchedules",
                "ScheduleFreeClassesAndEvents",
                "ScheduleResourcesForClassesAndEvents",
                "SubstituteClassAndEventTeachers",
                "BulkEditClassSchedules",
                "AddStaffMembers",
                "ManagePersonalInfoForStaff",
                "ManageStaffSettings",
                "ManageStaffLogins",
                "ManageStaffSchedules",
                "ManageStaffPayRates",
                "AccessBusinessInformationScreen",
                "AccessGeneralSetupOptionsScreen",
                "AccessNewsEventsScreen",
                "ManageHolidays",
                "ClassAndEventOptionsScreen",
                "AppointmentOptionsScreen",
                "AccessMediaManagementScreen",
                "AccessMembershipSetupScreen",
                "ManagePaymentMethods",
                "ManageRoomNumbers",
                "AccessResourceManagementScreen",
                "AccessResourcesSchedulingTab",
                "AccessLinksScreen",
                "BulkCancelClientReservations",
                "FindDuplicateClients",
                "MergeDuplicateClients",
                "ManageAutoEmails",
                "ManageRevenueCategoriesForServices",
                "ManageRevenueCategoriesForProducts",
                "AccessActiveSessionTimesScreen",
                "AccessClassSessionTypeScreens",
                "AccessServiceCategoriesScreen",
                "ManageSubscriberPricing",
                "AddIntroOffersOnAcquisitionDashboard",
                "ManageMindbodyNetworkSettings",
                "ManageProducts",
                "ViewProductCost",
                "ManageMembershipSettingsForPricing",
                "ManagePromotionCodes",
                "EditSales",
                "PrintProductBarcodes",
                "MakeSales",
                "AddProductsOnRetailScreen",
                "EditSaleDateOnRetailScreen",
                "EditSalePriceCountOnRetailScreen",
                "EditActivationDateOnRetailScreen",
                "ApplyCustomDiscountsOnRetailScreen",
                "PayForAnotherClientOnRetailScreen",
                "VoidEditPastSales",
                "RefundSales",
                "RefundSalesToCreditCards",
                "LocationSwitching",
                "PullReportsForAllLocations",
                "LogInventory",
                "AdjustInventory",
                "TransferInventory",
                "ManagePurchaseOrders",
                "ManageLocationLocalization",
                "ManagePermissionGroups",
                "ManageConstantContactSettings",
                "AccessServicesPricingScreen",
                "ManageSemesters",
                "ManageRetentionMarketing",
                "ManageSubscriberSetupChecklist",
                "ViewClassAndEventReservations",
                "BookClassesAndEvents",
                "BookClassesAndEventsInThePast",
                "BookClassesAndEventsWithoutPayment",
                "CancelClassesAndEvents",
                "ManageClassNotes",
                "ViewAppointmentSchedule",
                "ViewPersonalAppointmentSchedule",
                "EditPersonalAppointmentSchedule",
                "ViewAppointmentDetails",
                "ManageAppointmentRequests",
                "BookAppointmentsForOtherStaffMembers",
                "BookAppointmentsInThePast",
                "ChangeAppointmentDetails",
                "UseAnyAppointmentAsAnAddon",
                "ChangeAppointmentDuration",
                "CancelAppointments",
                "ApplyPaymentToAppointments",
                "CheckOutAppointments",
                "OverrideAssignedPricing",
                "ManageAppointmentColors",
                "ViewAllLocationOnClientLookupScreen",
                "AddClient",
                "ViewClientProfileScreen",
                "EditClientProfileScreen",
                "AssignClientIndexes",
                "ManageClientSuspensions",
                "ViewClientPastVisits",
                "ViewClientAccountAndPurchaseHistory",
                "EditClientServiceDurationAndAssignedVisits",
                "EditClientServiceSessionCount",
                "IgnoreServiceCategoriesWhenReassigningPayment",
                "ViewClientAutoPaySchedules",
                "ManageClientAutoPaySchedules",
                "ViewClientDocuments",
                "AddClientDocuments",
                "DeleteClientDocuments",
                "ViewClientFutureVisits",
                "ViewClientBillingInformation",
                "EditClientBillingInformation",
                "ManageClientLogins",
                "UnassignClientGiftCards",
                "IgnoreCancellationPolicy",
                "LaunchSignInScreen",
                "DeleteAndTerminateClientContracts",
                "ReleaseContractDeposits",
                "AutoRenewAndSuspendContracts",
                "ManageClassTests",
                "ScheduleClassTests",
                "ManageClientRequiredFields",
                "ManageClientAlerts",
                "ManageClientTypesAndClientIndexes",
                "ManageClientReferralTypes",
                "ManageClientRelationshipTypes",
                "ManageClientGenders",
                "ClientAcquisitionAndAnalyticsDashboards",
                "ViewRetentionMarketingDashboard",
                "ExportReports",
                "ManageTaggedClients",
                "StaffPhoneBookReport",
                "ScheduleAtAGlanceReportForAllStaff",
                "PersonalScheduleAtAGlanceReport",
                "AttendanceWithRevenueReport",
                "CancellationsReport",
                "PersonalCancellationsReport",
                "AccountBalancesReport",
                "BulkAutoPaySchedulingFromAccountBalancesReport",
                "EventInvoicesReport",
                "CashDrawerReportCurrentDate",
                "CashDrawerReportAnyDate",
                "DailyCloseoutReport",
                "SalesReports",
                "SalesBySupplierAndProductReports",
                "PromoteFeesReport",
                "GiftCardsReport",
                "InventoryReports",
                "MarketingReports",
                "AnalysisReports",
                "ClientIndexesReports",
                "PayrollReportsForAllStaff",
                "PersonalPayrollReports",
                "StaffPerformanceReports",
                "OnlineMetricsReport",
                "RetentionManagementReport",
                "EntryLogsReport",
                "StaffActivityLogReport",
                "MembershipReport",
                "ManageOnlineOrdersReport",
                "TasksReport",
                "ClockSelfInAndOut",
                "ClockOthersInAndOut",
                "AccessTimeclockReport",
                "ManageTimeClocks",
                "ManageTimeClockTasks",
                "ManageContactLogTypes",
                "ViewContactLogs",
                "AddContactLogs",
                "EditOtherStaffMemberContactLogs",
                "DeleteContactLogs",
                "ContactLogAnalysisReport",
                "SalesForecastReport",
                "ViewAllClients",
                "ManageClientSalesReps",
                "CreateRetailTickets",
                "EditRetailTickets",
                "ManageTaskAssignments",
                "MerchantAccountReports",
                "VoidCreditCardTransactions",
                "SettleCreditCardTransactions",
                "UseStoredCreditCards",
                "ManageAutoPays",
                "ViewPersonalReviews",
                "ViewOthersReviews",
                "ViewClientNamesOnReviewReport",
                "EmailClientsFromReviewReport",
                "FlagReviewForRemoval",
                "RespondPubliclyToReviews"
              ],
              "type": "string"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLRequest": {
        "description": "This is the request class for the get staff image URL API",
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "A requested staff ID.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffImageURLResponse": {
        "description": "A response object returned from the GetStaffImgURL API.",
        "type": "object",
        "properties": {
          "ImageURL": {
            "description": "A staff member's image URL.",
            "type": "string"
          },
          "MobileImageURL": {
            "description": "A staff member's mobile image URL.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsRequest": {
        "required": [
          "StaffId",
          "PermissionGroupName"
        ],
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The ID of the staff member whose permission group you want to update.",
            "type": "integer"
          },
          "PermissionGroupName": {
            "description": "The name of the permission group. Case insensitive",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffPermissionsResponse": {
        "type": "object",
        "properties": {
          "UserGroup": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffPermissionGroup"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffRequest": {
        "required": [
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "The staff member’s first name.",
            "type": "string"
          },
          "LastName": {
            "description": "The staff member’s last name.",
            "type": "string"
          },
          "Email": {
            "description": "The staff member’s email address.",
            "type": "string"
          },
          "IsMale": {
            "description": "When `true`, indicates that the staff member is male.\r\nWhen `false`, indicates that the staff member is female.",
            "type": "boolean"
          },
          "HomePhone": {
            "description": "The staff member’s home phone number.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The staff member’s work phone number.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The staff member’s mobile phone number.",
            "type": "string"
          },
          "Bio": {
            "description": "The staff member’s biography. This string contains HTML.",
            "type": "string"
          },
          "Address": {
            "description": "The address of the staff member.",
            "type": "string"
          },
          "Address2": {
            "description": "The address line2 of the staff member.",
            "type": "string"
          },
          "City": {
            "description": "The staff member’s city.",
            "type": "string"
          },
          "State": {
            "description": "The staff member’s state.",
            "type": "string"
          },
          "Country": {
            "description": "The staff member’s country.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The staff member’s postal code.",
            "type": "string"
          },
          "ClassAssistant": {
            "description": "Is the staff an assistant",
            "type": "boolean"
          },
          "ClassAssistant2": {
            "description": "Is the staff an assistant2",
            "type": "boolean"
          },
          "IndependentContractor": {
            "description": "When `true`, indicates that the staff member is an independent contractor.\r\nWhen `false`, indicates that the staff member is not an independent contractor.",
            "type": "boolean"
          },
          "AppointmentInstructor": {
            "description": "When `true`, indicates that the staff member offers appointments.<br />\r\nWhen `false`, indicates that the staff member does not offer appointments.",
            "type": "boolean"
          },
          "AlwaysAllowDoubleBooking": {
            "description": "When `true`, indicates that the staff member can be scheduled for overlapping services.<br />\r\nWhen `false`, indicates that the staff can only be scheduled for one service at a time in any given time-frame.",
            "type": "boolean"
          },
          "ClassTeacher": {
            "description": "When `true`, indicates that the staff member can teach classes.\r\nWhen `false`, indicates that the staff member cannot teach classes.",
            "type": "boolean"
          },
          "EmploymentStart": {
            "format": "date-time",
            "description": "The start date of employment",
            "type": "string"
          },
          "EmploymentEnd": {
            "format": "date-time",
            "description": "The end date of employment",
            "type": "string"
          },
          "SortOrder": {
            "format": "int32",
            "description": "If configured by the business owner, this field determines a staff member’s weight when sorting. Use this field to sort staff members on your interface.",
            "type": "integer"
          },
          "ProviderIDs": {
            "description": "A list of providerIDs for the staff.  In the US it is one per staff and is numeric, otherwise it can be a list and is alpha-numeric\r\nfor more information see https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?language=en_US",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Notes": {
            "description": "Staff Member Private Notes",
            "type": "string"
          },
          "EmpID": {
            "description": "The EmpID assigned to the staff member.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffResponse": {
        "type": "object",
        "properties": {
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "format": "int64",
            "description": "The unique id of the staff",
            "type": "integer"
          },
          "FirstName": {
            "description": "The staff member’s first name.",
            "type": "string"
          },
          "LastName": {
            "description": "The staff member’s last name.",
            "type": "string"
          },
          "Email": {
            "description": "The staff member’s email address.",
            "type": "string"
          },
          "IsMale": {
            "description": "When `true`, indicates that the staff member is male.\r\nWhen `false`, indicates that the staff member is female.",
            "type": "boolean"
          },
          "HomePhone": {
            "description": "The staff member’s home phone number.",
            "type": "string"
          },
          "WorkPhone": {
            "description": "The staff member’s work phone number.",
            "type": "string"
          },
          "MobilePhone": {
            "description": "The staff member’s mobile phone number.",
            "type": "string"
          },
          "Bio": {
            "description": "The staff member’s biography. This string contains HTML.",
            "type": "string"
          },
          "Address": {
            "description": "The address of the staff member.",
            "type": "string"
          },
          "Address2": {
            "description": "The address line2 of the staff member.",
            "type": "string"
          },
          "City": {
            "description": "The staff member’s city.",
            "type": "string"
          },
          "State": {
            "description": "The staff member’s state.",
            "type": "string"
          },
          "Country": {
            "description": "The staff member’s country.",
            "type": "string"
          },
          "PostalCode": {
            "description": "The staff member’s postal code.",
            "type": "string"
          },
          "ClassAssistant": {
            "description": "Is the staff an assistant",
            "type": "boolean"
          },
          "ClassAssistant2": {
            "description": "Is the staff an assistant2",
            "type": "boolean"
          },
          "IndependentContractor": {
            "description": "When `true`, indicates that the staff member is an independent contractor.\r\nWhen `false`, indicates that the staff member is not an independent contractor.",
            "type": "boolean"
          },
          "AppointmentInstructor": {
            "description": "When `true`, indicates that the staff member offers appointments.<br />\r\nWhen `false`, indicates that the staff member does not offer appointments.",
            "type": "boolean"
          },
          "AlwaysAllowDoubleBooking": {
            "description": "When `true`, indicates that the staff member can be scheduled for overlapping services.<br />\r\nWhen `false`, indicates that the staff can only be scheduled for one service at a time in any given time-frame.",
            "type": "boolean"
          },
          "ClassTeacher": {
            "description": "When `true`, indicates that the staff member can teach classes.\r\nWhen `false`, indicates that the staff member cannot teach classes.",
            "type": "boolean"
          },
          "EmploymentStart": {
            "format": "date-time",
            "description": "The start date of employment",
            "type": "string"
          },
          "EmploymentEnd": {
            "format": "date-time",
            "description": "The end date of employment",
            "type": "string"
          },
          "SortOrder": {
            "format": "int32",
            "description": "If configured by the business owner, this field determines a staff member’s weight when sorting. Use this field to sort staff members on your interface.",
            "type": "integer"
          },
          "ProviderIDs": {
            "description": "A list of providerIDs for the staff.  In the US it is one per staff and is numeric, otherwise it can be a list and is alpha-numeric\r\nfor more information see https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?language=en_US",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Active": {
            "description": "Is the staff member active?",
            "type": "boolean"
          },
          "Notes": {
            "description": "Staff Member Private Notes",
            "type": "string"
          },
          "EmpID": {
            "description": "The EmpID assigned to the staff member.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.UpdateStaffResponse": {
        "type": "object",
        "properties": {
          "Staff": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.Staff"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.AddStaffAvailabilityRequest": {
        "description": "Add Staff Availability/Unavailability Schedule",
        "required": [
          "StaffId",
          "IsAvailability",
          "DaysOfWeek",
          "StartTime",
          "EndTime",
          "StartDate",
          "EndDate"
        ],
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The unique id of the staff",
            "type": "integer"
          },
          "IsAvailability": {
            "description": "IsAvailability = true means this is staff available schedule, false means unavailability",
            "type": "boolean"
          },
          "Description": {
            "description": "Description is required if IsAvailability=false",
            "type": "string"
          },
          "ProgramIds": {
            "description": "List of ProgramIds - for session types the staff member performs, required if IsAvailability=true must be an Active ProgramId between 1 and 21",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "LocationId": {
            "format": "int32",
            "description": "The Location for the Availability, will default to 0 when isAvailability=false",
            "type": "integer"
          },
          "DaysOfWeek": {
            "description": "Day of week for the schedule \"Monday\", \"Tuesday\", etc...",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "StartTime": {
            "description": "The starting time in site local time format \"HH:MM:SS\"",
            "pattern": "^(?:(?:([01]?\\d|2[0-3]):)?([0-5]?\\d):)?([0-5]?\\d)$",
            "type": "string"
          },
          "EndTime": {
            "description": "The ending time in site local time format \"HH:MM:SS\"",
            "pattern": "^(?:(?:([01]?\\d|2[0-3]):)?([0-5]?\\d):)?([0-5]?\\d)$",
            "type": "string"
          },
          "StartDate": {
            "description": "The ending time in site local time format \"HH:MM:SS\"",
            "pattern": "^\\d{4}-((0\\d)|(1[012]))-(([012]\\d)|3[01])$",
            "type": "string"
          },
          "EndDate": {
            "description": "The ending time in site local time format \"HH:MM:SS\"",
            "pattern": "^\\d{4}-((0\\d)|(1[012]))-(([012]\\d)|3[01])$",
            "type": "string"
          },
          "Status": {
            "description": "one of \"Public\", \"Masked\", \"Hidden\", default \"Public\") - Schedule privacy. \"Masked\" only valid if IsAavailability=true",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesRequest": {
        "required": [
          "StaffId"
        ],
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "Filters returned session types to only those the staff member performs.  Staff should be active.",
            "type": "integer"
          },
          "ProgramIds": {
            "description": "Filters results to session types that belong in program IDs.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "OnlineOnly": {
            "description": "Only session types that can be booked online.",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetStaffSessionTypesResponse": {
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "StaffSessionTypes": {
            "description": "Contains information about staff member session types.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.StaffSessionType"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffSessionType": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "The staff member Id",
            "type": "integer"
          },
          "Type": {
            "description": "Contains the class description session type.",
            "enum": [
              "All",
              "Class",
              "Enrollment",
              "Appointment",
              "Resource",
              "Media",
              "Arrival"
            ],
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "This session type’s unique Id.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of this session type.",
            "type": "string"
          },
          "NumDeducted": {
            "format": "int32",
            "description": "The number of sessions that this session type deducts from the pricing option used to pay for this type of session.",
            "type": "integer"
          },
          "ProgramId": {
            "format": "int32",
            "description": "This session type’s service category Id.",
            "type": "integer"
          },
          "Category": {
            "description": "This session type’s category.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "This session type’s category Id.",
            "type": "integer"
          },
          "Subcategory": {
            "description": "This session type’s subcategory.",
            "type": "string"
          },
          "SubcategoryId": {
            "format": "int32",
            "description": "This session type’s subcategory Id.",
            "type": "integer"
          },
          "TimeLength": {
            "format": "int32",
            "type": "integer"
          },
          "PrepTime": {
            "format": "int32",
            "description": "Prep time in minutes",
            "type": "integer"
          },
          "FinishTime": {
            "format": "int32",
            "description": "Finish time in minutes",
            "type": "integer"
          },
          "PayRateType": {
            "description": "The pay rate type",
            "type": "string"
          },
          "PayRateAmount": {
            "format": "double",
            "description": "The pay rate amount",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeRequest": {
        "required": [
          "StaffId",
          "SessionTypeId",
          "Active"
        ],
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "Id of the staff memeber",
            "minimum": 1,
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "Id of the session type to assign to the staff",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "Active": {
            "description": "Whether the the staff members association to this session type is active.",
            "type": "boolean"
          },
          "TimeLength": {
            "format": "int32",
            "type": "integer"
          },
          "PrepTime": {
            "format": "int32",
            "description": "Prep time in minutes",
            "type": "integer"
          },
          "FinishTime": {
            "format": "int32",
            "description": "Finish time in minutes",
            "type": "integer"
          },
          "PayRateType": {
            "description": "The pay rate type. Can be one of the following (case insensitive):\r\n   Percent\r\n   Flat\r\n   No Pay",
            "type": "string"
          },
          "PayRateAmount": {
            "format": "double",
            "description": "The pay rate amount. It's units are based on the PayRateType",
            "type": "number"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.AssignStaffSessionTypeResponse": {
        "type": "object",
        "properties": {
          "StaffId": {
            "format": "int64",
            "description": "Staff member assigned to the session type",
            "type": "integer"
          },
          "SessionTypeId": {
            "format": "int32",
            "description": "The session type the staff member is assigned to",
            "type": "integer"
          },
          "PayRateType": {
            "description": "The pay rate type name\r\nCan be: \"Flat\", \"Percent\", or \"No Pay\"",
            "type": "string"
          },
          "PayRateAmount": {
            "format": "double",
            "description": "The pay rate amount. It is interpreted based on the value of PayRateTypeId",
            "type": "number"
          },
          "TimeLength": {
            "format": "int32",
            "description": "The staff specific amount of time that a session of this type typically lasts.",
            "type": "integer"
          },
          "PrepTime": {
            "format": "int32",
            "description": "Prep time in minutes",
            "type": "integer"
          },
          "FinishTime": {
            "format": "int32",
            "description": "Finish time in minutes",
            "type": "integer"
          },
          "Active": {
            "description": "Whether this association is active",
            "type": "boolean"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsRequest": {
        "description": "This is the request class for the get sales reps API",
        "type": "object",
        "properties": {
          "SalesRepNumbers": {
            "description": "This is the list of rep numbers to be fetched",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ActiveOnly": {
            "description": "This is to filter out the active sales rep from the list",
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "description": "Number of results to include, defaults to 100",
            "type": "integer"
          },
          "Offset": {
            "format": "int32",
            "description": "Page offset, defaults to 0.",
            "type": "integer"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.StaffController.GetSalesRepsResponse": {
        "description": "This is the response class for the get sales reps API",
        "type": "object",
        "properties": {
          "PaginationResponse": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.PaginationResponse"
          },
          "SalesReps": {
            "description": "This the list of sales reps and their details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.SalesRepResponse"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.SalesRepResponse": {
        "description": "This is the sales rep DTO",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The unique Id of the sales rep",
            "type": "integer"
          },
          "FirstName": {
            "description": "The firstname of the sales rep",
            "type": "string"
          },
          "LastName": {
            "description": "The lastname of the sales rep",
            "type": "string"
          },
          "SalesRepNumbers": {
            "description": "The sales rep Ids that are assigned to the rep",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueRequest": {
        "description": "POST UserToken/Issue request",
        "type": "object",
        "properties": {
          "Username": {
            "description": "The staff member’s username.",
            "type": "string"
          },
          "Password": {
            "description": "The staff member’s password.",
            "type": "string"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.UserTokenController.IssueResponse": {
        "description": "POST UserToken/Issue successful response",
        "type": "object",
        "properties": {
          "TokenType": {
            "type": "string"
          },
          "AccessToken": {
            "description": "The authentication token value.",
            "type": "string"
          },
          "User": {
            "$ref": "#/components/schemas/Mindbody.PublicApi.Dto.Models.V6.User"
          }
        }
      },
      "Mindbody.PublicApi.Dto.Models.V6.User": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The user’s ID at the business. This is always 0 for Admin and Owner type users.",
            "type": "integer"
          },
          "FirstName": {
            "description": "The user’s first name.",
            "type": "string"
          },
          "LastName": {
            "description": "The user’s last name.",
            "type": "string"
          },
          "Type": {
            "description": "The user’s type. Possible values are:\r\n* Staff\r\n* Owner\r\n* Admin",
            "type": "string"
          }
        }
      }
    }
  }
}