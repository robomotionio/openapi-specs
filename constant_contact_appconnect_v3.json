{
  "openapi": "3.0.1",
  "info": {
    "title": "AppConnect V3",
    "description": "The Constant Contact, Inc. V3 public API, for building integrations with Constant Contact, the leading small-business email marketing platform.",
    "contact": {
      "name": "webservices@constantcontact.com"
    },
    "license": {
      "name": "Private"
    },
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://api.cc.email/v3"
    }
  ],
  "tags": [
    {
      "name": "Account Services",
      "description": "Use the account endpoints and methods to get account information."
    },
    {
      "name": "Access Token Information",
      "description": "Get authentication information about your access token."
    },
    {
      "name": "Bulk Activities",
      "description": "Bulk activities endpoints are used to manage large numbers of contacts, lists, and tags."
    },
    {
      "name": "Contacts",
      "description": "Endpoints and methods to get, create, delete, and update one or more contacts."
    },
    {
      "name": "Contact Lists",
      "description": "Endpoints and methods to get, create, delete, and update one or more contact lists."
    },
    {
      "name": "Contact Tags",
      "description": "Endpoints and methods to get, create, delete, and update one or more contact tags."
    },
    {
      "name": "Contacts Reporting",
      "description": "Contact reporting endpoints are used to gather activity reports for campaigns sent to a contact."
    },
    {
      "name": "Contacts Custom Fields",
      "description": "Endpoints and methods to get, create, delete, and update on one or more custom fields."
    },
    {
      "name": "Email Campaigns",
      "description": "Use email campaign endpoints and methods to get, create, and update email campaigns."
    },
    {
      "name": "Email Campaigns AB Tests",
      "description": "Use Email Campaigns A/B Test endpoints and methods to get, create, delete and update A/B tests."
    },
    {
      "name": "Email Reporting",
      "description": "Use the email reporting endpoints and methods to get reporting data for email campaigns you sent to contacts."
    },
    {
      "name": "Email Scheduling",
      "description": "Use email scheduling endpoints and methods to schedule an email campaign activity, unschedule an email campaign activity, and GET schedule information."
    },
    {
      "name": "Segments",
      "description": "Use segments to target a subset of your contacts that are most likely to engage with a particular campaign."
    },
    {
      "name": "Technology Partners",
      "description": "Use partner endpoints to manage client Constant Contact accounts under your partner account."
    },
    {
      "name": "Technology Partners Webhooks",
      "description": "Use partner webhooks to subscribe to billing event notifications from Constant Contact."
    },
    {
      "name": "My Library",
      "description": "Use the MyLibrary methods to manage images in a Constant Contact account"
    }
  ],
  "paths": {
    "/account/user/privileges": {
      "get": {
        "tags": [
          "Account Services"
        ],
        "summary": "GET User Privileges",
        "description": "Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).",
        "operationId": "getUserPrivileges",
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivilegesResource"
                }
              }
            }
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. Your application is deactivated.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": []
          },
          {
            "oauth2_access_code": []
          },
          {
            "api_key": []
          }
        ]
      }
    },
    "/account/summary": {
      "get": {
        "tags": [
          "Account Services"
        ],
        "summary": "GET a Summary of Account Details",
        "description": "Get account related details for a Constant Contact user account. Use the `extra_fields` query parameter to include the `company_logo` and/or `physical_address` details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).",
        "operationId": "getAccountById",
        "parameters": [
          {
            "name": "extra_fields",
            "in": "query",
            "description": "Use the `extra_fields` query parameter to include the `physical_address` and/or `company_logo` details in the response body. Use a comma separated list to include both (physical_address, company logo).",
            "schema": {
              "type": "string",
              "format": "csv",
              "enum": [
                "physical_address",
                "company_logo"
              ]
            },
            "example": "company_logo"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_read"
            ]
          },
          {
            "oauth2_access_code": [
              "account_read"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:read"
        ]
      },
      "put": {
        "tags": [
          "Account Services"
        ],
        "summary": "PUT (update) Account Details",
        "description": "Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).",
        "operationId": "putCustomerById",
        "requestBody": {
          "description": "In the request body, specify changes to account details by including and modifying all or select `CustomerPut` properties. Changes to read-only fields (`encoded_account_id`) are ignored.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_update"
            ]
          },
          {
            "oauth2_access_code": [
              "account_update"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:update"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/account/summary/physical_address": {
      "get": {
        "tags": [
          "Account Services"
        ],
        "summary": "GET the Physical Address for the Account",
        "description": "Use this method to get the address where the account's organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.",
        "operationId": "getPhysicalAddress",
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPhysicalAddress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_read"
            ]
          },
          {
            "oauth2_access_code": [
              "account_read"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:read"
        ]
      },
      "put": {
        "tags": [
          "Account Services"
        ],
        "summary": "PUT (update) the Physical Address for an Account",
        "description": "Use this method to update the organization's physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to `/account/summary/physical_address`. The country (<code>country_code</code>) where the account organization resides determines whether you use the <code>state_code</code> to specify United States (<code>US</code>) and Canada (<code>CA</code>) addresses, or use the <code>state_name</code> to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. ",
        "operationId": "putPhysicalAddress",
        "requestBody": {
          "description": "Include all `AccountPhysicalAddress` properties required for the specified `country_code` and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPhysicalAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPhysicalAddress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_update"
            ]
          },
          {
            "oauth2_access_code": [
              "account_update"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:update"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/account/emails": {
      "get": {
        "tags": [
          "Account Services"
        ],
        "summary": "GET a Collection of Account Email Addresses",
        "description": "Use this method to return a collection of email addresses for the account associated with your access token. When you <a href=\"https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\" target=\"_blank\">Create an Email Campaign<a/>, you must use an account email address with a `CONFIRMED` status in the email campaign `from_email` and `reply_to_email` headers.\n      \n\nUse the query parameters to filter results. You can filter using `confirm_status`, `role_code`, or `email_address`. For example, searching with `confirm_status=CONFIRMED` returns all confirmed email addresses in the account. This method only supports one query parameter at a time.\n",
        "operationId": "retrieveEmailAddresses",
        "parameters": [
          {
            "name": "confirm_status",
            "in": "query",
            "description": "Use the `confirm_status` query parameter to search for account emails using the email status. Possible values are `CONFIRMED` or `UNCONFIRMED`. You can also abbreviate the values of this query parameter and use `C` or `U`.\n",
            "schema": {
              "type": "string",
              "enum": [
                "CONFIRMED",
                "C",
                "UNCONFIRMED",
                "U"
              ]
            }
          },
          {
            "name": "role_code",
            "in": "query",
            "description": "Use the `role_code` query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are `CONTACT`, `BILLING`, `REPLY_TO`, `JOURNALING`, or `OTHER`. You can also abbreviate the value of this query parameter and use `C`,`B`,`R`,`J`, or `O`.",
            "schema": {
              "type": "string",
              "enum": [
                "CONTACT",
                "C",
                "BILLING",
                "B",
                "JOURNALING",
                "J",
                "REPLY_TO",
                "R",
                "OTHER",
                "O"
              ]
            }
          },
          {
            "name": "email_address",
            "in": "query",
            "description": "Use the `email_address` query parameter to search for a specific account email address.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEmails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_read"
            ]
          },
          {
            "oauth2_access_code": [
              "account_read"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:read"
        ]
      },
      "post": {
        "tags": [
          "Account Services"
        ],
        "summary": "POST Add an Account Email Address",
        "description": "Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error. \n\nWhen you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from `UNCONFIRMED` to `CONFIRMED`. You can use confirmed account email addresses in the email campaign `from_email` and `reply_to_email` headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide. \n",
        "operationId": "addAccountEmailAddress",
        "requestBody": {
          "description": "A JSON request payload containing the new email address you want to add to the Constant Contact account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountEmailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEmailCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "account_update"
            ]
          },
          {
            "oauth2_access_code": [
              "account_update"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "account:update"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities": {
      "get": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "GET Activity Status Collection",
        "description": "This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).",
        "operationId": "getActivityStatusCollection",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies the number of results displayed per page of output, from 1 - 500, default = 50.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "example": 25
          },
          {
            "name": "state",
            "in": "query",
            "description": "Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out.",
            "schema": {
              "type": "string",
              "enum": [
                "processing",
                "completed",
                "cancelled",
                "failed",
                "timed_out"
              ]
            },
            "example": "processing"
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activities"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/activities/{activity_id}": {
      "get": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "GET an Activity Status",
        "description": "This endpoint returns an activity status report.",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "activity_id",
            "in": "path",
            "description": "The unique ID of the activity to GET",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "Resource not found for the activity_id provided",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/activities/contact_exports": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Export Contacts to a File",
        "description": "Use this method to create an activity that exports contacts and contact details to a CSV file. By default, all contacts are exported. To filter contacts to export, specify the source to use, `contact_id`, `list_id`, or `segment_id` (all mutually exclusive).\nBy default, all contact related fields are exported. Use the fields array to only export specific contact fields. You must export `email_address` to successfully export `email_optin_source`, `email_optin_date`, `email_optout_source`, `email_optout_date`, or `email_optout_reason`.\nAfter Constant Contact finishes processing the activity, use the `results` link in the response body to retrieve the CSV file.",
        "operationId": "postContactsExport",
        "requestBody": {
          "description": "A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful, queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityExportStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/contact_delete": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Delete Contacts in Bulk",
        "description": "Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).",
        "operationId": "postContactDelete",
        "requestBody": {
          "description": "The request body contains an array of contact_ids <em>or</em> list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityDeleteStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/contacts_file_import": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Import Contacts using a CSV File",
        "description": "This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.\n\nImporting a new contact automatically sets the contact's `permission_to_send` property as `implicit` and the `opt_in_source` property as `Account`. Importing an existing contact only updates the contact properties you include in the request.\n\nThe CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.",
        "operationId": "contactsCSVImport",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file",
                  "list_ids"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The CSV file you are importing. The column headings that you can use in the file are: `first_name`,\n`last_name`, `email`, `phone`, `job_title`, `anniversary`, `birthday_day`, `birthday_month`, `company_name`, `street`, `street2`, `city`, `state`, `zip`, and `country`. The only required column heading is `email`.\n\n\nYou can also use custom fields as column headings. Enter the custom field name prefixed with `cf:` as the column heading. For example, use `cf:first_name` as the header name if you have a custom field named \"first_name\". The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.\n",
                    "format": "binary",
                    "example": "new_contacts_import.csv"
                  },
                  "list_ids": {
                    "maxItems": 50,
                    "type": "array",
                    "description": "Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact `list_id` values.",
                    "example": "8c077f20-1586-11e4-bcb3-00163e56be7c",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityImport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "1. This endpoint requires that Content-Type be unspecified 2. Wrong file format, upload file must be of type .csv",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/activities/contacts_json_import": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Import Contacts using a JSON Payload",
        "description": "Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists you are adding all imported contacts to.\n\nImporting a new contact automatically sets the contact's `permission_to_send` property as `implicit` and the `opt_in_source` property as `Account`. Importing an existing contact only updates the contact properties you include in the request.\n\nYou can import custom fields by prefixing a custom field name with `cf:` and adding it as a contact property. For example, use the property name `cf:first_name` if you have a custom field named first_name. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.\n\nThe request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data.",
        "operationId": "bulkImportContactsJSON",
        "requestBody": {
          "description": "The JSON request payload that contains the contact data and contact lists for the import.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsJsonImport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityImport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/remove_list_memberships": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Remove Contacts from Lists",
        "description": "Use this method to create an activity that removes contacts from one or more lists. Use the properties in the `source` object to remove specific contacts from your targeted lists. Use the `list_ids` array to specify the lists from which you want to remove the source contacts.\n",
        "operationId": "postListRemoveContact",
        "requestBody": {
          "description": "The JSON payload used to create the 'remove contacts from lists' activity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListActivityRemoveContacts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityListsMembership"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/add_list_memberships": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Add Contacts to Lists",
        "description": "Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the `source` object to specify the contacts you want to add to lists. Use the `list_ids` array to specify which lists you want to add your source contacts to.",
        "operationId": "postListAddContact",
        "requestBody": {
          "description": "The JSON payload used to create the 'add contacts to lists' activity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListActivityAddContacts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityListsMembership"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/contacts_taggings_remove": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Remove Tags from Contacts",
        "description": "Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the `source` type used to identify contacts from which the specified tags (`tag_id`) are removed.\n\nSource types are mutually exclusive. If the specified source is either `all_active_contacts` or `list_ids`, you can optionally choose to `exclude` specified contacts by `contact_id`. Use the activity link in the results to check the status of your request.\"\n\nFor more use case information, see \"[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)\"\n",
        "operationId": "postTagRemoveContact",
        "requestBody": {
          "description": "The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagAddRemoveContacts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityTagging"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/contacts_taggings_add": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Add Tags to Contacts",
        "description": "Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the `source` type to identify contacts from which the specified tags (`tag_id`) are added.\n\nSource criteria are mutually exclusive. If the source is `all_active_contacts` or `list_ids`, you can optionally choose to `exclude` contacts by `contact_id`. Use the activity link in the results to check the status of your request.\n\nFor more use case information, see \"[Add Tags to Contacts](/api_guide/add_tagging_activity.html)\"\n",
        "operationId": "postTagAddContact",
        "requestBody": {
          "description": "The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagAddRemoveContacts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityTagging"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/activities/contacts_tags_delete": {
      "post": {
        "tags": [
          "Bulk Activities"
        ],
        "summary": "Delete Tags",
        "description": "Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the `tag_ids` array of string values in the request body to specify which tags to delete.",
        "operationId": "postTagDelete",
        "requestBody": {
          "description": "An array of string values (`tag_id`s) to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagIdList500Limit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful. Activity queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityTagging"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/segments": {
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "GET all Segments",
        "description": "Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.",
        "operationId": "getAccountSegments",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of segments to return on a page.",
            "schema": {
              "type": "string",
              "default": "1000"
            },
            "example": "1000"
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specify the segment sort order to use. Sort by name (`sort_by=name`) in ascending order, or sort by date (`sort_by=date`) in descending order with the most recently updated segments listed first.",
            "schema": {
              "type": "string",
              "default": "date"
            },
            "example": "sort_by=date"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentsDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:read"
        ]
      },
      "post": {
        "tags": [
          "Segments"
        ],
        "summary": "POST (create) a Segment",
        "description": "Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment `name` must be unique. The `segment_criteria` requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the `segment_criteria` to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:\n\n  -  **`tracking`**: Supports **or** and **and** groups.\n\n\n  -  **`contact`**: Supports **or** and **and** groups.\n\n\n  -  **`list_membership`**: Supports **or** groups.\n\n  -  **`tags`**: Supports **or** groups.\n\nIf you do not specify `list_membership` as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the `segment_criteria` do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.\n\nFor more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.",
        "operationId": "createSegment",
        "requestBody": {
          "description": "The segment `name` and `segment_criteria` (requires single-string escaped JSON).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Segment successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/segments/{segment_id}": {
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "GET a Segment's Details",
        "description": "Use this method to get details about a segment, including the segment criteria. If you know the `segment_id` You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment's Details](/api_guide/segment_get.html) in the API guide.",
        "operationId": "getSegmentDetail",
        "parameters": [
          {
            "name": "segment_id",
            "in": "path",
            "description": "The system-generated unique ID that identifies a segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 14
          }
        ],
        "responses": {
          "200": {
            "description": "The segment was successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:read"
        ]
      },
      "put": {
        "tags": [
          "Segments"
        ],
        "summary": "PUT (update) a Segment",
        "description": "Use this method to update an existing segment's name (`name`) and/or contact selection criteria (`segment_criteria`). You must specify both the `name` and the `segment_criteria` in the request body, even if you don't plan to update both. The segment's name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the `segment_criteria` do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.",
        "operationId": "updateSegment",
        "parameters": [
          {
            "name": "segment_id",
            "in": "path",
            "description": "The system generated ID that uniquely identifies the segment that you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 14
          }
        ],
        "requestBody": {
          "description": "Include both the `name` and `segment_criteria` (single-string escaped JSON) in the body request, then make updates to either or both.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The segment was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Segments"
        ],
        "summary": "DELETE a Segment",
        "description": "Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.\n\nDeleted segments do not display in the results when using the `GET /segments` endpoint. If you know the `segment_id`, you can use the `GET /segments/{segment_id}` endpoint to view the deleted segment's details. A segment's details are preserved for external reference purposes, such as displaying the segment name in a campaign's history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.",
        "operationId": "deleteSegment",
        "parameters": [
          {
            "name": "segment_id",
            "in": "path",
            "description": "The system generated ID that uniquely identifies the segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 14
          }
        ],
        "responses": {
          "204": {
            "description": "The segment was successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ]
      }
    },
    "/segments/{segment_id}/name": {
      "patch": {
        "tags": [
          "Segments"
        ],
        "summary": "PATCH (rename) a Segment",
        "description": "Use this method to update an existing segment `name` with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.",
        "operationId": "updateSegmentName",
        "parameters": [
          {
            "name": "segment_id",
            "in": "path",
            "description": "The system generated ID that uniquely identifies the segment that you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 14
          }
        ],
        "requestBody": {
          "description": "Include the existing segment `name` in the body request, then rename the segment using a unique new name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The segment name was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/{contact_id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "GET a Contact",
        "description": "This endpoint GETs a specific contact resource (contact_id). Use the `include` query parameter to add any of the available contact sub-resources to the response payload.",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "Unique ID of contact to GET",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Use `include` to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: `custom_fields`, `list_memberships`, `phone_numbers`, `street_addresses`, `notes`, and `taggings`.",
            "schema": {
              "type": "string",
              "format": "csv",
              "enum": [
                "custom_fields",
                "list_memberships",
                "phone_numbers",
                "street_addresses",
                "taggings",
                "notes"
              ]
            },
            "example": "custom_fields,list_memberships"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "PUT (update) a Contact",
        "description": "The PUT method updates an existing contact. You must include the `update_source` property in the PUT request payload. To restore  a deleted contact you must specify the `update_source` as `Account`. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources. Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived.",
        "operationId": "putContact",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "Unique ID of contact to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "requestBody": {
          "description": "JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact resource has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "DELETE a Contact",
        "description": "Deletes the contact identified by the contact_id path parameter. Deleted contacts won't receive email from you, and they don't count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "Unique ID of contact to DELETE",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful; No content returned",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "GET Contacts Collection",
        "description": "Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific criteria. For example, you can search by the contact's `email` address, `status`, `lists` memberships, `segment_id`, `tags`, `notes` and `updated_after` date. Use the `limit` query parameter to limit the number of results returned per page. Use the `include` query parameter to include contact sub-resources in the response and `include_count` to include the total number of contacts that meet your specified search criteria.\n\nBy default, this method returns all contacts that are not deleted. Use the `status` query parameter with the value `all` to return all contacts including deleted contacts.",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Use the `status` query parameter to search for contacts by status. This parameter accepts one or more comma separated values: `all`, `active`, `deleted`, `not_set`, `pending_confirmation`, `temp_hold`, and `unsubscribed`.",
            "schema": {
              "type": "string",
              "format": "csv",
              "enum": [
                "all",
                "active",
                "deleted",
                "not_set",
                "pending_confirmation",
                "temp_hold",
                "unsubscribed"
              ]
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Use the `email` query parameter to search for a contact using a specific email address.",
            "schema": {
              "type": "string"
            },
            "example": "xyz@example.com"
          },
          {
            "name": "lists",
            "in": "query",
            "description": "Use the `lists` query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple `list_id` values, up to a maximum of 25.",
            "schema": {
              "maximum": 25,
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a,04fe9a-a579-43c5-bb1a-58ed29bf0a6a,04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          },
          {
            "name": "segment_id",
            "in": "query",
            "description": "Use to get contacts that meet the segment criteria for a single specified `segment_id`. This query parameter can only be combined with the limit query parameter. When using the `segment_id` query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code.",
            "schema": {
              "maximum": 1,
              "type": "string"
            },
            "example": "14"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Use to get contact details for up to 50 specified tags. Use a comma to separate each `tag_id`.",
            "schema": {
              "maximum": 50,
              "type": "string",
              "format": "uuid"
            },
            "example": "fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "updated_after",
            "in": "query",
            "description": "Use `updated_after` to search for contacts that have been updated after the date you specify; accepts ISO-8601 formatted dates.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2016-07-16T00:00:00.000Z"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Use `include` to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: `custom_fields`, `list_memberships`, `taggings`, `notes`,`phone_numbers`, `street_addresses`. ",
            "schema": {
              "type": "string",
              "format": "csv",
              "enum": [
                "custom_fields",
                "list_memberships",
                "phone_numbers",
                "street_addresses",
                "taggings",
                "notes"
              ]
            },
            "example": "custom_fields,list_memberships"
          },
          {
            "name": "include_count",
            "in": "query",
            "description": "Set `include_count=true` to include the total number of contacts (`contacts_count`) that meet all search criteria in the response body.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies the number of results displayed per page of output in the response, from 1 - 500, default = 50.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contacts"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contacts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "POST (create) a Contact",
        "description": "Creates a new contact resource; you must include the `create_source` property and at least one of the following properties when creating a new contact: `first_name`, `last_name`, or `email_address` (`email_address` must be unique for each contact).",
        "operationId": "createContact",
        "requestBody": {
          "description": "The JSON payload defining the contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type; the payload must be in JSON format, and Content-Type must be application/json",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/sign_up_form": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create or Update a Contact",
        "description": "Use this method to create a new contact or update an existing contact. This method uses the `email_address` string value you include in the request body to determine if it should create an new contact or update an existing contact.\n\nUpdates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing `list_memberships` or `custom_fields` arrays.\n<div class=\"Msg\"><p class=\"note-text\">Only use this method when a contact gives you their explicit permission to send them emails. It is a violation of US and Canadian anti-spam laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.</p></div>\n\nWhen this method creates a new contact, it returns a 201 response code.\n\nWhen this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.\n\nThe method automatically modifies the contact's `permission_to_send` and `opt_in_source` properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:\n\nIf Confirmed Opt-in is _enabled_, this method automatically sets the `permission_to_send` property as pending\\_confirmation for new contacts. \n\nIf Confirmed Opt-in is _disabled_, this method automatically sets the `permission_to_send` property as explicit and the `opt_in_source` property as `Contact` for new contacts. Updated contacts have their `permission_to_send` property set as explicit.\n      \n",
        "operationId": "createOrUpdateContact",
        "requestBody": {
          "description": "A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the `email_address` property and the `list_memberships` array.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactCreateOrUpdateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreateOrUpdateResponse"
                }
              }
            }
          },
          "201": {
            "description": "Contact successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreateOrUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. You sent simultaneous requests that are attempting to modify the same contact.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/contact_id_xrefs": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "GET a collection of V2 and V3 API contact IDs",
        "description": "<div class=\"Msg Msg--warning\"><p class=\"note-text\">Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.</p></div>\n\nThis GET call retrieves a collection of cross-referenced contact sequence IDs (`id` used in the V2 API) and UUIDs (`contact_id` used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the `sequence_ids` query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 `contact_ids`. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.\n",
        "operationId": "getContactIdXrefs",
        "parameters": [
          {
            "name": "sequence_ids",
            "in": "query",
            "description": "Comma delimited list of V2 API contact `ids` to cross-reference with the V3 API `contact_id` value. Endpoint accepts a maximum of 500 ids at a time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "csv"
            },
            "example": "1995998026,1882999944,1775099999"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactXrefs"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      }
    },
    "/contact_custom_fields/{custom_field_id}": {
      "get": {
        "tags": [
          "Contacts Custom Fields"
        ],
        "summary": "GET a custom_field",
        "description": "This GET call retrieves a `custom_field` resource, specified by `custom_field_id`.",
        "operationId": "getCustomField",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "Unique ID of the `custom_field` on which to operate.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "put": {
        "tags": [
          "Contacts Custom Fields"
        ],
        "summary": "PUT (update) a custom_field",
        "description": "This PUT request updates an existing `custom_field` object.",
        "operationId": "putCustomField",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "Unique ID of the `custom_field` on which to operate.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "requestBody": {
          "description": "The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - custom_field updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Contacts Custom Fields"
        ],
        "summary": "DELETE a custom_field",
        "description": "This DELETE request deletes a custom_field from the user's account",
        "operationId": "deleteCustomField",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "Unique ID of the custom_field on which to operate.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful; No content returned",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/contact_custom_fields": {
      "get": {
        "tags": [
          "Contacts Custom Fields"
        ],
        "summary": "GET custom_fields Collection",
        "description": "This GET request returns all `custom_fields` defined in the user's account.\n<div class=\"Msg\"><p class=\"note-text\">This method does not currently support filtering results using the custom field update date.</p></div>\n",
        "operationId": "getCustomFields",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies the number of results displayed per page of output, from 1 - 100, default = 50.",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFields"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "post": {
        "tags": [
          "Contacts Custom Fields"
        ],
        "summary": "POST (create) a custom_field",
        "description": "This POST request adds a new `custom_field` to the user's account. A user can configure up to 100 `custom_fields` in their account.",
        "operationId": "postCustomFields",
        "requestBody": {
          "description": "The JSON payload required to create a new `custom_field`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New custom_field successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type; the payload must be in JSON format, and Content-Type must be application/json.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/contact_lists/{list_id}": {
      "get": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "GET a List",
        "description": "Use this method to get details about a specific contact list (`list_id`).",
        "operationId": "getList",
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "description": "The system generated ID that uniquely identifies a contact list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "cbc05bac-6a41-46fa-a063-79961763bf4b"
          },
          {
            "name": "include_membership_count",
            "in": "query",
            "description": "Use to include the number of contact members per list by setting the `include_membership_count` to either `active`, to count only active contacts, or `all` to include all contacts in the count.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "active"
              ]
            },
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:read"
        ]
      },
      "put": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "PUT (update) a List",
        "description": "Updates an existing contact list resource, specified by `list_id`",
        "operationId": "putList",
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "description": "Unique ID of the contact list to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "cbc05bac-6a41-46fa-a063-79961763bf4b"
          }
        ],
        "requestBody": {
          "description": "JSON payload containing updates to the specified contact list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ],
        "x-codegen-request-body-name": "JSON PUT body"
      },
      "delete": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "DELETE a List",
        "description": "Deletes the specified contact list and its membership. DELETE List requests are processed asynchronously, and you can track the status of the request by making a GET call to the URI shown in the `_links` property in the response.",
        "operationId": "deleteListActivity",
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "description": "Unique ID of the list to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "cbc05bac-6a41-46fa-a063-79961763bf4b"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "URL to retrieve the delete activity status",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityDeleteListResponse"
                }
              }
            }
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ]
      }
    },
    "/contact_lists": {
      "get": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "GET Lists Collection",
        "description": "Use this method to return details about all contact lists for the account.\n<div class=\"Msg\"><p class=\"note-text\">This method does not currently support filtering results using the contact list update date.</p></div>\n",
        "operationId": "getLists",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Use to specify the number of results displayed per page of output, from 1 - 500, default = 50.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "include_count",
            "in": "query",
            "description": "Set `include_count` to `true` to return the total number of contact lists that meet your selection criteria.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          },
          {
            "name": "include_membership_count",
            "in": "query",
            "description": "Use to include the number of contact members per list by setting the `include_membership_count` to either `active`, to count only active contacts, or `all` to include all contacts in the count.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "active"
              ]
            },
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListArray"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:read"
        ]
      },
      "post": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "POST (create) a List",
        "description": "Create a new contact list resource",
        "operationId": "createList",
        "requestBody": {
          "description": "JSON payload defining the new contact list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New list successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/contact_lists/list_id_xrefs": {
      "get": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "GET a collection of V2 and V3 API List IDs",
        "description": "<div class=\"Msg Msg--warning\"><p class=\"note-text\">Use this endpoint to migrate your locally stored V2 contact list data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.</p></div>\n\nThis GET call retrieves a collection of cross-referenced list sequence IDs (`id` used in the V2 API) and UUIDs (`list_id` used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the `sequence_ids` query parameter to specify a set of comma delimited V2 list ids to cross-reference. See [Migrating Apps and Data to V3](/api_guide/migration_overview.html) to learn more.\" \n",
        "operationId": "getListIdXrefs",
        "parameters": [
          {
            "name": "sequence_ids",
            "in": "query",
            "description": "Comma delimited list of V2 API list `ids` to cross-reference with the V3 API `list_id` value. Endpoint accepts a maximum of 500 ids at a time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "csv"
            },
            "example": "1995998026,1882999944,1775099999"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXrefs"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:lists:read"
        ]
      }
    },
    "/contact_tags/{tag_id}": {
      "get": {
        "tags": [
          "Contact Tags"
        ],
        "summary": "GET Tag Details",
        "description": "Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag's Details](/api_guide/tags_get_single.html).",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The ID that uniquely identifies a tag (UUID format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "d938260a-af1e-11e9-a540-fa163e595123"
          },
          {
            "name": "include_count",
            "in": "query",
            "description": "Use to include (`true`) or exclude (`false`) the total number of tagged contacts (`contacts_count`) from the results.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "put": {
        "tags": [
          "Contact Tags"
        ],
        "summary": "PUT (Update) a Tag",
        "description": "Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)",
        "operationId": "putTag",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The system generated ID used to uniquely identify the tag that you want to rename (UUID format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "30c97dd0-332e-11eb-923c-fa163e595327"
          }
        ],
        "requestBody": {
          "description": "The JSON payload used to update the tag name (`name`).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagPut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Contact Tags"
        ],
        "summary": "DELETE a Tag",
        "description": "Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The ID that uniquely identifies a tag in UUID format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "30c97dd0-332e-11eb-923c-fa163e595327"
          }
        ],
        "responses": {
          "202": {
            "description": "The asynchronous request was successfully accepted. To view the results of the activity request, use the href link returned in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityGeneric"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "406": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ]
      }
    },
    "/contact_tags": {
      "get": {
        "tags": [
          "Contact Tags"
        ],
        "summary": "GET Details for All Tags",
        "description": "Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:\n\n<p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p>\nTo learn more, see [Get Tags](/api_guide/tags_get.html).",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Use to specify the number of tag results (up to `500`) to display per page of output. The default is `50`.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "type": "integer",
              "default": 50
            },
            "example": 25
          },
          {
            "name": "include_count",
            "in": "query",
            "description": "Returns the total number of contacts (`contacts_count`) to which a tag applies.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tags"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:read"
        ]
      },
      "post": {
        "tags": [
          "Contact Tags"
        ],
        "summary": "POST (Create) a Tag",
        "description": "Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).",
        "operationId": "postTag",
        "requestBody": {
          "description": "The JSON payload to use to create a new tag.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "contacts:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/emails": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "GET a Collection of Email Campaigns",
        "description": "Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the `after_date` and `before_date` query parameters.\n\nThis endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET `/emails/{campaign_id}` endpoint.\"\n<div class=\"Msg\"><p class=\"note-text\">This method does not currently support filtering results using the email campaign creation date.</p></div>\n",
        "operationId": "retrieveEmailCampaignsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "before_date",
            "in": "query",
            "description": "Use to return email campaigns with `updated_at` timestamps that are before a specific date and time (in ISO-8601 format). Use with the `after_date` query parameter to get email campaigns sent within a specific date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-01-10T11:42:57.000Z"
          },
          {
            "name": "after_date",
            "in": "query",
            "description": "Use to return email campaigns with last `updated_at` timestamps that are after a specific date and time (in ISO-8601 format). Use with the `before_date` query parameter to get email campaigns sent within a specific date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-03-10T11:42:57.000Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEmailCampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "POST (Create) a New Email Campaign",
        "description": "Use this method to create a new email campaign. This method also creates new `primary_email` and `permalink` email campaign activities and associates them with the new email campaign.\n\nThe request body must contain the `name` property and the `email_campaign_activities` array. The `email_campaign_activities` array contains the main content of your email campaign using the required properties `format_type`, `from_name`, `from_email`, `reply_to_email`, `subject`, and `html_content`.\n",
        "operationId": "createEmailCampaignUsingPOST",
        "requestBody": {
          "description": "A JSON request body that contains the email content.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCampaignComplete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaign"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/emails/{campaign_id}": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "GET Details About a Single Email Campaign",
        "description": "Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the `campaign_activity_id` and `role`.",
        "operationId": "retrieveEmailCampaignUsingGET",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The ID (UUID format) that uniquely identifies this email campaign.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaign"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "delete": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "DELETE an Email Campaign",
        "description": "Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a `Scheduled` status.\n\nConstant Contact users can restore deleted email campaigns using the UI.\n",
        "operationId": "removeEmailCampaignUsingDELETE",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The unique ID for the email campaign you are deleting.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "204": {
            "description": "Email campaign successfully deleted. No response body returned.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:delete"
        ]
      },
      "patch": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "PATCH (Update) an Email Campaign Name",
        "description": "Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a `Removed` status.",
        "operationId": "renameEmailCampaignUsingPATCH",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The unique identifier for an email campaign.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "A JSON payload that contains the new email campaign name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCampaignName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaign"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/emails/campaign_id_xrefs": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "GET a Collection of V2 and V3 API Email Campaign Identifiers",
        "description": "<div class=\"Msg Msg--warning\"><p class=\"note-text\">Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.</p></div>\n\nUse this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the `v2_email_campaign_ids` query parameter, this method returns the corresponding V3 `campaign_id` and V3 `campaign_activity_id` UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide.\n",
        "operationId": "retrieveXrefMappingsUsingGET",
        "parameters": [
          {
            "name": "v2_email_campaign_ids",
            "in": "query",
            "description": "Comma separated list of V2 API `campaignId` values. You can enter up to 50 V2 `campaignId` values in each request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "csv"
            },
            "example": "1100567546598,1604567396117,12002485195578"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossReferenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      }
    },
    "/emails/activities/{campaign_activity_id}": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "GET a Single Email Campaign Activity",
        "description": "Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a `REMOVED` status.\n",
        "operationId": "retrieveEmailCampaignActivityUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Use the `include` query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are `physical_address_in_footer`, `permalink_url`, `html_content`, and `document_properties`.",
            "schema": {
              "type": "string",
              "format": "csv",
              "enum": [
                "physical_address_in_footer",
                "permalink_url",
                "html_content",
                "document_properties"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaignActivity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "put": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "PUT (Update) An Email Campaign Activity",
        "description": "Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the `from_name`, `from_email`, `reply_to_email`, and `subject` properties.\n\nYou can only update email campaign activities that have the `primary_email` role and that are in `DRAFT` or `Done` status.\nWhen you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers `physical_address_in_footer`, `document_properties`, `html_content`, and `permalink_url` subresources of the email campaign activity.\n",
        "operationId": "updateEmailCampaignActivityUsingPUT",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the email campaign activity you are updating.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "A request body payload that contains the complete email campaign activity with your changes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCampaignActivity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email campaign activity successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaignActivity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:write"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/emails/activities/{campaign_activity_id}/schedules": {
      "get": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "GET an Email Campaign Activity Schedule",
        "description": "Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in `SCHEDULED` status, this method returns an empty array and a 200 response code.",
        "operationId": "retrieveEmailSchedulesUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "post": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "POST (Create) an Email Campaign Activity Schedule",
        "description": "Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the `scheduled_date` request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on. \n\nBefore you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the `contact_list_ids` or `segment_ids` array to add contacts.\n\nYou can only schedule email campaign activities that have the `primary_email` role and are in `DRAFT`, `DONE`, or `ERROR` status. When you schedule an email campaign activity in `DONE` status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use.\n",
        "operationId": "scheduleEmailCampaignActivityUsingPOST",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity. You can only schedule email campaign activities that have the `primary_email` role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use `\"0\"` as the date to have Constant Contact immediately send the email campaign activity.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailScheduleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:send"
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "DELETE an Email Campaign Activity Schedule",
        "description": "Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in `SCHEDULED` status. Unscheduling reverts the email campaign activity to the status prior to `SCHEDULED`.",
        "operationId": "unscheduleEmailCampaignActivityUsingDELETE",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "204": {
            "description": "Email campaign activity schedule successfully deleted. No response body returned.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:send"
        ]
      }
    },
    "/emails/activities/{campaign_activity_id}/tests": {
      "post": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "POST Test Send an Email Campaign Activity",
        "description": "Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the `email_addresses` array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.\n\nYou can send up to 50 test emails each day. Each recipient you add to the `email_addresses` array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body.\n",
        "operationId": "testSendCampaignActivityUsingPOST",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity. You can only test send email campaign activities that have the `primary_email` role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "A JSON request body that contains the recipients of the test email and an optional personal message.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTestSendInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Test email campaign activity successfully sent. No response body returned.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the daily test send limit or the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:send"
        ],
        "x-codegen-request-body-name": "email_test_send_input"
      }
    },
    "/emails/activities/{campaign_activity_id}/previews": {
      "get": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "GET the HTML Preview of an Email Campaign Activity",
        "description": "Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.\n\nCustom code emails (`format_type` 5) use the Constant Contact account owner's contact information to process contact, custom field, and account variables in the preview.\n\nThis method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML.\n",
        "operationId": "retrieveEmailCampaignActivityPreviewUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCampaignActivityPreview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      }
    },
    "/emails/activities/{campaign_activity_id}/send_history": {
      "get": {
        "tags": [
          "Email Scheduling"
        ],
        "summary": "GET the Send History of an Email Campaign Activity",
        "description": "Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts. \n\nEach send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt. \n\nIf the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array.\n",
        "operationId": "retrieveEmailSendHistoryUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity. You can return the send history for `primary_email` and `resend` role email campaign activities.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSendHistory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      }
    },
    "/emails/activities/{campaign_activity_id}/non_opener_resends": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "GET Details for a Resend to Non-openers Campaign Activity",
        "description": "Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified `campaign_activity_id`, an empty list is returned in the results. You can only create one resend activity per email campaign.",
        "operationId": "retrieveResendToNonOpenersUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendToNonOpeners"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "POST a Resend to Non-openers Campaign Activity",
        "description": "Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current `status` of `Draft`, `Scheduled`, or `Done`. You can only create one resend activity per email campaign.\n \n After an email campaign activity is sent to contacts, Constant Contact waits the specified number of `delay_days` or `delay_minutes` (properties are mutually exclusive) before resending to non-openers. If you set both `delay_days` or `delay_minutes`, `delay_minutes` is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.\n \n ",
        "operationId": "createResendToNonOpenersUsingPOST",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "A JSON request body that specifies when to resend the campaign activity to non-openers.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendToNonOpenersInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendToNonOpenersObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:send"
        ],
        "x-codegen-request-body-name": "resend_schedule"
      }
    },
    "/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}": {
      "delete": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "DELETE a Resend to Non Openers Activity",
        "description": "Use this `DELETE` method to delete (unschedule) a resend to non openers activity.",
        "operationId": "deleteResendToNonOpenersUsingDELETE",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          },
          {
            "name": "resend_request_id",
            "in": "path",
            "description": "The unique ID associated with the resend for the email campaign activity (for example: `389093`). If the email campaign activity is currently in draft status, specify `DRAFT` as the ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "389093"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:send"
        ]
      }
    },
    "/emails/activities/{campaign_activity_id}/abtest": {
      "get": {
        "tags": [
          "Email Campaigns AB Tests"
        ],
        "summary": "GET A/B Test Details for an Email Campaign Activity",
        "description": "Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.",
        "operationId": "retrieveEmailCampaignABTestUsingGET",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABTestData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:read"
        ]
      },
      "post": {
        "tags": [
          "Email Campaigns AB Tests"
        ],
        "summary": "POST (Create) an A/B Test for an Email Campaign Activity",
        "description": "Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a `current_status` of `DRAFT`. When you create an A/B test, the `type` changes from Newsletter (code= `10`) to A/B Test (code= `57`).",
        "operationId": "createEmailCampaignABTestUsingPOST",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "requestBody": {
          "description": "Specify the `alternative_subject` line, `test_size` percentage of contacts (value must from `5` to `50` inclusively), and the `winner_wait_duration` (value must be `6`, `12`, `24`, or `48` hours).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ABTestData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABTestData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:write"
        ],
        "x-codegen-request-body-name": "abtest"
      },
      "delete": {
        "tags": [
          "Email Campaigns AB Tests"
        ],
        "summary": "DELETE an A/B Test for an Email Campaign Activity",
        "description": "Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a `current_status` of `Draft`. Deleting an A/B tests reverts the email campaign activity `type` from A/B Test (code= `57`) back to NewsLetter (code= `10`). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.",
        "operationId": "deleteEmailCampaignABTestUsingDELETE",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for the primary email campaign activity.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "91569d46-00e4-4a4d-9a4c-d17d98740d04"
          }
        ],
        "responses": {
          "204": {
            "description": "A/B test successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "429": {
            "description": "Too many requests. You exceeded the request rate limit.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "campaign:write"
        ]
      }
    },
    "/reports/contact_reports/{contact_id}/activity_details": {
      "get": {
        "tags": [
          "Contacts Reporting"
        ],
        "summary": "GET Contact Activity Details",
        "description": "<p>Gets the tracking activity data for a given account and contact, sorted in descending activity date order.</p><p>One or more tracking activity types can be returned in a single request.</p><table><tr><td colspan='2'>Valid tracking activity types</td></tr><tr><td><b>em_sends</b></td><td>Send activities</td></tr><tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr><tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr><tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr><tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr><td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr></table>",
        "operationId": "getContactTracking",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The contact id which is requesting tracking activity data.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa9ff7b0-478d-11e6-8059-00163e3c8e19"
          },
          {
            "name": "tracking_activities_list",
            "in": "query",
            "description": "The tracking activities list contains the tracking activity types to be specified as part of each request. The tracking activities list is a comma-delimited string containing one ore more tracking activity types. (such as em_sends, em_opens, em_forwards)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "csv"
            },
            "example": "em_clicks"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "default": "100"
            },
            "example": "20"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/contact_reports/{contact_id}/open_and_click_rates": {
      "get": {
        "tags": [
          "Contacts Reporting"
        ],
        "summary": "GET Average Open and Click Rates",
        "description": "<p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>",
        "operationId": "getContactOpenClickRate",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa9ff7b0-478d-11e6-8059-00163e3c8e19"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactOpenAndClickRates"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/contact_reports/{contact_id}/activity_summary": {
      "get": {
        "tags": [
          "Contacts Reporting"
        ],
        "summary": "GET Contact Action Summary",
        "description": "Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.",
        "operationId": "getContactTrackingCount",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa9ff7b0-478d-11e6-8059-00163e3c8e19"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCampaignActivitiesSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "contact_data"
            ]
          },
          {
            "oauth2_access_code": [
              "contact_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/links": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Links Report",
        "description": "Use this method to return the number of unique contacts that clicked each link in an email campaign activity and the type of action associated with clicking each link. You can return reporting data for `primary_email` and `resend` role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.",
        "operationId": "getCampaignActivityLinkStats",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailLinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/sends": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Sends Report",
        "description": "Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact's email address, the contact's first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.",
        "operationId": "getSends",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendsTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/opens": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Opens Report",
        "description": "Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact's email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.",
        "operationId": "getOpens",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The unique ID for an email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpensTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/unique_opens": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Unique Opens Report",
        "description": "Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact's email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.",
        "operationId": "getUniqueOpens",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpensTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/didnotopens": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Did Not Opens Report",
        "description": "Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact's email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.",
        "operationId": "getDidNotOpens",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DidNotOpensTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/clicks": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Clicks Report",
        "description": "Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the `url_id` query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.",
        "operationId": "getClicks",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "c8cdf384-15ca-4dcc-9b6f-4c91121fdc23"
          },
          {
            "name": "url_id",
            "in": "query",
            "description": "The ID that uniquely identifies a single link URL for which you want to get a clicks report.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 49920742166
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClicksTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/forwards": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Forwards Report",
        "description": "Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact's email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.",
        "operationId": "getForwards",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardsTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/optouts": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Opt-outs Report",
        "description": "Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact's email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.",
        "operationId": "getOptouts",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptoutsTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/email_reports/{campaign_activity_id}/tracking/bounces": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Bounces Report",
        "description": "Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact's email address, unique ID, and the email bounce date and time.\nUse the <code>bounce_code</code> query parameter to limit the type of bounce data to return.\n\nFor more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.",
        "operationId": "getBounces",
        "parameters": [
          {
            "name": "campaign_activity_id",
            "in": "path",
            "description": "The ID that uniquely identifies the email campaign activity to use for this report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "bounce_code",
            "in": "query",
            "description": "To return results for a specific bounce code, select the `bounce_code` from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes `B` and `D` use `bounce_code=B&bounce_code=D`.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "B",
                  "D",
                  "F",
                  "S",
                  "V",
                  "X",
                  "Z"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of tracking activities to return on a page.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "string",
              "default": "500"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BouncesTrackingActivitiesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/summary_reports/email_campaign_summaries": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Campaigns Summary Report",
        "description": "Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.\n\nResults are sorted in descending order by the date that the email was last sent (<code>last_sent_date</code>). Use the <code>limit</code> query parameter to limit the number of email campaign summary reports listed on each page.\n\n\n\n For more use case information, see \"[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\"",
        "operationId": "getAllBulkEmailCampaignSummaries",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Use the `limit` query parameter to limit the number of email campaign summaries to return on a single page. The default is `50` and the maximum is `500` per page.",
            "schema": {
              "type": "string",
              "default": "50"
            },
            "example": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEmailCampaignSummariesPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/stats/email_campaigns/{campaign_ids}": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Campaign Stats Report",
        "description": "Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.\n\nFor each `campaign_id`, this method returns lists that include total counts (`stats`) for each type of tracked email and relevant campaign-related percentages (`percents`). It also returns the date and time at which the campaign stats were last refreshed.\nIf any specified `campaign_id` is invalid, a 404 error response is returned for all campaigns.",
        "operationId": "getEmailSummary",
        "parameters": [
          {
            "name": "campaign_ids",
            "in": "path",
            "description": "A comma-separated list of `campaign_id`s (UUID's).",
            "required": true,
            "schema": {
              "maximum": 150,
              "type": "string"
            },
            "example": "82ee2c37-c8f8-4974-9560-ef93ad51d58z"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignStatsQueryResultEmail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/reports/stats/email_campaign_activities/{campaign_activity_ids}": {
      "get": {
        "tags": [
          "Email Reporting"
        ],
        "summary": "GET an Email Campaign Activity Stats Report",
        "description": "Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.\n\nFor each `campaign_activity_id`, this method returns the `campaign_id`, the total counts (`stats`) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (`last_refresh_time`) the `stats`.\n\nWhen requesting statistics for multiple email campaign activities, if one or more of the `campaign_activity_ids` do not exist, were deleted, or do not have any stats associated with it, the `campaign_activity_ids` and error details display under `errors`. If any single specified `campaign_activity_id` is invalid (malformed), a 404 error response is returned for all campaign activities.",
        "operationId": "getEmailCampaignActivitySummary",
        "parameters": [
          {
            "name": "campaign_activity_ids",
            "in": "path",
            "description": "A comma-separated list of `campaign_activity_id`s (UUID's).",
            "required": true,
            "schema": {
              "maximum": 10,
              "type": "string"
            },
            "example": "82ee2c37-c8f8-4974-9560-ef93ad51d58z"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignActivityStatsQueryResultEmail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": [
              "campaign_data"
            ]
          },
          {
            "oauth2_access_code": [
              "campaign_data"
            ]
          },
          {
            "api_key": []
          }
        ],
        "x-authorization-privileges": [
          "ui:campaign:metrics"
        ]
      }
    },
    "/partner/accounts": {
      "get": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "GET Partner Client Accounts",
        "description": "Get all Constant Contact client accounts managed under your technology partner account. Use the `limit` query parameter to set the number of accounts to return on each results page. Use the `account_type` query parameter to filter client account results by type: `all` (default), `managed`, or `unmanaged`.\nOnly technology partners can access partner endpoints and partner endpoints cannot be tested using the API reference tester.\nFor more use case information, see [Get all Partner Client Accounts](/api_guide/partners_accts_get.html) in the API guide.",
        "operationId": "getPartnerSiteOwners",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Depending on the `limit` you specify, the system determines the `offset` parameter to use (number of records to skip) and includes it in the link used to get the next page of results",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of client accounts to return on each page of results. The default value is `50`. Entering a `limit` value less than the minimum (`10`) or greater than the maximum (`50`) is ignored and the system uses the default values. Depending on the `limit` you specify, the system determines the `offset` parameter to use (number of records to skip) and includes it in the link used to get the next page of results.",
            "schema": {
              "maximum": 50,
              "minimum": 10,
              "type": "string",
              "format": "int32",
              "default": "50"
            },
            "example": "50"
          },
          {
            "name": "account_type",
            "in": "query",
            "description": "Filters client account results by account type: `all` (default), `managed`, or `unmanaged`. Excluding the `account_type` query parameter returns all client accounts for the partner.",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "managed",
                "unmanaged"
              ]
            },
            "example": "managed"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "POST (create) a Partner Client Account",
        "description": "Use this POST method to create a new Constant Contact client account under your partner account, set up the billing plan for the account, and to add the new client to the default contact list.\n\nNewly created accounts are free trials which give the user up to 60 days to try Constant Contact before buying. Trial accounts have limits depending on the services that are included.\n\nIf a field validation error occurs, a 400 response message is returned.\n\nIf provisioning does not complete successfully due to unavailable dependencies, such as database or dependent services, a 503 response message is returned. By default, the client account provision data is stored and processed when provisioning becomes available.\n\nSome client account features will be supported in future releases, such as Single Sign On (SSO).\n\nFor more use case information, see [Create a new Partner Client Account](/api_guide/partners_accts_create.html) in the API guide.",
        "operationId": "provision",
        "requestBody": {
          "description": "Create a new Constant Contact client account under your partner account. All required properties must be included in the JSON payload request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Provision"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "409": {
            "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          },
          "503": {
            "description": "Our internal service is temporarily unavailable.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "provision"
      }
    },
    "/partner/accounts/{encoded_account_id}/plan": {
      "get": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "GET Billing Plan Details for a Client Account",
        "description": "Use this GET method to return billing plan details for a client's Constant Contact account.\nOnly technology partners can access partner endpoints and partner endpoints cannot be tested using the API reference tester.\nFor more use case information, see [Get Billing Plan Details for a Client Account](/api_guide/partners_plans_get.html) in the API guide.",
        "operationId": "getPlan",
        "parameters": [
          {
            "name": "encoded_account_id",
            "in": "path",
            "description": "Specify the client's unique `encoded_account_id`.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a07e1lxqqqo0"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanTiersObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "405": {
            "description": "Unsupported method used.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "PUT (update) Billing Plan Details for a Client Account",
        "description": "Use this PUT method to update the type of billing plan to assign to the Constant Contact client account. The type of billing plan determines which Constant Contact product features that the client account can access. The billing plan type (`plan_type`) that you enter must already exist in the plan group. Attempting to change to a plan that is currently not available within your partner plan group results in a 400 error response code.\n\nWhen you create a new client account, the `plan_type` defaults to `TRIAL` and the `billing_day_of_month` defaults to `null`. The `billing_day_of_month` property is required if a client account is not set up to use single billing. You can change the day of month (`billing_day_of_month`) in which to bill a client account only when changing the `plan_type` value from `TRIAL` to a different `plan_type`, otherwise the `billing_day_of_month` value you enter is ignored. You can choose to enter a specific day of the month or accept the default value, which is the day on which the `plan_type` value changes from a `TRIAL` plan to a different `plan_type`. Changing the `plan_type` from `TRIAL` to another `plan_type` automatically changes the `billing_status` from `Trial` to `Open`.\n\n\nOnly technology partners can access partner endpoints and partner endpoints cannot be tested using the API reference tester.\n\nFor more use case information, see [PUT Billing Plan Details for a Client Account](/api_guide/partners_plans_update.html) in the API guide.",
        "operationId": "setPlan",
        "parameters": [
          {
            "name": "encoded_account_id",
            "in": "path",
            "description": "Specify the client's unique `encoded_account_id`.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a07e1lxqqqo0"
          }
        ],
        "requestBody": {
          "description": "Update the billing plan (`plan_type`) for an existing Constant Contact client account. Options include:\n  - `TRIAL`: A non-billed account with an expiration date that allows clients to try Constant Contact product features.\n\n  - `GOOD`: A billed **Email** client account plan.\n\n  - `BETTER`: A billed **Email Plus** client account plan.\n\n  - `BEST`: A billed **Personal Marketer** client account plan.\n\n  - `LITE`: A **Website Builder** client account plan.\n\n\nIf updating from a `TRIAL` plan (`plan_type`) to another type of billing plan, you have the option to update the day of month (`billing_day_of_month`) in which to bill the client account. Valid values include `1` through to and including `31`. Any additional billing plan properties and values that you include in the request body are ignored.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanInfo"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanTiersObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "405": {
            "description": "Unsupported method used.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/partner/accounts/{encoded_account_id}/status/cancel": {
      "put": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "PUT Cancel the Billing Plan for a Client Account",
        "description": "Use this PUT method to cancel a client's Constant Contact account. If the specified client account or technology partner account does not exist, the system returns a 404 error response. If the client account exists under a different technology partner account, the system returns a 400 error response.\n\n\n  To get a list of all canceled client accounts (`\"billing_status\": \"Canceled\"`), make a `GET` call to the `/partner/accounts` endpoint.\n\n  Only technology partners can access partner endpoints and partner endpoints cannot be tested using the API reference tester.\n\n  For more use case information, see [Cancel the Billing Plan for a Client Account](/api_guide/partners_plans_cancel.html) in the API guide.\"",
        "operationId": "cancelAccount",
        "parameters": [
          {
            "name": "encoded_account_id",
            "in": "path",
            "description": "The system generated ID that uniquely identifies the client account.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a07e1lxqqqo0"
          }
        ],
        "requestBody": {
          "description": "By default, the current date and time is automatically used as the cancellation date. However, you can specify a future date and time to cancel the account (`effective_date`) in the request body in ISO format. You can also enter the client's cancellation reason (`reason_id`).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCancellation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCancellation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/partner/accounts/{encoded_account_id}/account_operations/sync": {
      "post": {
        "tags": [
          "Technology Partners"
        ],
        "summary": "POST Send an API request on Behalf of a Client Account",
        "description": "Use this API method to send an API request on behalf of a managed client account in your partnership.\n\nThe request body properties you use in this partner API call determine the structure of the API request that Constant Contact sends on behalf of the managed client account. This includes the HTTP url, HTTP method type, request body, request url parameters, request query parameters, and headers that for the request. You can use this `/partner/accounts/{encoded_account_id}/account_operations/sync` API method to send a request using non-partner v3 API methods.",
        "operationId": "partnerAccountOperationsPostSync",
        "parameters": [
          {
            "name": "encoded_account_id",
            "in": "path",
            "description": "An encoded account id for a managed account in your partnership.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a07e1lxqqqo0"
          }
        ],
        "requestBody": {
          "description": "A JSON request body that contains the structure of the HTTP request you are instructing Constant Contact to send on behalf of specific managed account in your partnership.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerAccountOperationsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Request successful. The response body schema returned by this method corresponds to the specific API request you provided in the request body.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "Not found. This may indicate that the encoded_account_id you provided is invalid, or the API request you are sending on behalf of an account returned a 404.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/partner/webhooks/subscriptions": {
      "get": {
        "tags": [
          "Technology Partners Webhooks"
        ],
        "summary": "GET a Collection of Webhook Topic Subscriptions",
        "description": "Use this GET method to return a collection containing your application's webhook subscriptions.",
        "operationId": "getWebhooksCollection",
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksSubscriptionCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      }
    },
    "/partner/webhooks/subscriptions/{topic_id}": {
      "get": {
        "tags": [
          "Technology Partners Webhooks"
        ],
        "summary": "GET Webhook Topic Subscription",
        "description": "Use this GET method to return subscription information for a certain `topic_id`. Possible `topic_id` values include:\n\n  * `1` - Billing tier upgrade.\n  * `2` - Billing tier downgrade.\n  * `3` - Account cancelled.\n  * `4` - Account disabled.",
        "operationId": "getWebhooksTopic",
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "description": "Identifies a webhook topic.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksSubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Technology Partners Webhooks"
        ],
        "summary": "PUT Webhook Topic Subscription",
        "description": "Use this PUT method to subscribe your application to a `topic_id` or to update the callback URI for an existing subscription. Possible `topic_id` values include:\n\n * `1` - Billing tier upgrade.\n * `2` - Billing tier downgrade.\n * `3` - Account cancelled.\n * `4` - Account disabled.\n\nAfter you subscribe your application, Constant Contact will automatically start sending POST notifications for your chosen topic to your application's callback URI. This is an example of the POST notification request body:\n\n  ```\n  {\"url\":\"https://api.cc.email/v3/partner/accounts/a07e1my9tbw0/plan\",\n  \"api_key\":\"90ed8738-5190-44a3-bc12-c172930db12c\",\n  \"event_type\":\"tier.increase\"}\n  ```\n</br>\nIf your application does not return a success response after receiving a notification, Constant Contact will retry sending the POST notification at 1 minute intervals for up to an hour.",
        "operationId": "putWebhooksTopic",
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "description": "Identifies a webhook topic.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          }
        ],
        "requestBody": {
          "description": "A JSON payload containing a callback URI. Constant Contact uses this callback URI to notify you about your chosen topic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhooksSubscriptionBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksSubscriptionPutResp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Technology Partners Webhooks"
        ],
        "summary": "DELETE Webhook Topic Subscriptions",
        "description": "Use this DELETE method to unsubscribe your application from notifications on a certain `topic_id`. Possible `topic_id` values include:\n\n * `1` - Billing tier upgrade.\n * `2` - Billing tier downgrade.\n * `3` - Account cancelled.\n * `4` - Account disabled.",
        "operationId": "deleteWebhooksSubscriptions",
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "description": "Identifies a webhook topic.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          }
        ],
        "responses": {
          "204": {
            "description": "Webhooks subscription successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      }
    },
    "/partner/webhooks/subscriptions/{topic_id}/tests": {
      "post": {
        "tags": [
          "Technology Partners Webhooks"
        ],
        "summary": "POST Test Send Webhook Notification",
        "description": "Use this POST method to validate a webhook subscription by triggering a test notification for your chosen webhook `topic_id`. Possible `topic_id` values include:\n\n * `1` - Billing tier upgrade.\n * `2` - Billing tier downgrade.\n * `3` - Account cancelled.\n * `4` - Account disabled.\n\nAfter you successfully send this request, Constant Contact will automatically send a POST notification to your chosen topic's callback URI with example data.",
        "operationId": "testSendWebhooksTopic",
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "description": "Identifies a webhook topic.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          }
        ],
        "responses": {
          "201": {
            "description": "Test notification successfully sent to your callback URI.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksTestSend"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "ctctPartnerAuthorizer": []
          },
          {
            "api_key": []
          }
        ]
      }
    },
    "/token_info": {
      "post": {
        "tags": [
          "Access Token Information"
        ],
        "summary": "Access Token Information",
        "description": "IMPORTANT NOTE: As of March 31, 2022, this POST method is being depreciated. To view the scopes associated with an access token, parse the access token (JWT) claims.\n",
        "operationId": "postAuthCode",
        "requestBody": {
          "description": "A JSON request payload containing a valid OAuth2.0 access token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
            "content": {}
          },
          "401": {
            "description": "The Access Token used is invalid.",
            "content": {}
          },
          "403": {
            "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
            "content": {}
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {}
          },
          "500": {
            "description": "There was a problem with our internal service.",
            "content": {}
          }
        },
        "security": [
          {
            "oauth2_implicit": []
          },
          {
            "oauth2_access_code": []
          },
          {
            "api_key": []
          }
        ],
        "x-codegen-request-body-name": "auth_token"
      }
    },
    "/idfed": {
      "get": {
        "summary": "V3 Authorization service endpoint for OAuth 2.0 flows",
        "description": "The authorization request is part of the OAuth 2.0 authorization process for both the server and client flows.",
        "operationId": "getAuthCode",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "Specifies the type requested from the authorization service. For server flow set to code; for client flow set to token.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code",
                "token"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The API key for the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Tells the Authorization service where to send the user once access is granted. This must be the same redirect_uri associated with your_API_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "302 response",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserPrivilegesResource": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "privilege_id": {
              "type": "integer",
              "description": "Identifies a user privilege in Constant Contact.",
              "example": 30
            },
            "privilege_name": {
              "type": "string",
              "description": "The name of the Constant Contact user privilege.",
              "example": "campaign:create",
              "enum": [
                "account:read",
                "account:update",
                "ui:campaign:metrics",
                "campaign:create",
                "campaign:read",
                "campaign:delete",
                "campaign:write",
                "campaign:send",
                "contacts:read",
                "contacts:write",
                "contacts:lists:read",
                "contacts:lists:write"
              ]
            }
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "contact_email": {
            "type": "string",
            "description": "Email addresses that are associated with the Constant Contact account owner.",
            "example": "InstaPrinz@gmail.com"
          },
          "contact_phone": {
            "maxLength": 25,
            "type": "string",
            "description": "The account owner's contact phone number (up to 25 characters in length).",
            "example": "5081111212"
          },
          "country_code": {
            "type": "string",
            "description": "The uppercase two-letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> representing the organization's country.",
            "example": "US"
          },
          "encoded_account_id": {
            "type": "string",
            "description": "The readOnly encoded account ID that uniquely identifies the account.",
            "readOnly": true,
            "example": "p07e1l8cdif9dl"
          },
          "first_name": {
            "type": "string",
            "description": "The account owner's first name.",
            "example": "Lola"
          },
          "last_name": {
            "type": "string",
            "description": "The account owner's last name.",
            "example": "Zang"
          },
          "organization_name": {
            "type": "string",
            "description": "The name of the organization that is associated with this account.",
            "example": "InstaPrinz"
          },
          "organization_phone": {
            "type": "string",
            "description": "The phone number of the organization that is associated with this account.",
            "example": "333-333-3335"
          },
          "state_code": {
            "type": "string",
            "description": "The uppercase two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's state. This property is required if the <code>country_code</code> is US (United States).",
            "example": "MA"
          },
          "time_zone_id": {
            "type": "string",
            "description": "The time zone that is automatically set based on the <code>state_code</code> setting; as defined in the IANA time-zone database (see http://www.iana.org/time-zones).",
            "example": "US/Eastern"
          },
          "website": {
            "type": "string",
            "description": "The organization's website URL.",
            "example": "http://InstaPriz4me.com"
          },
          "physical_address": {
            "required": [
              "address_line1",
              "city",
              "country_code"
            ],
            "type": "object",
            "properties": {
              "address_line1": {
                "maxLength": 80,
                "minLength": 1,
                "type": "string",
                "description": "Line 1 of the organization's street address.",
                "example": "123 Maple Street"
              },
              "address_line2": {
                "maxLength": 80,
                "minLength": 1,
                "type": "string",
                "description": "Line 2 of the organization's street address.",
                "example": "Unit 1"
              },
              "address_line3": {
                "maxLength": 80,
                "minLength": 1,
                "type": "string",
                "description": "Line 3 of the organization's street address.",
                "example": "Apartment 234"
              },
              "city": {
                "type": "string",
                "description": "The city where the organization is located.",
                "example": "Boston"
              },
              "state_code": {
                "maxLength": 2,
                "type": "string",
                "description": "The two letter ISO 3166-1 code for the organization's state and only used if the <code>country_code</code> is <code>US</code> or <code>CA</code>. If not, exclude this property from the request body.",
                "example": "MA"
              },
              "state_name": {
                "type": "string",
                "description": "Use if the state where the organization is physically located is not in the United States or Canada. If  <code>country_code</code> is  <code>US</code> or <code>CA</code>, exclude this property from the request body.",
                "example": "EXCLUDE if country_code is US."
              },
              "postal_code": {
                "type": "string",
                "description": "The postal code address (ZIP code) of the organization. This property is required if the <code>state_code</code> is <code>US</code> or <code>CA</code>, otherwise exclude this property from the request body.",
                "example": "02451"
              },
              "country_code": {
                "type": "string",
                "description": "The two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's country.",
                "example": "US"
              }
            }
          },
          "company_logo": {
            "$ref": "#/components/schemas/CompanyLogo"
          }
        }
      },
      "CompanyLogo": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The internal URL used to get the company logo image file hosted locally in your account's MyLibrary.",
            "example": "https://files.constantcontact.com/3a20c2f5701/780c1ff3-7fc6-4712-a862-ad5b6af57d38.jpg."
          },
          "external_url": {
            "type": "string",
            "description": "The external URL used to get the company logo image file that is hosted on an external website.",
            "example": "https://www.google.com/images/logos/google_logo_41.png."
          },
          "internal_id": {
            "type": "string",
            "description": "The internal ID used to identify the image hosted in your account's MyLibrary.",
            "example": "ACCOUNT.IMAGE.5"
          }
        }
      },
      "CustomerPut": {
        "type": "object",
        "properties": {
          "contact_email": {
            "type": "string",
            "description": "The confirmed email address that is associated with the account owner.",
            "example": "InstaPrinz@gmail.com"
          },
          "contact_phone": {
            "maxLength": 25,
            "type": "string",
            "description": "The account owner's contact phone number (up to 25 characters in length).",
            "example": "5081111212"
          },
          "country_code": {
            "type": "string",
            "description": "The two-letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> representing the organization's country.",
            "example": "US"
          },
          "encoded_account_id": {
            "type": "string",
            "description": "The read only encoded account ID that uniquely identifies the account.",
            "readOnly": true,
            "example": "p07e1l8cdif9dl"
          },
          "first_name": {
            "type": "string",
            "description": "The account owner's first name.",
            "example": "Lola"
          },
          "last_name": {
            "type": "string",
            "description": "The account owner's last name.",
            "example": "Zang"
          },
          "organization_name": {
            "type": "string",
            "description": "The name of the organization that is associated with this account.",
            "example": "InstaPrinz"
          },
          "organization_phone": {
            "type": "string",
            "description": "The phone number of the organization that is associated with this account.",
            "example": "333-333-3335"
          },
          "state_code": {
            "type": "string",
            "description": "The two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> used to specify the state to associate with the account. This property is required if the <code>country_code</code> is US (United States).",
            "example": "MA"
          },
          "time_zone_id": {
            "type": "string",
            "description": "The time zone to use for the account; as defined in the IANA time-zone database (see http://www.iana.org/time-zones).",
            "example": "US/Eastern"
          },
          "website": {
            "type": "string",
            "description": "The organization's website URL.",
            "example": "http://InstaPriz4me.com"
          }
        }
      },
      "AccountPhysicalAddress": {
        "required": [
          "address_line1",
          "city",
          "country_code"
        ],
        "type": "object",
        "properties": {
          "address_line1": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Line 1 of the organization's street address.",
            "example": "123 Maple Street"
          },
          "address_line2": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Line 2 of the organization's street address.",
            "example": "Unit 1"
          },
          "address_line3": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Line 3 of the organization's street address.",
            "example": "Apartment 234"
          },
          "city": {
            "type": "string",
            "description": "The city where the organization is located.",
            "example": "Boston"
          },
          "state_code": {
            "maxLength": 2,
            "type": "string",
            "description": "The two letter ISO 3166-1 code for the organization's state and only used if the <code>country_code</code> is <code>US</code> or <code>CA</code>. If not, exclude this property from the request body.",
            "example": "MA"
          },
          "state_name": {
            "type": "string",
            "description": "Use if the state where the organization is physically located is not in the United States or Canada. If  <code>country_code</code> is  <code>US</code> or <code>CA</code>, exclude this property from the request body.",
            "example": "EXCLUDE if country_code is US."
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code address (ZIP code) of the organization. This property is required if the <code>state_code</code> is <code>US</code> or <code>CA</code>, otherwise exclude this property from the request body.",
            "example": "02451"
          },
          "country_code": {
            "type": "string",
            "description": "The two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's country.",
            "example": "US"
          }
        }
      },
      "AccountEmails": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "email_address": {
              "maxLength": 80,
              "type": "string",
              "description": "An email address associated with a Constant Contact account owner."
            },
            "email_id": {
              "minimum": 1,
              "type": "integer",
              "description": "The unique ID for an email address in a Constant Contact account.",
              "format": "int64"
            },
            "confirm_status": {
              "type": "string",
              "description": "The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a <code>CONFIRMED</code> status to create an email campaign.\n",
              "enum": [
                "CONFIRMED",
                "UNCONFIRMED"
              ]
            },
            "confirm_time": {
              "type": "string",
              "description": "The date that the email address changed to <code>CONFIRMED</code> status in ISO-8601 format.",
              "format": "date-time"
            },
            "confirm_source_type": {
              "type": "string",
              "description": "Describes who confirmed the email address. Valid values are:\n  <ul>\n  <li>SITE_OWNER — The Constant Contact account owner confirmed the email address.</li>\n  <li>SUPPORT — Constant Contact support staff confirmed the email address.</li>\n  <li>FORCEVERIFY — Constant Contact confirmed the email address without sending a confirmation email.</li>\n  <li>PARTNER — A Constant Contact partner confirmed the email address.</li>\n  </ul>\n",
              "enum": [
                "SITE_OWNER",
                "SUPPORT",
                "FORCEVERIFY",
                "PARTNER"
              ]
            },
            "roles": {
              "type": "array",
              "description": "Specifies the current role of a confirmed email address in an account. Each email address can have multiple roles or no role. Possible role values are: <ul> <li>CONTACT — The contact email for the Constant Contact account owner. Each account can only have one <code>CONTACT</code> role email.</li> <li>BILLING — The billing address for the Constant Contact account. Each account can only have one <code>BILLING</code> role email.</li> <li>JOURNALING — An email address that Constant Contact forwards all sent email campaigns to as part of the partner journaling compliance feature.</li> <li>REPLY_TO — The contact email used in the email campaign signature. Each account can only have one <code>REPLY_TO</code> role email.</li> <li>OTHER — An email address that does not fit into the other categories.</li> </ul> You can use any confirmed email address in the email campaign <code>from_email</code> and <code>reply_to_email</code> headers.\n",
              "items": {
                "type": "string",
                "enum": [
                  "CONTACT",
                  "BILLING",
                  "JOURNALING",
                  "REPLY_TO",
                  "OTHER"
                ]
              }
            },
            "pending_roles": {
              "type": "array",
              "description": "The planned role for an unconfirmed email address. Possible role values are: <ul> <li>CONTACT — The contact email for the Constant Contact account owner. Each account can only have one <code>CONTACT</code> role email.</li> <li>BILLING — The billing address for the Constant Contact account. Each account can only have one <code>BILLING</code> role email.</li> <li>JOURNALING — The email address that Constant Contact forwards all sent email campaigns to as part of the partner journaling compliance feature.</li> <li>REPLY_TO — The contact email used in the email campaign signature. Each account can only have one <code>REPLY_TO</code> role email. </li> <li>OTHER — An email address that does not fit into the other categories.</li> </ul>\n",
              "items": {
                "type": "string",
                "enum": [
                  "CONTACT",
                  "BILLING",
                  "JOURNALING",
                  "REPLY_TO",
                  "OTHER"
                ]
              }
            }
          }
        }
      },
      "AccountEmailInput": {
        "type": "object",
        "properties": {
          "email_address": {
            "maxLength": 80,
            "type": "string",
            "description": "The new email address you want to add to a Constant Contact account.",
            "example": "dlang@example.com"
          }
        }
      },
      "AccountEmailCreateResponse": {
        "type": "object",
        "properties": {
          "email_address": {
            "maxLength": 80,
            "type": "string",
            "description": "An email address associated with a Constant Contact account owner.",
            "example": "dlang@example.com"
          },
          "email_id": {
            "minimum": 1,
            "type": "integer",
            "description": "The unique ID for an email address in a Constant Contact account.",
            "format": "int64",
            "example": 2
          },
          "confirm_status": {
            "type": "string",
            "description": "The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a <code>CONFIRMED</code> status to create an email campaign.\n",
            "example": "UNCONFIRMED",
            "enum": [
              "CONFIRMED",
              "UNCONFIRMED"
            ]
          }
        }
      },
      "Activities": {
        "type": "object",
        "properties": {
          "activities": {
            "type": "array",
            "description": "A list of bulk activity jobs and status submitted by the account over the past 10 days.",
            "items": {
              "type": "object",
              "properties": {
                "activity_id": {
                  "type": "string",
                  "description": "Unique ID for the activity.",
                  "format": "uuid",
                  "readOnly": true,
                  "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
                },
                "state": {
                  "type": "string",
                  "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
                  "example": "initialized",
                  "enum": [
                    "initialized",
                    "processing",
                    "completed",
                    "cancelled",
                    "failed",
                    "timed_out"
                  ]
                },
                "started_at": {
                  "type": "string",
                  "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "example": "2016-01-23T13:48:44.108Z"
                },
                "completed_at": {
                  "type": "string",
                  "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "example": "2016-01-23T13:48:44.108Z"
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "example": "2016-01-23T13:48:44.108Z"
                },
                "updated_at": {
                  "type": "string",
                  "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "example": "2016-01-23T13:48:44.108Z"
                },
                "source_file_name": {
                  "type": "string",
                  "description": "Name of the file used for an add_contacts activity.",
                  "readOnly": true,
                  "example": "2016-21-04-contact_import.xls"
                },
                "percent_done": {
                  "type": "integer",
                  "description": "Shows the percent done for an activity that we are still processing.",
                  "readOnly": true,
                  "example": 75
                },
                "activity_errors": {
                  "type": "array",
                  "description": "Array of messages describing the errors that occurred.",
                  "items": {
                    "type": "string",
                    "description": "Message describing the error condition.",
                    "readOnly": true,
                    "example": "Message describing the error condition."
                  }
                },
                "status": {
                  "$ref": "#/components/schemas/ActivityStatus"
                },
                "_links": {
                  "$ref": "#/components/schemas/ActivityStatusExportLink"
                }
              },
              "description": "Generic bulk activity status response object"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/PagingLinks"
          }
        }
      },
      "ActivityStatus": {
        "type": "object",
        "properties": {
          "items_total_count": {
            "type": "integer",
            "description": "The total number of items to be processed.",
            "readOnly": true,
            "example": 2200
          },
          "items_completed_count": {
            "type": "integer",
            "description": "The number of items processed in the activity request.",
            "readOnly": true,
            "example": 2100
          },
          "person_count": {
            "type": "integer",
            "description": "The total number of contacts in an import contacts request.",
            "readOnly": true,
            "example": 8750
          },
          "error_count": {
            "type": "integer",
            "description": "The number of non-correctable errors encountered during an import contacts request.",
            "readOnly": true,
            "example": 1
          },
          "correctable_count": {
            "type": "integer",
            "description": "The number of correctable errors. Correctable errors are: invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.",
            "example": 1
          },
          "cannot_add_to_list_count": {
            "type": "integer",
            "description": "The number of contacts that cannot be added to a list because they were previously unsubscribed, valid for contacts_file_ or json_import requests.",
            "example": 1
          },
          "list_count": {
            "type": "integer",
            "description": "The number of lists processed in an add_ or remove_list_membership activity request.",
            "readOnly": true,
            "example": 3
          }
        }
      },
      "ActivityStatusExportLink": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "example": "/v3/activities/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
              }
            },
            "description": "HATEOS-style link to the activity status (this object)."
          },
          "results": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "example": "/v3/contacts_exports/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
              }
            },
            "description": "Link to an activity result resource; as an example, for file_export, the link to the exported contacts file."
          }
        }
      },
      "PagingLinks": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "example": "/v3/activities/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the activity.",
            "format": "uuid",
            "readOnly": true,
            "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
          },
          "state": {
            "type": "string",
            "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "source_file_name": {
            "type": "string",
            "description": "Name of the file used for an add_contacts activity.",
            "readOnly": true,
            "example": "2016-21-04-contact_import.xls"
          },
          "percent_done": {
            "type": "integer",
            "description": "Shows the percent done for an activity that we are still processing.",
            "readOnly": true,
            "example": 75
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActivityStatus"
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityStatusExportLink"
          }
        },
        "description": "Generic bulk activity status response object"
      },
      "ContactsExport": {
        "type": "object",
        "properties": {
          "contact_ids": {
            "maxItems": 500,
            "type": "array",
            "description": "Exports up to 500 specific contacts. This property is mutually exclusive with <code>list_ids</code>.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          },
          "list_ids": {
            "maxItems": 50,
            "type": "array",
            "description": "Exports all of the contacts inside of up to 50 contact lists. This property is mutually exclusive with <code>contact_ids</code>.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          },
          "segment_id": {
            "type": "integer",
            "description": "Specify the <code>segment_id</code> from which you want to export all contacts that meet the specified <code>segment_criteria</code>. This property is mutually exclusive with <code>contact_ids</code> and <code>list_ids</code>. You can only specify one <code>segment_id</code>.",
            "example": 12
          },
          "fields": {
            "type": "array",
            "description": "Use this array to export specific contact fields. You must export <code>email_address</code> to successfully export <code>email_optin_source</code>, <code>email_optin_date</code>, <code>email_optout_source</code>, <code>email_optout_date</code>, or <code>email_optout_reason</code>.",
            "items": {
              "type": "string",
              "example": "email_address",
              "enum": [
                "first_name",
                "last_name",
                "contact_id",
                "email_address",
                "email_lists",
                "phone_number",
                "company_name",
                "job_title",
                "social_profiles",
                "website",
                "tag",
                "notes",
                "street",
                "street_1",
                "street_2",
                "city",
                "state",
                "intl_state",
                "zip",
                "country",
                "anniversary",
                "birthday",
                "birthday_day",
                "birthday_month",
                "source_name",
                "created_at",
                "updated_at",
                "email_optin",
                "email_permission",
                "email_update_source",
                "email_optin_source",
                "email_optin_date",
                "email_optout_date",
                "email_optout_source",
                "email_optout_reason"
              ]
            }
          },
          "status": {
            "type": "string",
            "description": "Allows you to export only contacts that have a specific status value. Possible values are <code>active</code>, <code>unsubscribed</code>, or <code>removed</code>",
            "example": "unsubscribed",
            "enum": [
              "active",
              "unsubscribed",
              "removed"
            ]
          }
        },
        "description": "You can export contact objects to a CSV file. By default, all contacts in the user's account are exported if none of the following properties are included: <br/><li> By contact_id - you can specify up to 500 specific contacts. <li>list_id - you can specify up to 50 lists. You can use the status parameter with list_id<li>status - you can export contacts by status (unsubscribed, active, removed); this property can be used with list_ids."
      },
      "ActivityExportStatus": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the activity.",
            "format": "uuid",
            "readOnly": true,
            "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
          },
          "state": {
            "type": "string",
            "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "Shows the percent done for an activity that we are still processing.",
            "readOnly": true,
            "example": 75
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "items_total_count": {
                "type": "integer",
                "description": "The total number of contacts to export.",
                "readOnly": true,
                "example": 8751
              },
              "items_completed_count": {
                "type": "integer",
                "description": "The number of contacts processed for export.",
                "readOnly": true,
                "example": 351
              }
            }
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityStatusExportLink"
          }
        },
        "description": "Activity status for contact_exports activity"
      },
      "ContactDelete": {
        "type": "object",
        "properties": {
          "contact_ids": {
            "maxItems": 500,
            "type": "array",
            "description": "Specify up to 500 contacts by <code>contact_id</code> to delete; mutually exclusive with <code>list_ids</code>.",
            "items": {
              "type": "string",
              "description": "",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          },
          "list_ids": {
            "maxItems": 50,
            "type": "array",
            "description": "The contacts on the lists (up to 50) specified will be deleted; mutually exclusive with <code>contact_ids</code>.",
            "items": {
              "type": "string",
              "description": "",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          }
        }
      },
      "ActivityDeleteStatus": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the activity.",
            "format": "uuid",
            "readOnly": true,
            "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
          },
          "state": {
            "type": "string",
            "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "Shows the percent done for an activity that we are still processing.",
            "readOnly": true,
            "example": 75
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "list_count": {
                "type": "integer",
                "description": "The number of lists if request specifies contacts to delete by list_ids.",
                "example": 4
              },
              "items_total_count": {
                "type": "integer",
                "description": "The total number of contacts to delete.",
                "readOnly": true,
                "example": 375
              },
              "items_completed_count": {
                "type": "integer",
                "description": "The number of contacts deleted.",
                "readOnly": true,
                "example": 351
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": "/v3/activities/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
                  }
                },
                "description": "Link to the activity status (this object) to retrieve the activity status."
              }
            }
          }
        },
        "description": "Activity status for contact_delete activity"
      },
      "ActivityImport": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the activity.",
            "format": "uuid",
            "readOnly": true,
            "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
          },
          "state": {
            "type": "string",
            "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:40.108Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "source_file_name": {
            "type": "string",
            "description": "Name of the file used for an file_import activity.",
            "readOnly": true,
            "example": "2016-21-04-contact_import.xls"
          },
          "percent_done": {
            "type": "integer",
            "description": "Shows the percent done for an activity that we are still processing.",
            "readOnly": true,
            "example": 75
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "items_total_count": {
                "type": "integer",
                "description": "The total number of rows in the import file.",
                "readOnly": true,
                "example": 87
              },
              "person_count": {
                "type": "integer",
                "description": "The total number of contacts in the import file.",
                "readOnly": true,
                "example": 20
              },
              "error_count": {
                "type": "integer",
                "description": "The number of non-correctable errors encountered during the file import.",
                "readOnly": true,
                "example": 1
              },
              "correctable_count": {
                "type": "integer",
                "description": "The number of correctable errors. Correctable errors are: invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.",
                "readOnly": true,
                "example": 1
              },
              "cannot_add_to_list_count": {
                "type": "integer",
                "description": "The number of previously unsubscribed contacts in the import - they cannot be added to a list.",
                "readOnly": true,
                "example": 1
              }
            }
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityStatusLink"
          }
        },
        "description": "Activity status for contacts_json_import and contacts_file_import activities"
      },
      "ActivityStatusLink": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "example": "/v3/activities/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
              }
            },
            "description": "HATEOS-style link to the activity status (this object)."
          }
        }
      },
      "ContactsJsonImport": {
        "required": [
          "import_data",
          "list_ids"
        ],
        "type": "object",
        "properties": {
          "import_data": {
            "type": "array",
            "description": "An array containing the contacts to import.",
            "items": {
              "$ref": "#/components/schemas/JsonImportContact"
            }
          },
          "list_ids": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "description": "Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact <code>list_id</code> string values.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          }
        }
      },
      "JsonImportContact": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 50,
            "type": "string",
            "description": "The email address of the contact. This method identifies each unique contact using their email address.",
            "example": "joe.jones@example.com"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Joe"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Jones"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The job title of the contact.",
            "example": "Chief Innovation Officer"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the company where the contact works.",
            "example": "RelativeGravity, Inc."
          },
          "birthday_month": {
            "type": "integer",
            "description": "The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.",
            "example": 24
          },
          "anniversary": {
            "type": "string",
            "description": "The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.\n",
            "example": "2006-11-15T00:00:00.000Z"
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "description": "The phone number for the contact.",
            "example": "555-555-5555"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Line one of the street address for the contact.",
            "example": "123 Maple Lane"
          },
          "street2": {
            "maxLength": 255,
            "type": "string",
            "description": "Line two of the street address for the contact. This value is automatically appended to the <code>street</code> value.",
            "example": "Apt. 337"
          },
          "city": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the city where the contact lives.",
            "example": "Chicago"
          },
          "state": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the state or province where the contact lives.",
            "example": "Illinois"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "The zip or postal code of the contact.",
            "example": "60609"
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the country where the contact lives.",
            "example": "United States"
          },
          "cf:custom_field_name": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with <code>cf:</code>, and the value is a custom field string value. For example, if you have a custom field named <code>first_name</code> you can use <code>\"cf:first_name\":\"Joe\"</code>. Each contact can contain up to 25 different custom fields.",
            "example": "Tesla S 2017"
          }
        }
      },
      "ListActivityRemoveContacts": {
        "required": [
          "list_ids",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "list_ids": {
                "maxItems": 50,
                "type": "array",
                "description": "Specifies which contacts to remove from your target lists as an array of up to 50 contact <code>list_id</code> values. This property is mutually exclusive with <code>contact_ids</code> and <code>all_active_contacts</code>.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "5bbf758c-d8ce-11e9-8d3a-fa163e56c9b0"
                }
              },
              "all_active_contacts": {
                "type": "boolean",
                "description": "Removes all active contacts from your targeted lists. This property is mutually exclusive with <code>contact_ids</code> and <code>list_ids</code>.",
                "example": true,
                "default": false
              },
              "contact_ids": {
                "maxItems": 500,
                "type": "array",
                "description": "Specifies which contacts to remove from your target lists as an array of <code>contact_id</code> values. This property is mutually exclusive with <code>list_ids</code> and <code>all_active_contacts</code>.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "4d88f172-21d1-11ea-b5ae-fa163e56c9b0"
                }
              }
            },
            "description": "The <code>source</code> object specifies which contacts to remove from your targeted lists using one of three mutually exclusive properties."
          },
          "list_ids": {
            "maxItems": 50,
            "type": "array",
            "description": "Specifies which lists (up to 50) to remove your source contacts from.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          }
        }
      },
      "ActivityListsMembership": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the activity.",
            "format": "uuid",
            "readOnly": true,
            "example": "86b90820-cc52-11ea-9dad-fa163e3d9194"
          },
          "state": {
            "type": "string",
            "description": "The state of the request: initialized - request has been received processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when we began processing the activity request, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when we completed processing the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when we created the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when we last updated the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "Shows the percent done for an activity that we are still processing.",
            "readOnly": true,
            "example": 75
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "items_total_count": {
                "type": "integer",
                "description": "Total number of contacts to add to or remove from lists.",
                "readOnly": true,
                "example": 2200
              },
              "items_completed_count": {
                "type": "integer",
                "description": "The number of contacts processed.",
                "readOnly": true,
                "example": 652
              },
              "list_count": {
                "type": "integer",
                "description": "The number of lists specified in the request.",
                "readOnly": true,
                "example": 3
              }
            }
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityStatusLink"
          }
        }
      },
      "ListActivityAddContacts": {
        "required": [
          "list_ids",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "list_ids": {
                "maxItems": 50,
                "type": "array",
                "description": "Specifies which contacts you are adding to lists as an array of up to 50 contact <code>list_id</code> values. This property is mutually exclusive with <code>contact_ids</code>, <code>all_active_contacts</code>, and <code>segment_id</code>.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
                }
              },
              "all_active_contacts": {
                "type": "boolean",
                "description": "Adds all active contacts to your targeted lists. This property is mutually exclusive with <code>contact_ids</code>, <code>list_ids</code>, and <code>segment_id</code>.",
                "example": true,
                "default": false
              },
              "contact_ids": {
                "maxItems": 500,
                "type": "array",
                "description": "Specifies which contacts (up to 500) you are adding to lists as an array of <code>contact_id</code> values. This property is mutually exclusive with <code>list_ids</code>, <code>all_active_contacts</code>, and <code>segment_id</code>.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
                }
              },
              "segment_id": {
                "type": "integer",
                "description": "Specifies which contacts you are adding to lists as a single <code>segment_id</code> value. This property is mutually exclusive with <code>list_ids</code>, <code>all_active_contacts</code>, and <code>contact_ids</code>.",
                "example": 12
              }
            },
            "description": "The <code>source</code> object specifies which contacts you are adding to your targeted lists using one of four mutually exclusive properties."
          },
          "list_ids": {
            "maxItems": 50,
            "type": "array",
            "description": "Specifies which lists (up to 50) you are adding your source contacts to.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
            }
          }
        }
      },
      "TagAddRemoveContacts": {
        "required": [
          "source",
          "tag_ids"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "contact_ids": {
                "maxItems": 500,
                "type": "array",
                "description": "An array of contacts IDs.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "358f6a5e-21f6-11ea-a1cb-fa163e56c9b0"
                }
              },
              "list_ids": {
                "maxItems": 50,
                "type": "array",
                "description": "An array of list IDs ( <code>list_id</code> ).",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "6eeb4756-1cf5-11ea-859f-fa163e56c9b0"
                }
              },
              "tag_ids": {
                "maxItems": 50,
                "type": "array",
                "description": "An array of tags ( <code>tag_id</code> ).",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "c6915956-fde3-4081-977e-c3b8d1b068a7"
                }
              },
              "all_active_contacts": {
                "type": "boolean",
                "description": "Use to identify contacts with an active status.",
                "example": false
              },
              "new_subscriber": {
                "type": "boolean",
                "description": "Use to identify newly subscribed contacts.",
                "example": true
              }
            },
            "description": "Select the source used to identify contacts to which a tag is added or removed. Source types are mutually exclusive."
          },
          "exclude": {
            "type": "object",
            "properties": {
              "contact_ids": {
                "type": "array",
                "description": "Identifies the contacts, by <code>contact_id</code>, to exclude from the add or remove tags activity.",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "example": "c7172ca0-f353-11e8-aff2-fa163e56c9b0"
                }
              }
            },
            "description": "Use to exclude specified contacts from being added or removed from a tag. Only applicable if the specified source is either <code>all_active_contacts</code> or <code>list_ids</code>."
          },
          "tag_ids": {
            "maxItems": 50,
            "type": "array",
            "description": "An array of tags (<code>tag_id</code>) to add to all contacts meeting the specified source criteria.",
            "items": {
              "type": "string",
              "description": "A list of tags to which contacts are added or removed.",
              "format": "uuid",
              "example": "5bbf758c-d8ce-11e9-8d3a-fa163e56c9b0"
            }
          }
        }
      },
      "ActivityTagging": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "The system assigned UUID that uniquely identifies an activity.",
            "readOnly": true,
            "example": "af86135c-8740-11eb-8abf-fa163ef30864"
          },
          "state": {
            "type": "string",
            "description": "The activity processing state.",
            "readOnly": true,
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Timestamp showing when processing started for the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-12-12T15:38:24.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp showing when processing completed for the activity, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-12-12T15:38:24.000Z"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp showing when the activity was first requested, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-12-12T15:38:24.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp showing when the activity was last updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-12-12T15:38:24.000Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "The processing percent complete for the activity.",
            "readOnly": true,
            "example": 25
          },
          "activity_errors": {
            "type": "array",
            "description": "An array of error message strings describing the errors that occurred.",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActivityTaggingStatus"
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityLinks"
          }
        }
      },
      "ActivityTaggingStatus": {
        "type": "object",
        "properties": {
          "items_total_count": {
            "type": "integer",
            "description": "The total number of items processed for the requested activity.",
            "example": 100
          },
          "items_completed_count": {
            "type": "integer",
            "description": "The total number of items for which processing completed for the requested activity.",
            "example": 25
          }
        },
        "description": "Provides the status for the requested activity."
      },
      "ActivityLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string"
              }
            }
          },
          "results": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "description": "Use this link to view activity results."
              }
            }
          }
        }
      },
      "TagIdList500Limit": {
        "required": [
          "tag_ids"
        ],
        "type": "object",
        "properties": {
          "tag_ids": {
            "maxItems": 500,
            "type": "array",
            "description": "The tag IDs (<code>tag_ids</code>) to delete.",
            "items": {
              "type": "string",
              "description": "A list of tag_ids. Mutually exclusive with other filters and criteria.",
              "format": "uuid",
              "example": "00e4429c-3beb-11eb-9f34-fa163e56c9b9"
            }
          }
        }
      },
      "SegmentsDTO": {
        "required": [
          "segments"
        ],
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "Lists all segments for the account.",
            "items": {
              "$ref": "#/components/schemas/SegmentMaster"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "SegmentMaster": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The segment's unique descriptive name.",
            "example": "Re-engage contacts who did not open the last 5 campaigns."
          },
          "segment_id": {
            "type": "integer",
            "description": "The system generated number that uniquely identifies the segment.",
            "format": "int32",
            "readOnly": true,
            "example": 14
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time that the segment was created (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          },
          "edited_at": {
            "type": "string",
            "description": "The system generated date and time that the segment's <code>name</code> or <code>segment_criteria</code> was last updated (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          }
        }
      },
      "Links": {
        "required": [
          "next"
        ],
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Next"
          }
        }
      },
      "Next": {
        "type": "object"
      },
      "SegmentData": {
        "required": [
          "name",
          "segment_criteria"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The segment's unique descriptive name.",
            "example": "Re-engage contacts who did not open the last 5 email campaign activities."
          },
          "segment_criteria": {
            "maxLength": 20000,
            "type": "string",
            "description": "The <code>segment_criteria</code> specifies the contact data that Constant Contact uses to evaluate and identify contacts that meet your criteria. The <code>segment_criteria</code> must be formatted as single-string escaped JSON. The top-level <code>group</code> <code>type</code> must be <code>add</code>.",
            "example": "{\"version\":\"1.0.0\",\"criteria\":{\"type\":\"and\",\"group\":[{\"source\":\"tracking\",\"field\":\"not_opened\",\"op\":\"contains-any\",\"const_value\":\"last-n-campaigns\",\"param\":\"5\"}]}}"
          }
        }
      },
      "SegmentDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The segment's unique descriptive name.",
            "example": "Re-engage contacts who did not open the last 5 email campaign activities."
          },
          "segment_criteria": {
            "maxLength": 20000,
            "type": "string",
            "description": "The segment's contact selection criteria formatted as single-string escaped JSON.",
            "example": "{\"version\":\"1.0.0\",\"criteria\":{\"type\":\"and\",\"group\":[{\"source\":\"tracking\",\"field\":\"not_opened\",\"op\":\"contains-any\",\"const_value\":\"last-n-campaigns\",\"param\":\"5\"}]}}"
          },
          "segment_id": {
            "type": "integer",
            "description": "The system generated number that uniquely identifies the segment.",
            "format": "int32",
            "readOnly": true,
            "example": 14
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time (ISO-8601) that the segment was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          },
          "edited_at": {
            "type": "string",
            "description": "The system generated date and time (ISO-8601) that the segment's <code>name</code> or <code> segment_criteria</code> was last updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          }
        }
      },
      "SegmentName": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The segment's unique descriptive name.",
            "example": "Contacts who did not open any email campaign within the last 100 days."
          }
        }
      },
      "ContactResource": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "Unique ID for each contact resource",
            "format": "uuid",
            "readOnly": true,
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "email_address": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Debora"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Lang"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The job title of the contact.",
            "example": "Musician"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the company where the contact works.",
            "example": "Acme Corp."
          },
          "birthday_month": {
            "type": "integer",
            "description": "The month value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_month</code>.",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "The day value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_day</code>.",
            "example": 24
          },
          "anniversary": {
            "maxLength": 10,
            "type": "string",
            "description": "The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.",
            "example": "2006-11-15T00:00:00.000Z"
          },
          "update_source": {
            "type": "string",
            "description": "Identifies who last updated the contact; valid values are Contact or Account",
            "example": "Contact",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "create_source": {
            "type": "string",
            "description": "Describes who added the contact; valid values are <code>Contact</code> or <code>Account</code>. Your integration must accurately identify <code>create_source</code> for compliance reasons; value is set when contact is created.",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "System generated date and time that the resource was created, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "System generated date and time that the contact was last updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "For deleted contacts (<code>email_address</code> contains <code>opt_out_source</code> and <code>opt_out_date</code>), shows the date of deletion.",
            "format": "date",
            "readOnly": true,
            "example": "2016-07-08T00:00:00.000Z"
          },
          "custom_fields": {
            "maxItems": 25,
            "type": "array",
            "description": "Array of up to 25 <code>custom_field</code> key value pairs.",
            "items": {
              "$ref": "#/components/schemas/ContactCustomField"
            }
          },
          "phone_numbers": {
            "maxItems": 2,
            "type": "array",
            "description": "Array of phone_numbers subresources. A contact can have up to 2 phone numbers.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "street_addresses": {
            "maxItems": 1,
            "type": "array",
            "description": "Array of street_addresses subresources. A contact can have 1 street address.",
            "items": {
              "$ref": "#/components/schemas/StreetAddress"
            }
          },
          "list_memberships": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of list_id's to which the contact is subscribed, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a list to which the contact is subscribed, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "5bc0ed68-d8ce-11e9-8d3a-fa163e56c9b0"
            }
          },
          "taggings": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a tag assigned to the contact, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "e7ddac60-51da-11eb-b3a4-fa163e6b01c1"
            }
          },
          "notes": {
            "maxItems": 150,
            "type": "array",
            "description": "An array of up to 150 notes about the contact.",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        },
        "description": "Use this endpoint to retrieve (GET), update (PUT), or DELETE an existing contact resource specified using the <code>contact_id</code> path parameter."
      },
      "EmailAddress": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 80,
            "type": "string",
            "description": "The email address of the contact. The email address must be unique for each contact.",
            "example": "dlang@example.com"
          },
          "permission_to_send": {
            "type": "string",
            "description": "Identifies the type of permission that the Constant Contact account has to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.",
            "example": "implicit",
            "enum": [
              "implicit",
              "explicit",
              "pending_confirmation",
              "unsubscribed",
              "temp_hold",
              "not_set"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the email_address was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the email_address was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          },
          "opt_in_source": {
            "type": "string",
            "description": "Describes who opted-in the email_address; valid values are Contact or Account. Your integration must accurately identify <code>opt_in_source</code> for compliance reasons; value is set on POST, and is read-only going forward.",
            "example": "Contact",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "opt_in_date": {
            "type": "string",
            "description": "Date and time that the email_address was opted-in to receive email from the account, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "opt_out_source": {
            "type": "string",
            "description": "Describes the source of the unsubscribed/opt-out action: either Account or Contact. If the Contact opted-out, then the account cannot send any campaigns to this contact until the contact opts back in. If the Account, then the account can add the contact back to any lists and send to them. Displayed only if contact has been unsubscribed/opt-out.",
            "readOnly": true,
            "example": "Contact",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "opt_out_date": {
            "type": "string",
            "description": "Date and time that the contact unsubscribed/opted-out of receiving email from the account, in ISO-8601 format. Displayed only if contact has been unsubscribed/opt-out. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "opt_out_reason": {
            "maxLength": 255,
            "type": "string",
            "description": "The reason, as provided by the contact, that they unsubscribed/opted-out of receiving email campaigns.",
            "example": "I am no longer interested in this service."
          },
          "confirm_status": {
            "type": "string",
            "description": "Indicates if the contact confirmed their email address after they subscribed to receive emails. Possible values: pending, confirmed, off.",
            "readOnly": true,
            "example": "confirmed",
            "enum": [
              "pending",
              "confirmed",
              "off"
            ]
          }
        },
        "description": "A contact subresource describing the contact's email_address."
      },
      "ContactCustomField": {
        "required": [
          "custom_field_id",
          "value"
        ],
        "type": "object",
        "properties": {
          "custom_field_id": {
            "type": "string",
            "description": "The custom_field's unique ID",
            "format": "uuid",
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "The custom_field value.",
            "example": "Tesla S 2017"
          }
        },
        "description": "Custom fields allow Constant Contact users to add custom content to a contact that can be used to personalize emails in addition to the standard set of variables available for email personalization."
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "phone_number_id": {
            "type": "string",
            "description": "Unique ID for the phone number",
            "format": "uuid",
            "readOnly": true,
            "example": "6eec28a6-1cf5-11ea-859f-fa163e56c9b0"
          },
          "phone_number": {
            "maxLength": 25,
            "type": "string",
            "description": "The contact's phone number, 1 of 2 allowed per contact, no more than 25 characters",
            "example": "+1-555-555-5555"
          },
          "kind": {
            "type": "string",
            "description": "Describes the type of phone number; valid values are home, work, mobile, or other.",
            "example": "home",
            "enum": [
              "home",
              "work",
              "mobile",
              "other"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the street address was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the phone_number was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          },
          "update_source": {
            "type": "string",
            "description": "Identifies who last updated the phone_number; valid values are Contact or Account",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "create_source": {
            "type": "string",
            "description": "Describes who added the phone_number; valid values are Contact or Account.",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          }
        }
      },
      "StreetAddress": {
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "street_address_id": {
            "type": "string",
            "description": "Unique ID for the street address",
            "format": "uuid",
            "readOnly": true,
            "example": "977a9a2e-3e00-11ea-804b-fa163e56c9b0"
          },
          "kind": {
            "type": "string",
            "description": "Describes the type of address; valid values are home, work, or other.",
            "example": "home",
            "enum": [
              "home",
              "work",
              "other"
            ]
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Number and street of the address.",
            "example": "123 Kashmir Valley Road"
          },
          "city": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the city where the contact lives.",
            "example": "Chicago"
          },
          "state": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the state or province where the contact lives.",
            "example": "Illinois"
          },
          "postal_code": {
            "maxLength": 50,
            "type": "string",
            "description": "The zip or postal code of the contact.",
            "example": "60609"
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the country where the contact lives.",
            "example": "United States"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the street address was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the street address was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "note_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the note (UUID format).",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "created_at": {
            "type": "string",
            "description": "The date that the note was created.",
            "format": "date-time",
            "example": "2021-05-12T13:48:44.108Z"
          },
          "content": {
            "maxLength": 2000,
            "type": "string",
            "description": "The content for the note.",
            "example": "This contact resubscribed on 2021-05-12."
          }
        },
        "description": "A note about the contact."
      },
      "ContactPutRequest": {
        "required": [
          "update_source"
        ],
        "type": "object",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/EmailAddressPut"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The contact's first name",
            "example": "Debora"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The contact's last name",
            "example": "Lang"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The contact's job title",
            "example": "Musician"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "Name of the company the contact works for.",
            "example": "Acme Corp."
          },
          "birthday_month": {
            "type": "integer",
            "description": "Accepts values from 1-12; must be used with <code>birthday_day</code>",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "Accepts values from 1-31; must be used with <code>birthday_month</code>",
            "example": 24
          },
          "anniversary": {
            "maxLength": 10,
            "type": "string",
            "description": "The anniversary date; Accepted formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D, MM-DD-YYYY, M-D-YYYY",
            "example": "2006-11-15T00:00:00.000Z"
          },
          "update_source": {
            "type": "string",
            "description": "Identifies who last updated the contact; valid values are <code>Contact</code> or <code>Account</code>.",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "custom_fields": {
            "maxItems": 25,
            "type": "array",
            "description": "Array of up to 25 custom_field subresources.",
            "items": {
              "$ref": "#/components/schemas/ContactCustomField"
            }
          },
          "phone_numbers": {
            "maxItems": 2,
            "type": "array",
            "description": "Array of up to 2 phone_numbers subresources.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberPut"
            }
          },
          "street_addresses": {
            "type": "array",
            "description": "Array of street_addresses subresources. A contact can have 1 street address.",
            "items": {
              "$ref": "#/components/schemas/StreetAddressPut"
            }
          },
          "list_memberships": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of up to 50 <code>list_ids</code> to which the contact is subscribed.",
            "items": {
              "type": "string",
              "description": "Unique list ID to which the contact is subscribed.",
              "format": "uuid",
              "readOnly": true,
              "example": "07936f78-662a-11eb-af0a-fa163e56c9b0"
            }
          },
          "taggings": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a tag assigned to the contact, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "e7ddac60-51da-11eb-b3a4-fa163e6b01c1"
            }
          },
          "notes": {
            "maxItems": 150,
            "type": "array",
            "description": "An array of notes about the contact listed by most recent note first.",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "EmailAddressPut": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 80,
            "type": "string",
            "description": "The email address of the contact. The email address must be unique for each contact.",
            "example": "dlang@example.com"
          },
          "permission_to_send": {
            "type": "string",
            "description": "Identifies the type of permission that the Constant Contact account has to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.",
            "example": "implicit",
            "enum": [
              "implicit",
              "explicit",
              "pending_confirmation",
              "unsubscribed",
              "temp_hold",
              "not_set"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the email_address was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the email_address was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          },
          "opt_in_date": {
            "type": "string",
            "description": "Date and time that the email_address was opted-in to receive email from the account, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "opt_out_source": {
            "type": "string",
            "description": "Describes the source of the unsubscribed/opt-out action: either Account or Contact. If the Contact opted-out, then the account cannot send any campaigns to this contact until the contact opts back in. If the Account, then the account can add the contact back to any lists and send to them. Displayed only if contact has been unsubscribed/opt-out.",
            "readOnly": true,
            "example": "Contact",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "opt_out_date": {
            "type": "string",
            "description": "Date and time that the contact unsubscribed/opted-out of receiving email from the account, in ISO-8601 format. Displayed only if contact has been unsubscribed/opt-out. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "opt_out_reason": {
            "maxLength": 255,
            "type": "string",
            "description": "The reason, as provided by the contact, that they unsubscribed/opted-out of receiving email campaigns.",
            "example": "I am no longer interested in this service."
          },
          "confirm_status": {
            "type": "string",
            "description": "Indicates if the contact confirmed their email address after they subscribed to receive emails. Possible values: pending, confirmed, off.",
            "readOnly": true,
            "example": "confirmed",
            "enum": [
              "pending",
              "confirmed",
              "off"
            ]
          }
        },
        "description": "The contact's email address and related properties."
      },
      "PhoneNumberPut": {
        "type": "object",
        "properties": {
          "phone_number": {
            "maxLength": 25,
            "type": "string",
            "description": "The contact's phone number, 1 of 2 allowed per contact, no more than 25 characters",
            "example": "+1-555-555-5555"
          },
          "kind": {
            "type": "string",
            "description": "Describes the type of phone number; valid values are home, work, mobile, or other.",
            "example": "home",
            "enum": [
              "home",
              "work",
              "mobile",
              "other"
            ]
          }
        }
      },
      "StreetAddressPut": {
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Describes the type of address; valid values are home, work, or other.",
            "example": "home",
            "enum": [
              "home",
              "work",
              "other"
            ]
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Number and street of the address.",
            "example": "123 Kashmir Valley Road"
          },
          "city": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the city where the contact lives.",
            "example": "Chicago"
          },
          "state": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the state or province where the contact lives.",
            "example": "Illinois"
          },
          "postal_code": {
            "maxLength": 50,
            "type": "string",
            "description": "The zip or postal code of the contact.",
            "example": "60609"
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the country where the contact lives.",
            "example": "United States"
          }
        }
      },
      "Contacts": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactResource_2"
            }
          },
          "contacts_count": {
            "type": "integer",
            "description": "Total number of contacts in the response.",
            "example": 3249
          },
          "_links": {
            "$ref": "#/components/schemas/PagingLinks"
          },
          "status": {
            "type": "string",
            "description": "If you use the <code>segment_id</code> query parameter to filter results based on a segment, this property indicates that the V3 API accepted your request and is still processing it.",
            "enum": [
              "processing"
            ]
          }
        },
        "description": "Use this endpoint to retrieve (GET) a collection of existing contacts, or to create (POST) a new contact."
      },
      "ContactResource_2": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "Unique ID for each contact resource",
            "format": "uuid",
            "readOnly": true,
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "email_address": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Debora"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Lang"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The job title of the contact.",
            "example": "Musician"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the company where the contact works.",
            "example": "Acme Corp."
          },
          "birthday_month": {
            "type": "integer",
            "description": "The month value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_month</code>.",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "The day value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_day</code>.",
            "example": 24
          },
          "anniversary": {
            "maxLength": 10,
            "type": "string",
            "description": "The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.",
            "example": "2006-11-15T00:00:00.000Z"
          },
          "update_source": {
            "type": "string",
            "description": "Identifies who last updated the contact; valid values are Contact or Account",
            "example": "Contact",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "create_source": {
            "type": "string",
            "description": "Describes who added the contact; valid values are <code>Contact</code> or <code>Account</code>. Your integration must accurately identify <code>create_source</code> for compliance reasons; value is set when contact is created.",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "System generated date and time that the resource was created, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "System generated date and time that the contact was last updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "For deleted contacts (<code>email_address</code> contains <code>opt_out_source</code> and <code>opt_out_date</code>), shows the date of deletion.",
            "format": "date",
            "readOnly": true,
            "example": "2016-07-08T00:00:00.000Z"
          },
          "custom_fields": {
            "maxItems": 25,
            "type": "array",
            "description": "Array of up to 25 <code>custom_field</code> key value pairs.",
            "items": {
              "$ref": "#/components/schemas/ContactCustomField"
            }
          },
          "phone_numbers": {
            "maxItems": 2,
            "type": "array",
            "description": "Array of phone_numbers subresources. A contact can have up to 2 phone numbers.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "street_addresses": {
            "maxItems": 1,
            "type": "array",
            "description": "Array of street_addresses subresources. A contact can have 1 street address.",
            "items": {
              "$ref": "#/components/schemas/StreetAddress"
            }
          },
          "list_memberships": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of list_id's to which the contact is subscribed, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a list to which the contact is subscribed, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "5bc0ed68-d8ce-11e9-8d3a-fa163e56c9b0"
            }
          },
          "taggings": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a tag assigned to the contact, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "e7ddac60-51da-11eb-b3a4-fa163e6b01c1"
            }
          },
          "notes": {
            "maxItems": 150,
            "type": "array",
            "description": "An array of up to 150 notes about the contact.",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        },
        "description": "Use this endpoint to retrieve (GET), update (PUT), or DELETE an existing contact resource specified using the <code>contact_id</code> path parameter."
      },
      "ContactPostRequest": {
        "type": "object",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/EmailAddressPost"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Debora"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Lang"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The job title of the contact.",
            "example": "Musician"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the company where the contact works.",
            "example": "Acme Corp."
          },
          "create_source": {
            "type": "string",
            "description": "Describes who added the contact; valid values are <code>Contact</code> or <code>Account</code>. Your integration must accurately identify <code>create_source</code> for compliance reasons; value is set on POST, and is read-only going forward.",
            "example": "Account",
            "enum": [
              "Account",
              "Contact"
            ]
          },
          "birthday_month": {
            "type": "integer",
            "description": "The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.",
            "example": 24
          },
          "anniversary": {
            "maxLength": 10,
            "type": "string",
            "description": "The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.",
            "example": "2006-11-15T00:00:00.000Z"
          },
          "custom_fields": {
            "maxItems": 25,
            "type": "array",
            "description": "Array of up to 25 <code>custom_field</code> key value pairs.",
            "items": {
              "$ref": "#/components/schemas/ContactCustomField"
            }
          },
          "phone_numbers": {
            "maxItems": 2,
            "type": "array",
            "description": "Array of up to 2 phone_numbers subresources.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberPut"
            }
          },
          "street_addresses": {
            "type": "array",
            "description": "Array of street_addresses subresources. A contact can have 1 street address.",
            "items": {
              "$ref": "#/components/schemas/StreetAddressPut"
            }
          },
          "list_memberships": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of list_id's to which the contact is being subscribed, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a list to which the contact is subscribed, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "07936f78-662a-11eb-af0a-fa163e56c9b0"
            }
          },
          "taggings": {
            "maxItems": 50,
            "type": "array",
            "description": "Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.",
            "items": {
              "type": "string",
              "description": "Unique ID of a tag assigned to the contact, up to a maximum of 50.",
              "format": "uuid",
              "readOnly": true,
              "example": "00e4429c-3beb-11eb-9f34-fa163e56c9b9"
            }
          },
          "notes": {
            "maxItems": 150,
            "type": "array",
            "description": "An array of notes about the contact.",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "EmailAddressPost": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 80,
            "type": "string",
            "description": "The contact's email address",
            "example": "dlang@example.com"
          },
          "permission_to_send": {
            "type": "string",
            "description": "Identifies the type of permission that the Constant Contact account has been granted to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.",
            "example": "implicit",
            "enum": [
              "implicit",
              "explicit",
              "pending_confirmation",
              "unsubscribed",
              "temp_hold",
              "not_set"
            ]
          }
        },
        "description": "The contact's email address and related properties."
      },
      "ContactCreateOrUpdateInput": {
        "required": [
          "email_address",
          "list_memberships"
        ],
        "type": "object",
        "properties": {
          "email_address": {
            "maxLength": 50,
            "type": "string",
            "description": "The email address for the contact. This method identifies each unique contact using their email address. If the email address exists in the account, this method updates the contact. If the email address is new, this method creates a new contact.",
            "example": "jdodge@example.com"
          },
          "first_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Jake"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Dodge"
          },
          "job_title": {
            "maxLength": 50,
            "type": "string",
            "description": "The job title of the contact.",
            "example": "Musician"
          },
          "company_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the company where the contact works.",
            "example": "Acme Corp."
          },
          "phone_number": {
            "maxLength": 25,
            "type": "string",
            "description": "The phone number for the contact.",
            "example": "(555) 555-1212"
          },
          "list_memberships": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "description": "The contact lists you want to add the contact to as an array of up to 50 contact <code>list_id</code> values. You must include at least one <code>list_id</code>.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "07936f78-662a-11eb-af0a-fa163e56c9b0"
            }
          },
          "custom_fields": {
            "maxItems": 50,
            "type": "array",
            "description": "The custom fields you want to add to the contact as an array of up to 50 custom field objects.",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdateContactCustomField"
            }
          },
          "anniversary": {
            "type": "string",
            "description": "The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.\n",
            "example": "11-15-2006"
          },
          "birthday_month": {
            "type": "integer",
            "description": "The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.",
            "example": 11
          },
          "birthday_day": {
            "type": "integer",
            "description": "The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.",
            "example": 24
          },
          "street_address": {
            "required": [
              "kind"
            ],
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "description": "The type of street address for the contact. Valid values are home, work, or other.",
                "example": "home",
                "enum": [
                  "home",
                  "work",
                  "other"
                ]
              },
              "street": {
                "maxLength": 255,
                "type": "string",
                "description": "The number and street of the contact's address.",
                "example": "1601 Trapelo Rd"
              },
              "city": {
                "maxLength": 50,
                "type": "string",
                "description": "The name of the city for the contact's address.",
                "example": "Waltham"
              },
              "state": {
                "maxLength": 50,
                "type": "string",
                "description": "The name of the state or province for the contact's address.",
                "example": "Massachusetts"
              },
              "postal_code": {
                "maxLength": 50,
                "type": "string",
                "description": "The zip or postal code for the contact's address.",
                "example": "02451"
              },
              "country": {
                "maxLength": 50,
                "type": "string",
                "description": "The name of the country for the contact's address.",
                "example": "United States"
              }
            }
          }
        }
      },
      "CreateOrUpdateContactCustomField": {
        "type": "object",
        "properties": {
          "custom_field_id": {
            "type": "string",
            "description": "The unique ID for the <code>custom_field</code>.",
            "format": "uuid",
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "description": "The value of the <code>custom_field</code>.",
            "example": "Tesla S 2017"
          }
        }
      },
      "ContactCreateOrUpdateResponse": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The unique identifier for the contact that the V3 API created or updated.",
            "format": "uuid",
            "example": "ab7ab702-b935-11e9-8a58-fa163e6b01c1"
          },
          "action": {
            "type": "string",
            "description": "Identifies if the V3 API created a new contact or updated an existing contact.",
            "enum": [
              "created",
              "updated"
            ]
          }
        }
      },
      "ContactXrefs": {
        "type": "object",
        "properties": {
          "xrefs": {
            "maxItems": 500,
            "type": "array",
            "description": "An array of cross-referenced V3 API <code>contact_id</code> and V2 API <code>sequence_id</code> values. Response is sorted ascending by <code>sequence_id</code>.",
            "items": {
              "$ref": "#/components/schemas/ContactXref"
            }
          }
        }
      },
      "ContactXref": {
        "type": "object",
        "properties": {
          "sequence_id": {
            "type": "string",
            "description": "The V2 API contact unique identifier",
            "example": "0016633325"
          },
          "contact_id": {
            "type": "string",
            "description": "The V3 API contact unique identifier",
            "format": "uuid",
            "example": "ab7ab702-b935-11e9-8a58-fa163e6b01c1"
          }
        },
        "description": "The cross-referenced pair of V3 API <code>list_id</code> and V2 API <code>sequence_id</code> for a list. Response is sorted ascending by <code>sequence_id</code>."
      },
      "CustomFieldResource": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "custom_field_id": {
            "type": "string",
            "description": "The custom_field's unique ID",
            "format": "uuid",
            "readOnly": true,
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "label": {
            "maxLength": 50,
            "type": "string",
            "description": "The display name for the custom_field shown in the UI as free-form text",
            "example": "Vehicle make and model year"
          },
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Unique name for the custom_field constructed from the label by replacing blanks with underscores.",
            "readOnly": true,
            "example": "Vehicle_make_and_model_year"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of value the custom_field field accepts: string or date.",
            "example": "string",
            "enum": [
              "date",
              "string"
            ]
          },
          "updated_at": {
            "type": "string",
            "description": "System generated date and time that the resource was updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the resource was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          }
        },
        "description": "Custom fields allow Constant Contact users to add custom content to a contact that can be used to personalize emails in addition to the standard set of variables available for email personalization."
      },
      "CustomFieldInput": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 50,
            "type": "string",
            "description": "The display name for the custom_field shown in the UI as free-form text",
            "example": "Vehicle make and model year"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of value the custom_field field accepts: string or date.",
            "example": "string",
            "enum": [
              "string",
              "date"
            ]
          }
        }
      },
      "CustomFields": {
        "type": "object",
        "properties": {
          "custom_fields": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldResource_2"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/PagingLinks"
          }
        },
        "description": "Use this endpoint to retrieve (GET) all custom_fields in the user's account, or to create (POST) a new custom_field."
      },
      "CustomFieldResource_2": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "custom_field_id": {
            "type": "string",
            "description": "The custom_field's unique ID",
            "format": "uuid",
            "readOnly": true,
            "example": "1618ae62-4752-11e9-9c8a-fa163e6b01c1"
          },
          "label": {
            "maxLength": 50,
            "type": "string",
            "description": "The display name for the custom_field shown in the UI as free-form text",
            "example": "Vehicle make and model year"
          },
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Unique name for the custom_field constructed from the label by replacing blanks with underscores.",
            "readOnly": true,
            "example": "Vehicle_make_and_model_year"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of value the custom_field field accepts: string or date.",
            "example": "string",
            "enum": [
              "date",
              "string"
            ]
          },
          "updated_at": {
            "type": "string",
            "description": "System generated date and time that the resource was updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the resource was created, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:53:04.000Z"
          }
        },
        "description": "Custom fields allow Constant Contact users to add custom content to a contact that can be used to personalize emails in addition to the standard set of variables available for email personalization."
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "list_id": {
            "type": "string",
            "description": "Unique ID for the contact list",
            "format": "uuid",
            "readOnly": true,
            "example": "06526938-56dd-11e9-932a-fa163ea075fa"
          },
          "name": {
            "type": "string",
            "description": "The name given to the contact list",
            "example": "Multiple purchases"
          },
          "description": {
            "type": "string",
            "description": "Text describing the list.",
            "example": "List of repeat customers."
          },
          "favorite": {
            "type": "boolean",
            "description": "Identifies whether or not the account has favorited the contact list.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "System generated date and time that the resource was created, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the list was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          },
          "membership_count": {
            "type": "integer",
            "description": "The number of contacts in the contact list.",
            "readOnly": true,
            "example": 327
          }
        }
      },
      "ListInput": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "The name given to the contact list",
            "example": "Multiple purchases"
          },
          "favorite": {
            "type": "boolean",
            "description": "Identifies whether or not the account has favorited the contact list.",
            "example": true,
            "default": false
          },
          "description": {
            "type": "string",
            "description": "Text describing the list.",
            "example": "List of repeat customers"
          }
        }
      },
      "ActivityDeleteListResponse": {
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "Unique ID for the delete list batch job",
            "format": "uuid"
          },
          "state": {
            "type": "string",
            "description": "The state of the delete list request: processing - request is being processed completed - job completed cancelled - request was cancelled failed - job failed to complete timed_out - the request timed out before completing",
            "example": "initialized",
            "enum": [
              "initialized",
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date and time that the request was received, in ISO-8601 formmat.",
            "format": "date-time",
            "example": "2016-03-03T15:53:04.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the request status was updated, in ISO-8601 format.",
            "format": "date-time",
            "example": "2016-03-03T15:56:29.000Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "Job completion percentage",
            "example": 1
          },
          "activity_errors": {
            "type": "array",
            "description": "Array of messages describing the errors that occurred.",
            "items": {
              "type": "string",
              "description": "Message describing the error condition.",
              "readOnly": true,
              "example": "Message describing the error condition."
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": "/v3/activities/04fa57a7-cf55-4185-cc1a-58ed29bf0a6a"
                  }
                },
                "description": "Link to the activity status to use in tracking the request status."
              }
            }
          }
        }
      },
      "ContactListArray": {
        "type": "object",
        "properties": {
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactList_2"
            }
          },
          "lists_count": {
            "type": "integer",
            "description": "The total number of contact lists.",
            "example": 249
          },
          "_links": {
            "$ref": "#/components/schemas/PagingLinks"
          }
        }
      },
      "ContactList_2": {
        "type": "object",
        "properties": {
          "list_id": {
            "type": "string",
            "description": "Unique ID for the contact list",
            "format": "uuid",
            "readOnly": true,
            "example": "06526938-56dd-11e9-932a-fa163ea075fa"
          },
          "name": {
            "type": "string",
            "description": "The name given to the contact list",
            "example": "Multiple purchases"
          },
          "description": {
            "type": "string",
            "description": "Text describing the list.",
            "example": "List of repeat customers."
          },
          "favorite": {
            "type": "boolean",
            "description": "Identifies whether or not the account has favorited the contact list.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "System generated date and time that the resource was created, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time that the list was last updated, in ISO-8601 format. System generated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-03-03T15:56:29.000Z"
          },
          "membership_count": {
            "type": "integer",
            "description": "The number of contacts in the contact list.",
            "readOnly": true,
            "example": 327
          }
        }
      },
      "ListXrefs": {
        "type": "object",
        "properties": {
          "xrefs": {
            "maxItems": 500,
            "type": "array",
            "description": "An array of cross-referenced V3 API <code>list_id</code> and V2 API <code>sequence_id</code> properties. Response is sorted ascending by <code>sequence_id</code>.",
            "items": {
              "$ref": "#/components/schemas/ListXref"
            }
          }
        }
      },
      "ListXref": {
        "type": "object",
        "properties": {
          "sequence_id": {
            "type": "string",
            "description": "The V2 API list unique identifier",
            "example": "0016633325"
          },
          "list_id": {
            "type": "string",
            "description": "The V3 API list unique identifier",
            "format": "uuid",
            "example": "71600990-908b-11e6-907f-1200166bff25"
          }
        },
        "description": "The cross-referenced pair of V3 API <code>list_id</code> and V2 API <code>sequence_id</code> for a list. Response is sorted ascending by <code>sequence_id</code>."
      },
      "Tag": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a tag (UUID format)",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "The unique tag name.",
            "example": "Gold card member"
          },
          "contacts_count": {
            "type": "integer",
            "description": "The total number of contacts who are assigned this tag.",
            "readOnly": true,
            "example": 325
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time when the tag was created (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The system generated date and time when the tag was last updated (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "tag_source": {
            "type": "string",
            "description": "The source used to tag contacts.",
            "readOnly": true,
            "example": "ESTY"
          }
        }
      },
      "TagPut": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new tag name to use. The tag name must be unique.",
            "example": "Bronze card member"
          }
        }
      },
      "ActivityGeneric": {
        "required": [
          "activity_id",
          "state"
        ],
        "type": "object",
        "properties": {
          "activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the activity.",
            "example": "d44ac96c-24f3-11eb-8ae8-fa163e595123"
          },
          "state": {
            "type": "string",
            "description": "The processing state for the activity.",
            "example": "completed",
            "enum": [
              "processing",
              "completed",
              "cancelled",
              "failed",
              "timed_out"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time that the resource was created, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The system generated date and time that the resource was last updated, in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "percent_done": {
            "type": "integer",
            "description": "The percentage complete for the specified activity.",
            "readOnly": true,
            "example": 25
          },
          "activity_errors": {
            "type": "array",
            "description": "An array of error messages if errors occurred for a specified activity. The system returns an empty array if no errors occur.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ActivityErrors"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ActivityGenericStatus"
          },
          "_links": {
            "$ref": "#/components/schemas/ActivityLinks_2"
          }
        }
      },
      "ActivityErrors": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message describing the error condition.",
            "readOnly": true
          }
        }
      },
      "ActivityGenericStatus": {
        "type": "object",
        "properties": {
          "items_total_count": {
            "type": "integer",
            "description": "The total number of tags that this activity will delete.",
            "readOnly": true,
            "example": 89
          },
          "items_completed_count": {
            "type": "integer",
            "description": "The number of tags that this activity has currently deleted.",
            "readOnly": true,
            "example": 89
          }
        }
      },
      "ActivityLinks_2": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "example": "/v3/activities/04fe9a97-a579-43c5-bb1a-58ed29bf0a6a"
              }
            },
            "description": "The link returned in the response that you use to retrieve the status for the specified activity."
          }
        }
      },
      "Tags": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "description": "Lists all tags and provides tag details.",
            "items": {
              "$ref": "#/components/schemas/Tag_2"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/PagingLinks_2"
          }
        }
      },
      "Tag_2": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a tag (UUID format)",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "The unique tag name.",
            "example": "Gold card member"
          },
          "contacts_count": {
            "type": "integer",
            "description": "The total number of contacts who are assigned this tag.",
            "readOnly": true,
            "example": 325
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time when the tag was created (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-25T11:08:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The system generated date and time when the tag was last updated (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "example": "2016-01-23T13:48:44.108Z"
          },
          "tag_source": {
            "type": "string",
            "description": "The source used to tag contacts.",
            "readOnly": true,
            "example": "ESTY"
          }
        }
      },
      "PagingLinks_2": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "Links_2": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "next": {
            "$ref": "#/components/schemas/Next_2"
          }
        }
      },
      "Next_2": {
        "required": [
          "href"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The next link in the page or null if there are no additional pages."
          }
        }
      },
      "TagPost": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Specify a unique name to use to identify the tag. Tag names must be at least one character in length and not more than 255 characters.",
            "example": "Silver card member"
          },
          "tag_source": {
            "type": "string",
            "description": "The source used to identify the contacts to tag.",
            "example": "ESTY"
          }
        }
      },
      "PagedEmailCampaignResponse": {
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/PagingLinks_2"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailCampaigns"
            }
          }
        }
      },
      "EmailCampaigns": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "The unique ID used to identify the email campaign (UUID format).",
            "example": "8987dc1a-48ef-433a-b836-7ca4f9aa3481"
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time that this email campaign was created. This string is readonly and is in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-02-06T22:09:15.000Z"
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the email campaign. Valid values are: <ul>\n  <li>Draft — An email campaign that you have created but have not sent to contacts.</li>\n  <li>Scheduled — An email campaign that you have scheduled for Constant Contact to send to contacts.</li>\n  <li>Executing — An email campaign that Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.</li>\n  <li>Done — An email campaign that you successfully sent to contacts.</li>\n  <li>Error — An email campaign activity that encountered an error.</li>\n  <li>Removed — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.</li>\n</ul>\n",
            "example": "Draft",
            "enum": [
              "Draft",
              "Scheduled",
              "Executing",
              "Done",
              "Error",
              "Removed"
            ]
          },
          "name": {
            "maxLength": 80,
            "type": "string",
            "description": "The descriptive name the user provides to identify this campaign. Campaign names must be unique for each account ID.",
            "example": "December Newsletter for Dog Lovers"
          },
          "type": {
            "type": "string",
            "description": "Identifies the type of campaign that you select when creating the campaign. Newsletter and Custom Code email campaigns are the primary types.",
            "example": "NEWSLETTER",
            "enum": [
              "Newsletter",
              "Custom Code Email",
              "Announcement",
              "Product/Service News",
              "Business Letter",
              "Card",
              "Press release",
              "Flyer",
              "Feedback Request",
              "Ratings and Reviews",
              "Event Announcement",
              "Simple Coupon",
              "Sale Promotion",
              "Product Promotion",
              "Membership Drive",
              "Fundraiser"
            ]
          },
          "type_code": {
            "type": "integer",
            "description": "The code used to identify the email campaign `type`. <ul>\n  <li> 1  (Default) </li>\n  <li> 2  (Bulk Email) </li>\n  <li> 10 (Newsletter) </li>\n  <li> 11 (Announcement) </li>\n  <li> 12 (Product/Service News) </li>\n  <li> 14 (Business Letter) </li>\n  <li> 15 (Card) </li>\n  <li> 16 (Press release)</li>\n  <li> 17 (Flyer) </li>\n  <li> 18 (Feedback Request) </li>\n  <li> 19 (Ratings and Reviews) </li>\n  <li> 20 (Event Announcement) </li>\n  <li> 21 (Simple Coupon) </li>\n  <li> 22 (Sale Promotion) </li>\n  <li> 23 (Product Promotion) </li>\n  <li> 24 (Membership Drive) </li>\n  <li> 25 (Fundraiser) </li>\n  <li> 26 (Custom Code Email)</li>\n  <li> 57 (A/B Test)</li>\n</ul>\n",
            "example": 10
          },
          "updated_at": {
            "type": "string",
            "description": "The system generated date and time showing when the campaign was last updated. This string is read only and is in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-27T10:28:09.000Z"
          }
        }
      },
      "EmailCampaignComplete": {
        "required": [
          "email_campaign_activities",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "type": "string",
            "description": "The unique and descriptive name that you specify for the email campaign.",
            "example": "December Newsletter for Dog Lovers"
          },
          "email_campaign_activities": {
            "type": "array",
            "description": "The content of the email campaign as an array that contains a single email campaign activity object.",
            "items": {
              "$ref": "#/components/schemas/EmailCampaignActivityInput"
            }
          }
        }
      },
      "EmailCampaignActivityInput": {
        "required": [
          "format_type",
          "from_email",
          "from_name",
          "html_content",
          "reply_to_email",
          "subject"
        ],
        "type": "object",
        "properties": {
          "format_type": {
            "type": "integer",
            "description": "The email format you are using to create the email campaign activity. The V3 API supports creating emails using <code>format_type</code> 5 (custom code emails).\n",
            "format": "int32",
            "example": 5,
            "enum": [
              5
            ]
          },
          "from_name": {
            "maxLength": 100,
            "type": "string",
            "description": "The email sender's name to display for the email campaign activity.",
            "example": "Jake Dodge"
          },
          "from_email": {
            "maxLength": 80,
            "type": "string",
            "description": "The sender's email address to use for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.",
            "example": "jdodge@constantcontact.com"
          },
          "reply_to_email": {
            "maxLength": 80,
            "type": "string",
            "description": "The sender's email address to use if the contact replies to the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.",
            "example": "jdodge@constantconatct.com"
          },
          "subject": {
            "type": "string",
            "description": "The text to display in the subject line that describes the email campaign activity.",
            "example": "Informed Daily Digest"
          },
          "preheader": {
            "type": "string",
            "description": "The email preheader for the email campaign activity. Contacts will view your preheader as a short summary that follows the subject line in their email client. Only <code>format_type</code> 3, 4, and 5 email campaign activities use the preheader property.",
            "example": "You don't want to miss this."
          },
          "html_content": {
            "maxLength": 150000,
            "type": "string",
            "description": "The HTML content for the email campaign activity. Only <code>format_type</code> 5 (custom code emails) can contain <code>html_content</code>. When creating a <code>format_type</code> 5 custom code email, make sure that you include <code>[[trackingImage]]</code> in the <code>&lt;body&gt;</code> element of your HTML.\n",
            "example": "<html><body>[[trackingImage]] <a href=\"http://www.constantcontact.com\">Visit ConstantContact.com!</a> </body></html>"
          },
          "physical_address_in_footer": {
            "$ref": "#/components/schemas/EmailPhysicalAddress"
          }
        }
      },
      "EmailPhysicalAddress": {
        "required": [
          "address_line1",
          "country_code",
          "organization_name"
        ],
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Line 1 of the organization's street address.",
            "example": "123 Maple Street"
          },
          "address_line2": {
            "type": "string",
            "description": "Line 2 of the organization's street address.",
            "example": "Unit 1"
          },
          "address_line3": {
            "type": "string",
            "description": "Line 3 of the organization's street address."
          },
          "address_optional": {
            "type": "string",
            "description": "An optional address field for the organization. Only <code>format_type</code> 3, 4, and 5 can use this property.",
            "example": "Near Boston Fire Station"
          },
          "city": {
            "type": "string",
            "description": "The city where the organization sending the email campaign is located.",
            "example": "Boston"
          },
          "country_code": {
            "type": "string",
            "description": "The uppercase two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's country.",
            "example": "US"
          },
          "country_name": {
            "type": "string",
            "description": "The full name of the country where the organization sending the email is located. Automatically generated using the <code>country_code</code>.",
            "readOnly": true,
            "example": "United States"
          },
          "organization_name": {
            "type": "string",
            "description": "The name of the organization that is sending the email campaign.",
            "example": "Jake Dodge's Pancakes"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code address (ZIP code) of the organization.",
            "example": "02451"
          },
          "state_code": {
            "type": "string",
            "description": "The uppercase two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's state. This property is required if the <code>country_code</code> is US (United States).",
            "example": "MA"
          },
          "state_name": {
            "type": "string",
            "description": "The full state name for a <code>state_code</code> that is inside the United States. Automatically generated using the <code>state_code</code>.",
            "readOnly": true
          },
          "state_non_us_name": {
            "type": "string",
            "description": "The full state name for a <code>state_code</code> that is outside the United States. This property is not read only.",
            "example": "Victoria"
          }
        }
      },
      "EmailCampaign": {
        "type": "object",
        "properties": {
          "campaign_activities": {
            "type": "array",
            "description": "Lists the role and unique activity ID of each campaign activity that is associated with an Email Campaign.",
            "items": {
              "$ref": "#/components/schemas/ActivityReference"
            }
          },
          "campaign_id": {
            "type": "string",
            "description": "The unique ID used to identify the email campaign (UUID format).",
            "example": "8987dc1a-48ef-433a-b836-7ca4f9aa3481"
          },
          "created_at": {
            "type": "string",
            "description": "The system generated date and time that this email campaign was created. This string is readonly and is in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-02-06T22:09:15.000Z"
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the email campaign. Valid values are: <ul>\n  <li>Draft — An email campaign that you have created but have not sent to contacts.</li>\n  <li>Scheduled — An email campaign that you have scheduled for Constant Contact to send to contacts.</li>\n  <li>Executing — An email campaign that Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.</li>\n  <li>Done — An email campaign that you successfully sent to contacts.</li>\n  <li>Error — An email campaign activity that encountered an error.</li>\n  <li>Removed — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.</li>\n</ul>\n",
            "example": "Draft",
            "enum": [
              "Draft",
              "Scheduled",
              "Executing",
              "Done",
              "Removed",
              "Error"
            ]
          },
          "name": {
            "maxLength": 80,
            "type": "string",
            "description": "The descriptive name the user provides to identify this campaign. Campaign names must be unique for each account ID.",
            "example": "December Newsletter for Dog Lovers"
          },
          "type": {
            "type": "string",
            "description": "Identifies the type of campaign that you select when creating the campaign. Newsletter and Custom Code email campaigns are the primary types.",
            "example": "NEWSLETTER",
            "enum": [
              "Newsletter",
              "Custom Code Email",
              "Announcement",
              "Product/Service News",
              "Business Letter",
              "Card",
              "Press release",
              "Flyer",
              "Feedback Request",
              "Ratings and Reviews",
              "Event Announcement",
              "Simple Coupon",
              "Sale Promotion",
              "Product Promotion",
              "Membership Drive",
              "Fundraiser"
            ]
          },
          "type_code": {
            "type": "integer",
            "description": "The code used to identify the email campaign `type`. <ul>\n  <li> 1  (Default) </li>\n  <li> 2  (Bulk Email) </li>\n  <li> 10 (Newsletter) </li>\n  <li> 11 (Announcement) </li>\n  <li> 12 (Product/Service News) </li>\n  <li> 14 (Business Letter) </li>\n  <li> 15 (Card) </li>\n  <li> 16 (Press release)</li>\n  <li> 17 (Flyer) </li>\n  <li> 18 (Feedback Request) </li>\n  <li> 19 (Ratings and Reviews) </li>\n  <li> 20 (Event Announcement) </li>\n  <li> 21 (Simple Coupon) </li>\n  <li> 22 (Sale Promotion) </li>\n  <li> 23 (Product Promotion) </li>\n  <li> 24 (Membership Drive) </li>\n  <li> 25 (Fundraiser) </li>\n  <li> 26 (Custom Code Email)</li>\n  <li> 57 (A/B Test)</li>\n</ul>\n",
            "example": 10
          },
          "updated_at": {
            "type": "string",
            "description": "The system generated date and time showing when the campaign was last updated. This string is read only and is in ISO-8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-06-27T10:28:09.000Z"
          }
        }
      },
      "ActivityReference": {
        "type": "object",
        "properties": {
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID (UUID) that uniquely identifies a campaign activity.",
            "example": "0e3feddd-c8da-4d53-a507-aae5082b8b75"
          },
          "role": {
            "type": "string",
            "description": "The purpose of the individual campaign activity in the larger email campaign effort. Valid values are: <ul>\n  <li>primary_email — The main email marketing campaign that you send to contacts. The <code>primary_email</code> contains the complete email content.</li>\n  <li>permalink — A permanent link to a web accessible version of the <code>primary_email</code> content without any personalized email information. For example, permalinks do not contain any of the contact details that you add to the <code>primary_email</code> email content. </li>\n  <li>resend — An email campaign that you resend to contacts that did not open the email campaign.</li>\n</ul> Constant Contact creates a <code>primary_email</code> and a <code>permalink</code> role campaign activity when you create an email campaign.\n",
            "example": "primary_email",
            "enum": [
              "primary_email",
              "permalink",
              "resend"
            ]
          }
        }
      },
      "EmailCampaignName": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "type": "string",
            "description": "The updated email campaign name. The email campaign name must be unique.",
            "example": "December Newsletter for Dog Lovers"
          }
        }
      },
      "CrossReferenceResponse": {
        "type": "object",
        "properties": {
          "xrefs": {
            "type": "array",
            "description": "An array of objects that contain a <code>v2_email_campaign_id</code> cross-referenced with a V3 <code>campaign_id</code> and a V3 <code>campaign_activity_id</code> value.",
            "items": {
              "$ref": "#/components/schemas/CrossReference"
            }
          }
        }
      },
      "CrossReference": {
        "type": "object",
        "properties": {
          "v2_email_campaign_id": {
            "type": "string",
            "description": "Identifies an email campaign in the V2 API.",
            "example": "1100567546598"
          },
          "campaign_id": {
            "type": "string",
            "description": "<p>Identifies a campaign in the V3 API. In the V3 API, each campaign contains one or more activities. For more information, see <a href=\"/api_guide/v3_v2_email_campaign_deltas.html\" target_\"blank\">V3 Email Campaign Resource Changes<a/>.<p>",
            "format": "uuid",
            "example": "e4cf53f0-e37f-11e8-9f32-f2801f1b9fd1"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "<p>Identifies a campaign activity in the V3 API. In the V3 API, each campaign contains one or more activities. Email type activities represent the detailed information in an email and contain properties like <code>from_email</code> and <code>from_name</code>. For more information, see <a href=\"/api_guide/v3_v2_email_campaign_deltas.html\" target_\"blank\">V3 Campaign Resource Changes<a/>.<p>",
            "format": "uuid",
            "example": "4c08372c-957a-48b5-bc45-72c7f00796cd"
          }
        }
      },
      "EmailCampaignActivity": {
        "required": [
          "from_email",
          "from_name",
          "reply_to_email",
          "subject"
        ],
        "type": "object",
        "properties": {
          "campaign_activity_id": {
            "type": "string",
            "description": "Identifies a campaign activity in the V3 API.",
            "readOnly": true,
            "example": "4c08372c-957a-48b5-bc45-72c7f00796cd"
          },
          "campaign_id": {
            "type": "string",
            "description": "Identifies a campaign in the V3 API.",
            "readOnly": true,
            "example": "8987dc1a-48ef-433a-b836-7ca4f9aa3481"
          },
          "role": {
            "type": "string",
            "description": "The purpose of the individual campaign activity in the larger email campaign effort. Valid values are: <ul>\n  <li>primary_email — The main email marketing campaign that you send to contacts. The <code>primary_email</code> contains the complete email content.</li>\n  <li>permalink — A permanent link to a web accessible version of the <code>primary_email</code> content without any personalized email information. For example, permalinks do not contain any of the contact details that you add to the <code>primary_email</code> email content. </li>\n  <li>resend — An email campaign that you resend to contacts that did not open the email campaign.</li>\n</ul> Constant Contact creates a <code>primary_email</code> and a <code>permalink</code> role campaign activity when you create an email campaign.\n",
            "readOnly": true,
            "example": "primary_email",
            "enum": [
              "primary_email",
              "permalink",
              "resend"
            ]
          },
          "contact_list_ids": {
            "type": "array",
            "description": "The contacts that Constant Contact sends the email campaign activity to as an array of contact <code>list_id</code> values. You cannot use contact lists and segments at the same time in an email campaign activity.",
            "items": {
              "type": "string",
              "example": "da10f460-3072-11e9-b282-fa163e6b01c1"
            }
          },
          "segment_ids": {
            "type": "array",
            "description": "The contacts that Constant Contact sends the email campaign activity to as an array containing a single <code>segment_id</code> value. Only <code>format_type</code> 3, 4, and 5 email campaign activities support segments. You cannot use contact lists and segments at the same time in an email campaign activity.",
            "items": {
              "type": "integer",
              "example": 1
            }
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the email campaign activity. Valid values are: <ul>\n  <li>DRAFT — An email campaign activity that you have created but have not sent to contacts.</li>\n  <li>SCHEDULED — An email campaign activity that you have scheduled for Constant Contact to send to contacts.</li>\n  <li>EXECUTING — An email campaign activity Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.</li>\n  <li>DONE — An email campaign activity that you successfully sent to contacts.</li>\n  <li>ERROR — An email campaign activity that encountered an error.</li>\n  <li>REMOVED — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.</li>\n</ul>\n",
            "readOnly": true,
            "example": "DRAFT",
            "enum": [
              "DRAFT",
              "SCHEDULED",
              "EXECUTING",
              "DONE",
              "ERROR",
              "REMOVED"
            ]
          },
          "format_type": {
            "type": "integer",
            "description": "Identifies the type of email format. Valid values are: <ul>\n  <li>1 - A legacy custom code email created using the V2 API, the V3 API, or the legacy UI HTML editor.</li>\n  <li>2 - An email created using the second generation email editor UI.</li>\n  <li>3 - An email created using the third generation email editor UI. This email editor features an improved drag and drop UI and mobile responsiveness.</li>\n  <li>4 - An email created using the fourth generation email editor UI.</li>\n  <li>5 - A custom code email created using the V3 API or the new UI HTML editor.</li>\n</ul>\n",
            "format": "int32",
            "readOnly": true,
            "example": 5,
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "from_email": {
            "type": "string",
            "description": "The email \"From Email\" field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.",
            "example": "jdodge@constantcontact.com"
          },
          "from_name": {
            "type": "string",
            "description": "The email \"From Name\" field for the email campaign activity.",
            "example": "Jake Dodge"
          },
          "reply_to_email": {
            "type": "string",
            "description": "The email \"Reply To Email\" field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.",
            "example": "jdodge@constantcontact.com"
          },
          "subject": {
            "type": "string",
            "description": "The email \"Subject\" field for the email campaign activity.",
            "example": "Holiday Special Newsletter"
          },
          "html_content": {
            "type": "string",
            "description": "The HTML or XHTML content for the email campaign activity. Only <code>format_type</code> 1 and 5 (legacy custom code emails or modern custom code emails) can contain <code>html_content</code>.",
            "example": "<html><body>[[trackingImage]] <a href=\"http://www.constantcontact.com\">Visit ConstantContact.com!</a> </body></html>"
          },
          "template_id": {
            "type": "string",
            "description": "Identifies the email layout and design template that the email campaign activity is using as a base.",
            "readOnly": true,
            "example": "1000755366001"
          },
          "permalink_url": {
            "type": "string",
            "description": "The permanent link to a web accessible version of the email campaign content without any personalized email information. The permalink URL becomes accessible after you send an email campaign to contacts.",
            "readOnly": true,
            "example": "https://conta.cc/2GaQ8AY"
          },
          "preheader": {
            "type": "string",
            "description": "The email preheader for the email campaign activity. Only <code>format_type</code> 3, 4, and 5 email campaign activities use the preheader property.",
            "example": "You don't want to miss this."
          },
          "physical_address_in_footer": {
            "$ref": "#/components/schemas/EmailPhysicalAddress"
          },
          "document_properties": {
            "type": "object",
            "properties": {
              "style_content": {
                "maxLength": 150000,
                "type": "string",
                "description": "Contains style sheet elements for XHTML letter format emails. This property applies only to <code>format_type</code> 1.",
                "example": ".white{color: #ffffff;}"
              },
              "letter_format": {
                "type": "string",
                "description": "Email message format. Valid values are <code>HTML</code> and <code>XHTML</code>. By default, the value is <code>HTML</code>. For more information, see the <a href=\"http://www.constantcontact.com/display_media.jsp?id=87\" target=\"_blank\">Advanced Editor User's Guide</a>. This property applies only to <code>format_type</code> 1. You cannot change this property after you create an email.\n",
                "readOnly": true,
                "example": "XHTML",
                "default": "HTML",
                "enum": [
                  "HTML",
                  "XHTML"
                ]
              },
              "greeting_salutation": {
                "maxLength": 50,
                "type": "string",
                "description": "The greeting used in the email message. This property applies only to <code>format_type</code> 1.",
                "example": "Dear"
              },
              "greeting_name_type": {
                "type": "string",
                "description": "The type of name the campaign uses to greet the contact. Valid values are <code>F</code> (First Name), <code>L</code> (Last Name), <code>B</code> (First and Last Name), or <code>N</code> (No greeting). By default, the value is <code>N</code>. This property applies only to <code>format_type</code> 1.",
                "example": "F",
                "default": "N",
                "enum": [
                  "F",
                  "L",
                  "B",
                  "N"
                ]
              },
              "greeting_secondary": {
                "maxLength": 1500,
                "type": "string",
                "description": "A fallback text string the campaign uses to greet the contact when the <code>greeting_name_type</code> is not available or set to <code>N</code>. This property applies only to <code>format_type</code> 1.",
                "example": "Greetings!"
              },
              "subscribe_link_enabled": {
                "type": "string",
                "description": "If <code>true</code>, the email footer includes a link for subscribing to the list. If <code>false</code>, the message footer does not include a link for subscribing to the list. By default, the value is <code>false</code>. This property applies only to <code>format_type</code> 1.\n",
                "example": "false",
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ]
              },
              "subscribe_link_name": {
                "maxLength": 80,
                "type": "string",
                "description": "The text displayed as the name for the subscribe link in the email footer. This property applies only to <code>format_type</code> 1.",
                "example": "Subscribe to my email list!"
              },
              "text_content": {
                "maxLength": 150000,
                "type": "string",
                "description": "Contains the text content that Constant Contact displays to contacts when their email client cannot display HTML email. If you do not specify text content, Constant Contact displays \"Greetings!\" as the text content. This property applies only to <code>format_type</code> 1.\n",
                "example": "<Text><Greeting/></Text>"
              },
              "permission_reminder_enabled": {
                "type": "string",
                "description": "If <code>true</code>, Constant Contact displays your <code>permission_reminder</code> message to contacts at top of the email. If <code>false</code>, Constant Contact does not display the message. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2.\n",
                "example": "false",
                "default": "false",
                "enum": [
                  "false",
                  "true"
                ]
              },
              "permission_reminder": {
                "maxLength": 1500,
                "type": "string",
                "description": "The message text Constant Contact displays at the top of the email message to remind users that they are subscribed to an email list. This property applies to <code>format_type</code> 1 and 2.",
                "example": "Hi, just a reminder that you're receiving this email because you have expressed an interest in our company."
              },
              "view_as_webpage_enabled": {
                "type": "string",
                "description": "If <code>true</code>, Constant Contact displays the view as web page email message. If <code>false</code> Constant Contact does not display the message. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2.\n",
                "example": "false",
                "default": "false"
              },
              "view_as_webpage_text": {
                "maxLength": 50,
                "type": "string",
                "description": "The text Constant Contact displays before the view as web page link at the top of the email. This property applies to <code>format_type</code> 1 and 2.",
                "example": "Having trouble viewing this email?"
              },
              "view_as_webpage_link_name": {
                "type": "string",
                "description": "The name of the link that users can click to view the email as a web page. This property applies to <code>format_type</code> 1 and 2.",
                "example": "Click here to view this email as a web page"
              },
              "forward_email_link_enabled": {
                "type": "string",
                "description": "If <code>true</code>, when the user forwards an email message the footer includes a link for subscribing to the list. If <code>false</code>, when a user forwards an email message the footer does not include a link for subscribing to the list. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2.\n",
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ]
              },
              "forward_email_link_name": {
                "maxLength": 80,
                "type": "string",
                "description": "The text displayed as the name for the forward email link in the footer when a user forwards an email. This property applies to <code>format_type</code> 1 and 2.",
                "example": "Forward email"
              }
            },
            "description": "An object that contains optional properties for legacy format type emails (<code>format_type</code> 1 and 2). If you attempt to add a property that does apply to the email <code>format_type</code>, the API will ignore the property."
          }
        }
      },
      "EmailScheduleResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "scheduled_date": {
              "type": "string",
              "description": "The date when Constant Contact will send the email campaign activity to contacts in ISO-8601 format. For example, <code>2022-05-17</code> and <code>2022-05-17T16:37:59.091Z</code> are valid dates.",
              "format": "date-time"
            }
          }
        }
      },
      "EmailScheduleInput": {
        "required": [
          "scheduled_date"
        ],
        "type": "object",
        "properties": {
          "scheduled_date": {
            "type": "string",
            "description": "The date when Constant Contact will send the email campaign activity to contacts in ISO-8601 format. For example, <code>2022-05-17</code> and <code>2022-05-17T16:37:59.091Z</code> are valid dates. Use <code>\"0\"</code> as the date to have Constant Contact immediately send the email campaign activity to contacts.",
            "format": "date-time"
          }
        }
      },
      "EmailTestSendInput": {
        "required": [
          "email_addresses"
        ],
        "type": "object",
        "properties": {
          "email_addresses": {
            "maxItems": 5,
            "type": "array",
            "description": "The recipients of the test email as an array of email address strings. You can send a test email to up to 5 different email addresses at a time.",
            "items": {
              "type": "string",
              "example": "dlang@example.com"
            }
          },
          "personal_message": {
            "type": "string",
            "description": "A personal message for the recipients of the test email. Constant Contact displays this message before the email campaign activity content.",
            "example": "This is a test send of the email campaign activity."
          }
        }
      },
      "EmailCampaignActivityPreview": {
        "type": "object",
        "properties": {
          "campaign_activity_id": {
            "type": "string",
            "description": "The unique ID for an email campaign activity.",
            "example": "4c08372c-957a-48b5-bc45-72c7f00796cd"
          },
          "from_email": {
            "type": "string",
            "description": "The \"from email\" email header for the email campaign activity.",
            "example": "jdodge@constantconatct.com"
          },
          "from_name": {
            "type": "string",
            "description": "The \"from name\" email header for the email campaign activity.",
            "example": "Jake Dodge"
          },
          "preheader": {
            "type": "string",
            "description": "The email preheader for the email campaign activity. Only <code>format_type</code> 3, 4, and 5 email campaign activities use the preheader property.",
            "example": "You don't want to miss this."
          },
          "preview_html_content": {
            "type": "string",
            "description": "An HTML preview of the email campaign activity.",
            "example": "<html><body> <a href=\\\"http://www.constantcontact.com\\\">Visit ConstantContact.com!</a> </body></html>"
          },
          "preview_text_content": {
            "type": "string",
            "description": "A plain text preview of the email campaign activity.",
            "example": "Email Content"
          },
          "reply_to_email": {
            "type": "string",
            "description": "The email \"Reply To Email\" field for the email campaign activity.",
            "example": "jdodge@constantcontact.com"
          },
          "subject": {
            "type": "string",
            "description": "The email \"Subject\" field for the email campaign activity.",
            "example": "Informed Daily Digest"
          }
        }
      },
      "EmailSendHistory": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "send_id": {
              "minimum": 1,
              "type": "integer",
              "description": "Uniquely identifies each send history object using the number of times that you sent the email campaign activity as a sequence starting at <code>1</code>. For example, when you send a specific email campaign activity twice this method returns an object with a <code>send_id</code> of 1 for the first send and an object with a <code>send_id</code> of 2 for the second send.\n",
              "format": "int32",
              "example": 1
            },
            "contact_list_ids": {
              "type": "array",
              "description": "The contacts lists that Constant Contact sent email campaign activity to as an array of contact <code>list_id</code> strings.",
              "items": {
                "type": "string",
                "example": "72876990-b664-11e5-844a-00163e0cb6a5"
              }
            },
            "segment_ids": {
              "type": "array",
              "description": "The contact segments that Constant Contact sent the email campaign activity to as an array of <code>segment_id</code> integers.",
              "items": {
                "type": "integer",
                "format": "int64",
                "example": 57
              }
            },
            "count": {
              "type": "integer",
              "description": "The number of contacts that Constant Contact sent this email campaign activity to. This property is specific to each send history object. When you resend an email campaign activity, Constant Contact only sends it to new contacts in the contact lists or segments you are using.",
              "format": "int64",
              "example": 200
            },
            "run_date": {
              "type": "string",
              "description": "The system generated date and time that Constant Contact sent the email campaign activity to contacts in ISO-8601 format.",
              "format": "date-time",
              "example": "2018-06-27T10:28:09.000Z"
            },
            "send_status": {
              "type": "string",
              "description": "The send status for the email campaign activity. Valid values are: <ul> \n  <li><code>COMPLETED</code>: Constant Contact successfully sent the email campaign activity.</li>\n  <li><code>ERRORED</code>: Constant Contact encountered an error when sending the email campaign activity.<li>\n</ul>\n",
              "example": "COMPLETED",
              "enum": [
                "COMPLETED",
                "ERRORED"
              ]
            },
            "reason_code": {
              "type": "integer",
              "description": "The reason why the send attempt completed or encountered an error. This method returns <code>0</code> if Constant Contact successfully sent the email campaign activity to contacts. Possible <code>reason_code</code> values are: <ul>\n      <li>0 — Constant Contact successfully sent the email to contacts.</li>\n      <li>1 — An error occurred when sending this email. Try scheduling it again, or contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a>.</li>\n      <li>2 — We were unable to send the email. Please contact our <a href='http://knowledgebase.constantcontact.com/articles/KnowledgeBase/5782-contact-an-account-review-and-deliverability-specialist' target='_blank'>Account Review Team</a> for more information.</li>\n      <li>3 — This Constant Contact account cannot currently send emails. This can be due to billing or product expiration.</li>\n      <li>4 — You're not able to send the email to that many contacts. Remove contacts from the contact lists you are using or select a list with fewer contacts.</li>\n      <li>5 — The email is currently in staging. For more information, see the <a href='http://knowledgebase.constantcontact.com/articles/KnowledgeBase/7402-email-staging' target='_blank>Email Staging Knowledge Base article</a>.</li>\n      <li>6 — Constant Contact was unable to finish sending this email to all of the contacts on your list. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>\n      <li>7 — The email contains invalid images. This can be caused when one or more images in the email are longer available in your image library.</li>\n      <li>8 — The email contains a link URL that exceeds 1005 characters.</li>\n      <li>9 — Constant Contact was unable to verify your authenticated Sender address. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>\n      <li>10 — Constant Contact was unable to verify your authenticated Sender address. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>\n      <li>11 — This Constant Contact account cannot send survey invitations.</li>\n      <li>12 — Constant Contact attempted to send the email, but there were no eligible contacts to send it to. This can be caused by an invalid contact list, a contact list with no contacts, or a contact list with no new contacts during a resend. This method displays <code>reason_code</code> 12 as a send attempt with a <code>send_status</code> of COMPLETED and a <code>count</code> of 0.</li>\n</ul>\n",
              "format": "int32",
              "example": 0,
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
              ]
            }
          }
        }
      },
      "ResendToNonOpeners": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "resend_subject": {
              "type": "string",
              "description": "The subject line used when resending the email campaign activity.",
              "example": "Our Big Sale is Coming Soon!"
            },
            "delay_days": {
              "type": "integer",
              "description": "The number of days to wait before Constant Contact resends the email. Valid values include <code>1</code> to <code>10</code> days. This value is only returned in the response results if the resend activity was created with <code>delay_days</code> or the <code>delay_minutes</code> equal to an exact day value. ",
              "format": "int32",
              "example": 3
            },
            "delay_minutes": {
              "type": "integer",
              "description": "The number of minutes to wait before Constant Contact resends the email. There are 1,440 minutes in a day. Valid values includes a minimum of <code>720</code> (12 hours) and a maximum of <code>14,400</code> minutes (10 days). This property is mutually exclusive with <code>delay_days</code>.",
              "format": "int32",
              "example": 1000
            },
            "resend_date": {
              "type": "string",
              "description": "The system generated date and time (in ISO-8601 format) that the email campaign activity was resent to non-openers (only included in the response results for sent resend activities).",
              "format": "date-time",
              "readOnly": true
            },
            "resend_request_id": {
              "type": "string",
              "description": "For scheduled or sent resend to non-opener emails, the system generates an ID that identifies the resend to non-openers activity. For draft email campaign resend activities, the system returns <code>DRAFT</code>.",
              "example": "DRAFT"
            },
            "resend_status": {
              "type": "string",
              "description": "The status of the resend to non-openers campaign activity. The <code>resend_status</code> is only returned in the response results if the campaign activity is either scheduled to be sent or was already sent.\n",
              "example": "DRAFT"
            }
          }
        }
      },
      "ResendToNonOpenersInput": {
        "required": [
          "resend_subject"
        ],
        "type": "object",
        "properties": {
          "resend_subject": {
            "type": "string",
            "description": "The subject line used when resending the email campaign activity.",
            "example": "Our Big Sale is Coming Soon!"
          },
          "delay_days": {
            "type": "integer",
            "description": "The number of days to wait before Constant Contact resends the email. Valid values include <code>1</code> to <code>10</code> days. This property is mutually exclusive with <code>delay_minutes</code>. This value is only returned in the response results if the resend activity was created with <code>delay_days</code> or the <code>delay_minutes</code> equal to an exact day value.",
            "format": "int32",
            "example": 3
          },
          "delay_minutes": {
            "type": "integer",
            "description": "The number of minutes to wait before Constant Contact resends the email campaign activity. There are 1,440 minutes in a day. Valid values includes a minimum of <code>720</code> (12 hours) and a maximum of <code>14,400</code> minutes (10 days). This property is mutually exclusive with <code>delay_days</code>",
            "format": "int32",
            "example": 1000
          }
        }
      },
      "ResendToNonOpenersObject": {
        "type": "object",
        "properties": {
          "resend_subject": {
            "type": "string",
            "description": "The subject line for the resend email.",
            "example": "Our Big Sale is Coming Soon!"
          },
          "delay_days": {
            "type": "integer",
            "description": "The number of days to wait before Constant Contact resends the email. Valid values include <code>1</code> to <code>10</code> days. This property is mutually exclusive with <code>delay_minutes</code>. This value is only returned in the response results if the resend activity was created with <code>delay_days</code> or the <code>delay_minutes</code> equal to an exact day value.",
            "format": "int32",
            "example": 7
          },
          "delay_minutes": {
            "type": "integer",
            "description": "The number of minutes to wait before Constant Contact resends the email. There are 1,440 minutes in a day. Valid values includes a minimum of <code>720</code> (12 hours) and a maximum of <code>14,400</code> minutes (10 days). This property is mutually exclusive with <code>delay_days</code>.",
            "format": "int32"
          },
          "resend_date": {
            "type": "string",
            "description": "The system generated ISO-8601 format date and time that Constant Contact resent the email to non-openers.",
            "format": "date-time",
            "readOnly": true
          },
          "resend_request_id": {
            "type": "string",
            "description": "For scheduled or sent resend to non-opener emails, this property is a unique identifier for the resend. For draft email campaign resend activities, the value of this property is <code>DRAFT</code>.",
            "example": "DRAFT"
          }
        }
      },
      "ABTestData": {
        "required": [
          "alternative_subject",
          "test_size",
          "winner_wait_duration"
        ],
        "type": "object",
        "properties": {
          "alternative_subject": {
            "type": "string",
            "description": "The alternate email subject line to use for A/B testing.",
            "example": "Reminder: Our Biggest Sale of the Year is Coming Soon!"
          },
          "test_size": {
            "type": "integer",
            "description": "The percentage of contact recipients to participate in the A/B Test. For example, if the value is 30, then 30% of contacts will receive the email campaign with subject line A, and 30% of contacts will receive the email campaign with subject line B. Valid values include <code>5</code> to <code>50</code> percent. Currently, A/B tests support subject line only.",
            "format": "int32",
            "example": 30
          },
          "winner_wait_duration": {
            "type": "integer",
            "description": "The number of hours Constant Contact waits after the A/B test is sent before determining the winning subject line. The winner is the subject line with the highest number of contact opens. Valid values include <code>6</code>, <code>12</code>, <code>24</code>, and <code>48</code>. After the winner is determined, Constant Contact automatically sends the email campaign with the winning subject line to all the remaining contacts, which did not participate in the A/B test.",
            "format": "int32",
            "example": 24
          }
        }
      },
      "ContactTrackingActivitiesPage": {
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "The list of contact tracking activities in descending date order.",
            "items": {
              "$ref": "#/components/schemas/ContactTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        },
        "description": "A page of tracking activities for a contact that can include sends, opens, clicks, bounces, opt-outs and forwards to a friend. If it exists, a link to the next page of tracking activities is provided."
      },
      "ContactTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The contact id.",
            "format": "uuid",
            "example": "71600990-908b-11e6-907f-0000166bff25"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The unique id of the activity for an e-mail campaign.",
            "format": "uuid",
            "example": "000010a0-1234-5678-9012-1100a0c1ab2a"
          },
          "created_time": {
            "type": "string",
            "description": "The time the tracking activity occurred",
            "format": "date-time",
            "example": "2017-04-02T04:08:00.000Z"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of the tracking activity (send, open, click, bounce, opt-out or forward to a friend)",
            "example": "em_sends"
          }
        },
        "description": "The base contact tracking activity representing sends, opt-outs and forwards to a friend. The basic information provided is campaign activity id, tracking activity type and time the tracking activity occurred."
      },
      "ContactOpenAndClickRates": {
        "required": [
          "average_click_rate",
          "average_open_rate",
          "contact_id",
          "included_activities_count"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The unique ID of the contact for which the report is being generated.",
            "format": "uuid",
            "example": "71600990-908b-11e6-907f-0000166bff25"
          },
          "included_activities_count": {
            "type": "integer",
            "description": "The number of activities included in the calculation.",
            "format": "int32",
            "example": 10
          },
          "average_open_rate": {
            "type": "number",
            "description": "The average rate the contact opened emails sent to them.",
            "format": "double",
            "example": 0.6
          },
          "average_click_rate": {
            "type": "number",
            "description": "The average rate the contact clicked on links in emails sent to them.",
            "format": "double",
            "example": 0.6
          }
        },
        "description": "The average click and open rates for a provided contact. The basic information provided is contact id, open rate, click rate, and emails included in the calculation."
      },
      "ContactCampaignActivitiesSummary": {
        "required": [
          "campaign_activities",
          "contact_id"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "Unique id of the contact that will have their activity summarized.",
            "format": "uuid",
            "example": "71600990-908b-11e6-907f-0000166bff25"
          },
          "campaign_activities": {
            "type": "array",
            "description": "A summary of all the actions for a contact.",
            "items": {
              "$ref": "#/components/schemas/CampaignActivitySummary"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "CampaignActivitySummary": {
        "required": [
          "campaign_activity_id",
          "em_bounces",
          "em_clicks",
          "em_forwards",
          "em_opens",
          "em_sends",
          "em_unsubscribes",
          "start_on"
        ],
        "type": "object",
        "properties": {
          "campaign_activity_id": {
            "type": "string",
            "description": "The unique id of the activity for an e-mail campaign.",
            "format": "uuid"
          },
          "start_on": {
            "type": "string",
            "description": "The last date at which the email was sent to this contact.",
            "format": "date-time"
          },
          "em_bounces": {
            "type": "integer",
            "description": "The number of times the email has bounced for this contact.",
            "format": "int32"
          },
          "em_clicks": {
            "type": "integer",
            "description": "The number of times this contact has clicked a link in this email.",
            "format": "int32"
          },
          "em_forwards": {
            "type": "integer",
            "description": "The number of times this contact has forwarded this email.",
            "format": "int32"
          },
          "em_opens": {
            "type": "integer",
            "description": "The number of times this contact has opened this email.",
            "format": "int32"
          },
          "em_sends": {
            "type": "integer",
            "description": "The number of times the email was sent to this contact.",
            "format": "int32"
          },
          "em_unsubscribes": {
            "type": "integer",
            "description": "The number of times this contact has opted out.",
            "format": "int32"
          }
        }
      },
      "EmailLinks": {
        "type": "object",
        "properties": {
          "campaign_activity_id": {
            "type": "string",
            "description": "The unique ID for an email campaign activity.",
            "format": "uuid",
            "example": "8892baf9-970a-4de6-8400-fa4ec461987c"
          },
          "link_click_counts": {
            "type": "array",
            "description": "An array of objects that contain the contact click count and link metadata for each unique link URL in an email campaign activity. By default, this method combines results for duplicate link URLs.",
            "items": {
              "$ref": "#/components/schemas/EmailLinkClickCount"
            }
          }
        }
      },
      "EmailLinkClickCount": {
        "type": "object",
        "properties": {
          "link_url": {
            "type": "string",
            "description": "The URL of a link in an email campaign activity. This URL is not normalized and appears the same as the URL in the email campaign activity.",
            "example": "https://www.constantcontact.com/"
          },
          "url_id": {
            "type": "string",
            "description": "The ID for a unique link URL in an email campaign activity.",
            "example": "1100577727321"
          },
          "unique_clicks": {
            "type": "integer",
            "description": "The number of unique contacts that clicked the link.",
            "format": "int32",
            "example": 99
          },
          "list_action": {
            "type": "string",
            "description": "If the link uses the click segmentation feature, this property contains the action that contacts trigger when they click the link. Currently the only available action is <code>add</code>, which adds contacts that click the link to a contact list.",
            "example": "add",
            "enum": [
              "add"
            ]
          },
          "list_id": {
            "type": "string",
            "description": "If the link uses the click segmentation feature, this property contains the contact list linked with the <code>list_action</code> property.",
            "format": "uuid",
            "example": "3377aefd-970a-4de6-8400-ab4ec491624c"
          },
          "link_tag": {
            "type": "string",
            "description": "Link tags are not currently available in email campaigns. By default, this method combines results for duplicate link URLs. Link tags will allow users to get a separate link click report for each unique <code>link_tag</code> value they use, even if URLs are not unique.",
            "example": "google-link-1"
          }
        }
      },
      "SendsTrackingActivitiesPage": {
        "required": [
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "Lists the contacts to which the email campaign activity (<code>campaign_activity_id</code>) was sent.",
            "items": {
              "$ref": "#/components/schemas/SendsTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "SendsTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies an email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of tracking activity that is associated with this <code>campaign_activity_id</code> and used for reporting purposes.",
            "example": "em_sends"
          },
          "email_address": {
            "type": "string",
            "description": "The email address used to send the email campaign activity to a contact.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "created_time": {
            "type": "string",
            "description": "The date and time that you sent the email campaign to the contact.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2019-04-10T00:00:00.000Z"
          }
        }
      },
      "OpensTrackingActivitiesPage": {
        "required": [
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "Lists contacts that opened the specified <code>campaign_activity_id</code>.",
            "items": {
              "$ref": "#/components/schemas/OpensTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "OpensTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies an email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of tracking activity that is associated with this <code>campaign_activity_id</code> and used for reporting purposes.",
            "example": "em_opens"
          },
          "email_address": {
            "type": "string",
            "description": "The email address used to send the email campaign activity to a contact.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "device_type": {
            "type": "string",
            "description": "The type of device that the contact used to open the email campaign activity.",
            "example": "computer",
            "enum": [
              "computer",
              "mobile",
              "tablet",
              "other"
            ]
          },
          "created_time": {
            "type": "string",
            "description": "The date and time that the contact opened the email campaign activity.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "DidNotOpensTrackingActivitiesPage": {
        "required": [
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "Lists contacts that did not open the specified <code>campaign_activity_id</code>.",
            "items": {
              "$ref": "#/components/schemas/DidNotOpensTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "DidNotOpensTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies an email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of tracking activity that is associated with this <code>campaign_activity_id</code> and used for reporting purposes.",
            "example": "em_sends"
          },
          "email_address": {
            "type": "string",
            "description": "The email address used to send the email campaign activity to a contact.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "created_time": {
            "type": "string",
            "description": "The date and time that the contact was sent the email campaign activity.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "ClicksTrackingActivitiesPage": {
        "required": [
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "The list of click tracking activities",
            "items": {
              "$ref": "#/components/schemas/ClicksTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "ClicksTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "link_url",
          "tracking_activity_type",
          "url_id"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of report tracking activity that is associated with the specified <code>campaign_activity_id</code>.",
            "example": "em_clicks"
          },
          "email_address": {
            "type": "string",
            "description": "The email address used to send the email campaign activity to a contact.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "device_type": {
            "type": "string",
            "description": "The type of device that the contact was using when they clicked the URL link for the email campaign activity.",
            "example": "computer",
            "enum": [
              "computer",
              "mobile",
              "tablet",
              "other"
            ]
          },
          "url_id": {
            "type": "string",
            "description": "The ID used to uniquely identify the URL link.",
            "example": "1100407204171"
          },
          "link_url": {
            "type": "string",
            "description": "The text used for the URL link.",
            "example": "http://www.yoursite.com"
          },
          "created_time": {
            "type": "string",
            "description": "The date and time that the contact clicked the specified URL link for the email campaign activity.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "ForwardsTrackingActivitiesPage": {
        "required": [
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "The list of contacts that forwarded the specified email campaign activity. ",
            "items": {
              "$ref": "#/components/schemas/ForwardsTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "ForwardsTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of report tracking activity that is associated with the specified <code>campaign_activity_id</code>.",
            "example": "em_forwards"
          },
          "email_address": {
            "type": "string",
            "description": "The contact's email address.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "created_time": {
            "type": "string",
            "description": "The time that the contact forwarded the email campaign activity.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "OptoutsTrackingActivitiesPage": {
        "required": [
          "_links",
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "The list of opt-out tracking activities",
            "items": {
              "$ref": "#/components/schemas/OptoutsTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "OptoutsTrackingActivity": {
        "required": [
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of report tracking activity that is associated with the specified <code>campaign_activity_id</code>.",
            "example": "em_optouts"
          },
          "email_address": {
            "type": "string",
            "description": "The contact's email address.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "opt_out_reason": {
            "type": "string",
            "description": "The opt-out reason, if the contact entered a reason.",
            "example": "The content is not what I expected"
          },
          "created_time": {
            "type": "string",
            "description": "The time that the contact chose to opt-out from receiving future email campaign activities.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, displays the date that the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "BouncesTrackingActivitiesPage": {
        "required": [
          "_links",
          "tracking_activities"
        ],
        "type": "object",
        "properties": {
          "tracking_activities": {
            "type": "array",
            "description": "The list of email bounce tracking activities associated with a given `campaign_activity_id'.",
            "items": {
              "$ref": "#/components/schemas/BouncesTrackingActivity"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "BouncesTrackingActivity": {
        "required": [
          "bounce_code",
          "campaign_activity_id",
          "contact_id",
          "created_time",
          "email_address",
          "tracking_activity_type"
        ],
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The ID that uniquely identifies a contact.",
            "format": "uuid",
            "example": "a2fdc285-f4bc-408c-9e64-f3f89038ec82"
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the email campaign activity.",
            "format": "uuid",
            "example": "98edac88-f4bc-408c-9e64-acd890384231"
          },
          "tracking_activity_type": {
            "type": "string",
            "description": "The type of email tracking activity, <code>em_bounces</code>, that this report includes.",
            "example": "em_bounces"
          },
          "email_address": {
            "type": "string",
            "description": "The contact's email address that was used when the email campaign activity bounced.",
            "example": "maddieb@gmail.com"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Maddie"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Brown"
          },
          "bounce_code": {
            "type": "string",
            "description": "The one-character string used to specify the reason for the email bounce. Valid codes include:\n\n<ul><li><code>B</code> - Non-existent address; the contact's Internet Service Provider (ISP) indicates that the email address doesn't exist.</li>\n\n<li><code>D</code> - Undeliverable; after repeated delivery attempts, no response was received from the contact's ISP.</li>\n\n<li><code>F</code> - Full; the contact's mailbox is full.</li>\n\n<li><code>S</code> - Suspended; the contact's address was reported as non-existent by the ISP and is suspended from delivery.</li>\n\n<li><code>V</code> - Vacation/autoreply; the contact set an autoreply, but the message was delivered.</li>\n\n<li><code>X</code> - Other; the contact's ISP specified another reason that the message cannot be delivered.</li>\n\n<li><code>Z</code> - Blocked; the recipient's ISP chose not to deliver the email. For example, the ISP may have flagged the email as spam.</li></ul>",
            "example": "B"
          },
          "current_email_address": {
            "type": "string",
            "description": "The contact's most current email address. If <code>email_address</code> was updated after the email bounce activity occurred, <code>current_ email_address</code> displays the updated address. If updates were not made to <code>email_address</code>, the <code>email_address</code> and <code>current_email_address</code> are the same.",
            "example": "maddie_brown@yahoo.com"
          },
          "created_time": {
            "type": "string",
            "description": "The date and time that the email bounce tracking activity occurred.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "If applicable, the date when the contact was deleted.",
            "format": "date",
            "example": "2015-08-10T00:00:00.000Z"
          }
        }
      },
      "BulkEmailCampaignSummariesPage": {
        "required": [
          "_links",
          "bulk_email_campaign_summaries"
        ],
        "type": "object",
        "properties": {
          "bulk_email_campaign_summaries": {
            "type": "array",
            "description": "Lists and provides details about each bulk email campaign activity including total unique counts for tracked activities.",
            "items": {
              "$ref": "#/components/schemas/BulkEmailCampaignSummary"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links_2"
          }
        }
      },
      "BulkEmailCampaignSummary": {
        "required": [
          "campaign_id",
          "campaign_type",
          "last_sent_date",
          "unique_counts"
        ],
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "The ID that uniquely identifies an email campaign.",
            "example": "82ee2c37-c8f8-4974-9560-ef93ad51d58z"
          },
          "campaign_type": {
            "type": "string",
            "description": "Identifies the email campaign type.",
            "example": "Newsletter"
          },
          "last_sent_date": {
            "type": "string",
            "description": "The date and time that the email campaign was last sent.",
            "format": "date-time",
            "example": "2019-04-25T11:08:00.000Z"
          },
          "unique_counts": {
            "$ref": "#/components/schemas/UniqueEmailCounts"
          }
        }
      },
      "UniqueEmailCounts": {
        "required": [
          "abuse",
          "bounces",
          "clicks",
          "forwards",
          "not_opened",
          "opens",
          "optouts",
          "sends"
        ],
        "type": "object",
        "properties": {
          "sends": {
            "type": "integer",
            "description": "The total number of unique sends.",
            "format": "int32",
            "example": 3129
          },
          "opens": {
            "type": "integer",
            "description": "The total number of unique opens.",
            "format": "int32",
            "example": 1672
          },
          "clicks": {
            "type": "integer",
            "description": "The total number of unique clicks.",
            "format": "int32",
            "example": 256
          },
          "forwards": {
            "type": "integer",
            "description": "The total number of unique forwards.",
            "format": "int32",
            "example": 21
          },
          "optouts": {
            "type": "integer",
            "description": "The total number of unique optouts (unsubscribes).",
            "format": "int32",
            "example": 3
          },
          "abuse": {
            "type": "integer",
            "description": "The total number of unique abuse count (spam).",
            "format": "int32",
            "example": 1
          },
          "bounces": {
            "type": "integer",
            "description": "The total number of unique bounce count.",
            "format": "int32",
            "example": 210
          },
          "not_opened": {
            "type": "integer",
            "description": "The total number of unique non-opens",
            "format": "int32",
            "example": 1211
          }
        }
      },
      "CampaignStatsQueryResultEmail": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "An array of errors indicating any partial failures in the query.",
            "items": {
              "$ref": "#/components/schemas/StatsError"
            }
          },
          "results": {
            "type": "array",
            "description": "An array of results listing statistics for each requested <code>campaign_id</code>.",
            "items": {
              "$ref": "#/components/schemas/CampaignStatsResultGenericStatsEmailPercentsEmail"
            }
          }
        }
      },
      "StatsError": {
        "type": "object",
        "properties": {
          "error_key": {
            "type": "string",
            "description": "The unique error key.",
            "example": "reportingsvc.not_found.invalid_path_param.campaign_ids."
          },
          "error_message": {
            "type": "string",
            "description": "A error description.",
            "example": "Could not find any campaign stats for all requested campaigns."
          }
        }
      },
      "CampaignStatsResultGenericStatsEmailPercentsEmail": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "The ID that uniquely identifies the campaign (UUID).",
            "example": "82ee2c37-c8f8-4974-9560-ef93ad51d58z"
          },
          "stats": {
            "$ref": "#/components/schemas/StatsEmail"
          },
          "percents": {
            "$ref": "#/components/schemas/PercentsEmail"
          },
          "last_refresh_time": {
            "type": "string",
            "description": "The date and time that the campaign stats were last refreshed.",
            "format": "date-time",
            "example": "2015-08-25T22:00:09.908Z"
          }
        }
      },
      "StatsEmail": {
        "type": "object",
        "properties": {
          "em_bounces": {
            "type": "integer",
            "description": "Number of unique email bounces.",
            "format": "int32",
            "example": 10
          },
          "em_clicks": {
            "type": "integer",
            "description": "Number of unique recipients who clicked any link in the email.",
            "format": "int32",
            "example": 280
          },
          "em_clicks_all": {
            "type": "integer",
            "description": "Total number of non-unique email clicks.",
            "format": "int32",
            "example": 387
          },
          "em_clicks_all_computer": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a standard desktop or laptop computer.",
            "format": "int32",
            "example": 123
          },
          "em_clicks_all_mobile": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone).",
            "format": "int32",
            "example": 211
          },
          "em_clicks_all_tablet": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a small tablet type computer (e.g. iPad).",
            "format": "int32",
            "example": 85
          },
          "em_clicks_all_other": {
            "type": "integer",
            "description": "Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable).",
            "format": "int32",
            "example": 4
          },
          "em_clicks_all_none": {
            "type": "integer",
            "description": "Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored.",
            "format": "int32",
            "example": 2
          },
          "em_forwards": {
            "type": "integer",
            "description": "Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails).",
            "format": "int32",
            "example": 39
          },
          "em_not_opened": {
            "type": "integer",
            "description": "Number of unique recipients who did not open the email. This is calculated as follows: <code>em_not_opened</code> is equal to <code>em_sends - em_opens - em_bounces</code>. This value is reported as zero if the calculation results in a negative value.",
            "format": "int32",
            "example": 25
          },
          "em_opens": {
            "type": "integer",
            "description": "Number of unique recipients who opened the email.",
            "format": "int32",
            "example": 220
          },
          "em_opens_all": {
            "type": "integer",
            "description": "Total number of non-unique email opens.",
            "format": "int32",
            "example": 399
          },
          "em_opens_all_computer": {
            "type": "integer",
            "description": "Number of non-unique email opens on a standard desktop or laptop computer.",
            "format": "int32",
            "example": 65
          },
          "em_opens_all_mobile": {
            "type": "integer",
            "description": "Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone).",
            "format": "int32",
            "example": 270
          },
          "em_opens_all_tablet": {
            "type": "integer",
            "description": "Number of non-unique email opens on a small tablet type computer (e.g. iPad).",
            "format": "int32",
            "example": 199
          },
          "em_opens_all_other": {
            "type": "integer",
            "description": "Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable).",
            "format": "int32",
            "example": 10
          },
          "em_opens_all_none": {
            "type": "integer",
            "description": "Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored.",
            "format": "int32",
            "example": 2
          },
          "em_optouts": {
            "type": "integer",
            "description": "Number of unique recipients who unsubscribed due to this email.",
            "format": "int32",
            "example": 2
          },
          "em_sends": {
            "type": "integer",
            "description": "Number of unique email sends.",
            "format": "int32",
            "example": 308
          }
        }
      },
      "PercentsEmail": {
        "type": "object",
        "properties": {
          "bounce": {
            "type": "number",
            "description": "Percentage of emails sent to unique recipients that bounced.",
            "example": 0
          },
          "click": {
            "type": "number",
            "description": "Percentage of recipients who opened the email who also clicked one or more links in it.",
            "example": 40
          },
          "desktop_click": {
            "type": "number",
            "description": "Percentage of clicks that came from a standard desktop or laptop computer.",
            "example": 10
          },
          "desktop_open": {
            "type": "number",
            "description": "Percentage of opens that came from a standard desktop or laptop computer.",
            "example": 20
          },
          "did_not_open": {
            "type": "number",
            "description": "Percentage of recipients that received the email (did not bounce) but did not open it.",
            "example": 30
          },
          "mobile_click": {
            "type": "number",
            "description": "Percentage of clicks that came from a mobile phone, tablet computer, or similar small mobile device (e.g. iPhone or iPad).",
            "example": 40
          },
          "mobile_open": {
            "type": "number",
            "description": "Percentage of opens that came from a mobile phone, tablet computer, or similar small mobile device (e.g. iPhone or iPad).",
            "example": 10
          },
          "open": {
            "type": "number",
            "description": "Percentage of recipients that received the email (did not bounce) and opened it.",
            "example": 70
          },
          "unsubscribe": {
            "type": "number",
            "description": "Percentage of recipients that received the email (did not bounce) and chose to unsubscribe.",
            "example": 0
          }
        }
      },
      "CampaignActivityStatsQueryResultEmail": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors indicating any partial failures in the query",
            "items": {
              "$ref": "#/components/schemas/StatsError"
            }
          },
          "results": {
            "type": "array",
            "description": "An array of results containing statistics for each requested campaign activity",
            "items": {
              "$ref": "#/components/schemas/CampaignActivityStatsResultGenericStatsEmailActivity"
            }
          }
        }
      },
      "CampaignActivityStatsResultGenericStatsEmailActivity": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "The unique ID used to identify the campaign (UUID)."
          },
          "campaign_activity_id": {
            "type": "string",
            "description": "The unique ID used to identify the campaign activity (UUID)."
          },
          "stats": {
            "$ref": "#/components/schemas/StatsEmailActivity"
          },
          "last_refresh_time": {
            "type": "string",
            "description": "The time at which the campaign activity stats were last refreshed in ISO 8601 format (e.g. '2015-08-25T22:00:09.908Z')."
          }
        }
      },
      "StatsEmailActivity": {
        "type": "object",
        "properties": {
          "em_bounces": {
            "type": "integer",
            "description": "Number of unique email bounces.",
            "format": "int32",
            "example": 10
          },
          "em_clicks": {
            "type": "integer",
            "description": "Number of unique recipients who clicked any link in the email.",
            "format": "int32",
            "example": 280
          },
          "em_clicks_all": {
            "type": "integer",
            "description": "Total number of non-unique email clicks.",
            "format": "int32",
            "example": 387
          },
          "em_clicks_all_computer": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a standard desktop or laptop computer.",
            "format": "int32",
            "example": 123
          },
          "em_clicks_all_mobile": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone).",
            "format": "int32",
            "example": 211
          },
          "em_clicks_all_tablet": {
            "type": "integer",
            "description": "Number of non-unique email clicks on a small tablet type computer (e.g. iPad).",
            "format": "int32",
            "example": 85
          },
          "em_clicks_all_other": {
            "type": "integer",
            "description": "Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable).",
            "format": "int32",
            "example": 4
          },
          "em_clicks_all_none": {
            "type": "integer",
            "description": "Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored.",
            "format": "int32",
            "example": 2
          },
          "em_forwards": {
            "type": "integer",
            "description": "Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails).",
            "format": "int32",
            "example": 39
          },
          "em_not_opened": {
            "type": "integer",
            "description": "Number of unique recipients who did not open the email. This is calculated as follows: <code>em_not_opened</code> is equal to <code>em_sends - em_opens - em_bounces</code>. This value is reported as zero if the calculation results in a negative value.",
            "format": "int32",
            "example": 25
          },
          "em_opens": {
            "type": "integer",
            "description": "Number of unique recipients who opened the email.",
            "format": "int32",
            "example": 220
          },
          "em_opens_all": {
            "type": "integer",
            "description": "Total number of non-unique email opens.",
            "format": "int32",
            "example": 399
          },
          "em_opens_all_computer": {
            "type": "integer",
            "description": "Number of non-unique email opens on a standard desktop or laptop computer.",
            "format": "int32",
            "example": 65
          },
          "em_opens_all_mobile": {
            "type": "integer",
            "description": "Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone).",
            "format": "int32",
            "example": 270
          },
          "em_opens_all_tablet": {
            "type": "integer",
            "description": "Number of non-unique email opens on a small tablet type computer (e.g. iPad).",
            "format": "int32",
            "example": 199
          },
          "em_opens_all_other": {
            "type": "integer",
            "description": "Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable).",
            "format": "int32",
            "example": 10
          },
          "em_opens_all_none": {
            "type": "integer",
            "description": "Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored.",
            "format": "int32",
            "example": 2
          },
          "em_optouts": {
            "type": "integer",
            "description": "Number of unique recipients who unsubscribed due to this email.",
            "format": "int32",
            "example": 2
          },
          "em_sends": {
            "type": "integer",
            "description": "Number of unique email sends.",
            "format": "int32",
            "example": 308
          },
          "em_abuse": {
            "type": "integer",
            "description": "Number of abuse (spam) complaints received.",
            "format": "int32",
            "example": 1
          },
          "em_bounces_blocked": {
            "type": "integer",
            "description": "Unique number bounced because as blocked by the receiving system.",
            "format": "int32",
            "example": 1
          },
          "em_bounces_mailbox_full": {
            "type": "integer",
            "description": "Unique number that bounced back with a mailbox full message.",
            "format": "int32",
            "example": 2
          },
          "em_bounces_nonexistent_address": {
            "type": "integer",
            "description": "Unique number that bounced as a non-existent address.",
            "format": "int32",
            "example": 3
          },
          "em_bounces_other": {
            "type": "integer",
            "description": "Unique number that bounced without an identifiable cause.",
            "format": "int32",
            "example": 2
          },
          "em_bounces_suspended": {
            "type": "integer",
            "description": "Unique number that bounced as suspended. Email address bounces as suspended when multiple non-existent bounces have been received for the same address.",
            "format": "int32",
            "example": 1
          },
          "em_bounces_undeliverable": {
            "type": "integer",
            "description": "Unique number that bounced as undeliverable.",
            "format": "int32",
            "example": 19
          },
          "em_bounces_vacation": {
            "type": "integer",
            "description": "Unique number that bounced back with a vacation or out of office autoreply.",
            "format": "int32",
            "example": 2
          }
        }
      },
      "PartnerAccount": {
        "required": [
          "site_owner_list"
        ],
        "type": "object",
        "properties": {
          "site_owner_list": {
            "type": "array",
            "description": "Lists all Constant Contact client accounts that are managed under a partner account.",
            "items": {
              "type": "object",
              "properties": {
                "encoded_account_id": {
                  "type": "string",
                  "description": "The obfuscated ID used to uniquely identify a client account.",
                  "readOnly": true,
                  "example": "a08e1izvh8t9"
                },
                "subscriber_count": {
                  "type": "integer",
                  "description": "The total number of subscriber contacts that are associated with a client account.",
                  "format": "int64",
                  "readOnly": true,
                  "example": 65
                },
                "organization_name": {
                  "type": "string",
                  "description": "The name of the organization associated with this client account.",
                  "readOnly": true,
                  "example": "Zenomatic"
                },
                "site_owner_name": {
                  "type": "string",
                  "description": "The user name that identifies a client account.",
                  "readOnly": true,
                  "example": "Zen1016153"
                },
                "billing_status": {
                  "type": "string",
                  "description": "The client's account billing status. When you first create a client account the `billing status` defaults to `Trial`. Billing status values include: <ul>\n  <li><code>Trial</code> - A non-paying trial client account (default value).</li>\n  <li><code>Open</code> - An active and paying client account.</li>\n  <li><code>Canceled</code> - A canceled client account.</li>\n  <li><code>Trial End</code> - The trial period has ended for this client account.</li>\n</ul>",
                  "readOnly": true,
                  "example": "Open",
                  "enum": [
                    "Trial",
                    "Open",
                    "Canceled",
                    "Trial End"
                  ]
                },
                "last_login_date": {
                  "type": "string",
                  "description": "The system generated date and time (ISO-8601) showing when the client last logged into their Constant Contact account. If a client has not logged into their account, the value is `null`. This property does not display in the results.",
                  "format": "date-time",
                  "readOnly": true,
                  "example": "2019-04-25T11:08:00.000Z"
                }
              }
            }
          },
          "_links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        }
      },
      "PaginationLinks": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Link_2"
          }
        }
      },
      "Link_2": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          }
        }
      },
      "Provision": {
        "required": [
          "contact_email",
          "country_code",
          "login_name",
          "state_code"
        ],
        "type": "object",
        "properties": {
          "contact_email": {
            "maxLength": 80,
            "type": "string",
            "description": "A valid email address to associate with the client account.",
            "example": "clients_email@gmail.com"
          },
          "contact_phone": {
            "maxLength": 25,
            "minLength": 5,
            "type": "string",
            "description": "The contact phone number to associate with the client account.",
            "example": "588-768-6868"
          },
          "country_code": {
            "maxLength": 3,
            "minLength": 2,
            "type": "string",
            "description": "The two-letter country code (ISO 3166-1 code) that specifies the country in which the client resides.",
            "example": "US"
          },
          "organization_name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The name of organization that identifies the client account.",
            "example": "Hanks Fresh Fruit Delivery"
          },
          "organization_phone": {
            "maxLength": 25,
            "minLength": 5,
            "type": "string",
            "description": "The organization phone number. To set the organization phone number using the user interface, select <b>My Settings</b> and in the <b>Organization Information</b> section, select <b>Edit Organization Information</b>.",
            "example": "401-244-1000"
          },
          "state_code": {
            "type": "string",
            "description": "The two-letter state code that represents the US state (<code>country_code</code> is <code>US</code> ) or Canadian province (<code>country_code</code> is <code>CA</code>) where the client's organization is physically located. Leave the <code>state_code</code> blank for non-US states and Canadian provinces.",
            "example": "MA"
          },
          "time_zone_id": {
            "type": "string",
            "description": "The offical time zone to use to represent the physical location associated with the client account.",
            "example": "US/Eastern"
          },
          "website": {
            "type": "string",
            "description": "The client's website URL. Specifying the website URL eliminates the need for clients to provide that information. Requires a valid URL starting with http:// or https://.",
            "example": "http://your.company.website"
          },
          "login_name": {
            "maxLength": 50,
            "minLength": 6,
            "type": "string",
            "description": "A unique login name to associate with the client account. The name must only contain alphanumeric characters and '-', '_', '@','.','+'. ",
            "example": "hank_smith"
          },
          "password": {
            "maxLength": 80,
            "minLength": 6,
            "type": "string",
            "description": "Required if not using Single Sign On (SSO) or external authenticator. The password to associate with the client account. Passwords must be a minimum of six characters in length and have no spaces. The password is not returned in the response payload for security reasons. If using SSO authentication, use <code>external_provider</code> and <code>external_id</code> instead of <code>password</code>.",
            "example": "123456789"
          },
          "first_name": {
            "maxLength": 80,
            "minLength": 2,
            "type": "string",
            "description": "The client account owner's first name.",
            "example": "Hank"
          },
          "last_name": {
            "maxLength": 80,
            "minLength": 2,
            "type": "string",
            "description": "The client account owner's last name.",
            "example": "Smith"
          },
          "partner_account_id": {
            "maxLength": 80,
            "type": "string",
            "description": "The unique client account identifier that partners define and use for billing and reporting purposes.",
            "example": "partner1234"
          },
          "billing_locale": {
            "type": "string",
            "description": "The currency to use when billing the client account. Valid values are: <code>en_US</code> (default, US Dollars) or <code>en_GB</code> (British Pounds).",
            "example": "en_US."
          },
          "managed_site_owner": {
            "type": "boolean",
            "description": "By default, if the client account is setup as a managed account <code>managed_site_owner</code> is automatically set to <code>true</code> and attempting to override the setting with <code>false</code> is ignored. This helps to avoid getting an account into an unknown state.",
            "example": true
          },
          "enable_single_billing": {
            "type": "boolean",
            "description": "If a partner account is setup to allow for single billing and the <code>managed_site_owner</code> property is set to <code>true</code>, use this property to enable the single billing feature for the client account. See your account manager for more information.",
            "example": true
          },
          "gdpr_opt_out": {
            "type": "boolean",
            "description": "When creating accounts for users who have opted-out of any marketing communications, set  the <code> gdpr_opt_out</code>  to <code>true</code>  so that Constant Contact does not send any marketing communications to the account.",
            "example": true
          },
          "external_id": {
            "maxLength": 255,
            "type": "string",
            "description": "The ID used to uniquely identify the client account for the external authenticator. Do not use the <code>password</code> property when using an external authenticator.",
            "example": "123456789123456789"
          },
          "external_provider": {
            "maxLength": 80,
            "type": "string",
            "description": "The name of the provider who externally authenticates this customer. For example, PayPal or Yahoo. Do not use the <code>password</code> property when using an external authenticator.",
            "example": "Yahoo"
          }
        }
      },
      "ProvisionResponse": {
        "type": "object",
        "properties": {
          "encoded_account_id": {
            "type": "string",
            "description": "The system generated ID used to uniquely identify a client account.",
            "example": "a08e1izzh8t9"
          },
          "provision_uuid": {
            "type": "string",
            "description": "The system generated ID used to uniquely identify the provisioning of a client account.",
            "example": "x9xx2ede-5a58-4e23-8168-25930c5x7bxb"
          }
        }
      },
      "PlanTiersObject": {
        "type": "object",
        "properties": {
          "plan_type": {
            "type": "string",
            "description": "The billing plan that is associated with a client's Constant Contact account. The billing plan determines which Constant Contact product features that the client account can access. <ul>\n  <li><code>TRIAL</code>: A non-billed account with an expiration date that allows clients to try limited Constant Contact product features.</li>\n  <li><code>GOOD</code>: A billed <b>Email</b> client account plan.</li>\n  <li><code>BETTER</code>: A billed <b>Email Plus</b> client account plan.</li>\n  <li><code>BEST</code>: A billed <b>Personal Marketer</b> client account plan.</li>\n  <li><code>LITE</code>: A <b>Website Builder</b> client account plan.</li>\n</ul>",
            "example": "GOOD",
            "enum": [
              "TRIAL",
              "GOOD",
              "BETTER",
              "BEST",
              "LITE"
            ]
          },
          "current_tiers": {
            "type": "array",
            "description": "Lists the billing plan tiers that are currently associated with a client account.",
            "items": {
              "$ref": "#/components/schemas/TierObject"
            }
          },
          "billing_status": {
            "type": "string",
            "description": "The client's account billing status. When you first create a client account the <code>billing_status</code> defaults to <code>Trial</code>. Billing status values include:\n  <ul>\n    <li><code>Trial</code> - A non-paying trial client account (default value).</li>\n    <li><code>Open</code> - An active and paying client account.</li>\n    <li><code>Canceled</code> - A canceled client account.</li>\n    <li><code>Trial End</code> - The trial period has ended for this client account.</li>\n  </ul>",
            "example": "Open",
            "enum": [
              "Trial",
              "Open",
              "Canceled",
              "Trial End"
            ]
          },
          "billing_day_of_month": {
            "type": "integer",
            "description": "This property is required when an account is not set up to use single billing. For trial accounts, the value is intially set to <code>null</code>. The value can only be changed when changing the <code>plan_type</code> from a trial account to a different type of plan, otherwise the value you enter is ignored. You can choose to enter a specific day of month or except the default value, which is the day that the <code>plan_type</code> value changes from a trial account plan to a different plan. Valid <code>billing_day_of_month</code> values include <code>1</code> through and including <code>31</code>.",
            "format": "int32",
            "example": 15
          }
        },
        "description": "Specifies client billing plan details including the type of plan, the plan tiers used, the current billing status, and the day of the month that the client is billed. When a client account is first provisioned, the `plan_type` defaults to a `Trial` account. After you change an account `billing_status` from `Trial` to any other `billing_status`, you cannot change it back to a `Trial` account."
      },
      "TierObject": {
        "type": "object",
        "properties": {
          "usage_type": {
            "type": "string",
            "description": "Identifies the tier usage type that is associated with the billing plan.",
            "readOnly": true,
            "example": "CONTACTS",
            "default": "CONTACTS"
          },
          "current_usage": {
            "type": "number",
            "description": "The number of active contacts (default) used within the current tier.",
            "format": "float",
            "readOnly": true,
            "example": 10
          },
          "tier": {
            "type": "integer",
            "description": "The billing tier level that is associated with a client account. By default, the system determines the tier level to use based on the number of active contacts currently in the client account at the time of billing. Billing tiers may differ. The following shows an example billing tier: <ul>\n  <li>level <code>1</code> = 0 - 500 contacts</li>\n  <li>level <code>2</code> = 501 - 1000 contacts</li>\n  <li>level <code>3</code> = 1001 - ...</li>\n</ul>",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "tier_min": {
            "type": "number",
            "description": "The minimum number of active contacts for the tier level.",
            "format": "float",
            "readOnly": true,
            "example": 0
          },
          "tier_max": {
            "type": "number",
            "description": "The maximum number of active contacts for the tier level.",
            "format": "float",
            "readOnly": true,
            "example": 500
          },
          "price": {
            "type": "number",
            "description": "The billing price set for the tier used to bill the client account each month.",
            "format": "float",
            "readOnly": true,
            "example": 20
          },
          "currency_code": {
            "type": "string",
            "description": "The currency (ISO currency code) used to price the tier for a client account.",
            "readOnly": true,
            "example": "USD"
          }
        },
        "description": "The usage tier that is associated with a client's Constant Contact account and is used to calculate the monthly billing price."
      },
      "PlanInfo": {
        "type": "object",
        "properties": {
          "plan_type": {
            "type": "string",
            "description": "The type of billing plan (<code>plan_type</code>) to associate with a client's Constant Contact account. The type of billing plan determines which Constant Contact product features that the client account can access. The billing plan type that you enter must already exist in your plan group or a 400 error message is returned. After changing the <code>plan_type</code> from <code>TRIAL</code> to any other billing plan type, you cannot change it back to <code>TRIAL</code>.\n  <ul>\n    <li><code>TRIAL</code>: A non-billed account with an expiration date that allows clients to try Constant Contact product features.</li>\n    <li><code>GOOD</code>: A billed <b>Email</b> client account plan.</li>\n    <li><code>BETTER</code>: A billed <b>Email Plus</b> client account plan.</li>\n    <li><code>BEST</code>: A billed <b>Personal Marketer</b> client account plan.</li>\n    <li><code>LITE</code>: A <b>Website Builder</b> client account plan.</li>\n  </ul>",
            "example": "GOOD",
            "enum": [
              "TRIAL",
              "GOOD",
              "BETTER",
              "BEST",
              "LITE"
            ]
          },
          "billing_day_of_month": {
            "type": "integer",
            "description": "This property is required if a client account is not set up to use single billing. You can choose to enter a specific day of the month or accept the default value, which is the day on which the <code>plan_type</code> value changes from a <code>TRIAL</code> plan to a different <code>plan_type</code>. For trial accounts, the value defaults to null. You can only change the <code>billing_day_of_month</code> when changing the <code>plan_type</code> value from <code>TRIAL</code> to a different <code>plan_type</code>, otherwise the value you enter is ignored.",
            "format": "int32",
            "example": 15
          }
        },
        "description": "Specifies the type of billing plan (`plan_type`) and the billing date (`billing_day_of_month`) used for a client account."
      },
      "AccountCancellation": {
        "type": "object",
        "properties": {
          "reason_id": {
            "type": "integer",
            "description": "Specifies the reason that the client is canceling their Constant Contact account as follows:\n  <ul>\n    <li><code>1</code>  Cost Too High</li>\n    <li><code>2</code>  Using A Competitive Service</li>\n    <li><code>3</code>  Not Doing Email Marketing</li>\n    <li><code>11</code> Something Missing Or Not Working </li>\n    <li><code>12</code> Doing It In-House</li>\n    <li><code>14</code> Poor Results</li>\n    <li><code>21</code> Too Difficult To Use</li>\n    <li><code>27</code> Canceled Online by Customer</li>\n    <li><code>30</code> Dissatisfied With Billing Policies</li>\n  </ul>",
            "format": "int32",
            "example": 1,
            "enum": [
              1,
              2,
              3,
              11,
              12,
              14,
              21,
              27,
              30
            ]
          },
          "effective_date": {
            "type": "string",
            "description": "The client account cancellation date and time in ISO-8601 format.",
            "format": "date-time",
            "example": "2020-02-06T22:09:15.000Z"
          }
        },
        "description": "Specifies the date and time a client requests to cancel their Constant Contact account and changes the account `billing_status` to `Canceled`. By default, this is the current date and time in ISO format. In the request body, you can optionally specify a future cancellation date (in ISO format) and a reason (`reason_code`) that the client wants to cancel their account."
      },
      "PartnerAccountOperationsRequest": {
        "required": [
          "account_operation_method",
          "account_operation_url"
        ],
        "type": "object",
        "properties": {
          "account_operation_url": {
            "type": "string",
            "description": "The API method path for the request you are sending on behalf of a managed child account. This value should be a V3 API URL without the https://api.cc.email/v3 base url and with any path parameter names included. For example: <code>/emails/activities/{campaign_activity_id}</code>.",
            "example": "/contacts/{contact_id}"
          },
          "account_operation_method": {
            "type": "string",
            "description": "The http method for the request you are sending on behalf of a managed child account.",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          "account_operation_payload": {
            "type": "string",
            "description": "The request payload for the request you are sending on behalf of a managed child account. If you provide a JSON payload using this parameter, make sure that the JSON is string escaped.",
            "example": ""
          },
          "account_operation_query_parameters": {
            "type": "array",
            "description": "An array containing the query parameters for the request you are sending on behalf of a managed child account.",
            "items": {
              "$ref": "#/components/schemas/QueryParamObject"
            }
          },
          "account_operation_path_parameters": {
            "type": "array",
            "description": "An array containing the path parameters for the request you are sending on behalf of a managed child account.",
            "items": {
              "$ref": "#/components/schemas/PathParamObject"
            }
          },
          "account_operation_headers": {
            "type": "array",
            "description": "An array containing the headers for the request you are sending on behalf of a managed child account.",
            "items": {
              "$ref": "#/components/schemas/HeadersObject"
            }
          }
        },
        "description": "JSON object that contains the fields Constant Contact uses to construct the HTTP request you are sending on behalf of a managed account."
      },
      "QueryParamObject": {
        "type": "object",
        "properties": {
          "query_param_key": {
            "type": "string",
            "description": "The name of the query parameter.",
            "example": "include"
          },
          "query_param_value": {
            "type": "string",
            "description": "The value of the query parameter.",
            "example": "list_memberships"
          }
        }
      },
      "PathParamObject": {
        "type": "object",
        "properties": {
          "path_param_key": {
            "type": "string",
            "description": "The name of the path parameter.",
            "example": "contact_id"
          },
          "path_param_value": {
            "type": "string",
            "description": "The value of the path parameter.",
            "example": "04fe9a-a579-43c5-bb1a-58ed29bf0a6a"
          }
        }
      },
      "HeadersObject": {
        "type": "object",
        "properties": {
          "header_key": {
            "type": "string",
            "description": "The name of the header.",
            "example": "Accept"
          },
          "header_value": {
            "type": "string",
            "description": "The value of the header.",
            "example": "application/json"
          }
        }
      },
      "WebhooksSubscriptionCollection": {
        "type": "array",
        "description": "An array of webhook subscriptions.",
        "items": {
          "type": "object",
          "properties": {
            "topic_id": {
              "type": "integer",
              "description": "Identifies the topic using an integer to indicate the type of topic.",
              "example": 2
            },
            "hook_uri": {
              "type": "string",
              "description": "Your webhook callback URI. Constant Contact automatically sends POST requests to this URI to notify you about the topic.",
              "example": "https://www.examplename.com/webhooks/billingTier"
            },
            "topic_name": {
              "type": "string",
              "description": "The name of the topic.",
              "example": "Billing Tier Downgrade"
            },
            "topic_description": {
              "type": "string",
              "description": "A description of what the topic is and when Constant Contact notifies you concerning it.",
              "example": "Executes when an account's billing tier is downgraded."
            }
          }
        }
      },
      "WebhooksSubscriptionResponse": {
        "type": "object",
        "properties": {
          "topic_id": {
            "type": "integer",
            "description": "Identifies the topic using an integer to indicate the type of topic.",
            "example": 2
          },
          "hook_uri": {
            "type": "string",
            "description": "Your webhook callback URI. Constant Contact automatically sends POST requests to this URI to notify you about the topic.",
            "example": "https://www.examplename.com/webhooks/billingTier"
          },
          "topic_name": {
            "type": "string",
            "description": "The name of the topic.",
            "example": "Billing Tier Downgrade"
          },
          "topic_description": {
            "type": "string",
            "description": "A description of what the topic is and when Constant Contact notifies you concerning it.",
            "example": "Executes when an account's billing tier is downgraded."
          }
        }
      },
      "WebhooksSubscriptionBody": {
        "type": "object",
        "properties": {
          "hook_uri": {
            "type": "string",
            "description": "The callback URI you would like to use to receive webhook notifications. Constant Contact will automatically send POST notifications about your chosen topic to this URI.",
            "example": "https://www.examplename.com/webhooks/billingTier"
          }
        }
      },
      "WebhooksSubscriptionPutResp": {
        "type": "object",
        "properties": {
          "topic_id": {
            "type": "integer",
            "description": "Identifies the topic using an integer to indicate the type of topic.",
            "example": 1
          },
          "hook_uri": {
            "type": "string",
            "description": "Your webhook callback URI. Constant Contact automatically sends POST requests to this URI to notify you about the topic.",
            "example": "https://www.examplename.com/webhooks/billingTier"
          }
        }
      },
      "WebhooksTestSend": {
        "type": "object",
        "properties": {
          "topic_id": {
            "type": "integer",
            "description": "Identifies the topic using an integer to indicate the type of topic.",
            "example": 2
          },
          "hook_uri": {
            "type": "string",
            "description": "The webhook callback URI. Constant Contact automatically sends POST requests to this URI to notify you about the topic.",
            "example": "https://www.examplename.com/webhooks/billingTier"
          },
          "topic_name": {
            "type": "string",
            "description": "The name of the topic.",
            "example": "Billing Tier Downgrade"
          },
          "topic_description": {
            "type": "string",
            "description": "A description of what the topic is and when Constant Contact notifies you concerning it. When you use the test send API method, Constant Contact will immediately send a test event to you.",
            "example": "Executes when an account's billing tier is downgraded."
          }
        }
      },
      "MyLibraryFileCollection": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Identifies the MyLibrary file."
            },
            "name": {
              "type": "string",
              "description": "The file name."
            },
            "height": {
              "type": "integer",
              "description": "The image height."
            },
            "width": {
              "type": "integer",
              "description": "The image width."
            },
            "size": {
              "type": "integer",
              "description": "The image size."
            },
            "url": {
              "type": "string",
              "description": "The image URL."
            },
            "description": {
              "type": "string",
              "description": "The image description."
            },
            "folder": {
              "type": "string",
              "description": "The image folder"
            },
            "source": {
              "type": "string",
              "description": "The application that uploaded this image.",
              "enum": [
                "MyComputer",
                "StockImage",
                "Facebook",
                "Instagram",
                "Bigstock",
                "Mobile",
                "Artwork",
                "Canva"
              ]
            },
            "type": {
              "type": "string",
              "description": "The image format.",
              "enum": [
                "GIF",
                "JPG",
                "PDF",
                "PNG",
                "DOC",
                "DOCX",
                "XLS",
                "XLSX",
                "PPT",
                "PPTX"
              ]
            },
            "status": {
              "type": "string",
              "description": "The image status.",
              "enum": [
                "Active",
                "Processing",
                "VirusFound",
                "Deleted",
                "Purged",
                "Failed"
              ]
            },
            "thumbnail": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "integer",
                  "description": "Thumbnail width.",
                  "format": "int32"
                },
                "height": {
                  "type": "integer",
                  "description": "Thumbnail height.",
                  "format": "int32"
                },
                "url": {
                  "type": "string",
                  "description": "Thumbnail url."
                }
              }
            },
            "image": {
              "type": "boolean",
              "description": "Boolean indicating if this file is an image."
            },
            "folder_id": {
              "type": "integer",
              "description": "Identifies a folder in MyLibrary.",
              "format": "int32"
            },
            "external_url": {
              "type": "string",
              "description": "The external url for the file."
            },
            "modified_date": {
              "type": "string",
              "description": "Identifies the time a user last modified the file."
            },
            "added_date": {
              "type": "string",
              "description": "Identifies the time a user originally added the file to MyLibrary."
            },
            "external_file_id": {
              "type": "string",
              "description": "External identifier for the file."
            }
          }
        }
      },
      "FileObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifies the MyLibrary file."
          },
          "name": {
            "type": "string",
            "description": "The file name."
          },
          "height": {
            "type": "integer",
            "description": "The image height."
          },
          "width": {
            "type": "integer",
            "description": "The image width."
          },
          "size": {
            "type": "integer",
            "description": "The image size."
          },
          "url": {
            "type": "string",
            "description": "The image URL."
          },
          "description": {
            "type": "string",
            "description": "The image description."
          },
          "folder": {
            "type": "string",
            "description": "The image folder"
          },
          "source": {
            "type": "string",
            "description": "The application that uploaded this image.",
            "enum": [
              "MyComputer",
              "StockImage",
              "Facebook",
              "Instagram",
              "Bigstock",
              "Mobile",
              "Artwork",
              "Canva"
            ]
          },
          "type": {
            "type": "string",
            "description": "The image format.",
            "enum": [
              "GIF",
              "JPG",
              "PDF",
              "PNG",
              "DOC",
              "DOCX",
              "XLS",
              "XLSX",
              "PPT",
              "PPTX"
            ]
          },
          "status": {
            "type": "string",
            "description": "THe image status.",
            "enum": [
              "Active",
              "Processing",
              "VirusFound",
              "Deleted",
              "Purged",
              "Failed"
            ]
          },
          "thumbnail": {
            "type": "object",
            "properties": {
              "width": {
                "type": "integer",
                "description": "Thumbnail width.",
                "format": "int32"
              },
              "height": {
                "type": "integer",
                "description": "Thumbnail height.",
                "format": "int32"
              },
              "url": {
                "type": "string",
                "description": "Thumbnail url."
              }
            }
          },
          "image": {
            "type": "boolean",
            "description": "Boolean indicating if this file is an image."
          },
          "folder_id": {
            "type": "integer",
            "description": "Identifies a folder in MyLibrary.",
            "format": "int32"
          },
          "external_url": {
            "type": "string",
            "description": "The external url for the file."
          },
          "modified_date": {
            "type": "string",
            "description": "Identifies the time a user last modified the file."
          },
          "added_date": {
            "type": "string",
            "description": "Identifies the time a user originally added the file to MyLibrary."
          },
          "external_file_id": {
            "type": "string",
            "description": "External identifier for the file."
          }
        }
      },
      "FileStatusArray": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The upload status."
            },
            "description": {
              "type": "string",
              "description": "File description."
            },
            "file_id": {
              "type": "integer",
              "description": "Identifies the file in MyLibrary."
            }
          }
        }
      },
      "AuthToken": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "A valid OAuth2.0 access token.",
            "example": "FCR3XvjhqjhGVftqkjkUhf66nhAn"
          }
        }
      },
      "AuthInfoResponse": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "The scopes associated with your access token as an array containing scope strings.",
            "items": {
              "type": "string",
              "enum": [
                "account_read",
                "account_update",
                "contact_data",
                "campaign_data"
              ]
            }
          }
        }
      }
    },
    "responses": {
      "Activities429ErrorResponse": {
        "description": "Too many requests. You exceeded 1,000 queued activities for this user account.",
        "content": {}
      },
      "EmailCampaigns429ErrorResponse": {
        "description": "Too many requests. You exceeded the request rate limit.",
        "content": {}
      },
      "Standard400ErrorResponse": {
        "description": "Bad request. Either the JSON was malformed or there was a data validation error.",
        "content": {}
      },
      "Standard401ErrorResponse": {
        "description": "The Access Token used is invalid.",
        "content": {}
      },
      "Standard403ErrorResponse": {
        "description": "Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.",
        "content": {}
      },
      "Standard404ErrorResponse": {
        "description": "The requested resource was not found.",
        "content": {}
      },
      "Standard405ErrorResponse": {
        "description": "Unsupported method used.",
        "content": {}
      },
      "Standard409ErrorResponse": {
        "description": "Conflict. The resource you are creating or updating conflicts with an existing resource.",
        "content": {}
      },
      "Standard415ErrorResponse": {
        "description": "Unsupported Media Type.",
        "content": {}
      },
      "Standard429ErrorResponse": {
        "description": "Too many requests. You exceeded the request rate limit.",
        "content": {}
      },
      "Standard500ErrorResponse": {
        "description": "There was a problem with our internal service.",
        "content": {}
      },
      "Standard503ErrorResponse": {
        "description": "Our internal service is temporarily unavailable.",
        "content": {}
      }
    },
    "securitySchemes": {
      "oauth2_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://api.cc.email/v3/idfed",
            "scopes": {
              "contact_data": "Read or modify contact data.",
              "campaign_data": "Read or modify email campaign data.",
              "account_read": "Read account data.",
              "account_update": "Modify account data."
            }
          }
        }
      },
      "oauth2_access_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://authz.constantcontact.com/oauth2/default/v1/authorize",
            "tokenUrl": "https://authz.constantcontact.com/oauth2/default/v1/token",
            "scopes": {
              "contact_data": "Read or modify contact data.",
              "campaign_data": "Read or modify email campaign data.",
              "account_read": "Read account data.",
              "account_update": "Modify account data.",
              "offline_access": "Enable refresh token"
            },
            "refreshUrl": "https://authz.constantcontact.com/oauth2/default/v1/token"
          }
        }
      },
      "ctctPartnerAuthorizer": {
        "type": "apiKey",
        "name": "Unnamed",
        "in": "header"
      },
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "oauth2_access_code": []
    }
  ]
}