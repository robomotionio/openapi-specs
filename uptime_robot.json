{
  "openapi": "3.0.0",
  "info": {
    "title": "Uptime Robot Api",
    "description": "UptimeRobot has an easy-to-use API. Responses are provided as XML, JSON or JSON-P. It lets you get the details of your monitors, logs, create / edit / delete monitors, alert contacts and maintenance windows. That's all.",
    "version": "v2.0",
    "contact": {
      "url": "https://uptimerobot.com/api/",
      "name": "uptimeRobot"
    }
  },
  "paths": {
    "/getAccountDetails": {
      "post": {
        "summary": "Get Account Details",
        "description": "Account details (max number of monitors that can be added and number of up/down/paused monitors) can be grabbed using this method.",
        "operationId": "getAccountDetails",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetails"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "api_key": {
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ]
              }
            }
          }
        },
        "tags": [
          "Account"
        ]
      }
    },
    "/getMonitors": {
      "post": {
        "summary": "Get Monitor information",
        "description": "This is a Swiss-Army knife type of a method for getting any information on monitors. By default, it lists all the monitors in a user's account, their friendly names, types (http, keyword, port, etc.), statuses (up, down, etc.) and uptime ratios. There are optional parameters which lets the getMonitors method to output information on any given monitors rather than all of them.",
        "operationId": "getMonitors",
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "example": "json",
                    "default": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "monitors": {
                    "type": "string",
                    "description": "optional (if not used, will return all monitors in an account. Else, it is possible to define any number of monitors with their IDs like: monitors=15830-32696-83920)"
                  },
                  "types": {
                    "type": "string",
                    "description": "optional (if not used, will return all monitors types (HTTP, keyword, ping..) in an account. Else, it is possible to define any number of monitor types like: types=1-3-4)"
                  },
                  "statuses": {
                    "type": "string",
                    "description": "optional (if not used, will return all monitors statuses (up, down, paused) in an account. Else, it is possible to define any number of monitor statuses like: statuses=2-9)"
                  },
                  "custom_uptime_ratios": {
                    "type": "string",
                    "description": "optional (defines the number of days to calculate the uptime ratio(s) for. Ex: custom_uptime_ratios=7-30-45 to get the uptime ratios for those periods)"
                  },
                  "custom_down_durations": {
                    "type": "string",
                    "description": "optional (returns the \"custom down durations\" for given periods in \"custom_uptime_ratios\")"
                  },
                  "custom_uptime_ranges": {
                    "type": "string",
                    "description": "optional (defines the ranges to calculate the uptime ratio(s) for. Ex: custom_uptime_ranges=1465440758_1466304758 to get the uptime ratios for those periods. It is possible to send multiple ranges like 1465440758_1466304758-1434682358_1434855158)"
                  },
                  "all_time_uptime_ratio": {
                    "type": "string",
                    "description": "optional (returns the \"all time uptime ratio\". It will slow down the response a bit and, if not really necessary, suggest not using it. Default is 0)",
                    "default": "0",
                    "example": "0",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "all_time_uptime_durations": {
                    "type": "string",
                    "description": "optional (returns the \"all time durations of up-down-paused events\". It will slow down the response a bit and, if not really necessary, suggest not using it. Default is 0)",
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0"
                  },
                  "logs": {
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0",
                    "description": "optional (defines if the logs of each monitor will be returned. Should be set to 1 for getting the logs. Default is 0)",
                    "type": "string"
                  },
                  "logs_start_date": {
                    "type": "string",
                    "description": "optional (works only for the Pro Plan as 24 hour+ logs are kept only in the Pro Plan, formatted as Unix time and must be used with logs_end_date)"
                  },
                  "logs_end_date": {
                    "type": "string",
                    "description": "optional (works only for the Pro Plan as 24 hour+ logs are kept only in the Pro Plan, formatted as Unix time and must be used with logs_start_date)"
                  },
                  "log_types": {
                    "type": "string",
                    "description": "optional (the types of logs to be returned with a usage like: log_types=1-2-98). If empty, all log types are returned."
                  },
                  "logs_limit": {
                    "type": "string",
                    "description": "optional (the number of logs to be returned in descending order). If empty, all logs are returned."
                  },
                  "response_times": {
                    "type": "string",
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0",
                    "description": "optional (defines if the response time data of each monitor will be returned. Should be set to 1 for getting them. Default is 0)"
                  },
                  "response_times_limit": {
                    "type": "string",
                    "description": "optional (the number of response time logs to be returned (descending order). If empty, last 24 hours of logs are returned (if response_times_start_date and response_times_end_date are not used)."
                  },
                  "response_times_average": {
                    "type": "string",
                    "description": "optional (by default, response time value of each check is returned. The API can return average values in given minutes. Default is 0. For ex: the UptimeRobot dashboard displays the data averaged/grouped in 30 minutes)",
                    "default": "0",
                    "example": "0"
                  },
                  "response_times_start_date": {
                    "type": "string",
                    "description": "optional (formatted as Unix time and must be used with response_times_end_date) (response_times_end_date - response_times_start_date can't be more than 7 days)"
                  },
                  "response_times_end_date": {
                    "type": "string",
                    "description": "optional (formatted as Unix time and must be used with response_times_start_date) (response_times_end_date - response_times_start_date can't be more than 7 days)"
                  },
                  "alert_contacts": {
                    "type": "string",
                    "description": "optional (defines if the alert contacts set for the monitor to be returned. Default is 0.)",
                    "default": "0",
                    "example": "0"
                  },
                  "mwindows": {
                    "type": "string",
                    "description": "optional (defines if the maintenance windows for the monitors will be returned. Default is 0.)",
                    "default": "0",
                    "example": "0"
                  },
                  "ssl": {
                    "type": "string",
                    "description": "optional (defines if SSL certificate info for each monitor will be returned)"
                  },
                  "custom_http_headers": {
                    "type": "string",
                    "description": "optional (defines if the custom HTTP headers of each monitor will be returned. Should be set to 1 for getting them. Default is 0)",
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0"
                  },
                  "custom_http_statuses": {
                    "type": "string",
                    "description": "optional (defines if the custom HTTP statuses of each monitor will be returned. Should be set to 1 for getting them. Default is 0)",
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "optional (defines if the user's timezone should be returned. Should be set to 1 for getting it. Default is 0)",
                    "default": "0",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "example": "0"
                  },
                  "offset": {
                    "type": "string",
                    "description": "optional (used for pagination. Defines the record to start paginating. Default is 0)",
                    "default": "0",
                    "example": "0"
                  },
                  "limit": {
                    "type": "string",
                    "description": "optional (used for pagination. Defines the max number of records to return for the response. Default and max. is 50)",
                    "default": "0",
                    "example": "0"
                  },
                  "search": {
                    "type": "string",
                    "description": "optional (a keyword of your choice to search within url and friendly_name and get filtered results)"
                  }
                }
              },
              "examples": {}
            }
          },
          "description": ""
        },
        "tags": [
          "Monitor"
        ]
      }
    },
    "/newMonitor": {
      "post": {
        "summary": "Create New Monitor",
        "description": "New monitors of any type can be created using this method.",
        "operationId": "createMonitor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "friendly_name": {
                    "type": "string",
                    "description": "name of monitor"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL to monitor"
                  },
                  "type": {
                    "type": "string",
                    "description": "type of monitor"
                  },
                  "sub_type": {
                    "type": "string",
                    "description": "optional (required for port monitoring)"
                  },
                  "port": {
                    "type": "string",
                    "description": "optional (required for port monitoring)"
                  },
                  "keyword_type": {
                    "type": "string",
                    "description": "optional (required for keyword monitoring)"
                  },
                  "keyword_case_type": {
                    "type": "string",
                    "description": "optional (for keyword monitoring)"
                  },
                  "keyword_value": {
                    "type": "string",
                    "description": "optional (required for keyword monitoring)"
                  },
                  "interval": {
                    "type": "string",
                    "description": "optional (in seconds)"
                  },
                  "timeout": {
                    "type": "string",
                    "description": "optional (in seconds, between 1 to 60) (for only HTTP, keyword, port monitor types)"
                  },
                  "http_username": {
                    "type": "string"
                  },
                  "http_password": {
                    "type": "string"
                  },
                  "http_auth_type": {
                    "type": "string",
                    "description": "optional (1 for HTTP Basic, 2 for Digest)",
                    "enum": [
                      "1",
                      "2"
                    ]
                  },
                  "post_type": {
                    "type": "string",
                    "description": "optional (key-value or raw data)"
                  },
                  "post_value": {
                    "type": "string"
                  },
                  "http_method": {
                    "type": "string"
                  },
                  "post_content_type": {
                    "type": "string"
                  },
                  "alert_contacts": {
                    "type": "string",
                    "description": "optional (the alert contacts to be notified when the monitor goes up/down.Multiple alert_contact>ids can be sent like alert_contacts=457_0_0-373_5_0-8956_2_3 where alert_contact>ids are seperated with - and threshold + recurrence are seperated with _. For ex: alert_contacts=457_5_0 refers to 457 being the alert_contact>id, 5 being the threshold and 0 being the recurrence. As the threshold and recurrence is only available in the Pro Plan, they are always 0 in the Free Plan)"
                  },
                  "mwindows": {
                    "type": "string",
                    "description": "optional (the maintenance windows for the monitor which can be mentioned with their IDs like 345-2986-71)"
                  },
                  "custom_http_headers": {
                    "type": "string",
                    "description": "optional (must be sent as a JSON object)"
                  },
                  "custom_http_statuses": {
                    "type": "string",
                    "description": "optional (must be sent as 404:0_200:1 to accept 404 as down and 200 as up)"
                  },
                  "ignore_ssl_errors": {
                    "type": "string",
                    "description": "optional (for ignoring SSL certificate related errors)"
                  }
                },
                "required": [
                  "friendly_name",
                  "url",
                  "type"
                ]
              },
              "examples": {}
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitorResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "tags": [
          "Monitor"
        ]
      }
    },
    "/editMonitor": {
      "post": {
        "summary": "Edit a Monitor",
        "description": "Monitors can be edited using this method. Important: The type of a monitor can not be edited (like changing a HTTP monitor into a Port monitor). For such cases, deleting the monitor and re-creating a new one is adviced.",
        "operationId": "editMonitor",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitorResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "example": "json",
                    "default": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "id": {
                    "type": "string",
                    "description": "required (the ID of the monitor to be edited)"
                  },
                  "friendly_name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "sub_type": {
                    "type": "string"
                  },
                  "port": {
                    "type": "string"
                  },
                  "keyword_type": {
                    "type": "string"
                  },
                  "keyword_case_type": {
                    "type": "string"
                  },
                  "keyword_value": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string",
                    "description": "optional (in seconds)"
                  },
                  "timeout": {
                    "type": "string",
                    "description": "optional (in seconds, between 1 to 60) (for only HTTP, keyword, port monitor types)"
                  },
                  "status": {
                    "type": "string",
                    "description": "optional (0 for pause, 1 for resume)",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "http_username": {
                    "type": "string"
                  },
                  "http_password": {
                    "type": "string"
                  },
                  "http_auth_type": {
                    "type": "string",
                    "description": "optional (1 for HTTP Basic, 2 for Digest)",
                    "enum": [
                      "1",
                      "2"
                    ]
                  },
                  "http_method": {
                    "type": "string"
                  },
                  "post_type": {
                    "type": "string",
                    "description": "optional (key-value or raw data)"
                  },
                  "post_value": {
                    "type": "string"
                  },
                  "post_content_type": {
                    "type": "string"
                  },
                  "alert_contacts": {
                    "type": "string",
                    "description": "optional (the alert contacts to be notified when the monitor goes up/down.Multiple alert_contact>ids can be sent like alert_contacts=457_0_0-373_5_0-8956_2_3 where alert_contact>ids are seperated with - and threshold + recurrence are seperated with _. For ex: alert_contacts=457_5_0 refers to 457 being the alert_contact>id, 5 being the threshold and 0 being the recurrence. As the threshold and recurrence is only available in the Pro Plan, they are always 0 in the Free Plan)"
                  },
                  "mwindows": {
                    "type": "string",
                    "description": "optional (the maintenance windows for the monitor which can be mentioned with their IDs like 345-2986-71)"
                  },
                  "custom_http_headers": {
                    "type": "string",
                    "description": "optional (must be sent as a JSON object)"
                  },
                  "custom_http_statuses": {
                    "type": "string",
                    "description": "optional (must be sent as 404:0_200:1 to accept 404 as down and 200 as up)"
                  },
                  "ignore_ssl_errors": {
                    "type": "string",
                    "description": "optional (for ignoring SSL certificate related errors)"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ]
      }
    },
    "/deleteMonitor": {
      "post": {
        "summary": "Delete Monitor",
        "description": "Monitors can be deleted using this method.",
        "operationId": "deleteMonitor",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitorResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "id": {
                    "type": "string",
                    "description": "required (the ID of the monitor to be deleted)"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ]
      }
    },
    "/resetMonitor": {
      "post": {
        "summary": "Reset Monitor",
        "description": "Monitors can be reset (deleting all stats and response time data) using this method.",
        "operationId": "resetMonitor",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitorResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "id": {
                    "type": "string",
                    "description": "required (the ID of the monitor to be reseted)"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Monitor"
        ]
      }
    },
    "/getAlertContacts": {
      "post": {
        "summary": "Get Alert Contacts",
        "description": "The list of alert contacts can be called with this method.",
        "operationId": "getAlertContacts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAlertContactsResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "alert_contacts": {
                    "type": "string",
                    "description": "optional (if not used, will return all alert contacts in an account. Else, it is possible to define any number of alert contacts with their IDs like: alert_contacts=236-1782-4790)"
                  },
                  "offset": {
                    "type": "string",
                    "description": "optional (used for pagination. Defines the record to start paginating. Default is 0)",
                    "default": "0"
                  },
                  "limit": {
                    "type": "string",
                    "description": "optional (used for pagination. Defines the max number of records to return for the response. Default and max. is 50)",
                    "default": "50"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Alert Contact"
        ]
      }
    },
    "/newAlertContact": {
      "post": {
        "summary": "Create new alert contact",
        "description": "New alert contacts of any type (mobile/SMS alert contacts are not supported yet) can be created using this method. The alert contacts created using the API are validated with the same way as they were created from uptimerobot.com (activation link for e-mails, tc.).",
        "operationId": "newAlertContact",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "friendly_name": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "value"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert Contact"
        ]
      }
    },
    "/editAlertContact": {
      "post": {
        "summary": "Edit alert contact",
        "description": "Alert contacts can be edited using this method.",
        "operationId": "editAlertContact",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of the alert contact to edit"
                  },
                  "value": {
                    "type": "string",
                    "description": "optional (can only be used if it is a web-hook alert contact)"
                  },
                  "friendly_name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert Contact"
        ]
      },
      "parameters": []
    },
    "/deleteAlertContact": {
      "post": {
        "summary": "Delete Alert Contact",
        "description": "Alert contacts can be deleted using this method.",
        "operationId": "deleteAlertContact",
        "parameters": [],
        "responses": {
          "200": {
            "description": "no error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad parameter"
          },
          "500": {
            "description": "server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Response format",
                    "default": "json",
                    "example": "json"
                  },
                  "noJsonCallback": {
                    "type": "string",
                    "description": "Return raw json"
                  },
                  "id": {
                    "type": "string",
                    "description": "required (the ID of the alert contact delete)"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert Contact"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.uptimerobot.com/v2"
    }
  ],
  "components": {
    "schemas": {
      "AccountDetails": {
        "type": "object",
        "properties": {
          "stat": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "monitorLimit": {
            "type": "string"
          },
          "monitorInterval": {
            "type": "string"
          },
          "upMonitors": {
            "type": "string"
          },
          "downMonitors": {
            "type": "string"
          },
          "pausedMonitors": {
            "type": "string"
          }
        }
      },
      "GetMonitorsResponse": {
        "type": "object",
        "properties": {
          "stat": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "monitors": {
            "$ref": "#/components/schemas/MonitorArray"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "MonitorArray": {
        "type": "object",
        "properties": {
          "monitor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Monitor"
            }
          }
        }
      },
      "Monitor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "friendlyname": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "keywordtype": {
            "type": "string"
          },
          "keywordvalue": {
            "type": "string"
          },
          "httpusername": {
            "type": "string"
          },
          "httppassword": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "alltimeuptimeratio": {
            "type": "string"
          },
          "customuptimeratio": {
            "type": "string"
          },
          "alertcontact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertContact"
            }
          },
          "log": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          "responsetime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseTime"
            }
          }
        }
      },
      "AlertContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "friendlyname": {
            "type": "string"
          },
          "threshold": {
            "type": "string"
          },
          "recurrence": {
            "type": "string"
          }
        }
      },
      "Log": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "datetime": {
            "type": "string"
          },
          "alertcontact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertContact"
            }
          }
        }
      },
      "ResponseTime": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "datetime": {
            "type": "string"
          }
        }
      },
      "MonitorResponse": {
        "type": "object",
        "properties": {
          "stat": {
            "type": "string"
          },
          "monitor": {
            "$ref": "#/components/schemas/Monitor"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetAlertContactsResponse": {
        "type": "object",
        "properties": {
          "stat": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "alertcontacts": {
            "$ref": "#/components/schemas/AlertContactArray"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AlertContactArray": {
        "type": "object",
        "properties": {
          "alertcontact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertContact"
            }
          }
        }
      },
      "AlertContactResponse": {
        "type": "object",
        "properties": {
          "stat": {
            "type": "string"
          },
          "alertcontact": {
            "$ref": "#/components/schemas/AlertContact"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "API Key ": {
        "name": "api_key",
        "type": "apiKey",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "API Key ": []
    }
  ],
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "Alert Contact"
    },
    {
      "name": "Monitor"
    }
  ]
}