{
  "openapi": "3.0.1",
  "info": {
    "title": "Decipher Rest API",
    "version": "1.0",
    "description": "The Decipher REST API allows comprehensive automation of your private or shared Decipher instance.\n\n# Introduction\n\nThe new Decipher API is [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). This means that a\nURL represents a certain resource or collection of resources:\n\n * a collection of surveys available to you -- `/api/v1/rh/companies/all/surveys`\n * a specific survey -- `/api/v1/surveys/your/survey`\n * a list of all users -- `/api/v1/rh/users`\n * a specific user -- `/api/v1/rh/users/joe@yourcompany.com` or `/api/rh/users/4321`\n\nThe convention is that accessing the \"collection\" URL gives you a list of resources, and appending the resource's ID\nlets you read or write that particular resource.\n\nA HTTP request to that resource will do something different depending on what HTTP method (verb) is used. This maps into\nthe classical CRUD pattern: Create (POST), Read (GET), Update (POST), Delete (DELETE).\n\n# Accessing the API\n\nAll API requests must happen over HTTPS only, with a base URL of `/api/v1/`. For example,\nyou might send a GET request to `/api/v1/surveys/your/survey/data` to get the data for your\nsurvey using the \"Data Out\" API.\n\nIn the distant future, we might upgrade the API to version 2. This will happen only if we need to make backwards incompatible\nchanges. If at all possible, new parameters to existing functions will be added with default values. Old versions will\nbe maintained for at least 3 years after being obsolete.\n\nLanguage support:\n\n * Python: https://pypi.python.org/pypi/decipher -- install using `[sudo] pip install decipher`\n\nThe Python library includes a script called `beacon` that lets you easily call the API from the command line. The\nscript will be more comfortable to use than a a tool like `curl`. Running `beacon login` will let you record\nyour API key in a file and then let you run `beacon get surveys/your/survey/datamap format=json` to get a datamap.\n\n# API Keys\n\nTo use the API, access the Portal and from your user menu select \"API access\".\nSelect \"Create API key\" to create a new key. You can have any amount of keys per account which\nmakes sense if you use the security restrictions to assign different roles and security levels to the keys.\n\nYou may further restrict the usage of the API key to only certain calls, certain IP networks and also add\nan expiry date to the key. You may also want to create a user account specifically for API calls and grant that account\naccess to a subset of your projects.\n\nThe generated key should be sent in any requests via an HTTP header named \"x-apikey\".\n\n```http\nGET /api/v1/hello\nx-apikey: 3efrh03ejve1wuv3wv3tt8xxf0ur8g7fcy25j7nkx0cgr40tfph515e7k1c8kv4r\n```\n\nIf you want to explore the API, the `beacon` script in the Python package above can be used to temporarily login to\nthe system without requiring creation of an API key. See the [documentation](https://pypi.python.org/pypi/decipher).\n\nThe API key is split into two parts: the first 32 characters are used to uniquely identify the key and never change\nonce created. The last 32 characters are the secret (or password).\n\n# Error States\n\nThe following HTTP response codes are used:\n\n + 200 - success; your data is in the response body\n + 401 - invalid authentication; your API key is invalid, expired or not valid from this IP or action\n + 402 - payment required: you have exceeded your monthly API calls\n + 403 - invalid authorization: your API key is valid but you are not allowed access to this survey\n + 404 - not found: you asked for a survey or other resource that does not exist\n + 405 - method not allowed: you tried to e.g. DELETE something that does not support deletion\n + 429 - too many concurrent requests\n + 400 - other invalid parameter not covered above, e.g. survey cannot be loaded due to an error\n\nA complete error response will look like this:\n\n```http\nHTTP/1.0 401 invalid key. Verify the spelling of your key by accessing the Research Hub\nContent-Length: 108\nContent-Type: application/json\n\n{\n \"$error\": \"invalid key. Verify the spelling of your key by accessing the Research Hub\",\n \"$code\": 401\n}\n\n```\n\nThe `201 Created` response code (as recommended by some REST guides) is not currently used.\n\n\n# Accounting\n\nThe number of API calls and resources spent for each call are tracked.\nCurrently we do not set a limit on amount of calls or resource usage for each\ncall. Future releases may have restrictions of number of monthly calls, burst\ncalls and number of simultaneous calls.\n\nEvery API response includes a header that shows number of API calls and resources used today:\n  `x-usage-today: 26 2481`\n\nYou can view a monthly usage report from your Portal \"User Links\" page.\n\n# Content-types and RESTfulness\n\nIf your HTTP library can only use the POST method, pass instead a `_method` argument set to the real method you want.\n\nThe URL to send data to always starts with the path `/api/v1/`. Afterwards you select a resource type and possibly the\nresource ID. Each resource may then have an additional action to perform. Examples:\n\n * `GET /api/v1/rh/companies/all/surveys` -- list all surveys (just as if you had accessed the Portal)\n * `GET /api/v1/surveys/demo/bapi20/datamap` -- get this survey's datamap\n * `POST /api/v1/surveys/demo/bapi20/state/close`  -- close this survey\n * `GET /api/v1/rh/apikeys` -- list API keys for your company's users\n * `GET /api/v1/rh/apikeys/12435678 ` -- get data for a specific API key\n * `DELETE  /api/v1/rh/apikeys/12435678` -- disable that key\n\nNot used REST features: caching, ETag, conditional requests (if-modified-since).\n\nThe Decipher API supports XML output, as defined by the [IBM JSONX specification](http://pic.dhe.ibm.com/infocenter/wsdatap/v6r0m0/index.jsp?topic=%2Fcom.ibm.dp.xm.doc%2Fjson_jsonx.html).\n\nTo retrieve an XML version of any resource, specify the header `accept: application/xml`. Example output:\n\n```xml\n<array xmlns=\"http://www.ibm.com/xmlns/prod/2009/jsonx\">\n  <object>\n    <null name=\"restrictions\"/>\n    <number name=\"user_id\">505</number>\n    <number name=\"calls\">0</number>\n    <string name=\"user_fullname\"></string>\n    <string name=\"created_on\">2014-09-23T18:10:43Z</string>\n    <string name=\"key\">eektgvwv8ynuuye9vfgfc36bah79v42r</string>\n    <boolean name=\"active\">true</boolean>\n    <number name=\"resource\">0</number>\n    <string name=\"user_name\">apitest</string>\n    <null name=\"user_email\"/>\n  </object>\n</array>\n```\n\nThroughout the document, [JSON terminology](http://en.wikipedia.org/wiki/JSON) is used for data types. Thus an `object`\nis a mapping of `properties` (which are always strings) to `values` (also known as \"dict\", \"dictionary\",\n\"hash\" or \"map\" in other languages):\n\n    {\"property\" : \"some_value\", \"other_property\" : [1,2,3]}\n\nAn array is a sequence of elements:\n\n    [element0, element1, element2]\n\nEach value in an array or object can be null, an object, an array, a string (which may contain any unicode character),\na number (all numbers are floating points) or a boolean constant (`true` or `false`).\n\n# Dates\n\nDate times use ISO 8601 standard.\n\nExample format:\n * 2014-01-10T20:08:08Z -- 2014, January, 10th, time is 20:08:08 and the time zone is GMT as Z alone was specified\n\n# Security\n\nA preferred option is to create a new user account for API usage with restricted access rather than user\nyour own account that will have full access. You don't have to login to that user but can create an API key\nfor them from your [API access page](https://selfserve.decipherinc.com/apps/api/keys).\n\nYou can also create any amount of restricted API keys. Restrictions can allow:\n\n * only certain API calls to be used (i.e. you may only access the user list)\n * only certain methods to those calls to be used (i.e. you may only list users, but not create new ones)\n * force parameters (i.e. you can use the datamap API but only for survey X, Y, Z)\n\nA restriction configuration is an optional Javascript object. If it is {}, there are no restrictions. Otherwise it may\ncontain the following values:\n\n * `networks`: limit access to only these IP addresses or networks. Specify an array such as `[\"1.2.3.4\"]` or `[\"5.6.7.0/24\", \"3.4.5.3\"]`.\n Each item must be an IP (v4) address only or a proper network (i.e. `5.6.7.0/24` is allowed but `5.6.7.1/24` is not: the network bits\n must be cleared).\n\nWe had an old \"data API\" that used basic authentication. That old API will eventually be deprecated.\n\n# Additional features\n\nEvery API supports simple projection to let you select a subset of data. Pass in `select` as an argument set to a\ncomma-separated list of properties to return, e.g. `select=id,login,active` to view only those 3 fields when calling\n`rh/users`.\n\nAPIs that return an array of objects can return data in Excel 2007 format instead of JSON. Pass in `contentType` set to\n`excel`. Pass in e.g. `top=5` to return only he first 5 objects of an array.\n\n# Impersonation\n\nAn API key belonging to a staff or supervisor user can change its identity to any other user for the duration fo the API call. This\nis useful when acting on behalf of that user without having to create separate API keys for each user. To perform impersonation,\nsend the `x-impersonate` header containing the email address or numeric user ID. You must be able to manage this user in the\nportal to impersonate them. Additional information about this is logged in the audit log of the impersonator and the subject.\n"
  },
  "servers": [
    {
      "url": "https://{server}/api/v1",
      "description": "Replace server with your instance domain.",
      "variables": {
        "server": {
          "default": "azkaban.decipherinc.com",
          "description": "Server domain"
        }
      }
    }
  ],
  "security": [
    {
      "APIKey": []
    }
  ],
  "tags": [
    {
      "name": "Data Feed",
      "description": "Get data from multiple live surveys using a single API endpoint\n(optionally restrict by date and survey paths). A paginated response\n(10,000 records at a time) with data will be received; once\nit’s explicitly acknowledged by another API call, next call will\nreceive new data since last call. Decipher 28. You can fetch data for\nqualified participants or all participants; you can fetch all answers\nor just e.g. UUID, source and status. You create any amount of\nsimultaneous feeds and can also get data only for a subset of surveys\nrather than all available to your user.\n"
    },
    {
      "name": "Modifying Data",
      "description": "Allows for modification of the participant data. Depending on verb selected you are either deleting/disqualifying participants,\nmodifying data of an existing participant or creating completely new participant records. This is similar to the actions possible\nthrough the \"Edit Data\" system as seen in [View/Edit Responses report](https://decipher.zendesk.com/hc/en-us/articles/360010156234)\n\nSupport for this was added in `Decipher 28`.\n\nReturn object:\n* `stats` (object): overall statistics of what happened with your data edit requested:\n    * `created` (int): number of new records created\n    * `deleted` (int): number of records deleted\n    * `disqualified` (int): number of qualified records disqualified or deleted\n    * `unseen` (int): number of rows that did not match existing records when not creating new records\n    * `rewritten` (int): records where data was modified\n    * `unchanged` (int): records where your updated data did not cause changes\n    * `inrows` (int): total amount of records processed (rewritten + unchanged + deleted + created)\n    * `fieldsIdentical` (int): data update requests not done because existing data was identical. This counts individual cells\n    * `fieldsUpdated` (int): data fields updated by the request\n    * `fieldsErronous` (int): data supplied that was not valid\n    * `fieldsIgnored` (int): cells ignored because uploading into legacy weight/record values (this is for surveys older than 2005)\n    * `fieldsProcessed` (int): total fields processed\n    * `bad` (array): invalid values detected during edit/update\n    * `rows` (int): number of fields in your input data\n    * `unmatchedDeletions` (int): records that you asked to be deleted but did not match existing records\n\n\n * `backup` (string): where is the previous version of the data? This can be restored by support or a shell user on a Beacon Cloud installation\n\nAdditional error codes:\n* 400 invalid key: the `key` supplied is not a valid variable\n* 400 bad variable \\<name\\>: some of the variables supplied in data do not exist or cannot be updated.\n\n\n**Performance notes**: The Decipher data files are geared towards analysis rather than editing and updates.\n During the data editing process, participants will be prevented from completing the survey.\n The time to complete a data edit will vary with amount of participants in the data file and number of variables but a\n typical speed is 1,000 records / 25,000 cells per second.\n\nAfter a data edit, many “cache entries” are cleared such as virtual data. If your report has a complex virtual\nquestion, the next report run might take extra time to complete.\n\n**Partial data:** Note that while you can modify partial participant data, if the participant returns and submits\nmore data which is recovered or completes, the changes will be overwritten. Deleting a partial participant will\nstop further automatic recovery, but will not prevent the participant from completing again.\n\n**Errors:** An upload of a row with data that is not correct will **not stop** the correct data from being applied. E.g. you if you\nmodify q1 to a valid value 2, and q2 to an invalid value 5 the application of q1 will still happen. If it's critical to avoid\nthis, start by modifying the data in a `test` mode first and check that `fieldsErronous` is 0.\n\n**Data:**  Each data record may include different variables. Thus it is possible to change only variable q1 for one record\nand only change q2 for another record.  Any virtual variables included in the data will be ignored.\n\n**Special fields:** The `date` field must be supplied in the server's time format and time zone. On all but 1 of Decipher servers,\nthe time format is `%m/%d/%Y %H:%M` i.e. Month, Day, Year (4 digit), then 24-hour and minute. Note that this means while\nseconds are stored in the data file, they can only be imported as 0.\n\n**Logging:** Changes through this API are logged, but do not trigger the data edit notification email.\n\n**Memory usage:** Importing a 50 megabyte file containing 1 million records each with 4 fields requires 1500 MB memory. The\noverhead comes mostly from number of cells in the data array imported at once.\n\n+ Parameters\n    + survey (string)... The survey to edit data in. You must have `data edit` permission for the project.\n    + key:`uuid` (string) - The field used to match your participant data. This should be a unique variable. Supplying a non-unique `key` will change every matching record. This is implicitly `null` when creating new records.\n    + data (array)... An array of the participant records. Each element of the array is an object with the key being the column name matching a variable name, and the value the value you want to update. You can specify any amount of variables.\n    + test =`false` (boolean,optional)... Do not execute the edit, but return the changes that would be applied at the time of the call.\n    + layout (int, optional)... The id of a custom data layout. A custom export layout can relabel fields. If you exported some data   with fields that have been relabelled in a layout and now are importing it back, you should use the same layout.\n    + allVariables =`false` (bool, optional)... Allow editing of notdp variables\n"
    },
    {
      "name": "Datasources",
      "description": "Create new questions in a survey (reporting or survey time).\nThis corresponds to [Import Data Element](https://decipher.zendesk.com/hc/en-us/articles/360010271373).\n"
    },
    {
      "name": "Datasources Data",
      "description": "Append, replace or delete data for a datasource. The data argument\ncan be either an array of objects (JSON), a tab delimited file encoded\nas a single string (utf8 only) or an Excel 2007 file encoded as base-64.\n"
    },
    {
      "name": "Research Hub",
      "description": "Examine and manage users on the system."
    },
    {
      "name": "Reporting",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Sample Management",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Distribution",
      "description": "You can receive any data as a response to your API. However what if you want to send someone an email with a PDF report? We provide a number of generic \"meta-APIs\" where you can take output of any API call and send it as an attachment via email or other means."
    },
    {
      "name": "Campaign Manager",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Question Library",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Language Manager",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Project Parameters",
      "description": "Describe this top-level section here."
    },
    {
      "name": "Web Intercepts",
      "description": "**You must have at least dashboard view permissions to access this endpoint.**\n\nThe `webconf_id` used in the below endpoints is the part of the webconf\nfilename after the dash (and before the extension) (i.e.\n`webconf-<webconf_id>.js`)\n"
    },
    {
      "name": "Translation Reservations",
      "description": "The translation reservation system is used to mark translations which have\nalready been pulled for translating and to prevent deltas from being pulled\nmultiple times.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Data Input and Output",
      "tags": [
        "Data",
        "Data Feed",
        "Response Summary",
        "Modifying Data",
        "Datasources",
        "Datasources Data"
      ]
    },
    {
      "name": "Survey Metadata",
      "tags": [
        "Simulated Data",
        "Survey State",
        "Survey Evaluate",
        "Survey Quotas",
        "Survey Files",
        "Survey Warnings",
        "Survey Terms"
      ]
    },
    {
      "name": "Panels",
      "description": "Manage Kinesis Panels from Decipher.",
      "tags": [
        "Panel Data",
        "Panel Datapoints",
        "Survey Panels"
      ]
    },
    {
      "name": "Research Hub",
      "tags": [
        "Users",
        "Companies",
        "Categories",
        "Historical",
        "Surveys",
        "Panels",
        "Crosstabs",
        "Archives",
        "API Keys",
        "Usage",
        "Warnings Summary"
      ]
    },
    {
      "name": "Crosstabs",
      "tags": [
        "Crosstabs Configuration",
        "Crosstabs Execution",
        "Crosstabs Nets",
        "Saved Crosstabs",
        "Crosstabs Table Settings",
        "Crosstabs Validation",
        "Crosstabs Rim Weighting"
      ]
    },
    {
      "name": "Response Summary",
      "tags": [
        "Share Link"
      ]
    },
    {
      "name": "Sample Management",
      "tags": [
        "Bounced Emails",
        "Participant Sources",
        "Web Intercepts"
      ]
    },
    {
      "name": "Distribution",
      "tags": [
        "Email Distribution",
        "SFTP Distribution",
        "Slack Distribution"
      ]
    },
    {
      "name": "Campaign Manager",
      "tags": [
        "Campaigns",
        "Campaign Email Invites",
        "Campaign Lists",
        "Shared Campaign Lists",
        "Campaign Sends",
        "Campaign Status Lists",
        "Supression Lists"
      ]
    },
    {
      "name": "Question Library",
      "tags": [
        "Company Element",
        "Company Elements",
        "Survey Elements",
        "Survey Element Report Settings"
      ]
    },
    {
      "name": "Language Manager",
      "tags": [
        "LM Application Data",
        "LM Application Translations",
        "Translation Resources",
        "Translations",
        "Translation Deltas",
        "Translation Reservations",
        "Primary Survey Language",
        "Other Survey Languages",
        "Unused Survey Languages"
      ]
    },
    {
      "name": "Project Parameters",
      "tags": [
        "Available Project Parameters",
        "Saved Project Parameters",
        "Project Parameters Configuration"
      ]
    },
    {
      "name": "Multi-User Editing",
      "tags": [
        "Available Sections",
        "Check Out Section",
        "Check In Section",
        "Sync Section",
        "Section Editor",
        "Abandon Section",
        "Validate Section"
      ]
    },
    {
      "name": "Video Management",
      "tags": [
        "Videos",
        "Watermarked Videos"
      ]
    },
    {
      "name": "Miscellaneous",
      "tags": [
        "System Information",
        "Logic Nodes",
        "Logic Events",
        "CATI",
        "Miscellaneous"
      ]
    }
  ],
  "paths": {
    "/surveys/{survey}/data": {
      "get": {
        "operationId": "getSurveyData",
        "summary": "Download data",
        "description": "Returns list of survey responses filterable through a robust set of query\nparameters.\n\n## Formats\n\nThe following data formats can be requested using the `format` parameter.\n\nFormat | Description\n--------------|------------------\n`tab` | A tab-delimited format with column headings.\n`fwu` | A fixed-width format with offsets based on unicode characters.\n`fw` | A fixed-width format with offsets based on raw bytes\n`flat` | A flattened format containing OE data\n`flat_all` | A flattened format containing non-blank data for all fields.\n`pipe` | A pipe delimited format with column headings.\n`csv` | A comma delimited format with column headings.\n`cb` | An IBM column binary.\n`json` | Standard JSON.\n`spss` | The SPSS default format (SPSS 15).\n`spss16` | SPSS 16+ (*.sav) file with Unicode Support (zipped).\n`spss15` | SPSS 15 (*.sav) file (zipped).\n`spss16_oe` | SPSS 16+ (*.sav) file including all OE data (zipped).\n`spss_data` | A fixed-width data file and SPSS script file (zipped).\n\n## Content Types\n\nContent type differs dependent on the requested `format`.\n\nContent Type | Format\n--- | ---\napplication/json | json\ntext/plain; charset=utf-8 | tab, fw, flat, flat_all, pipe, csv, fw, fwu\napplication/octet-stream | cb\napplication/zip | spss, spss15, spss16, spss16_oe, spss_data\n\nAvailable keywords: `all, qualified, terminated, overquota, partials, everything`.\n",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "format",
            "in": "query",
            "description": "The data format requested.",
            "example": "flat",
            "schema": {
              "type": "string",
              "enum": [
                "tab",
                "fw",
                "flat",
                "flat_all",
                "pipe",
                "csv",
                "fwu",
                "cb",
                "json",
                "spss",
                "spss15",
                "spss16",
                "spss16_oe",
                "spss_data"
              ],
              "default": "tab"
            }
          },
          {
            "name": "layout",
            "in": "query",
            "description": "The layout ID, either hardcoded or retrieved using Layouts API.",
            "example": 123456,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The list of field names to retrieve.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneField": {
                "value": [
                  "q1"
                ]
              },
              "multipleFields": {
                "value": [
                  "q1",
                  "q2",
                  "q3"
                ]
              }
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Survey start date.",
            "example": "2020-01-01T00:00Z",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Survey completion date.",
            "example": "2020-12-31T00:00Z",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "cond",
            "in": "query",
            "description": "The condition required to retrieve the participant. This is a Python\ncondition as if you would enter in survey logic or crosstabs. For\nexample, `qualified and q3.r2` retrieves only participants that were\n`qualified` and answered `q3` as `r2`.\n",
            "example": "qualified and q1.r1",
            "default": "all",
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "stacking",
            "in": "query",
            "description": "Argument to specify stacked data file. Options are `top` which outputs\nall the non-looped variables and `label` which outputs the looped data\nfor the specific loop label.\n",
            "example": "top",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyData"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/data?format=json\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/data format=json > myfile.json\n"
          }
        ]
      },
      "post": {
        "operationId": "createSurveyData",
        "summary": "Download data",
        "description": "This is equivalent to the GET request. However GET requests are limited to\naround 1000-character URLs. We include a POST version that does not generate\ndata but allows for any amount of fields to be specified.\n\nAvailable keywords: `all, qualified, terminated, overquota, partials, everything`.\n",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "description": "The data format requested.",
                    "enum": [
                      "tab",
                      "fw",
                      "flat",
                      "flat_all",
                      "pipe",
                      "csv",
                      "fwu",
                      "cb",
                      "json",
                      "spss",
                      "spss15",
                      "spss16",
                      "spss16_oe",
                      "spss_data"
                    ],
                    "type": "string",
                    "default": "tab",
                    "example": "json"
                  },
                  "layout": {
                    "description": "The layout ID, either hardcoded or retreived using Layouts API.\n",
                    "type": "integer",
                    "example": 123456
                  },
                  "fields": {
                    "description": "The list of field names to retrieve.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "q1"
                    ]
                  },
                  "start": {
                    "description": "Survey start date.",
                    "type": "string",
                    "format": "ISO-8601",
                    "example": "2020-01-01T00:00Z"
                  },
                  "end": {
                    "description": "Survey completion date.",
                    "type": "string",
                    "format": "ISO-8601",
                    "example": "2020-12-31T00:00Z"
                  },
                  "cond": {
                    "description": "The condition required to retrieve the participant. This is a\nPython condition as if you would enter in survey logic or\ncrosstabs. For example, `qualified and q3.r2` retrieves only\nparticipants that were `qualified` and answered `q3` as `r2`.\n",
                    "type": "string",
                    "default": "all",
                    "example": "qualified and q1.r1"
                  },
                  "stacking": {
                    "description": "Argument to specify stacked data file. Options are `top` which\noutputs all the non-looped variables and `label` which outputs\nthe looped data for the specific loop label.\n",
                    "type": "string",
                    "example": "top"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyData"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/datamap": {
      "get": {
        "operationId": "getSurveyDatamap",
        "summary": "Retrieve datamap",
        "description": "Survey datamaps are the structured representation of the survey questions and\nconfigurations. The following formats are supported for datamaps.\n\n## Formats\n\nFormat | Description\n--------------|------------------\n`json` | Standard JSON.\n`html` | Plain HTML.\n`text` | Plain text.\n`tab` | A tab-delimited format with column headings.\n`xlsx` | Microsoft Excel spreadsheet with column headings\n`fw-html` | A fixed-width format with offsets based on raw bytes (HTML)\n`fw-tab` | A fixed-width format with offsets based on raw bytes (Tab)\n`fw-text` | A fixed-width format with offsets based on raw bytes (Text)\n`cb-html` | An IBM column binary (HTML).\n`cb-tab` | An IBM column binary (Tab).\n`cb-text` | An IBM column binary (Text).\n`uncle` | ?\n`sss` | Triple-S 1.5 XML\n`sas` | ?\n`quantum` | ?\n`spss_fw` | SPSS format with fixed-width start/stop annotations\n`spss_tab` | SPPS format in tab delimited format\n`netmr-tab` | Net MR datamap in fixed-width format\n`netmr-csv` | Net MR datamap in comma-delimited format\n",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "description": "The requested response format.",
            "example": "json",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "html",
                "text",
                "tab",
                "fw",
                "xlsx",
                "fw-html",
                "fw-tab",
                "fw-text",
                "cb-html",
                "cb-tab",
                "cb-text",
                "uncle",
                "sss",
                "sas",
                "quantum",
                "spss_fw",
                "spss_tab",
                "netmr-tab"
              ]
            }
          },
          {
            "name": "layout",
            "in": "query",
            "description": "The layout ID",
            "example": 12345,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "qa",
            "in": "query",
            "description": "Include QA codes (only available for HTML formats)",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyDatamap"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datamap?format=json\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datamap format=json > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/layouts": {
      "get": {
        "operationId": "getSurveyLayouts",
        "summary": "Retrieve data layouts",
        "description": "List all layouts configured for survey. Layouts can be configured using the\n[Data Layout Manager](https://decipher.zendesk.com/hc/en-us/articles/360010156254).\n",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyLayout"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/layouts\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/layouts > myfile.json\n"
          }
        ]
      }
    },
    "/datafeed/{feed}": {
      "get": {
        "operationId": "getDatafeed",
        "summary": "Get new data",
        "description": "Every live or closed survey accessible to this account will be considered for the feed. This list can be filtered by\nthe `paths` argument. Once a complete list of surveys has been generated, participants with data update time greater\nthan the last time the feed was ran are retrieved. If `start` is supplied, then the participant is further filtered.\n\nBy default `cond` is set to `qualified` retrieving only qualified participants. You can specify `ALL` for all participants\nincluding partials or other conditions known, to Crosstabs. Invalid conditions will be returned as errors but will not\nprevent other surveys' data from being generated.\n\n**Pagination**: This call will return 10,000 participants at a time. If more would be generated, `complete` will be set to false\nin the returned record and you should call this function again to get more data. A complete feed means that at the time\nof each survey being processed, no more data was available.\n\n**Data format**: The data returned uses the JSON data format, using the default variable layout.\n\n**Acknowledgement**: If you set `autoAck` to true, the data is automatically advanced. If not, every time you receive\ndata and after you successfully process it you must make the /ack call as documented below with the ack value you received.\nOtherwise the feed is not advanced and you will receive the data again. Note there is no guarantee that you receive\nexactly the same response as in the last call as new surveys or participants may have appeared. However the data you were\nsent is guaranteed to be sent again.\n\n**When to use ACK**: If you do not use the ACK system, Decipher advances the feed state as soon as the entire request was\n completed -- even if the network connection is reset before you have received the entire reply, or if an error is generated while\n you are processing the data. We only recommend `autoAck` for testing purposes.\n\n**Partial data**: If you supply `ALL` as `cond` rather than the default `qualified` then partial data is also included. The\nsame participant record may appear multiple times: once each time his partial data is updated and once if they complete.\n\n**Data edits**: a data edit that modifies participant data does NOT resend the data.\n\n**New surveys**: The list of surveys to include in the feed is considered on every request. As new surveys go live or are\n closed they will be added to the feed. Set `paths` to a specific subset of the surveys you want if you want consider only\n those. This will filter the list of live and closed surveys to include only those specified. This must be repeated for\n every request.\n\nThe response is an object containing these fields:\n  * `complete`: if true, this response is all the data available. If false, more data exists and you should continue to ask for the data feed to get more data immediately. By default, no more than 10,000 records will be sent at a time.\n  * `ack`: this UUID describes this particular response value; the feed will move forward only if the caller acknowledges receipt in the next call (see below).\n  * `results`: an array of participant records. Each participant record contains:\n   * variables from the default layout as per JSON data record\n   * `$survey` set to the path of the survey\n",
        "tags": [
          "Data Feed"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/feed"
          },
          {
            "name": "start",
            "in": "query",
            "description": "ISO-8601 date with the minimum completion time to retrieve.\nRecord before this date will not be considered.\nThis parameter should be passed with the same value\nevery time until data has been exhausted. Thus it should\nonly be used if somehow data received is lost and needs\nto be re-synchronized.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Normally not used. Use json_panel as value to synchronize\ndata with a participant panel (this feature is enabled\nonly for certain clients)\n",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "autoAck",
            "in": "query",
            "description": "If set to true, no ack call is required to move\nthe feed forward.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "List of survey states to accept data from. By default\nonly live and closed surveys are scanned for data but\nthrough this parameter you may include surveys in dev or\ntesting mode.\n",
            "schema": {
              "type": "array",
              "default": [
                "live",
                "closed"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "live",
                  "closed"
                ]
              }
            }
          },
          {
            "name": "paths",
            "in": "query",
            "description": "Rather than retrieving all the surveys visible to you, retrieve only\ndata from these surveys. This is useful for testing.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Extract only these variables from all the surveys.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cond",
            "in": "query",
            "description": "By default only qualified participants are fetched. Specify\nALL for all data or another condition (which must be\napplicable to ALL your surveys)\n",
            "schema": {
              "type": "string",
              "default": "qualified",
              "enum": [
                "all",
                "qualified"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned per request.\n",
            "schema": {
              "type": "integer",
              "default": 10000
            }
          },
          {
            "name": "surveyLabels",
            "in": "query",
            "description": "If survey labels should be part of the request.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ack": {
                        "type": "string",
                        "format": "uuid",
                        "description": "This UUID describes this particular response value.\nThe feed will move forward only if the caller acknowledges\nreceipt in the next call.\n"
                      },
                      "errors": {
                        "type": "object"
                      },
                      "results": {
                        "type": "array",
                        "description": "An array of participant records.\n",
                        "items": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "description": "The survey completion status.",
                              "example": 1,
                              "type": "integer"
                            },
                            "uuid": {
                              "type": "string",
                              "format": "uuid",
                              "description": "The survey `uuid`.",
                              "example": "jwy3kwppp4yuqg86"
                            },
                            "returl": {
                              "type": "string",
                              "format": "url",
                              "example": "https://azkaban.decipherinc.com/survey/selfserve/53b/191004?state=c8ed2b43-8525-4aed-9651-6460940d411e"
                            },
                            "vmobiledevice": {
                              "type": "integer",
                              "description": "The respondent's mobile device code.",
                              "example": 5
                            },
                            "url": {
                              "type": "string",
                              "description": "The survey builder url.",
                              "example": "http://release.decipherinc.com/survey/selfserve/1a/123456"
                            },
                            "$survey": {
                              "type": "string",
                              "description": "The survey path.",
                              "example": "selfserve/53b/191005"
                            },
                            "vbrowser": {
                              "type": "integer",
                              "description": "The respondent's browser code.",
                              "example": 11
                            },
                            "qtime": {
                              "type": "number",
                              "format": "float",
                              "description": "The elapsed time (seconds) from survey start to complete.",
                              "example": 56.235
                            },
                            "list": {
                              "type": "integer",
                              "example": 0
                            },
                            "dcua": {
                              "type": "string",
                              "example": ".."
                            },
                            "markers": {
                              "type": "string",
                              "example": "qualified,/totalQuota/Total"
                            },
                            "record": {
                              "type": "integer",
                              "example": 1
                            },
                            "session": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Unique user session ID.",
                              "example": "cwsps4gewqc0p175"
                            },
                            "vos": {
                              "type": "integer",
                              "description": "The respondent's operating system (os).",
                              "example": 13
                            },
                            "date": {
                              "type": "string",
                              "example": "09/02/2020 14:52"
                            },
                            "vlist": {
                              "type": "integer",
                              "example": 1
                            },
                            "userAgent": {
                              "type": "string",
                              "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:69.0) Gecko/20100101 Firefox/69.0"
                            },
                            "vmobileos": {
                              "type": "integer",
                              "example": 6
                            },
                            "start_date": {
                              "type": "integer",
                              "example": "10/17/2019 15:09"
                            },
                            "q1": {
                              "description": "An example question response",
                              "example": "8",
                              "type": "string"
                            },
                            "q2a": {
                              "description": "An example question response",
                              "example": "I thought it was great.",
                              "type": "string"
                            },
                            "q2b": {
                              "description": "An example question response",
                              "example": "I thought it was not so great.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "complete": {
                        "type": "boolean",
                        "description": "If true, this response is all the data available. If false,\nmore data exists and you should continue to ask for the\ndata feed to get more data immediately. By default, no more\nthan 10,000 records will be sent at a time.\n"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/datafeed/myFeed\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get datafeed/myFeed > myfile.json\n"
          }
        ]
      },
      "put": {
        "operationId": "updateDatafeed",
        "summary": "Update feed",
        "description": "Updates the internal feed state. Call the Feed state GET method below\nto get the current state. You can then e.g. copy it over to another name.\n",
        "tags": [
          "Data Feed"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/feed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "A state previously retrieved using `datafeed/{feed}/state`"
                  }
                },
                "required": [
                  "state"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X PUT {server}/api/v1/datafeed/myNewFeed?state=0a66d78d-46cd-47fb-a1f7-e6d779e6b7c6\n"
          },
          {
            "lang": "Cli",
            "source": "beacon PUT datafeed/myFeed state=0a66d78d-46cd-47fb-a1f7-e6d779e6b7c6\n"
          }
        ]
      },
      "delete": {
        "operationId": "deleteDatafeed",
        "summary": "Reset feed",
        "description": "Clears the state of the feed. The next `GET` request will receive data\nfrom the beginning.\n",
        "tags": [
          "Data Feed"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/feed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X DELETE {server}/api/v1/datafeed/myFeed\n"
          },
          {
            "lang": "Cli",
            "source": "beacon delete datafeed/myFeed\n"
          }
        ]
      }
    },
    "/datafeed/{feed}/state": {
      "get": {
        "operationId": "getDatafeedState",
        "summary": "Get feed state",
        "description": "Returns the stored internal state for this feed. This is mainly for troubleshooting processes. An object with a single key, state, its value an object mapping survey path to a list of two items:\n- 0: minimum timestamp for data retrieval - 1: an array of UUIDs of records retrieved\nThe list of UUIDs is only set if data was partially retrieved during a POST due of exceeding the 10,000 element limit. Once a survey’s data has been completely returned up until a timestamp, this list is cleared.",
        "tags": [
          "Data Feed"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/feed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ack": {
                        "type": "string",
                        "format": "uuid",
                        "description": "This UUID describes this particular response value.\nThe feed will move forward only if the caller acknowledges\nreceipt in the next call.\n"
                      },
                      "current": {
                        "type": "object"
                      },
                      "pending": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/datafeed/myFeed/state\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get datafeed/myFeed/state\n"
          }
        ]
      }
    },
    "/datafeed/{feed}/ack": {
      "post": {
        "operationId": "createDatafeedAck",
        "summary": "Acknowledge feed",
        "description": "Call this method to move the data feed forward.\n",
        "tags": [
          "Data Feed"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/feed"
          },
          {
            "name": "ack",
            "in": "query",
            "required": true,
            "description": "The `ack` value you received from calling `GET`.\n",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ack_valid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/datafeed/myFeed/ack?ack=0a66d78d-46cd-47fb-a1f7-e6d779e6b7c6\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get datafeed/myFeed/ack ack=0a66d78d-46cd-47fb-a1f7-e6d779e6b7c6\n"
          }
        ]
      }
    },
    "/surveys/{survey}/summary/completions": {
      "get": {
        "operationId": "getSurveySummaryCompletions",
        "summary": "List completions",
        "description": "Returns the equivalent of the “Completions” tab in the Response Summary\nreport (formerly known as field report).\n",
        "tags": [
          "Response Summary"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "split",
            "in": "query",
            "description": "If supplied, create segments for this split.",
            "schema": {
              "type": "string",
              "example": "list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "segments": {
                      "type": "array",
                      "description": "List of segment names, e.g. “Total”, “Participant\nsource (list=1)” similar to column names when splitting.\n",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "List with one object per a row that would be displayed\nin the Completions tab\n",
                      "items": {
                        "type": "object",
                        "properties": {
                          "formula": {
                            "type": "string",
                            "description": "The formula used to compute the value.\nThis should be used to search for specific values.\n",
                            "example": "clickthrough"
                          },
                          "cells": {
                            "type": "array",
                            "description": "one object for each segment the response summary is\nsplit by\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "vsplit": {
                                  "type": "string",
                                  "description": "The split identifier. This can be passed to the\nvariables down URL (`/rep/{survey}:vars?only=VSPLIT`)\nand this is what the “Clickthrough” cell links to\nin the response summary user interface.\n",
                                  "example": ""
                                },
                                "raw": {
                                  "type": "number",
                                  "description": "The raw numeric value\n",
                                  "format": "float",
                                  "example": 0.76
                                },
                                "formatted": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "example": "76%"
                                    },
                                    {
                                      "type": "integer",
                                      "example": 500
                                    }
                                  ],
                                  "description": "The formatted value.\n"
                                },
                                "title": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/summary/completions?split=list\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/summary/completions split=list > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/summary/campaigns": {
      "get": {
        "operationId": "getSurveySummaryCampaigns",
        "summary": "List campaigns",
        "description": "Returns the equivalent of the “Campaigns” tab in the Response Summary report\n(formerly known as field report).\n",
        "tags": [
          "Response Summary"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/split"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "segments": {
                      "type": "array",
                      "description": "List of segment names, e.g. “Total”, “Participant\nsource (list=1)” similar to column names when splitting.\n",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "List with one object per row that would be displayed\nin the Campaigns tab\n",
                      "items": {
                        "type": "object",
                        "properties": {
                          "formula": {
                            "type": "string",
                            "description": "The formula used to compute the value.\nThis should be used to search for specific values.\n",
                            "example": "clickthrough"
                          },
                          "cells": {
                            "type": "array",
                            "description": "one object for each segment the response summary is\nsplit by\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "vsplit": {
                                  "type": "string",
                                  "description": "The split identifier. This can be passed to the\nvariables down URL (`/rep/{survey}:vars?only=VSPLIT`)\nand this is what the “Clickthrough” cell links to\nin the response summary user interface.\n",
                                  "example": ""
                                },
                                "raw": {
                                  "type": "number",
                                  "description": "The raw numeric value",
                                  "format": "float",
                                  "example": 0.76
                                },
                                "formatted": {
                                  "type": "string",
                                  "example": "76%",
                                  "description": "The formatted value."
                                },
                                "title": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "total_sent": {
                            "type": "array"
                          },
                          "rows": {
                            "type": "array"
                          }
                        }
                      },
                      "intitial_sends": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/summary/campaigns?split=list\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/summary/campaigns split=list > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/summary/splits": {
      "get": {
        "operationId": "getSurveySummarySummarySplits",
        "summary": "List splits",
        "description": "Returns the split names you can split the response summary report by. These\nare typically extraVariables that have a fixed set of values (e.g. list,\ndecLang).\n",
        "tags": [
          "Response Summary"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaigns",
            "in": "query",
            "description": "Include campaign specific splits.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "this symbolic name can be passed as split into the other\nresponse summary APIs\n"
                    },
                    "description": {
                      "type": "string",
                      "description": "Additional description"
                    },
                    "segments": {
                      "type": "array",
                      "description": "List of segment names, e.g. “Total”, “Participant\nsource (list=1)” similar to column names when splitting.\n",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/summary/completions?split=list\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/summary/completions split=list > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/data/edit": {
      "post": {
        "operationId": "createSurveyDataEdit",
        "summary": "Create new data",
        "description": "Create new records in the survey. All records specified are\nalways created anew (if you suspect some exist in the survey\nalready, you should fetch and filter before sending new data).\nValidation of data works exactly as with the PUT variant.\n",
        "tags": [
          "Modifying Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The field used to match your participant data. This should\nbe a unique variable. Supplying a non-unique key will\nchange every matching record. This is implicitly null when\ncreating new records.\n",
                    "example": "uuid"
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of the participant records. Each element of the array\nis an object with the key being the column name matching a\nvariable name, and the value the value you want to set or update.\nYou can specify any amount of variables.\n",
                    "items": {
                      "type": "object"
                    },
                    "example": [
                      {
                        "q1": "Bob Boson",
                        "source": 3,
                        "q2": 1
                      },
                      {
                        "q1": "Joe Q. Joeson",
                        "source": 4,
                        "q2": 42
                      }
                    ]
                  },
                  "test": {
                    "type": "boolean",
                    "description": "Do not execute the edit, but return the changes that would be\napplied at the time of the call.\n",
                    "default": false
                  },
                  "layout": {
                    "type": "integer",
                    "description": "The id of a custom data layout. A custom export layout\ncan relabel fields. If you exported some data with fields that have\nbeen relabelled in a layout and now are importing it back, you\nshould use the same layout.\n"
                  },
                  "allVariables": {
                    "type": "boolean",
                    "description": "Allow editing of notdb variables",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "description": "Overall statistics of what happened with your data edit requested.\n",
                      "type": "object",
                      "properties": {
                        "fieldsIgnored": {
                          "type": "integer",
                          "description": "Cells ignored because uploading into legacy weight/record\nvalues (this is for surveys older than 2005).\n"
                        },
                        "rows": {
                          "type": "integer",
                          "description": "Number of fields in your input data.\n"
                        },
                        "fieldsErronous": {
                          "type": "integer",
                          "description": "Data supplied that was not valid."
                        },
                        "rewritten": {
                          "type": "integer",
                          "description": "Records where data was modified."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Number of new records created."
                        },
                        "deleted": {
                          "type": "integer",
                          "description": "Number of records deleted."
                        },
                        "disqualified": {
                          "type": "integer",
                          "description": "Number of qualified records disqualified or deleted."
                        },
                        "unchanged": {
                          "type": "integer",
                          "description": "Records where your updated data did not cause changes."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "Number of records updated."
                        },
                        "bad": {
                          "type": "array",
                          "description": "Invalid values detected during edit/update"
                        },
                        "fieldsUpdated": {
                          "type": "integer",
                          "description": "Data fields updated by the request."
                        },
                        "unseen": {
                          "type": "integer",
                          "description": "Number of rows that did not match existing records\nwhen not creating new records.\n"
                        },
                        "fieldsIdentical": {
                          "type": "integer",
                          "description": "Data update requests not done because existing data was\nidentical. This counts individual cells.\n"
                        },
                        "inrows": {
                          "type": "integer",
                          "description": "Total amount of records processed (rewritten +\nunchanged + deleted + created).\n"
                        },
                        "unmatchedDeletions": {
                          "type": "integer",
                          "description": "Records that you asked to be deleted but did not\nmatch existing records.\n"
                        },
                        "fieldsProcessed": {
                          "type": "integer",
                          "description": "Total fields processed.\n"
                        }
                      }
                    },
                    "backup": {
                      "type": "string",
                      "description": "Where is the previous version of the data? This can be\nrestored by support or a shell user on a Beacon Cloud\ninstallation.\n",
                      "example": "selfserve/1234/dataedit/data/old-results/011.results.*"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X POST {server}/api/v1/surveys/{survey}/data/edit?data=[]\n"
          },
          {
            "lang": "Cli",
            "source": "beacon post surveys/{survey}/data data=[]\n"
          }
        ]
      },
      "put": {
        "operationId": "updateSurveyDataEdit",
        "summary": "Update survey data",
        "description": "Modify data of existing participants in the survey. As data, supply objects containing the data you want to update. As with all variants, you must supply a key to match by and supply that key for each record.\nElements in data that do not match an existing record are discarded.",
        "tags": [
          "Modifying Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The field used to match your participant data. This should\nbe a unique variable. Supplying a non-unique key will\nchange every matching record. This is implicitly null when\ncreating new records.\n",
                    "example": "uuid"
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of the participant records. Each element of the array\nis an object with the key being the column name matching a\nvariable name, and the value the value you want to update.\nYou can specify any amount of variables.\n",
                    "items": {
                      "type": "object"
                    },
                    "example": [
                      {
                        "q1": "Bob Boson",
                        "source": 3,
                        "q2": 1
                      },
                      {
                        "q1": "Joe Q. Joeson",
                        "source": 4,
                        "q2": 42
                      }
                    ]
                  },
                  "layout": {
                    "type": "integer",
                    "description": "layout id"
                  },
                  "test": {
                    "type": "boolean",
                    "description": "Do not execute the edit, but return the changes that would be\napplied at the time of the call.\n",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "description": "Overall statistics of what happened with your data edit requested.\n",
                      "type": "object",
                      "properties": {
                        "fieldsIgnored": {
                          "type": "integer",
                          "description": "Cells ignored because uploading into legacy weight/record\nvalues (this is for surveys older than 2005).\n"
                        },
                        "rows": {
                          "type": "integer",
                          "description": "Number of fields in your input data.\n"
                        },
                        "fieldsErronous": {
                          "type": "integer",
                          "description": "Data supplied that was not valid."
                        },
                        "rewritten": {
                          "type": "integer",
                          "description": "Records where data was modified."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Number of new records created."
                        },
                        "deleted": {
                          "type": "integer",
                          "description": "Number of records deleted."
                        },
                        "disqualified": {
                          "type": "integer",
                          "description": "Number of qualified records disqualified or deleted."
                        },
                        "unchanged": {
                          "type": "integer",
                          "description": "Records where your updated data did not cause changes."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "Number of records updated."
                        },
                        "bad": {
                          "type": "array",
                          "description": "Invalid values detected during edit/update"
                        },
                        "fieldsUpdated": {
                          "type": "integer",
                          "description": "Data fields updated by the request."
                        },
                        "unseen": {
                          "type": "integer",
                          "description": "Number of rows that did not match existing records\nwhen not creating new records.\n"
                        },
                        "fieldsIdentical": {
                          "type": "integer",
                          "description": "Data update requests not done because existing data was\nidentical. This counts individual cells.\n"
                        },
                        "inrows": {
                          "type": "integer",
                          "description": "Total amount of records processed (rewritten +\nunchanged + deleted + created).\n"
                        },
                        "unmatchedDeletions": {
                          "type": "integer",
                          "description": "Records that you asked to be deleted but did not\nmatch existing records.\n"
                        },
                        "fieldsProcessed": {
                          "type": "integer",
                          "description": "Total fields processed.\n"
                        }
                      }
                    },
                    "backup": {
                      "type": "string",
                      "description": "Where is the previous version of the data? This can be\nrestored by support or a shell user on a Beacon Cloud\ninstallation.\n",
                      "example": "selfserve/1234/dataedit/data/old-results/011.results.*"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X PUT {server}/api/v1/surveys/{survey}/data/edit?data=[]\n"
          },
          {
            "lang": "Cli",
            "source": "beacon put surveys/{survey}/data data=[]\n"
          }
        ]
      },
      "delete": {
        "operationId": "deleteSurveyDataEdit",
        "summary": "Delete or disqualify survey data",
        "description": "Disqualify or delete the records. You must set `mode` to “delete” to\ndelete data. We recommend disqualifying rather than deleting,\nas deleted records can only be restored by support or a shell user\non a Beacon Cloud installation. Disqualified records can be re-qualified\nby update their `markers` variable to contain the qualified marker.\n\nIf disqualifying, you may set `disqualify` to the name of the\nmarker to be set. The normal “Edit Data” screen sets the following\nmarkers: `speeder`, `straightliner`, `badopen`, `foreigner`. You can set\nany marker you want: this is just additional information.\n\nDisqualified records are stripped of their `qualified` marker and any\nquota marker (e.g. /Quota_Sheet/marker) is prefixed with `bad:`.\n",
        "tags": [
          "Modifying Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The field used to match your participant data. This should\nbe a unique variable. Supplying a non-unique `key` will\nchange every matching record. This is implicitly `null` when\ncreating new records.\n",
                    "example": "record"
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of the participant records. Each element of the array\nis an object with the key being the column name matching a\nvariable name, and the value the value you want to update.\nYou can specify any amount of variables.\n",
                    "items": {
                      "type": "object"
                    },
                    "example": [
                      {
                        "record": "2"
                      },
                      {
                        "record": "4"
                      },
                      {
                        "record": "5"
                      }
                    ]
                  },
                  "test": {
                    "type": "boolean",
                    "description": "Do not execute the edit, but return the changes that would be\napplied at the time of the call.\n",
                    "default": false
                  },
                  "layout": {
                    "type": "integer",
                    "description": "The id of a custom data layout. A custom export layout\ncan relabel fields. If you exported some data with fields that have\nbeen relabelled in a layout and now are importing it back, you\nshould use the same layout.\n"
                  },
                  "allVariables": {
                    "type": "boolean",
                    "description": "Allow editing of notdb variables",
                    "default": false
                  },
                  "mode": {
                    "type": "string",
                    "description": "Do we want to delete or disqualify these records?",
                    "enum": [
                      "delete",
                      "disqualify"
                    ],
                    "default": "disqualify",
                    "example": "disqualify"
                  },
                  "disqualify": {
                    "type": "string",
                    "description": "marker to set",
                    "example": "speeder"
                  }
                },
                "required": [
                  "key",
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "description": "Overall statistics of what happened with your data edit requested.\n",
                      "type": "object",
                      "properties": {
                        "fieldsIgnored": {
                          "type": "integer",
                          "description": "Cells ignored because uploading into legacy weight/record\nvalues (this is for surveys older than 2005).\n"
                        },
                        "rows": {
                          "type": "integer",
                          "description": "Number of fields in your input data.\n"
                        },
                        "fieldsErronous": {
                          "type": "integer",
                          "description": "Data supplied that was not valid."
                        },
                        "rewritten": {
                          "type": "integer",
                          "description": "Records where data was modified."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Number of new records created."
                        },
                        "deleted": {
                          "type": "integer",
                          "description": "Number of records deleted."
                        },
                        "disqualified": {
                          "type": "integer",
                          "description": "Number of qualified records disqualified or deleted."
                        },
                        "unchanged": {
                          "type": "integer",
                          "description": "Records where your updated data did not cause changes."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "Number of records updated."
                        },
                        "bad": {
                          "type": "array",
                          "description": "Invalid values detected during edit/update"
                        },
                        "fieldsUpdated": {
                          "type": "integer",
                          "description": "Data fields updated by the request."
                        },
                        "unseen": {
                          "type": "integer",
                          "description": "Number of rows that did not match existing records\nwhen not creating new records.\n"
                        },
                        "fieldsIdentical": {
                          "type": "integer",
                          "description": "Data update requests not done because existing data was\nidentical. This counts individual cells.\n"
                        },
                        "inrows": {
                          "type": "integer",
                          "description": "Total amount of records processed (rewritten +\nunchanged + deleted + created).\n"
                        },
                        "unmatchedDeletions": {
                          "type": "integer",
                          "description": "Records that you asked to be deleted but did not\nmatch existing records.\n"
                        },
                        "fieldsProcessed": {
                          "type": "integer",
                          "description": "Total fields processed.\n"
                        }
                      }
                    },
                    "backup": {
                      "type": "string",
                      "description": "Where is the previous version of the data? This can be\nrestored by support or a shell user on a Beacon Cloud\ninstallation.\n",
                      "example": "selfserve/1234/dataedit/data/old-results/011.results.*"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X DELETE {server}/api/v1/surveys/{survey}/data/edit?data=[]\n"
          },
          {
            "lang": "Cli",
            "source": "beacon delete surveys/{survey}/data data=[]\n"
          }
        ]
      }
    },
    "/surveys/{survey}/data/edit/markers": {
      "put": {
        "operationId": "updateSurveyDataEditMarkers",
        "summary": "Update markers",
        "description": "Allows for updating participant markers that may have become\noutdated due to quota changes or data edits. Requires data\nedit permission for the project.\n",
        "tags": [
          "Modifying Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tablesBySheet": {
                    "type": "object",
                    "description": "Used to specify which sheets and tables to be updated.\nEach key of the object is a sheet name with a value that is an\narray of the table indexes. The first table on the sheet will\nhave an index of 0. An empty array will include all tables\nfor the sheet.\n",
                    "example": [
                      {
                        "Gender": [
                          0
                        ]
                      }
                    ]
                  },
                  "test": {
                    "type": "boolean",
                    "description": "Do not execute the edit, but return the changes that would be\napplied at the time of the call.\n",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comparison": {
                      "description": "Overview of what the new marker counts are\ncompared against the current marker counts\n",
                      "type": "object"
                    },
                    "backup": {
                      "type": "string",
                      "description": "Where is the previous version of the data? This can be\nrestored by support or a shell user on a Beacon Cloud\ninstallation.\n",
                      "example": "selfserve/1234/dataedit/data/old-results/011.results.*"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X PUT {server}/api/v1/surveys/{survey}/data/edit/markers\n"
          },
          {
            "lang": "Cli",
            "source": "beacon put surveys/{survey}/data/edit/markers\n"
          }
        ]
      }
    },
    "/surveys/{survey}/respondents/import": {
      "post": {
        "operationId": "createSurveyDataRespondentsImport",
        "summary": "Import survey data",
        "description": "Allows for modification of the participant data by specifying a file\nto import. Based on the arguments provided the columns in your file\nwill either be matched to existing variables or they will be created as\nnew variables. After appending new questions to your survey the data\nfrom your file will be imported. Rows without a matching key variable in\nthe existng data will be created as new records. Creating new questions\nwill perform a live merge.\n",
        "tags": [
          "Modifying Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The field used to match your participant data. This should\nbe a unique variable. Supplying a non-unique key will\nchange every matching record. This is implicitly null when\ncreating new records.\n",
                    "example": "source"
                  },
                  "tabfile": {
                    "type": "string",
                    "format": "binary",
                    "description": "Tab delimited file to upload."
                  },
                  "questions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "index": {
                          "type": "string",
                          "description": "The index of this question in the data file."
                        },
                        "reportLabel": {
                          "type": "string",
                          "description": "The label of the survey variable that this variable should be matched to when importing. Omit this argument if this should be a newly created variable."
                        },
                        "label": {
                          "type": "string",
                          "description": "Required for new questions. When creating a new question this label will be the label of the new question."
                        },
                        "title": {
                          "type": "string",
                          "description": "Required for new questions. The title to appear in reports for this question."
                        },
                        "type": {
                          "type": "string",
                          "description": "Required for new questions.\n\n**single**\n\n- generates a “radio” question\n- single ordinal answer\n- you must declare one or more values\n\n**multiple**\n\n- generates a “checkbox”\n- multiple answers possible\n- you must declare one or more variables\n\n**number**\n\n- generates a “float” question\n- any number allowed\n\n**text**\n\n- generate a “text” question\n- any textual content allowed\n",
                          "enum": [
                            "single",
                            "multiple",
                            "number",
                            "text"
                          ]
                        },
                        "variables": {
                          "description": "required for “multiple”, optional for others. This allows\ncreating multiple variables for this question rather than\njust a single one.\n",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Human readable title for this variable."
                              },
                              "column": {
                                "type": "string",
                                "description": "The label containing the variable in the data file. Rather than pulling data from the question’s column/label, this variable will be read from this column. A separate question object should not be provided for the specified column."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "key",
                  "tabfile",
                  "questions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "description": "Overall statistics of what happened with your data edit requested.\n",
                      "type": "object",
                      "properties": {
                        "fieldsIgnored": {
                          "type": "integer",
                          "description": "Cells ignored because uploading into legacy weight/record\nvalues (this is for surveys older than 2005).\n"
                        },
                        "rows": {
                          "type": "integer",
                          "description": "Number of fields in your input data.\n"
                        },
                        "fieldsErronous": {
                          "type": "integer",
                          "description": "Data supplied that was not valid."
                        },
                        "rewritten": {
                          "type": "integer",
                          "description": "Records where data was modified."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Number of new records created."
                        },
                        "deleted": {
                          "type": "integer",
                          "description": "Number of records deleted."
                        },
                        "disqualified": {
                          "type": "integer",
                          "description": "Number of qualified records disqualified or deleted."
                        },
                        "unchanged": {
                          "type": "integer",
                          "description": "Records where your updated data did not cause changes."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "Number of records updated."
                        },
                        "bad": {
                          "type": "array",
                          "description": "Invalid values detected during edit/update"
                        },
                        "fieldsUpdated": {
                          "type": "integer",
                          "description": "Data fields updated by the request."
                        },
                        "unseen": {
                          "type": "integer",
                          "description": "Number of rows that did not match existing records\nwhen not creating new records.\n"
                        },
                        "fieldsIdentical": {
                          "type": "integer",
                          "description": "Data update requests not done because existing data was\nidentical. This counts individual cells.\n"
                        },
                        "inrows": {
                          "type": "integer",
                          "description": "Total amount of records processed (rewritten +\nunchanged + deleted + created).\n"
                        },
                        "unmatchedDeletions": {
                          "type": "integer",
                          "description": "Records that you asked to be deleted but did not\nmatch existing records.\n"
                        },
                        "fieldsProcessed": {
                          "type": "integer",
                          "description": "Total fields processed.\n"
                        }
                      }
                    },
                    "backup": {
                      "type": "string",
                      "description": "Where is the previous version of the data? This can be\nrestored by support or a shell user on a Beacon Cloud\ninstallation.\n",
                      "example": "selfserve/1234/dataedit/data/old-results/011.results.*"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X POST {server}/api/v1/surveys/{survey}/respondents/import\n"
          },
          {
            "lang": "Cli",
            "source": "beacon post surveys/{survey}/respondents/import\n"
          }
        ]
      }
    },
    "/surveys/{survey}/datasources": {
      "get": {
        "operationId": "getSurveyDatasources",
        "summary": "List datasources",
        "description": "Returns a list of current datasources and their data.",
        "tags": [
          "Datasources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ourKey": {
                        "type": "string",
                        "example": "source"
                      },
                      "questions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "example": "vq6"
                            },
                            "type": {
                              "type": "string",
                              "example": "text"
                            },
                            "title": {
                              "type": "string",
                              "example": "vq1"
                            }
                          }
                        }
                      },
                      "reporting": {
                        "type": "boolean"
                      },
                      "label": {
                        "type": "string",
                        "example": "ds5"
                      },
                      "key": {
                        "type": "string",
                        "example": "source"
                      },
                      "filename": {
                        "type": "string",
                        "example": "data_datasource_ds5.dat"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/datasources/{datasource}": {
      "get": {
        "operationId": "getSurveyDatasource",
        "summary": "Get datasource",
        "description": "Operates on one specific datasource. Datasources are identified\nby an alphanumeric label which must not overlap with any labels\nin the survey. First use `PUT` `surveys/.../datasources/label` to create\nthe datasource; then add data by targetting\n`surveys/.../datasources/label/data`.\n",
        "tags": [
          "Datasources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ourKey": {
                      "type": "string",
                      "example": "source"
                    },
                    "questions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "example": "vq6"
                          },
                          "type": {
                            "type": "string",
                            "example": "text"
                          },
                          "title": {
                            "type": "string",
                            "example": "vq1"
                          }
                        }
                      }
                    },
                    "reporting": {
                      "type": "boolean"
                    },
                    "label": {
                      "type": "string",
                      "example": "ds5"
                    },
                    "key": {
                      "type": "string",
                      "example": "source"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources/datasource\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources/datasource > myfile.json\n"
          }
        ]
      },
      "put": {
        "operationId": "updateSurveyDatasource",
        "summary": "Create or update a datasource",
        "description": "When creating you decide what questions you have and whether they are virtual\nor not and what the matching key is.  You can modify existing sets converting\nfrom real to virtual or vice versa, and deleting questions.\n\nIf you call PUT on an existing datasource, any attribute you specify\nwill be replaced with its new version. Any attribute not mention will\nremain as is. Thus to add new questions, retrieve the original question\nconfiguration with GET , append your new questions and PUT the new one.\n\nChanges to questions for a datasource with reporting set to False,\nor changes that set or clear reporting will require a live remerge.\n",
        "tags": [
          "Datasources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reporting": {
                    "type": "boolean",
                    "description": "If true, the data is merged as virtual questions. This minimize setup time in live surveys. If false, data is created as real question.  This requires a live merge."
                  },
                  "elementOnly": {
                    "type": "boolean",
                    "description": "If true, new elements will be created but will not be populated with data from a datasource. Attributes key and ourKey may be omitted when this is true. Only valid when reporting=false.",
                    "default": false
                  },
                  "key": {
                    "type": "string",
                    "description": "The column in the data files uploaded that will be matched against our key."
                  },
                  "ourKey": {
                    "type": "string",
                    "description": "The extraVariable or condition in the participant data that will be matched to the key."
                  },
                  "questions": {
                    "type": "array",
                    "description": "An array of the questions that will belong to this datasource.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Required for new questions. When creating a new question this label will be the label of the new question."
                        },
                        "column": {
                          "type": "string",
                          "description": "The column in the data file to be used to read the data. It defaults to the question label, if not specified. This allows you differentiate between how the data file is labelled versus how the question in the survey is labelled. Note that if you use variables the column assign happens per variable."
                        },
                        "title": {
                          "type": "string",
                          "description": "Required for new questions. The title to appear in reports for this question."
                        },
                        "type": {
                          "type": "string",
                          "description": "Required for new questions.\n**single**\n- generates a “radio” question - single ordinal answer - you must declare one or more values\n**multiple**\n- generates a “checkbox” - multiple answers possible - you must declare one or more variables\n**number**\n- generates a “float” question - any number allowed\n**text**\n- generate a “text” question - any textual content allowed",
                          "enum": [
                            "single",
                            "multiple",
                            "number",
                            "text"
                          ]
                        },
                        "values": {
                          "type": "array",
                          "description": "Required for “single”.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Human readable title for this variable."
                              },
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ],
                                "description": "The text that will be in uploaded data files that should match this answer. This can be a number (“1”) or any text (e.g. “male”). It is matched case insensitively, thus “MALE” in the input file will match a value of “male”.",
                                "statValue": "This converts to our value attribute and is used for averages in reporting or the value shown when downloading data. Optional."
                              }
                            }
                          }
                        },
                        "variables": {
                          "type": "array",
                          "description": "Required for “multiple”, optional for others. This allows creating multiple variables for this question rather than just a single one.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "Human readable title for this variable."
                              },
                              "column": {
                                "type": "string",
                                "description": "The label containing the variable in the data file. Rather than pulling data from the question’s column/label, this variable will be read from this column. A separate question object should not be provided for the specified column."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "reporting",
                  "key",
                  "ourKey",
                  "questions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X PUT {server}/api/v1/surveys/{survey}/datasources/datasource\n"
          },
          {
            "lang": "Cli",
            "source": "beacon put surveys/{survey}/datasources/datasource\n"
          }
        ]
      },
      "delete": {
        "operationId": "deleteSurveyDatasource",
        "summary": "Delete a datasource",
        "description": "Remove the datasource definition and blank out any uploaded data files.",
        "tags": [
          "Datasources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X DELETE {server}/api/v1/surveys/{survey}/datasources/datasource\n"
          },
          {
            "lang": "Cli",
            "source": "beacon delete surveys/{survey}/datasources/datasource\n"
          }
        ]
      }
    },
    "/surveys/{survey}/datasources/{datasource}/data": {
      "post": {
        "operationId": "createSurveyDatasourceData",
        "summary": "Append datasource data",
        "description": "Append data to this datasource's data files. This merges the rows and columns. For any record, if the key for the datasource already exists in the current data file the columns of that record are updated with the new record. Columns with data in existing file and new uploaded data are replaced. Any records not matching existing data are appended to the file.",
        "tags": [
          "Datasources Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "description": "Either an array of objects, a single tab-delimited string or a base64-encoded Excel 2007 file",
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      {
                        "type": "string",
                        "format": "tab delimited"
                      },
                      {
                        "type": "binary",
                        "format": "base64-encoded Excel 2007 file"
                      }
                    ]
                  },
                  "skipRemerge": {
                    "type": "boolean",
                    "description": "If true, the live remerge process is skipped. Please note, that skipping the remerge process will mean that existing participants might not match the new data or updated data will not be updated with the new data.",
                    "default": false
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources/datasource/data\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources/datasource/data > myfile.json\n"
          }
        ]
      },
      "get": {
        "operationId": "getSurveyDatasourceData",
        "summary": "List datasource data",
        "description": "List all the existing data, as an array of objects.",
        "tags": [
          "Datasources Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources/datasource/data\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources/datasource/data > myfile.json\n"
          }
        ]
      },
      "put": {
        "operationId": "updateSurveyDatasourceData",
        "summary": "Replace datasource data",
        "description": "Truncates the existing data file then replaces with the provided data.",
        "tags": [
          "Datasources Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "description": "either an array of objects, a single tab-delimited string or a base64-encoded Excel 2007 file",
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      {
                        "type": "string",
                        "format": "tab delimited"
                      },
                      {
                        "type": "binary",
                        "format": "base64-encoded Excel 2007 file"
                      }
                    ]
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources/datasource/data\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources/datasource/data > myfile.json\n"
          }
        ]
      },
      "delete": {
        "operationId": "deleteSurveyDatasourceData",
        "summary": "Truncate datasource data",
        "description": "Remove all existing data. The datasource definition itself is retained.",
        "tags": [
          "Datasources Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "$ref": "#/components/parameters/datasource"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Curl",
            "source": "curl -H x-apikey: {api_key} -X GET {server}/api/v1/surveys/{survey}/datasources/datasource/data\n"
          },
          {
            "lang": "Cli",
            "source": "beacon get surveys/{survey}/datasources/datasource/data > myfile.json\n"
          }
        ]
      }
    },
    "/surveys/{survey}/sst": {
      "post": {
        "operationId": "createSurveySst",
        "summary": "Run simulated data",
        "description": "Begin running simulated data.",
        "tags": [
          "Simulated Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "count": {
                    "description": "The number of simulations to run. Maximum: 2000",
                    "default": 200,
                    "type": "integer"
                  },
                  "qualified": {
                    "description": "Submit mostly qualified responses",
                    "default": false,
                    "type": "boolean"
                  },
                  "skip_validate": {
                    "description": "ignores question validation to maximize test efficiency",
                    "default": false,
                    "type": "boolean"
                  },
                  "respect_optionals": {
                    "description": "leaves some optional answers blank",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3jd7qyadpgjbxu6t"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/state/live": {
      "post": {
        "operationId": "createSurveyStateLive",
        "summary": "Launch survey",
        "description": "Launches a survey. Goes through the launch process for a survey.  If\nthere are any warnings those will be returned and the survey will not be\nlaunched.  Otherwise the surveys state will be changed to \"live\".\nRequires survey edit permission for the project.\n",
        "tags": [
          "Survey State"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "relaunch": {
                    "description": "This is required if a survey is in the closed state and needs to be set live.",
                    "default": false,
                    "type": "boolean"
                  },
                  "ignore_warnings": {
                    "description": "This will ignore other survey warnings including: open tasks, incompatible elements, missing project parameters, and outdated translations.",
                    "default": false,
                    "type": "boolean"
                  },
                  "ignore_kinesis": {
                    "description": "This will ignore any kinesis errors when setting the survey live and will skip any syncing with kinesis.",
                    "default": false,
                    "type": "boolean"
                  },
                  "ignore_fulcrum": {
                    "description": "This will ignore any fulcrum errors when setting the survey live and will skip syncing questions and changing the survey state on fulcrum.",
                    "default": false,
                    "type": "boolean"
                  },
                  "ignore_sst": {
                    "description": "Passing this will ignore any sst warnings and launch the survey without valid progress data. Skipping this is not recommended and may result in uncaught survey errors and an inaccurate progress bar.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "imported": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "incompatible": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "offline": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "translations": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tasks": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "kinesis": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fulcrum": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "sst": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "project_parameters": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/state/live/warnings": {
      "get": {
        "operationId": "getSurveyStateLiveWarnings",
        "summary": "Get launch warnings",
        "description": "Returns any launch warnings that will appear when launching the survey.\n",
        "tags": [
          "Survey State"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imported": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "incompatible": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "offline": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "translations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "kinesis": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "fulcrum": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "sst": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "project_parameters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/state/warnings": {
      "get": {
        "operationId": "getSurveyStateWarnings",
        "summary": "Get warnings",
        "description": "Retrieve project warnings for a survey.\n\nOnly events experienced by non-users (i.e., logged-out participants) in\nnon-testing surveys are reported. Best efforts are made to eliminate duplicate\nevents from the results.\n",
        "tags": [
          "Survey State"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "types",
            "description": "restrict events returned to just these types",
            "in": "query",
            "required": false,
            "schema": {
              "default": [
                "blocks",
                "missing_resources",
                "exceptions",
                "quota_misses"
              ],
              "type": "array"
            }
          },
          {
            "name": "start",
            "description": "restrict events returned to just those occurring on/after this date (in ISO 8601 format)",
            "example": "2020-01-01",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "description": "restrict warnings counts to just those occurring on/before this date",
            "example": "2020-12-31",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "survey name"
                    },
                    "path": {
                      "type": "string",
                      "description": "survey path"
                    },
                    "company": {
                      "type": "integer",
                      "description": "company ID"
                    },
                    "events": {
                      "description": "an array of events consisting of the following properties (subject to data retention rules)",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "format": "timestamp",
                            "description": "time of even occurrence or observation"
                          },
                          "type": {
                            "type": "string",
                            "description": "event type",
                            "enum": [
                              "blocks",
                              "missing_resources",
                              "exceptions",
                              "quota_misses"
                            ]
                          },
                          "details": {
                            "type": "object",
                            "description": "an object consisting of properties that are specific to the event type"
                          }
                        }
                      }
                    },
                    "counts": {
                      "description": "full event counts"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/state/close": {
      "post": {
        "operationId": "createSurveyStateClose",
        "summary": "Close survey",
        "description": "Closes a survey. The survey's state is modified from any other state to \"closed\" immediately, preventing new participants from starting the survey. Requires survey edit permission for the project.",
        "tags": [
          "Survey State"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "now": {
                    "type": "boolean",
                    "description": "by default participants have 1 hour from close time to finish a survey if they already started. Setting to `true` closes it immediately.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/evaluate": {
      "post": {
        "operationId": "createSurveyEvaluate",
        "summary": "Evaluate",
        "description": "Evaluates code within a specific survey environment. This allows you to find out the value of logic conditions such as `q3.r5.val` within a specific participant's survey context. The context can be omitted; in that case the last submitted state is used (this is most useful when debugging where you know no new data appears).\n\nThis is equivalent to modifying the survey.xml to add an `<exec>` block that prints out the valuate.\n\nThis API is available from the command line using the `beacon eval` tool. Run `beacon eval survey/path` to open up a shell that lets you evaluate multiple commands using this API. This command takes an optional state ID.\n\nThe returned object has a `stdout` value that corresponds to what would be printed in a shell. Thus if you ask for a string, e.g. `q1.r1.val` the Python representation of a string is returned, i.e. `'Hello\\n'`. You can use `print q1.r1.val` to avoid that. The returned `state` value can be passed in again to ensure the same evaluation environment -- this is useful if you called the API without an explicit state.\n\nAny changes to question data (e.g. q3.r1.val = \"foo\") or persistent variables will be reset next time you call the API, as the state is reloaded. Assignment to local variables may or may nor persistent, just like in the normal data collection.",
        "tags": [
          "Survey Evaluate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cond": {
                    "description": "Python condition to evaluate. This works like the Python command line shell: you can send a multi-line loop",
                    "type": "string"
                  },
                  "state": {
                    "description": "The ID of the state to enter. After submitting a survey page, view the source code and look for the hidden \"state\" variable. If omitted, the last submitted state is used.",
                    "type": "string"
                  }
                },
                "required": [
                  "cond"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string",
                      "description": "the state against which the expression was evaluated",
                      "example": "2498cbe94fb82cd2c153edc73370aa99ce95592fQ000001Q000002a7"
                    },
                    "stdout": {
                      "type": "string",
                      "description": "the content that would be printed on the shell",
                      "example": "Hello Professor Falken"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/quota": {
      "get": {
        "operationId": "getSurveyQuota",
        "summary": "Get quota",
        "description": "Retrieves quota cell definition and current state.\n\nFor full KB documentation, see [Quotas Guide: Limit and Monitor Project\nSample](https://decipher.zendesk.com/hc/en-us/articles/360010157094).\nConcepts:\n\n* A quota file (quota.xls) contains multiple `sheets`.\n* The survey quota element executes all `tables` from one sheet.\n* `Tables` reference `markers`. A `marker` has either a condition (E.g.\nset if Male - q1.r1)) or is a `plus marker`.\n* A quota `cell` defines number of participants you want that have 1 or\nmore markers set.\n* If a participant is eligible for multiple cells, the cell with highest\n`priority` is chosen, otherwise the cell with the least filled\npercentage.\n* If properly eligible, the participant receives one `quota marker` per\n`table` identifying the exact `cell`, which is a combination of the\nsheet and markers involved. For example, `/Sheet1/Male/18-25` (note that\nquotas created with the survey editor will have auto-assigned IDs for\nmarkers e.g. `/New Quota/AoAos/bo8Oi`).\n* Every `plus marker` the participant is assigned is also set in\naddition to the quota cell marker, e.g. `concept1` and\n`/Concepts/concept1`.\n",
        "tags": [
          "Survey Quotas"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "markers": {
                      "type": "object",
                      "description": "Maps each quota cell marker name (e.g. `/Sheet1/Male/18-25`) to\nan object describing its current state.\n",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "complete": {
                            "type": "integer",
                            "description": "The number of *completed* and qualified participants\nwith that marker.\n"
                          },
                          "pending": {
                            "type": "integer",
                            "description": "The number of participants who have been set the marker\nand have been active within the last 15 minutes, but have\nnot yet completed.\n"
                          },
                          "limit": {
                            "type": "integer",
                            "description": "The current effective cell limit (when using soft quotas\nthis may be different from the hard limit).\n"
                          },
                          "oq": {
                            "type": "integer",
                            "description": "The number of participants who qualified for the cell but\nwere terminated because the cell had already reached the\nlimit.\n"
                          }
                        }
                      }
                    },
                    "sheets": {
                      "type": "object",
                      "description": "Maps sheet names to sheet definitions. Each sheet definition is\nan array of tables.\n",
                      "additionalProperties": {
                        "type": "array",
                        "description": "array of table properties",
                        "items": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "The table name, an optional description entered.\n"
                            },
                            "cellCount": {
                              "type": "integer",
                              "description": "The maximum number of quota cells selected when hitting\nthis table (normally just 1)\n"
                            },
                            "sheetCond": {
                              "type": "string",
                              "description": "Value of the `cond` attribute on the quota element for the \n\"sheet\" that contains this table. \nIf no `cond` attribute is present, then `null`\n"
                            },
                            "tableTotal": {
                              "type": "integer",
                              "description": "The table total. This is used solely for soft quotas and\npercentage-based selection.\n"
                            },
                            "tableIndex": {
                              "type": "integer",
                              "description": "The table index in relation to the sheet."
                            },
                            "cells": {
                              "type": "array",
                              "description": "An array of the quota cells.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "marker": {
                                    "type": "string",
                                    "description": "Name of the quota cell marker set by this `cell`. Index into `markers` above to find the counts."
                                  },
                                  "components": {
                                    "type": "array",
                                    "description": "The markers (see `defines` and `plus`) that make\nup this quota marker.\n",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "defines": {
                      "type": "object",
                      "description": "Maps a marker name to an object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "cond": {
                            "type": "string",
                            "description": "The logic condition required to qualify for this marker.\nIf `null`, this is a plus marker.\n"
                          },
                          "description": {
                            "type": "string",
                            "description": "The alternative text for a marker shown in the Response\nSummary.\n"
                          }
                        }
                      }
                    },
                    "plus": {
                      "type": "array",
                      "description": "An array of plus markers defined in this quota",
                      "items": {
                        "type": "string"
                      }
                    },
                    "priority": {
                      "type": "object",
                      "description": "Maps quota cell markers (e.g. `/Sheet1/Male/18-25`) to priority\nlevels. Those not mentioned have priority 0.\n",
                      "additionalProperties": {
                        "type": "integer"
                      }
                    },
                    "stopped": {
                      "type": "object",
                      "description": "Maps quota cell markers of cells that were stopped to a string\nof data indicating the user that stopped the cell and the\ntimestamp of when the cell was stopped. Those have a temporary\nhard limit of 0 until resumed.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "markers": {
                      "/New Quota (1)/two": {
                        "limit": 50,
                        "pending": 0,
                        "oq": 0,
                        "complete": 0
                      },
                      "/New Quota/AoAos/bo8Oi": {
                        "limit": 20,
                        "pending": 0,
                        "oq": 0,
                        "complete": 0
                      },
                      "/New Quota (1)/one": {
                        "limit": 50,
                        "pending": 0,
                        "oq": 0,
                        "complete": 0
                      }
                    },
                    "priority": {
                      "/New Quota (1)/one": 2
                    },
                    "plus": [
                      "four",
                      "five",
                      "three",
                      "two",
                      "one"
                    ],
                    "sheets": {
                      "New Quota (1)": [
                        {
                          "cellCount": 1,
                          "sheetCond": null,
                          "tableTotal": 250,
                          "tableIndex": 0,
                          "cells": [
                            {
                              "marker": "/New Quota (1)/one",
                              "components": [
                                "one"
                              ]
                            },
                            {
                              "marker": "/New Quota (1)/two",
                              "components": [
                                "two"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "stopped": {
                      "/New Quota/AoAos/s9oVa": "erwin@decipherinc.com on 02/24/2015 12:48"
                    },
                    "defines": {
                      "XiiZn": {
                        "cond": "(q1.r6)",
                        "description": "55-65"
                      },
                      "LvmQy": {
                        "cond": "(q1.r2)",
                        "description": "18-24"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/quota/edit": {
      "put": {
        "operationId": "updateSurveyQuotaEdit",
        "summary": "Update quotas",
        "description": "Updates quota limits. Requires Response Summary: edit permission for the\nproject. Use Quota API to access quota definitions.\n",
        "tags": [
          "Survey Quotas"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limits": {
                    "type": "object",
                    "description": "Contains the keys and new limits. The key for cell is the full marker\nname and table is the sheet/tableindex. Use the Quota API to retrieve\nthe quota table sheet and index.\n"
                  }
                },
                "required": [
                  "limits"
                ]
              },
              "examples": {
                "Set cell limits": {
                  "value": {
                    "limits": {
                      "/Gender/TDW7j": "125",
                      "/Gender/gp00q": "75"
                    }
                  }
                },
                "Set table limits": {
                  "value": {
                    "limits": {
                      "Gender/1": "500"
                    }
                  }
                },
                "Remove table limits": {
                  "value": {
                    "limits": {
                      "Gender/1": "inf"
                    }
                  }
                },
                "Set limit to range": {
                  "value": {
                    "limits": {
                      "Gender/1": "500",
                      "Gender/TDW7j": "200-500",
                      "Gender/gp00q": "0-300"
                    }
                  }
                },
                "Set limit to percentages": {
                  "value": {
                    "limits": {
                      "Gender/1": "500",
                      "Gender/TDW7j": "70%",
                      "Gender/gp00q": "30%"
                    }
                  }
                },
                "Set priorities": {
                  "value": {
                    "limits": {
                      "Gender/TDW7j": "125:3",
                      "Gender/gp00q": "75"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/files": {
      "get": {
        "operationId": "getSurveyFiles",
        "summary": "List files",
        "description": "Retrieves a list of system and static files relevant to a survey",
        "tags": [
          "Survey Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "filename": {
                        "type": "string",
                        "description": "the file path relative to the survey directory"
                      },
                      "modified": {
                        "type": "string",
                        "description": "the date and time when the file was last modified",
                        "format": "ISO-8601 timestamp with timezone"
                      },
                      "size": {
                        "type": "integer",
                        "description": "the size of the file in bytes"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "filename": "survey.xml",
                    "modified": "2020-10-20T21:02:11Z",
                    "size": 1239
                  },
                  {
                    "filename": "static/less-compiled.css",
                    "modified": "2020-10-20T21:02:14Z",
                    "size": 73860
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/files/{filename}": {
      "get": {
        "operationId": "getSurveyFile",
        "summary": "Download file",
        "description": "Allows direct access to some of the configuration files that make up a\nsurvey. Use the List call above to find out which files are specifically\navailable for this survey.\n\n- survey.xml -- survey's main content\n- quota.xls -- Excel 97 file defining quotas\n- quota.xls.log -- this log file contains debug information stored on\nevery quota invocation\n- survey.log -- additional debug data related to the survey\n- data/exit.log -- one entry for each participant exiting the survey\n- virtual-timing.txt -- virtual question performance\n- static/* -- all uploaded static resources\n",
        "tags": [
          "Survey Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "filename",
            "description": "filename to download",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "survey.xml"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSurveyFile",
        "summary": "Upload/replace file",
        "tags": [
          "Survey Files"
        ],
        "description": "Allows a new file to be uploaded or an existing file to be replaced. When uploading a `survey.xml`, only a survey that would successfully load are allowed and only surveys in `dev` or `testing` state can be modified. If you override the last check beware not to modify the datamap for your survey, as no conversion process is done by this call.\n\nIf an invalid file is uploaded, the `400` error code is returned. If an error is returned from a `survey.xml`, the body will contain a list of errors in the `extra` property. This will be an array of error objects. An error object will have `type` set to either parse or survey. Parse errors occur during XML parsing. Survey errors occur during validation of survey content (i.e. attributes and values).\n\nA list of the allowed file types can be found [here](https://decipher.zendesk.com/hc/en-us/articles/360010156374-Uploading-System-Files).",
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "filename",
            "description": "filename to upload",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "survey.xml"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contents": {
                    "type": "binary",
                    "description": "The contents of the file"
                  },
                  "validate": {
                    "type": "boolean",
                    "description": "Only applies when uploading `survey.xml`. Validate `survey.xml`\nprior to saving it.\n",
                    "default": true
                  },
                  "overwriteLive": {
                    "type": "boolean",
                    "description": "Allow updates to live or closed surveys.",
                    "default": false
                  },
                  "location": {
                    "type": "string",
                    "description": "The location to which to upload the file. If uploading to the\nsurvey's static directory, use \"static\", otherwise use the default\n\"root\" to upload the file to the root directory of the survey.\nFiles in static are publicly accessible, while files in the root\ndirectory of the survey are system only.\n",
                    "default": "root",
                    "enum": [
                      "root",
                      "static"
                    ]
                  }
                },
                "required": [
                  "contents"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string",
                      "description": "the filename where the uploaded file was stored"
                    }
                  }
                },
                "example": {
                  "filename": "survey.xml"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$error": {
                      "type": "string",
                      "description": "generic error description"
                    },
                    "$code": {
                      "type": "integer",
                      "description": "http error code (400)"
                    },
                    "extra": {
                      "type": "array",
                      "description": "an array of error objects",
                      "items": {
                        "type": "object",
                        "description": "details about the particular parse or survey error"
                      }
                    }
                  }
                },
                "examples": {
                  "Parse error": {
                    "value": {
                      "$error": "Bad content. Additional error in body.",
                      "$code": 400,
                      "extra": [
                        {
                          "column": 220,
                          "processed": "<survey autosave=\\\"0\\\" setup='time,term,quota'\nautosaveKey=\\\"\\\" compat=\\\"118\\\"\nextraVariables=\\\"url,record,list,page,source\\\"\nlang=\\\"english.utf8\\\" name=\\\"Kitchen Sink Survey\n(remotely modified)\\\" pipeAltLabels=\\\"1\\\" state='testing'>\n<>\n",
                          "file": "demo/kitchensink/temp-api/survey.xml",
                          "line": 2,
                          "type": "parse",
                          "message": "not well-formed (invalid token)"
                        }
                      ]
                    }
                  },
                  "Survey errors": {
                    "value": {
                      "$error": "Bad content. Additional error in body.",
                      "$code": 400,
                      "extra": [
                        {
                          "tag": "radio",
                          "type": "survey",
                          "label": "q1",
                          "error": "Extra unrecognized argument given: whatever"
                        },
                        {
                          "line": 1243,
                          "tag": "col",
                          "type": "survey",
                          "label": "c8",
                          "error": "Extra unrecognized argument given: xyzzy"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSurveyFile",
        "summary": "Delete file",
        "description": "Allows the user to delete any file type that can be uploaded in the\nsurvey directory. Version control may store past revisions for specific\nfiles in the survey directory. The force flag is required if the survey\nis live or closed. If used incorrectly this can cause data loss. If an\ninvalid file is attempted to be deleted, a 400 response will return. On\nsuccessful deletion of the file a 200 response will return. The survey\nlog and user audit log will contain an entry for who deleted what\nspecific file.\n",
        "tags": [
          "Survey Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "filename",
            "description": "filename to delete",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "custom.css"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "description": "The location from which the file should be deleted. If deleting\na file from the static directory, use \"static\", otherwise use\nthe default \"root\" to delete a file in the root of the survey\ndirectory.\n",
                    "default": "root",
                    "type": "string",
                    "enum": [
                      "root",
                      "static"
                    ]
                  },
                  "force": {
                    "description": "Force delete the file if the survey is live or closed (warning:\nThis can cause data loss if used incorrectly).\n",
                    "default": false,
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "location": "static",
                "force": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/files/headers": {
      "get": {
        "operationId": "getSurveyFileHeaders",
        "summary": "Get file headers",
        "description": "Retrieves a list of headers from a .dat or .txt file in the root directory of\nthe project.\n",
        "tags": [
          "Survey Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "filename",
            "in": "query",
            "description": "file name from which to retrieve headers",
            "example": "data.txt",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "email",
                  "firstname",
                  "lastname",
                  "occupation"
                ]
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/warnings": {
      "get": {
        "operationId": "getSurveyWarnings",
        "summary": "Get warnings",
        "description": "Retrieve project warnings for a survey.\nOnly events experienced by non-users (i.e., logged-out participants) in non-testing surveys \nare reported. Best efforts are made to eliminate duplicate events from the results.\n",
        "tags": [
          "Survey Warnings"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "restrict events returned to just those occurring on/after this date",
            "example": "2021-01-01",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "restrict warnings counts to just those occurring on/before this date",
            "example": "2021-01-01",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "restrict events returned to just these types",
            "example": "exceptions",
            "default": "blocks,missing_resources,exceptions,quota_misses",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "survey_path",
            "in": "path",
            "description": "survey path",
            "example": "/selfserve/53a/12345",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "company": {
                      "description": "company ID",
                      "example": 1,
                      "type": "integer"
                    },
                    "counts": {
                      "description": "Full event counts",
                      "type": "object"
                    },
                    "events": {
                      "description": "An array of events consisting of the following properties\n(subject to data retention rules)\n",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "format": "timestamp",
                            "description": "time of event occurrence or observation"
                          },
                          "type": {
                            "type": "string",
                            "description": "event type",
                            "enum": [
                              "blocks",
                              "missing_resources",
                              "exceptions",
                              "quota_misses"
                            ]
                          },
                          "details": {
                            "type": "object",
                            "description": "an object consisting of properties that are specific to the event type"
                          }
                        }
                      }
                    },
                    "name": {
                      "description": "Survey name",
                      "example": "survey123",
                      "type": "string"
                    },
                    "path": {
                      "description": "Survey path",
                      "example": "selfserve/53a/210401",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/terms": {
      "get": {
        "operationId": "getSurveysTerms",
        "summary": "Get survey term elements",
        "description": "Return the term elements for the given survey",
        "tags": [
          "Survey Terms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cond": {
                        "description": "The term element's cond attribute",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the term",
                        "type": "string"
                      },
                      "label": {
                        "description": "The label of the term element",
                        "type": "string"
                      },
                      "marker": {
                        "description": "The marker that would be set if the respondent was terminated\nby the condition in this term element.\n"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "cond": "q1.r2",
                    "description": "Not a Chicago Bull",
                    "label": "te1",
                    "marker": "term:q1.r2"
                  },
                  {
                    "cond": "q2.r2",
                    "description": "Not a Michael Jordan",
                    "label": "te2",
                    "marker": "term:q2.r2"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/panels/{panel_id}/registration": {
      "get": {
        "operationId": "getPanelRegistration",
        "summary": "Get registration survey",
        "description": "Get the panel's Decipher registration survey's path.",
        "tags": [
          "Panel Data"
        ],
        "parameters": [
          {
            "name": "panel_id",
            "description": "the panel's numeric ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance",
            "description": "filter results to just this Kinesis Panel instance/host",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "the survey path"
                    }
                  }
                },
                "example": {
                  "path": "selfserve/53a/100100"
                }
              }
            }
          }
        }
      }
    },
    "/panels/{panel_id}/link": {
      "get": {
        "operationId": "getPanelLink",
        "summary": "Get link",
        "description": "Get the survey ID for the given Kinesis Panel samplesource.",
        "tags": [
          "Panel Data"
        ],
        "parameters": [
          {
            "name": "panel_id",
            "description": "the panel's numeric ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance",
            "description": "the Kinesis Panel instance/host",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "survey",
            "description": "the survey path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "description": "the participant source's list number",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "survey_id": {
                      "description": "the survey id",
                      "type": "integer"
                    }
                  }
                },
                "example": {
                  "survey_id": 1234567890
                }
              }
            }
          }
        }
      }
    },
    "/panels/{panel_id}/datapoints": {
      "get": {
        "operationId": "getPanelDatapoints",
        "summary": "List panel datapoints",
        "description": "Returns the datapoints belonging to the specified panel.\n",
        "tags": [
          "Panel Datapoints"
        ],
        "parameters": [
          {
            "name": "panel_id",
            "description": "panel's numeric ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance",
            "description": "the Kinesis Panel instance/host",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "survey",
            "description": "a survey with the panel's API key in its path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "choices": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "choice": {
                              "type": "string",
                              "description": "answer option text"
                            },
                            "export_value": {
                              "type": "integer",
                              "description": "the export value"
                            },
                            "value": {
                              "type": "integer",
                              "description": "unique (across entire panel) numeric ID"
                            }
                          }
                        }
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "hash of the datapoint, ignoring text and export value changes\n"
                      },
                      "group": {
                        "type": "string",
                        "description": "group to which the datapoint belongs"
                      },
                      "label": {
                        "type": "string",
                        "description": "the unique, alphanumeric identifier for this question\n"
                      },
                      "modified": {
                        "type": "integer",
                        "description": "the modification time of the datapoint"
                      },
                      "system_field": {
                        "type": "string",
                        "description": "system field referencing the datapoint"
                      },
                      "text": {
                        "type": "string",
                        "description": "the datapoint's question text or description"
                      },
                      "type": {
                        "type": "string",
                        "description": "the datapoint's question type"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "choices": [
                      {
                        "choice": "Male",
                        "export_value": 10,
                        "value": 1
                      },
                      {
                        "choice": "Female",
                        "export_value": 11,
                        "value": 2
                      },
                      {
                        "choice": "Prefer not to say",
                        "export_value": 99,
                        "value": 247
                      }
                    ],
                    "fingerprint": "42a637",
                    "group": null,
                    "label": "Qgender",
                    "modified": 1468518354,
                    "system_field": "gender",
                    "text": "Gender",
                    "type": "radio"
                  },
                  {
                    "choices": [],
                    "fingerprint": "c74d97",
                    "group": null,
                    "label": "Qzip",
                    "modified": 1459877107,
                    "system_field": "zip-postal_code",
                    "text": "What is your zip code?",
                    "type": "openend"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createPanelDatapoints",
        "summary": "Push datapoints",
        "description": "Create new datapoints on a Kinesis Panel from a Decipher survey's\nquestions.\n",
        "tags": [
          "Panel Datapoints"
        ],
        "parameters": [
          {
            "name": "panel_id",
            "description": "The panel's numeric ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "description": "The Kinesis Panel instance/host",
                    "type": "string"
                  },
                  "survey": {
                    "description": "The survey containing the questions to create as panel datapoints\n",
                    "type": "string"
                  }
                },
                "required": [
                  "instance",
                  "survey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "failed": {
                      "type": "array",
                      "description": "an array of errors for questions that failed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "description": "a description of the error"
                          },
                          "label": {
                            "type": "string",
                            "description": "label of the question that failed"
                          }
                        }
                      }
                    },
                    "successful": {
                      "type": "array",
                      "description": "an array of labels of questions that succeeded",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "failed": [
                    {
                      "error": "Choices not allowed for type",
                      "label": "q4"
                    }
                  ],
                  "successful": [
                    "q1",
                    "q2",
                    "q3"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/panels": {
      "get": {
        "operationId": "getSurveyPanels",
        "summary": "List kinesis panels",
        "description": "Retrieves all Kinesis Panels accessible to a survey.\n\n(Requires access to the survey and installation of the Kinesis Panel\ninstance's API key in the survey's path.)\n",
        "tags": [
          "Survey Panels"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "instance",
            "description": "filter results to just this Kinesis Panel instance/host",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instance": {
                      "type": "string",
                      "description": "the url of the kinesis panel instance"
                    },
                    "panels": {
                      "type": "array",
                      "description": "the list of panels",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id of the panel"
                          },
                          "name": {
                            "type": "string",
                            "description": "name of the panel"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": [
                      {
                        "instance": "some.panel.com",
                        "panels": [
                          {
                            "id": "1",
                            "name": "My Little Panel"
                          },
                          {
                            "id": "4",
                            "name": "My Cool, New Panel"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/panels/link": {
      "post": {
        "operationId": "updateSurveyPanelLink",
        "summary": "Update panel survey",
        "description": "Generate or restore survey IDs for each Kinesis Panel samples source\nfrom Kinesis, and update the survey accordingly.\n",
        "tags": [
          "Survey Panels"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/users": {
      "get": {
        "operationId": "getRHUsers",
        "summary": "List users",
        "description": "What users exist on the system? Returns an array of user objects.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "show users only from this particular company ID. A staff user will\nby default see all users in all companies but can choose to see only\na specific one. A regional supervisor user will see only users in\ntheir own company but can select one of the companies they\nsupervises.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "last_login_where": {
                        "type": "string",
                        "format": "ip address"
                      },
                      "supervisor": {
                        "type": "boolean"
                      },
                      "subdirectory": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "company": {
                        "type": "integer"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "last_password_change": {
                        "type": "string",
                        "format": "ISO-8601 timestamp with timezone"
                      },
                      "last_login": {
                        "type": "string",
                        "format": "ISO-8601 timestamp with timezone"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "fullname": {
                        "type": "string"
                      },
                      "lockedout_until": {
                        "type": "string",
                        "format": "ISO-8601 timestamp with timezone"
                      },
                      "login": {
                        "type": "string",
                        "format": "email"
                      },
                      "expires_on": {
                        "type": "string",
                        "format": "ISO-8601 timestamp with timezone"
                      },
                      "staff": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "last_login_where": "127.0.0.0",
                    "supervisor": false,
                    "subdirectory": null,
                    "type": "f",
                    "company": 1,
                    "id": 1,
                    "last_password_change": "1970-01-01T00:00:00Z",
                    "last_login": "2021-01-09T00:19:39Z",
                    "active": true,
                    "fullname": "",
                    "lockedout_until": null,
                    "login": "developer@decipherinc.com",
                    "expires_on": null,
                    "staff": true
                  },
                  {
                    "last_login_where": null,
                    "supervisor": false,
                    "subdirectory": null,
                    "type": "f",
                    "company": 1,
                    "id": 2,
                    "last_password_change": "1970-01-01T00:00:00Z",
                    "last_login": null,
                    "active": true,
                    "fullname": "",
                    "lockedout_until": null,
                    "login": "hermes@decipherinc.com",
                    "expires_on": null,
                    "staff": true
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rh/users/{user}": {
      "put": {
        "operationId": "updateRHUser",
        "summary": "Update user active status",
        "description": "Update the active status of a given user. Change should include an explanation via the `why` parameter which is added to the audit log with the changer and the change. You must be able to edit the user, i.e. you are supervisor for the company or staff user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "description": "either the ID or email address of the user to affect",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "why": {
                    "description": "Explanation for the status change. This is added to the user's\naudit log.\n",
                    "type": "string"
                  },
                  "active": {
                    "description": "Set this to `false` to disable a user or `true` to re-enable.\n",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/users/{user}/send-password-reset": {
      "post": {
        "operationId": "createRHUserSendPasswordReset",
        "summary": "Create password reset",
        "description": "Sends a password reset email to the user specified. You must be able to edit the user, i.e. you are supervisor for the company or staff user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "description": "either the ID or email address of the user to email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/users/{user}/whiteboard": {
      "get": {
        "operationId": "getRHUserWhiteboard",
        "summary": "Get whiteboard",
        "description": "Get a user's \"whiteboard\", containing preferences for e.g. Builder and Portal.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "description": "either the ID or email address of the user to affect",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "builder": {
                      "type": "object",
                      "description": "Preferences for Builder"
                    },
                    "portal": {
                      "type": "object",
                      "description": "Preferences for Portal"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/users/{user}/whiteboard/{fragment}": {
      "delete": {
        "operationId": "deleteRHUserWhiteboardFragement",
        "summary": "Clear whiteboard",
        "description": "Clear part of a user's whiteboard. The fragment should be either e.g. `portal` or `builder` to clear all settings related to portal and builder, or e.g.`builder/lumos.style.theme` to clear one specific setting (here, the default theme name).\nReturns the data in the entry that was cleared. For list of possible whiteboard items, issue the GET call.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "description": "either the ID or email address of the user to affect",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fragment",
            "description": "e.g. `portal` or `portal/companySelection`",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/companies": {
      "get": {
        "operationId": "getRHCompanies",
        "summary": "List companies",
        "description": "What companies exist on the system? Returns an array of company objects.\nSupervisor access required.\n",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/preferences": {
      "get": {
        "operationId": "getRHCompanyPreferences",
        "summary": "List company preferences",
        "description": "Retrieves all preferences for a specific company.",
        "parameters": [
          {
            "name": "company",
            "description": "can be \"self\" for your own company, a numeric company ID or company\nname\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "appliedDefaults": [
                        "fwu"
                      ],
                      "fwu": "compat"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/preferences/{key}": {
      "put": {
        "operationId": "updateRHCompanyPreferencesKey",
        "summary": "Update company preference",
        "description": "Set a preference to a new value.",
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company to update the preference for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 1
          },
          {
            "name": "key",
            "description": "the preference to update",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "fwu"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "the new value",
                    "type": "string"
                  }
                },
                "required": [
                  "value"
                ]
              },
              "example": {
                "value": "both"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/preferences/{key}/history": {
      "get": {
        "operationId": "getRHCompanyPreferenceHistory",
        "summary": "Get preference history",
        "description": "View a list of all changes to a specific preference. Returns\nan array of history entries.\n",
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 1
          },
          {
            "name": "key",
            "description": "name of preference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "fwu"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "new": {
                        "description": "the value of the preference"
                      },
                      "previous": {
                        "description": "the previous value of the preference"
                      },
                      "user_id": {
                        "type": "integer",
                        "description": "id of the account responsible for the change"
                      },
                      "tstamp": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "time of change"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "new": "compat",
                    "previous": "unicode",
                    "tstamp": "2014-10-21T14:27:38Z",
                    "user_id": 104
                  },
                  {
                    "new": "unicode",
                    "previous": "compat",
                    "tstamp": "2014-10-21T14:20:51Z",
                    "user_id": 104
                  },
                  {
                    "new": "compat",
                    "previous": null,
                    "tstamp": "2014-10-21T14:20:35Z",
                    "user_id": 104
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rh/surveys/categories": {
      "get": {
        "operationId": "getRHSurveysCategories",
        "summary": "Get categories",
        "description": "Return list of possible categories.",
        "tags": [
          "Categories"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "text": "Social Research",
                    "key": "social"
                  },
                  {
                    "text": "Sports, Recreation, Fitness",
                    "key": "fitness"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rh/surveys/historical": {
      "get": {
        "operationId": "getRHSurveysHistorical",
        "summary": "Get historical list",
        "description": "Returns a list of survey paths the current user can access for any\nexisting as well as historical and archived survey.\n\nUnlike the normal portal survey list, this returns all surveys\nregardless of current company selection for staff.\n",
        "tags": [
          "Historical"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "selfserve/53c/160615",
                  "selfserve/53c/181216",
                  "selfserve/53c/1611272",
                  "selfserve/53c/160616"
                ]
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/surveys": {
      "get": {
        "operationId": "getRHCompanySurveys",
        "summary": "Get surveys",
        "description": "This call retrieves Research Hub's information about surveys available\nfor companies. Generally you should specify \"all\" as company parameter:\nthe survey accessible to you may not all be owned by your company. To select\nmultiple companies, keep the \"company\" variable to \"all\" and set a\n\"companies\" variable to a list of company IDs.\n\nA search query can be what you would normally specify in the portal.\nReview the Advanced Syntax listed [Search\nCapabilities](https://decipher.zendesk.com/hc/en-us/articles/360010270893)\n-- for example, pass the `query` variable set to `#sometag`\nor `user:joe@example.com` for special queries, or `kittens` for a normal\ntext search.\n\nThe returned array contains these properties. Remember that you can pass\n`select` to any query to get just a subset of them.\n",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "the company ID or name of the company whose surveys you want to see. Specify `self` for your own company, or `all` for all companies (recommended)",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "description": "a search query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companies",
            "description": "show only companies with these IDs (used with `company=all`)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "permission",
            "description": "require a minimum permission level (e.g. `survey.edit`)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "description": "list of attributes to return",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "full survey path, e.g. `selfserve/123/4567`"
                      },
                      "title": {
                        "type": "string",
                        "description": "title of the survey"
                      },
                      "owner": {
                        "type": "integer",
                        "description": "what company own this survey?"
                      },
                      "description": {
                        "type": "string",
                        "description": "additional description entered in the portal"
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "dev",
                          "testing",
                          "live",
                          "closed"
                        ],
                        "description": "current state of the survey"
                      },
                      "tags": {
                        "type": "array",
                        "description": "array of tags applied",
                        "items": {
                          "type": "string"
                        }
                      },
                      "directory": {
                        "type": "string",
                        "description": "combination of company name, subdirectory and a client tag\n"
                      },
                      "hasSavedReport": {
                        "type": "boolean",
                        "description": "does the survey have a saved report"
                      },
                      "hasDashboard": {
                        "type": "boolean",
                        "description": "does the survey have a dashboard"
                      },
                      "archived": {
                        "type": "boolean",
                        "description": "true if hidden for your account via the archiving function\n"
                      },
                      "favorite": {
                        "type": "boolean",
                        "description": "true if you marked this survey as favorite"
                      },
                      "dateLaunched": {
                        "type": "string",
                        "description": "date survey was set Live"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "first complete date and time"
                      },
                      "finishTime": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "last complete date and time"
                      },
                      "clickthrough": {
                        "type": "integer",
                        "description": "number of clickthroughs"
                      },
                      "total": {
                        "type": "integer",
                        "description": "total participants (OQ + term + qualified)"
                      },
                      "qualified": {
                        "type": "integer",
                        "description": "qualified completes"
                      },
                      "medianQtime": {
                        "type": "integer",
                        "description": "median completion time (in seconds) for qualified\nparticipants. Not available (and always null) for Delphi\nsurveys; use the response summary API instead.\n"
                      },
                      "today": {
                        "type": "integer",
                        "description": "completes today * `averageQtime` -- mean completion time (in\nseconds) for qualified participants.  Not available (and\nalways null) for Delphi surveys; use the response summary API\ninstead.\n"
                      },
                      "compat": {
                        "type": "integer",
                        "description": "compatibility level (`compat` attribute in survey.xml)\n"
                      },
                      "questions": {
                        "type": "integer",
                        "description": "number of questions in the survey visible to the participant\n"
                      },
                      "type": {
                        "type": "integer",
                        "description": "beacon=1, email=2, spss=4"
                      },
                      "lang": {
                        "type": "array",
                        "description": "primary language, generated as a pair of [language id,\nlanguage description]\n",
                        "items": "string"
                      },
                      "otherLanguages": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "description": "list of any other languages, each item being a tuple like\nabove\n"
                      },
                      "sampleSources": {
                        "type": "array",
                        "description": "participant sources used -- this is an array of list values,\ne.g. [\"100\", \"102\"]\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "active": {
                        "type": "boolean",
                        "description": "active surveys have been accessed, edited or had had\ncompletes within 3 days\n"
                      },
                      "lastAccessBy": {
                        "type": "object",
                        "description": "null or an object with user info about the user who last\naccessed the survey\n",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          }
                        }
                      },
                      "createdBy": {
                        "description": "null or an object with user info about the user who created\nthe survey\n",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          }
                        }
                      },
                      "lastEditBy": {
                        "description": "null or an object with user info about the user who last\nedited the survey\n",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          }
                        }
                      },
                      "myAccess": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "when did YOU last access this survey?"
                      },
                      "myEdit": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "when did YOU last edit this survey?"
                      },
                      "accessed": {
                        "type": "boolean",
                        "description": "has this survey been accessed in the last 3 days? This is a\nsubset of active\n"
                      },
                      "lastEdit": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "when did someone last edit this survey?"
                      },
                      "lastAccess": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "when did someone last access this survey?"
                      },
                      "closedDate": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "null or a timestamp of when the survey was closed last"
                      },
                      "createdOn": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "a timestamp of when the survey was created"
                      },
                      "lastQuotaEdit": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "null or a timestamp of when the quota.xls was modified last\n"
                      },
                      "lastSurveyEdit": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "a timestamp of when the survey.xml was modified last\n"
                      },
                      "matched": {
                        "type": "object",
                        "description": "if `query` was passed, object containing field matched and\ncontent of that field with match highlighted\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createRHCompanySurvey",
        "summary": "Create survey",
        "description": "Create a new survey.",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "the company ID or name of the company where you want the survey to\nbe created. Specify `self` for your own company.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of survey shown in Research Hub",
                    "type": "string"
                  },
                  "ptype": {
                    "description": "Project type",
                    "type": "string",
                    "enum": [
                      "beacon",
                      "email",
                      "spss"
                    ]
                  },
                  "category": {
                    "description": "Survey category (Query `GET /api/v1/rh/surveys/categories` for\nvalid options.)\n",
                    "type": "string"
                  },
                  "subdirectory": {
                    "description": "Subdirectory ID number",
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of survey"
                  },
                  "tags": {
                    "description": "List of tags",
                    "type": "array"
                  },
                  "prefPath": {
                    "description": "Path of the survey (e.g. abc20001). Only lowercase letters,\nnumbers, and underscores are allowed.\n",
                    "type": "string"
                  },
                  "lang": {
                    "description": "Language of the survey",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "ptype"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/surveys/templates/{template}/copy": {
      "post": {
        "operationId": "createRhSurveysTemplateCopy",
        "summary": "Create survey from template",
        "description": "Create a new survey from a template.\n",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "The id of the template to use.",
            "example": "netpromoterscore",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "adtest",
                "brandawareness",
                "brandperception",
                "covidresponse",
                "shiftinglife",
                "b2binforequirement",
                "copytestvideoad",
                "csat",
                "demographic",
                "employeesatisfaction",
                "exploratorypricing",
                "30dayonboarding",
                "60dayonboarding",
                "90dayonboarding",
                "candidateevaluation",
                "exitsurvey",
                "pulse",
                "supervisorevaluation",
                "netpromoterscore",
                "priceladdering",
                "productconcept"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the new survey.",
                    "type": "string"
                  },
                  "company": {
                    "description": "Name or ID of the company in which to create the survey.\n",
                    "type": "string"
                  },
                  "category": {
                    "description": "Category to assign to the new survey.",
                    "type": "string",
                    "enum": [
                      "",
                      "auto",
                      "beauty",
                      "beverage_alcohol",
                      "beverage_non_alcohol",
                      "business",
                      "parenting",
                      "loyalty",
                      "credit_cards",
                      "tourism",
                      "education",
                      "computer",
                      "entertainment",
                      "explicit",
                      "clothing_dept_store",
                      "clothing_other",
                      "finance",
                      "food",
                      "gambling",
                      "politics",
                      "healthcare",
                      "home_appliances",
                      "home_entertainment",
                      "home_improvement",
                      "information_tech",
                      "media",
                      "personal_care",
                      "pets",
                      "restaurants",
                      "sensitive",
                      "smoking",
                      "social",
                      "fitness",
                      "telecom",
                      "toys",
                      "transportation",
                      "travel_airlines",
                      "travel_hotels",
                      "travel_services",
                      "video_games",
                      "internet"
                    ]
                  },
                  "description": {
                    "description": "A description of the survey.",
                    "type": "string"
                  },
                  "lang": {
                    "description": "Language for the survey.",
                    "type": "string"
                  },
                  "preferred_path": {
                    "description": "Custom path for the new survey. If omitted the path will be\nauto-generated.\n",
                    "type": "string"
                  },
                  "subdirectory": {
                    "description": "ID of the subdirectory to use.",
                    "type": "integer"
                  },
                  "tags": {
                    "description": "List of tags to add to the survey.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "company"
                ],
                "example": {
                  "name": "New NPS Survey",
                  "company": "Decipher"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessed": {
                      "example": true,
                      "type": "boolean"
                    },
                    "active": {
                      "example": true,
                      "type": "boolean"
                    },
                    "alerts": {
                      "example": 0,
                      "type": "integer"
                    },
                    "archived": {
                      "example": false,
                      "type": "boolean"
                    },
                    "averageQtime": {
                      "example": null,
                      "type": "string"
                    },
                    "category": {
                      "example": null,
                      "type": "string"
                    },
                    "cati": {
                      "type": "object"
                    },
                    "clickthrough": {
                      "example": 0,
                      "type": "integer"
                    },
                    "closedDate": {
                      "example": null,
                      "type": "string"
                    },
                    "compat": {
                      "example": 147,
                      "type": "integer"
                    },
                    "createdBy": {
                      "type": "object"
                    },
                    "createdOn": {
                      "type": "object"
                    },
                    "dateLaunched": {
                      "example": null,
                      "type": "string"
                    },
                    "description": {
                      "example": "",
                      "type": "string"
                    },
                    "directory": {
                      "example": "Decipher",
                      "type": "string"
                    },
                    "favorite": {
                      "example": false,
                      "type": "boolean"
                    },
                    "finishTime": {
                      "example": null,
                      "type": "string"
                    },
                    "groups": {
                      "example": [],
                      "type": "array"
                    },
                    "hasDashboard": {
                      "example": true,
                      "type": "boolean"
                    },
                    "hasProjectParameters": {
                      "example": false,
                      "type": "boolean"
                    },
                    "hasSavedReport": {
                      "example": false,
                      "type": "boolean"
                    },
                    "isCATI": {
                      "example": false,
                      "type": "boolean"
                    },
                    "isKinesisRegistration": {
                      "example": false,
                      "type": "boolean"
                    },
                    "lang": {
                      "example": [
                        "english",
                        "English (USA)"
                      ],
                      "type": "array"
                    },
                    "lastAccess": {
                      "example": 1620852045,
                      "type": "integer"
                    },
                    "lastAccessBy": {
                      "type": "object"
                    },
                    "lastEdit": {
                      "example": 1620852045,
                      "type": "integer"
                    },
                    "lastEditBy": {
                      "type": "object"
                    },
                    "lastQuotaEdit": {
                      "type": "object"
                    },
                    "lastSurveyEdit": {
                      "type": "object"
                    },
                    "matched": {
                      "type": "object"
                    },
                    "medianQtime": {
                      "example": null,
                      "type": "string"
                    },
                    "myAccess": {
                      "example": 1620852045,
                      "type": "integer"
                    },
                    "myEdit": {
                      "example": 1620852045,
                      "type": "integer"
                    },
                    "otherLanguages": {
                      "example": [],
                      "type": "array"
                    },
                    "owner": {
                      "example": 1,
                      "type": "integer"
                    },
                    "path": {
                      "example": "selfserve/53a/210522",
                      "type": "string"
                    },
                    "perm": {
                      "example": 4031,
                      "type": "integer"
                    },
                    "qualified": {
                      "example": 0,
                      "type": "integer"
                    },
                    "questions": {
                      "example": null,
                      "type": "string"
                    },
                    "retention": {
                      "type": "object"
                    },
                    "sampleSources": {
                      "example": [],
                      "type": "array"
                    },
                    "startTime": {
                      "example": null,
                      "type": "string"
                    },
                    "state": {
                      "example": "testing",
                      "type": "string"
                    },
                    "tags": {
                      "example": [],
                      "type": "array"
                    },
                    "title": {
                      "example": "New NPS Survey",
                      "type": "string"
                    },
                    "today": {
                      "example": 0,
                      "type": "integer"
                    },
                    "total": {
                      "example": 0,
                      "type": "integer"
                    },
                    "type": {
                      "example": 1,
                      "type": "integer"
                    },
                    "users": {
                      "example": [],
                      "type": "array"
                    },
                    "usesLogic": {
                      "example": false,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/surveys/{survey}/copy": {
      "post": {
        "operationId": "createRhSurveyCopy",
        "summary": "Copy survey",
        "description": "Create a new survey by copying an existing one.\n",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the new survey.",
                    "type": "string"
                  },
                  "copy_data": {
                    "description": "Copy project data.",
                    "default": false,
                    "type": "boolean"
                  },
                  "copy_permissions": {
                    "description": "Copy project users and groups.",
                    "default": false,
                    "type": "boolean"
                  },
                  "preferred_path": {
                    "description": "Optional custom survey path. If not supplied, the path will be\nauto-generated.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessed": {
                      "example": true,
                      "type": "boolean"
                    },
                    "active": {
                      "example": true,
                      "type": "boolean"
                    },
                    "alerts": {
                      "example": 0,
                      "type": "integer"
                    },
                    "archived": {
                      "example": false,
                      "type": "boolean"
                    },
                    "averageQtime": {
                      "example": null,
                      "type": "string"
                    },
                    "category": {
                      "example": null,
                      "type": "string"
                    },
                    "cati": {
                      "type": "object"
                    },
                    "clickthrough": {
                      "example": 0,
                      "type": "integer"
                    },
                    "closedDate": {
                      "example": null,
                      "type": "string"
                    },
                    "compat": {
                      "example": 147,
                      "type": "integer"
                    },
                    "createdBy": {
                      "type": "object"
                    },
                    "createdOn": {
                      "type": "object"
                    },
                    "dateLaunched": {
                      "example": null,
                      "type": "string"
                    },
                    "description": {
                      "example": null,
                      "type": "string"
                    },
                    "directory": {
                      "example": "Decipher",
                      "type": "string"
                    },
                    "favorite": {
                      "example": false,
                      "type": "boolean"
                    },
                    "finishTime": {
                      "example": null,
                      "type": "string"
                    },
                    "groups": {
                      "example": [],
                      "type": "array"
                    },
                    "hasDashboard": {
                      "example": true,
                      "type": "boolean"
                    },
                    "hasProjectParameters": {
                      "example": false,
                      "type": "boolean"
                    },
                    "hasSavedReport": {
                      "example": false,
                      "type": "boolean"
                    },
                    "isCATI": {
                      "example": false,
                      "type": "boolean"
                    },
                    "isKinesisRegistration": {
                      "example": false,
                      "type": "boolean"
                    },
                    "lang": {
                      "example": [
                        "english",
                        "English (USA)"
                      ],
                      "type": "array"
                    },
                    "lastAccess": {
                      "example": 1620851910,
                      "type": "integer"
                    },
                    "lastAccessBy": {
                      "type": "object"
                    },
                    "lastEdit": {
                      "example": 1620851910,
                      "type": "integer"
                    },
                    "lastEditBy": {
                      "type": "object"
                    },
                    "lastQuotaEdit": {
                      "type": "object"
                    },
                    "lastSurveyEdit": {
                      "type": "object"
                    },
                    "matched": {
                      "type": "object"
                    },
                    "medianQtime": {
                      "example": null,
                      "type": "string"
                    },
                    "myAccess": {
                      "example": 1620851910,
                      "type": "integer"
                    },
                    "myEdit": {
                      "example": 1620851910,
                      "type": "integer"
                    },
                    "otherLanguages": {
                      "example": [],
                      "type": "array"
                    },
                    "owner": {
                      "example": 1,
                      "type": "integer"
                    },
                    "path": {
                      "example": "selfserve/53a/210521",
                      "type": "string"
                    },
                    "perm": {
                      "example": 4031,
                      "type": "integer"
                    },
                    "qualified": {
                      "example": 0,
                      "type": "integer"
                    },
                    "questions": {
                      "example": null,
                      "type": "string"
                    },
                    "retention": {
                      "type": "object"
                    },
                    "sampleSources": {
                      "example": [],
                      "type": "array"
                    },
                    "startTime": {
                      "example": null,
                      "type": "string"
                    },
                    "state": {
                      "example": "testing",
                      "type": "string"
                    },
                    "tags": {
                      "example": [
                        "Decipher"
                      ],
                      "type": "array"
                    },
                    "title": {
                      "example": "Copy of Survey",
                      "type": "string"
                    },
                    "today": {
                      "example": 0,
                      "type": "integer"
                    },
                    "total": {
                      "example": 0,
                      "type": "integer"
                    },
                    "type": {
                      "example": 1,
                      "type": "integer"
                    },
                    "users": {
                      "example": [],
                      "type": "array"
                    },
                    "usesLogic": {
                      "example": false,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/surveys/{survey}": {
      "get": {
        "operationId": "getRHSurvey",
        "summary": "Get survey information",
        "description": "This will get the information shown in the Research Hub for an individual survey.",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "lastSurveyEdit": "2021-01-26T02:51:51Z",
                  "sampleSources": [
                    "0"
                  ],
                  "groups": [],
                  "closedDate": null,
                  "questions": 3,
                  "owner": 1,
                  "total": 167,
                  "lang": [
                    "english",
                    "English (USA)"
                  ],
                  "compat": 146,
                  "archived": false,
                  "clickthrough": 201,
                  "startTime": "2021-01-20T02:49:08.000Z",
                  "lastQuotaEdit": "2021-01-25T22:47:13.000Z",
                  "medianQtime": null,
                  "state": "dev",
                  "dateLaunched": null,
                  "type": 1,
                  "today": 167,
                  "category": "",
                  "description": "",
                  "tags": [
                    "Decipher"
                  ],
                  "usesLogic": false,
                  "myAccess": "2021-01-26T17:43:45.000Z",
                  "averageQtime": null,
                  "otherLanguages": [],
                  "qualified": 92,
                  "myEdit": 1611683005,
                  "lastAccessBy": {
                    "email": "developer@decipherinc.com",
                    "name": "Developer",
                    "id": 1
                  },
                  "createdBy": {
                    "email": "developer@decipherinc.com",
                    "name": "Developer",
                    "id": 1
                  },
                  "active": true,
                  "path": "selfserve/53a/210100",
                  "hasProjectParameters": false,
                  "matched": {},
                  "finishTime": "2021-01-26T02:52:10.000Z",
                  "lastEditBy": null,
                  "isCATI": false,
                  "lastEdit": null,
                  "hasDashboard": false,
                  "lastAccess": "2021-01-25T22:15:37.000Z",
                  "createdOn": "2021-01-22T23:39:02.000Z",
                  "title": "Best Survey Ever",
                  "favorite": false,
                  "keep": false,
                  "hasSavedReport": false,
                  "directory": "Decipher",
                  "accessed": "1970-01-01T00:00:01.000Z"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateRHSurvey",
        "summary": "Update survey information",
        "description": "This call is used to update information in the Research Hub tied to a\nsurvey, and requires either `survey.edit` or `data.edit` permission\non the survey. Omitted parameters are left unchanged. Returns back the\nnew state of the resource.\n\nValid categories:\n\n+ empty string (No Selection)\n+ `auto` (Automotive)\n+ `beauty` (Beauty/Cosmetics)\n+ `beverage_alcohol` (Beverages - Alcoholic)\n+ `beverage_non_alcohol` (Beverages - Non-alcoholic)\n+ `business` (Business)\n+ `parenting` (Children & Parenting)\n+ `loyalty` (Coalition/Loyalty Programs)\n+ `credit_cards` (Credit Cards)\n+ `tourism` (Destinations & Tourism)\n+ `education` (Education)\n+ `computer` (Electronics/Computer/Software)\n+ `entertainment` (Entertainment & Leisure)\n+ `explicit` (Explicit Content)\n+ `clothing_dept_store` (Fashion & Clothing - Department Store)\n+ `clothing_other` (Fashion & Clothing - Other )\n+ `finance` (Finance, Banking Investing & Insurance)\n+ `food` (Food/Snacks)\n+ `gambling` (Gambling/Lottery)\n+ `politics` (Government & Politics)\n+ `healthcare` (Healthcare/Pharmaceuticals)\n+ `home_appliances` (Home (Utilities, Appliances))\n+ `home_entertainment` (Home Entertainment (DVD, VHS))\n+ `home_improvement` (Home Improvement/Real Estate/Construction)\n+ `information_tech` (IT (Servers, Databases, etc))\n+ `media` (Media & Publishing)\n+ `personal_care` (Personal Care/Toiletries)\n+ `pets` (Pets)\n+ `restaurants` (Restaurants)\n+ `sensitive` (Sensitive Content)\n+ `smoking` (Smoking/Tobacco)\n+ `social` (Social Research)\n+ `fitness` (Sports, Recreation, Fitness)\n+ `telecom` (Telecommunications (phone, cell phone, cable))\n+ `toys` (Toys)\n+ `transportation` (Transportation)\n+ `travel_airlines` (Travel - Airlines)\n+ `travel_hotels` (Travel - Hotels)\n+ `travel_services` (Travel Services/Agency/Booking)\n+ `video_games` (Video Games)\n+ `internet` (Websites/Internet/E-Commerce)\n",
        "tags": [
          "Surveys"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "Path of the survey. `survey.edit` or `data.edit` permission required.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "A description for the survey.",
                    "type": "string"
                  },
                  "category": {
                    "description": "A category key. Query `GET /api/v1/rh/surveys/categories` to see\nall possible options. Empty string is passed to return to the\ndefault state of \"No Selection\".\n",
                    "type": "string"
                  },
                  "keep": {
                    "description": "if set to `true`, suppress any automated archival of this suvey.\nEquivalent of issuing the command `touch keep` in the shell.\n",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "category": "food",
                  "description": "<p>This survey is about food!</p>",
                  "keep": false,
                  "path": "survey/path"
                }
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/panels": {
      "get": {
        "operationId": "getRHCompanyPanels",
        "summary": "List company panels",
        "description": "Retrieves all Kinesis Panels accessible to a company.\n\nRequires access to the company and installation of the Kinesis Panel\ninstance's API key.\n",
        "tags": [
          "Panels"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "can be \"self\" for your own company, a numeric company ID or company name\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance",
            "description": "filter results to just this Kinesis Panel instance/host",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "instance": {
                        "type": "string",
                        "description": "the url of the Kinesis instance"
                      },
                      "panels": {
                        "type": "array",
                        "description": "the list of panels on that instance",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "the id of the panel"
                            },
                            "name": {
                              "type": "string",
                              "description": "the name of the panel"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "instance": "some.panel.com",
                    "panels": [
                      {
                        "id": "1",
                        "name": "My Little Panel"
                      },
                      {
                        "id": "4",
                        "name": "My Cool, New Panel"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rh/companies/{company}/crosstab-report-defaults": {
      "get": {
        "operationId": "getRHCompanyCrosstabReportDefaults",
        "summary": "Get crosstab preferences",
        "description": "Retrieves company Crosstab Report Preference configuration file.",
        "tags": [
          "Crosstabs"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "singleSelectOneD": {
                      "type": "object",
                      "description": "Report defaults for single select (radio/select) one\ndimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets default choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets defaults choice for chart type.\n",
                          "enum": [
                            "bar",
                            "column",
                            "pie",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "singleSelectMultiD": {
                      "type": "object",
                      "description": "Report defaults for single select (radio/select)\nmulti-dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ],
                          "description": "Sets the default % Base.\n"
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table."
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add a summary table for newly\nadded rows (nets).\n"
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                        }
                      }
                    },
                    "multiSelectOneD": {
                      "type": "object",
                      "description": "Report defaults for multiselect (checkbox) one dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base",
                          "enum": [
                            "answering",
                            "shown",
                            "segment",
                            "responses"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets defaults choice for chart type.\n",
                          "enum": [
                            "bar",
                            "column",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "multiSelectMultiD": {
                      "type": "object",
                      "description": "Report defaults for multi-select (checkbox) two dimensional\nquestion.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment",
                            "responses"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table."
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "counts"
                            ]
                          }
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add summary table or newly\nadded rows (nets).\n"
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                        }
                      }
                    },
                    "numberOneD": {
                      "type": "object",
                      "description": "Report defaults for one dimensional numeric question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        }
                      }
                    },
                    "numberMultiD": {
                      "type": "object",
                      "description": "Report defaults for two dimensional numeric question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets default choices for transposing of grid, main, and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                        }
                      }
                    },
                    "ratingOneD": {
                      "type": "object",
                      "description": "Report defaults for Rating one dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets default choice for chart type.",
                          "enum": [
                            "bar",
                            "column",
                            "pie",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "ratingMultiD": {
                      "type": "object",
                      "description": "Report defaults for Rating multi-dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table.\n"
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add summary table for newly\nadded rows (nets).\n"
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of question grid,\nmain or stat summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "multiSelectMultiD": {
                        "addRowSummaryTable": true,
                        "chartTypeMapping": {
                          "counts": "bar",
                          "gridTable": "column",
                          "rowTable": "line"
                        },
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": true,
                        "showGridTable": true,
                        "stats": [
                          "counts"
                        ],
                        "transpose": [
                          "gridTable",
                          "counts"
                        ]
                      },
                      "multiSelectOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "questionTableChartType": "column",
                        "stats": [
                          "counts"
                        ],
                        "transpose": true
                      },
                      "numberMultiD": {
                        "customBase": "answering",
                        "expandable": true,
                        "stats": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ],
                        "summary": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ]
                      },
                      "numberOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ]
                      },
                      "ratingMultiD": {
                        "addRowSummaryTable": true,
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": false,
                        "showGridTable": true,
                        "stats": [
                          "mean"
                        ]
                      },
                      "ratingOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "se",
                          "mean",
                          "median"
                        ],
                        "summary": [
                          "se",
                          "mean",
                          "median"
                        ]
                      },
                      "singleSelectMultiD": {
                        "addRowSummaryTable": true,
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": true,
                        "showGridTable": true,
                        "stats": [
                          "mean"
                        ]
                      },
                      "singleSelectOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "mean"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateRHCompanyCrosstabReportDefaults",
        "summary": "Update crosstab preferences",
        "description": "Update a company Crosstab Reports Preference configuration file. Only parameters being updated need to be included.",
        "tags": [
          "Crosstabs"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configs": {
                    "type": "object",
                    "properties": {
                      "singleSelectOneD": {
                        "type": "object",
                        "description": "Report defaults for single select (radio/select) one\ndimensional question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se"
                              ]
                            }
                          },
                          "transpose": {
                            "type": "bool",
                            "description": "Sets default choice for transposing of question table.\n"
                          },
                          "questionTableChartType": {
                            "type": "string",
                            "description": "Sets defaults choice for chart type.\n",
                            "enum": [
                              "bar",
                              "column",
                              "pie",
                              "area",
                              "line"
                            ]
                          }
                        }
                      },
                      "singleSelectMultiD": {
                        "type": "object",
                        "description": "Report defaults for single select (radio/select)\nmulti-dimensional question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ],
                            "description": "Sets the default % Base.\n"
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "summary": {
                            "type": "array",
                            "description": "Sets default summary tables.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "showGridTable": {
                            "type": "bool",
                            "description": "Sets the default choice to display a grid table."
                          },
                          "showAllTables": {
                            "type": "bool",
                            "description": "Sets the default choice to display all tables."
                          },
                          "transpose": {
                            "type": "array",
                            "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                            "items": {
                              "type": "string",
                              "enum": [
                                "gridTable",
                                "rowTable",
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "addRowSummaryTable": {
                            "type": "bool",
                            "description": "Sets the default choice to add a summary table for newly\nadded rows (nets).\n"
                          },
                          "chartTypeMapping": {
                            "type": "object",
                            "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                          }
                        }
                      },
                      "multiSelectOneD": {
                        "type": "object",
                        "description": "Report defaults for multiselect (checkbox) one dimensional question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base",
                            "enum": [
                              "answering",
                              "shown",
                              "segment",
                              "responses"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "counts"
                              ]
                            }
                          },
                          "transpose": {
                            "type": "bool",
                            "description": "Sets defaults choice for transposing of question table.\n"
                          },
                          "questionTableChartType": {
                            "type": "string",
                            "description": "Sets defaults choice for chart type.\n",
                            "enum": [
                              "bar",
                              "column",
                              "area",
                              "line"
                            ]
                          }
                        }
                      },
                      "multiSelectMultiD": {
                        "type": "object",
                        "description": "Report defaults for multi-select (checkbox) two dimensional\nquestion.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment",
                              "responses"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "counts"
                              ]
                            }
                          },
                          "summary": {
                            "type": "array",
                            "description": "Sets default summary tables.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "counts"
                              ]
                            }
                          },
                          "showGridTable": {
                            "type": "bool",
                            "description": "Sets the default choice to display a grid table."
                          },
                          "showAllTables": {
                            "type": "bool",
                            "description": "Sets the default choice to display all tables."
                          },
                          "transpose": {
                            "type": "array",
                            "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                            "items": {
                              "type": "string",
                              "enum": [
                                "gridTable",
                                "rowTable",
                                "counts"
                              ]
                            }
                          },
                          "addRowSummaryTable": {
                            "type": "bool",
                            "description": "Sets the default choice to add summary table or newly\nadded rows (nets).\n"
                          },
                          "chartTypeMapping": {
                            "type": "object",
                            "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                          }
                        }
                      },
                      "numberOneD": {
                        "type": "object",
                        "description": "Report defaults for one dimensional numeric question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "transpose": {
                            "type": "bool",
                            "description": "Sets defaults choice for transposing of question table.\n"
                          }
                        }
                      },
                      "numberMultiD": {
                        "type": "object",
                        "description": "Report defaults for two dimensional numeric question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "summary": {
                            "type": "array",
                            "description": "Sets default summary tables.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "transpose": {
                            "type": "array",
                            "description": "Sets default choices for transposing of grid, main, and\nstats summary tables.\n",
                            "items": {
                              "type": "string",
                              "enum": [
                                "gridTable",
                                "rowTable",
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "chartTypeMapping": {
                            "type": "object",
                            "description": "Sets charts for main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                          }
                        }
                      },
                      "ratingOneD": {
                        "type": "object",
                        "description": "Report defaults for Rating one dimensional question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "transpose": {
                            "type": "bool",
                            "description": "Sets defaults choice for transposing of question table.\n"
                          },
                          "questionTableChartType": {
                            "type": "string",
                            "description": "Sets default choice for chart type.",
                            "enum": [
                              "bar",
                              "column",
                              "pie",
                              "area",
                              "line"
                            ]
                          }
                        }
                      },
                      "ratingMultiD": {
                        "type": "object",
                        "description": "Report defaults for Rating multi-dimensional question.\n",
                        "properties": {
                          "customBase": {
                            "type": "string",
                            "description": "Sets the default % Base.",
                            "enum": [
                              "answering",
                              "shown",
                              "segment"
                            ]
                          },
                          "expandable": {
                            "type": "bool",
                            "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                          },
                          "stats": {
                            "type": "array",
                            "description": "Sets default stats.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "summary": {
                            "type": "array",
                            "description": "Sets default summary tables.",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "showGridTable": {
                            "type": "bool",
                            "description": "Sets the default choice to display a grid table.\n"
                          },
                          "showAllTables": {
                            "type": "bool",
                            "description": "Sets the default choice to display all tables."
                          },
                          "addRowSummaryTable": {
                            "type": "bool",
                            "description": "Sets the default choice to add summary table for newly\nadded rows (nets).\n"
                          },
                          "transpose": {
                            "type": "array",
                            "description": "Sets defaults choice for transposing of question grid,\nmain or stat summary tables.\n",
                            "items": {
                              "type": "string",
                              "enum": [
                                "gridTable",
                                "rowTable",
                                "mean",
                                "median",
                                "stddev",
                                "se",
                                "sum",
                                "min",
                                "max"
                              ]
                            }
                          },
                          "chartTypeMapping": {
                            "type": "object",
                            "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "configs"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "singleSelectOneD": {
                      "type": "object",
                      "description": "Report defaults for single select (radio/select) one\ndimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets default choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets defaults choice for chart type.\n",
                          "enum": [
                            "bar",
                            "column",
                            "pie",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "singleSelectMultiD": {
                      "type": "object",
                      "description": "Report defaults for single select (radio/select)\nmulti-dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ],
                          "description": "Sets the default % Base.\n"
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table."
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add a summary table for newly\nadded rows (nets).\n"
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                        }
                      }
                    },
                    "multiSelectOneD": {
                      "type": "object",
                      "description": "Report defaults for multiselect (checkbox) one dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base",
                          "enum": [
                            "answering",
                            "shown",
                            "segment",
                            "responses"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets defaults choice for chart type.\n",
                          "enum": [
                            "bar",
                            "column",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "multiSelectMultiD": {
                      "type": "object",
                      "description": "Report defaults for multi-select (checkbox) two dimensional\nquestion.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment",
                            "responses"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "counts"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table."
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of grid, main and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "counts"
                            ]
                          }
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add summary table or newly\nadded rows (nets).\n"
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\n`questionTableChartType` for value mapping.\n"
                        }
                      }
                    },
                    "numberOneD": {
                      "type": "object",
                      "description": "Report defaults for one dimensional numeric question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        }
                      }
                    },
                    "numberMultiD": {
                      "type": "object",
                      "description": "Report defaults for two dimensional numeric question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets default choices for transposing of grid, main, and\nstats summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                        }
                      }
                    },
                    "ratingOneD": {
                      "type": "object",
                      "description": "Report defaults for Rating one dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "transpose": {
                          "type": "bool",
                          "description": "Sets defaults choice for transposing of question table.\n"
                        },
                        "questionTableChartType": {
                          "type": "string",
                          "description": "Sets default choice for chart type.",
                          "enum": [
                            "bar",
                            "column",
                            "pie",
                            "area",
                            "line"
                          ]
                        }
                      }
                    },
                    "ratingMultiD": {
                      "type": "object",
                      "description": "Report defaults for Rating multi-dimensional question.\n",
                      "properties": {
                        "customBase": {
                          "type": "string",
                          "description": "Sets the default % Base.",
                          "enum": [
                            "answering",
                            "shown",
                            "segment"
                          ]
                        },
                        "expandable": {
                          "type": "bool",
                          "description": "Sets the default choice for 'Nest Rows Under Nets'.\n"
                        },
                        "stats": {
                          "type": "array",
                          "description": "Sets default stats.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "summary": {
                          "type": "array",
                          "description": "Sets default summary tables.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "showGridTable": {
                          "type": "bool",
                          "description": "Sets the default choice to display a grid table.\n"
                        },
                        "showAllTables": {
                          "type": "bool",
                          "description": "Sets the default choice to display all tables."
                        },
                        "addRowSummaryTable": {
                          "type": "bool",
                          "description": "Sets the default choice to add summary table for newly\nadded rows (nets).\n"
                        },
                        "transpose": {
                          "type": "array",
                          "description": "Sets defaults choice for transposing of question grid,\nmain or stat summary tables.\n",
                          "items": {
                            "type": "string",
                            "enum": [
                              "gridTable",
                              "rowTable",
                              "mean",
                              "median",
                              "stddev",
                              "se",
                              "sum",
                              "min",
                              "max"
                            ]
                          }
                        },
                        "chartTypeMapping": {
                          "type": "object",
                          "description": "Sets charts for grid, main or stat tables. See values of\ntranspose for object key and values of\nquestionTableChartType for value mapping.\n"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "multiSelectMultiD": {
                        "addRowSummaryTable": true,
                        "chartTypeMapping": {
                          "counts": "bar",
                          "gridTable": "column",
                          "rowTable": "line"
                        },
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": true,
                        "showGridTable": true,
                        "stats": [
                          "counts"
                        ],
                        "transpose": [
                          "gridTable",
                          "counts"
                        ]
                      },
                      "multiSelectOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "questionTableChartType": "column",
                        "stats": [
                          "counts"
                        ],
                        "transpose": true
                      },
                      "numberMultiD": {
                        "customBase": "answering",
                        "expandable": true,
                        "stats": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ],
                        "summary": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ]
                      },
                      "numberOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "mean",
                          "median",
                          "stddev",
                          "se",
                          "sum",
                          "min",
                          "max"
                        ]
                      },
                      "ratingMultiD": {
                        "addRowSummaryTable": true,
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": false,
                        "showGridTable": true,
                        "stats": [
                          "mean"
                        ]
                      },
                      "ratingOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "se",
                          "mean",
                          "median"
                        ],
                        "summary": [
                          "se",
                          "mean",
                          "median"
                        ]
                      },
                      "singleSelectMultiD": {
                        "addRowSummaryTable": true,
                        "customBase": "shown",
                        "expandable": true,
                        "showAllTables": true,
                        "showGridTable": true,
                        "stats": [
                          "counts"
                        ]
                      },
                      "singleSelectOneD": {
                        "customBase": "shown",
                        "expandable": true,
                        "stats": [
                          "mean"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/archive": {
      "post": {
        "operationId": "createSurveyArchive",
        "summary": "Archive project",
        "description": "",
        "tags": [
          "Archives"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to be archived. You must have survey edit permissions.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Allows archiving projects when the required time before archival\nhas not been met. Live projects or project directories with\n`keep` flag will not be archived.\n",
                    "default": false,
                    "type": "boolean"
                  },
                  "subdirectories": {
                    "description": "Allows archival of project folder and all its sub-directories\n(surveys).  Ensure these sub-directories are not being accessed\nby other projects (dashboards or reports) before using this\nparameter.\n",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/unarchive": {
      "post": {
        "operationId": "createSurveyUnarchive",
        "summary": "Un-archive project",
        "description": "Un-archives project to `{survey}` directory.",
        "tags": [
          "Archives"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to be un-archived. You must have survey edit permissions.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/archives/planned": {
      "get": {
        "operationId": "getArchivesPlanned",
        "summary": "Get planned activities",
        "description": "Returns an array of objects describing what surveys will be automatically\narchived (if enabled) and what archived surveys will have their collected\ndata cleared (if enabled). Only projects that would be visible in the portal\nare returned.\n\nThe list is sorted chronologically, with surveys set to be kept forever\n(`date` column blank) last. The `days` attribute is the retention for\nclearing or archiving which can come from server or company configuration.\n`action` is either `archive` for surveys in the system that will move to the\narchive, or `clear` for surveys already archived which will have any\nrespondent data stripped at that time.\n",
        "tags": [
          "Archives"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "date and time when the action will occur"
                      },
                      "action": {
                        "type": "string",
                        "description": "planned action type",
                        "enum": [
                          "archive",
                          "clear"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "description": "the survey path"
                      },
                      "retention": {
                        "type": "integer",
                        "description": "retention days configured for the given action"
                      },
                      "title": {
                        "type": "string",
                        "description": "title of the survey"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "date": "2021-03-19T23:16:53Z",
                    "action": "clear",
                    "path": "selfserve/93a/200412",
                    "retention": 90,
                    "title": "COVID-19 Study"
                  },
                  {
                    "date": null,
                    "action": "archive",
                    "path": "selfserve/1fbc/sfc16004",
                    "retention": 30,
                    "title": "Product Preferences"
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "beacon",
            "source": "beacon get archives/planned\n"
          },
          {
            "lang": "curl",
            "source": "curl --location \\\n  --request GET '{server}/api/v1/archives/planned' \\\n  --header 'x-apikey: {api_key}'\n"
          }
        ]
      }
    },
    "/archives": {
      "delete": {
        "operationId": "deleteArchive",
        "summary": "Purge collected data in archive",
        "description": "Modifies an already archived survey, removing all collected data from\nthe archive and re-archiving it. This cannot be undone. Requires staff\naccess.\n",
        "tags": [
          "Archives"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archived_path": {
                    "type": "string",
                    "description": "path to archived survey"
                  }
                },
                "required": [
                  "archived_path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rh/apikeys": {
      "get": {
        "operationId": "getHRApiKeys",
        "summary": "List API Keys",
        "description": "What API keys have been created?\n\nA supervisor user will be able to see all API keys for his company. A\nstaff user will be able to see all global API keys. Other user types\nwill see only their own keys.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "Restrict array of keys keyed to users in this company ID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "description": "Restrict array of keys to only this specific user. A user can be\nspecified as a numeric ID, email address or shared user name. The\nspecial name \"self\" references to the owner of the API key.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "restrictions": {
                        "type": "object"
                      },
                      "user_id": {
                        "type": "integer"
                      },
                      "calls": {
                        "type": "integer"
                      },
                      "user_fullname": {
                        "type": "stirng"
                      },
                      "created_on": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone"
                      },
                      "key": {
                        "type": "string"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "resource": {
                        "type": "integer"
                      },
                      "user_name": {
                        "type": "string"
                      },
                      "user_email": {
                        "type": "string",
                        "format": "email address"
                      }
                    }
                  }
                },
                "example": {
                  "restrictions": {},
                  "user_id": 1,
                  "calls": 0,
                  "user_fullname": "Developer",
                  "created_on": "2021-01-13T01:36:44.000Z",
                  "key": "jw2qgdbjt7xv66bjrvnpg9540kynjbsp",
                  "active": true,
                  "resource": 0,
                  "user_name": "developer",
                  "user_email": "developer@decipherinc.com"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createRHApiKey",
        "summary": "Create API key",
        "description": "Add a new API key.",
        "tags": [
          "API Keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "description": "user account that will be used when doing API calls with this\nkey. Specific a numeric user ID, email address, shared user name\nor \"self\" for your own account\n",
                    "type": "string"
                  },
                  "restrictions": {
                    "description": "security restrictions for how the new key can be used",
                    "type": "string"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restrictions": {
                      "type": "object"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "calls": {
                      "type": "integer"
                    },
                    "combined_key": {
                      "type": "string"
                    },
                    "user_fullname": {
                      "type": "string"
                    },
                    "created_on": {
                      "type": "string"
                    },
                    "secret": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "resource": {
                      "type": "integer"
                    },
                    "user_name": {
                      "type": "string"
                    },
                    "user_email": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "restrictions": {},
                  "user_id": 1,
                  "calls": 0,
                  "combined_key": "mdb0z0kzaquhh38da0bw2vv2efw74jqsjf1benyfftbjy5b2c9kg0b2r73tnzv27",
                  "user_fullname": "",
                  "created_on": "2021-01-13T00:24:55.000Z",
                  "secret": "jf1benyfftbjy5b2c9kg0b2r73tnzv27",
                  "key": "mdb0z0kzaquhh38da0bw2vv2efw74jqs",
                  "active": true,
                  "resource": 0,
                  "user_name": "developer",
                  "user_email": "developer@decipherinc.com"
                }
              }
            }
          }
        }
      }
    },
    "/rh/apikeys/{apikey}": {
      "post": {
        "operationId": "rekeyRHApiKey",
        "summary": "Rekey",
        "description": "This allows for re-generation of the secret part of the API key while\nretaining restrictions and API key usage history.\n\n**Python library NOTE**: As a convenience, the Python library allows you to\nrun `api.rekey()` to call this function and immediately update the\nconfiguration file with the new key. You can also run `beacon rekey` from the\ncommand line to do the same.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "apikey",
            "description": "The API key to manipulate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "jw2qgdbjt7xv66bjrvnpg9540kynjbsp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restrictions": {
                      "type": "object"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "calls": {
                      "type": "integer"
                    },
                    "combined_key": {
                      "type": "string"
                    },
                    "user_fullname": {
                      "type": "string"
                    },
                    "created_on": {
                      "type": "string"
                    },
                    "secret": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "resource": {
                      "type": "integer"
                    },
                    "user_name": {
                      "type": "string"
                    },
                    "user_email": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "restrictions": {},
                  "user_id": 1,
                  "calls": 0,
                  "combined_key": "jw2qgdbjt7xv66bjrvnpg9540kynjbspm3e9de92j31ud1qzdqaqyvnqsea0x212",
                  "user_fullname": "",
                  "created_on": "2021-01-13T00:24:55.000Z",
                  "secret": "m3e9de92j31ud1qzdqaqyvnqsea0x212",
                  "key": "jw2qgdbjt7xv66bjrvnpg9540kynjbsp",
                  "active": true,
                  "resource": 0,
                  "user_name": "developer",
                  "user_email": "developer@decipherinc.com"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getRHApiKey",
        "summary": "Get",
        "description": "Retrieve information about a single API key.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "apikey",
            "description": "The API key to manipulate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mdb0z0kzaquhh38da0bw2vv2efw74jqs"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restrictions": {
                      "type": "object"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "calls": {
                      "type": "integer"
                    },
                    "user_fullname": {
                      "type": "string"
                    },
                    "created_on": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "resource": {
                      "type": "integer"
                    },
                    "user_name": {
                      "type": "string"
                    },
                    "user_email": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "restrictions": {},
                  "user_id": 1,
                  "calls": 0,
                  "user_fullname": "",
                  "created_on": "2021-01-13T00:24:55.000Z",
                  "key": "mdb0z0kzaquhh38da0bw2vv2efw74jqs",
                  "active": true,
                  "resource": 0,
                  "user_name": "developer",
                  "user_email": "developer@decipherinc.com"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateRHApiKey",
        "summary": "Update",
        "description": "Change an API key's restrictions. In the request body, specify an object\nwith \"restrictions\" being the only valid key. The value of restrictions\nmust follow the key restriction specification.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "apikey",
            "description": "The API key to manipulate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "jw2qgdbjt7xv66bjrvnpg9540kynjbsp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "restrictions": {
                    "type": "string",
                    "description": "updated restrictions for this key; set to `{}` for no restrictions\n"
                  }
                },
                "required": [
                  "restrictions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restrictions": {
                      "type": "object"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "calls": {
                      "type": "integer"
                    },
                    "user_fullname": {
                      "type": "string"
                    },
                    "created_on": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "resource": {
                      "type": "integer"
                    },
                    "user_name": {
                      "type": "string"
                    },
                    "user_email": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "restrictions": {},
                  "user_id": 1,
                  "calls": 0,
                  "user_fullname": "",
                  "created_on": "2021-01-13T00:24:55.000Z",
                  "key": "jw2qgdbjt7xv66bjrvnpg9540kynjbsp",
                  "active": true,
                  "resource": 0,
                  "user_name": "developer",
                  "user_email": "developer@decipherinc.com"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteRHApiKey",
        "summary": "Retire",
        "description": "Deactivate an API key. Keys that were created and never used are deleted;\nothers are marked as inactive for audit purposes. The `deleted` value in the\nresponse will tell you whether the key was completely erased or just\ninactivated.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "apikey",
            "description": "The API key to manipulate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mdb0z0kzaquhh38da0bw2vv2efw74jqs"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean",
                      "description": "true if the key was deleted, false if it was marked as inactive\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/usage": {
      "get": {
        "operationId": "getRHUsage",
        "summary": "Calculate usage",
        "description": "Outputs data generated by the usage page, combined with a breakdown of\nqualifieds by device type. Note that this data is only accessible 24-48 hours\nafter: yesterday's participant data is converted at 10pm (Beacon Cloud) or 1am\n(Ares).\n",
        "tags": [
          "Usage"
        ],
        "parameters": [
          {
            "name": "start",
            "description": "start date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "description": "end date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "company",
            "description": "restrict only to this company's stats",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeDecipher",
            "description": "exclude Decipher-launched projects",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "qualified_devices": {
                      "type": "object",
                      "description": "qualifieds by device",
                      "properties": {
                        ".": {
                          "type": "integer",
                          "description": "desktop"
                        },
                        "f": {
                          "type": "integer",
                          "description": "featurephone"
                        },
                        "s": {
                          "type": "integer",
                          "description": "smartphone"
                        },
                        "m": {
                          "type": "integer",
                          "description": "misc mobile device"
                        },
                        "t": {
                          "type": "integer",
                          "description": "tablet"
                        }
                      }
                    },
                    "clickthrough_devices": {
                      "type": "object",
                      "description": "clickthroughs by device",
                      "properties": {
                        ".": {
                          "type": "integer",
                          "description": "desktop"
                        },
                        "f": {
                          "type": "integer",
                          "description": "featurephone"
                        },
                        "s": {
                          "type": "integer",
                          "description": "smartphone"
                        },
                        "m": {
                          "type": "integer",
                          "description": "misc mobile device"
                        },
                        "t": {
                          "type": "integer",
                          "description": "tablet"
                        }
                      }
                    },
                    "users": {
                      "type": "integer",
                      "description": "distinct active users"
                    },
                    "surveys": {
                      "type": "integer",
                      "description": "distinct active live surveys"
                    },
                    "clickthrough": {
                      "type": "integer",
                      "description": "total clickthroughts in live surveys"
                    },
                    "qualifiedCompletes": {
                      "type": "integer",
                      "description": "total qualifiedss"
                    },
                    "surveyPaths": {
                      "type": "array",
                      "description": "survey paths involved in the active live surveys calculation\n",
                      "items": {
                        "type": "string"
                      }
                    },
                    "overquota": {
                      "type": "integer",
                      "description": "total overquota"
                    },
                    "terminated": {
                      "type": "integer",
                      "description": "total terminated"
                    },
                    "standardCompletes": {
                      "type": "integer",
                      "description": "internal split for Decipher billing purposes"
                    },
                    "mobileCompletes": {
                      "type": "integer",
                      "description": "internal split for Decipher billing purposes"
                    },
                    "videos": {
                      "type": "integer",
                      "description": "number of Brightview videos"
                    },
                    "videoViews": {
                      "type": "integer",
                      "description": "Brightview video views"
                    },
                    "views0_5Min": {
                      "type": "integer",
                      "description": "Brightview video views between 0 and 5 minutes"
                    },
                    "views5_10Min": {
                      "type": "integer",
                      "description": "Brightview video views between 5 and 10 minutes"
                    },
                    "views10Min": {
                      "type": "integer",
                      "description": "Brightview video views over 10 minutes"
                    },
                    "emailSends": {
                      "type": "integer",
                      "description": "number of emails sent"
                    },
                    "emailCampaigns": {
                      "type": "integer",
                      "description": "number of email campaigns"
                    },
                    "spamComplaints": {
                      "type": "integer",
                      "description": "numer of spam complaints"
                    },
                    "spamRate": {
                      "type": "integer",
                      "description": "spam rate"
                    },
                    "launchedSurveys": {
                      "type": "integer",
                      "description": "number of launched surveys"
                    },
                    "vtResponsesSeparated": {
                      "type": "array",
                      "description": "list of response counts per video testimonial question"
                    },
                    "imgUploadResponsesSeparated": {
                      "type": "array",
                      "description": "list of response counts per image upload question"
                    },
                    "event_*": {
                      "type": "integer",
                      "description": "detailed usage stats (reports run, dashboards created, etc)\n"
                    },
                    "hubStorage": {
                      "type": "integer",
                      "description": "hub storage"
                    },
                    "importedCompletes": {
                      "type": "integer",
                      "description": "number of imported completes"
                    },
                    "cleanedData": {
                      "type": "integer"
                    },
                    "publishedDashboards": {
                      "type": "integer",
                      "description": "number of published dashboards"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rh/warnings/summary": {
      "get": {
        "operationId": "getRHWarningsSummary",
        "summary": "Get warnings summary",
        "description": "Retrieve summaries of project warnings for companies' projects. Returns an array of objects for each project.\nEvents are summarized as counts occurring during the period specified. Only events experienced by non-users (i.e., logged-out participants) in non-testing surveys are reported. Best efforts are made to eliminate duplicate events from the results.",
        "tags": [
          "Warnings Summary"
        ],
        "parameters": [
          {
            "name": "companies",
            "description": "restrict projects to just those owned by companies with these IDs\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "state",
            "description": "restrict projects to just those with this state",
            "in": "query",
            "required": false,
            "schema": {
              "default": "any",
              "type": "string",
              "enum": [
                "live",
                "closed",
                "any"
              ]
            }
          },
          {
            "name": "start",
            "description": "restrict warnings counts to include only those occurring on/after this date (in ISO 8601 format)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "YYYY-MM-DD"
            }
          },
          {
            "name": "end",
            "description": "restrict warnings counts to include only those occurring on/before this date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "YYYY-MM-DD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "project name"
                      },
                      "path": {
                        "type": "string",
                        "description": "project path"
                      },
                      "company": {
                        "type": "integer",
                        "description": "company id"
                      },
                      "lastEditBy": {
                        "type": "string",
                        "description": "the user who last edited this survey"
                      },
                      "blocks": {
                        "type": "integer",
                        "description": "occurences of participants being blocked from enter the survey\nfor various reasons\n"
                      },
                      "missing_resources": {
                        "type": "integer",
                        "description": "occurences of a nonexistent static resource (e.g. image or\nscript) being requested by the survey\n"
                      },
                      "exceptions": {
                        "type": "integer",
                        "description": "fatal errors experienced by participants"
                      },
                      "quota_misses": {
                        "type": "integer",
                        "description": "occurrences of a participant failing to qualify for a quota\ntable\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/configuration": {
      "get": {
        "operationId": "getSurveyCrosstabsConfiguration",
        "summary": "Get crosstabs configuration",
        "description": "Retrieves segments and globally available weighting variables configured\nfor a survey.\n",
        "tags": [
          "Crosstabs Configuration"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "banners": [],
                  "weight": []
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/execute": {
      "post": {
        "operationId": "createSurveyCrosstabsExecute",
        "summary": "Execute crosstabs",
        "description": "Allows you to execute a crosstabs run with custom segments and filters. This\nis exactly the same interface that the crosstabs user interface uses to get\nthe data to display the tables.\n\nThe normal output is fairly complex: you may also request very\nsimplified format by passing `simplified` set to `true`.\n\nIf you specify `simplified` = true, the output is vastly simplified. It will\nbe an object with one property by table label, for example `q1$r1`. The value\nis an array of the rows displayed: the first element is the row's title and\nthe next N*2 elements are the percentage or stat value and count, one per\nsegment.\n",
        "tags": [
          "Crosstabs Execution"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "simplified": {
                    "description": "Generate vastly simplified output rather than the full",
                    "default": false,
                    "type": "boolean"
                  },
                  "segments": {
                    "description": "An array of segment objects to split all the tables by. Each\nsegment object should contain the properties `title`, `cond` and\nmay optionally contain `sg` to create custom stat test groups. If\nyou do not specify a `title`, one is attempted derived from\n`cond` (this is possible only for simple conditions like\n\"q1.r1\").\n",
                    "default": [
                      {
                        "title": "All",
                        "cond": "ALL"
                      }
                    ],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "cond": {
                          "type": "string"
                        },
                        "sg": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "title",
                        "cond"
                      ]
                    }
                  },
                  "filters": {
                    "description": "An array of Python conditions to apply. These filter conditions\nare applied before any segments.\n",
                    "default": [
                      "qualified"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "base": {
                    "description": "How should percentages be calculated?\n\n+ `answering`: percentages are based on those answering the\n  question.\n+ `segment`: the total in the segment is used.\n+ `shown`: percentages shown but not necessarily answering the\n  question.\n+ `variable`: percentage shown for the variable (for checkbox\n  variables only; you must have `trackVars=\"checkbox\"` configured)",
                    "default": "answering",
                    "type": "string",
                    "enum": [
                      "answering",
                      "segment",
                      "shown",
                      "variable"
                    ]
                  },
                  "tables": {
                    "description": "Show only tables with these table labels.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "aggregates": {
                    "description": "Show output matching report grid tables. If set to `false`,\nquestion tables are not aggregated and a separate table is shown\nfor each data variable. Not Applicable for saved reports.\n",
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "segments": {
                      "type": "array",
                      "description": "An array of the segment objects you requested.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "integer",
                            "description": "Count of participants matching the segment."
                          },
                          "abbr": {
                            "type": "string",
                            "description": "Label used for stat testing."
                          },
                          "sg": {
                            "type": "string",
                            "description": "If is set and not null, this segment was stat tested\nagainst only other segments within the same `sg` value.\n"
                          },
                          "cond": {
                            "type": "string",
                            "description": "Segment condition (Python expression, e.g. \"ALL\" or\n\"q1.r1\")\n"
                          },
                          "title": {
                            "type": "string",
                            "description": "Segment's title."
                          }
                        }
                      }
                    },
                    "objects": {
                      "type": "array",
                      "description": "An array of the table data.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The table label. This uniquely identifies a table. The\ntable label consists of the question's system label (i.e.\nlabel as specified in the XML file, and not through e.g.\nvariables.xls or data export customization), a $ sign then\na sub-label.  For example, if question q1 has only one\ntable it will be labelled `q1$`. Multiple tables might be\nlabelled `q1$r1` and `q1$mean` (for Mean Summary table).\n"
                          },
                          "qlabel": {
                            "type": "string",
                            "description": "The label of the underlying question."
                          },
                          "title": {
                            "type": "string",
                            "description": "The main title of this table. This will be the question's\ntitle.\n"
                          },
                          "subtitle": {
                            "type": "string",
                            "description": "When a question has multiple tables, each will have a\ndifferent subtitle. May be null if no subtitle.\n"
                          },
                          "rows": {
                            "description": "An array of objects defining the table row structures.\n",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "obj": {
                                  "type": "string",
                                  "description": "The underlying object for the row (e.g. \"q1,c1\" would\nmean the row was created from the definition of\ncolumn \"c1\" within question \"q1\").\n"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "The reporting title to be displayed for the row (the\nreporting title starts out as what is specified in\nthe survey.xml with HTML etc. stripped; it can be\ncustomized in the report).\n"
                                },
                                "label": {
                                  "type": "string",
                                  "description": "The row label. This is typically the label of the\nunderlying row or column, e.g. \"c1\".\n"
                                },
                                "cond": {
                                  "type": "string",
                                  "description": "The Python logic condition that was used to generate\nthe data for the table row.\n"
                                },
                                "dv": {
                                  "type": "integer",
                                  "description": "The data value used for statistical calculation (e.g.\nif showing a rating question table with 5 rows, the\ndata values might span from 5 to 1 or 1 to 5\ndepending on whether the scale is ascending or\ndescending).\n"
                                },
                                "intent": {
                                  "type": "string",
                                  "enum": [
                                    "total",
                                    "data",
                                    "numnet",
                                    "net",
                                    "stat"
                                  ],
                                  "description": "Set to `total` for the total row, `data` for ordinary\ndata rows showing a percentage, `numnet` for numeric\nnets, `net` for normal nets and `stat` for statistic\nrows.\n"
                                },
                                "stat": {
                                  "type": "string",
                                  "enum": [
                                    "counts",
                                    "mean",
                                    "stddev",
                                    "median",
                                    "se",
                                    "sum"
                                  ],
                                  "description": "If intent=\"stat\", this describes what stat is being\nshown in this row. One of `counts` (checkbox count),\n`mean`, `stddev`, `median`, `se` (Standard Error) or\n`sum`.\n"
                                },
                                "qa": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "optional property: If it exists it's an array of QA\ncodes specific to the underlying survey row or\ncolumn.\n"
                                },
                                "pct": {
                                  "type": "string",
                                  "description": "Hint on how to display percentages. If `null` then\npercentages should not be disabled for this table\nrow. This value is set on rows that are not included\nin the total base (I.e. \"Refuse to Answer\") which in\nthe survey.xml are configured as `aggregates=\"0\"`.\n"
                                }
                              }
                            }
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            },
                            "description": "The `data` array contains one entry per item in the `rows`.\nEach entry in data is another array, containing one item\nper segment in this table. That final item is an array\nagain with two possible layouts. If the row's `intent` is\n`stat` then this is a statistical row with 3 items:\n\n* `0` the stat value (mean, median etc. depending on the\n  `stat` property of the matching row)\n* `1` the count of items matching the condition\n* `2` stat testing data (see below).\n\nIf `intent` is set to anything but `stat` the row is a\npercentage row, i.e. displaying a count and percentages.\nIt will have 5 items:\n\n* `0` vertical percentage, relative to the effective base\n  for this row. This percentage is emitted with 6 digits\n  of precision\n* `1` weighted count (rounded to nearest number)\n* `2` unweighted count. This will be the same as item #1\n  unless weighting was applied\n* `3` effective base. This is used for stat testing\n  calculations and will be slightly different from normal\n  base if weighting was used.\n* `4` stat testing data. Either `null` or an array\n  containing references to other columns where a stat test\n  was successful. The reference is either the upper or\n  lower-case variant of the row's `abbr` property.\n\nIf you specify `simplified` = true, the output is vastly\nsimplified. It will be an object with one property by table\nlabel, for example `q1$r1`. The value is an array of the\nrows displayed: the first element is the row's title and\nthe next N*2 elements are the percentage or stat value and\ncount, one per segment.\n"
                          },
                          "qtype": {
                            "type": "string",
                            "description": "Question type of the underlying question (corresponds to\nthe lower-case XML tag, e.g. \"radio\").\n"
                          },
                          "segments": {
                            "description": "Segments that were applied to this particular table. When\nusing pinned reports, tables display may have non-uniform\nsegments.\n",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "description": "Segment's title."
                                },
                                "cond": {
                                  "type": "string",
                                  "description": "Segment condition (Python expression ,e.g. \"ALL\" or\n\"q1.r1\").\n"
                                },
                                "sg": {
                                  "type": "string",
                                  "description": "If is set and not null, this segment was stat\ntested against only other segments within the same\n`sg` value.\n"
                                }
                              }
                            }
                          },
                          "qa": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "maxItems": 2,
                              "items": {
                                "type": "string"
                              }
                            },
                            "description": "An array of QA codes for the underlying question. Each\narray element is a 2-element array of the QA code\n(e.g. \"SHF\\(r\\)\") and the human readable explanation\n(e.g. \"Rows are shuffled\")\n"
                          },
                          "intent": {
                            "type": "string",
                            "description": "This is `null` for all tables except net summaries, where\nit's `summary`\n"
                          },
                          "obj": {
                            "type": "string",
                            "description": "The XML object that is the primary object driving this\ntable.  For a question that generates a single table, this\nwill be e.g. \"q1\".  For question that consists of multiple\ntables (e.g. 2D radio grouped by rows), \"q1,r1\" .. \"q1,r5\".\n"
                          },
                          "tableType": {
                            "type": "string",
                            "enum": [
                              "simple",
                              "numeric",
                              "net",
                              "stat"
                            ],
                            "description": "Set to `simple` (table contains percentages), `numeric`\n(table contains stats such as mean), `net`\" (additional\ntable  created for variable nets) or `stat` (summary table\nfor stats).\n"
                          }
                        }
                      }
                    },
                    "dlident": {
                      "type": "string",
                      "description": "The \"DownLoad IDENT\" value can be used to create a direct link\nto a report run or to download data matching the report\nsegments.\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/nets": {
      "put": {
        "operationId": "updateSurveyCrosstabsNets",
        "summary": "Create or update nets",
        "description": "Create or overwrite all nets on a table, or update the nest setting on\nexisting nets.\n",
        "tags": [
          "Crosstabs Nets"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to run crosstabs in",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tables": {
                    "description": "an array of the tables and their updated nets.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "table": {
                          "type": "string",
                          "description": "The label of the target question"
                        },
                        "nest": {
                          "type": "boolean",
                          "description": "When set to `true` the net rows will appear nested under the\nnets in the crosstab tables\n"
                        },
                        "nets": {
                          "description": "An array of the new nets.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "A label used to identify a net so that it may be included\nin the `items` of another net\n"
                              },
                              "summary": {
                                "type": "boolean",
                                "description": "Adds a summary table for the net (multidimensional\nquestions only)\n"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title to be shown in the crosstabs table for the net\n"
                              },
                              "items": {
                                "description": "An array of the question's row labels to be included in\nthis net\n",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "op": {
                                "type": "string",
                                "enum": [
                                  "or",
                                  "and",
                                  "count",
                                  "mean",
                                  "median",
                                  "max",
                                  "min",
                                  "sum",
                                  "se",
                                  "stddev"
                                ],
                                "description": "The operation of the net. May be one of the following:\n\n+ `or` -- generates an \"OR\" net\n+ `and` -- generates an \"AND\" net\n+ `count` -- generates a \"Count\" net\n+ `mean` -- generates a \"Mean\" net\n+ `median` -- generate a \"Median\" net\n+ `max` -- generate a \"Maximum\" net\n+ `min` -- generate a \"Minimum\" net\n+ `sum` -- generate a \"Sum\" net\n+ `se` -- generate a \"Standard Error\" net\n+ `stddev` -- generate a \"Standard Deviation\" net\n"
                              }
                            },
                            "required": [
                              "title",
                              "items",
                              "op"
                            ]
                          }
                        }
                      },
                      "required": [
                        "table"
                      ]
                    }
                  }
                },
                "required": [
                  "tables"
                ]
              },
              "examples": {
                "New nets": {
                  "description": "Providing a nets key in the table will trigger an overwrite of all\nexisting nets in the table.\n",
                  "value": [
                    {
                      "table": "q1",
                      "nest": true,
                      "nets": [
                        {
                          "title": "1 or 2",
                          "op": "or",
                          "items": [
                            "r1",
                            "r2"
                          ],
                          "summary": false
                        },
                        {
                          "title": "3 or 4",
                          "op": "and",
                          "items": [
                            "r3",
                            "r4"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "Nested nets": {
                  "description": "A nested net requires defining a sub net first with a unique `label`\nadded in `items` in a parent net.\n",
                  "value": [
                    {
                      "table": "q1",
                      "nest": true,
                      "nets": [
                        {
                          "label": "subnet",
                          "title": "subnet for 1 or 2",
                          "op": "or",
                          "items": [
                            "r1",
                            "r2"
                          ]
                        },
                        {
                          "title": "parent net",
                          "op": "or",
                          "items": [
                            "subnet",
                            "r3"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "Toggle nesting": {
                  "description": "To update only the 'Nest Rows under Nets' setting without overwriting\nexisting nets.\n",
                  "value": [
                    {
                      "table": "q1",
                      "nest": true
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/saved": {
      "get": {
        "operationId": "getSurveyCrosstabsSaved",
        "summary": "List saved reports",
        "tags": [
          "Saved Crosstabs"
        ],
        "description": "Lists \"saved reports\" and \"saved crosstabs\" created on a survey.\n",
        "parameters": [
          {
            "name": "survey",
            "description": "the survey to list saved reports for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "the unique ID of the report; use it to execute it",
                        "type": "string"
                      },
                      "title": {
                        "description": "the title",
                        "type": "string"
                      },
                      "description": {
                        "description": "the full description",
                        "type": "string"
                      },
                      "visibility": {
                        "description": "(deprecated) one of `public` (anyone -- even without login --\ncan view), `protected` (only owner can edit), or `shared`\n(anyone with survey access can edit)\n",
                        "type": "string",
                        "enum": [
                          "public",
                          "protected",
                          "shared"
                        ]
                      },
                      "access": {
                        "description": "one of `public` (anyone -- even without login -- can view), `private` (only owner can view/edit), or `readonly` (anyone with survey access can view)",
                        "type": "string",
                        "enum": [
                          "public",
                          "private",
                          "readonly"
                        ]
                      },
                      "updated_on": {
                        "description": "when this report was last changed",
                        "type": "string",
                        "format": "datetime"
                      },
                      "created_on": {
                        "description": "when this report was created",
                        "type": "string",
                        "format": "datetime"
                      },
                      "updated_by": {
                        "description": "id of user who modified this report last",
                        "type": "integer"
                      },
                      "tmp": {
                        "description": "indicates if this report has been saved",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/saved/{saved}/execute": {
      "post": {
        "operationId": "createSurveyCrosstabsSavedExecute",
        "summary": "Execute saved report",
        "description": "This runs the saved report/crosstab, outputting the same format as an\nordinary crosstab.\n",
        "tags": [
          "Saved Crosstabs"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to run crosstabs in",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saved",
            "description": "the 12 or 16 character report ID",
            "example": "1h7c1s5znuk1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "simplified": {
                    "description": "Generate vastly simplified output rather than the full.",
                    "default": false,
                    "type": "boolean"
                  },
                  "aggregates": {
                    "description": "Show output matching report grid tables. If set to `false`,\nquestion tables are not aggregated and a separate table is shown\nfor each data variable. Not Applicable for saved reports.\n",
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "segments": {
                      "type": "array",
                      "description": "An array of the segment objects you requested.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "integer",
                            "description": "Count of participants matching the segment."
                          },
                          "abbr": {
                            "type": "string",
                            "description": "Label used for stat testing."
                          },
                          "sg": {
                            "type": "string",
                            "description": "If is set and not null, this segment was stat tested\nagainst only other segments within the same `sg` value.\n"
                          },
                          "cond": {
                            "type": "string",
                            "description": "Segment condition (Python expression, e.g. \"ALL\" or\n\"q1.r1\")\n"
                          },
                          "title": {
                            "type": "string",
                            "description": "Segment's title."
                          }
                        }
                      }
                    },
                    "objects": {
                      "type": "array",
                      "description": "An array of the table data.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The table label. This uniquely identifies a table. The\ntable label consists of the question's system label (i.e.\nlabel as specified in the XML file, and not through e.g.\nvariables.xls or data export customization), a $ sign then\na sub-label.  For example, if question q1 has only one\ntable it will be labelled `q1$`. Multiple tables might be\nlabelled `q1$r1` and `q1$mean` (for Mean Summary table).\n"
                          },
                          "qlabel": {
                            "type": "string",
                            "description": "The label of the underlying question."
                          },
                          "title": {
                            "type": "string",
                            "description": "The main title of this table. This will be the question's\ntitle.\n"
                          },
                          "subtitle": {
                            "type": "string",
                            "description": "When a question has multiple tables, each will have a\ndifferent subtitle. May be null if no subtitle.\n"
                          },
                          "rows": {
                            "description": "An array of objects defining the table row structures.\n",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "obj": {
                                  "type": "string",
                                  "description": "The underlying object for the row (e.g. \"q1,c1\" would\nmean the row was created from the definition of\ncolumn \"c1\" within question \"q1\").\n"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "The reporting title to be displayed for the row (the\nreporting title starts out as what is specified in\nthe survey.xml with HTML etc. stripped; it can be\ncustomized in the report).\n"
                                },
                                "label": {
                                  "type": "string",
                                  "description": "The row label. This is typically the label of the\nunderlying row or column, e.g. \"c1\".\n"
                                },
                                "cond": {
                                  "type": "string",
                                  "description": "The Python logic condition that was used to generate\nthe data for the table row.\n"
                                },
                                "dv": {
                                  "type": "integer",
                                  "description": "The data value used for statistical calculation (e.g.\nif showing a rating question table with 5 rows, the\ndata values might span from 5 to 1 or 1 to 5\ndepending on whether the scale is ascending or\ndescending).\n"
                                },
                                "intent": {
                                  "type": "string",
                                  "enum": [
                                    "total",
                                    "data",
                                    "numnet",
                                    "net",
                                    "stat"
                                  ],
                                  "description": "Set to `total` for the total row, `data` for ordinary\ndata rows showing a percentage, `numnet` for numeric\nnets, `net` for normal nets and `stat` for statistic\nrows.\n"
                                },
                                "stat": {
                                  "type": "string",
                                  "enum": [
                                    "counts",
                                    "mean",
                                    "stddev",
                                    "median",
                                    "se",
                                    "sum"
                                  ],
                                  "description": "If intent=\"stat\", this describes what stat is being\nshown in this row. One of `counts` (checkbox count),\n`mean`, `stddev`, `median`, `se` (Standard Error) or\n`sum`.\n"
                                },
                                "qa": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "optional property: If it exists it's an array of QA\ncodes specific to the underlying survey row or\ncolumn.\n"
                                },
                                "pct": {
                                  "type": "string",
                                  "description": "Hint on how to display percentages. If `null` then\npercentages should not be disabled for this table\nrow. This value is set on rows that are not included\nin the total base (I.e. \"Refuse to Answer\") which in\nthe survey.xml are configured as `aggregates=\"0\"`.\n"
                                }
                              }
                            }
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            },
                            "description": "The `data` array contains one entry per item in the `rows`.\nEach entry in data is another array, containing one item\nper segment in this table. That final item is an array\nagain with two possible layouts. If the row's `intent` is\n`stat` then this is a statistical row with 3 items:\n\n* `0` the stat value (mean, median etc. depending on the\n  `stat` property of the matching row)\n* `1` the count of items matching the condition\n* `2` stat testing data (see below).\n\nIf `intent` is set to anything but `stat` the row is a\npercentage row, i.e. displaying a count and percentages.\nIt will have 5 items:\n\n* `0` vertical percentage, relative to the effective base\n  for this row. This percentage is emitted with 6 digits\n  of precision\n* `1` weighted count (rounded to nearest number)\n* `2` unweighted count. This will be the same as item #1\n  unless weighting was applied\n* `3` effective base. This is used for stat testing\n  calculations and will be slightly different from normal\n  base if weighting was used.\n* `4` stat testing data. Either `null` or an array\n  containing references to other columns where a stat test\n  was successful. The reference is either the upper or\n  lower-case variant of the row's `abbr` property.\n\nIf you specify `simplified` = true, the output is vastly\nsimplified. It will be an object with one property by table\nlabel, for example `q1$r1`. The value is an array of the\nrows displayed: the first element is the row's title and\nthe next N*2 elements are the percentage or stat value and\ncount, one per segment.\n"
                          },
                          "qtype": {
                            "type": "string",
                            "description": "Question type of the underlying question (corresponds to\nthe lower-case XML tag, e.g. \"radio\").\n"
                          },
                          "segments": {
                            "description": "Segments that were applied to this particular table. When\nusing pinned reports, tables display may have non-uniform\nsegments.\n",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "description": "Segment's title."
                                },
                                "cond": {
                                  "type": "string",
                                  "description": "Segment condition (Python expression ,e.g. \"ALL\" or\n\"q1.r1\").\n"
                                },
                                "sg": {
                                  "type": "string",
                                  "description": "If is set and not null, this segment was stat\ntested against only other segments within the same\n`sg` value.\n"
                                }
                              }
                            }
                          },
                          "qa": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "maxItems": 2,
                              "items": {
                                "type": "string"
                              }
                            },
                            "description": "An array of QA codes for the underlying question. Each\narray element is a 2-element array of the QA code\n(e.g. \"SHF\\(r\\)\") and the human readable explanation\n(e.g. \"Rows are shuffled\")\n"
                          },
                          "intent": {
                            "type": "string",
                            "description": "This is `null` for all tables except net summaries, where\nit's `summary`\n"
                          },
                          "obj": {
                            "type": "string",
                            "description": "The XML object that is the primary object driving this\ntable.  For a question that generates a single table, this\nwill be e.g. \"q1\".  For question that consists of multiple\ntables (e.g. 2D radio grouped by rows), \"q1,r1\" .. \"q1,r5\".\n"
                          },
                          "tableType": {
                            "type": "string",
                            "enum": [
                              "simple",
                              "numeric",
                              "net",
                              "stat"
                            ],
                            "description": "Set to `simple` (table contains percentages), `numeric`\n(table contains stats such as mean), `net`\" (additional\ntable  created for variable nets) or `stat` (summary table\nfor stats).\n"
                          }
                        }
                      }
                    },
                    "dlident": {
                      "type": "string",
                      "description": "The \"DownLoad IDENT\" value can be used to create a direct link\nto a report run or to download data matching the report\nsegments.\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/saved/{saved}/export/{format}": {
      "post": {
        "operationId": "createSurveyCrosstabsSavedExport",
        "summary": "Export saved report",
        "description": "Request a conversion of a saved report. The requested file type is\nimmediately returned.\n",
        "tags": [
          "Saved Crosstabs"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "The survey whose saved report you want to execute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saved",
            "description": "The 12 or 16 character report ID",
            "example": "1h7c1s5znuk1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "description": "One of \"pptx\" (Microsoft PowerPoint), \"excel\" (Excel) or \"pdf\"\n(Adobe PDF)\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pptx",
                "excel",
                "pdf"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "aggregates": {
                    "description": "Show output matching report grid tables. If set to `false`,\nquestion tables are not aggregated and a separate table is shown\nfor each data variable. Not Applicable for saved reports.\n",
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/tablesettings": {
      "delete": {
        "operationId": "deleteSurveyCrosstabsTablesettings",
        "summary": "Delete crosstabs table settings",
        "description": "Reset all tables or just the given table to their \"as programmed\" state,\nremoving any customization. Requires reporting: edit permission for the\nproject.\n",
        "tags": [
          "Crosstabs Table Settings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tablename": {
                    "description": "Table to reset. If supplied, only this table will be reset,\notherwise all tables will be reset.\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/validate": {
      "get": {
        "operationId": "getSurveyCrosstabsValidate",
        "summary": "Validate logic",
        "description": "Check whether the logic is valid for crosstabs.\n",
        "tags": [
          "Crosstabs Validation"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to run crosstabs in",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logic",
            "description": "the quoted logic to be tested",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/crosstabs/weighting/rim/{var}": {
      "put": {
        "operationId": "updateSurveyCrosstabsWeightingRim",
        "summary": "Update rim weighting",
        "tags": [
          "Crosstabs Rim Weighting"
        ],
        "description": "Create per-record weights based on a set of RIM variables and breaks. The algorithm as described in the Wincross manual is used.",
        "parameters": [
          {
            "name": "survey",
            "description": "survey path to run crosstabs in",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "var",
            "description": "The target var to save the data in. This will be created as a new or updated column in the `nweight.txt` file.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "iterations": {
                    "description": "How many times should we try to approximate the variables.\n",
                    "default": 50,
                    "type": "integer"
                  },
                  "minWeight": {
                    "description": "Minimum acceptable record weight.",
                    "default": 0.0001,
                    "type": "float"
                  },
                  "maxWeight": {
                    "description": "Maximum acceptable record weight (by default, no limit).\n",
                    "default": 999999,
                    "type": "float"
                  },
                  "converge": {
                    "description": "Acceptable convergence to consider the test done before\ncompleting all iterations.\n",
                    "default": 0.000005,
                    "type": "float"
                  },
                  "test": {
                    "description": "In test mode, do not save the data but still run the calculations.\n",
                    "default": false,
                    "type": "boolean"
                  },
                  "chunks": {
                    "description": "An array of objects, containing `precondition` and `variables`.\nEach variable is an array for each variable (e.g. Gender) to test\ncontaining an array of objects that are values. Each value is a\ncrosstabs condition and the desired percentage ratio (must add up\nto 100%).\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "precondition": {
                          "type": "string"
                        },
                        "variables": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "condition": {
                                  "type": "string"
                                },
                                "ratio": {
                                  "type": "array",
                                  "minItems": 2,
                                  "maxItems": 2
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "chunks"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "True if we managed to hit convergence within the required\nnumber of iterations.\n"
                      },
                      "rms": {
                        "type": "float",
                        "description": "Root mean square of the last iteration, which is compared to\nthe desired convergence.\n"
                      },
                      "debug": {
                        "type": "string",
                        "description": "Textual debug information about what happened in each\niteration.\n"
                      },
                      "efficiency": {
                        "type": "float",
                        "description": "Efficiency factor of generated weights."
                      },
                      "wprop": {
                        "type": "object",
                        "description": "achieved weights per break in each variable."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/summary/share_link": {
      "post": {
        "operationId": "postSurveySummaryShareLink",
        "summary": "Create share link",
        "description": "Enable or disable a response summary share link. Either generate the token url or\ninvalidate the token so the link no longer works.\n",
        "tags": [
          "Share Link"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "True to enable, False to disable share link.",
                    "example": true,
                    "required": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "True if enabled, False if disabled",
                      "example": true,
                      "type": "boolean"
                    },
                    "url": {
                      "description": "Share link URL",
                      "example": "{domain}/login/auth-token?token={token}",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getSurveySummaryShareLink",
        "summary": "Get share link",
        "description": "Generate a link that can be shared by using the start URL and token. This link can be used\nby un-authenticated users to view the response summary. A share link must be first generated \nfrom the POST request before being able to retreive the link with this request.\n",
        "tags": [
          "Share Link"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "True if enabled, False if disabled",
                      "example": true,
                      "type": "boolean"
                    },
                    "url": {
                      "description": "Share link URL",
                      "example": "{domain}/login/auth-token?token={token}",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bulk/bounced": {
      "post": {
        "operationId": "createBulkBounced",
        "summary": "Check for known bounce-backs",
        "description": "Send a list of emails to check for known bounce-backs. Staff access required.\n",
        "tags": [
          "Bounced Emails"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emails": {
                    "description": "list of email addresses to check.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email address"
                    }
                  }
                },
                "required": [
                  "emails"
                ],
                "example": {
                  "emails": [
                    "gooduser@example.com",
                    "baduser@example.com"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bounced": {
                      "type": "array",
                      "description": "list of details about each bounce",
                      "items": {
                        "type": "object",
                        "properties": {
                          "reason": {
                            "type": "string",
                            "description": "the reason for the bounce"
                          },
                          "code": {
                            "type": "string",
                            "description": "the error code"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "the email address that bounced"
                          },
                          "tstamp": {
                            "type": "string",
                            "format": "ISO 8601 timestamp with timezone",
                            "description": "time of bounce"
                          }
                        }
                      }
                    },
                    "misses": {
                      "type": "integer",
                      "description": "count of misses"
                    },
                    "hits": {
                      "type": "integer",
                      "description": "count of hits"
                    }
                  }
                },
                "example": {
                  "bounced": [
                    {
                      "reason": "Mailbox unavailable",
                      "code": 550,
                      "email": "baduser@example.com",
                      "tstamp": "2020-05-02T19:19:27Z"
                    }
                  ],
                  "misses": 1,
                  "hits": 1
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "beacon",
            "source": "beacon post bulk/bounced emails=\"gooduser@example.com,baduser@example.com\"\n"
          },
          {
            "lang": "curl",
            "source": "curl --location \\\n  --request POST '{server}/api/v1/bulk/bounced' \\\n  --header 'x-apikey: {api_key}' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n    \"emails\": [\"gooduser@example.com\", \"baduser@example.com\"]\n  }'\n"
          }
        ]
      }
    },
    "/surveys/{survey}/sample/{listId}/links": {
      "get": {
        "operationId": "getSurveySampleLinks",
        "summary": "Get participant sources",
        "description": "Retrieves a list of links for all uploaded external sample.",
        "tags": [
          "Participant Sources"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey to retrieve the links for.",
            "example": "selfserve/123/140001",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listId",
            "description": "the `list` value of the participant source.",
            "example": "299",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "links": {
                      "type": "object",
                      "description": "an object mapping participant souce identifier to link url"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "links": {
                        "respondent.1415833683.1": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent.1415833683.1&list=299",
                        "respondent.1415833683.2": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent.1415833683.2&list=299",
                        "respondent.1415833683.3": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent.1415833683.3&list=299",
                        "respondent.1415833683.4": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent.1415833683.4&list=299",
                        "respondent.1415833683.5": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent.1415833683.5&list=299",
                        "respondent1": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent1&list=299",
                        "respondent2": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent2&list=299",
                        "respondent3": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent3&list=299",
                        "respondent4": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent4&list=299",
                        "respondent5": "http://v2-gamma.decipherinc.com/survey/selfserve/84d/141100?id=respondent5&list=299"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/webconfs/{webconf_id}/tags": {
      "get": {
        "operationId": "getSurveyWebconfTags",
        "summary": "Get tags",
        "description": "Get all tags from a web config. Each tag consists of the following *required*\nproperties as well as any custom parameters defined by the config.\n",
        "tags": [
          "Web Intercepts"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webconf_id",
            "description": "webconf ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "tag ID"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "requires code to utilize the parameter"
                    },
                    "title": {
                      "type": "string",
                      "description": "title of the tag"
                    },
                    "survey_url": {
                      "type": "string",
                      "description": "survey URL"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSurveyWebconfTag",
        "summary": "Create tag",
        "description": "Add a tag to the web config. Default values are applied for any omitted\nparameters.\n",
        "tags": [
          "Web Intercepts"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webconf_id",
            "description": "webconf ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "tag": {
                    "rate": 10
                  }
                },
                "properties": {
                  "tag": {
                    "properties": {
                      "rate": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": "abc12"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/webconfs/{webconf_id}/tags/{tag_id}": {
      "put": {
        "operationId": "updateSurveyWebconfTag",
        "summary": "Update tag",
        "description": "Update a web config tag. Only parameters being updated need to be included.\n",
        "tags": [
          "Web Intercepts"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webconf_id",
            "description": "webconf ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag_id",
            "description": "tag ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "tag": {
                    "rate": 20
                  }
                },
                "properties": {
                  "tag": {
                    "properties": {
                      "rate": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSurveyWebconfTag",
        "summary": "Delete tag",
        "description": "Delete a web config tag.",
        "tags": [
          "Web Intercepts"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webconf_id",
            "description": "webconf ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag_id",
            "description": "tag ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/webconfs/{webconf_id}/cache/invalidate": {
      "post": {
        "operationId": "createSurveyWebconfCacheInvalidate",
        "summary": "Purge tag cache",
        "description": "Purge the CDN's cache of a web config.",
        "tags": [
          "Web Intercepts"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webconf_id",
            "description": "webconf ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/distribute/email": {
      "post": {
        "operationId": "createDistributeEmail",
        "summary": "Send API to Email",
        "description": "This meta-API call requires you to specify another API call as input,\nalthough you can also omit the sub-calls and send an email with subject\nand body of your choosing.\n\nYou can specify any number of API calls that generate attachments (i.e.\nnon-JSON output). Some useful calls are:\n\n* [saved crosstabs export](#reporting-exports)\n* [datamap](#data-input-and-output-datamap)\n* [data out](#data-input-and-output-data-get)\n\n**Acceptable Use Policy**: all recipients must have given opt-in to\nreceive the emails you sent. You may contact solely your business associates,\ni.e. not invite survey participants.\n",
        "tags": [
          "Email Distribution"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sources": {
                    "description": "any number of API data sources to call to get the data. Note that\nURL arguments must be passed via args only.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "api": {
                          "type": "string",
                          "description": "the path of the api to call",
                          "example": "/api/v1/surveys/your/survey/datamap"
                        },
                        "args": {
                          "type": "object",
                          "description": "arguments to pass to the api call"
                        },
                        "method": {
                          "type": "string",
                          "description": "the http method to use",
                          "default": "GET"
                        }
                      }
                    }
                  },
                  "recipients": {
                    "description": "list of email addresses to send this to",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email address"
                    }
                  },
                  "subject": {
                    "description": "the subject of the email that will be sent out",
                    "type": "string"
                  },
                  "sender": {
                    "description": "the name that will appear as sender. Defaults to the full name of\nthe account behind the API key\n",
                    "type": "string"
                  },
                  "body": {
                    "description": "message to put in the body. HTML capable.",
                    "type": "string"
                  },
                  "colors": {
                    "description": "set of colors to override the default email template.",
                    "type": "object",
                    "properties": {
                      "linkTextColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#E15603"
                      },
                      "emailBackgroundColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#2A4068"
                      },
                      "emailForegroundColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#FFFFFF"
                      },
                      "emailContentAlignment": {
                        "type": "string",
                        "example": "center"
                      },
                      "emailPageColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#FFFFFF"
                      },
                      "linkButtonColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#5B9FFFF"
                      },
                      "linkButtonTextColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#EDF8FF"
                      },
                      "defaultTextColor": {
                        "type": "string",
                        "format": "css color",
                        "example": "#333"
                      }
                    }
                  }
                },
                "required": [
                  "sources",
                  "recipients",
                  "subject"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/distribute/ftp": {
      "post": {
        "operationId": "createDistributeFtp",
        "summary": "Send API to SFTP",
        "description": "Upload data via FTP or SFTP. This meta-API call requires you to specify\nanother API call as input\n\nYou can specify any amount of API calls that generate attachments (i.e.\nnon-JSON output). Some useful calls are:\n\n* [saved crosstabs export](#reporting-exports)\n* [datamap](#data-input-and-output-datamap)\n* [data out](#data-input-and-output-data-get)\n\nIf successful, a log of the connection is returned.\n",
        "tags": [
          "SFTP Distribution"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sources": {
                    "description": "any number of API data sources to call to get the data. Note that\nURL arguments must be passed via args only.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "api": {
                          "type": "string",
                          "description": "the path of the api to call",
                          "example": "/api/v1/surveys/your/survey/datamap"
                        },
                        "args": {
                          "type": "object",
                          "description": "arguments to pass to the api call"
                        },
                        "method": {
                          "type": "string",
                          "description": "the http method to use",
                          "default": "GET"
                        },
                        "filename": {
                          "type": "string",
                          "description": "filename to use for the upload"
                        }
                      }
                    }
                  },
                  "username": {
                    "description": "user name to login with",
                    "type": "string"
                  },
                  "password": {
                    "description": "password for the user",
                    "type": "string"
                  },
                  "host": {
                    "description": "remote hostname",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "either ftp or sftp. SFTP is \"FTP\" over SSH and is the only\nrecommended transfer method.\n",
                    "default": "sftp",
                    "type": "string",
                    "enum": [
                      "ftp",
                      "sftp"
                    ]
                  },
                  "directory": {
                    "description": "switch to this directory before uploading the files.",
                    "type": "string"
                  }
                },
                "required": [
                  "sources",
                  "username",
                  "password",
                  "host"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "debug": {
                      "type": "string",
                      "description": "log of the ftp session"
                    }
                  }
                },
                "example": {
                  "debug": "[28/Jul/15 20:31:58] 220 (vsFTPd 2.3.5)\n[28/Jul/15 20:31:58] 220 (vsFTPd 2.3.5)\n[28/Jul/15 20:31:58] 230 Login successful.\n[28/Jul/15 20:31:58] 250 Directory successfully changed.\n[28/Jul/15 20:31:58] 226 Transfer complete.\n[28/Jul/15 20:31:58] /home/bgates/Private/h/dev/data/tmp/tmpCEi7Qf transferred to localhost\n"
                }
              }
            }
          }
        }
      }
    },
    "/distribute/slack": {
      "post": {
        "operationId": "createDistributeSlack",
        "summary": "Send API to Slack",
        "description": "Send a message to a [Slack](https://slack.com/) channel or user. Together\nwith hooks this can be used to notify users of certain happenings in their\nsurveys or systems. Visit https://api.slack.com/ to receive an integration\ntoken you can immediately use below. The message will be sent from the user\n`BeaconBot (username)`.\n",
        "tags": [
          "Slack Distribution"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "company": {
                    "description": "your company ID at Slack",
                    "type": "string"
                  },
                  "token": {
                    "description": "the API token Slack has given you",
                    "type": "string"
                  },
                  "text": {
                    "description": "text to post",
                    "type": "string"
                  },
                  "target": {
                    "description": "Either a `#channelname` or `@user` for a private message.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "company",
                  "token",
                  "text",
                  "target"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns": {
      "get": {
        "operationId": "getSurveyCampaigns",
        "summary": "Get campaigns",
        "description": "Returns a list of basic information about the Campaign Manager campaigns\nassociated with this survey.\n",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSurveyCampaign",
        "summary": "Create campaign",
        "description": "Creates a new campaign for the given survey.\n\nA campaign created through this endpoint allows sends to be scheduled while\nother sends are already scheduled.\n",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of campaign",
                    "type": "string"
                  },
                  "replyTo": {
                    "description": "Reply-To email address to use when sending emails, must be a\nvalid email address\n",
                    "type": "string"
                  },
                  "fromName": {
                    "description": "Sender name to use when sending emails",
                    "type": "string"
                  },
                  "fromAddress": {
                    "description": "Sender email address to use when sending emails, must be an email\naddress that the user and project has permission to send emails\nfrom\n",
                    "type": "string"
                  },
                  "link": {
                    "description": "Survey link, must be a link to the appropriate survey",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject to use when sending emails",
                    "type": "string"
                  },
                  "requireSeed": {
                    "description": "Requires the campaign to use seed sends. When `false`, the\ncampaign cannot be edited or launched via Campaign Manager.\n",
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}": {
      "get": {
        "operationId": "getSurveyCampaign",
        "summary": "Get campaign",
        "description": "Returns basic information about an individual campaign.",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "ID of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSurveyCampaign",
        "summary": "Edit campaign",
        "description": "Modifies `name`, `replyTo`, `fromName`, `fromAddress`, `link`,\n`subject`, and/or `requireSeed` of an individual campaign.\n",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "ID of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of campaign",
                    "type": "string"
                  },
                  "replyTo": {
                    "description": "Reply-To email address to use when sending emails, must be a\nvalid email address\n",
                    "type": "string"
                  },
                  "fromName": {
                    "description": "Sender name to use when sending emails",
                    "type": "string"
                  },
                  "fromAddress": {
                    "description": "Sender email address to use when sending emails, must be an email\naddress that the user and project has permission to send emails\nfrom\n",
                    "type": "string"
                  },
                  "link": {
                    "description": "Survey link, must be a link to the appropriate survey",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject to use when sending emails",
                    "type": "string"
                  },
                  "requireSeed": {
                    "description": "Requires the campaign to use seed sends. Cannot be changed once a\nsoft send is done.\n",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/invite": {
      "get": {
        "operationId": "getSurveyCampaignInvite",
        "summary": "Get Invite",
        "description": "Retrieve the content body of the email invite and of the reminder email.",
        "tags": [
          "Campaign Email Invites"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "ID of the campaign.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "email body content"
                    },
                    "reminder": {
                      "type": "string",
                      "description": "reminder email body content"
                    }
                  }
                },
                "example": {
                  "content": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>",
                  "reminder": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "editSurveyCampaignInvite",
        "summary": "Edit Invite",
        "description": "Update the content body of the email invite or of the reminder email.  Note\nthat the invite content that is used for any in-progress sends are not\neditable until the send is either cancelled or completed.\n",
        "tags": [
          "Campaign Email Invites"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "ID of the campaign.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "Content of the email to use for the email campaign.",
                    "type": "string",
                    "example": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>"
                  },
                  "reminder": {
                    "description": "Content of the reminder email to use for any reminder email sends.",
                    "type": "string",
                    "example": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "description": "Content of the email to use for the email campaign.",
                      "type": "string"
                    },
                    "reminder": {
                      "description": "Content of the reminder email to use for any reminder email sends.\n",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "content": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>",
                  "reminder": "<div style=\"margin:0 auto;\">\n<div id=\"emailBody\" style=\"min-width: 240px; max-width: 780px; display: block; margin: 0 auto; padding: 20px;\">\n<p style=\"text-align: left;\">\nDear Sir or Madam,\n<br /><br />\nWe are conducting research on your usage of our products and services.  This is your chance to make a difference in the way we do business.  Please take a moment to fill out this short survey.   Your answers will only be used in aggregate, and no personal information will be shared independent of the aggregated results.  Please be honest, as we take your answers and suggestions to heart.\n<br /><br />\nClick below to get started:\n</p>\n<p style=\"text-align: center;\">\n<a href=\"[surveyLink]\">Take our survey</a><br/>\n</p>\n<p style=\"text-align: center;\">\nResearch By Example | 1234 N Main St. | Anytown, CA 22313\n</p>\n<p style=\"text-align: center;\">\n<span style=\"font-size: 11px;\">\nIf you no longer wish to receive these emails, you may unsubscribe by clicking <a\nhref=\"[optOutLink]\">here</a>.\n</span>\n</p>\n</div>\n</div>\n&nbsp; <br/>"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/list": {
      "get": {
        "operationId": "getSurveyCampaignList",
        "summary": "Get list",
        "description": "Retrieve a list or seed list for a specific campaign.",
        "tags": [
          "Campaign Lists"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "path to survey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or retrieved using the GET method above.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seed",
            "description": "if the file being replaced should replace the seed list.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSurveyCampaignList",
        "summary": "Create/replace list",
        "description": "Create a recipient list or seed list for this campaign. If the campaign has\nan existing list, the list will be replaced.\n",
        "tags": [
          "Campaign Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or\nretrieved using the GET method above.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "description": "either an array of JSON objects, a tab-delimited string with the\ndata (UTF-8) or a base-64 encoded Excel 97 or 2007 file with data\nin the first sheet only\n",
                    "type": "string"
                  },
                  "seed": {
                    "description": "if the file being created or replaced should be a seed list.\n",
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/shared": {
      "post": {
        "operationId": "createSurveyCampaignShared",
        "summary": "Create shared list",
        "description": "Upload a recipient list which will be available for campaigns in this\nsurvey. The recipient list is created, encrypted and immediately marked\nas \"shared\". Using Campaign Manager the recipient list can be assigned\nto a campaign that doesn't already have a recipient list.\n",
        "tags": [
          "Shared Campaign Lists"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "path to survey. Requires Campaign Manager: Build permission.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "description": "either an array of JSON objects, a tab-delimited string with the\ndata (UTF-8) or a base-64 encoded Excel 97 or 2007 file with data\nin the first sheet only\n",
                    "type": "string"
                  },
                  "name": {
                    "description": "Shared recipient list description which will be visible in\nCampaign Manager\n",
                    "type": "string"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "basename": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/sends": {
      "get": {
        "operationId": "getSurveyCampaignSends",
        "summary": "Get sends",
        "description": "Retrieve a list of sends for a specific campaign.",
        "tags": [
          "Campaign Sends"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or\nretrieved using the GET method above.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSurveyCampaignSend",
        "summary": "Create a send",
        "description": "Start a send for a specific campaign.",
        "tags": [
          "Campaign Sends"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or\nretrieved using the GET method above.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "send type",
                    "type": "string",
                    "enum": [
                      "seed",
                      "soft",
                      "rest"
                    ]
                  },
                  "count": {
                    "description": "number for participants to send (defaults to soft send maximum\nif not specified).\n",
                    "type": "integer"
                  },
                  "when": {
                    "description": "scheduled time in epoch format (default delay will be used\nif not specified).\n",
                    "type": "string"
                  },
                  "reminder": {
                    "description": "indicate reminder sends. must be used with reminderFor (not\nrequired for reminder seed sends)\n",
                    "type": "boolean"
                  },
                  "reminderFor": {
                    "description": "list of valid send_id(s) of reminders to be sent\n",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "filters": {
                    "description": "filter sends by variables in survey or campaign email list\n",
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "suppressionListId": {
                    "description": "add suppression email list to the send",
                    "type": "string"
                  },
                  "fullThrottle": {
                    "description": "setting true turns off email throttling entirely",
                    "type": "boolean"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/sends/{send}": {
      "get": {
        "operationId": "getSurveyCampaignSend",
        "summary": "Get a send",
        "description": "Retrieve a send for a specific campaign.",
        "tags": [
          "Campaign Sends"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or retrieved using the GET method above.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "send",
            "description": "numeric send ID. The ID can be seen when editing the send, or retrieved using the GET method above.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/sends/{send}/cancel": {
      "post": {
        "operationId": "createSurveyCampaignSendCancel",
        "summary": "Cancel a send",
        "description": "Cancel a send for a specific campaign.",
        "tags": [
          "Campaign Sends"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID. The ID can be seen when editing the campaign or\nretrieved using the GET method above.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "send",
            "description": "numeric send ID. The ID can be seen when editing the send, or\nretrieved using the GET method above.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/{campaign}/list/{send}": {
      "get": {
        "operationId": "getSurveyCampaignListSend",
        "summary": "Get email status list",
        "description": "Retrieve the status of the emails sent out on a specific send.",
        "tags": [
          "Campaign Status Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "campaign",
            "description": "numeric campaign ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "send",
            "description": "numeric send ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/suppressions": {
      "get": {
        "operationId": "getSurveyCampaignsSupressions",
        "summary": "Get suppression lists",
        "description": "Returns a list of available suppression lists for the specific project.",
        "tags": [
          "Supression Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "date": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone"
                      },
                      "supression_id": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "count": 3,
                    "date": "2020-05-01T18:03:50Z",
                    "suppression_id": "7ZO4Xg"
                  },
                  {
                    "count": 10,
                    "date": "2020-05-05T18:04:38Z",
                    "suppression_id": "wmAevJ"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSurveyCampaignsSupression",
        "summary": "Create suppression list",
        "description": "Creates a list of emails to be suppressed when scheduling an email send.",
        "tags": [
          "Supression Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emails": {
                    "description": "array of emails to be suppressed",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email address"
                    }
                  }
                },
                "required": [
                  "emails"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invalid": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "invalid_count": {
                      "type": "integer"
                    },
                    "supression_id": {
                      "type": "string"
                    },
                    "total": {
                      "type": "integer"
                    },
                    "valid_count": {
                      "type": "integer"
                    }
                  }
                },
                "example": {
                  "invalid": [
                    "john@smith@example.com"
                  ],
                  "invalid_count": 1,
                  "suppression_id": "7ZO4Xg",
                  "total": 4,
                  "valid_count": 3
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/campaigns/suppressions/{suppression}": {
      "get": {
        "operationId": "getSurveyCampaignsSupression",
        "summary": "Get suppression list",
        "description": "Returns the emails of a suppression list.",
        "tags": [
          "Supression Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "suppression",
            "description": "suppression id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "email address"
                  }
                },
                "example": [
                  "larry@example.com",
                  "curly@example.com",
                  "moe@example.com"
                ]
              }
            }
          }
        }
      }
    },
    "/libraries/{company}/elements/{eid}": {
      "post": {
        "operationId": "createLibrariesCompanyElement",
        "summary": "Add element",
        "description": "Add a new element to the library.",
        "tags": [
          "Company Element"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eid",
            "description": "the unique element ID of the element to upload (use `_` to generate one\nrandomly)\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "the name/description of the element",
                    "type": "string"
                  },
                  "xml": {
                    "description": "the survey XML representation of the element",
                    "type": "string"
                  },
                  "xml_from_label": {
                    "description": "the label of the question in the survey to use as the xml\ninstead of specifying `xml`\n",
                    "type": "string"
                  },
                  "tags": {
                    "description": "a list of phrases to improve search/organization of the element\n",
                    "type": "string"
                  },
                  "private": {
                    "description": "use true to indicate the element should be private and visible\nto the original author only\n",
                    "type": "boolean"
                  },
                  "locked": {
                    "description": "use true to indicate this is a permanent element",
                    "type": "boolean"
                  },
                  "shared": {
                    "description": "use true to indicate this element should be available to all\nauthors on a server (staff)\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "added": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "a description of the element"
                        },
                        "eid": {
                          "type": "string",
                          "description": "the element's id (unique per server)"
                        },
                        "xml": {
                          "type": "string",
                          "description": "the element's survey XML representation"
                        },
                        "type": {
                          "type": "string",
                          "description": "the type or class of element (e.g. radio, html, set,\nsubset (for answers))\n"
                        },
                        "tags": {
                          "type": "array",
                          "description": "the element's tags (e.g. short phrases to improve search)\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "private": {
                          "type": "boolean",
                          "description": "true when the element is only accessible to the original\nauthor\n"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "true when an element has reach a final state in development\nand should no longer change\n"
                        },
                        "shared": {
                          "type": "boolean",
                          "description": "true when an element is global and available to all authors\non the server\n"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "the original author's user ID"
                        },
                        "user_ids": {
                          "type": "array",
                          "description": "the list of user IDs the element is shared with",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "group_ids": {
                          "type": "array",
                          "description": "the list of group IDs the element is shared with",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "id": {
                          "type": "integer",
                          "description": "the system ID of the element"
                        },
                        "uuid": {
                          "type": "integer",
                          "description": "the database record ID of the element"
                        },
                        "element_uuids": {
                          "type": "array",
                          "description": "a list of database record IDs of child elements",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "survey_attrs": {
                          "type": "object",
                          "description": "survey attributes"
                        },
                        "report": {
                          "type": "string",
                          "format": "json",
                          "description": "reports json"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getLibrariesCompanyElement",
        "summary": "Get element",
        "description": "Retrieves a list containing a single library element.",
        "tags": [
          "Company Element"
        ],
        "parameters": [
          {
            "description": "company ID or name",
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the unique element ID of the element to download",
            "in": "path",
            "name": "eid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "a description of the element"
                      },
                      "eid": {
                        "type": "string",
                        "description": "the element's id (unique per server)"
                      },
                      "xml": {
                        "type": "string",
                        "description": "the element's survey XML representation"
                      },
                      "type": {
                        "type": "string",
                        "description": "the type or class of element (e.g. radio, html, set,\nsubset (for answers))\n"
                      },
                      "tags": {
                        "type": "array",
                        "description": "the element's tags (e.g. short phrases to improve search)\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "private": {
                        "type": "boolean",
                        "description": "true when the element is only accessible to the original\nauthor\n"
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "true when an element has reach a final state in development\nand should no longer change\n"
                      },
                      "shared": {
                        "type": "boolean",
                        "description": "true when an element is global and available to all authors\non the server\n"
                      },
                      "user_id": {
                        "type": "integer",
                        "description": "the original author's user ID"
                      },
                      "user_ids": {
                        "type": "array",
                        "description": "the list of user IDs the element is shared with",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "group_ids": {
                        "type": "array",
                        "description": "the list of group IDs the element is shared with",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "id": {
                        "type": "integer",
                        "description": "the system ID of the element"
                      },
                      "uuid": {
                        "type": "integer",
                        "description": "the database record ID of the element"
                      },
                      "element_uuids": {
                        "type": "array",
                        "description": "a list of database record IDs of child elements",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "survey_attrs": {
                        "type": "object",
                        "description": "survey attributes"
                      },
                      "report": {
                        "type": "string",
                        "format": "json",
                        "description": "reports json"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateLibrariesCompanyElement",
        "summary": "Update element",
        "description": "Update an element in the library.",
        "tags": [
          "Company Element"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eid",
            "description": "the unique element ID of the element to edit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "the name/description of the element",
                    "type": "string"
                  },
                  "tags": {
                    "description": "a list of phrases to improve search/organization of the element\n",
                    "type": "string"
                  },
                  "private": {
                    "description": "use true to indicate the element should be private and visible\nto the original author only\n",
                    "type": "boolean"
                  },
                  "locked": {
                    "description": "use true to indicate this is a permanent element",
                    "type": "boolean"
                  },
                  "shared": {
                    "description": "use true to indicate this element should be available to all\nauthors on a server (staff)\n",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLibrariesCompanyElement",
        "summary": "Delete element",
        "description": "Remove an element from the library.",
        "tags": [
          "Company Element"
        ],
        "parameters": [
          {
            "description": "company ID or name",
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the unique element ID of the element to remove",
            "in": "path",
            "name": "eid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/libraries/{company}/elements": {
      "post": {
        "operationId": "createLibrariesCompanyElements",
        "summary": "Add elements",
        "description": "Add new elements to the library.",
        "tags": [
          "Company Elements"
        ],
        "parameters": [
          {
            "description": "company ID or name",
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "elements": {
                    "description": "list of element objects to upload",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "a description of the element"
                        },
                        "eid": {
                          "type": "string",
                          "description": "the element's id (unique per server)"
                        },
                        "xml": {
                          "type": "string",
                          "description": "the element's survey XML representation"
                        },
                        "tags": {
                          "type": "array",
                          "description": "the element's tags (e.g. short phrases to improve search)\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "private": {
                          "type": "boolean",
                          "description": "true when the element is only accessible to the original\nauthor\n"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "true when an element has reach a final state in development\nand should no longer change\n"
                        },
                        "shared": {
                          "type": "boolean",
                          "description": "true when an element is global and available to all authors\non the server\n"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "elements"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "added": {
                      "type": "integer",
                      "description": "number of elements added"
                    }
                  }
                },
                "example": {
                  "added": 1
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getLibrariesCompanyElements",
        "summary": "Get elements",
        "description": "Retrieves a list of all available survey elements.",
        "tags": [
          "Company Elements"
        ],
        "parameters": [
          {
            "description": "company ID or name",
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "a description of the element"
                      },
                      "eid": {
                        "type": "string",
                        "description": "the element's id (unique per server)"
                      },
                      "xml": {
                        "type": "string",
                        "description": "the element's survey XML representation"
                      },
                      "type": {
                        "type": "string",
                        "description": "the type or class of element (e.g. radio, html, set,\nsubset (for answers))\n"
                      },
                      "tags": {
                        "type": "array",
                        "description": "the element's tags (e.g. short phrases to improve search)\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "private": {
                        "type": "boolean",
                        "description": "true when the element is only accessible to the original\nauthor\n"
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "true when an element has reach a final state in development\nand should no longer change\n"
                      },
                      "shared": {
                        "type": "boolean",
                        "description": "true when an element is global and available to all authors\non the server\n"
                      },
                      "user_id": {
                        "type": "integer",
                        "description": "the original author's user ID"
                      },
                      "user_ids": {
                        "type": "array",
                        "description": "the list of user IDs the element is shared with",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "group_ids": {
                        "type": "array",
                        "description": "the list of group IDs the element is shared with",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "id": {
                        "type": "integer",
                        "description": "the system ID of the element"
                      },
                      "uuid": {
                        "type": "integer",
                        "description": "the database record ID of the element"
                      },
                      "element_uuids": {
                        "type": "array",
                        "description": "a list of database record IDs of child elements",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "survey_attrs": {
                        "type": "object",
                        "description": "survey attributes"
                      },
                      "report": {
                        "type": "string",
                        "format": "json",
                        "description": "reports json"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/libraries/{company}/surveys/{survey}/elements": {
      "get": {
        "operationId": "getLibrariesCompanySurveyElements",
        "summary": "Get survey elements",
        "description": "Retrieve the survey elements from a specified survey.",
        "tags": [
          "Survey Elements"
        ],
        "parameters": [
          {
            "description": "company ID or name",
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "survey to retrieve the links for.",
            "example": "selfserve/123/140001",
            "in": "path",
            "name": "survey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "the element type"
                      },
                      "xml": {
                        "type": "string",
                        "format": "xml",
                        "description": "the element xml"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "the element type"
                            },
                            "xml": {
                              "type": "string",
                              "format": "xml",
                              "description": "the element xml"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "children": [
                      {
                        "type": "html",
                        "xml": "<html label=\"q1\">Hello</html>"
                      },
                      {
                        "type": "suspend",
                        "xml": "<suspend />"
                      }
                    ],
                    "type": "block",
                    "xml": "<block label=\"b1\">\n    <html id=\"ObIIe\" label=\"q1\">Hello</html>\n    <suspend id=\"Z396J\"/>\n  </block>\n"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/libraries/{company}/surveys/{survey}/report/{eid}": {
      "post": {
        "operationId": "createLibrariesCompanySurveyReport",
        "summary": "Save library report settings for a library element",
        "description": "Save library report settings based on the company, project and library\nelement id.\n",
        "tags": [
          "Survey Element Report Settings"
        ],
        "parameters": [
          {
            "name": "company",
            "description": "company ID or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "survey",
            "description": "",
            "example": "selfserve/123/140001",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eid",
            "description": "element id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "questionLabel": {
                    "description": "",
                    "type": "string"
                  }
                },
                "required": [
                  "questionLabel"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/application/data": {
      "get": {
        "operationId": "getSurveyMLSApplicationData",
        "summary": "Get Language Manager application data",
        "description": "Returns data for the Language Manager application\n",
        "tags": [
          "LM Application Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "DUPES": {
                      "type": "integer",
                      "description": "number of translations with duplicates"
                    },
                    "PRIMARY_LANGUAGE": {
                      "type": "string",
                      "description": "current primary language of the survey"
                    },
                    "RESOURCES": {
                      "type": "array",
                      "description": "information about each resource's current status",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dupeCount": {
                            "type": "integer"
                          },
                          "resource": {
                            "type": "string"
                          },
                          "resourceName": {
                            "type": "string"
                          },
                          "status": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "identical": {
                                  "type": "boolean",
                                  "description": "is this translation the same as the original\n"
                                },
                                "isDisplayedInThisLanguage": {
                                  "type": "boolean"
                                },
                                "isPrimary": {
                                  "type": "boolean"
                                },
                                "language": {
                                  "type": "string"
                                },
                                "missing": {
                                  "type": "boolean",
                                  "description": "is this translation missing"
                                },
                                "outdated": {
                                  "type": "boolean",
                                  "description": "has this resource changed, therefore making this\ntranslation outdated\n"
                                },
                                "text": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "SUMMARY": {
                      "type": "object",
                      "description": "summary of each language present in the survey; keys are\nlanguage identifiers\n",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "identical": {
                            "type": "integer"
                          },
                          "missing": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "nameFormatted": {
                            "type": "string"
                          },
                          "ok": {
                            "type": "integer"
                          },
                          "outdated": {
                            "type": "integer"
                          },
                          "primary": {
                            "type": "boolean"
                          },
                          "qualifieds": {
                            "type": "integer"
                          },
                          "total": {
                            "type": "integer"
                          },
                          "version": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "SURVEY_LANGUAGE_LIST": {
                      "type": "array",
                      "description": "languages present in the survey",
                      "items": {
                        "type": "string"
                      }
                    },
                    "SYS_LANGUAGES": {
                      "type": "object",
                      "description": "system languages available for use, mapping language identifier\nto language name\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "UNIQUE_DUPES": {
                      "type": "integer",
                      "description": "number of unique duplicates"
                    },
                    "UNUSED_LANGUAGE_LIST": {
                      "type": "array",
                      "description": "languages marked as unused in this survey",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "DUPES": 2,
                  "PRIMARY_LANGUAGE": "english_ca",
                  "RESOURCES": [
                    {
                      "dupeCount": null,
                      "resource": "general,name",
                      "resourceName": "general,name",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Survey"
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "samplesources,0,invalid",
                      "resourceName": "samplesources,0,invalid",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "You are missing information in the URL. Please verify the URL with the original invite."
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "samplesources,0,completed",
                      "resourceName": "samplesources,0,completed",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "It seems you have already entered this survey."
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "samplesources,0,inuse",
                      "resourceName": "samplesources,0,inuse",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Our records show that you are already taking this survey. If that's not correct, please wait 15 minutes and refresh this page. Thank you."
                        }
                      ]
                    },
                    {
                      "dupeCount": 2,
                      "resource": "samplesources,0,exit:terminated,cdata",
                      "resourceName": "samplesources,0,exit:terminated,cdata",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Thank you for taking our survey."
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "samplesources,0,exit:qualified,cdata",
                      "resourceName": "samplesources,0,exit:qualified,cdata",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Thank you for taking our survey. Your efforts are greatly appreciated!"
                        }
                      ]
                    },
                    {
                      "dupeCount": 2,
                      "resource": "samplesources,0,exit:overquota,cdata",
                      "resourceName": "samplesources,0,exit:overquota,cdata",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Thank you for taking our survey."
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "q1,title",
                      "resourceName": "q1,title",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "New Single Select Question"
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "q1,comment",
                      "resourceName": "q1,comment",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Select one"
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "q1,r1,cdata",
                      "resourceName": "q1,r1,cdata",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Sample Row #1"
                        }
                      ]
                    },
                    {
                      "dupeCount": null,
                      "resource": "q1,r2,cdata",
                      "resourceName": "q1,r2,cdata",
                      "status": [
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": false,
                          "language": "english",
                          "missing": true,
                          "outdated": false,
                          "text": ""
                        },
                        {
                          "identical": false,
                          "isDisplayedInThisLanguage": true,
                          "isPrimary": true,
                          "language": "english_ca",
                          "missing": false,
                          "outdated": false,
                          "text": "Sample Row #2"
                        }
                      ]
                    }
                  ],
                  "SUMMARY": {
                    "english": {
                      "identical": 0,
                      "missing": 11,
                      "name": "english",
                      "nameFormatted": "English",
                      "ok": 0,
                      "outdated": 0,
                      "primary": false,
                      "qualifieds": 0,
                      "total": 11,
                      "version": 0
                    },
                    "english_ca": {
                      "identical": 0,
                      "missing": 0,
                      "name": "english_ca",
                      "nameFormatted": "English (Canada)",
                      "ok": 11,
                      "outdated": 0,
                      "primary": true,
                      "qualifieds": 0,
                      "total": 11,
                      "version": 0
                    }
                  },
                  "SURVEY_LANGUAGE_LIST": [
                    "english_ca",
                    "english"
                  ],
                  "SYS_LANGUAGES": {
                    "afrikaans": "Afrikaans",
                    "albanian": "Albanian",
                    "arabic": "Arabic",
                    "arabic_egypt": "Arabic (Egypt)",
                    "arabic_lebanon": "Arabic (Lebanon)",
                    "arabic_morocco": "Arabic (Morocco)",
                    "arabic_qatar": "Arabic (Qatar)",
                    "arabic_saudiarabia": "Arabic (Saudi Arabia)",
                    "arabic_uae": "Arabic (UAE)",
                    "aus": "English (Australia)",
                    "bulgarian": "Bulgarian",
                    "burmese": "Burmese (Myanmar)",
                    "canadian": "French (Canada)",
                    "chinese": "Chinese",
                    "croatian": "Croatian",
                    "czech": "Czech",
                    "danish": "Danish",
                    "dutch": "Dutch",
                    "dutch_belgium": "Dutch (Belgium)",
                    "english": "English",
                    "english_ca": "English (Canada)",
                    "english_china": "English (China)",
                    "english_g1": "English (Generic 1)",
                    "english_g2": "English (Generic 2)",
                    "english_g3": "English (Generic 3)",
                    "english_g4": "English (Generic 4)",
                    "english_hk": "English (Hong Kong)",
                    "english_id": "English (Indonesia)",
                    "english_india": "English (India)",
                    "english_ireland": "English (Ireland)",
                    "english_my": "English (Malaysia)",
                    "english_nigeria": "English (Nigeria)",
                    "english_sg": "English (Singapore)",
                    "english_tw": "English (Taiwan)",
                    "english_za": "English (South Africa)",
                    "estonian": "Estonian",
                    "finnish": "Finnish",
                    "french": "French",
                    "french_belgium": "French (Belgium)",
                    "french_lu": "French (Luxemborg)",
                    "german": "German",
                    "german_austria": "German (Austria)",
                    "german_lu": "German (Luxemborg)",
                    "greek": "Greek",
                    "hebrew": "Hebrew",
                    "hindi": "Hindi",
                    "hungarian": "Hungarian",
                    "icelandic": "Icelandic",
                    "indonesian": "Indonesian",
                    "italian": "Italian",
                    "japanese": "Japanese",
                    "kannada": "Kannada",
                    "khmer": "Khmer",
                    "korean": "Korean",
                    "latvian": "Latvian",
                    "lithuanian": "Lithunian",
                    "macedonian": "Macedonian",
                    "malay": "Malay",
                    "malay_sg": "Malay (Singapore)",
                    "mongolian": "Mongolian",
                    "norwegian": "Norwegian",
                    "persian": "Persian",
                    "polish": "Polish",
                    "portuguese": "Portuguese",
                    "portuguese_br": "Portuguese (Brazil)",
                    "punjabi": "Punjabi",
                    "romanian": "Romanian",
                    "russian": "Russian",
                    "samoan": "Samoan",
                    "serbian": "Serbian",
                    "simplifiedchinese": "Chinese Simplified",
                    "simplifiedchinese_my": "Simplified Chinese (Malaysia)",
                    "simplifiedchinese_sg": "Simplified Chinese (Singapore)",
                    "slovak": "Slovak",
                    "slovene": "Slovene",
                    "slovenian": "Slovenian",
                    "spanish": "Spanish",
                    "spanish_argentina": "Spanish (Argentina)",
                    "spanish_brazil": "Spanish (Brazil)",
                    "spanish_chile": "Spanish (Chile)",
                    "spanish_colombia": "Spanish (Colombia)",
                    "spanish_ecuador": "Spanish (Ecuador)",
                    "spanish_eu": "Spanish (EU)",
                    "spanish_latin": "Spanish (Latin America)",
                    "spanish_mexico": "Spanish (Mexico)",
                    "spanish_peru": "Spanish (Peru)",
                    "spanish_south": "Spanish (South America)",
                    "spanish_venezuela": "Spanish (Venezuela)",
                    "swahili": "Swahili",
                    "swedish": "Swedish",
                    "tagalog": "Tagalog",
                    "tamil": "Tamil",
                    "telugu": "Telugu",
                    "thai": "Thai",
                    "tongan": "Tongan",
                    "traditionalchinese": "Chinese Traditional",
                    "traditionalchinese_tw": "Traditional Chinese (Taiwan)",
                    "turkish": "Turkish",
                    "uk": "English (UK)",
                    "ukrainian": "Ukrainian",
                    "vietnamese": "Vietnamese"
                  },
                  "UNIQUE_DUPES": 1,
                  "UNUSED_LANGUAGE_LIST": []
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/application/translations": {
      "put": {
        "operationId": "updateSurveyMLSApplicationTranslations",
        "summary": "Update app translations",
        "description": "Updates translations for Language Manager application.",
        "tags": [
          "LM Application Translations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resourceTranslations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        },
                        "resources": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "resourceTranslations"
                ],
                "example": {
                  "resourceTranslations": [
                    {
                      "language": "french",
                      "text": "Translated title text",
                      "resources": [
                        "q2,title"
                      ]
                    },
                    {
                      "language": "french",
                      "text": "Translated row 1 text",
                      "resources": [
                        "q2,r1,cdata"
                      ]
                    },
                    {
                      "language": "french",
                      "text": "Translated row 2 text",
                      "resources": [
                        "q2,r2,cdata"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resourceTranslations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "language": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "resources": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/translation/{resource}": {
      "put": {
        "operationId": "updateSurveyMLSTranslationResource",
        "summary": "Update translation",
        "description": "Updates a single translation resource",
        "tags": [
          "Translation Resources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "resource",
            "description": "resource to be translated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lang": {
                    "description": "target language for the translation",
                    "type": "string"
                  },
                  "text": {
                    "description": "translated resource",
                    "type": "string"
                  }
                },
                "required": [
                  "lang",
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/translation": {
      "post": {
        "operationId": "createTranslation",
        "summary": "Post translations",
        "description": "Add in translations for a specified survey and language.  When translations\nare added any reservation for that survey and language combination are\nremoved. NOTE: if sourceString no longer matches the text in XML, the\ntranslation will be accepted but the ID will appear in the \"oudated\" output\narray.\n",
        "tags": [
          "Translations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetLanguages": {
                    "description": "An array containing a string of the language to be translated\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "requests": {
                    "description": "A list of objects containing a document id and a list of elements.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "documentId": {
                          "type": "string",
                          "format": "survey path"
                        },
                        "elements": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "elementId": {
                                "type": "string"
                              },
                              "sourceString": {
                                "type": "string"
                              },
                              "targetString": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "postbackJobId": {
                    "description": "The jobId for the reservation that was created for this document.\n",
                    "type": "string"
                  },
                  "aggregateDupes": {
                    "description": "Defaults to false. Set to true if dupes were aggregated\nwhen pulling translations.\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "targetLanguages",
                  "requests",
                  "postbackJobId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "changed": {
                      "type": "integer"
                    },
                    "identical": {
                      "type": "integer"
                    },
                    "invalid_label": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "outdated": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "changed": 10,
                  "identical": 0,
                  "invalid_label": [],
                  "outdated": []
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getTranslation",
        "summary": "Get translations",
        "description": "Translations are returned for the first survey found or the one\nspecified by `start`. A `lastRetrievedId` argument is returned with the\nresult that can be specified as the start to get translations for the\nnext survey.\n",
        "tags": [
          "Translations"
        ],
        "parameters": [
          {
            "name": "start",
            "description": "If specified, translations for the survey provided will be returned\notherwise it will be the first survey found\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paths",
            "description": "An array of paths to include. If not provided all surveys with\ntapiDue set are considered\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "aggregateDupes",
            "description": "Defaults to false. Set to true if duplicate translations should\nonly appear once.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expectedDueDate": {
                      "type": "integer",
                      "format": "unix timestamp"
                    },
                    "lastRetreivedId": {
                      "type": "string",
                      "format": "survey path"
                    },
                    "postbackJobId": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "documentId": {
                            "type": "string",
                            "format": "survey path"
                          },
                          "elements": {
                            "elementId": {
                              "type": "string"
                            },
                            "sourceString": {
                              "type": "string"
                            },
                            "targetString": {
                              "type": "string"
                            }
                          },
                          "icuFormat": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "schemaId": {
                      "type": "string"
                    },
                    "sourceLanguage": {
                      "type": "string"
                    },
                    "targetLanguages": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "expectedDueDate": 1355270400,
                  "lastRetrievedId": "selfserve/53a/171202",
                  "postbackJobId": null,
                  "projectId": null,
                  "requests": [
                    {
                      "documentId": "selfserve/53a/171201",
                      "elements": [
                        {
                          "elementId": "samplesources,1,invalid",
                          "sourceString": "The URL above does not include the proper information to be included in this survey. Please review your invite email for the proper URL, and contact the individual specified if problems persist.",
                          "targetString": "The URL above does not include the proper information to be included in this survey. Please review your invite email for the proper URL, and contact the individual specified if problems persist."
                        },
                        {
                          "elementId": "samplesources,1,completed",
                          "sourceString": "Thank you for your interest but it seems you have already finished this survey.",
                          "targetString": "Thank you for your interest but it seems you have already finished this survey."
                        },
                        {
                          "elementId": "samplesources,1,inuse",
                          "sourceString": "Our records show that you are already taking this survey. If that's not correct, please wait 15 minutes and refresh this page. Thank you.",
                          "targetString": "Our records show that you are already taking this survey. If that's not correct, please wait 15 minutes and refresh this page. Thank you."
                        }
                      ],
                      "icuFormat": false
                    }
                  ],
                  "schemaId": "v1",
                  "sourceLanguage": "en-US",
                  "targetLanguages": []
                }
              }
            }
          }
        }
      }
    },
    "/translation/delta": {
      "get": {
        "operationId": "getTranslationDelta",
        "summary": "Get translation delta",
        "description": "Return any untranslated (or outdated) unreserved resources translations\nfor a survey\n",
        "tags": [
          "Translation Deltas"
        ],
        "parameters": [
          {
            "name": "start",
            "description": "If specified, translations for the survey provided will be returned otherwise it will be the first survey found",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paths",
            "description": "An array of paths to include. If not provided all surveys with tapiDue set are considered",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "aggregateDupes",
            "description": "Defaults to false. Set to true if duplicate translations should only appear once.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schemaId": {
                      "type": "string"
                    },
                    "expectedDueDate": {
                      "type": "string"
                    },
                    "sourceLanguage": {
                      "type": "string"
                    },
                    "targetLanguages": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "postbackJobId": {
                      "type": "string"
                    },
                    "requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "documentId": {
                            "type": "string"
                          },
                          "icuFormat": {
                            "type": "boolean"
                          },
                          "elements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "elementId": {
                                  "type": "string"
                                },
                                "sourceString": {
                                  "type": "string"
                                },
                                "targetString": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/translation/delta/reservation": {
      "get": {
        "operationId": "getTranslationDeltaReservations",
        "summary": "Get translation reservations",
        "description": "Returns active reservations",
        "tags": [
          "Translation Reservations"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ackDatas": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "jobId": {
                            "type": "string"
                          },
                          "targetLanguages": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "requests": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "documentId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ackDatas": [
                    {
                      "requests": [
                        {
                          "documentId": "selfserve/53a/171200"
                        },
                        {
                          "documentId": "selfserve/53a/171201"
                        }
                      ],
                      "targetLanguages": [
                        "es",
                        "ja"
                      ],
                      "jobId": "01e80a5cb03e4aa19521513c57e91f08"
                    },
                    {
                      "requests": [
                        {
                          "documentId": "selfserve/53a/171202"
                        }
                      ],
                      "targetLanguages": [
                        "ar-LB"
                      ],
                      "jobId": "1195619ab8854e3ca81b593183edd398"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTranslationDeltaReservation",
        "summary": "Add translation reservation",
        "description": "Add a new reservation",
        "tags": [
          "Translation Reservations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ackDatas": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "targetLanguages": {
                          "type": "array",
                          "description": "an array of languages to be reserved",
                          "items": {
                            "type": "string"
                          }
                        },
                        "requests": {
                          "type": "array",
                          "description": "an array of objects with documentId which should be the\npath to the survey\n",
                          "items": {
                            "type": "object",
                            "properties": {
                              "documentId": {
                                "type": "string",
                                "format": "survey path"
                              }
                            }
                          }
                        },
                        "jobId": {
                          "type": "string",
                          "description": "a unique jobId to identify the reservation"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "ackDatas"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "targetLanguages": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "documentId": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "jobId": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "targetLanguages": [
                      "es"
                    ],
                    "requests": [
                      {
                        "documentId": "selfserve/53a/170201"
                      }
                    ],
                    "jobId": "e724ce5c5b8b4eb08e50dda26ee89aac"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/translation/delta/reservation/delete": {
      "post": {
        "operationId": "createTranslationDeltaReservationsDelete",
        "summary": "Delete translation reservation",
        "description": "Delete reservations by their jobIds",
        "tags": [
          "Translation Reservations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "description": "A reason for the reservation cancellation",
                    "type": "string"
                  },
                  "cancelledBy": {
                    "description": "Who is canceling this reservation",
                    "type": "string"
                  },
                  "jobIds": {
                    "description": "An array of jobIds to cancel",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "reason",
                  "cancelledBy",
                  "jobIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/languages/primary/{lang}": {
      "put": {
        "operationId": "updateSurveyMLSLanguagesPrimary",
        "summary": "Update primary language",
        "description": "Changes the surveys primary language.",
        "tags": [
          "Primary Survey Language"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "lang",
            "description": "language to set as the primary language of the project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/languages/{lang}": {
      "put": {
        "operationId": "updateSurveyMLSLanguage",
        "summary": "Put",
        "description": "Adds a language to the survey (otherLanguages)",
        "tags": [
          "Other Survey Languages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "lang",
            "description": "language to add to the survey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSurveyMLSLanguage",
        "summary": "Delete",
        "description": "Removes a language from the survey (otherLanguages)",
        "tags": [
          "Other Survey Languages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "lang",
            "description": "language to remove from the survey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/mls/languages/unused/{lang}": {
      "put": {
        "operationId": "updateSurveyMLSLanguagesUnused",
        "summary": "Put",
        "description": "Marks a language as unused (unusedLanguages)",
        "tags": [
          "Unused Survey Languages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "lang",
            "description": "language to set as unused",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSurveyMLSLanguagesUnused",
        "summary": "Delete",
        "description": "Restores a language previously marked as 'unused' (unusedLanguages)",
        "tags": [
          "Unused Survey Languages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "lang",
            "description": "language to remove from unused languages",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/parameters/list/{survey}": {
      "get": {
        "operationId": "getParametersListSurvey",
        "summary": "Get available project parameters",
        "description": "Returns an object of available project parameters. Requires survey edit\nor data edit permission for the project.\n",
        "tags": [
          "Available Project Parameters"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/parameters/{survey}": {
      "get": {
        "operationId": "getParametersSurvey",
        "summary": "Get saved project parameters",
        "description": "Returns an object of saved project parameters. Requires survey edit or data\nedit permission for the project.\n",
        "tags": [
          "Saved Project Parameters"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/parameters/validate/{survey}": {
      "get": {
        "operationId": "getParametersValidateSurvey",
        "summary": "Validate saved project parameters",
        "description": "Validates saved project parameters and returns an array of errors.\nRequires survey edit or data edit permission for the project.\n",
        "tags": [
          "Saved Project Parameters"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/parameters/update/{survey}": {
      "put": {
        "operationId": "updateParametersUpdateSurvey",
        "summary": "Update saved project parameters",
        "description": "Sends an object of selected project parameters. Requires survey edit or data\nedit permission for the project.\n",
        "tags": [
          "Saved Project Parameters"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "description": "project parameters",
                    "type": "object"
                  }
                },
                "required": [
                  "parameters"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/parameters/config": {
      "post": {
        "operationId": "createParametersConfig",
        "summary": "Set project parameters configuration",
        "description": "Set project parameters configuration to a company/subdirectory folder.\nRequires supervisor access.\n",
        "tags": [
          "Project Parameters Configuration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "company": {
                    "description": "company name",
                    "type": "string"
                  },
                  "subdirectory": {
                    "description": "subdirectory name",
                    "type": "string"
                  },
                  "parameters": {
                    "description": "project parameters configuration",
                    "type": "string"
                  }
                },
                "required": [
                  "company",
                  "parameters"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/parameters/disable": {
      "put": {
        "operationId": "updateParametersConfig",
        "summary": "Disable project parameters configuration",
        "description": "Disable project parameters configuration. Requires supervisor access.",
        "tags": [
          "Project Parameters Configuration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "company": {
                    "description": "company name",
                    "type": "string"
                  },
                  "subdirectory": {
                    "description": "subdirectory name",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "disable project parameters",
                    "type": "boolean"
                  }
                },
                "required": [
                  "company",
                  "disabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections": {
      "get": {
        "operationId": "getSurveySections",
        "summary": "Get survey sections",
        "description": "Returns a list of survey sections available for multi-user editing.\n",
        "tags": [
          "Available Sections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "builder_path": {
                        "description": "Path to the section's temporary directory used by the Survey Editor.",
                        "example": "53a/210203/temp-subsection-b1",
                        "type": "string"
                      },
                      "checked_out": {
                        "description": "Date and time when survey was last updated.",
                        "format": "ISO 8601 timestamp with timezone",
                        "example": "2021-06-11T21:01:36Z",
                        "type": "string"
                      },
                      "editor": {
                        "description": "Name or email address of the user who performed a check out or edited the section.",
                        "example": "Jane Doe",
                        "type": "string"
                      },
                      "is_available": {
                        "description": "True if a section is available for check out.",
                        "example": false,
                        "type": "boolean"
                      },
                      "label": {
                        "description": "Label for the section (i.e. block element).",
                        "example": "b1",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to the section's temporary directory.",
                        "example": "selfserve/53a/210203/temp-subsection-b1",
                        "type": "string"
                      },
                      "title": {
                        "description": "Section's (i.e. block element) title.",
                        "example": "My Block",
                        "type": "string"
                      },
                      "updates": {
                        "description": "True if there have been any updates to the main survey while this section is checked out.",
                        "example": false,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/checkin": {
      "post": {
        "operationId": "createSurveySectionCheckin",
        "summary": "Check in survey section",
        "description": "Merge checked out section of survey into main survey.\n",
        "tags": [
          "Check In Section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Label for the section (i.e. block) to check in.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checked_in": {
                      "description": "Date and time when survey was last updated, after checking in.",
                      "format": "ISO 8601 timestamp with timezone",
                      "example": "2021-06-22T21:47:47Z",
                      "type": "string"
                    },
                    "checked_out": {
                      "description": "Date and time when survey was last updated.\nAlways `null` for this endpoint.\n",
                      "example": null,
                      "type": "string"
                    },
                    "checked_out_sections": {
                      "description": "List of sections that are checked out.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "builder_path": {
                            "type": "string"
                          },
                          "checked_out": {
                            "type": "string"
                          },
                          "editor": {
                            "type": "string"
                          },
                          "is_available": {
                            "type": "boolean"
                          },
                          "label": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "updates": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "builder_path": "53a/210203/temp-subsection-b2",
                          "checked_out": "2021-06-22T21:22:35.000Z",
                          "editor'": "Jane Doe",
                          "is_available": false,
                          "label": "b2",
                          "path": "selfserve/53a/210203/temp-subsection-b2",
                          "title": "Block two",
                          "updates": true
                        }
                      ]
                    },
                    "disableSections": {
                      "description": "Number of checked out sections for the survey.",
                      "example": 3,
                      "type": "integer"
                    },
                    "editor": {
                      "description": "`null` if the operation was successful.\nName or email address of the editor user if there were errors while syncing with the main survey.\n",
                      "example": null,
                      "type": "string"
                    },
                    "errors": {
                      "description": "List of errors found if the operation was not successful.",
                      "example": [],
                      "type": "array"
                    },
                    "is_available": {
                      "description": "True if the section is available for check out again.",
                      "example": true,
                      "type": "boolean"
                    },
                    "success": {
                      "description": "True if the operation completed without errors.",
                      "example": true,
                      "type": "boolean"
                    },
                    "title": {
                      "description": "Section's (i.e. block element) title.",
                      "example": "Block One",
                      "type": "string"
                    },
                    "updates": {
                      "description": "True if there have been any updates to the main survey. Can be false or null.\nAlways `null` for this endpoint.\n",
                      "example": null,
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/checkout": {
      "post": {
        "operationId": "createSurveySectionCheckout",
        "summary": "Check out survey section",
        "description": "Make temp copy of survey (xml only) to edit the section labeled with `section` argument.\n",
        "tags": [
          "Check Out Section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Label for the section (i.e. block) to check out.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checked_out": {
                      "description": "Date and time when survey was last updated.",
                      "format": "ISO 8601 timestamp with timezone",
                      "example": "2021-06-22T20:42:05Z",
                      "type": "string"
                    },
                    "editor": {
                      "description": "Name or email address of the user who checked out the section.",
                      "example": "Jane Doe",
                      "type": "string"
                    },
                    "is_available": {
                      "description": "True if the section is available for check out.",
                      "example": false,
                      "type": "boolean"
                    },
                    "updates": {
                      "description": "True if there have been any updates to the main survey. Can be false or null.",
                      "example": false,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/editor": {
      "get": {
        "operationId": "getSurveySectionEditor",
        "summary": "Get section's editor",
        "description": "Get section editor's name or email address if no name is registered.\n",
        "tags": [
          "Section Editor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Label for the section.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "description": "Editor's name or email address.",
                      "example": "Jane Doe",
                      "type": "string"
                    },
                    "last_activity": {
                      "description": "Date and time of editor's latest action (check in or check out).",
                      "format": "ISO 8601 timestamp with timezone",
                      "example": "2021-06-22T21:48:59Z",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/revert": {
      "post": {
        "operationId": "createSurveySectionRevert",
        "summary": "Abandon section changes",
        "description": "Abandon changes to a block.\n",
        "tags": [
          "Abandon Section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Section with changes you'd like to abandon.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checked_in": {
                      "description": "Date and time when survey was last updated.\nAlways `null` for this endpoint.\n",
                      "example": null,
                      "type": "string"
                    },
                    "checked_out": {
                      "description": "Date and time when survey was last updated.\nAlways `null` for this endpoint.\n",
                      "example": null,
                      "type": "string"
                    },
                    "disableSections": {
                      "description": "Number of checked out sections for the survey.",
                      "example": 3,
                      "type": "integer"
                    },
                    "editor": {
                      "description": "Editor's name or email address. Always `null` for this endpoint.",
                      "example": null,
                      "type": "string"
                    },
                    "is_available": {
                      "description": "True if the section is available for check out. Always true for this endpoint.",
                      "example": true,
                      "type": "boolean"
                    },
                    "reverted": {
                      "description": "Date and time when survey was last updated.",
                      "format": "ISO 8601 timestamp with timezone",
                      "example": "2021-06-23T06:00:15Z",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/sync": {
      "post": {
        "operationId": "createSurveySectionSync",
        "summary": "Sync section to main survey",
        "description": "Merge main survey into checked out copy.\n",
        "tags": [
          "Sync Section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Section you'd like to merge your main survey into.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checked_out": {
                      "description": "Date and time when survey was last updated.",
                      "format": "ISO 8601 timestamp with timezone",
                      "example": "2021-06-23T06:13:22Z",
                      "type": "string"
                    },
                    "errors": {
                      "description": "List of errors if the operation wasn't successful.",
                      "example": [],
                      "type": "array"
                    },
                    "success": {
                      "description": "True if the operation was successful.\nFalse if there were errors while trying to merge.\n",
                      "example": true,
                      "type": "boolean"
                    },
                    "updates": {
                      "description": "True if there were changes to the main survey.\nAlways false for this endpoint.\n",
                      "example": false,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/sections/{section}/validate": {
      "get": {
        "operationId": "getSurveySectionValidate",
        "summary": "Validate survey section",
        "description": "Run validations for specified survey section.\n",
        "tags": [
          "Validate Section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "section",
            "in": "path",
            "description": "Label of the section you'd like to validate.",
            "example": "b1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "description": "List of errors if validation fails.",
                      "example": [],
                      "type": "array"
                    },
                    "isValid": {
                      "description": "True if validation is successful.",
                      "example": true,
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path for section's temporary directory.",
                      "example": "selfserve/53a/210203/temp-subsection-b1",
                      "type": "string"
                    },
                    "success": {
                      "description": "True if the operation completed successfully.",
                      "example": true,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/videos": {
      "get": {
        "operationId": "getSurveyVideos",
        "summary": "Get videos",
        "description": "Get the list of all video files.",
        "tags": [
          "Videos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      },
                      "keep": {
                        "type": "boolean"
                      },
                      "privacy": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "video_id": {
                        "type": "string"
                      },
                      "watermarked": {
                        "type": "boolean"
                      },
                      "watermarked_quanity": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "description": "Video Description",
                    "filename": "filename.mp4",
                    "keep": true,
                    "privacy": "company",
                    "status": "processing",
                    "video_id": "93472979349",
                    "watermarked": false,
                    "watermarked_quantity": 0
                  },
                  {
                    "description": "Video Description",
                    "filename": "filename.mp4",
                    "keep": false,
                    "privacy": "project",
                    "status": "processing",
                    "video_id": "43597293",
                    "watermarked": true,
                    "watermarked_quantity": 50
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSurveyVideo",
        "summary": "Upload video file",
        "description": "",
        "tags": [
          "Videos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "description": "This is the URL (must include filename and extension) to upload.\n",
                    "type": "string"
                  },
                  "description": {
                    "description": "The video description that will be displayed in file manager.\nDefaults to the filename if not supplied.\n",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "Where the videos will be displayed in file manager.\n\n+ `project`: shows only to the project it was uploaded to.\n+ `company`: shows to all projects in the user's company.\n",
                    "default": "project",
                    "type": "string",
                    "enum": [
                      "project",
                      "company"
                    ]
                  },
                  "unique_watermarks": {
                    "description": "should the video be processed with burned-in watermarking?\n",
                    "default": false,
                    "type": "boolean"
                  },
                  "quantity": {
                    "description": "If `unique_watermarks` is true, this sets the number of unique\nvideos that will be created. Must be between 1 and 10,000.\n",
                    "type": "integer"
                  },
                  "unique_watermark_options": {
                    "description": "Customizations to the watermark.",
                    "type": "object",
                    "properties": {
                      "position": {
                        "description": "Position of the watermark on the video.",
                        "default": "middle center",
                        "type": "string",
                        "enum": [
                          "top left",
                          "top center",
                          "top right",
                          "middle left",
                          "middle center",
                          "middle right",
                          "bottom right",
                          "bottom center",
                          "bottom left"
                        ]
                      },
                      "color": {
                        "description": "Color of the watermarked text\n\nAcceptable Formats:\n\n+ HEX `#FFFFFF`\n+ RGB/A `rgb(0, 0, 0) rgba(255, 255, 255, 128)`\n+ HSL `hsl(0, 100%, 50%)`\n+ Common HTML colors `red`, `yellow`, `green`, etc.\n",
                        "default": "rgba(255, 255, 255, 64)",
                        "type": "string"
                      },
                      "size": {
                        "description": "Size of the watermark as a percentage of the video width\nin increments of 10.\n",
                        "default": "70%",
                        "type": "string",
                        "enum": [
                          "10%",
                          "20%",
                          "30%",
                          "40%",
                          "50%",
                          "60%",
                          "70%",
                          "80%",
                          "90%",
                          "100%"
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "source"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "video_id": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "video_id": "93472979349"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/videos/{video_id}": {
      "get": {
        "operationId": "getSurveyVideo",
        "summary": "Get video",
        "description": "Get an individual video.",
        "tags": [
          "Videos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "video_id",
            "description": "ID of the video to retrieve.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "keep": {
                      "type": "boolean"
                    },
                    "privacy": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "integer"
                    },
                    "ready": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "string"
                    },
                    "video_id": {
                      "type": "string"
                    },
                    "watermarked": {
                      "type": "boolean"
                    }
                  }
                },
                "example": {
                  "description": "Video Description",
                  "filename": "filename.mp4",
                  "keep": false,
                  "privacy": "company",
                  "quantity": 100,
                  "ready": 75,
                  "status": "processing",
                  "video_id": "93472979349",
                  "watermarked": true
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSurveyVideo",
        "summary": "Increase unique watermarked videos",
        "description": "Increases the number of unique videos",
        "tags": [
          "Watermarked Videos"
        ],
        "parameters": [
          "../../../../../components/parameters/survey.yaml",
          {
            "name": "video_id",
            "description": "The ID of the video to update.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "description": "The new total number of unique videos. Difference between old and\nnew quantities cannot exceed 10,000 (i.e., only 10,000 more can\nbe requested at a time.)\n",
                    "type": "string"
                  },
                  "keep": {
                    "description": "If true then the video will be flagged so as it is not deleted\nby the cleanup scripts.\n",
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "Set this to change the privacy level of the video.\n",
                    "type": "string",
                    "enum": [
                      "unused",
                      "survey",
                      "company"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/videos/{video_id}/create_db_file": {
      "post": {
        "operationId": "createSurveyVideoCreateDBFile",
        "summary": "Create watermark file",
        "description": "Create a file containing a single column of `{video_id}.{watermark_id}`,\nwhich the Video Player DQ uses to uniquely assign videos to participants.\n",
        "tags": [
          "Watermarked Videos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "description": "ID of the watermarked video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "database_file": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "database_file": "watermark_videos_12323543345.txt"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/videos/{video_id}/watermark_videos": {
      "get": {
        "operationId": "getSurveyVideosWatermarkVideos",
        "summary": "List watermarked videos",
        "description": "Get the list of watermarks and video IDs.",
        "tags": [
          "Watermarked Videos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "video_id",
            "description": "ID of the watermarked video to retrieve.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "video_id": {
                        "type": "string"
                      },
                      "watermark_id": {
                        "type": "string"
                      }
                    }
                  },
                  "example": [
                    {
                      "video_id": "93472979349",
                      "watermark_id": "87fg8gd8"
                    },
                    {
                      "video_id": "93472979349",
                      "watermark_id": "87fg8gd8"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sysinfo": {
      "get": {
        "operationId": "getSysinfo",
        "summary": "Get system information",
        "description": "Retrieve interesting data about the current version of Beacon software as\nwell as the hardware. Requires Staff.\n",
        "tags": [
          "System Information"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "changeset": {
                      "type": "string",
                      "description": "internal version control ID describing the exact software\nversion\n"
                    },
                    "clientContact": {
                      "type": "string",
                      "description": "who at the client is responsible for the server"
                    },
                    "client": {
                      "type": "string",
                      "description": "Name of the client (i.e. company we run this Beacon instance\nfor)\n"
                    },
                    "cloudfront": {
                      "type": "string",
                      "description": "URL of the Amazon Cloudfront host used if any"
                    },
                    "coordinates": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "latitude and longitude for the server's location"
                    },
                    "cpuCount": {
                      "type": "integer",
                      "description": "number of virtual CPUs"
                    },
                    "cpu": {
                      "type": "string",
                      "description": "CPU used in the server"
                    },
                    "datacenter": {
                      "type": "string",
                      "description": "the codename for ISP's datacenter"
                    },
                    "decipherContact": {
                      "type": "string",
                      "description": "who at Decipher is responsible for the server (typically\naccount manager)\n"
                    },
                    "development": {
                      "type": "boolean",
                      "description": "is this a development instance?"
                    },
                    "disk": {
                      "type": "object",
                      "description": "disk space available on disks used by Beacon.",
                      "extraProperties": {
                        "bytes": {
                          "type": "integer"
                        },
                        "freeInodes": {
                          "type": "integer"
                        },
                        "freeBytes": {
                          "type": "integer"
                        }
                      }
                    },
                    "evalErrors": {
                      "type": "string",
                      "description": "email address for delivering survey-level errors"
                    },
                    "geoip": {
                      "type": "boolean",
                      "description": "Does this server have a geoIP license?"
                    },
                    "hostname": {
                      "type": "string",
                      "description": "internal host name"
                    },
                    "instance": {
                      "type": "string",
                      "description": "typically always \"v2\""
                    },
                    "isp": {
                      "type": "string",
                      "description": "Name of the ISP used to host the server (e.g. \"Rackspace\")\n"
                    },
                    "MAX_COMPAT": {
                      "type": "integer",
                      "description": "maximum compat level for surveys"
                    },
                    "memoryFree": {
                      "type": "integer",
                      "description": "Free memory (unused memory plus buffers and cache)"
                    },
                    "memoryTotal": {
                      "type": "integer",
                      "description": "Total amount of installed memory (in kiloBytes)"
                    },
                    "oauth2": {
                      "type": "boolean",
                      "description": "Is Oauth2 authentication enabled?"
                    },
                    "protos": {
                      "type": "boolean",
                      "description": "is the PRO-T-S system enabled?"
                    },
                    "release": {
                      "type": "integer",
                      "description": "release number (e.g. Beacon 25 is returned as 25)"
                    },
                    "saml": {
                      "type": "boolean",
                      "description": "Is SAML2 authentication enabled?"
                    },
                    "secure": {
                      "type": "string",
                      "description": "base secure URL (normally the https version of url)"
                    },
                    "systemErrors": {
                      "type": "string",
                      "description": "email address for delivering system-level errors"
                    },
                    "uglify": {
                      "type": "boolean",
                      "description": "post-process Javascript files using jsuglify to optimize them\n"
                    },
                    "url": {
                      "type": "string",
                      "description": "base URL prefixed to any pages such as /survey"
                    }
                  }
                },
                "example": {
                  "changeset": "20cff65b27677f4268752038f3e638315221845b",
                  "secure": "https://yourserver.example.com",
                  "evalErrors": "hermes-eval-errors@decipherinc.com",
                  "decipherContact": "helpdesk@decipherinc.com",
                  "MAX_COMPAT": 146,
                  "instances": "main",
                  "protos": true,
                  "disk": {
                    "/home/hermes/v2": {
                      "bytes": 127990572777472,
                      "freeInodes": 4882132894,
                      "freeBytes": 110302574149632
                    }
                  },
                  "uglify": true,
                  "saml": false,
                  "hostname": "yourserver.example.com",
                  "coordinates": [
                    41.9932891,
                    -87.9577367
                  ],
                  "instance": "v2",
                  "systemErrors": "hermes-system-errors@decipherinc.com",
                  "development": false,
                  "cloudfront": "yourserver.surveyfiles.com",
                  "hostmap": "survey.nocompany.com survey.example.com",
                  "cpuCount": 8,
                  "datacenter": "ORD",
                  "oauth2": true,
                  "url": "http://yourserver.example.com",
                  "geoip": true,
                  "memoryTotal": 6092576,
                  "isp": "Rackspace",
                  "client": "Your Company",
                  "memoryFree": 5509596,
                  "release": 46,
                  "cpu": "Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz",
                  "clientContact": "helpdesk@example.com"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSysinfo",
        "summary": "Update system information",
        "description": "This can be used to modify the configurable settings such as client name,\nclient contact etc.\n",
        "tags": [
          "System Information"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "values": {
                    "description": "object containing the new values. Values not referenced are left\nunchanged.\n",
                    "type": "object"
                  }
                },
                "required": [
                  "values"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/logic/{label}/trigger": {
      "post": {
        "operationId": "createSurveyLogicTrigger",
        "summary": "Trigger logic node",
        "description": "Run the code associated with this logic node.",
        "tags": [
          "Logic Nodes"
        ],
        "parameters": [
          {
            "name": "survey",
            "description": "survey to trigger in. You must be able to edit the survey to trigger the action",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "description": "label of the logic to trigger",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reschedule": {
                    "description": "after triggering, reschedule a periodic logic to its next\nexecution time. Internal use only.\n",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/logic/{label}/debug": {
      "get": {
        "operationId": "getSurveyLogicDebug",
        "summary": "Debug logic node",
        "description": "Retrieve a list of debug messages for a given logic node.",
        "tags": [
          "Logic Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "label",
            "description": "Label of the logic node",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      },
                      "tstamp": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone"
                      },
                      "content": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "operationId": "getSchedule",
        "summary": "Get logic events",
        "description": "Retrieve an array of events scheduled for any survey that you are able to\naccess. Those events can only be created by logic nodes.\n",
        "tags": [
          "Logic Events"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "retries": {
                        "type": "integer",
                        "description": "number of times execution of this event has been retried due\nto some API error\n"
                      },
                      "completed": {
                        "type": "boolean",
                        "description": "true if that item has been completed, false if it was\nscheduled\n"
                      },
                      "tstamp": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "the timestamp of next attempted execution of the event\n"
                      },
                      "element_type": {
                        "type": "string",
                        "description": "the logic node type responsible"
                      },
                      "element": {
                        "type": "string",
                        "description": "the label of the element responsible"
                      },
                      "originally_scheduled": {
                        "type": "string",
                        "format": "ISO 8601 timestamp with timezone",
                        "description": "the time the event was originally scheduled for. This remains\nfixed, while `tstamp` can update as the event is retried\n"
                      },
                      "scheduling": {
                        "type": "string",
                        "description": "English description of how this event is being scheduled\n"
                      },
                      "path": {
                        "type": "string",
                        "description": "path to the survey"
                      },
                      "id": {
                        "type": "string",
                        "description": "internal event ID"
                      },
                      "element_title": {
                        "type": "string",
                        "description": "English description of the action provided by the element\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cati/server/{command}": {
      "put": {
        "operationId": "updateCatiServer",
        "summary": "Manage CATI server",
        "description": "Used to start, stop, or restart the CATI server.",
        "tags": [
          "CATI"
        ],
        "parameters": [
          {
            "name": "command",
            "description": "The command to issue",
            "in": "path",
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop",
                "restart"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/hello": {
      "get": {
        "operationId": "getHello",
        "summary": "Hello there!",
        "description": "This test call echos its `name` argument.",
        "tags": [
          "Miscellaneous"
        ],
        "parameters": [
          {
            "name": "name",
            "description": "this value will be echoed back",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "string"
                    },
                    "hello": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "ok": "1",
                  "hello": "Roy Fielding"
                }
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "operationId": "getMeta",
        "summary": "Get API metadata",
        "description": "Retrieve an array of all currently implemented API calls.",
        "tags": [
          "Miscellaneous"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "description": "name of the API call, excluding version but including the\nplaceholder for primary key of the source.\n"
                      },
                      "description": {
                        "type": "string",
                        "description": "description"
                      },
                      "title": {
                        "type": "string",
                        "description": "API title"
                      },
                      "url": {
                        "type": "string",
                        "description": "URL including current version prefix"
                      },
                      "args": {
                        "type": "object",
                        "description": "object containing arguments this API call will take, together\nwith type names\n"
                      },
                      "method": {
                        "type": "string",
                        "description": "method to use. Note: multiple entries will exist with same\nendpoint but different methods\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/surveys/{survey}/test/token": {
      "get": {
        "operationId": "getSurveyTestToken",
        "summary": "Get survey test URL token",
        "description": "Generates a temporary token to access surveys for testing purposes. Data\nwon't be collected\n",
        "tags": [
          "Miscellaneous"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/survey"
          },
          {
            "name": "expires",
            "description": "days to expire token",
            "in": "query",
            "required": false,
            "schema": {
              "default": 7,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "token": "TOKEN",
                  "url": "https://release.decipherinc.com/survey/selfserve/53a/1234?v2test=TOKEN"
                }
              }
            }
          }
        }
      }
    },
    "/exceptions/search": {
      "get": {
        "operationId": "getExceptionsSearch",
        "summary": "Find error",
        "description": "Search for a logged error by lookup code.",
        "tags": [
          "Miscellaneous"
        ],
        "parameters": [
          {
            "name": "lookup_code",
            "description": "lookup code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "format": "ISO 8601 timestamp with timezone",
                      "description": "time that the error occurred"
                    },
                    "path": {
                      "type": "string",
                      "description": "survey path (if applicable)"
                    },
                    "full_text": {
                      "type": "string",
                      "description": "full error text and traceback (if applicable)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "operationId": "getStatus",
        "summary": "Get task",
        "description": "Retrieve the status of an async task started by another api call",
        "tags": [
          "Miscellaneous"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "id of the async task to get the status of",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "properties": {
                        "cpuTime": {
                          "type": "float"
                        },
                        "dataCleared": {
                          "type": "boolean"
                        },
                        "languages": {
                          "type": "array"
                        },
                        "markerCount": {
                          "type": "integer"
                        },
                        "maxStoredSize": {
                          "type": "integer"
                        },
                        "progressCount": {
                          "type": "integer"
                        }
                      }
                    },
                    "ident": {
                      "type": "string"
                    },
                    "percentage": {
                      "type": "integer"
                    },
                    "pid": {
                      "type": "integer"
                    },
                    "progress": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "survey": {
                      "type": "string"
                    },
                    "task": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    },
                    "what": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "extra": {
                    "cpuTime": 0.022321394999999997,
                    "dataCleared": false,
                    "languages": null,
                    "markerCount": 1,
                    "maxStoredSize": 0,
                    "progressCount": 200
                  },
                  "ident": "3jd7qyadpgjbxu6t",
                  "percentage": 100,
                  "pid": 3957,
                  "progress": 100,
                  "result": "100/100 succeeded",
                  "status": "finished",
                  "survey": "selfserve/53a/180109",
                  "task": "Survey Stress Test",
                  "timestamp": 1516830993,
                  "total": 100,
                  "type": "sst",
                  "what": "Finished"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "APIKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-apikey",
        "description": "In order to access the api, you'll need to generate an API key. Refer to the\ninstructions [here](/docs/decipher/api#section/API-Keys) to generate and\nconfigure an API key with the appropriate permission sets. You can generate\nas many keys as required.\n\nConfigure each request to include your API key in the request header. For example:\n\n```\nx-apikey: dp48ss3mgsaucyjtybxw728h7s4cgnwzhejtszdwhf4xpe8yhmtdwpk2ntdhtwbs\n```\n"
      }
    },
    "parameters": {
      "survey": {
        "name": "survey",
        "in": "path",
        "required": true,
        "description": "The survey path.",
        "example": "selfserve/1a/123456",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "feed": {
        "name": "feed",
        "in": "path",
        "required": true,
        "description": "Any unique ID that will identify the feed. Feeds are namespaced\nper user, so your `all` feed is unique to you.\n",
        "schema": {
          "type": "string"
        }
      },
      "split": {
        "name": "split",
        "in": "query",
        "description": "If supplied, create segments for this split.",
        "schema": {
          "type": "string",
          "example": "list"
        }
      },
      "datasource": {
        "name": "datasource",
        "in": "path",
        "required": true,
        "description": "Datasource label, must be composed of a-zA-Z_ characters only",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "$code": {
            "description": "The error code.",
            "type": "integer"
          },
          "$error": {
            "description": "The error message.",
            "type": "string"
          },
          "extra": {
            "description": "Additional error information.",
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SurveyData": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The survey completion status.",
            "example": 1,
            "type": "integer"
          },
          "uuid": {
            "description": "The survey `uuid`.",
            "example": "jwy3kwppp4yuqg86",
            "type": "string",
            "format": "uuid"
          },
          "vmobiledevice": {
            "description": "The respondent's mobile device code.",
            "example": 5,
            "type": "integer"
          },
          "url": {
            "description": "The survey builder url.",
            "example": "http://release.decipherinc.com/survey/selfserve/1a/123456",
            "type": "string"
          },
          "vbrowser": {
            "description": "The respondent's browser code.",
            "type": "integer",
            "example": 11
          },
          "qtime": {
            "description": "The elapsed time (seconds) from survey start to complete.",
            "example": 56.235,
            "type": "number",
            "format": "float"
          },
          "list": {
            "example": 0,
            "type": "integer"
          },
          "dcua": {
            "example": "..",
            "type": "string"
          },
          "markers": {
            "example": "qualified,/totalQuota/Total",
            "type": "string"
          },
          "record": {
            "example": 1,
            "type": "integer"
          },
          "session": {
            "description": "Unique user session ID.",
            "example": "cwsps4gewqc0p175",
            "type": "string",
            "format": "uuid"
          },
          "vos": {
            "description": "The respondent's operating system (os).",
            "example": 13,
            "type": "integer"
          },
          "date": {
            "example": "09/02/2020 14:52",
            "type": "string"
          },
          "vlist": {
            "example": 1,
            "type": "integer"
          },
          "Q1r1": {
            "description": "An example question response",
            "example": "8",
            "type": "string"
          },
          "Q2a": {
            "description": "An example question response",
            "example": "I thought it was great.",
            "type": "string"
          },
          "Q2b": {
            "description": "An example question response",
            "example": "I thought it was not so great.",
            "type": "string"
          }
        }
      },
      "SurveyDatamap": {
        "type": "object",
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyVariables"
            }
          },
          "questions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "variables": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyVariables"
                  }
                },
                "grouping": {
                  "type": "string",
                  "example": "rows"
                },
                "type": {
                  "type": "string",
                  "example": "number"
                },
                "qtitle": {
                  "type": "string",
                  "example": "How likely are you to recommend our company, product or service to a friend or colleague?"
                },
                "qlabel": {
                  "type": "string",
                  "example": "Q1"
                }
              }
            }
          }
        }
      },
      "SurveyVariables": {
        "type": "object",
        "properties": {
          "vgroup": {
            "type": "string"
          },
          "qtitle": {
            "type": "string"
          },
          "colTitle": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "rowTitle": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "row": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "col": {
            "type": "string"
          },
          "qlabel": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SurveyLayout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The resource ID."
          },
          "createdBy": {
            "type": "string",
            "format": "email",
            "description": "Created by user email."
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "description": "Layout creation timestamp."
          },
          "description": {
            "type": "string",
            "description": "The layout description."
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "description": "Last updated timestamp."
          },
          "updatedBy": {
            "type": "string",
            "format": "email",
            "description": "Last updated by user email."
          },
          "variables": {
            "description": "List of survey variables\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "altlabel": {
                  "type": "string",
                  "description": "Alternative label for variable."
                },
                "fwidth": {
                  "type": "integer",
                  "description": "The number of characters variable occupies (for fixed-width layouts)."
                },
                "label": {
                  "type": "string",
                  "description": "Unique variable label."
                },
                "minStart": {
                  "type": "integer",
                  "description": "The offset the variable should start at."
                },
                "new": {
                  "type": "boolean",
                  "description": "True if variable did NOT exist on previous datamap."
                },
                "qlabel": {
                  "type": "string",
                  "description": "The parent question label."
                },
                "qtype": {
                  "type": "string",
                  "description": "Question type of parent question.",
                  "example": "radio"
                },
                "shown": {
                  "type": "boolean",
                  "description": "True if variable is shown in current layout."
                },
                "src": {
                  "type": "string",
                  "description": "The variable's source.\n\nValue | Description\n----- | -----------\n`g` | Virtual\n`s` | Survey\n`y` | System\n",
                  "example": "g",
                  "enum": [
                    "g",
                    "s",
                    "y"
                  ]
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 400,
              "$message": "The request is invalid."
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The request is unauthorized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 401,
              "$message": "The request is unauthorized."
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "Monthly API call limit has been exceeded.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 402,
              "$message": "Monthly API call limit has been exceeded."
            }
          }
        }
      },
      "Forbidden": {
        "description": "API key is valid but access to requested resource is forbidden.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 403,
              "$message": "API key is valid but access to requested resource is forbidden."
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource is not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 404,
              "$message": "The requested resource is not found."
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "The request method is not supported.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 405,
              "$message": "The request method is not supported."
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "The user has sent too many requests.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 429,
              "$message": "The user has sent too many requests."
            }
          }
        }
      },
      "Unexpected": {
        "description": "An unexpected server error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "$code": 500,
              "$message": "An unexpected server error."
            }
          }
        }
      }
    }
  }
}