{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "INES API",
    "description": "\r\n##  Introduction \r\n\r\nINESCRM offers you to use its API REST catalogue to interact with your CRM. This feature allows you to create, edit and consult companies, contacts, opportunities, sales, purchases, budgets, invoices, tickets, articles.",
    "contact": {
      "name": "INES CRM",
      "url": "https://inescrm.fr",
      "email": "contact@inescrm.com"
    },
    "x-logo": {
      "url": "https://www.inescrm.fr/images/logo-inescrm.png.pagespeed.ce.SjpZjZDgC3.png",
      "altText": "Logo"
    }
  },
  "paths": {
    "/Activity": {
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Update",
        "description": "Update an activity",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddActivityInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of activity is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Add",
        "description": "Add a new activity",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddActivityInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of activity is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Activity/CreationInfo": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "CreationInfo",
        "description": "",
        "operationId": "CreationInfo",
        "parameters": [
          {
            "name": "visiteType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "clientRef",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Admin/Tva": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "TVA",
        "description": "Return a list of tva in the base account",
        "operationId": "Tva",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of tva is empty"
          }
        }
      }
    },
    "/Admin/Terms": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Terms",
        "description": "Return a list of terms in the base account",
        "operationId": "Terms",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of terms is empty"
          }
        }
      }
    },
    "/Admin/Banks": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Banks",
        "description": "Return a list of banks in the base account",
        "operationId": "Banks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of banks is empty"
          }
        }
      }
    },
    "/Admin/Incoterm": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Incoterm",
        "description": "Return a list of incoterm in the base account",
        "operationId": "Incoterm",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of incoterm is empty"
          }
        }
      }
    },
    "/Admin/Origin": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Origin",
        "description": "Return a list of origins in the base account",
        "operationId": "Origin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of origins is empty"
          }
        }
      }
    },
    "/Admin/Folders": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Folders",
        "description": "Return a list of folders in the base account",
        "operationId": "Folders",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of folders is empty"
          }
        }
      }
    },
    "/Admin/Shipment": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Shipment",
        "description": "Return a list of shipment in the base account",
        "operationId": "Shipment",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of shipment is empty"
          }
        }
      }
    },
    "/Admin/Currency": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Currency",
        "description": "Return a list of currency in the base account",
        "operationId": "Currency",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when list of currency is empty"
          }
        }
      }
    },
    "/Admin/RespCommercial/{module}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "operationId": "RespCommercial",
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Contact",
                "Agenda",
                "Visite",
                "Journal",
                "Affaire",
                "Dossier",
                "Diffusion",
                "CommunicationTemplate",
                "Contract",
                "Marketing",
                "Sales",
                "Purchases",
                "Files",
                "Mail",
                "ToDo",
                "Calls"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Article": {
      "get": {
        "tags": [
          "Article"
        ],
        "operationId": "All",
        "parameters": [
          {
            "name": "family",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticlesInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticlesInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticlesInfo"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Article"
        ],
        "summary": "update",
        "description": "Update a article",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/ArticlesInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of article is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Article"
        ],
        "summary": "add",
        "description": "Add a new article",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/ArticlesInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of article is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Article/{id}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get",
        "description": "Return all information of a article",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = article id (art_nb)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ArticlesInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticlesInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticlesInfo"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when article not exists"
          }
        }
      }
    },
    "/Article/{art_nb}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a article",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "art_nb",
            "in": "path",
            "description": "id of a article",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the the perso field is empty"
          }
        }
      }
    },
    "/Article/CreationInfo": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "CreationInfo",
        "description": "",
        "operationId": "CreationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/AutomationContact/List": {
      "get": {
        "tags": [
          "AutomationContact"
        ],
        "summary": "List",
        "description": "Get the list of the contacts sync with Automation that matches certain parameters",
        "operationId": "List",
        "parameters": [
          {
            "name": "idList",
            "in": "query",
            "description": "List of ines id separated by commas",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acSyncList",
            "in": "query",
            "description": "List of acSync separated by commas             (0 : Synchronized, 1 : To synchronize, 2 : To unsynchronize, 3 : To modify, 4 : To delete)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "automationRefList",
            "in": "query",
            "description": "List of automation ref separated by commas",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutomationContact"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutomationContact"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutomationContact"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/AutomationContact": {
      "put": {
        "tags": [
          "AutomationContact"
        ],
        "summary": "Update",
        "description": "Update the syncronization between an Ines contact and an Automation contact (using the parameter \"id\" as key field)",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/AutomationContact"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AutomationContact"
        ],
        "summary": "Add",
        "description": "Add a syncronization between an Ines contact and an Automation contact",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/AutomationContact"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AutomationContact"
        ],
        "summary": "Delete",
        "description": "Delete the syncronization between an Ines contact and an Automation contact. If both parametres are filled, automationRef will be ignored.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Ines contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "automationRef",
            "in": "query",
            "description": "Automation contact ref",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/Campaign/GetActiveList": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "GetActiveList",
        "description": "Get The list of active campaigns of this user",
        "operationId": "GetActiveList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSearchResult"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to campaigns"
          }
        }
      }
    },
    "/Campaign/GetContactsFromCampaign": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "GetContactsFromCampaign",
        "description": "Get all the contacts of a specific campaign",
        "operationId": "GetContactsFromCampaign",
        "parameters": [
          {
            "name": "cpRef",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfoCampaign"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfoCampaign"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfoCampaign"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access contact"
          },
          "405": {
            "description": "Throw exception when the contact is empty"
          }
        }
      }
    },
    "/Client/{id}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get",
        "description": "Returns a client with id = id",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the client",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfo2"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access client"
          },
          "405": {
            "description": "Throw exception when client is empty"
          }
        }
      }
    },
    "/Client/{id}/contacts": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "contacts",
        "description": "return list contact from company where cl_ref = id",
        "operationId": "contacts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo2"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of contacts is empty"
          }
        }
      }
    },
    "/Client/{id}/notes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "notes",
        "description": "Return a list of notes of a company",
        "operationId": "notes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of notes is empty"
          }
        }
      }
    },
    "/Client/{id}/appointments": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "appointments",
        "description": "Return a list of appointmenta of a company",
        "operationId": "appointments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of appointments is empty"
          }
        }
      }
    },
    "/Client/{id}/calls": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "calls",
        "description": "Return a list of calls of a company",
        "operationId": "calls",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of calls is empty"
          }
        }
      }
    },
    "/Client/{id}/task": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "task",
        "description": "Return a list of task of a company",
        "operationId": "task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of tasks is empty"
          }
        }
      }
    },
    "/Client/{id}/activities": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "activities",
        "description": "Return a list of activities of a company",
        "operationId": "activities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -2147483648
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of all activities is empty"
          }
        }
      }
    },
    "/Client/{id}/files": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "files",
        "description": "Return a list of files of a company",
        "operationId": "files",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo2"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of files is empty"
          }
        }
      }
    },
    "/Client/{id}/business": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "bussiness",
        "description": "Return a list of bussines of a compnay",
        "operationId": "business",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status = status of a opportunity",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessInfo2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessInfo2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessInfo2"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to opportunities of the client"
          },
          "405": {
            "description": "Throw exception when the list of opportunities is empty"
          }
        }
      }
    },
    "/Client/{id}/tickets": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "tickets",
        "description": "Return a list of tickets of a company",
        "operationId": "tickets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status = status of a ticket",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketInfo2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketInfo2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketInfo2"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to tickets of the client"
          },
          "405": {
            "description": "Throw exception when the list of tickets is empty"
          }
        }
      }
    },
    "/Client/{id}/sales": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "sales",
        "description": "Return a list of sales of a company",
        "operationId": "sales",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaleInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaleInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaleInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to sales of the client"
          },
          "405": {
            "description": "Throw exception when the list of sales is empty"
          }
        }
      }
    },
    "/Client/{id}/Quotes": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Quotes",
        "description": "Return a list of quotes of a company",
        "operationId": "Quotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to quotes of the client"
          },
          "405": {
            "description": "Throw exception when the list of quotes is empty"
          }
        }
      }
    },
    "/Client/{id}/invoices": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "invoices",
        "description": "Return a list of invoices of a company",
        "operationId": "invoices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to invoices of the client"
          },
          "405": {
            "description": "Throw exception when the list of invoices is empty"
          }
        }
      }
    },
    "/Client/{id}/purchases": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "purcharses",
        "description": "Return a list of purcharses of a company",
        "operationId": "purchases",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to purchases of the client"
          },
          "405": {
            "description": "Throw exception when the list of purchases is empty"
          }
        }
      }
    },
    "/Client/{id}/Leads": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Leads",
        "description": "Return a list of leads of a company",
        "operationId": "Leads",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id = cl_ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status = status of a lead",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeadInfo2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeadInfo2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeadInfo2"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access to leads of the client"
          },
          "405": {
            "description": "Throw exception when the list of leads is empty"
          }
        }
      }
    },
    "/Client/{cl_ref}/Parc/{parc_type_ref}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Parcs",
        "description": "Return a list of parcs of a company and a parc type",
        "operationId": "Parc",
        "parameters": [
          {
            "name": "cl_ref",
            "in": "path",
            "description": "cl_ref = Ref of a client",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parc_type_ref",
            "in": "path",
            "description": "parc_type_ref = Ref of a ParcType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user has not permission for access to parcs of the client"
          },
          "405": {
            "description": "Throw exception when parc type is invalid"
          }
        }
      }
    },
    "/Client/{cl_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a company",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "cl_ref",
            "in": "path",
            "description": "id of a company",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Client/ParcLines/{cl_ref}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "ParcLines",
        "description": "Get parc lines of a client",
        "operationId": "ParcLines",
        "parameters": [
          {
            "name": "cl_ref",
            "in": "path",
            "description": "cl_ref is a client reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access parc"
          },
          "405": {
            "description": "Throw exception when the client has no parcs"
          }
        }
      }
    },
    "/Client/CreationInfo": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "CreationInfo",
        "description": "",
        "operationId": "CreationInfo",
        "parameters": [
          {
            "name": "moralType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "clientType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Client/Search": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Search",
        "description": "Search clients that match certain parametres",
        "operationId": "Search",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Client name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "taxPayerId",
            "in": "query",
            "description": "Siren",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "accountingCode",
            "in": "query",
            "description": "Accounting code",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "customerNo",
            "in": "query",
            "description": "Customer number",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "tvaIntracomNumber",
            "in": "query",
            "description": "TVA intracom number",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/Client": {
      "put": {
        "tags": [
          "Client"
        ],
        "summary": "update",
        "description": "Update a client",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/ClientInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of client is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "add",
        "description": "Add a new client",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/ClientInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of client is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get",
        "description": "Get all information of a contact",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo2"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access contact"
          },
          "405": {
            "description": "Throw exception when the contact is empty"
          }
        }
      }
    },
    "/Contact/Search": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Search",
        "description": "Search contacts that match certain parametres",
        "operationId": "Search",
        "parameters": [
          {
            "name": "MobilePhone",
            "in": "query",
            "description": "Mobile Phone",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "PrimaryMailAddress",
            "in": "query",
            "description": "Email",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "BusinessTelephone",
            "in": "query",
            "description": "Business Phone",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "HomeTelephone",
            "in": "query",
            "description": "Home Phone",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "ExtrenalReference",
            "in": "query",
            "description": "External reference",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "First name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "Last name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPrimarySearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPrimarySearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPrimarySearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/Contact/{id}/notes": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "notes",
        "description": "Return a list of notes of a contact",
        "operationId": "notes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of notes is empty"
          }
        }
      }
    },
    "/Contact/{id}/appointments": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "appointments",
        "description": "Return a list of appontments of a contact",
        "operationId": "appointments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of appoimnet is empty"
          }
        }
      }
    },
    "/Contact/{id}/calls": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "calls",
        "description": "Return a list of calls of a contact",
        "operationId": "calls",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of calls is empty"
          }
        }
      }
    },
    "/Contact/{id}/task": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "task",
        "description": "Return a list of task of a contact",
        "operationId": "task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of task is empty"
          }
        }
      }
    },
    "/Contact/{id}/activities": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "activities",
        "description": "Return a list of a activities of a contact",
        "operationId": "activities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a contact id (ct_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of all activities is empty"
          }
        }
      }
    },
    "/Contact/{ct_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a contact",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "ct_ref",
            "in": "path",
            "description": "id of a contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Contact/checkValidateTask/{task_id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "operationId": "checkValidateTask",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Contact/CreationInfo": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "CreationInfo",
        "description": "",
        "operationId": "CreationInfo",
        "parameters": [
          {
            "name": "clRef",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "contactType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Contact": {
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "update",
        "description": "Update info of a contact",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContactInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of contact is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "add",
        "description": "Add new contact",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContactInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of contact is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Disconnect": {
      "get": {
        "tags": [
          "Disconnect"
        ],
        "operationId": "Disconnect",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get",
        "description": "Returns all info of a invoice",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the invoice (fa_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access invoice"
          },
          "405": {
            "description": "Throw exception when the invoice is empty"
          }
        }
      }
    },
    "/Invoice/{fa_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a invoice",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "fa_ref",
            "in": "path",
            "description": "id of a invoice",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Invoice/creationInfo": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Invoice/LineCreationInfo": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "LineCreationInfo",
        "description": "",
        "operationId": "LineCreationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Invoice": {
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "update",
        "description": "Update info of a invoice",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/InvoiceInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access invoice"
          },
          "406": {
            "description": "Throw exception when a mandatory field of invoice is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "add",
        "description": "Add new invoice with Client(IdValue), VAT(IdValue), TaxType(IdValue), Bank(IdValue), PaymentMethod(IdValue) and Currency(String) as mandatory fields",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/InvoiceInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access invoice"
          },
          "406": {
            "description": "Throw exception when a mandatory field of invoice is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Invoice/validateTask": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "validateTask",
        "description": "Add invoices to validate. Returns the task_id",
        "operationId": "validateTask",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInfo"
              }
            }
          },
          "description": "contains impression ref and factures refs"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access invoice"
          },
          "407": {
            "description": "Throw exception when the impressionRef is not valid"
          }
        }
      }
    },
    "/Invoice/checkValidateTask/{task_id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "checkValidateTask",
        "description": "<remarks>Returns the list of tasks with the corresponding result.</remarks>\r\n<remarks>\r\n            Possible values for taskStatus:\r\n            -PREPARING\r\n            -WAITING\r\n            -RUNNING\r\n            -FINISHED\r\n            -ERROR\r\n            </remarks>",
        "operationId": "checkValidateTask",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "task_id is the reference of the batch task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTaskResultInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Invoice/getFileInvoice/{fa_ref}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "getFileInvoice",
        "description": "returns the invoice file pdf as a stream",
        "operationId": "getFileInvoice",
        "parameters": [
          {
            "name": "fa_ref",
            "in": "path",
            "description": "fa_ref is the invoice ref",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the invoice has no file associated"
          }
        }
      }
    },
    "/Lead/{leadRef}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Get",
        "description": "Get all information of a lead",
        "operationId": "Get",
        "parameters": [
          {
            "name": "leadRef",
            "in": "path",
            "description": "id is a lead id (recla_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInfo2"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access lead"
          },
          "405": {
            "description": "Throw exception when the lead is empty"
          }
        }
      }
    },
    "/Lead/creationInfo": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "parameters": [
          {
            "name": "rfi_ref",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeadCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Lead/{recla_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a company",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "recla_ref",
            "in": "path",
            "description": "id of a lead",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Lead": {
      "put": {
        "tags": [
          "Lead"
        ],
        "summary": "update",
        "description": "Update info of a lead",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/LeadInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access lead"
          },
          "406": {
            "description": "Throw exception when a mandatory field of lead is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "add",
        "description": "Add new lead",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/LeadInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access lead"
          },
          "406": {
            "description": "Throw exception when a mandatory field of lead is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Opportunity/{id}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Get",
        "description": "Get all information of a business",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a business id (op_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessInfo2"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access opportunity"
          },
          "405": {
            "description": "Throw exception when the opportunity is empty"
          }
        }
      }
    },
    "/Opportunity/{op_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a opportunity",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "op_ref",
            "in": "path",
            "description": "id of a opportunity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Opportunity/CreationInfo": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "CreationInfo",
        "description": "",
        "operationId": "CreationInfo",
        "parameters": [
          {
            "name": "opportType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Opportunity": {
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "update",
        "description": "Update info of a opportunity",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/BusinessInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access opportunity"
          },
          "406": {
            "description": "Throw exception when a mandatory field of opportuny is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "add",
        "description": "Add new opportunity",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/BusinessInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access opportunity"
          },
          "406": {
            "description": "Throw exception when a mandatory field of opportuny is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Opportunity/{id}/AddLine": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "operationId": "AddLine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessLine"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessLine"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessLine"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessLine"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/Parc/{parc_ref}": {
      "get": {
        "tags": [
          "Parc"
        ],
        "summary": "Get",
        "description": "returns the list of fields displayed in the assets lists",
        "operationId": "getList",
        "parameters": [
          {
            "name": "parc_ref",
            "in": "path",
            "description": "parc_ref is a parc reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user does not have permission to access parc"
          },
          "405": {
            "description": "Throw exception when there is no parc"
          }
        }
      }
    },
    "/Parc/getEdit/{parc_ref}": {
      "get": {
        "tags": [
          "Parc"
        ],
        "summary": "GetEdit",
        "description": "Returns the list of fields displayed in the assets edit view",
        "operationId": "getEdit",
        "parameters": [
          {
            "name": "parc_ref",
            "in": "path",
            "description": "parc_ref is a parc reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user does not have permission to access parc"
          },
          "405": {
            "description": "Throw exception when there is no parc"
          }
        }
      }
    },
    "/Parc/CreationInfo/{ParcType}": {
      "get": {
        "tags": [
          "Parc"
        ],
        "summary": "CreationInfo",
        "description": "Returns the information about the fields needed to create a parc for a given parc type",
        "operationId": "CreationInfo",
        "parameters": [
          {
            "name": "ParcType",
            "in": "path",
            "description": "ParcType is a type of parc. A list of accepted parc types is available in the ListParcTypes call",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ParcCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcCreationInfo"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when parc type is invalid"
          }
        }
      }
    },
    "/Parc/ListParcTypes": {
      "get": {
        "tags": [
          "Parc"
        ],
        "summary": "ListParcTypes",
        "description": "Returns the list of all parc types available",
        "operationId": "ListParcTypes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParcTypeInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParcTypeInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParcTypeInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Parc": {
      "put": {
        "tags": [
          "Parc"
        ],
        "summary": "Update",
        "description": "Update a parc. The object should contain the fields of a parc you want to update for a parc with id specified in the ParcRef parameter.",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/Asset"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field of is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Parc"
        ],
        "summary": "Add",
        "description": "Add a new parc. The object should contain the fields of a parc according to the fields obtained in the creation info for the type of the parc to add.",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/Asset"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "406": {
            "description": "Throw exception when a mandatory field is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/PersoFields/{table}": {
      "get": {
        "tags": [
          "PersoFields"
        ],
        "summary": "get",
        "description": "Return list of perso field of a table (client, contact, etc)",
        "operationId": "get",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "table is a entity (client = 1, contact = 2, affaire = 3, contrat = 4, article = 5, project = 6, reclamation = 7, historiques = 8, devis = 20, facture = 30, vente = 40, achat = 50, lead = 77)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PersoField"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PersoField"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PersoField"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of perso field is empty"
          }
        }
      }
    },
    "/PersoFields/getGroup/{group_ref}": {
      "get": {
        "tags": [
          "PersoFields"
        ],
        "summary": "getGroup",
        "description": "Return list of groups",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "group_ref",
            "in": "path",
            "description": "Groupe_ref is a reference that can be empty in order to return all groups",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdValue"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of groups is empty"
          }
        }
      }
    },
    "/Purchase/{id}": {
      "get": {
        "tags": [
          "Purchase"
        ],
        "summary": "Get",
        "description": "Returns all info of a purchase",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the purchase (cf_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access purchase"
          },
          "405": {
            "description": "Throw exception when the purchase is empty"
          }
        }
      }
    },
    "/Purchase/{cf_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Purchase"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a purchase",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "cf_ref",
            "in": "path",
            "description": "id of a purcharse",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Purchase/creationInfo": {
      "get": {
        "tags": [
          "Purchase"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Purchase": {
      "put": {
        "tags": [
          "Purchase"
        ],
        "summary": "update",
        "description": "Update info of a purchase",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access purchase"
          },
          "406": {
            "description": "Throw exception when a mandatory field of purchase is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Purchase"
        ],
        "summary": "add",
        "description": "Add new purchase",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access purchase"
          },
          "406": {
            "description": "Throw exception when a mandatory field of purchase is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Quote/{id}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get",
        "description": "Returns all info of a quote",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the quote (dev_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access quotes"
          },
          "405": {
            "description": "Throw exception when the quote is empty"
          }
        }
      }
    },
    "/Quote/{dev_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a quote",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "dev_ref",
            "in": "path",
            "description": "id of a quote",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Quote/creationInfo": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Quote": {
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "update",
        "description": "Update info of a quote",
        "operationId": "update",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteInfo"
              }
            }
          },
          "description": "Object that contains all fields of quote"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access quote"
          },
          "406": {
            "description": "Throw exception when a mandatory field of quote is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "add",
        "description": "Add new quote",
        "operationId": "add",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteWithArticles"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteWithArticles"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteWithArticles"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteWithArticles"
              }
            }
          },
          "description": "Object that contains all fields of quote"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access quote"
          },
          "406": {
            "description": "Throw exception when a mandatory field of quote is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/RGPD/Search": {
      "get": {
        "tags": [
          "RGPD"
        ],
        "summary": "Search",
        "description": "Search contacts that match certain parametres",
        "operationId": "Search",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "Mobile Phone",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "PrimaryMailAddress",
            "in": "query",
            "description": "Email",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RGPD"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RGPD"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RGPD"
                }
              }
            }
          }
        }
      }
    },
    "/RGPD": {
      "put": {
        "tags": [
          "RGPD"
        ],
        "summary": "update",
        "description": "Update info of a rgpd",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddRGPD"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access rgpd"
          }
        }
      },
      "post": {
        "tags": [
          "RGPD"
        ],
        "summary": "add",
        "description": "Add new rgpd",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddRGPD"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access rgpd"
          }
        }
      }
    },
    "/Sale/{id}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get",
        "description": "Get all information of a sale",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is a sale id (ble_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInfo"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access sales"
          },
          "405": {
            "description": "Throw exception when the sale is empty"
          }
        }
      }
    },
    "/Sale/{ble_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a sale",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "ble_ref",
            "in": "path",
            "description": "id of a sale",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Sale/creationInfo": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleCreationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleCreationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleCreationInfo"
                }
              }
            }
          }
        }
      }
    },
    "/Sale": {
      "put": {
        "tags": [
          "Sale"
        ],
        "summary": "update",
        "description": "Update info of a sale",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/SaleInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access sale"
          },
          "406": {
            "description": "Throw exception when a mandatory field of sale is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Sale"
        ],
        "summary": "add",
        "description": "Add new sale",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/SaleInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access sale"
          },
          "406": {
            "description": "Throw exception when a mandatory field of sale is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Ticket/{reclaRef}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get",
        "description": "Get all information of a ticket",
        "operationId": "Get",
        "parameters": [
          {
            "name": "reclaRef",
            "in": "path",
            "description": "id is a ticket id (recla_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInfo2"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access tickets"
          },
          "405": {
            "description": "Throw exception when the ticket is empty"
          }
        }
      }
    },
    "/Ticket/{recla_ref}/Perso/{chdef_ref}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "PersoField",
        "description": "Get a definition of a perso field in a ticket",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "recla_ref",
            "in": "path",
            "description": "id of a ticket",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chdef_ref",
            "in": "path",
            "description": "id of a perso field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersoField"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the perso field is empty"
          }
        }
      }
    },
    "/Ticket/creationInfo": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "creationInfo",
        "description": "",
        "operationId": "creationInfo",
        "parameters": [
          {
            "name": "rfi_ref",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketCreationInfo2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketCreationInfo2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketCreationInfo2"
                }
              }
            }
          }
        }
      }
    },
    "/Ticket": {
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "update",
        "description": "Update info of a ticket",
        "operationId": "update",
        "requestBody": {
          "$ref": "#/components/requestBodies/TicketInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access ticket"
          },
          "406": {
            "description": "Throw exception when a mandatory field of ticket is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket"
        ],
        "summary": "add",
        "description": "Add new ticket",
        "operationId": "add",
        "requestBody": {
          "$ref": "#/components/requestBodies/TicketInfo2"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "description": "Throw exception when user not has permission for access ticket"
          },
          "406": {
            "description": "Throw exception when a mandatory field of ticket is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/Token": {
      "get": {
        "tags": [
          "Token"
        ],
        "summary": "Get",
        "description": "get a token",
        "operationId": "Get",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "account of client in ines",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "user of ines",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pass",
            "in": "query",
            "description": "password of the user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              }
            }
          }
        }
      }
    },
    "/Token/extendToken": {
      "get": {
        "tags": [
          "Token"
        ],
        "summary": "extendToken",
        "description": "get token of a extend account",
        "operationId": "extendToken",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pass",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResult"
                }
              }
            }
          }
        }
      }
    },
    "/User/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get",
        "description": "Return info of a user",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id is a user id (user_ref)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the user is empty"
          }
        }
      }
    },
    "/User/Search": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search",
        "description": "Search users that match certain parametres",
        "operationId": "Search",
        "parameters": [
          {
            "name": "Mail",
            "in": "query",
            "description": "Email",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get",
        "description": "Return a list of a user",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Throw exception when the list of user is empty"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "update",
        "description": "update fields of a user",
        "operationId": "update",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            }
          },
          "description": "Object that contain all fields of a user"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "406": {
            "description": "Throw exception when a mandatory field of user is null or empty"
          },
          "407": {
            "description": "Throw exception when the value of field not exist in the option list"
          }
        }
      }
    },
    "/User/tokenInfo": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "tokenInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdValue"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ],
  "tags": [
    {
      "name": "Activity",
      "description": "Related to activities or visites"
    },
    {
      "name": "Admin",
      "description": "get the client info and be able to add and update them"
    },
    {
      "name": "Article",
      "description": "get the article info"
    },
    {
      "name": "AutomationContact",
      "description": "Manage the automation contact integration"
    },
    {
      "name": "Campaign",
      "description": "get the user info and be able to add and update them"
    },
    {
      "name": "Client",
      "description": "get the client info and be able to add and update them"
    },
    {
      "name": "Contact",
      "description": "get the user info and be able to add and update them"
    },
    {
      "name": "Disconnect",
      "description": "Disconnect user from api"
    },
    {
      "name": "Invoice",
      "description": "get the invoice info"
    },
    {
      "name": "Lead",
      "description": "get the lead info"
    },
    {
      "name": "Opportunity",
      "description": "get the business info and be able to add and update them"
    },
    {
      "name": "Parc",
      "description": "get the parc info"
    },
    {
      "name": "PersoFields",
      "description": "get the info of perso fields"
    },
    {
      "name": "Purchase",
      "description": "get the client info and be able to add and update them"
    },
    {
      "name": "Quote",
      "description": "get the quote info"
    },
    {
      "name": "RGPD",
      "description": "Manage the RGPD"
    },
    {
      "name": "Sale",
      "description": "get the sale info and be able to add and update them"
    },
    {
      "name": "Ticket",
      "description": "get the sale info and be able to add and update them"
    },
    {
      "name": "Token",
      "description": "get the token info. The token must be base64 encoded."
    },
    {
      "name": "User",
      "description": "get the user info and be able to update them"
    }
  ],
  "servers": [
    {
      "url": "https://secure.inescrm.com/api"
    }
  ],
  "components": {
    "requestBodies": {
      "Asset": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      },
      "TicketInfo2": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/TicketInfo2"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TicketInfo2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/TicketInfo2"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/TicketInfo2"
            }
          }
        },
        "description": "Object that contains all fields of ticket"
      },
      "SaleInfo": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/SaleInfo"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SaleInfo"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/SaleInfo"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/SaleInfo"
            }
          }
        },
        "description": "Object that contains all fields of sale"
      },
      "AddActivityInfo": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/AddActivityInfo"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddActivityInfo"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/AddActivityInfo"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/AddActivityInfo"
            }
          }
        },
        "description": "Object that contains all fields of activity"
      },
      "ArticlesInfo": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ArticlesInfo"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ArticlesInfo"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/ArticlesInfo"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/ArticlesInfo"
            }
          }
        },
        "description": "Object that contains all fields of article"
      },
      "AutomationContact": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/AutomationContact"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AutomationContact"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/AutomationContact"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/AutomationContact"
            }
          }
        },
        "description": "Automation contact"
      },
      "ClientInfo2": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ClientInfo2"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClientInfo2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/ClientInfo2"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/ClientInfo2"
            }
          }
        },
        "description": "Object that contains all fields of client"
      },
      "ContactInfo2": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ContactInfo2"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactInfo2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactInfo2"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/ContactInfo2"
            }
          }
        },
        "description": "Object that contains all fields of contact"
      },
      "InvoiceInfo": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/InvoiceInfo"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvoiceInfo"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/InvoiceInfo"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/InvoiceInfo"
            }
          }
        },
        "description": "Object that contains all fields of invoice"
      },
      "LeadInfo2": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/LeadInfo2"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LeadInfo2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/LeadInfo2"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/LeadInfo2"
            }
          }
        },
        "description": "Object that contains all fields of lead"
      },
      "BusinessInfo2": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/BusinessInfo2"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BusinessInfo2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/BusinessInfo2"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/BusinessInfo2"
            }
          }
        },
        "description": "Object that contains all fields of opportunity"
      },
      "PurchaseInfo": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseInfo"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseInfo"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseInfo"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseInfo"
            }
          }
        },
        "description": "Object that contains all fields of purchase"
      },
      "AddRGPD": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/AddRGPD"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddRGPD"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/AddRGPD"
            }
          },
          "application/*+json": {
            "schema": {
              "$ref": "#/components/schemas/AddRGPD"
            }
          }
        },
        "description": "Object that contains all fields of rgpd"
      }
    },
    "securitySchemes": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "type": "apiKey",
        "description": "Standard Authorization header using the Bearer scheme. Example: \"bearer {token}\". The token must be base64 encoded. To generate the token Refer to the \"TOKEN\" section"
      }
    },
    "schemas": {
      "AddActivityInfo": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "assignee": {
            "$ref": "#/components/schemas/IdValue"
          },
          "subject": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "dateFin": {
            "format": "date-time",
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "visitePublic": {
            "type": "string"
          },
          "assistant": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "ticket": {
            "$ref": "#/components/schemas/IdValue"
          },
          "lead": {
            "$ref": "#/components/schemas/IdValue"
          },
          "category": {
            "$ref": "#/components/schemas/IdValue"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "place": {
            "type": "string"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "IdValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PersoFieldBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          },
          "type": {
            "enum": [
              "Text",
              "Number",
              "Switch",
              "Date",
              "List",
              "Memo",
              "Url",
              "User"
            ],
            "type": "string"
          },
          "groupAssociated": {
            "type": "string"
          }
        }
      },
      "ActivityCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "mandatory": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "Text",
              "List",
              "Number",
              "Date",
              "Blob",
              "Boolean",
              "IdValue"
            ],
            "type": "string"
          },
          "typeValue": {
            "type": "string"
          },
          "options": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          }
        }
      },
      "PersoField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Text",
              "Number",
              "Switch",
              "Date",
              "List",
              "Memo",
              "Url",
              "User"
            ],
            "type": "string"
          },
          "required": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "multiple": {
            "type": "string"
          },
          "showAtCreation": {
            "type": "string"
          },
          "options": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          },
          "value": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          },
          "group": {
            "type": "string"
          },
          "groupAssociated": {
            "type": "string"
          }
        }
      },
      "ArticlesInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "unit": {
            "type": "string"
          },
          "stockUnit": {
            "type": "string"
          },
          "sellingPrice_2": {
            "type": "string"
          },
          "measurementUnit": {
            "type": "string"
          },
          "supplier": {
            "$ref": "#/components/schemas/IdValue"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "sellingPrice_1": {
            "type": "string"
          },
          "sP_1_Currency": {
            "type": "string"
          },
          "coefficientStock": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "width": {
            "type": "string"
          },
          "purchasingPrice": {
            "type": "string"
          },
          "pP_Currency": {
            "type": "string"
          },
          "sP_2_Currency": {
            "type": "string"
          },
          "purchasingPriceSetBy": {
            "$ref": "#/components/schemas/IdValue"
          },
          "barcode": {
            "type": "string"
          },
          "quality": {
            "type": "string"
          },
          "productSameCategory": {
            "$ref": "#/components/schemas/IdValue"
          },
          "techinicalDescription": {
            "type": "string"
          },
          "supplierName": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          },
          "weigthUnit": {
            "type": "string"
          },
          "secundarySupplier": {
            "$ref": "#/components/schemas/IdValue"
          },
          "commission": {
            "type": "string"
          },
          "minStock": {
            "type": "string"
          },
          "maxStock": {
            "type": "string"
          },
          "economicPurchaseQuantity": {
            "type": "string"
          },
          "stockLevelFile": {
            "type": "string"
          },
          "stocktakingDate": {
            "type": "string"
          },
          "lastEntryDate": {
            "type": "string"
          },
          "lastLeavingDate": {
            "type": "string"
          },
          "supplyingDeadline": {
            "type": "string"
          },
          "deliveryDeadline": {
            "type": "string"
          },
          "warehouse": {
            "$ref": "#/components/schemas/IdValue"
          },
          "barcodeType": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "accountingPurchaseCode": {
            "type": "string"
          },
          "accountingSaleCode": {
            "type": "string"
          },
          "modificationDate": {
            "type": "string"
          },
          "availableStock": {
            "type": "string"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "ArticleCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "AutomationContact": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "acSync": {
            "format": "int32",
            "type": "integer"
          },
          "acSegment": {
            "format": "int32",
            "type": "integer"
          },
          "acScoring": {
            "format": "int32",
            "type": "integer"
          },
          "acLog": {
            "type": "string"
          },
          "automationRef": {
            "format": "int32",
            "type": "integer"
          },
          "acDateModif": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "CampaignSearchResult": {
        "type": "object",
        "properties": {
          "campaigns": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignShortInfo"
            }
          }
        }
      },
      "CampaignShortInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "startingDate": {
            "type": "string"
          },
          "responsible": {
            "type": "string"
          }
        }
      },
      "ContactInfoCampaign": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "businessTelephone": {
            "type": "string"
          },
          "homeTelephone": {
            "type": "string"
          },
          "extrenalReference": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "primaryMailAddress": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          },
          "rgpd": {
            "type": "boolean"
          }
        }
      },
      "ClientInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "salesResponsable": {
            "$ref": "#/components/schemas/IdValue"
          },
          "owner": {
            "$ref": "#/components/schemas/IdValue"
          },
          "zip": {
            "type": "string"
          },
          "scoring": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "departament": {
            "type": "string"
          },
          "activity": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "corporationType": {
            "$ref": "#/components/schemas/IdValue"
          },
          "language": {
            "$ref": "#/components/schemas/IdValue"
          },
          "accessSetings": {
            "type": "string"
          },
          "clShowRem": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "accountingCode": {
            "type": "string"
          },
          "bank": {
            "type": "string"
          },
          "mabank": {
            "$ref": "#/components/schemas/IdValue"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "typeTVA": {
            "$ref": "#/components/schemas/IdValue"
          },
          "iban": {
            "type": "string"
          },
          "taxId": {
            "type": "string"
          },
          "taxPayerId": {
            "type": "string"
          },
          "paymentConditions": {
            "$ref": "#/components/schemas/IdValue"
          },
          "invoicedTax": {
            "$ref": "#/components/schemas/IdValue"
          },
          "transport": {
            "$ref": "#/components/schemas/IdValue"
          },
          "customerNo": {
            "type": "string"
          },
          "autoDiscountOfInvoice": {
            "type": "string"
          },
          "maxOutstandingDebt": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "technicalMan": {
            "$ref": "#/components/schemas/IdValue"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "modificatedOn": {
            "type": "string"
          },
          "customerSince": {
            "type": "string"
          },
          "invoicingAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "headOffice": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateLastActivity": {
            "type": "string"
          },
          "contacts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo2"
            }
          },
          "fichiers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo2"
            }
          },
          "isFavorite": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "foundationDate": {
            "type": "string"
          },
          "effectif": {
            "$ref": "#/components/schemas/IdValue"
          },
          "ca": {
            "$ref": "#/components/schemas/IdValue"
          },
          "creditScore": {
            "type": "string"
          },
          "userContact": {
            "type": "string"
          },
          "userCommercial": {
            "type": "string"
          },
          "editable": {
            "type": "string"
          },
          "deletable": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "ContactInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "businessTelephone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "primaryMailAddress": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "langue": {
            "$ref": "#/components/schemas/IdValue"
          },
          "position": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "homeTelephone": {
            "type": "string"
          },
          "icq": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "mail2": {
            "type": "string"
          },
          "ipPhone": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "extrenalReference": {
            "type": "string"
          },
          "hierarchicalResp": {
            "$ref": "#/components/schemas/IdValue"
          },
          "status": {
            "type": "string"
          },
          "birthday": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateModif": {
            "type": "string"
          },
          "showPortal": {
            "type": "string"
          },
          "receiveInvoices": {
            "type": "string"
          },
          "dateArchive": {
            "type": "string"
          },
          "accessSettings": {
            "type": "string"
          },
          "emailOptOut": {
            "type": "string"
          },
          "invoiceAddress": {
            "type": "string"
          },
          "incorrectMailingAddress": {
            "type": "string"
          },
          "isFavorite": {
            "type": "string"
          },
          "archived": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateCreation": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "FileInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ficSize": {
            "type": "string"
          },
          "ficLink": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/IdValue"
          },
          "creationDate": {
            "type": "string"
          }
        }
      },
      "ActivityInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "comment": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "dateFin": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "visitePublic": {
            "type": "string"
          },
          "writePermission": {
            "type": "string"
          },
          "deletePermission": {
            "type": "string"
          },
          "assistant": {
            "type": "string"
          },
          "files": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo2"
            }
          },
          "priority": {
            "type": "string"
          },
          "ticket": {
            "$ref": "#/components/schemas/IdValue"
          },
          "lead": {
            "$ref": "#/components/schemas/IdValue"
          },
          "category": {
            "$ref": "#/components/schemas/IdValue"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "BusinessInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "name": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "margin": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "lead": {
            "$ref": "#/components/schemas/IdValue"
          },
          "stage": {
            "$ref": "#/components/schemas/IdValue"
          },
          "result": {
            "type": "string"
          },
          "resp_Comercial": {
            "$ref": "#/components/schemas/IdValue"
          },
          "date_Creation": {
            "type": "string"
          },
          "date_Fin": {
            "type": "string"
          },
          "duration_Days": {
            "type": "string"
          },
          "probability": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "consolidation": {
            "type": "string"
          },
          "date_Depart": {
            "type": "string"
          },
          "date_Modification": {
            "type": "string"
          },
          "date_Next_Step": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "scheduledHours": {
            "type": "string"
          },
          "margin_Coef": {
            "type": "string"
          },
          "timeSpent": {
            "type": "string"
          },
          "diffusion": {
            "$ref": "#/components/schemas/IdValue"
          },
          "nextStage": {
            "type": "string"
          },
          "synchro": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "campaign": {
            "$ref": "#/components/schemas/IdValue"
          },
          "comments": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/IdValue"
          },
          "mainOppoirtunityIndex": {
            "type": "string"
          },
          "closureReason": {
            "$ref": "#/components/schemas/IdValue"
          },
          "externalReference": {
            "type": "string"
          },
          "linkedOpport": {
            "type": "string"
          },
          "canEdit": {
            "type": "string"
          },
          "activities": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityInfo"
            }
          },
          "files": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo2"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          },
          "engagement": {
            "$ref": "#/components/schemas/IdValue"
          },
          "pipeline": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "TicketInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "file": {
            "$ref": "#/components/schemas/IdValue"
          },
          "daysSinceCreated": {
            "type": "string"
          },
          "daysSinceModified": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "importance": {
            "type": "string"
          },
          "criticality": {
            "$ref": "#/components/schemas/IdValue"
          },
          "owner": {
            "$ref": "#/components/schemas/IdValue"
          },
          "manager": {
            "$ref": "#/components/schemas/IdValue"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "activities": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityInfo"
            }
          },
          "flux": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReclaFluxInfo"
            }
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "text": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "modificationDate": {
            "type": "string"
          },
          "closingDate": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "daysModificationString": {
            "type": "string"
          },
          "daysCreationString": {
            "type": "string"
          },
          "reclaMere": {
            "$ref": "#/components/schemas/IdValue"
          },
          "canEdit": {
            "type": "string"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "ReclaFluxInfo": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "state": {
            "$ref": "#/components/schemas/IdValue"
          },
          "criticality": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "SaleInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "reference": {
            "type": "string"
          },
          "accountingInformation": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string"
          },
          "responsable": {
            "$ref": "#/components/schemas/IdValue"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateModification": {
            "type": "string"
          },
          "dateEdition": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "incoterm": {
            "$ref": "#/components/schemas/IdValue"
          },
          "invoiceAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "bank": {
            "$ref": "#/components/schemas/IdValue"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "currency": {
            "type": "string"
          },
          "margin": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "taxFreeAmount": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "advancedPayment": {
            "type": "string"
          },
          "terms": {
            "type": "string"
          },
          "productionComments": {
            "type": "string"
          },
          "commercialComments": {
            "type": "string"
          },
          "lines": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleLinesInfo"
            }
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          },
          "pipeline": {
            "$ref": "#/components/schemas/IdValue"
          },
          "engagement": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "SaleLinesInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "invoice": {
            "$ref": "#/components/schemas/IdValue"
          },
          "discount": {
            "type": "string"
          },
          "budget": {
            "$ref": "#/components/schemas/IdValue"
          },
          "article": {
            "$ref": "#/components/schemas/IdValue"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "sellingPrice": {
            "type": "string"
          },
          "purchasingPrice": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "commercialComment": {
            "type": "string"
          },
          "customerOrder": {
            "type": "string"
          },
          "supplierOrder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "shipment": {
            "$ref": "#/components/schemas/IdValue"
          },
          "requestedTerm": {
            "type": "string"
          },
          "confirmedTerm": {
            "type": "string"
          },
          "productionComments": {
            "type": "string"
          }
        }
      },
      "QuoteInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "responsable": {
            "$ref": "#/components/schemas/IdValue"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateModification": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "validity": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "invoicingAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "delivery": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "bank": {
            "$ref": "#/components/schemas/IdValue"
          },
          "terms": {
            "$ref": "#/components/schemas/IdValue"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "incoterm": {
            "$ref": "#/components/schemas/IdValue"
          },
          "commercialComments": {
            "type": "string"
          },
          "productionComments": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "marge": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "lines": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteLineInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "QuoteLineInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "sellingPrice": {
            "type": "string"
          },
          "discount": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "success": {
            "type": "string"
          },
          "confirmedTerm": {
            "type": "string"
          },
          "purchasingPrice": {
            "type": "string"
          },
          "showSellingPrice": {
            "type": "string"
          },
          "article": {
            "$ref": "#/components/schemas/IdValue"
          },
          "taxFree": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "vatPrice": {
            "type": "string"
          },
          "invoice": {
            "$ref": "#/components/schemas/IdValue"
          },
          "sale": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "InvoiceInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "billTo": {
            "$ref": "#/components/schemas/IdValue"
          },
          "shipTo": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateCreation": {
            "type": "string"
          },
          "dueDate": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateModification": {
            "type": "string"
          },
          "exported": {
            "type": "string"
          },
          "responsable": {
            "$ref": "#/components/schemas/IdValue"
          },
          "scoring": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "incoterm": {
            "$ref": "#/components/schemas/IdValue"
          },
          "invoicingAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/IdValue"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "bank": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dueDateExpected": {
            "type": "string"
          },
          "dateRecurrence": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/IdValue"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "taxType": {
            "$ref": "#/components/schemas/IdValue"
          },
          "accountingInformation": {
            "type": "string"
          },
          "commercialComments": {
            "type": "string"
          },
          "productionComments": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "dateCancellation": {
            "type": "string"
          },
          "marge": {
            "type": "string"
          },
          "paid": {
            "type": "string"
          },
          "taxFree": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "lines": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "InvoiceLineInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "article": {
            "$ref": "#/components/schemas/IdValue"
          },
          "description": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string"
          },
          "success": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "discount": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "quantity": {
            "type": "string"
          },
          "sellingPrice": {
            "type": "string"
          },
          "purchasingPrice": {
            "type": "string"
          },
          "sale": {
            "$ref": "#/components/schemas/IdValue"
          },
          "showSellingPrice": {
            "type": "string"
          },
          "validationDate": {
            "type": "string"
          },
          "parc": {
            "$ref": "#/components/schemas/IdValue"
          },
          "quote": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateParcDebut": {
            "type": "string"
          },
          "dateParcEnd": {
            "type": "string"
          },
          "taxFree": {
            "type": "string"
          },
          "discountPrice": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        }
      },
      "PurchaseInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "responsable": {
            "$ref": "#/components/schemas/IdValue"
          },
          "contract": {
            "$ref": "#/components/schemas/IdValue"
          },
          "shipment": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateModification": {
            "type": "string"
          },
          "supplierOrder": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "incoterm": {
            "$ref": "#/components/schemas/IdValue"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "delivery": {
            "$ref": "#/components/schemas/IdValue"
          },
          "deliveryAddress": {
            "type": "string"
          },
          "bank": {
            "$ref": "#/components/schemas/IdValue"
          },
          "dateCreation": {
            "type": "string"
          },
          "terms": {
            "$ref": "#/components/schemas/IdValue"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "exchangeRate": {
            "type": "string"
          },
          "commercialComments": {
            "type": "string"
          },
          "productionComments": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "paid": {
            "type": "string"
          },
          "taxFree": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "balance": {
            "type": "string"
          },
          "lines": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseLineInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "PurchaseLineInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "article": {
            "$ref": "#/components/schemas/IdValue"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          },
          "delivered": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "purcharsingPrice": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/IdValue"
          },
          "discount": {
            "type": "string"
          },
          "customerOrder": {
            "type": "string"
          },
          "requestedTerm": {
            "type": "string"
          },
          "confirmedTerm": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "totalBalance": {
            "type": "string"
          },
          "taxFree": {
            "type": "string"
          },
          "totalDelivered": {
            "type": "string"
          },
          "invoicePurchase": {
            "$ref": "#/components/schemas/IdValue"
          }
        }
      },
      "LeadInfo2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "contact": {
            "$ref": "#/components/schemas/IdValue"
          },
          "channel": {
            "$ref": "#/components/schemas/IdValue"
          },
          "owner": {
            "$ref": "#/components/schemas/IdValue"
          },
          "manager": {
            "$ref": "#/components/schemas/IdValue"
          },
          "status": {
            "$ref": "#/components/schemas/IdValue"
          },
          "clientScoring": {
            "type": "string"
          },
          "leadScoring": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdValue"
          },
          "origin": {
            "$ref": "#/components/schemas/IdValue"
          },
          "business": {
            "$ref": "#/components/schemas/IdValue"
          },
          "salesAmount": {
            "type": "string"
          },
          "modificationDate": {
            "type": "string"
          },
          "closingDate": {
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/IdValue"
          },
          "headCount": {
            "type": "string"
          },
          "campagne": {
            "$ref": "#/components/schemas/IdValue"
          },
          "author": {
            "$ref": "#/components/schemas/IdValue"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          },
          "persoField": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoFieldBasic"
              }
            }
          }
        }
      },
      "AssetInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParcInfo"
            }
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "clRef": {
            "type": "string"
          }
        }
      },
      "ParcInfo": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ClientCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "groups": {
            "$ref": "#/components/schemas/FieldInfo"
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "ClientSearchResult": {
        "type": "object",
        "properties": {
          "clients": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          }
        }
      },
      "ContactPrimarySearchResult": {
        "type": "object",
        "properties": {
          "contact": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPrimaryInfo"
            }
          }
        }
      },
      "ContactPrimaryInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          }
        }
      },
      "BatchTaskResultInfo": {
        "type": "object",
        "properties": {
          "factureRef": {
            "format": "int32",
            "type": "integer"
          },
          "taskStatus": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ContactCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "InvoiceCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "InvoiceLineCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          }
        }
      },
      "BatchInfo": {
        "type": "object",
        "properties": {
          "impressionRef": {
            "format": "int32",
            "type": "integer"
          },
          "factureRefs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "position": {
            "format": "int64",
            "type": "integer"
          },
          "readTimeout": {
            "format": "int32",
            "type": "integer"
          },
          "writeTimeout": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "LeadCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "BusinessCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "BusinessLine": {
        "type": "object",
        "properties": {
          "articleRef": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "sellingPrice": {
            "format": "int32",
            "type": "integer"
          },
          "unit": {
            "type": "string"
          },
          "remise": {
            "format": "int32",
            "type": "integer"
          },
          "tva": {
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "type": "integer"
          },
          "businessLineDescription": {
            "type": "string"
          }
        }
      },
      "ParcCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          }
        }
      },
      "ParcTypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "parcRef": {
            "format": "int32",
            "type": "integer"
          },
          "parcType": {
            "format": "int32",
            "type": "integer"
          },
          "clientRef": {
            "format": "int32",
            "type": "integer"
          },
          "contactRef": {
            "format": "int32",
            "type": "integer"
          },
          "stage": {
            "format": "int32",
            "type": "integer"
          },
          "creator": {
            "format": "int32",
            "type": "integer"
          },
          "gestionnaire": {
            "format": "int32",
            "type": "integer"
          },
          "commercialRhRef": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "activationDate": {
            "format": "date-time",
            "type": "string"
          },
          "renewalDate": {
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "billingDate": {
            "format": "date-time",
            "type": "string"
          },
          "firstBillingDate": {
            "format": "date-time",
            "type": "string"
          },
          "closingDate": {
            "format": "date-time",
            "type": "string"
          },
          "signatureCGADate": {
            "format": "date-time",
            "type": "string"
          },
          "nextBillDate": {
            "format": "date-time",
            "type": "string"
          },
          "endDiscountDate": {
            "format": "date-time",
            "type": "string"
          },
          "pv": {
            "format": "float",
            "type": "number"
          },
          "discount": {
            "format": "float",
            "type": "number"
          },
          "syntec": {
            "format": "float",
            "type": "number"
          },
          "quantity": {
            "format": "float",
            "type": "number"
          },
          "pvUnite": {
            "format": "int32",
            "type": "integer"
          },
          "cycleFacture": {
            "format": "int32",
            "type": "integer"
          },
          "opportRef": {
            "format": "int32",
            "type": "integer"
          },
          "durationMonths": {
            "format": "int32",
            "type": "integer"
          },
          "preavis": {
            "format": "int32",
            "type": "integer"
          },
          "discountType": {
            "format": "int32",
            "type": "integer"
          },
          "billRef": {
            "format": "int32",
            "type": "integer"
          },
          "articleRef": {
            "format": "int32",
            "type": "integer"
          },
          "agreementDiscount": {
            "format": "int32",
            "type": "integer"
          },
          "lastInvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "billingClRef": {
            "format": "int32",
            "type": "integer"
          },
          "origineRef": {
            "format": "int32",
            "type": "integer"
          },
          "historic": {
            "type": "string"
          },
          "observations": {
            "type": "string"
          },
          "contrat": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "billable": {
            "type": "string"
          },
          "nonListed": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonListedAsset"
            }
          }
        }
      },
      "NonListedAsset": {
        "type": "object",
        "properties": {
          "baseName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PurchaseCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "QuoteCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "QuoteWithArticles": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/IdValue"
          },
          "billTo": {
            "$ref": "#/components/schemas/IdValue"
          },
          "shipTo": {
            "$ref": "#/components/schemas/IdValue"
          },
          "articles": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleData"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ArticleData": {
        "type": "object",
        "properties": {
          "internalRef": {
            "format": "int32",
            "type": "integer"
          },
          "articleName": {
            "type": "string"
          },
          "articleDescription": {
            "type": "string"
          },
          "quantity": {
            "format": "double",
            "type": "number"
          },
          "disscount": {
            "format": "double",
            "type": "number"
          },
          "salePrice": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Quote": {
        "type": "object",
        "properties": {
          "ref": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "clientRef": {
            "format": "int32",
            "type": "integer"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "edition": {
            "format": "date-time",
            "type": "string"
          },
          "rhRef": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "contactRef": {
            "format": "int32",
            "type": "integer"
          },
          "userRef": {
            "format": "int32",
            "type": "integer"
          },
          "margin": {
            "format": "double",
            "type": "number"
          },
          "opportRef": {
            "format": "int32",
            "type": "integer"
          },
          "facturation": {
            "format": "int32",
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "lines": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteLine"
            }
          },
          "incoterm": {
            "type": "string"
          },
          "incotermRef": {
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "tax1": {
            "format": "double",
            "type": "number"
          },
          "tax1Value": {
            "format": "double",
            "type": "number"
          },
          "tax2": {
            "format": "double",
            "type": "number"
          },
          "tax2Value": {
            "format": "double",
            "type": "number"
          },
          "origin": {
            "type": "string"
          },
          "originRef": {
            "format": "int32",
            "type": "integer"
          },
          "shippingAddress": {
            "type": "string"
          },
          "shipTo": {
            "format": "int32",
            "type": "integer"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "netPrice": {
            "format": "double",
            "type": "number"
          },
          "reference": {
            "type": "string"
          },
          "saleDate": {
            "format": "date-time",
            "type": "string"
          },
          "saleReference": {
            "format": "int32",
            "type": "integer"
          },
          "paymentMethodRef": {
            "format": "int32",
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "folder": {
            "type": "string"
          },
          "folderRef": {
            "format": "int32",
            "type": "integer"
          },
          "bankRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "QuoteLine": {
        "type": "object",
        "properties": {
          "article": {
            "format": "int32",
            "type": "integer"
          },
          "unit": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "tax": {
            "format": "double",
            "type": "number"
          },
          "delay": {
            "format": "date-time",
            "type": "string"
          },
          "showLineOnBill": {
            "type": "boolean"
          },
          "quantity": {
            "format": "double",
            "type": "number"
          },
          "discount": {
            "format": "double",
            "type": "number"
          },
          "salePrice": {
            "format": "double",
            "type": "number"
          },
          "purchasePrice": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "valid": {
            "format": "int32",
            "type": "integer"
          },
          "articleObject": {
            "$ref": "#/components/schemas/ArticleInfo"
          }
        }
      },
      "ArticleInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "propertiesDescription": {
            "type": "string"
          },
          "weight": {
            "format": "double",
            "type": "number"
          },
          "size": {
            "format": "double",
            "type": "number"
          },
          "purchasePrice": {
            "format": "double",
            "type": "number"
          },
          "price1": {
            "format": "double",
            "type": "number"
          },
          "price2": {
            "format": "double",
            "type": "number"
          },
          "stock": {
            "format": "double",
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "minimumStock": {
            "format": "double",
            "type": "number"
          },
          "maximumStock": {
            "format": "double",
            "type": "number"
          },
          "saleMinimumQuantity": {
            "format": "double",
            "type": "number"
          },
          "stockable": {
            "type": "boolean"
          },
          "state": {
            "enum": [
              "ARCHIVED",
              "CONSTITUENT",
              "FINISHED_PRODUCT",
              "SUB_PRODUCT",
              "SERVICE"
            ],
            "type": "string"
          },
          "lastInventoryDate": {
            "format": "date-time",
            "type": "string"
          },
          "lastPurchaseDate": {
            "format": "date-time",
            "type": "string"
          },
          "lastSaleDate": {
            "format": "date-time",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "barCode": {
            "enum": [
              "CODE39",
              "EAN13"
            ],
            "type": "string"
          },
          "barCodeValue": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "managementCoeficient": {
            "format": "double",
            "type": "number"
          },
          "stockBeforeInventory": {
            "format": "double",
            "type": "number"
          },
          "receptionDelay": {
            "format": "int32",
            "type": "integer"
          },
          "deliveryDelay": {
            "format": "int32",
            "type": "integer"
          },
          "parentArticle": {
            "format": "int32",
            "type": "integer"
          },
          "lotManagement": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "saleAccountingCode": {
            "type": "string"
          },
          "purchaseAccountingCode": {
            "type": "string"
          },
          "salePricingMethod": {
            "enum": [
              "FIXED_PRICE",
              "AVERAGE_PRICE",
              "LAST_SALE_PRICE"
            ],
            "type": "string"
          },
          "supplier": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "warehouse": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitInfo"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/UnitInfo"
          },
          "sizeUnit": {
            "$ref": "#/components/schemas/UnitInfo"
          },
          "managementUnit": {
            "$ref": "#/components/schemas/UnitInfo"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyInfo"
          },
          "price1Currency": {
            "$ref": "#/components/schemas/CurrencyInfo"
          },
          "price2Currency": {
            "$ref": "#/components/schemas/CurrencyInfo"
          },
          "taxInfo": {
            "$ref": "#/components/schemas/TaxInfo"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ClientInfo": {
        "type": "object",
        "properties": {
          "confidentiality": {
            "enum": [
              "Public",
              "ReadOnly",
              "Private",
              "Undefined"
            ],
            "type": "string"
          },
          "contacts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            }
          },
          "companyName": {
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "service": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "manager": {
            "format": "int32",
            "type": "integer"
          },
          "salesResponsable": {
            "format": "int32",
            "type": "integer"
          },
          "technicalResponsable": {
            "format": "int32",
            "type": "integer"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "origin": {
            "format": "int32",
            "type": "integer"
          },
          "customerNumber": {
            "format": "int32",
            "type": "integer"
          },
          "companyTaxCode": {
            "type": "string"
          },
          "vatTax": {
            "type": "string"
          },
          "bank": {
            "type": "string"
          },
          "bankAccount": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "paymentMethodRef": {
            "format": "int32",
            "type": "integer"
          },
          "discount": {
            "format": "float",
            "type": "number"
          },
          "headQuarter": {
            "format": "int32",
            "type": "integer"
          },
          "language": {
            "type": "string"
          },
          "activity": {
            "type": "string"
          },
          "accountingCode": {
            "type": "string"
          },
          "scoring": {
            "type": "string"
          },
          "remainder": {
            "format": "float",
            "type": "number"
          },
          "maxRemainder": {
            "format": "float",
            "type": "number"
          },
          "moral": {
            "format": "int32",
            "type": "integer"
          },
          "folder": {
            "format": "int32",
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "bankReference": {
            "format": "int32",
            "type": "integer"
          },
          "taxType": {
            "format": "int32",
            "type": "integer"
          },
          "vatTaxValue": {
            "format": "float",
            "type": "number"
          },
          "creator": {
            "format": "int32",
            "type": "integer"
          },
          "delivery": {
            "format": "int32",
            "type": "integer"
          },
          "billing": {
            "format": "int32",
            "type": "integer"
          },
          "effectif": {
            "format": "int32",
            "type": "integer"
          },
          "ca": {
            "format": "int32",
            "type": "integer"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UnitInfo": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string"
          },
          "unitReference": {
            "format": "int32",
            "type": "integer"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "type": "string"
          }
        }
      },
      "CurrencyInfo": {
        "type": "object",
        "properties": {
          "exchangeRate": {
            "format": "double",
            "type": "number"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "type": "string"
          }
        }
      },
      "TaxInfo": {
        "type": "object",
        "properties": {
          "value": {
            "format": "double",
            "type": "number"
          },
          "saleAccountingCode": {
            "type": "string"
          },
          "purchaseAccountingCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ContactInfo": {
        "type": "object",
        "properties": {
          "clientInfo": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "bussinesTelephone": {
            "type": "string"
          },
          "homeTelephone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "businessAddress": {
            "type": "string"
          },
          "homeAddress": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "function": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "companyRef": {
            "format": "int32",
            "type": "integer"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "dateOfBirth": {
            "format": "date-time",
            "type": "string"
          },
          "primaryMailAddress": {
            "type": "string"
          },
          "secondaryMailAddress": {
            "type": "string"
          },
          "rang": {
            "enum": [
              "Secondaire",
              "Principal",
              "Archive",
              "Anonymise"
            ],
            "type": "string"
          },
          "genre": {
            "type": "string"
          },
          "author": {
            "format": "int32",
            "type": "integer"
          },
          "confidentiality": {
            "enum": [
              "Public",
              "ReadOnly",
              "Private",
              "Undefined"
            ],
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "primary": {
            "enum": [
              "Associated",
              "Primary"
            ],
            "type": "string"
          },
          "isNew": {
            "type": "boolean",
            "readOnly": true
          },
          "internalRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "RGPD": {
        "type": "object",
        "properties": {
          "rgpd": {
            "type": "boolean"
          },
          "mailSubscription": {
            "type": "boolean"
          },
          "primaryMailAddress": {
            "type": "string"
          },
          "rgpdCheckDate": {
            "type": "string"
          },
          "rgpdLink": {
            "type": "string"
          }
        }
      },
      "AddRGPD": {
        "type": "object",
        "properties": {
          "mailSubscription": {
            "type": "boolean"
          },
          "primaryMailAddress": {
            "type": "string"
          },
          "logObject": {
            "type": "string"
          }
        }
      },
      "SaleCreationInfo": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "TicketCreationInfo2": {
        "type": "object",
        "properties": {
          "fields": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "persoFields": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersoField"
              }
            }
          }
        }
      },
      "TokenResult": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "failReason": {
            "type": "string"
          },
          "failCode": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "userRef": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rhRef": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "langue": {
            "$ref": "#/components/schemas/IdValue"
          },
          "timeZone": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string"
          },
          "dateExpiration": {
            "type": "string"
          },
          "defaultGroup": {
            "$ref": "#/components/schemas/IdValue"
          },
          "defaultBIGroup": {
            "$ref": "#/components/schemas/IdValue"
          },
          "groups": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdValue"
            }
          },
          "status": {
            "type": "string"
          },
          "genre": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "initials": {
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/IdValue"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "cardNumberId": {
            "type": "string"
          },
          "dateBirthday": {
            "type": "string"
          },
          "dateEntry": {
            "type": "string"
          },
          "dateUnavailable": {
            "type": "string"
          },
          "diploma": {
            "type": "string"
          },
          "vehicleTax": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "mobil": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "hierarchicalResp": {
            "$ref": "#/components/schemas/IdValue"
          },
          "numberSS": {
            "type": "string"
          },
          "coefficient": {
            "type": "string"
          },
          "employmentContract": {
            "type": "string"
          },
          "dateRelease": {
            "type": "string"
          },
          "hourlyCost": {
            "type": "string"
          },
          "driverLicenseNumber": {
            "type": "string"
          },
          "mileageReimbursement": {
            "type": "string"
          },
          "workTime": {
            "type": "string"
          },
          "rib": {
            "type": "string"
          },
          "connectionNumber": {
            "type": "string"
          },
          "dateLastConnection": {
            "type": "string"
          }
        }
      }
    }
  }
}