{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Encharge API",
    "description": "The Encharge.io API",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "url": "https://help.encharge.io",
      "name": "unknown"
    }
  },
  "tags": [
    {
      "name": "enduser_model",
      "x-displayName": "EndUser (Person) Model",
      "description": "A EndUser (also called person) in your account in Encharge.\n<SchemaDefinition schemaRef=\"#/components/schemas/EndUser\" />\n"
    },
    {
      "name": "person_fields_model",
      "x-displayName": "Person Field Model",
      "description": "Represents a field (i.e. property) of a person (EndUser).\n<SchemaDefinition schemaRef=\"#/components/schemas/IPersonField\" />\n"
    },
    {
      "name": "Webhooks",
      "x-displayName": "Webhooks",
      "description": "Subscribe to events happening in Encharge.\nCurrently supported events are:\n- `newUser`\n    - Triggers when an enduser (person) is created in Encharge.\n\n- `updatedUser`\n    - Triggers when an enduser (person) is updated in Encharge.\n\n- `unsubscribedUser`\n    - Triggers when an enduser (person) has unsubscribed from receiving emails in Encharge.\n\n- `added-tag-X`\n    - Triggers when an enduser (person) is tagged with tag \"X\".\n\n    For example, event named `added-tag-signed-up` will trigger when a person is tagged with a tag called \"signed-up\".\n\n- `removed-tag-X`\n    - Triggers when an enduser (person) is untagged with tag \"X\".\n\n    For example, event named `removed-tag-demo` will trigger when a person is removed with a tag called \"demo\". \n\n    \n__Webhook payload__\n\n`targetUrl` will be posted with the data of the person performing the event, as follows:\n```\n{\n  \"endUserData\": [\n    {\n      ... // See the Person Field Model for available properties.\n    }\n  ],\n  \"eventPayload\": {\n    ... // Any other data about the event. E.g. the tag applied to the user.\n  }\n}\n```\n"
    },
    {
      "name": "Account"
    },
    {
      "name": "People"
    },
    {
      "name": "Tags"
    }
  ],
  "components": {
    "parameters": {
      "PeopleQuery": {
        "in": "query",
        "name": "people",
        "required": true,
        "description": "People can be specified by any ID. \nFor example, for a person with an email `slav@encharge.io` use the following query: \n\n`?people[0][email]=slav@encharge.io`\n\nFor multiple people, pass multiple ids in the query like so:\n\n`?people[0][userId]=abc&people[1][userId]=xyz`. \n\nThis will specify people who have userId of `abc` and `xyz`.\n\nEmails, userIds and other IDs can used together in a single query.\n",
        "schema": {
          "$ref": "#/components/schemas/EndUserIdentifiers"
        }
      }
    },
    "schemas": {
      "EndUser": {
        "type": "object",
        "description": "This is the exposed EndUser class that proxies the unproxied one.",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "description": "See [Person Fields](#tag/PersonFields) for other available properties."
        },
        "allOf": [
          {
            "properties": {},
            "additionalProperties": {},
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/Partial_this_"
          }
        ]
      },
      "Exclude_JSONSchema6TypeName.object-or-array-or-null_": {
        "type": "string",
        "enum": [
          "string",
          "number",
          "boolean",
          "integer",
          "any"
        ],
        "description": "Exclude from T those types that are assignable to U"
      },
      "PersonFieldType": {
        "$ref": "#/components/schemas/Exclude_JSONSchema6TypeName.object-or-array-or-null_"
      },
      "PersonFieldFormat": {
        "type": "string",
        "enum": [
          "date",
          "date-time"
        ],
        "nullable": true
      },
      "IPersonField": {
        "description": "Represents a field (i.e. property) of a person in Encharge.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique ID of the field.\n\nUse this \"name\" to refer to this field in any API operations."
          },
          "title": {
            "type": "string",
            "description": "Human readable name of the field."
          },
          "type": {
            "$ref": "#/components/schemas/PersonFieldType",
            "description": "Type of the field. JSON schema compatible"
          },
          "format": {
            "$ref": "#/components/schemas/PersonFieldFormat",
            "description": "Format of the field. Applies to String fields only. JSON schema compatible"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Whether this field can be changed by the user or via the API."
          },
          "tooltip": {
            "type": "string",
            "description": "More information about this field (to be shown in a tooltip)"
          },
          "icon": {
            "type": "string",
            "description": "Field icon, if set."
          },
          "array": {
            "type": "boolean",
            "description": "Whether this field holds an array of values."
          },
          "canMapFrom": {
            "type": "boolean",
            "description": "Internal"
          },
          "firstClassField": {
            "type": "boolean",
            "description": "Internal."
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "system",
                  "user"
                ]
              }
            ],
            "description": "Internal. Field creator."
          }
        },
        "required": [
          "name",
          "type",
          "readOnly",
          "array"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ConditionPerformed": {
        "type": "string",
        "enum": [
          "has",
          "has not"
        ]
      },
      "SegmentEventConditionGroup": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group"
            ],
            "nullable": false
          },
          "operator": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ]
          },
          "conditions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SegmentEventConditionGroup"
                },
                {
                  "$ref": "#/components/schemas/SegmentEventProperty"
                }
              ]
            },
            "type": "array"
          },
          "system": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "operator",
          "conditions"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Exclude_ConditionAll.ConditionDateRelative_": {
        "type": "string",
        "enum": [
          "is",
          "is not",
          "is empty",
          "is not empty",
          "is any",
          "starts with",
          "does not start with",
          "ends with",
          "does not end with",
          "contains",
          "does not contain",
          "is more than",
          "is less than",
          "at least",
          "after",
          "before",
          "on"
        ],
        "description": "Exclude from T those types that are assignable to U"
      },
      "EventPropertyConditionAll": {
        "$ref": "#/components/schemas/Exclude_ConditionAll.ConditionDateRelative_"
      },
      "SegmentEventProperty": {
        "properties": {
          "uuid": {
            "type": "string"
          },
          "value": {},
          "condition": {
            "$ref": "#/components/schemas/EventPropertyConditionAll"
          },
          "field": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "field"
            ],
            "nullable": false
          }
        },
        "required": [
          "condition",
          "field",
          "type"
        ],
        "type": "object"
      },
      "ConditionNumberOnly": {
        "type": "string",
        "enum": [
          "is more than",
          "is less than",
          "at least"
        ]
      },
      "SegmentEventFrequencyCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "frequencyCondition"
            ],
            "nullable": false
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionNumberOnly"
          }
        },
        "required": [
          "type",
          "value",
          "condition"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ConditionDate": {
        "type": "string",
        "enum": [
          "after period",
          "before period",
          "on period",
          "after",
          "before",
          "on"
        ]
      },
      "SegmentEventRecencyCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "recencyCondition"
            ],
            "nullable": false
          },
          "value": {
            "anyOf": [
              {
                "type": "number",
                "format": "double"
              },
              {
                "type": "string"
              }
            ]
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionDate"
          }
        },
        "required": [
          "type",
          "value",
          "condition"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SegmentEventCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "event"
            ],
            "nullable": false
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionPerformed"
          },
          "systemConditions": {
            "$ref": "#/components/schemas/SegmentEventConditionGroup"
          },
          "propertiesConditions": {
            "$ref": "#/components/schemas/SegmentEventConditionGroup"
          },
          "frequencyCondition": {
            "$ref": "#/components/schemas/SegmentEventFrequencyCondition"
          },
          "recencyCondition": {
            "$ref": "#/components/schemas/SegmentEventRecencyCondition"
          }
        },
        "required": [
          "type",
          "condition",
          "systemConditions"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SegmentTagCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tag"
            ],
            "nullable": false
          },
          "value": {},
          "condition": {
            "$ref": "#/components/schemas/ConditionPerformed"
          }
        },
        "required": [
          "type",
          "value",
          "condition"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ConditionGeneric": {
        "type": "string",
        "enum": [
          "is",
          "is not",
          "is empty",
          "is not empty",
          "is any"
        ]
      },
      "ConditionText": {
        "type": "string",
        "enum": [
          "is",
          "is not",
          "is empty",
          "is not empty",
          "is any",
          "starts with",
          "does not start with",
          "ends with",
          "does not end with",
          "contains",
          "does not contain"
        ]
      },
      "ConditionNumber": {
        "type": "string",
        "enum": [
          "is",
          "is not",
          "is empty",
          "is not empty",
          "is any",
          "is more than",
          "is less than",
          "at least"
        ]
      },
      "ConditionAll": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ConditionGeneric"
          },
          {
            "$ref": "#/components/schemas/ConditionText"
          },
          {
            "$ref": "#/components/schemas/ConditionNumber"
          },
          {
            "$ref": "#/components/schemas/ConditionDate"
          }
        ]
      },
      "SegmentPropertyCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "field"
            ],
            "nullable": false
          },
          "field": {
            "type": "string"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionAll"
          },
          "value": {}
        },
        "required": [
          "type",
          "field",
          "condition"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ConditionNestedSegment": {
        "type": "string",
        "enum": [
          "in",
          "not in"
        ]
      },
      "SegmentNestedSegmentCondition": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "segment"
            ],
            "nullable": false
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionNestedSegment"
          }
        },
        "required": [
          "type",
          "value",
          "condition"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SegmentConditionGroup": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group"
            ],
            "nullable": false
          },
          "operator": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ]
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/SegmentCondition"
            },
            "type": "array"
          }
        },
        "required": [
          "type",
          "operator",
          "conditions"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SegmentCondition": {
        "allOf": [
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SegmentEventCondition"
              },
              {
                "$ref": "#/components/schemas/SegmentTagCondition"
              },
              {
                "$ref": "#/components/schemas/SegmentPropertyCondition"
              },
              {
                "$ref": "#/components/schemas/SegmentNestedSegmentCondition"
              },
              {
                "$ref": "#/components/schemas/SegmentConditionGroup"
              }
            ]
          },
          {
            "properties": {
              "uuid": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "Segment": {
        "properties": {
          "version": {
            "type": "number",
            "enum": [
              "1",
              "2"
            ]
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          },
          "conditions": {
            "$ref": "#/components/schemas/SegmentConditionGroup"
          },
          "accountId": {
            "type": "number",
            "format": "double"
          },
          "autoSegment": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          }
        },
        "required": [
          "version",
          "id",
          "name",
          "accountId",
          "conditions",
          "autoSegment",
          "color"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Partial_this_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "segmentAnonymousId": {
            "type": "string"
          },
          "enchargeAnonymousId": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "EndUserIdentifiers": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Encharge ID of the person. An UUID.\n\nAt least one of id/userId/email must be specified."
          },
          "userId": {
            "type": "string",
            "description": "UserID of the person.\n\nAt least one of id/userId/email must be specified."
          },
          "email": {
            "type": "string",
            "description": "Email of the person.\n\nAt least one of id/userId/email must be specified."
          }
        },
        "additionalProperties": {},
        "type": "object"
      }
    },
    "examples": {},
    "headers": {},
    "requestBodies": {},
    "responses": {},
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "The Encharge API uses OAuth 2 with the authorization code flow. \n\nGet for your OAuth credentials (Client ID and Client Secret) by filling out [this form](https://slavivanov1.typeform.com/to/I680YtLA).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.encharge.io/v1/oauth/authorize",
            "tokenUrl": "https://api.encharge.io/v1/oauth/token",
            "refreshUrl": "https://api.encharge.io/v1/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "paths": {
    "/event-subscriptions": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subscription": {
                      "properties": {
                        "id": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "subscription"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "eventType": {
                    "type": "string",
                    "description": "Event to trigger on"
                  },
                  "targetUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "eventType",
                  "targetUrl"
                ],
                "type": "object"
              }
            }
          }
        },
        "operationId": "CreateWebhook",
        "description": "Subscribe to events happening in Encharge.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": []
      }
    },
    "/people": {
      "delete": {
        "operationId": "ArchivePeople",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "description": "Archive or delete one or multiple people.\n\nArchiving is the preferred method of removing users in Encharge.\n\nAlternatively, you can delete a person and all their data for GDPR purposes.\n",
        "tags": [
          "People"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PeopleQuery"
          },
          {
            "name": "force",
            "description": "If set to `true`, will delete the person's data. This is useful for GDPR-compliant removal of user data.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetSpecificPeople",
        "description": "Retrive specific people in your account.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Sample description",
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/EndUser"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "users"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "People"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PeopleQuery"
          }
        ]
      },
      "post": {
        "operationId": "CreateUpdatePeople",
        "summary": "Create/Update People",
        "description": "Create or update people in Encharge.\n\nIf the people exist (identified by id/userId/email/another ID), they will be updated. Otherwise, people will be created.\n",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/EndUser"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "users"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "People"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Array of EndUser objects.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EndUser"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/info": {
      "get": {
        "operationId": "GetInfo",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "peopleCount": {},
                    "status": {},
                    "timezone": {},
                    "activeServices": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "site": {},
                    "name": {},
                    "accountId": {}
                  },
                  "required": [
                    "peopleCount",
                    "status",
                    "timezone",
                    "activeServices",
                    "site",
                    "name",
                    "accountId"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Get information about your account.",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": []
      }
    },
    "/event-subscriptions/{id}": {
      "delete": {
        "operationId": "DeleteWebhook",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "description": "Delete an existing event subscription.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "description": "Id of the event subscription.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/fields": {
      "get": {
        "operationId": "GetFields",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/IPersonField"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "items"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Get all Person Fields.",
        "tags": [
          "PersonFields"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": []
      },
      "post": {
        "operationId": "CreateFields",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/IPersonField"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "items"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Create Person Fields",
        "tags": [
          "PersonFields"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/IPersonField"
                },
                "type": "array"
              }
            }
          }
        }
      }
    },
    "/fields/{fieldName}": {
      "patch": {
        "operationId": "EditField",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "field": {
                      "$ref": "#/components/schemas/IPersonField"
                    }
                  },
                  "required": [
                    "field"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Modify Person Field",
        "tags": [
          "PersonFields"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fieldName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPersonField"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteField",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "description": "Delete Person Field",
        "tags": [
          "PersonFields"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fieldName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/segments": {
      "get": {
        "operationId": "GetSegments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "segments": {
                      "items": {
                        "$ref": "#/components/schemas/Segment"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "segments"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Get all dynamic Segments in your account.",
        "tags": [
          "Segments"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": []
      }
    },
    "/segments/{segmentId}/people": {
      "get": {
        "operationId": "GetPeopleInSegment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "people": {
                      "items": {
                        "$ref": "#/components/schemas/EndUser"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "people"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Get people in Segment.",
        "tags": [
          "Segments"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "description": "Id of the segment.",
            "in": "path",
            "name": "segmentId",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Number of people to retrieve.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Number of records to skip",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Person Fields to retrieve. See [Person Fields](#tag/PersonFields) for possible field names.",
            "in": "query",
            "name": "attributes",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ]
      }
    },
    "/tags": {
      "post": {
        "operationId": "AddTag",
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "description": "Add tag(s) to an existing user.",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "tag": {
                        "type": "string",
                        "description": "Tag(s) to add.\n\nTo add multiple tags, use a comma-separated list - \"tag1,tag2\""
                      }
                    },
                    "required": [
                      "tag"
                    ],
                    "type": "object"
                  },
                  {
                    "$ref": "#/components/schemas/EndUserIdentifiers"
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "RemoveTag",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "description": "Remove tag(s) from existing user.",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "tag": {
                        "type": "string",
                        "description": "Tag(s) to remove.\n\nTo remove multiple tags, use a comma-separated list - \"tag1,tag2\""
                      }
                    },
                    "required": [
                      "tag"
                    ],
                    "type": "object"
                  },
                  {
                    "$ref": "#/components/schemas/EndUserIdentifiers"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/people/unsubscribe": {
      "post": {
        "operationId": "UnsubscribePerson",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "description": "Unsubscribe a person to prevent them from receiving any more email.",
        "summary": "Unsubscribe a Person",
        "tags": [
          "People"
        ],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "description": "Email of the person to unsubscribe.\n\nAt least one of id/userId/email must be specified.",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "userId of the person to unsubscribe.\n\nAt least one of id/userId/email must be specified.",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Encharge ID of the person to unsubscribe.\n\nAt least one of id/userId/email must be specified.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.encharge.io/v1"
    }
  ]
}