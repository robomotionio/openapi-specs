{
  "openapi": "3.0.0",
  "x-samples-languages": [
    "curl",
    "node",
    "php",
    "go",
    "ruby",
    "python",
    "java",
    "csharp"
  ],
  "info": {
    "version": "3.0.0",
    "title": "SendinBlue API",
    "description": "SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :\n  - Manage your campaigns and get the statistics\n  - Manage your contacts\n  - Send transactional Emails and SMS\n  - and much more...\n\nYou can download our wrappers at https://github.com/orgs/sendinblue\n\n**Possible responses**\n  | Code | Message |\n  | :-------------: | ------------- |\n  | 200  | OK. Successful Request  |\n  | 201  | OK. Successful Creation |\n  | 202  | OK. Request accepted |\n  | 204  | OK. Successful Update/Deletion  |\n  | 400  | Error. Bad Request  |\n  | 401  | Error. Authentication Needed  |\n  | 402  | Error. Not enough credit, plan upgrade needed  |\n  | 403  | Error. Permission denied  |\n  | 404  | Error. Object does not exist |\n  | 405  | Error. Method not allowed  |\n  | 406  | Error. Not Acceptable  |\n",
    "contact": {
      "name": "Sendinblue Support",
      "email": "contact@sendinblue.com",
      "url": "https://account.sendinblue.com/support"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/emailCampaigns": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Return all your created email campaigns",
        "operationId": "getEmailCampaigns",
        "parameters": [
          {
            "name": "type",
            "description": "Filter on the type of the campaigns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "classic",
                "trigger"
              ]
            }
          },
          {
            "name": "status",
            "description": "Filter on the status of the campaign",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "suspended",
                "archive",
                "sent",
                "queued",
                "draft",
                "inProcess"
              ]
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "default": 500
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document in the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email campaigns informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getEmailCampaigns"
                }
              },
              "applications/json": {
                "examples": {
                  "response": {
                    "value": {
                      "campaigns": [
                        {
                          "id": 12,
                          "name": "EN - Sales Summer 2017",
                          "subject": "20% OFF for 2017 Summer Sales",
                          "type": "classic",
                          "status": "sent",
                          "scheduledAt": "2017-06-01T12:30:00Z",
                          "testSent": true,
                          "header": "[DEFAULT_HEADER]",
                          "footer": "[DEFAULT_FOOTER]",
                          "sender": {
                            "email": "marketing@mycompany.com",
                            "name": "Marketing",
                            "id": 26
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "{FNAME} {LNAME}",
                          "htmlContent": "This is my HTML Content",
                          "shareLink": "http://example.com/fhsgccc.html?t=9865448900",
                          "tag": "Newsletter",
                          "createdAt": "2017-05-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "inlineImageActivation": true,
                          "mirrorActive": true,
                          "recurring": false,
                          "recipients": {
                            "lists": [
                              5
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "globalStats": {
                              "uniqueClicks": 2300,
                              "clickers": 2665,
                              "complaints": 1,
                              "delivered": 19765,
                              "sent": 19887,
                              "softBounces": 100,
                              "hardBounces": 87,
                              "uniqueViews": 7779,
                              "trackableViews": 5661,
                              "unsubscriptions": 2,
                              "viewed": 8999
                            },
                            "campaignStats": [
                              {
                                "listId": 5,
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "trackableViews": 5661,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            ],
                            "mirrorClick": 120,
                            "remaining": 1000,
                            "linksStats": {
                              "http://myUrl1.domain.com": 80
                            },
                            "statsByDomain": {
                              "yahoo.com": {
                                "uniqueClicks": 298,
                                "clickers": 533,
                                "complaints": 0,
                                "sent": 25601,
                                "softBounces": 5,
                                "hardBounces": 0,
                                "uniqueViews": 3527,
                                "unsubscriptions": 17,
                                "viewed": 5255,
                                "delivered": 25596
                              },
                              "hotmail.co.uk": {
                                "uniqueClicks": 1970,
                                "clickers": 2720,
                                "complaints": 5,
                                "sent": 117055,
                                "softBounces": 111,
                                "hardBounces": 0,
                                "uniqueViews": 21111,
                                "unsubscriptions": 105,
                                "viewed": 35251,
                                "delivered": 117056
                              }
                            }
                          }
                        },
                        {
                          "id": 22,
                          "name": "Weekly - 1",
                          "subject": "Week 1 - Newsletter",
                          "type": "Classic",
                          "status": "draft",
                          "scheduledAt": "",
                          "testSent": false,
                          "header": "[DEFAULT_HEADER]",
                          "footer": "[DEFAULT_FOOTER]",
                          "sender": {
                            "email": "newsletter@mycompany.com",
                            "name": "Newsletter",
                            "id": 26
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "{FNAME} {LNAME}",
                          "htmlContent": "This is my HTML Content",
                          "shareLink": "http://example.com/fhsgccc.html?t=9865448900",
                          "tag": "Newsletter",
                          "createdAt": "2017-05-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "inlineImageActivation": true,
                          "mirrorActive": true,
                          "recurring": false,
                          "recipients": {
                            "lists": [
                              10
                            ],
                            "exclusionLists": [
                              45
                            ]
                          },
                          "statistics": {
                            "globalStats": {
                              "uniqueClicks": 2300,
                              "clickers": 2665,
                              "complaints": 1,
                              "delivered": 19765,
                              "sent": 19887,
                              "softBounces": 100,
                              "hardBounces": 87,
                              "uniqueViews": 7779,
                              "trackableViews": 5661,
                              "unsubscriptions": 2,
                              "viewed": 8999
                            },
                            "campaignStats": [
                              {
                                "listId": 10,
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "trackableViews": 5661,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            ],
                            "mirrorClick": 120,
                            "remaining": 1000,
                            "linksStats": {
                              "http://myUrl1.domain.com": {
                                "nbClick": 80
                              },
                              "http://myUrl2.domain.com": {
                                "nbClick": 80
                              },
                              "http://myUrl3.domain.com": {
                                "nbClick": 80
                              }
                            },
                            "statsByDomain": {
                              "gmail": {
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              },
                              "aol": {
                                "uniqueClicks": 2300,
                                "clickers": 2665,
                                "complaints": 1,
                                "delivered": 19765,
                                "sent": 19887,
                                "softBounces": 100,
                                "hardBounces": 87,
                                "uniqueViews": 7779,
                                "unsubscriptions": 2,
                                "viewed": 8999,
                                "deferred": 30
                              }
                            }
                          }
                        }
                      ],
                      "count": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Create an email campaign",
        "operationId": "createEmailCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEmailCampaign"
              }
            }
          },
          "description": "Values to create a campaign",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Email campaign created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Get an email campaign report",
        "operationId": "getEmailCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email campaign informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getEmailCampaign"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 22,
                      "name": "Weekly - 1",
                      "subject": "Week 1 - Newsletter",
                      "type": "classic",
                      "status": "draft",
                      "scheduledAt": "2017-09-22T12:30:00Z",
                      "testSent": false,
                      "header": "[DEFAULT_HEADER]",
                      "footer": "[DEFAULT_FOOTER]",
                      "sender": {
                        "email": "newsletter@mycompany.com",
                        "name": "Newsletter",
                        "id": 26
                      },
                      "replyTo": "replyto@domain.com",
                      "toField": "{FNAME} {LNAME}",
                      "htmlContent": "This is my HTML Content",
                      "shareLink": "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900",
                      "tag": "Newsletter",
                      "createdAt": "2017-05-01T12:30:00Z",
                      "modifiedAt": "2017-05-01T12:30:00Z",
                      "inlineImageActivation": true,
                      "mirrorActive": true,
                      "recurring": false,
                      "recipients": {
                        "lists": [
                          22
                        ],
                        "exclusionLists": [
                          45
                        ]
                      },
                      "statistics": {
                        "globalStats": {
                          "uniqueClicks": 2300,
                          "clickers": 2665,
                          "complaints": 1,
                          "delivered": 19765,
                          "sent": 19887,
                          "softBounces": 100,
                          "hardBounces": 87,
                          "uniqueViews": 7779,
                          "trackableViews": 5661,
                          "unsubscriptions": 2,
                          "viewed": 8999
                        },
                        "campaignStats": [
                          {
                            "listId": 22,
                            "uniqueClicks": 2300,
                            "clickers": 2665,
                            "complaints": 1,
                            "delivered": 19765,
                            "sent": 19887,
                            "softBounces": 100,
                            "hardBounces": 87,
                            "uniqueViews": 7779,
                            "trackableViews": 5661,
                            "unsubscriptions": 2,
                            "viewed": 8999,
                            "deferred": 30
                          }
                        ],
                        "mirrorClick": 120,
                        "remaining": 1000,
                        "linksStats": {
                          "http://myUrl1.domain.com": {
                            "nbClick": 80
                          },
                          "http://myUrl2.domain.com": {
                            "nbClick": 80
                          },
                          "http://myUrl3.domain.com": {
                            "nbClick": 80
                          }
                        },
                        "statsByDomain": {
                          "gmail": {
                            "uniqueClicks": 2300,
                            "clickers": 2665,
                            "complaints": 1,
                            "delivered": 19765,
                            "sent": 19887,
                            "softBounces": 100,
                            "hardBounces": 87,
                            "uniqueViews": 7779,
                            "unsubscriptions": 2,
                            "viewed": 8999,
                            "deferred": 30
                          }
                        },
                        "statsByDevice": {
                          "desktop": {
                            "mac": {
                              "clickers": 1,
                              "uniqueClicks": 0,
                              "viewed": 2,
                              "uniqueViews": 1
                            }
                          },
                          "mobile": {
                            "androidMobile": {
                              "clickers": 1,
                              "uniqueClicks": 0,
                              "viewed": 1,
                              "uniqueViews": 0
                            },
                            "iPhone": {
                              "clickers": 1,
                              "uniqueClicks": 0,
                              "viewed": 2,
                              "uniqueViews": 0
                            }
                          }
                        },
                        "statsByBrowser": {
                          "thunderbird": {
                            "clickers": 1,
                            "uniqueClicks": 0,
                            "viewed": 1,
                            "uniqueViews": 0
                          },
                          "safari": {
                            "clickers": 1,
                            "uniqueClicks": 0,
                            "viewed": 1,
                            "uniqueViews": 0
                          },
                          "internetExplorer": {
                            "clickers": 0,
                            "uniqueClicks": 0,
                            "viewed": 1,
                            "uniqueViews": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Update an email campaign",
        "operationId": "updateEmailCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateEmailCampaign"
              }
            }
          },
          "description": "Values to update a campaign",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Email Campaign has been updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Delete an email campaign",
        "operationId": "deleteEmailCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email campaign has been deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/sendNow": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Send an email campaign immediately, based on campaignId",
        "operationId": "sendEmailCampaignNow",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email campaign has been scheduled"
          },
          "400": {
            "description": "Campaign could not be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "402": {
            "description": "You don't have enough credit to send your campaign. Please update your plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/sendTest": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Send an email campaign to your test list",
        "operationId": "sendTestEmail",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTestEmail"
        },
        "responses": {
          "204": {
            "description": "Test email has been sent successfully to all recipients"
          },
          "400": {
            "description": "Test email could not be sent to the following email addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSendFailed"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/status": {
      "put": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Update an email campaign status",
        "operationId": "updateCampaignStatus",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCampaignStatus"
              }
            }
          },
          "description": "Status of the campaign",
          "required": true
        },
        "responses": {
          "204": {
            "description": "The campaign status has been updated successfully"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/sendReport": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Send the report of a campaign",
        "description": "A PDF will be sent to the specified email addresses",
        "operationId": "sendReport",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/sendReport"
        },
        "responses": {
          "204": {
            "description": "Report has been successfully sent to the defined recipients"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/abTestCampaignResult": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Get an A/B test email campaign results",
        "description": "Obtain winning version of an A/B test email campaign",
        "operationId": "getAbTestCampaignResult",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the A/B test campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A/B test email campaign Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/abTestCampaignResult"
                },
                "examples": {
                  "response": {
                    "value": {
                      "winningCriteria": "Click",
                      "statistics": {
                        "openers": {
                          "Version A": "20%",
                          "Version B": "100%"
                        },
                        "clicks": {
                          "Version A": "0%",
                          "Version B": "50%"
                        },
                        "unsubscribed": {
                          "Version A": "20%",
                          "Version B": "0%"
                        },
                        "softBounces": {
                          "Version A": "0%",
                          "Version B": "0%"
                        },
                        "hardBounces": {
                          "Version A": "0%",
                          "Version B": "0%"
                        },
                        "complaints": {
                          "Version A": "0%",
                          "Version B": "0%"
                        }
                      },
                      "winningVersion": "B",
                      "openRate": "100%",
                      "ClickRate": "50%",
                      "winningVersionRate": "0%",
                      "clickedLinks": {
                        "Version A": [
                          {
                            "link": "http://www.google.com",
                            "clicksCount": 0,
                            "clickRate": "0%"
                          },
                          {
                            "link": "http://www.youtube.com",
                            "clicksCount": 0,
                            "clickRate": "0%"
                          }
                        ],
                        "Version B": [
                          {
                            "link": "http://www.github.com",
                            "clicksCount": 2,
                            "clickRate": "40%"
                          },
                          {
                            "link": "http://www.stackoverflow.com",
                            "clicksCount": 3,
                            "clickRate": "60%"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "A/B test Email Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/sharedUrl": {
      "get": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Get a shared template url",
        "description": "Get a unique URL to share & import an email template from one Sendinblue account to another.",
        "operationId": "getSharedTemplateUrl",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign or template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared template URL information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSharedTemplateUrl"
                },
                "examples": {
                  "response": {
                    "value": {
                      "sharedUrl": "https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign/Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "405": {
            "description": "Only email campaigns or templates are allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/{campaignId}/exportRecipients": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Export the recipients of an email campaign",
        "operationId": "emailExportRecipients",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emailExportRecipients"
              }
            }
          },
          "description": "Values to send for a recipient export request"
        },
        "responses": {
          "202": {
            "description": "Recipient export request has been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdProcessId"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/emailCampaigns/images": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Upload an image to your account's image gallery",
        "operationId": "uploadImageToGallery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/uploadImageToGallery"
              }
            }
          },
          "description": "Parameters to upload an image",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Image successfully uploaded"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/email": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Send a transactional email",
        "operationId": "sendTransacEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendSmtpEmail"
              }
            }
          },
          "description": "Values to send a transactional email",
          "required": true
        },
        "responses": {
          "201": {
            "description": "transactional email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSmtpEmail"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/emails": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get the list of transactional emails on the basis of allowed filters",
        "description": "This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.",
        "operationId": "getTransacEmailsList",
        "parameters": [
          {
            "name": "email",
            "description": "Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "description": "Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "messageId",
            "description": "Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactional emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransacEmailsList"
                },
                "examples": {
                  "response": {
                    "value": {
                      "transactionalEmails": [
                        {
                          "email": "abc@xyz.com",
                          "subject": "summer camp",
                          "templateId": 15,
                          "messageId": "<201798300811.5787683@relay.domain.com>",
                          "uuid": "5a78c-209ok98262910-std2341",
                          "date": "2019-05-25T11:53:26Z"
                        },
                        {
                          "email": "test@test.com",
                          "subject": "details verification",
                          "templateId": 15,
                          "messageId": "<201798300811.5700093@relay.domain.com>",
                          "uuid": "5a78c-209ok98262910-s99a341",
                          "date": "2019-05-25T07:28:11Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/emails/{uuid}": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get the personalized content of a sent transactional email",
        "operationId": "getTransacEmailContent",
        "parameters": [
          {
            "name": "uuid",
            "description": "Unique id of the transactional email that has been sent to a particular contact",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transactional email content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransacEmailContent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "email": "abc@example.com",
                      "subject": "Summer Camps",
                      "templateId": 12,
                      "date": "2016-02-25T11:53:26Z",
                      "events": [
                        {
                          "name": "sent",
                          "time": "2016-02-25T11:53:26Z"
                        },
                        {
                          "name": "delivered",
                          "time": "2016-02-25T11:55:26Z"
                        },
                        {
                          "name": "opened",
                          "time": "2016-02-26T09:53:26Z"
                        }
                      ],
                      "body": "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This is the actual html content sent</p> </body> </html>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smtp/log/{messageId}": {
      "delete": {
        "tags": [
          "SMTP"
        ],
        "summary": "Delete an SMTP transactional log",
        "parameters": [
          {
            "name": "messageId",
            "description": "MessageId of the transactional log to delete",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Transactional Logs deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Message ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/templates": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get the list of email templates",
        "operationId": "getSmtpTemplates",
        "parameters": [
          {
            "name": "templateStatus",
            "description": "Filter on the status of the template. Active = true, inactive = false",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "description": "Number of documents returned per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "default": 50
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document in the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "transactional email templates informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSmtpTemplates"
                },
                "examples": {
                  "response": {
                    "value": {
                      "count": 2,
                      "templates": [
                        {
                          "id": 5,
                          "name": "ChristomasTimeTemplate",
                          "subject": "Merry Christmas",
                          "isActive": false,
                          "testSent": false,
                          "sender": {
                            "name": "John",
                            "email": "john.smith@example.com",
                            "id": 23
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "",
                          "tag": "Festival",
                          "htmlContent": "HTML CONTENT 1",
                          "createdAt": "2016-02-24T14:44:24Z",
                          "modifiedAt": "2016-02-24T15:37:11Z"
                        },
                        {
                          "id": 12,
                          "name": "SummerSales2017Template",
                          "subject": "Enjoy our summer Sales !",
                          "isActive": true,
                          "testSent": false,
                          "sender": {
                            "name": "John",
                            "email": "john.smith@example.com",
                            "id": 23
                          },
                          "replyTo": "replyto@domain.com",
                          "toField": "",
                          "tag": "Summer",
                          "htmlContent": "HTML CONTENT 2",
                          "createdAt": "2016-02-25T11:53:26Z",
                          "modifiedAt": "2016-02-25T11:53:26Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Create an email template",
        "operationId": "createSmtpTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSmtpTemplate"
              }
            }
          },
          "description": "values to update in transactional email template",
          "required": true
        },
        "responses": {
          "201": {
            "description": "transactional email template created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/templates/{templateId}": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Returns the template information",
        "operationId": "getSmtpTemplate",
        "parameters": [
          {
            "name": "templateId",
            "description": "id of the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email template informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSmtpTemplateOverview"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 33,
                      "name": "OrderConfirmation",
                      "subject": "Order Confirmation : Thanks for your Purchase !",
                      "isActive": true,
                      "testSent": false,
                      "sender": {
                        "name": "John",
                        "email": "john.smith@example.com",
                        "id": 26
                      },
                      "replyTo": "replyto@domain.com",
                      "toField": "",
                      "tag": "",
                      "htmlContent": "HTML CONTENT 4",
                      "createdAt": "2016-02-25T11:53:26Z",
                      "modifiedAt": "2016-02-25T11:53:26Z",
                      "doiTemplate": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SMTP"
        ],
        "summary": "Update an email template",
        "operationId": "updateSmtpTemplate",
        "parameters": [
          {
            "name": "templateId",
            "description": "id of the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSmtpTemplate"
              }
            }
          },
          "description": "values to update in transactional email template",
          "required": true
        },
        "responses": {
          "204": {
            "description": "transactional email template updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SMTP"
        ],
        "summary": "Delete an inactive email template",
        "operationId": "deleteSmtpTemplate",
        "parameters": [
          {
            "name": "templateId",
            "description": "id of the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inactive transactional email template has been deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/templates/{templateId}/sendTest": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Send a template to your test list",
        "operationId": "sendTestTemplate",
        "parameters": [
          {
            "name": "templateId",
            "description": "Id of the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTestEmail"
        },
        "responses": {
          "204": {
            "description": "Test email has been sent successfully to all recipients"
          },
          "400": {
            "description": "Test email could not be sent to the following email addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSendFailed"
                }
              }
            }
          },
          "404": {
            "description": "Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/statistics/aggregatedReport": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get your transactional email activity aggregated over a period of time",
        "operationId": "getAggregatedSmtpReport",
        "parameters": [
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "description": "Tag of the emails",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAggregatedReport"
                },
                "examples": {
                  "response": {
                    "value": {
                      "range": "2016-09-08|2017-04-28",
                      "requests": 19887,
                      "delivered": 18996,
                      "hardBounces": 234,
                      "softBounces": 1533,
                      "clicks": 9987,
                      "uniqueClicks": 8766,
                      "opens": 17654,
                      "uniqueOpens": 13688,
                      "spamReports": 1,
                      "blocked": 2,
                      "invalid": 0,
                      "unsubscribed": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/statistics/reports": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get your transactional email activity aggregated per day",
        "operationId": "getSmtpReport",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents returned per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 30,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document on the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "description": "Tag of the emails",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getReports"
                },
                "examples": {
                  "response": {
                    "value": {
                      "reports": [
                        {
                          "date": "2017-04-30",
                          "requests": 10756,
                          "delivered": 10103,
                          "hardBounces": 21,
                          "softBounces": 137,
                          "clicks": 1026,
                          "uniqueClicks": 720,
                          "opens": 5091,
                          "uniqueOpens": 2318,
                          "spamReports": 0,
                          "blocked": 519,
                          "invalid": 1,
                          "unsubscribed": 0
                        },
                        {
                          "date": "2017-05-01",
                          "requests": 18812,
                          "delivered": 17499,
                          "hardBounces": 34,
                          "softBounces": 254,
                          "clicks": 1514,
                          "uniqueClicks": 1090,
                          "opens": 10089,
                          "uniqueOpens": 4393,
                          "spamReports": 0,
                          "blocked": 920,
                          "invalid": 2,
                          "unsubscribed": 3
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/statistics/events": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get all your transactional email activity (unaggregated events)",
        "operationId": "getEmailEventReport",
        "parameters": [
          {
            "name": "limit",
            "description": "Number limitation for the result returned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "description": "Beginning point in the list to retrieve from.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "email",
            "description": "Filter the report for a specific email addresses",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "event",
            "description": "Filter the report for a specific event type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bounces",
                "hardBounces",
                "softBounces",
                "delivered",
                "spam",
                "requests",
                "opened",
                "clicks",
                "invalid",
                "deferred",
                "blocked",
                "unsubscribed"
              ]
            }
          },
          {
            "name": "tags",
            "description": "Filter the report for tags (serialized and urlencoded array)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "description": "Filter on a specific message id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "description": "Filter on a specific template id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email events report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getEmailEventReport"
                },
                "examples": {
                  "response": {
                    "value": {
                      "events": [
                        {
                          "email": "john.smith@example.com",
                          "date": "2017-03-12T12:30:00Z",
                          "messageId": "<201798300811.5787683@example.domain.com>",
                          "event": "deferred",
                          "reason": "Error connection timeout",
                          "tag": "OrderConfirmation",
                          "from": "john@example.com"
                        },
                        {
                          "email": "john.smith@example.com",
                          "date": "2017-03-13T16:30:00Z",
                          "messageId": "<201798300811.5787683@example.domain.com>",
                          "event": "delivered",
                          "tag": "OrderConfirmation",
                          "from": "john@example.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/blockedContacts/{email}": {
      "delete": {
        "tags": [
          "SMTP"
        ],
        "summary": "Unblock or resubscribe a transactional contact",
        "parameters": [
          {
            "name": "email",
            "description": "contact email (urlencoded) to unblock.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Contact unblocked"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/blockedContacts": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get the list of blocked or unsubscribed transactional contacts",
        "operationId": "getTransacBlockedContacts",
        "parameters": [
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Number of documents returned per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document on the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "senders",
            "description": "Comma separated list of emails of the senders from which contacts are blocked or unsubscribed",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of blocked or unsubscribed transactional contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransacBlockedContacts"
                },
                "examples": {
                  "response": {
                    "value": {
                      "contacts": [
                        {
                          "email": "abc@xyz.com",
                          "senderEmail": "ez312@gmal.com",
                          "reason": {
                            "message": "Admin blocked",
                            "code": "adminBlocked"
                          },
                          "blockedAt": "2017-05-01T12:30:00Z"
                        }
                      ],
                      "count": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/blockedDomains": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Get the list of blocked domains",
        "description": "Get the list of blocked domains",
        "operationId": "getBlockedDomains",
        "responses": {
          "200": {
            "description": "List of blocked domains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockedDomains"
                },
                "examples": {
                  "response": {
                    "value": {
                      "domains": [
                        "example.com",
                        "testdomain.com"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Add a new domain to the list of blocked domains",
        "description": "Blocks a new domain in order to avoid messages being sent to the same",
        "operationId": "blockNewDomain",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blockDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Domain is successfully blocked"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/blockedDomains/{domain}": {
      "delete": {
        "tags": [
          "SMTP"
        ],
        "summary": "Unblock an existing domain from the list of blocked domains",
        "description": "Unblocks an existing domain from the list of blocked domains",
        "operationId": "deleteBlockedDomain",
        "parameters": [
          {
            "name": "domain",
            "description": "The name of the domain to be deleted",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Domain is successfully deleted from the list of blocked domains"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Domain not found"
          }
        }
      }
    },
    "/smtp/deleteHardbounces": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Delete hardbounces",
        "description": "Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)",
        "operationId": "deleteHardbounces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteHardbounces"
              }
            }
          },
          "description": "values to delete hardbounces"
        },
        "responses": {
          "204": {
            "description": "Hardbounces deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smtp/templates/{templateId}/send": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Send a template",
        "description": "This endpoint is deprecated. Prefer v3/smtp/email instead.",
        "operationId": "sendTemplate",
        "deprecated": true,
        "parameters": [
          {
            "name": "templateId",
            "description": "Id of the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendEmail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Email has been sent successfully to all recipients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendTemplateEmail"
                }
              }
            }
          },
          "400": {
            "description": "Email could not be sent to the following email addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSendFailed"
                }
              }
            }
          },
          "404": {
            "description": "Template ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all the contacts",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "default": 50
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "modifiedSince",
            "description": "Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All contacts listed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getContacts"
                },
                "examples": {
                  "response": {
                    "value": {
                      "contacts": [
                        {
                          "email": "contact1@example.com",
                          "id": 247,
                          "emailBlacklisted": true,
                          "smsBlacklisted": true,
                          "createdAt": "2017-05-01T17:05:03Z",
                          "modifiedAt": "2017-05-01T17:05:03Z",
                          "listIds": [
                            43,
                            58
                          ],
                          "attributes": {
                            "SMS": "33058407250",
                            "IDENTIFICATION": "1-3RHQ-259",
                            "CIV": "MS",
                            "LAST_NAME": "Brennon",
                            "FIRST_NAME": "Meg",
                            "DOB": "1986-05-02",
                            "ADDRESS": "1 5th avenue",
                            "ZIP_CODE": "44300",
                            "CITY": "New-York",
                            "ACTION_CODE": "17HH98CH"
                          }
                        },
                        {
                          "email": "33058407248@mailin-sms.com",
                          "id": 245,
                          "emailBlacklisted": true,
                          "smsBlacklisted": false,
                          "createdAt": "2017-05-01T17:05:03Z",
                          "modifiedAt": "2017-05-01T17:05:03Z",
                          "listIds": [
                            43,
                            61,
                            58
                          ],
                          "attributes": {
                            "SMS": "33058407248",
                            "IDENTIFICATION": "1-78JS-432",
                            "CIV": "MS",
                            "LAST_NAME": "Press",
                            "FIRST_NAME": "Sophia",
                            "DOB": "1980-09-11",
                            "ADDRESS": "5 Flower Street",
                            "ZIP_CODE": "44119",
                            "CITY": "Seattle",
                            "ACTION_CODE": "17HU765"
                          }
                        }
                      ],
                      "count": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createContact"
              }
            }
          },
          "description": "Values to create a contact",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUpdateContactModel"
                }
              }
            }
          },
          "204": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUpdateContactModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/doubleOptinConfirmation": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create Contact via DOI (Double-Opt-In) Flow",
        "operationId": "createDoiContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createDoiContact"
              }
            }
          },
          "description": "Values to create the Double opt-in (DOI) contact",
          "required": true
        },
        "responses": {
          "201": {
            "description": "DOI Contact created"
          },
          "204": {
            "description": "DOI Contact updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{email}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact's details",
        "operationId": "getContactInfo",
        "parameters": [
          {
            "name": "email",
            "description": "Email (urlencoded) of the contact OR its SMS attribute value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getExtendedContactDetails"
                },
                "examples": {
                  "response": {
                    "value": {
                      "email": "peggy.rain@example.com",
                      "id": 42,
                      "emailBlacklisted": false,
                      "smsBlacklisted": false,
                      "createdAt": "2017-05-02T16:40:31Z",
                      "modifiedAt": "2017-05-02T16:40:31Z",
                      "attributes": {
                        "FIRST_NAME": "Peggy",
                        "LAST_NAME": "Rain",
                        "SMS": "3087433387669",
                        "CIV": "1",
                        "DOB": "1986-04-13",
                        "ADDRESS": "987 5th avenue",
                        "ZIP_CODE": "87544",
                        "CITY": "New-York",
                        "AREA": "NY"
                      },
                      "listIds": [
                        40
                      ],
                      "statistics": {
                        "messagesSent": [
                          {
                            "campaignId": 21,
                            "eventTime": "2016-05-03T20:15:13Z"
                          },
                          {
                            "campaignId": 42,
                            "eventTime": "2016-10-17T10:30:01Z"
                          }
                        ],
                        "opened": [
                          {
                            "campaignId": 21,
                            "count": 2,
                            "eventTime": "2016-05-03T21:24:56Z",
                            "ip": "66.249.93.118"
                          },
                          {
                            "campaignId": 68,
                            "count": 1,
                            "eventTime": "2017-01-30T13:56:40Z",
                            "ip": "66.249.93.217"
                          }
                        ],
                        "clicked": [
                          {
                            "campaignId": 21,
                            "links": [
                              {
                                "count": 2,
                                "eventTime": "2016-05-03T21:25:01Z",
                                "ip": "66.249.93.118",
                                "url": "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact's email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "email",
            "description": "Email (urlencoded) of the contact",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateContact"
              }
            }
          },
          "description": "Values to update a contact",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Contact updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact's email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "email",
            "description": "Email (urlencoded) of the contact",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "405": {
            "description": "You're not allowed to delete registered email contact with SendinBlue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{email}/campaignStats": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get email campaigns' statistics for a contact",
        "operationId": "getContactStats",
        "parameters": [
          {
            "name": "email",
            "description": "Email address (urlencoded) of the contact",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact campaign statistics informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getContactCampaignStats"
                },
                "examples": {
                  "response": {
                    "value": {
                      "from": "sendermail@example.com",
                      "tags": [
                        "tag1",
                        "tag2"
                      ],
                      "messagesSent": [
                        {
                          "campaignId": 21,
                          "eventTime": "2016-05-03T20:15:13Z"
                        },
                        {
                          "campaignId": 42,
                          "eventTime": "2016-10-17T10:30:01Z"
                        },
                        {
                          "campaignId": 45,
                          "eventTime": "2016-11-09T11:45:02Z"
                        }
                      ],
                      "opened": [
                        {
                          "campaignId": 21,
                          "count": 2,
                          "eventTime": "2016-05-03T21:24:56Z",
                          "ip": "66.249.93.118"
                        },
                        {
                          "campaignId": 45,
                          "count": 1,
                          "eventTime": "2017-01-30T13:56:40Z",
                          "ip": "66.249.93.217"
                        }
                      ],
                      "clicked": [
                        {
                          "campaignId": 21,
                          "links": [
                            {
                              "count": 2,
                              "eventTime": "2016-05-03T21:25:01Z",
                              "ip": "66.249.93.118",
                              "url": "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Contact's email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/attributes": {
      "get": {
        "tags": [
          "Contacts",
          "Attributes"
        ],
        "summary": "List all attributes",
        "operationId": "getAttributes",
        "responses": {
          "200": {
            "description": "Attributes listed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributes"
                },
                "examples": {
                  "response": {
                    "value": {
                      "attributes": [
                        {
                          "name": "LASTNAME",
                          "category": "normal",
                          "type": "text"
                        },
                        {
                          "name": "FIRSTNAME",
                          "category": "normal",
                          "type": "text"
                        },
                        {
                          "name": "DOB",
                          "category": "normal",
                          "type": "date"
                        },
                        {
                          "name": "GENDER",
                          "category": "category",
                          "type": "text",
                          "enumeration": [
                            {
                              "value": 1,
                              "label": "Men"
                            },
                            {
                              "value": 2,
                              "label": "Women"
                            },
                            {
                              "value": 3,
                              "label": "Kid"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/attributes/{attributeCategory}/{attributeName}": {
      "post": {
        "tags": [
          "Contacts",
          "Attributes"
        ],
        "summary": "Create contact attribute",
        "operationId": "createAttribute",
        "parameters": [
          {
            "name": "attributeCategory",
            "description": "Category of the attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "normal",
                "transactional",
                "category",
                "calculated",
                "global"
              ]
            }
          },
          {
            "name": "attributeName",
            "description": "Name of the attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createAttribute"
              }
            }
          },
          "description": "Values to create an attribute",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Attribute created"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts",
          "Attributes"
        ],
        "summary": "Update contact attribute",
        "operationId": "updateAttribute",
        "parameters": [
          {
            "name": "attributeCategory",
            "description": "Category of the attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "category",
                "calculated",
                "global"
              ]
            }
          },
          {
            "name": "attributeName",
            "description": "Name of the existing attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateAttribute"
              }
            }
          },
          "description": "Values to update an attribute",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Attribute updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Attribute not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts",
          "Attributes"
        ],
        "summary": "Delete an attribute",
        "operationId": "deleteAttribute",
        "parameters": [
          {
            "name": "attributeCategory",
            "description": "Category of the attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "normal",
                "transactional",
                "category",
                "calculated",
                "global"
              ]
            }
          },
          {
            "name": "attributeName",
            "description": "Name of the existing attribute",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attribute deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Attribute not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/folders": {
      "get": {
        "tags": [
          "Contacts",
          "Folders"
        ],
        "summary": "Get all folders",
        "operationId": "getFolders",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folders informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFolders"
                },
                "examples": {
                  "response": {
                    "value": {
                      "folders": [
                        {
                          "id": 42,
                          "name": "Ninja_Form",
                          "totalBlacklisted": 98,
                          "totalSubscribers": 4567,
                          "uniqueSubscribers": 4665
                        },
                        {
                          "id": 29,
                          "name": "Prestashop",
                          "totalBlacklisted": 10,
                          "totalSubscribers": 6543,
                          "uniqueSubscribers": 6553
                        }
                      ],
                      "count": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts",
          "Folders"
        ],
        "summary": "Create a folder",
        "operationId": "createFolder",
        "requestBody": {
          "$ref": "#/components/requestBodies/createUpdateFolder"
        },
        "responses": {
          "201": {
            "description": "Folder created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/folders/{folderId}": {
      "get": {
        "tags": [
          "Contacts",
          "Folders"
        ],
        "summary": "Returns a folder's details",
        "operationId": "getFolder",
        "parameters": [
          {
            "name": "folderId",
            "description": "id of the folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFolder"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 1,
                      "name": "Client_Folder",
                      "totalBlacklisted": 987,
                      "totalSubscribers": 16778,
                      "uniqueSubscribers": 17765
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Folder ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts",
          "Folders"
        ],
        "summary": "Update a folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "name": "folderId",
            "description": "Id of the folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createUpdateFolder"
        },
        "responses": {
          "204": {
            "description": "Folder updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Folder ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts",
          "Folders"
        ],
        "summary": "Delete a folder (and all its lists)",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "name": "folderId",
            "description": "Id of the folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Folder deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Folder ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/folders/{folderId}/lists": {
      "get": {
        "tags": [
          "Contacts",
          "Folders",
          "Lists"
        ],
        "summary": "Get lists in a folder",
        "operationId": "getFolderLists",
        "parameters": [
          {
            "name": "folderId",
            "description": "Id of the folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder's Lists details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFolderLists"
                },
                "examples": {
                  "response": {
                    "value": {
                      "lists": [
                        {
                          "id": 46,
                          "name": "Reactiv",
                          "totalSubscribers": 7655,
                          "totalBlacklisted": 0
                        },
                        {
                          "id": 41,
                          "name": "NY_Area",
                          "totalSubscribers": 3654,
                          "totalBlacklisted": 23
                        },
                        {
                          "id": 22,
                          "name": "VIP_Customer",
                          "totalSubscribers": 8753,
                          "totalBlacklisted": 72
                        }
                      ],
                      "count": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Folder ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/lists": {
      "get": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Get all the lists",
        "operationId": "getLists",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getLists"
                },
                "examples": {
                  "response": {
                    "value": {
                      "lists": [
                        {
                          "id": 53,
                          "name": "Spanish_Speakers",
                          "totalSubscribers": 5432,
                          "totalBlacklisted": 65,
                          "folderId": 1
                        },
                        {
                          "id": 50,
                          "name": "Other",
                          "totalSubscribers": 10976,
                          "totalBlacklisted": 765,
                          "folderId": 2
                        }
                      ],
                      "count": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Create a list",
        "operationId": "createList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createList"
              }
            }
          },
          "description": "Values to create a list",
          "required": true
        },
        "responses": {
          "201": {
            "description": "List created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/lists/{listId}": {
      "get": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Get a list's details",
        "operationId": "getList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getExtendedList"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 12,
                      "name": "Newsletter_Weekly",
                      "totalSubscribers": 6533,
                      "totalBlacklisted": 63,
                      "folderId": 1,
                      "createdAt": "2016-02-26T11:56:08Z",
                      "campaignStats": [
                        {
                          "campaignId": 15,
                          "stats": {
                            "uniqueClicks": 701,
                            "clickers": 789,
                            "complaints": 0,
                            "delivered": 6632,
                            "sent": 6645,
                            "softBounces": 34,
                            "hardBounces": 4,
                            "uniqueViews": 3442,
                            "unsubscriptions": 4,
                            "viewed": 4322,
                            "deferred": 0
                          }
                        },
                        {
                          "campaignId": 45,
                          "stats": {
                            "uniqueClicks": 654,
                            "clickers": 788,
                            "complaints": 1,
                            "delivered": 4078,
                            "sent": 4334,
                            "softBounces": 18,
                            "hardBounces": 2,
                            "uniqueViews": 987,
                            "unsubscriptions": 4,
                            "viewed": 1555,
                            "deferred": 0
                          }
                        }
                      ],
                      "dynamicList": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Update a list",
        "operationId": "updateList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateList"
              }
            }
          },
          "description": "Values to update a list",
          "required": true
        },
        "responses": {
          "204": {
            "description": "List updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Delete a list",
        "operationId": "deleteList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "List deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/lists/{listId}/contacts": {
      "get": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Get contacts in a list",
        "operationId": "getContactsFromList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "modifiedSince",
            "description": "Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 500,
              "default": 50
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getContacts"
                },
                "examples": {
                  "response": {
                    "value": {
                      "contacts": [
                        {
                          "email": "alex.pain@example.com",
                          "id": 45,
                          "emailBlacklisted": false,
                          "smsBlacklisted": true,
                          "createdAt": "2017-05-12T12:30:00Z",
                          "modifiedAt": "2017-05-12T12:30:00Z",
                          "listIds": [
                            12,
                            9,
                            20
                          ],
                          "listUnsubscribed": [
                            1,
                            2
                          ],
                          "attributes": {
                            "LASTNAME": "Pain",
                            "FIRSTNAME": "Alex",
                            "DOB": "2010-12-31",
                            "GENDER": "Kid"
                          }
                        },
                        {
                          "email": "john.smith@example.com",
                          "id": 32,
                          "emailBlacklisted": true,
                          "smsBlacklisted": false,
                          "createdAt": "2017-05-12T12:30:00Z",
                          "modifiedAt": "2017-05-12T12:30:00Z",
                          "listIds": [
                            12
                          ],
                          "listUnsubscribed": [
                            1
                          ],
                          "attributes": {
                            "LASTNAME": "Smith",
                            "FIRSTNAME": "John",
                            "DOB": "1986-06-21",
                            "GENDER": "Men"
                          }
                        },
                        {
                          "email": "helen.rose@example.com",
                          "id": 65,
                          "emailBlacklisted": true,
                          "smsBlacklisted": false,
                          "createdAt": "2017-05-12T12:30:00Z",
                          "modifiedAt": "2017-05-12T12:30:00Z",
                          "listIds": [
                            12,
                            9,
                            20
                          ],
                          "listUnsubscribed": [
                            1
                          ],
                          "attributes": {
                            "LASTNAME": "Rose",
                            "FIRSTNAME": "Helen",
                            "DOB": "1988-11-02",
                            "GENDER": "Women",
                            "SMS": "3375599887766"
                          }
                        }
                      ],
                      "count": 17655
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/lists/{listId}/contacts/add": {
      "post": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Add existing contacts to a list",
        "operationId": "addContactToList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addContactToList"
              }
            }
          },
          "description": "Emails addresses of the contacts",
          "required": true
        },
        "responses": {
          "201": {
            "description": "All contacts have been added successfully to the list with details of failed ones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postContactInfo"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/lists/{listId}/contacts/remove": {
      "post": {
        "tags": [
          "Contacts",
          "Lists"
        ],
        "summary": "Delete a contact from a list",
        "operationId": "removeContactFromList",
        "parameters": [
          {
            "name": "listId",
            "description": "Id of the list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/removeContactFromList"
              }
            }
          },
          "description": "Emails adresses of the contact",
          "required": true
        },
        "responses": {
          "201": {
            "description": "All contacts have been removed successfully from the list with details of failed ones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postContactInfo"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "List ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/export": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Export contacts",
        "description": "It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.",
        "operationId": "requestContactExport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestContactExport"
              }
            }
          },
          "description": "Values to request a contact export",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Contact export request has been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdProcessId"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/import": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Import contacts",
        "description": "It returns the background process ID which on completion calls the notify URL that you have set in the input.",
        "operationId": "importContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestContactImport"
              }
            }
          },
          "description": "Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Contact import request has been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdProcessId"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns": {
      "get": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Returns the information for all your created SMS campaigns",
        "operationId": "getSmsCampaigns",
        "parameters": [
          {
            "name": "status",
            "description": "Status of campaign.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "suspended",
                "archive",
                "sent",
                "queued",
                "draft",
                "inProcess"
              ]
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "description": "Number limitation for the result returned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "default": 500
            }
          },
          {
            "name": "offset",
            "description": "Beginning point in the list to retrieve from.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SMS campaigns informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSmsCampaigns"
                },
                "examples": {
                  "response": {
                    "value": {
                      "campaigns": [
                        {
                          "id": 2,
                          "name": "PROMO CODE",
                          "status": "sent",
                          "content": "Visit our Store and get some discount !",
                          "scheduledAt": "2017-06-01T12:30:00Z",
                          "testSent": true,
                          "sender": "MyCompany",
                          "createdAt": "2017-06-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "sentDate": "2017-06-01T12:30:00Z",
                          "recipients": {
                            "lists": [
                              21
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "delivered": 2987,
                            "sent": 3000,
                            "processing": 0,
                            "softBounces": 3,
                            "hardBounces": 1,
                            "unsubscriptions": 3,
                            "answered": 2
                          }
                        },
                        {
                          "id": 10,
                          "name": "SUMMER SALE",
                          "status": "draft",
                          "content": "Summer Sale is starting tomorrow. Get extra 10% with this code:SUM17",
                          "scheduledAt": "2017-08-04T12:30:00Z",
                          "testSent": false,
                          "sender": "MyCompany",
                          "createdAt": "2017-06-01T12:30:00Z",
                          "modifiedAt": "2017-05-01T12:30:00Z",
                          "sentDate": "2017-06-01T12:30:00Z",
                          "recipients": {
                            "lists": [
                              21
                            ],
                            "exclusionLists": [
                              13
                            ]
                          },
                          "statistics": {
                            "delivered": 2987,
                            "sent": 3000,
                            "processing": 0,
                            "softBounces": 3,
                            "hardBounces": 1,
                            "unsubscriptions": 3,
                            "answered": 2
                          }
                        }
                      ],
                      "count": 12
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Creates an SMS campaign",
        "operationId": "createSmsCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSmsCampaign"
              }
            }
          },
          "description": "Values to create an SMS Campaign",
          "required": true
        },
        "responses": {
          "201": {
            "description": "SMS campaign created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}": {
      "get": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Get an SMS campaign",
        "operationId": "getSmsCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the SMS campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SMS campaign informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSmsCampaign"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 2,
                      "name": "PROMO CODE",
                      "status": "sent",
                      "content": "Visit our Store and get some discount !",
                      "scheduledAt": "2017-06-01T12:30:00Z",
                      "testSent": true,
                      "sender": "MyCompany",
                      "createdAt": "2017-06-01T12:30:00Z",
                      "modifiedAt": "2017-05-01T12:30:00Z",
                      "recipients": {
                        "lists": [
                          21
                        ],
                        "exclusionLists": [
                          13
                        ]
                      },
                      "statistics": {
                        "delivered": 2987,
                        "sent": 3000,
                        "processing": 0,
                        "softBounces": 3,
                        "hardBounces": 1,
                        "unsubscriptions": 3,
                        "answered": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Update an SMS campaign",
        "operationId": "updateSmsCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the SMS campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSmsCampaign"
              }
            }
          },
          "description": "Values to update an SMS Campaign",
          "required": true
        },
        "responses": {
          "204": {
            "description": "SMS campaign updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Delete an SMS campaign",
        "operationId": "deleteSmsCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the SMS campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SMS campaign has been deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}/sendNow": {
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Send your SMS campaign immediately",
        "operationId": "sendSmsCampaignNow",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SMS campaign has been scheduled"
          },
          "400": {
            "description": "SMS Campaign could not be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "402": {
            "description": "You don't have enough credit to send your campaign. Please update your plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}/status": {
      "put": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Update a campaign's status",
        "operationId": "updateSmsCampaignStatus",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCampaignStatus"
              }
            }
          },
          "description": "Status of the campaign.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "The campaign status has been updated successfully"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}/sendTest": {
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Send a test SMS campaign",
        "operationId": "sendTestSms",
        "parameters": [
          {
            "name": "campaignId",
            "description": "Id of the SMS campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendTestSms"
              }
            }
          },
          "description": "Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Test SMS has been sent successfully to the recipient"
          },
          "400": {
            "description": "Test SMS could not be sent to the following email addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSendSmsTestFailed"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}/exportRecipients": {
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Export an SMS campaign's recipients",
        "description": "It returns the background process ID which on completion calls the notify URL that you have set in the input.",
        "operationId": "requestSmsRecipientExport",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestSmsRecipientExport"
              }
            }
          },
          "description": "Values to send for a recipient export request"
        },
        "responses": {
          "202": {
            "description": "Recipient export request has been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createdProcessId"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/smsCampaigns/{campaignId}/sendReport": {
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Send an SMS campaign's report",
        "description": "Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.",
        "operationId": "sendSmsReport",
        "parameters": [
          {
            "name": "campaignId",
            "description": "id of the campaign",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/sendReport"
        },
        "responses": {
          "204": {
            "description": "Report has been successfully sent to the defined recipients"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Campaign ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/transactionalSMS/sms": {
      "post": {
        "tags": [
          "Transactional SMS"
        ],
        "summary": "Send SMS message to a mobile number",
        "operationId": "sendTransacSms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendTransacSms"
              }
            }
          },
          "description": "Values to send a transactional SMS",
          "required": true
        },
        "responses": {
          "201": {
            "description": "SMS has been sent successfully to the recipient",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendSms"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "402": {
            "description": "You don't have enough credit to send your SMS. Please update your plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/transactionalSMS/statistics/aggregatedReport": {
      "get": {
        "tags": [
          "Transactional SMS"
        ],
        "summary": "Get your SMS activity aggregated over a period of time",
        "operationId": "getTransacAggregatedSmsReport",
        "parameters": [
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with startDate and endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "description": "Filter on a tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated SMS report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransacAggregatedSmsReport"
                },
                "examples": {
                  "response": {
                    "value": {
                      "range": "2015-05-22|2017-11-29",
                      "requests": 54,
                      "delivered": 16,
                      "hardBounces": 5,
                      "softBounces": 26,
                      "blocked": 4,
                      "unsubscribed": 10,
                      "replied": 8,
                      "accepted": 6,
                      "rejected": 14
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/transactionalSMS/statistics/reports": {
      "get": {
        "tags": [
          "Transactional SMS"
        ],
        "summary": "Get your SMS activity aggregated per day",
        "operationId": "getTransacSmsReport",
        "parameters": [
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "description": "Filter on a tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated SMS report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransacSmsReport"
                },
                "examples": {
                  "response": {
                    "value": {
                      "reports": [
                        {
                          "date": "2017-04-30",
                          "requests": 10756,
                          "delivered": 10103,
                          "hardBounces": 21,
                          "softBounces": 137,
                          "blocked": 1026,
                          "unsubscribed": 720,
                          "replied": 5091,
                          "accepted": 2318,
                          "rejected": 0
                        },
                        {
                          "date": "2017-05-01",
                          "requests": 18812,
                          "delivered": 17499,
                          "hardBounces": 34,
                          "softBounces": 254,
                          "blocked": 1514,
                          "unsubscribed": 1090,
                          "replied": 10089,
                          "accepted": 4393,
                          "rejected": 0
                        },
                        {
                          "date": "2017-05-02",
                          "requests": 14321,
                          "delivered": 13427,
                          "hardBounces": 16,
                          "softBounces": 176,
                          "blocked": 1646,
                          "unsubscribed": 1170,
                          "replied": 11563,
                          "accepted": 4689,
                          "rejected": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/transactionalSMS/statistics/events": {
      "get": {
        "tags": [
          "Transactional SMS"
        ],
        "summary": "Get all your SMS activity (unaggregated events)",
        "operationId": "getSmsEvents",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "startDate",
            "description": "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "description": "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document of the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "days",
            "description": "Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "phoneNumber",
            "description": "Filter the report for a specific phone number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "description": "Filter the report for specific events",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bounces",
                "hardBounces",
                "softBounces",
                "delivered",
                "sent",
                "accepted",
                "unsubscription",
                "replies",
                "blocked"
              ]
            }
          },
          {
            "name": "tags",
            "description": "Filter the report for specific tags passed as a serialized urlencoded array",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of record creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sms events report informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSmsEventReport"
                },
                "examples": {
                  "response": {
                    "value": {
                      "events": [
                        {
                          "phoneNumber": "00911059469013",
                          "date": "2015-05-20T12:30:00Z",
                          "messageId": "1473139351170140",
                          "event": "sent",
                          "reason": "Recipient is currently unreachable",
                          "tag": "cabWaiting"
                        },
                        {
                          "phoneNumber": "00911059469013",
                          "date": "2015-05-20T16:30:00Z",
                          "messageId": "1473139351170140",
                          "event": "delivered",
                          "reason": "Recipient is currently unreachable",
                          "tag": "cabRequest"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/senders": {
      "get": {
        "tags": [
          "Senders"
        ],
        "summary": "Get the list of all your senders",
        "operationId": "getSenders",
        "parameters": [
          {
            "name": "ip",
            "description": "Filter your senders for a specific ip (available for dedicated IP usage only)",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "Filter your senders for a specific domain",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of senders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSendersList"
                },
                "examples": {
                  "response": {
                    "value": {
                      "senders": [
                        {
                          "id": 1,
                          "name": "Marketing",
                          "email": "marketing@mycompany.com",
                          "active": true,
                          "ips": [
                            {
                              "ip": "123.98.689.7",
                              "domain": "mycompany.com",
                              "weight": 100
                            }
                          ]
                        },
                        {
                          "id": 2,
                          "name": "Newsletter",
                          "email": "newsletter@mycompany.com",
                          "active": false,
                          "ips": [
                            {
                              "ip": "123.98.689.7",
                              "domain": "mycompany.com",
                              "weight": 50
                            },
                            {
                              "ip": "123.98.643.2",
                              "domain": "news.mycompany.com",
                              "weight": 50
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Senders"
        ],
        "summary": "Create a new sender",
        "operationId": "createSender",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSender"
              }
            }
          },
          "description": "sender's name"
        },
        "responses": {
          "201": {
            "description": "sender created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSenderModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/senders/{senderId}": {
      "put": {
        "tags": [
          "Senders"
        ],
        "summary": "Update a sender",
        "operationId": "updateSender",
        "parameters": [
          {
            "name": "senderId",
            "description": "Id of the sender",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSender"
              }
            }
          },
          "description": "sender's name"
        },
        "responses": {
          "204": {
            "description": "sender updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Sender ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Senders"
        ],
        "summary": "Delete a sender",
        "operationId": "deleteSender",
        "parameters": [
          {
            "name": "senderId",
            "description": "Id of the sender",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "sender deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Sender ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/senders/{senderId}/ips": {
      "get": {
        "tags": [
          "Senders"
        ],
        "summary": "Get all the dedicated IPs for a sender",
        "operationId": "getIpsFromSender",
        "parameters": [
          {
            "name": "senderId",
            "description": "Id of the sender",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of dedicated IPs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getIpsFromSender"
                },
                "examples": {
                  "response": {
                    "value": {
                      "ips": [
                        {
                          "id": 3,
                          "ip": "123.65.8.22",
                          "domain": "mailing.myshop.dom",
                          "weight": 40
                        },
                        {
                          "id": 5,
                          "ip": "123.43.21.3",
                          "domain": "newsletter.myshop.dom",
                          "weight": 60
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Sender ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/senders/ips": {
      "get": {
        "tags": [
          "Senders"
        ],
        "summary": "Get all the dedicated IPs for your account",
        "operationId": "getIps",
        "responses": {
          "200": {
            "description": "list of dedicated IPs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getIps"
                },
                "examples": {
                  "response": {
                    "value": {
                      "ips": [
                        {
                          "id": 3,
                          "ip": "67.145.89.3",
                          "active": true,
                          "domain": "mailing.myshop.com"
                        },
                        {
                          "id": 5,
                          "ip": "76.76.125.9",
                          "active": true,
                          "domain": "newsletter.myshop.com"
                        },
                        {
                          "id": 6,
                          "ip": "123.65.8.22",
                          "active": false,
                          "domain": "notifications.myshop.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "operationId": "createWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createWebhook"
              }
            }
          },
          "description": "Values to create a webhook",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all webhooks",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "name": "type",
            "description": "Filter on webhook type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "marketing",
                "transactional"
              ],
              "default": "transactional"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results in the ascending/descending order of webhook creation",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhooks informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getWebhooks"
                },
                "examples": {
                  "response": {
                    "value": {
                      "webhooks": [
                        {
                          "url": "https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1",
                          "id": 9864,
                          "description": "Webhook triggered on campaign openings",
                          "events": [
                            "opened"
                          ],
                          "type": "transac",
                          "createdAt": "2016-07-18T12:30:09Z",
                          "modifiedAt": "2016-07-18T16:00:50Z"
                        },
                        {
                          "url": "http://exmaple.domain.com/15kxxxxxn1",
                          "id": 22770,
                          "description": "Webhook triggered on campaign hard bounces",
                          "events": [
                            "hardBounces"
                          ],
                          "type": "marketing",
                          "createdAt": "2017-02-20T14:30:00Z",
                          "modifiedAt": "2017-02-20T19:00:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook details",
        "operationId": "getWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "description": "Id of the webhook",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getWebhook"
                },
                "examples": {
                  "response": {
                    "value": {
                      "url": "http://example.domain.com/1brxxxxxx5p1",
                      "id": 7287,
                      "description": "Webhook triggered on campaign openings and addition of lists",
                      "events": [
                        "listAdditions",
                        "opened"
                      ],
                      "type": "marketing",
                      "createdAt": "2016-06-07T09:10:10Z",
                      "modifiedAt": "2016-06-08T11:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Webhook ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "description": "Id of the webhook",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateWebhook"
              }
            }
          },
          "description": "Values to update a webhook",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Webhook updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Webhook ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "description": "Id of the webhook",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Webhook ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get the list of all children accounts",
        "operationId": "getResellerChilds",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of documents for child accounts information per page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 20,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Index of the first document in the page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of children",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getChildrenList"
                },
                "examples": {
                  "response": {
                    "value": {
                      "children": [
                        {
                          "email": "john.smith@example.com",
                          "firstName": "John",
                          "lastName": "Smith",
                          "companyName": "MyCompany",
                          "credits": {
                            "emailCredits": 98555,
                            "smsCredits": 87556
                          },
                          "statistics": {
                            "previousMonthTotalSent": 7654,
                            "currentMonthTotalSent": 4566,
                            "totalSent": 987554
                          },
                          "password": "abC0xxxxxx3jkL",
                          "ips": [
                            "176.2.39.4",
                            "231.43.21.7"
                          ],
                          "apiKeys": {
                            "v2": [
                              {
                                "name": "N˚2",
                                "key": "nOpxxxxxy7z"
                              }
                            ],
                            "v3": [
                              {
                                "name": "N˚3",
                                "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                              }
                            ]
                          },
                          "id": 187588
                        },
                        {
                          "email": "alex.pain@example.com",
                          "firstName": "Alex",
                          "lastName": "Pain",
                          "companyName": "MyStore",
                          "credits": {
                            "emailCredits": 2000,
                            "smsCredits": 0
                          },
                          "statistics": {
                            "previousMonthTotalSent": 654,
                            "currentMonthTotalSent": 300,
                            "totalSent": 6553
                          },
                          "password": "abC0xxxxx64kL",
                          "ips": [
                            "176.2.39.4",
                            "231.43.21.7"
                          ],
                          "apiKeys": {
                            "v2": [
                              {
                                "name": "N˚2",
                                "key": "nOpxxxxxy7z"
                              }
                            ],
                            "v3": [
                              {
                                "name": "N˚3",
                                "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                              }
                            ]
                          },
                          "id": 187669
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Creates a reseller child",
        "operationId": "createResellerChild",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createChild"
              }
            }
          },
          "description": "reseller child to add"
        },
        "responses": {
          "201": {
            "description": "child created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createReseller"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get a child account's details",
        "operationId": "getChildInfo",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information for the child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getChildInfo"
                },
                "examples": {
                  "response": {
                    "value": {
                      "email": "john.smith@example.com",
                      "firstName": "John",
                      "lastName": "Smith",
                      "companyName": "MyCompany",
                      "credits": {
                        "emailCredits": 98555,
                        "smsCredits": 87556
                      },
                      "statistics": {
                        "previousMonthTotalSent": 7654,
                        "currentMonthTotalSent": 4566,
                        "totalSent": 987554
                      },
                      "password": "abC0xxxxx3jkL",
                      "ips": [
                        "176.2.39.4",
                        "231.43.21.7"
                      ],
                      "apiKeys": {
                        "v2": [
                          {
                            "name": "N˚2",
                            "key": "nOpxxxxxy7z"
                          }
                        ],
                        "v3": [
                          {
                            "name": "N˚3",
                            "key": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reseller"
        ],
        "summary": "Update info of reseller's child based on the child identifier supplied",
        "operationId": "updateResellerChild",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateChild"
              }
            }
          },
          "description": "values to update in child profile",
          "required": true
        },
        "responses": {
          "204": {
            "description": "reseller's child updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reseller"
        ],
        "summary": "Delete a single reseller child based on the child identifier supplied",
        "operationId": "deleteResellerChild",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or child id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "child deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/accountStatus": {
      "put": {
        "tags": [
          "Reseller"
        ],
        "summary": "Update info of reseller's child account status based on the identifier supplied",
        "operationId": "updateChildAccountStatus",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateChildAccountStatus"
              }
            }
          },
          "description": "values to update in child account status",
          "required": true
        },
        "responses": {
          "204": {
            "description": "reseller's child account status updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/accountCreationStatus": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied",
        "operationId": "getChildAccountCreationStatus",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status of reseller's child account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getChildAccountCreationStatus"
                },
                "examples": {
                  "response": {
                    "value": {
                      "childAccountCreated": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/ips/associate": {
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Associate a dedicated IP to the child",
        "operationId": "associateIpToChild",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/manageIp"
              }
            }
          },
          "description": "IP to associate",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Dedicated IP is associated to the child"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/ips/dissociate": {
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Dissociate a dedicated IP to the child",
        "operationId": "dissociateIpFromChild",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/manageIp"
              }
            }
          },
          "description": "IP to dissociate",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Dedicated IP is dissociated from the child"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/credits/add": {
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Add Email and/or SMS credits to a specific child account",
        "operationId": "addCredits",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addCredits"
              }
            }
          },
          "description": "Values to post to add credit to a specific child account",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credits added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remainingCreditModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "child": {
                        "sms": 500,
                        "email": 2000
                      },
                      "reseller": {
                        "sms": 12900,
                        "email": 2000000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/credits/remove": {
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Remove Email and/or SMS credits from a specific child account",
        "operationId": "removeCredits",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/removeCredits"
              }
            }
          },
          "description": "Values to post to remove email or SMS credits from a specific child account",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credits removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remainingCreditModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "child": {
                        "sms": 500,
                        "email": 2000
                      },
                      "reseller": {
                        "sms": 12900,
                        "email": 2000000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/domains": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get all sender domains for a specific child account",
        "operationId": "getChildDomains",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sender domains of the child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getChildDomains"
                },
                "examples": {
                  "response": {
                    "value": [
                      {
                        "domain": "mycustomdomain.com",
                        "active": true
                      },
                      {
                        "domain": "mynewdomain.com",
                        "active": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Create a domain for a child account",
        "operationId": "createChildDomain",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addChildDomain"
              }
            }
          },
          "description": "Sender domain to add for a specific child account. This will not be displayed to the parent account.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Domain added"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/domains/{domainName}": {
      "put": {
        "tags": [
          "Reseller"
        ],
        "summary": "Update the sender domain of reseller's child based on the childIdentifier and domainName passed",
        "operationId": "updateChildDomain",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Pass the existing domain that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateChildDomain"
              }
            }
          },
          "description": "value to update for sender domain",
          "required": true
        },
        "responses": {
          "204": {
            "description": "reseller's child domain updated"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reseller"
        ],
        "summary": "Delete the sender domain of the reseller child based on the childIdentifier and domainName passed",
        "operationId": "deleteChildDomain",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Pass the existing domain that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "child domain deleted"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/reseller/children/{childIdentifier}/auth": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get session token to access Sendinblue (SSO)",
        "description": "It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]",
        "operationId": "getSsoToken",
        "parameters": [
          {
            "name": "childIdentifier",
            "in": "path",
            "description": "Either auth key or id of reseller's child",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSsoToken"
                },
                "examples": {
                  "response": {
                    "value": {
                      "token": "5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "403": {
            "description": "Current account is not a reseller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Child auth key or child id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get your account information, plan and credits details",
        "operationId": "getAccount",
        "responses": {
          "200": {
            "description": "account informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAccount"
                },
                "examples": {
                  "response": {
                    "value": {
                      "plan": [
                        {
                          "type": "payAsYouGo",
                          "credits": 5000,
                          "creditsType": "sendLimit"
                        },
                        {
                          "type": "subscription",
                          "credits": 39983,
                          "creditsType": "sendLimit",
                          "startDate": "2017-03-11",
                          "endDate": "2017-04-11"
                        },
                        {
                          "type": "sms",
                          "credits": 999.5360000000001,
                          "creditsType": "sendLimit"
                        }
                      ],
                      "relay": {
                        "enabled": true,
                        "data": {
                          "userName": "john.smith@example.com",
                          "relay": "smtp-relay.domain.com",
                          "port": 587
                        }
                      },
                      "marketingAutomation": {
                        "key": "kzfr5xxxxxxttuyo1",
                        "enabled": true
                      },
                      "email": "john.smith@example.com",
                      "firstName": "John",
                      "lastName": "Smith",
                      "companyName": "MyShop",
                      "address": {
                        "city": "New-York",
                        "street": "1677B 8th Avenue",
                        "zipCode": "7665",
                        "country": "USA"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes": {
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Return all the processes for your account",
        "operationId": "getProcesses",
        "parameters": [
          {
            "name": "limit",
            "description": "Number limitation for the result returned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "offset",
            "description": "Beginning point in the list to retrieve from.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "processes informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProcesses"
                },
                "examples": {
                  "response": {
                    "value": {
                      "processes": [
                        {
                          "id": 40,
                          "status": "completed",
                          "name": "TRANS-CALC"
                        },
                        {
                          "id": 43,
                          "status": "queued",
                          "name": "TRANS-GLOBAL-CALC"
                        },
                        {
                          "id": 194,
                          "status": "completed",
                          "name": "SEARCH_EXPORT_USERS",
                          "export_url": "<a href=\"https://export-url.com/upload/file-name.csv\" target=\"_blank\">filename.csv</a>"
                        }
                      ],
                      "count": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        }
      }
    },
    "/processes/{processId}": {
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Return the informations for a process",
        "operationId": "getProcess",
        "parameters": [
          {
            "name": "processId",
            "description": "Id of the process",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "process informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProcess"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 194,
                      "status": "completed",
                      "name": "SEARCH_EXPORT_USERS",
                      "export_url": "<a href=\"https://export-url.com/upload/file-name.csv\" target=\"_blank\">filename.csv</a>"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          },
          "404": {
            "description": "Process ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "invalid_parameter",
                      "message": "processId is invalid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "api-key": []
    }
  ],
  "servers": [
    {
      "url": "https://api.sendinblue.com/v3"
    }
  ],
  "components": {
    "requestBodies": {
      "sendTestEmail": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sendTestEmail"
            }
          }
        },
        "required": true
      },
      "sendReport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sendReport"
            }
          }
        },
        "description": "Values for send a report",
        "required": true
      },
      "createUpdateFolder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createUpdateFolder"
            }
          }
        },
        "description": "Name of the folder",
        "required": true
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "api-key",
        "description": "The API key should be passed in the request headers as `api-key` for authentication.",
        "in": "header"
      }
    },
    "schemas": {
      "getAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getExtendedClient"
          },
          {
            "type": "object",
            "required": [
              "plan",
              "relay"
            ],
            "properties": {
              "plan": {
                "description": "Information about your plans and credits",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "creditsType",
                    "credits"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Displays the plan type of the user",
                      "enum": [
                        "payAsYouGo",
                        "free",
                        "subscription",
                        "sms",
                        "reseller"
                      ],
                      "example": "subscription"
                    },
                    "creditsType": {
                      "type": "string",
                      "description": "This is the type of the credit, \"Send Limit\" is one of the possible types of credit of a user. \"Send Limit\" implies the total number of emails you can send to the subscribers in your account.",
                      "enum": [
                        "sendLimit"
                      ],
                      "example": "sendLimit"
                    },
                    "credits": {
                      "type": "number",
                      "format": "float",
                      "description": "Remaining credits of the user",
                      "example": 8755
                    },
                    "startDate": {
                      "description": "Date of the period from which the plan will start (only available for \"subscription\" and \"reseller\" plan type)",
                      "type": "string",
                      "format": "date",
                      "example": "2016-12-31"
                    },
                    "endDate": {
                      "description": "Date of the period from which the plan will end (only available for \"subscription\" and \"reseller\" plan type)",
                      "type": "string",
                      "format": "date",
                      "example": "2017-01-31"
                    },
                    "userLimit": {
                      "description": "Only in case of reseller account. It implies the total number of child accounts you can add to your account.",
                      "type": "integer",
                      "example": 10
                    }
                  }
                }
              },
              "relay": {
                "description": "Information about your transactional email account",
                "type": "object",
                "required": [
                  "enabled",
                  "data"
                ],
                "properties": {
                  "enabled": {
                    "description": "Status of your transactional email Account (true=Enabled, false=Disabled)",
                    "type": "boolean",
                    "example": true
                  },
                  "data": {
                    "type": "object",
                    "description": "Data regarding the transactional email account",
                    "required": [
                      "userName",
                      "relay",
                      "port"
                    ],
                    "properties": {
                      "userName": {
                        "description": "Email to use as login on transactional platform",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "relay": {
                        "description": "URL of the SMTP Relay",
                        "type": "string",
                        "example": "relay.domain.com"
                      },
                      "port": {
                        "description": "Port used for SMTP Relay",
                        "type": "integer",
                        "example": 125
                      }
                    }
                  }
                }
              },
              "marketingAutomation": {
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "key": {
                    "description": "Marketing Automation Tracker ID",
                    "type": "string",
                    "example": "iso05aopqych87ysy0jymf"
                  },
                  "enabled": {
                    "description": "Status of Marketing Automation Plateform activation for your account (true=enabled, false=disabled)",
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        ]
      },
      "getChildrenList": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "children": {
            "description": "Your children's account information",
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getChildInfo"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the child",
                      "type": "integer",
                      "format": "int64",
                      "example": 187588
                    }
                  }
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of child accounts",
            "example": 24
          }
        }
      },
      "getChildInfo": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/getClient"
          },
          {
            "type": "object",
            "required": [
              "password"
            ],
            "properties": {
              "credits": {
                "description": "Credits available for your child",
                "type": "object",
                "properties": {
                  "emailCredits": {
                    "description": "Email credits available for your child",
                    "type": "integer",
                    "format": "int64",
                    "example": 98555
                  },
                  "smsCredits": {
                    "description": "SMS credits available for your child",
                    "type": "integer",
                    "format": "int64",
                    "example": 87556
                  }
                }
              },
              "statistics": {
                "description": "Statistics about your child account activity",
                "type": "object",
                "properties": {
                  "previousMonthTotalSent": {
                    "description": "Overall emails sent for the previous month",
                    "type": "integer",
                    "format": "int64",
                    "example": 7654
                  },
                  "currentMonthTotalSent": {
                    "description": "Overall emails sent for current month",
                    "type": "integer",
                    "format": "int64",
                    "example": 4566
                  },
                  "totalSent": {
                    "description": "Overall emails sent for since the account exists",
                    "type": "integer",
                    "format": "int64",
                    "example": 987554
                  }
                }
              },
              "password": {
                "description": "The encrypted password of child account",
                "type": "string",
                "format": "password",
                "example": "abC01De2fGHI3jkL"
              },
              "ips": {
                "description": "IP(s) associated to a child account user",
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "IP(s) associated to the user",
                  "example": [
                    "17.321.333.54",
                    "20.90.76.213"
                  ]
                }
              },
              "apiKeys": {
                "description": "API Keys associated to child account",
                "type": "object",
                "required": [
                  "v2"
                ],
                "properties": {
                  "v2": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "key"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the key for version 2",
                          "type": "string",
                          "example": "N˚2"
                        },
                        "key": {
                          "description": "API Key for version 2",
                          "type": "string",
                          "example": "nOpxxxxxy7z"
                        }
                      }
                    }
                  },
                  "v3": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "key"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the key for version 3",
                          "type": "string",
                          "example": "N˚3"
                        },
                        "key": {
                          "description": "API Key for version 3",
                          "type": "string",
                          "example": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "getChildAccountCreationStatus": {
        "type": "object",
        "required": [
          "childAccountCreated"
        ],
        "properties": {
          "childAccountCreated": {
            "description": "Status of child account creation whether it is successfully created (exists) or not.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "getChildDomains": {
        "type": "array",
        "items": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/getChildDomain"
            }
          ]
        }
      },
      "getSsoToken": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Session token. It will remain valid for a short period of time only.",
            "type": "string",
            "example": "ede520dxxxxxxxxxxxx76d631fba2"
          }
        }
      },
      "getChildDomain": {
        "type": "object",
        "required": [
          "domain",
          "active"
        ],
        "properties": {
          "domain": {
            "description": "Sender domain",
            "type": "string",
            "example": "mycustomdomain.com"
          },
          "active": {
            "description": "indicates whether a domain is verified or not",
            "type": "boolean",
            "example": true
          }
        }
      },
      "getClient": {
        "type": "object",
        "required": [
          "email",
          "firstName",
          "lastName",
          "companyName"
        ],
        "properties": {
          "email": {
            "description": "Login Email",
            "type": "string",
            "format": "email",
            "example": "john.smith@example.com"
          },
          "firstName": {
            "description": "First Name",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Last Name",
            "type": "string",
            "example": "Smith"
          },
          "companyName": {
            "description": "Name of the company",
            "type": "string",
            "example": "MyCompany"
          }
        }
      },
      "getExtendedClient": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/getClient"
          },
          {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "Address informations",
                "type": "object",
                "required": [
                  "city",
                  "street",
                  "zipCode",
                  "country"
                ],
                "properties": {
                  "street": {
                    "description": "Street information",
                    "type": "string",
                    "example": "47 Harbour Street"
                  },
                  "city": {
                    "description": "City information",
                    "type": "string",
                    "example": "New-York"
                  },
                  "zipCode": {
                    "description": "Zip Code information",
                    "type": "string",
                    "example": "9867"
                  },
                  "country": {
                    "description": "Country information",
                    "type": "string",
                    "example": "United States of America"
                  }
                }
              }
            }
          }
        ]
      },
      "getSendersList": {
        "type": "object",
        "properties": {
          "senders": {
            "description": "List of the senders available in your account",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "email",
                "active"
              ],
              "properties": {
                "id": {
                  "description": "Id of the sender",
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "name": {
                  "description": "From Name associated to the sender",
                  "type": "string",
                  "example": "Marketing"
                },
                "email": {
                  "description": "From Email associated to the sender",
                  "type": "string",
                  "example": "marketing@mycompany.com"
                },
                "active": {
                  "description": "Status of sender (true=activated, false=deactivated)",
                  "type": "boolean",
                  "example": false
                },
                "ips": {
                  "description": "List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "ip",
                      "domain",
                      "weight"
                    ],
                    "properties": {
                      "ip": {
                        "description": "Dedicated IP available in your account",
                        "type": "string",
                        "example": "123.98.689.7"
                      },
                      "domain": {
                        "description": "Domain of the IP",
                        "type": "string",
                        "example": "mycompany.com"
                      },
                      "weight": {
                        "description": "Weight of the IP for this sender",
                        "type": "integer",
                        "format": "int64",
                        "example": 50
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createChild": {
        "type": "object",
        "required": [
          "email",
          "firstName",
          "lastName",
          "companyName",
          "password"
        ],
        "properties": {
          "email": {
            "description": "Email address to create the child account",
            "type": "string",
            "format": "email",
            "example": "josh.cruise@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "First name to use to create the child account",
            "example": "Josh"
          },
          "lastName": {
            "type": "string",
            "description": "Last name to use to create the child account",
            "example": "Cruise"
          },
          "companyName": {
            "type": "string",
            "description": "Company name to use to create the child account",
            "example": "Your Company"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for the child account to login",
            "example": "Pa55w0rd65"
          },
          "language": {
            "description": "Language of the child account",
            "enum": [
              "fr",
              "es",
              "pt",
              "it",
              "de",
              "en"
            ],
            "type": "string",
            "example": "en"
          }
        }
      },
      "createSender": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "From Name to use for the sender",
            "example": "Newsletter"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "From email to use for the sender. A verification email will be sent to this address.",
            "example": "newsletter@mycompany.com"
          },
          "ips": {
            "type": "array",
            "description": "Mandatory in case of dedicated IP, IPs to associate to the sender",
            "items": {
              "type": "object",
              "required": [
                "ip",
                "domain"
              ],
              "properties": {
                "ip": {
                  "description": "Dedicated IP available in your account",
                  "type": "string",
                  "example": "123.98.689.7"
                },
                "domain": {
                  "description": "Domain of the IP",
                  "type": "string",
                  "example": "mycompany.com"
                },
                "weight": {
                  "description": "Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.",
                  "type": "integer",
                  "format": "int64",
                  "maximum": 100,
                  "minimum": 1,
                  "example": 50
                }
              }
            }
          }
        }
      },
      "updateSender": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "From Name to update the sender",
            "example": "Newsletter"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "From Email to update the sender",
            "example": "newsletter@mycompany.com"
          },
          "ips": {
            "type": "array",
            "description": "Only in case of dedicated IP, IPs to associate to the sender. If passed, will replace all the existing IPs.",
            "items": {
              "type": "object",
              "required": [
                "ip",
                "domain"
              ],
              "properties": {
                "ip": {
                  "description": "Dedicated IP available in your account",
                  "type": "string",
                  "example": "123.98.689.7"
                },
                "domain": {
                  "description": "Domain of the IP",
                  "type": "string",
                  "example": "mycompany.com"
                },
                "weight": {
                  "description": "Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.",
                  "type": "integer",
                  "format": "int64",
                  "maximum": 100,
                  "minimum": 1,
                  "example": 50
                }
              }
            }
          }
        }
      },
      "updateChild": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "New Email address to update the child account",
            "example": "josh.cruise@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "New First name to use to update the child account",
            "example": "Josh"
          },
          "lastName": {
            "type": "string",
            "description": "New Last name to use to update the child account",
            "example": "Cruise"
          },
          "companyName": {
            "type": "string",
            "description": "New Company name to use to update the child account",
            "example": "Your Company"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "New password for the child account to login",
            "example": "Pa55w0rd65"
          }
        }
      },
      "updateChildAccountStatus": {
        "type": "object",
        "properties": {
          "transactionalEmail": {
            "description": "Status of Transactional Email Platform activation for your account (true=enabled, false=disabled)",
            "type": "boolean",
            "example": false
          },
          "transactionalSms": {
            "description": "Status of Transactional SMS Platform activation for your account (true=enabled, false=disabled)",
            "type": "boolean",
            "example": false
          },
          "marketingAutomation": {
            "description": "Status of Marketing Automation Platform activation for your account (true=enabled, false=disabled)",
            "type": "boolean",
            "example": true
          },
          "smsCampaign": {
            "description": "Status of SMS Campaign Platform activation for your account (true=enabled, false=disabled)",
            "type": "boolean",
            "example": true
          }
        }
      },
      "errorModel": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid_parameter",
              "missing_parameter",
              "out_of_range",
              "campaign_processing",
              "campaign_sent",
              "document_not_found",
              "reseller_permission_denied",
              "not_enough_credits",
              "permission_denied",
              "duplicate_parameter",
              "duplicate_request",
              "method_not_allowed",
              "unauthorized",
              "account_under_validation",
              "not_acceptable"
            ],
            "description": "Error code displayed in case of a failure",
            "example": "method_not_allowed"
          },
          "message": {
            "type": "string",
            "description": "Readable message associated to the failure",
            "example": "POST Method is not allowed on this path"
          }
        }
      },
      "remainingCreditModel": {
        "type": "object",
        "required": [
          "child",
          "reseller"
        ],
        "properties": {
          "child": {
            "description": "Credits remaining for child account",
            "type": "object",
            "required": [
              "sms",
              "email"
            ],
            "properties": {
              "sms": {
                "type": "number",
                "format": "double",
                "description": "SMS Credits remaining for child account",
                "example": 500
              },
              "email": {
                "type": "number",
                "format": "double",
                "description": "Email Credits remaining for child account",
                "example": 2000
              }
            }
          },
          "reseller": {
            "type": "object",
            "required": [
              "sms",
              "email"
            ],
            "properties": {
              "sms": {
                "type": "number",
                "format": "double",
                "description": "SMS Credits remaining for reseller account",
                "example": 12900
              },
              "email": {
                "type": "number",
                "format": "double",
                "description": "Email Credits remaining for reseller account",
                "example": 2000000
              }
            }
          }
        }
      },
      "addCredits": {
        "type": "object",
        "properties": {
          "sms": {
            "description": "Required if email credits are empty. SMS credits to be added to the child account",
            "type": "integer",
            "format": "int64",
            "example": 450
          },
          "email": {
            "description": "Required if sms credits are empty. Email credits to be added to the child account",
            "type": "integer",
            "format": "int64",
            "example": 1200
          }
        }
      },
      "removeCredits": {
        "type": "object",
        "properties": {
          "sms": {
            "description": "Required if email credits are empty. SMS credits to be removed from the child account",
            "type": "integer",
            "format": "int64",
            "example": 300
          },
          "email": {
            "description": "Required if sms credits are empty. Email credits to be removed from the child account",
            "type": "integer",
            "format": "int64",
            "example": 500
          }
        }
      },
      "addChildDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "description": "Sender domain to add for a specific child account",
            "type": "string",
            "example": "mychilddomain.com"
          }
        }
      },
      "updateChildDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "description": "Value for the sender domain that will replace the existing domain",
            "type": "string",
            "example": "myupdateddomain.com"
          }
        }
      },
      "getProcesses": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "processes": {
            "description": "List of processes available on your account",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProcess"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of processes available on your account",
            "example": 5
          }
        }
      },
      "getProcess": {
        "type": "object",
        "required": [
          "id",
          "status",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the process",
            "example": 145
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "in_process",
              "completed"
            ],
            "description": "Status of the process",
            "example": "queued"
          },
          "name": {
            "type": "string",
            "description": "Process name",
            "example": "IMPORTUSER"
          },
          "export_url": {
            "type": "string",
            "description": "URL on which send export the of contacts once the process is completed",
            "example": "http://requestb.in/16ua3aj1"
          }
        }
      },
      "getEmailCampaigns": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "campaigns": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getExtendedCampaignOverview"
                },
                {
                  "type": "object",
                  "required": [
                    "recipients",
                    "statistics"
                  ],
                  "properties": {
                    "recipients": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/getCampaignRecipients"
                        }
                      ]
                    },
                    "statistics": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/getExtendedCampaignStats"
                        }
                      ]
                    },
                    "shareLink": {
                      "type": "string",
                      "format": "url",
                      "description": "Link to share the campaign on social medias",
                      "example": "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900"
                    }
                  }
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of Email campaigns retrieved",
            "example": 24
          }
        }
      },
      "getSmsCampaigns": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "campaigns": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getSmsCampaignOverview"
                },
                {
                  "type": "object",
                  "required": [
                    "recipients",
                    "statistics"
                  ],
                  "properties": {
                    "recipients": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/getCampaignRecipients"
                        }
                      ]
                    },
                    "statistics": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/getSmsCampaignStats"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of SMS campaigns retrieved",
            "example": 12
          }
        }
      },
      "getSmsCampaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getSmsCampaignOverview"
          },
          {
            "type": "object",
            "required": [
              "recipients",
              "statistics"
            ],
            "properties": {
              "recipients": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/getCampaignRecipients"
                  }
                ]
              },
              "statistics": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/getSmsCampaignStats"
                  }
                ]
              }
            }
          }
        ]
      },
      "getEmailCampaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getExtendedCampaignOverview"
          },
          {
            "type": "object",
            "required": [
              "recipients",
              "statistics"
            ],
            "properties": {
              "recipients": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/getCampaignRecipients"
                  }
                ]
              },
              "statistics": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/getExtendedCampaignStats"
                  }
                ]
              }
            }
          }
        ]
      },
      "getCampaignOverview": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the campaign",
            "example": 12
          },
          "name": {
            "type": "string",
            "description": "Name of the campaign",
            "example": "EN - Sales Summer 2017"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`",
            "example": "20% OFF for 2017 Summer Sales"
          },
          "type": {
            "type": "string",
            "enum": [
              "classic",
              "trigger"
            ],
            "description": "Type of campaign",
            "example": "classic"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "sent",
              "archive",
              "queued",
              "suspended",
              "in_process"
            ],
            "description": "Status of the campaign",
            "example": "sent"
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-06-01T12:30:00Z"
          },
          "abTesting": {
            "description": "Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.",
            "type": "boolean",
            "example": true
          },
          "subjectA": {
            "description": "Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`",
            "type": "string",
            "example": "Discover the New Collection!"
          },
          "subjectB": {
            "description": "Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`",
            "type": "string",
            "example": "Want to discover the New Collection?"
          },
          "splitRule": {
            "description": "The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`",
            "type": "integer",
            "example": 25
          },
          "winnerCriteria": {
            "description": "Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`",
            "type": "string",
            "example": "open"
          },
          "winnerDelay": {
            "description": "The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`",
            "type": "integer",
            "example": 50
          },
          "sendAtBestTime": {
            "type": "boolean",
            "description": "It is true if you have chosen to send your campaign at best time, otherwise it is false",
            "example": true
          }
        }
      },
      "getExtendedCampaignOverview": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getCampaignOverview"
          },
          {
            "type": "object",
            "required": [
              "testSent",
              "header",
              "footer",
              "sender",
              "replyTo",
              "toField",
              "htmlContent",
              "tag",
              "createdAt",
              "modifiedAt"
            ],
            "properties": {
              "testSent": {
                "type": "boolean",
                "description": "Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)",
                "example": true
              },
              "header": {
                "type": "string",
                "description": "Header of the campaign",
                "example": "[DEFAULT_HEADER]"
              },
              "footer": {
                "type": "string",
                "description": "Footer of the campaign",
                "example": "[DEFAULT_FOOTER]"
              },
              "sender": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Sender name of the campaign",
                    "type": "string",
                    "example": "Marketing"
                  },
                  "email": {
                    "description": "Sender email of the campaign",
                    "type": "string",
                    "format": "email",
                    "example": "marketing@mycompany.com"
                  },
                  "id": {
                    "description": "Sender id of the campaign",
                    "type": "string",
                    "example": 43
                  }
                }
              },
              "replyTo": {
                "type": "string",
                "format": "email",
                "description": "Email defined as the \"Reply to\" of the campaign",
                "example": "replyto@domain.com"
              },
              "toField": {
                "type": "string",
                "description": "Customisation of the \"to\" field of the campaign",
                "example": "{FNAME} {LNAME}"
              },
              "htmlContent": {
                "type": "string",
                "description": "HTML content of the campaign",
                "example": "This is my HTML Content"
              },
              "shareLink": {
                "type": "string",
                "format": "url",
                "description": "Link to share the campaign on social medias",
                "example": "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900"
              },
              "tag": {
                "type": "string",
                "description": "Tag of the campaign",
                "example": "Newsletter"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)",
                "example": "2017-05-01T12:30:00Z"
              },
              "modifiedAt": {
                "type": "string",
                "format": "date-time",
                "description": "UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)",
                "example": "2017-05-01T12:30:00Z"
              },
              "inlineImageActivation": {
                "type": "boolean",
                "description": "Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email.",
                "example": true
              },
              "mirrorActive": {
                "type": "boolean",
                "description": "Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign",
                "example": true
              },
              "recurring": {
                "description": "FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times",
                "type": "boolean",
                "example": true
              },
              "sentDate": {
                "type": "string",
                "format": "date-time",
                "description": "Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'",
                "example": "2018-12-01T16:30:00Z"
              },
              "returnBounce": {
                "description": "Total number of non-delivered campaigns for a particular campaign id.",
                "type": "integer",
                "format": "int64",
                "example": 5
              }
            }
          }
        ]
      },
      "getCampaignRecipients": {
        "type": "object",
        "required": [
          "lists",
          "exclusionLists"
        ],
        "properties": {
          "lists": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "List IDs included in the campaign",
              "example": 21
            }
          },
          "exclusionLists": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "List IDs excluded of the campaign",
              "example": 13
            }
          }
        }
      },
      "getExtendedCampaignStats": {
        "type": "object",
        "required": [
          "globalStats",
          "campaignStats",
          "mirrorClick",
          "remaining",
          "linksStats",
          "statsByDomain",
          "statsByDevice",
          "statsByBrowser"
        ],
        "properties": {
          "globalStats": {
            "type": "object",
            "description": "Overall statistics of the campaign",
            "allOf": [
              {
                "$ref": "#/components/schemas/getCampaignStats"
              }
            ]
          },
          "campaignStats": {
            "type": "array",
            "description": "List-wise statistics of the campaign.",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getCampaignStats"
                }
              ]
            }
          },
          "mirrorClick": {
            "type": "integer",
            "format": "int64",
            "description": "Number of clicks on mirror link",
            "example": 120
          },
          "remaining": {
            "type": "integer",
            "format": "int64",
            "description": "Number of remaning emails to send",
            "example": 1000
          },
          "linksStats": {
            "type": "object",
            "description": "Statistics about the number of clicks for the links",
            "example": {
              "example.abc.com": 7,
              "example.domain.com": 10
            }
          },
          "statsByDomain": {
            "$ref": "#/components/schemas/getStatsByDomain"
          },
          "statsByDevice": {
            "$ref": "#/components/schemas/getStatsByDevice"
          },
          "statsByBrowser": {
            "$ref": "#/components/schemas/getStatsByBrowser"
          }
        }
      },
      "getStatsByDomain": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/getCampaignStats"
        }
      },
      "getStatsByDevice": {
        "type": "object",
        "properties": {
          "desktop": {
            "type": "object",
            "description": "Statistics of the campaign on the basis of desktop devices",
            "additionalProperties": {
              "$ref": "#/components/schemas/getDeviceBrowserStats"
            }
          },
          "mobile": {
            "type": "object",
            "description": "Statistics of the campaign on the basis of mobile devices",
            "additionalProperties": {
              "$ref": "#/components/schemas/getDeviceBrowserStats"
            }
          },
          "tablet": {
            "type": "object",
            "description": "Statistics of the campaign on the basis of tablet devices",
            "additionalProperties": {
              "$ref": "#/components/schemas/getDeviceBrowserStats"
            }
          },
          "unknown": {
            "type": "object",
            "description": "Statistics of the campaign on the basis of unknown devices",
            "additionalProperties": {
              "$ref": "#/components/schemas/getDeviceBrowserStats"
            }
          }
        }
      },
      "getStatsByBrowser": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/getDeviceBrowserStats"
        }
      },
      "addContactToList": {
        "type": "object",
        "properties": {
          "emails": {
            "description": "Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.",
            "type": "array",
            "minItems": 1,
            "maxItems": 150,
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email to add to a list",
              "example": "john.smith@contact.com"
            }
          }
        }
      },
      "removeContactFromList": {
        "type": "object",
        "properties": {
          "emails": {
            "description": "Required if 'all' is false. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request.",
            "type": "array",
            "minItems": 1,
            "maxItems": 150,
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email to remove from a list",
              "example": "john.smith@contact.com"
            }
          },
          "all": {
            "description": "Required if 'emails' is empty. Remove all existing contacts from a list. A process will be created in this scenario. You can fetch the process details to know about the progress",
            "type": "boolean",
            "example": false
          }
        }
      },
      "getSmsCampaignOverview": {
        "type": "object",
        "required": [
          "id",
          "name",
          "status",
          "content",
          "scheduledAt",
          "sender",
          "createdAt",
          "modifiedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the SMS Campaign",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the SMS Campaign",
            "example": "PROMO CODE"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "sent",
              "archive",
              "queued",
              "suspended",
              "inProcess"
            ],
            "description": "Status of the SMS Campaign",
            "example": "draft"
          },
          "content": {
            "type": "string",
            "description": "Content of the SMS Campaign",
            "example": "Visit our Store and get some discount !"
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format",
            "example": "2017-06-01T12:30:00Z"
          },
          "sender": {
            "type": "string",
            "description": "Sender of the SMS Campaign",
            "example": "MyCompany"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-06-01T12:30:00Z"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-01T12:30:00Z"
          }
        }
      },
      "createModel": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the object created",
            "example": 122
          }
        }
      },
      "createUpdateContactModel": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the contact when a new contact is created",
            "example": 122
          }
        }
      },
      "createSenderModel": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the Sender created",
            "example": 5
          },
          "spfError": {
            "type": "boolean",
            "description": "Status of SPF configuration for the sender (true = SPF not well configured, false = SPF well configured)",
            "example": true
          },
          "dkimError": {
            "type": "boolean",
            "description": "Status of DKIM configuration for the sender (true = DKIM not well configured, false = DKIM well configured)",
            "example": false
          }
        }
      },
      "createSmtpEmail": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Message ID of the transactional email sent",
            "example": "<201798300811.5787683@relay.domain.com>"
          }
        }
      },
      "sendTemplateEmail": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Message ID of the template Email sent",
            "example": "<201798300811.5787683@relay.domain.com>"
          }
        }
      },
      "createReseller": {
        "type": "object",
        "required": [
          "authKey"
        ],
        "properties": {
          "authKey": {
            "type": "string",
            "description": "AuthKey of Reseller child created",
            "example": "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of Reseller child created",
            "example": 1234567
          }
        }
      },
      "sendSms": {
        "type": "object",
        "required": [
          "reference",
          "messageId"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "example": "ab1cde2fgh3i4jklmno"
          },
          "messageId": {
            "type": "integer",
            "format": "int64",
            "example": 1511882900176220
          },
          "smsCount": {
            "type": "integer",
            "format": "int64",
            "description": "Count of SMS's to send multiple text messages",
            "example": 2
          },
          "usedCredits": {
            "type": "number",
            "format": "float",
            "description": "SMS credits used per text message",
            "example": 0.7
          },
          "remainingCredits": {
            "type": "number",
            "format": "float",
            "description": "Remaining SMS credits of the user",
            "example": 82.85
          }
        }
      },
      "createdProcessId": {
        "type": "object",
        "required": [
          "processId"
        ],
        "properties": {
          "processId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the process created",
            "example": 78
          }
        }
      },
      "createUpdateFolder": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "example": "Wordpress Contacts"
          }
        }
      },
      "postSendFailed": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "description": "Response code",
            "example": "invalid_parameter"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "The email could not be sent to all recipients"
          },
          "unexistingEmails": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addresses you tried to sent an email to, but not existing in your contacts",
              "example": "matthew.dow@example.com, elisa.carrely@example.com"
            }
          },
          "withoutListEmails": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addresses you sent an email to, without a contact list",
              "example": "jeff.dean@example.com, jim.sue@example.com"
            }
          },
          "blackListedEmails": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addresses which are blacklisted. ONLY FOR email-campign's sendTest OR smtp-template's sendTest api's.",
              "example": "jeff.dean@example.com, jim.sue@example.com"
            }
          }
        }
      },
      "postSendSmsTestFailed": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "description": "Response code",
            "example": "invalid_parameter"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "The SMS could not be sent to all recipients"
          },
          "unexistingSms": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addresses you tried to sent a SMS to, but not existing in your contacts",
              "example": "337699086644@mailin.com, 41778899954@mailin.com"
            }
          },
          "withoutListSms": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addresses you sent a SMS to, without a contact list",
              "example": "3542388988@mailin.com, 10976444477@mailin.com"
            }
          }
        }
      },
      "postContactInfo": {
        "type": "object",
        "required": [
          "contacts"
        ],
        "properties": {
          "contacts": {
            "type": "object",
            "properties": {
              "success": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email",
                  "description": "Email addresses which are successfully imported",
                  "example": "jeff32@example.com, jim56@example.com"
                }
              },
              "failure": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email",
                  "description": "Email addresses which can not be imported, could be already in/out list and/or doesn't exist",
                  "example": "jeff32@example.com, jim56@example.com"
                }
              },
              "total": {
                "type": "integer",
                "format": "int64",
                "description": "Displays the count of total number of contacts removed from list when user opts for \"all\" option.",
                "example": 27
              },
              "processId": {
                "type": "integer",
                "format": "int64",
                "description": "Id of the process created to remove contacts from list when user opts for \"all\" option.",
                "example": 78
              }
            }
          }
        }
      },
      "getAggregatedReport": {
        "type": "object",
        "required": [
          "range",
          "requests",
          "delivered",
          "hardBounces",
          "softBounces",
          "clicks",
          "uniqueClicks",
          "opens",
          "uniqueOpens",
          "spamReports",
          "blocked",
          "invalid",
          "unsubscribed"
        ],
        "properties": {
          "range": {
            "type": "string",
            "description": "Time frame of the report",
            "example": "2016-09-08|2017-04-06"
          },
          "requests": {
            "type": "integer",
            "format": "int64",
            "description": "Number of requests for the timeframe",
            "example": 263
          },
          "delivered": {
            "type": "integer",
            "format": "int64",
            "description": "Number of delivered emails for the timeframe",
            "example": 249
          },
          "hardBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of hardbounces for the timeframe",
            "example": 1
          },
          "softBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of softbounces for the timeframe",
            "example": 4
          },
          "clicks": {
            "type": "integer",
            "format": "int64",
            "description": "Number of clicks for the timeframe",
            "example": 12
          },
          "uniqueClicks": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique clicks for the timeframe",
            "example": 8
          },
          "opens": {
            "type": "integer",
            "format": "int64",
            "description": "Number of openings for the timeframe",
            "example": 47
          },
          "uniqueOpens": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique openings for the timeframe",
            "example": 37
          },
          "spamReports": {
            "type": "integer",
            "format": "int64",
            "description": "Number of complaint (spam report) for the timeframe",
            "example": 0
          },
          "blocked": {
            "type": "integer",
            "format": "int64",
            "description": "Number of blocked contact emails for the timeframe",
            "example": 2
          },
          "invalid": {
            "type": "integer",
            "format": "int64",
            "description": "Number of invalid emails for the timeframe",
            "example": 0
          },
          "unsubscribed": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unsubscribed emails for the timeframe",
            "example": 0
          }
        }
      },
      "getTransacBlockedContacts": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Count of blocked or unsubscribed contact",
            "example": 1
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email",
                "senderEmail",
                "reason",
                "blockedAt"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the blocked or unsubscribed contact",
                  "example": "john.smith@example.com"
                },
                "senderEmail": {
                  "type": "string",
                  "format": "email",
                  "description": "Sender email address of the blocked or unsubscribed contact",
                  "example": "john.smith@example.com"
                },
                "reason": {
                  "type": "object",
                  "description": "Reason for blocking / unsubscribing",
                  "example": "Admin blocked",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "unsubscribedViaMA",
                        "unsubscribedViaEmail",
                        "adminBlocked",
                        "unsubscribedViaApi",
                        "hardBounce",
                        "contactFlaggedAsSpam"
                      ],
                      "description": "Reason code for blocking / unsubscribing (This code is safe for comparison)",
                      "example": "AdminBlocked"
                    },
                    "message": {
                      "type": "string",
                      "description": "Reason for blocking / unsubscribing (This string is not safe for comparison)",
                      "example": "Admin blocked"
                    }
                  }
                },
                "blockedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the contact was blocked or unsubscribed on",
                  "example": "2017-05-01T12:30:00Z"
                }
              }
            }
          }
        }
      },
      "getReports": {
        "type": "object",
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "date",
                "requests",
                "delivered",
                "hardBounces",
                "softBounces",
                "clicks",
                "uniqueClicks",
                "opens",
                "uniqueOpens",
                "spamReports",
                "blocked",
                "invalid",
                "unsubscribed"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Date of the statistics",
                  "example": "2017-04-06"
                },
                "requests": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of requests for the date",
                  "example": 65
                },
                "delivered": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of delivered emails for the date",
                  "example": 63
                },
                "hardBounces": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of hardbounces for the date",
                  "example": 1
                },
                "softBounces": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of softbounces for the date",
                  "example": 1
                },
                "clicks": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of clicks for the date",
                  "example": 6
                },
                "uniqueClicks": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of unique clicks for the date",
                  "example": 5
                },
                "opens": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of openings for the date",
                  "example": 58
                },
                "uniqueOpens": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of unique openings for the date",
                  "example": 52
                },
                "spamReports": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of complaints (spam reports) for the date",
                  "example": 0
                },
                "blocked": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of blocked emails for the date",
                  "example": 0
                },
                "invalid": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of invalid emails for the date",
                  "example": 0
                },
                "unsubscribed": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of unsubscribed emails for the date",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "getEmailEventReport": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email",
                "date",
                "messageId",
                "event"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address which generates the event",
                  "example": "john.smith@example.com"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time on which the event has been generated",
                  "example": "2017-03-12T12:30:00Z"
                },
                "subject": {
                  "type": "string",
                  "description": "Subject of the event",
                  "example": "Sib client test"
                },
                "messageId": {
                  "type": "string",
                  "description": "Message ID which generated the event",
                  "example": "<201798300811.5787683@relay.domain.com>"
                },
                "event": {
                  "type": "string",
                  "enum": [
                    "bounces",
                    "hardBounces",
                    "softBounces",
                    "delivered",
                    "spam",
                    "requests",
                    "opened",
                    "clicks",
                    "invalid",
                    "deferred",
                    "blocked",
                    "unsubscribed"
                  ],
                  "description": "Event which occurred",
                  "example": "delivered"
                },
                "reason": {
                  "type": "string",
                  "description": "Reason of bounce (only available if the event is hardbounce or softbounce)",
                  "example": "Error connection timeout"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag of the email which generated the event",
                  "example": "OrderConfirmation"
                },
                "ip": {
                  "type": "string",
                  "description": "IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)",
                  "example": "165.87.3.15"
                },
                "link": {
                  "type": "string",
                  "description": "The link which is sent to the user (only available if the event is requests or opened or clicks)",
                  "example": "https://www.someexamplelink.com"
                },
                "from": {
                  "type": "string",
                  "format": "email",
                  "description": "Sender email from which the emails are sent",
                  "example": "john@example.com"
                }
              }
            }
          }
        }
      },
      "getSmsEventReport": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "phoneNumber",
                "date",
                "messageId",
                "event"
              ],
              "properties": {
                "phoneNumber": {
                  "type": "string",
                  "description": "Phone number which has generated the event",
                  "example": "00189001094"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time on which the event has been generated",
                  "example": "2017-03-12T12:30:00Z"
                },
                "messageId": {
                  "type": "string",
                  "description": "Message ID which generated the event",
                  "example": "1472640582425378"
                },
                "event": {
                  "type": "string",
                  "enum": [
                    "bounces",
                    "hardBounces",
                    "softBounces",
                    "delivered",
                    "sent",
                    "accepted",
                    "unsubscription",
                    "replies",
                    "blocked"
                  ],
                  "description": "Event which occurred",
                  "example": "accepted"
                },
                "reason": {
                  "type": "string",
                  "description": "Reason of bounce (only available if the event is hardbounce or softbounce)",
                  "example": "Message is undeliverable due to an incorrect / invalid / blacklisted / permanently barred MSISDN for this operator"
                },
                "reply": {
                  "type": "string"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag of the SMS which generated the event",
                  "example": "CabWaiting"
                }
              }
            }
          }
        }
      },
      "getSmtpTemplateOverview": {
        "type": "object",
        "required": [
          "id",
          "name",
          "subject",
          "isActive",
          "testSent",
          "sender",
          "replyTo",
          "toField",
          "tag",
          "htmlContent",
          "createdAt",
          "modifiedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the template",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "Name of the template",
            "example": "Order Confirmation - EN"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the template",
            "example": "Thanks for your order !"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status of template (true=active, false=inactive)",
            "example": true
          },
          "testSent": {
            "type": "boolean",
            "description": "Status of test sending for the template (true=test email has been sent, false=test email has not been sent)",
            "example": true
          },
          "sender": {
            "type": "object",
            "properties": {
              "name": {
                "description": "From email for the template",
                "type": "string",
                "example": "Mary form MyShop"
              },
              "email": {
                "description": "From email for the template",
                "type": "string",
                "format": "email",
                "example": "contact@myshop.fr"
              },
              "id": {
                "description": "Sender id of the template",
                "type": "string",
                "example": 43
              }
            }
          },
          "replyTo": {
            "type": "string",
            "format": "email",
            "description": "Email defined as the \"Reply to\" for the template",
            "example": "replyto@domain.com"
          },
          "toField": {
            "type": "string",
            "description": "Customisation of the \"to\" field for the template",
            "example": "{FIRSTNAME} {LASTNAME}"
          },
          "tag": {
            "type": "string",
            "description": "Tag of the template",
            "example": "sports"
          },
          "htmlContent": {
            "type": "string",
            "description": "HTML content of the template",
            "example": "Your order n°xxxxx has been confirmed. Thanks for your purchase."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-01T12:30:00Z"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-12T12:30:00Z"
          },
          "doiTemplate": {
            "type": "boolean",
            "description": "It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.",
            "example": false
          }
        }
      },
      "getSmtpTemplates": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Count of transactional email templates",
            "example": 1
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getSmtpTemplateOverview"
            }
          }
        }
      },
      "getWebhook": {
        "type": "object",
        "required": [
          "url",
          "id",
          "description",
          "events",
          "type",
          "createdAt",
          "modifiedAt"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "URL of the webhook",
            "example": "http://requestb.in/173lyyx1"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the webhook",
            "example": 654
          },
          "description": {
            "type": "string",
            "description": "Description of the webhook",
            "example": "Webhook triggered on campaign openings"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Events which will trigger the webhook when they occure",
              "example": "opens,clicks"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "marketing",
              "transac"
            ],
            "description": "Type of webhook (marketing or transac)",
            "example": "marketing"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2016-12-01T12:50:00Z"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-12T13:15:00Z"
          }
        }
      },
      "getWebhooks": {
        "type": "object",
        "required": [
          "webhooks"
        ],
        "properties": {
          "webhooks": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getWebhook"
                }
              ]
            }
          }
        }
      },
      "getContactDetails": {
        "type": "object",
        "required": [
          "email",
          "id",
          "emailBlacklisted",
          "smsBlacklisted",
          "createdAt",
          "modifiedAt",
          "listIds",
          "attributes"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the contact for which you requested the details",
            "example": "john.smith@example.com"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the contact for which you requested the details",
            "example": 32
          },
          "emailBlacklisted": {
            "type": "boolean",
            "description": "Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)",
            "example": false
          },
          "smsBlacklisted": {
            "type": "boolean",
            "description": "Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-12T12:30:00Z"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)",
            "example": "2017-05-12T12:30:00Z"
          },
          "listIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "List(s) in which the contact is included",
              "example": "12,9,20"
            }
          },
          "listUnsubscribed": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "List(s) in which the contact is included (only available if unsubscription per list is activated for the account)",
              "example": "1,2"
            }
          },
          "attributes": {
            "type": "object",
            "description": "Set of attributes of the contact",
            "example": {
              "name": "Joe",
              "email": "joe@example.com"
            }
          }
        }
      },
      "getExtendedContactDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getContactDetails"
          },
          {
            "type": "object",
            "required": [
              "statistics"
            ],
            "properties": {
              "statistics": {
                "type": "object",
                "description": "Campaign statistics of the contact",
                "properties": {
                  "messagesSent": {
                    "description": "Listing of the sent campaign for the contact",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "eventTime"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "eventTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC date-time of the event",
                          "example": "2017-03-12T20:15:13Z"
                        }
                      }
                    }
                  },
                  "hardBounces": {
                    "type": "array",
                    "description": "Listing of the hardbounes generated by the contact",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "eventTime"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "eventTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC date-time of the event",
                          "example": "2017-03-12T20:15:13Z"
                        }
                      }
                    }
                  },
                  "softBounces": {
                    "type": "array",
                    "description": "Listing of the softbounes generated by the contact",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "eventTime"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "eventTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC date-time of the event",
                          "example": "2017-03-12T20:15:13Z"
                        }
                      }
                    }
                  },
                  "complaints": {
                    "type": "array",
                    "description": "Listing of the complaints generated by the contact",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "eventTime"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "eventTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC date-time of the event",
                          "example": "2017-03-12T20:15:13Z"
                        }
                      }
                    }
                  },
                  "unsubscriptions": {
                    "type": "object",
                    "description": "Listing of the unsubscription for the contact",
                    "required": [
                      "userUnsubscription",
                      "adminUnsubscription"
                    ],
                    "properties": {
                      "userUnsubscription": {
                        "description": "Contact unsubscribe via unsubscription link in a campaign",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "campaignId",
                            "eventTime"
                          ],
                          "properties": {
                            "campaignId": {
                              "type": "integer",
                              "format": "int64",
                              "description": "ID of the campaign which generated the event",
                              "example": 3
                            },
                            "eventTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "UTC date-time of the event",
                              "example": "2017-03-12T20:15:13Z"
                            },
                            "ip": {
                              "type": "string",
                              "description": "IP from which the user has unsubscribed",
                              "example": "165.87.3.15"
                            }
                          }
                        }
                      },
                      "adminUnsubscription": {
                        "type": "array",
                        "description": "Contact has been unsubscribed from the administrator",
                        "items": {
                          "type": "object",
                          "required": [
                            "eventTime"
                          ],
                          "properties": {
                            "eventTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "UTC date-time of the event",
                              "example": "2017-03-12T20:15:13Z"
                            },
                            "ip": {
                              "type": "string",
                              "description": "IP from which the user has been unsubscribed",
                              "example": "165.87.3.15"
                            }
                          }
                        }
                      }
                    }
                  },
                  "opened": {
                    "type": "array",
                    "description": "Listing of the openings generated by the contact",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "count",
                        "eventTime",
                        "ip"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "count": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Number of openings for the campaign",
                          "example": 1
                        },
                        "eventTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC date-time of the event",
                          "example": "2017-03-12T20:15:13Z"
                        },
                        "ip": {
                          "type": "string",
                          "description": "IP from which the user has opened the email",
                          "example": "165.87.3.15"
                        }
                      }
                    }
                  },
                  "clicked": {
                    "type": "array",
                    "description": "Listing of the clicks generated by the contact",
                    "items": {
                      "type": "object",
                      "required": [
                        "campaignId",
                        "links"
                      ],
                      "properties": {
                        "campaignId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the campaign which generated the event",
                          "example": 3
                        },
                        "links": {
                          "type": "array",
                          "description": "Listing of the clicked links for the campaign",
                          "items": {
                            "type": "object",
                            "required": [
                              "count",
                              "eventTime",
                              "ip",
                              "url"
                            ],
                            "properties": {
                              "count": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Number of clicks on this link for the campaign",
                                "example": 1
                              },
                              "eventTime": {
                                "type": "string",
                                "format": "date-time",
                                "description": "UTC date-time of the event",
                                "example": "2017-03-12T20:15:13Z"
                              },
                              "ip": {
                                "type": "string",
                                "description": "IP from which the user has clicked on the link",
                                "example": "165.87.3.15"
                              },
                              "url": {
                                "type": "string",
                                "description": "URL of the clicked link",
                                "example": "www.myshop.com"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "transacAttributes": {
                    "type": "array",
                    "description": "Listing of the transactional attributes for the contact",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "getContactCampaignStats": {
        "type": "object",
        "description": "Campaign Statistics for the contact",
        "properties": {
          "messagesSent": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "eventTime"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "eventTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time of the event",
                  "example": "2017-03-12T20:15:13Z"
                }
              }
            }
          },
          "hardBounces": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "eventTime"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "eventTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time of the event",
                  "example": "2017-03-12T20:15:13Z"
                }
              }
            }
          },
          "softBounces": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "eventTime"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "eventTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time of the event",
                  "example": "2017-03-12T20:15:13Z"
                }
              }
            }
          },
          "complaints": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "eventTime"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "eventTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time of the event",
                  "example": "2017-03-12T20:15:13Z"
                }
              }
            }
          },
          "unsubscriptions": {
            "type": "object",
            "required": [
              "userUnsubscription",
              "adminUnsubscription"
            ],
            "properties": {
              "userUnsubscription": {
                "type": "array",
                "description": "Contact has unsubscribed via the unsubscription link in the email",
                "items": {
                  "type": "object",
                  "required": [
                    "campaignId",
                    "eventTime"
                  ],
                  "properties": {
                    "campaignId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "ID of the campaign which generated the event",
                      "example": 3
                    },
                    "eventTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date-time of the event",
                      "example": "2017-03-12T20:15:13Z"
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP from which the user has unsubscribed",
                      "example": "165.87.3.15"
                    }
                  }
                }
              },
              "adminUnsubscription": {
                "type": "array",
                "description": "Contact has been unsubscribed from the administrator",
                "items": {
                  "type": "object",
                  "required": [
                    "eventTime"
                  ],
                  "properties": {
                    "eventTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date-time of the event",
                      "example": "2017-03-12T20:15:13Z"
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP from which the user has been unsubscribed",
                      "example": "165.87.3.15"
                    }
                  }
                }
              }
            }
          },
          "opened": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "count",
                "eventTime",
                "ip"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of openings of the campaign",
                  "example": 3
                },
                "eventTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "UTC date-time of the event",
                  "example": "2017-03-12T20:15:13Z"
                },
                "ip": {
                  "type": "string",
                  "description": "IP from which the user has opened the campaign",
                  "example": "165.87.3.15"
                }
              }
            }
          },
          "clicked": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "campaignId",
                "links"
              ],
              "properties": {
                "campaignId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the campaign which generated the event",
                  "example": 3
                },
                "links": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "count",
                      "eventTime",
                      "ip",
                      "url"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of clicks on this link for the campaign",
                        "example": 1
                      },
                      "eventTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "UTC date-time of the event",
                        "example": "2017-03-12T20:15:13Z"
                      },
                      "ip": {
                        "type": "string",
                        "description": "IP from which the user has clicked on the link",
                        "example": "165.87.3.15"
                      },
                      "url": {
                        "type": "string",
                        "description": "URL of the clicked link",
                        "example": "www.myshop.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "transacAttributes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "orderDate",
                "orderPrice",
                "orderId"
              ],
              "properties": {
                "orderDate": {
                  "type": "string",
                  "format": "date",
                  "description": "Date of the order",
                  "example": "2017-03-12"
                },
                "orderPrice": {
                  "type": "number",
                  "format": "float",
                  "description": "Price of the order",
                  "example": 24.99
                },
                "orderId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "ID of the order",
                  "example": 248
                }
              }
            }
          }
        }
      },
      "getContacts": {
        "type": "object",
        "required": [
          "contacts",
          "count"
        ],
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getContactDetails"
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of contacts",
            "example": 17655
          }
        }
      },
      "getAttributes": {
        "type": "object",
        "required": [
          "attributes"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "description": "Listing of available contact attributes in your account",
            "items": {
              "type": "object",
              "required": [
                "name",
                "category"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the attribute",
                  "example": "LASTNAME"
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "normal",
                    "transactional",
                    "category",
                    "calculated",
                    "global"
                  ],
                  "description": "Category of the attribute",
                  "example": "category"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "text",
                    "date",
                    "float",
                    "id",
                    "boolean"
                  ],
                  "description": "Type of the attribute",
                  "example": "text"
                },
                "enumeration": {
                  "type": "array",
                  "description": "Parameter only available for \"category\" type attributes.",
                  "items": {
                    "type": "object",
                    "required": [
                      "value",
                      "label"
                    ],
                    "properties": {
                      "value": {
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Value of the \"category\" type attribute",
                        "example": 1
                      },
                      "label": {
                        "type": "string",
                        "description": "Label of the \"category\" type attribute",
                        "example": "Women"
                      }
                    }
                  }
                },
                "calculatedValue": {
                  "type": "string",
                  "description": "Calculated value formula",
                  "example": "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
                }
              }
            }
          }
        }
      },
      "getFolders": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getFolder"
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of folders available in your account",
            "example": 10
          }
        }
      },
      "getFolder": {
        "type": "object",
        "required": [
          "id",
          "name",
          "totalBlacklisted",
          "totalSubscribers",
          "uniqueSubscribers"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the folder",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "example": "Magento Customers"
          },
          "totalBlacklisted": {
            "type": "integer",
            "format": "int64",
            "description": "Number of blacklisted contacts in the folder",
            "example": 32
          },
          "totalSubscribers": {
            "type": "integer",
            "format": "int64",
            "description": "Number of contacts in the folder",
            "example": 19777
          },
          "uniqueSubscribers": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique contacts in the folder",
            "example": 16222
          }
        }
      },
      "getFolderLists": {
        "type": "object",
        "required": [
          "lists",
          "count"
        ],
        "properties": {
          "lists": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getList"
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of lists in the folder",
            "example": 6
          }
        }
      },
      "getLists": {
        "type": "object",
        "required": [
          "lists",
          "count"
        ],
        "properties": {
          "lists": {
            "type": "array",
            "description": "Listing of all the lists available in your account",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/getList"
                },
                {
                  "type": "object",
                  "required": [
                    "folderId"
                  ],
                  "properties": {
                    "folderId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "ID of the folder",
                      "example": 2
                    }
                  }
                }
              ]
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of lists in your account",
            "example": 150
          }
        }
      },
      "getList": {
        "type": "object",
        "required": [
          "id",
          "name",
          "totalSubscribers",
          "totalBlacklisted"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the list",
            "example": 23
          },
          "name": {
            "type": "string",
            "description": "Name of the list",
            "example": "Magento Customers - EN"
          },
          "totalBlacklisted": {
            "type": "integer",
            "format": "int64",
            "description": "Number of blacklisted contacts in the list",
            "example": 13
          },
          "totalSubscribers": {
            "type": "integer",
            "format": "int64",
            "description": "Number of contacts in the list",
            "example": 1776
          }
        }
      },
      "getExtendedList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/getList"
          },
          {
            "type": "object",
            "required": [
              "folderId",
              "createdAt"
            ],
            "properties": {
              "folderId": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the folder",
                "example": 2
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)",
                "example": "2017-03-13T17:05:09Z"
              },
              "campaignStats": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "campaignId",
                    "stats"
                  ],
                  "properties": {
                    "campaignId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "ID of the campaign",
                      "example": 143
                    },
                    "stats": {
                      "$ref": "#/components/schemas/getCampaignStats"
                    }
                  }
                }
              },
              "dynamicList": {
                "type": "boolean",
                "description": "Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)",
                "example": false
              }
            }
          }
        ]
      },
      "getSmsCampaignStats": {
        "type": "object",
        "required": [
          "delivered",
          "sent",
          "processing",
          "softBounces",
          "hardBounces",
          "unsubscriptions",
          "answered"
        ],
        "properties": {
          "delivered": {
            "type": "integer",
            "format": "int64",
            "description": "Number of delivered SMS",
            "example": 2987
          },
          "sent": {
            "type": "integer",
            "format": "int64",
            "description": "Number of sent SMS",
            "example": 3000
          },
          "processing": {
            "type": "integer",
            "format": "int64",
            "description": "Number of processing SMS",
            "example": 0
          },
          "softBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of softbounced SMS",
            "example": 3
          },
          "hardBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of hardbounced SMS",
            "example": 1
          },
          "unsubscriptions": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unsubscription SMS",
            "example": 3
          },
          "answered": {
            "type": "integer",
            "format": "int64",
            "description": "Number of replies to the SMS",
            "example": 2
          }
        }
      },
      "getDeviceBrowserStats": {
        "type": "object",
        "required": [
          "clickers",
          "uniqueClicks",
          "viewed",
          "uniqueViews"
        ],
        "properties": {
          "clickers": {
            "type": "integer",
            "format": "int64",
            "description": "Number of total clicks for the campaign using the particular browser",
            "example": 2665
          },
          "uniqueClicks": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique clicks for the campaign using the particular browser",
            "example": 2300
          },
          "viewed": {
            "type": "integer",
            "format": "int64",
            "description": "Number of openings for the campaign using the particular browser",
            "example": 8999
          },
          "uniqueViews": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique openings for the campaign using the particular browser",
            "example": 7779
          }
        }
      },
      "getCampaignStats": {
        "type": "object",
        "required": [
          "uniqueClicks",
          "clickers",
          "complaints",
          "delivered",
          "sent",
          "softBounces",
          "hardBounces",
          "uniqueViews",
          "unsubscriptions",
          "viewed",
          "trackableViews"
        ],
        "properties": {
          "listId": {
            "type": "integer",
            "format": "int64",
            "description": "List Id of email campaign (only in case of get email campaign(s)(not for global stats))",
            "example": 2
          },
          "uniqueClicks": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique clicks for the campaign",
            "example": 2300
          },
          "clickers": {
            "type": "integer",
            "format": "int64",
            "description": "Number of total clicks for the campaign",
            "example": 2665
          },
          "complaints": {
            "type": "integer",
            "format": "int64",
            "description": "Number of complaints (Spam reports) for the campaign",
            "example": 1
          },
          "delivered": {
            "type": "integer",
            "format": "int64",
            "description": "Number of delivered emails for the campaign",
            "example": 19765
          },
          "sent": {
            "type": "integer",
            "format": "int64",
            "description": "Number of sent emails for the campaign",
            "example": 19887
          },
          "softBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of softbounce for the campaign",
            "example": 100
          },
          "hardBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of harbounce for the campaign",
            "example": 87
          },
          "uniqueViews": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unique openings for the campaign",
            "example": 7779
          },
          "trackableViews": {
            "type": "integer",
            "description": "Recipients without any privacy protection option enabled in their email client",
            "format": "int64",
            "example": 5661
          },
          "unsubscriptions": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unsubscription for the campaign",
            "example": 2
          },
          "viewed": {
            "type": "integer",
            "format": "int64",
            "description": "Number of openings for the campaign",
            "example": 8999
          },
          "deferred": {
            "type": "integer",
            "format": "int64",
            "description": "Number of deferred emails for the campaign",
            "example": 30
          },
          "returnBounce": {
            "description": "Total number of non-delivered campaigns for a particular campaign id.",
            "type": "integer",
            "format": "int64",
            "example": 5
          }
        }
      },
      "updateSmtpTemplate": {
        "type": "object",
        "properties": {
          "tag": {
            "description": "Tag of the template",
            "type": "string",
            "example": "OrderConfirmation"
          },
          "sender": {
            "type": "object",
            "description": "Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`",
            "properties": {
              "name": {
                "description": "Name of the sender",
                "type": "string",
                "example": "Mary from MyShop"
              },
              "email": {
                "description": "Email of the sender",
                "type": "string",
                "format": "email",
                "example": "contact@myshop.com"
              },
              "id": {
                "description": "Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).",
                "type": "integer",
                "format": "int64",
                "example": 3
              }
            }
          },
          "templateName": {
            "description": "Name of the template",
            "type": "string",
            "example": "Order Confirmation - EN"
          },
          "htmlContent": {
            "description": "Required if htmlUrl is empty. Body of the message (HTML must have more than 10 characters)",
            "type": "string",
            "example": "The order n°xxxxx has been confirmed. Thanks for your purchase"
          },
          "htmlUrl": {
            "description": "Required if htmlContent is empty. URL to the body of the email (HTML)",
            "type": "string",
            "format": "url",
            "example": "https://html.domain.com"
          },
          "subject": {
            "description": "Subject of the email",
            "type": "string",
            "example": "Thanks for your purchase !"
          },
          "replyTo": {
            "description": "Email on which campaign recipients will be able to reply to",
            "type": "string",
            "format": "email",
            "example": "support@myshop.com"
          },
          "toField": {
            "description": "To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization",
            "type": "string",
            "example": "{FNAME} {LNAME}"
          },
          "attachmentUrl": {
            "description": "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps",
            "type": "string",
            "format": "url",
            "example": "https://attachment.domain.com"
          },
          "isActive": {
            "description": "Status of the template. isActive = false means template is inactive, isActive = true means template is active",
            "type": "boolean",
            "example": true
          }
        }
      },
      "updateCampaignStatus": {
        "type": "object",
        "description": "Status of the campaign",
        "example": "draft",
        "properties": {
          "status": {
            "type": "string",
            "description": "Note:- replicateTemplate status will be available only for template type campaigns.",
            "enum": [
              "suspended",
              "archive",
              "darchive",
              "sent",
              "queued",
              "replicate",
              "replicateTemplate",
              "draft"
            ]
          }
        }
      },
      "createSmtpTemplate": {
        "type": "object",
        "required": [
          "sender",
          "templateName",
          "subject"
        ],
        "properties": {
          "tag": {
            "description": "Tag of the template",
            "type": "string",
            "example": "OrderConfirmation"
          },
          "sender": {
            "type": "object",
            "description": "Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`",
            "properties": {
              "name": {
                "description": "Name of the sender. If not passed, will be set to default",
                "type": "string",
                "example": "Mary from MyShop"
              },
              "email": {
                "description": "Email of the sender",
                "type": "string",
                "format": "email",
                "example": "contact@myshop.com"
              },
              "id": {
                "description": "Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).",
                "type": "integer",
                "format": "int64",
                "example": 3
              }
            }
          },
          "templateName": {
            "description": "Name of the template",
            "type": "string",
            "example": "Order Confirmation - EN"
          },
          "htmlContent": {
            "description": "Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty",
            "type": "string",
            "example": "The order n°xxxxx has been confirmed. Thanks for your purchase"
          },
          "htmlUrl": {
            "description": "Url which contents the body of the email message. REQUIRED if htmlContent is empty",
            "type": "string",
            "format": "url",
            "example": "https://html.domain.com"
          },
          "subject": {
            "description": "Subject of the template",
            "type": "string",
            "example": "Thanks for your purchase !"
          },
          "replyTo": {
            "description": "Email on which campaign recipients will be able to reply to",
            "type": "string",
            "format": "email",
            "example": "support@myshop.com"
          },
          "toField": {
            "description": "To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization",
            "type": "string",
            "example": "{FNAME} {LNAME}"
          },
          "attachmentUrl": {
            "description": "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps",
            "type": "string",
            "format": "url",
            "example": "https://attachment.domain.com"
          },
          "isActive": {
            "description": "Status of template. isActive = true means template is active and isActive = false means template is inactive",
            "type": "boolean",
            "example": true
          }
        }
      },
      "createEmailCampaign": {
        "type": "object",
        "required": [
          "sender",
          "name"
        ],
        "properties": {
          "tag": {
            "description": "Tag of the campaign",
            "type": "string",
            "example": "Newsletter"
          },
          "sender": {
            "type": "object",
            "description": "Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`",
            "properties": {
              "name": {
                "description": "Sender Name",
                "type": "string",
                "example": "Mary from MyShop"
              },
              "email": {
                "description": "Sender email",
                "type": "string",
                "format": "email",
                "example": "newsletter@myshop.com"
              },
              "id": {
                "description": "Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).",
                "type": "integer",
                "format": "int64",
                "example": 3
              }
            }
          },
          "name": {
            "description": "Name of the campaign",
            "type": "string",
            "example": "Newsletter - May 2017"
          },
          "htmlContent": {
            "description": "Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)",
            "type": "string",
            "example": "Spring is here, discover my new collection"
          },
          "htmlUrl": {
            "description": "Mandatory if htmlContent and templateId are empty. Url to the message (HTML)",
            "type": "string",
            "format": "url",
            "example": "https://html.domain.com"
          },
          "templateId": {
            "description": "Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status 'active'. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.",
            "type": "integer",
            "format": "int64"
          },
          "scheduledAt": {
            "description": "Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).",
            "type": "string",
            "format": "date-time",
            "example": "2017-06-01T12:30:00+02:00"
          },
          "subject": {
            "description": "Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.",
            "type": "string",
            "example": "Discover the New Collection !"
          },
          "replyTo": {
            "description": "Email on which the campaign recipients will be able to reply to",
            "type": "string",
            "format": "email",
            "example": "support@myshop.com"
          },
          "toField": {
            "description": "To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization",
            "type": "string",
            "example": "{FNAME} {LNAME}"
          },
          "recipients": {
            "type": "object",
            "description": "List ids to include/exclude from campaign",
            "properties": {
              "exclusionListIds": {
                "description": "List ids to exclude from the campaign",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 8
                }
              },
              "listIds": {
                "description": "Mandatory if scheduledAt is not empty. List Ids to send the campaign to",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 32
                }
              }
            }
          },
          "attachmentUrl": {
            "description": "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps",
            "type": "string",
            "format": "url",
            "example": "https://attachment.domain.com"
          },
          "inlineImageActivation": {
            "description": "Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "mirrorActive": {
            "description": "Use true to enable the mirror link",
            "type": "boolean",
            "example": true
          },
          "footer": {
            "description": "Footer of the email campaign",
            "type": "string",
            "example": "[DEFAULT_FOOTER]"
          },
          "header": {
            "description": "Header of the email campaign",
            "type": "string",
            "example": "[DEFAULT_HEADER]"
          },
          "utmCampaign": {
            "description": "Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed",
            "type": "string",
            "example": "NL_05_2017"
          },
          "params": {
            "type": "object",
            "description": "Pass the set of attributes to customize the type classic campaign. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. Only available if 'type' is 'classic'. It's considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'",
            "example": {
              "FNAME": "Joe",
              "LNAME": "Doe"
            }
          },
          "sendAtBestTime": {
            "type": "boolean",
            "description": "Set this to true if you want to send your campaign at best time.",
            "example": true,
            "default": false
          },
          "abTesting": {
            "description": "Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered when abTesting is set to true. 'subjectA' & 'subjectB' are mandatory together & 'subject' if passed is ignored. Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "subjectA": {
            "description": "Subject A of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value",
            "type": "string",
            "example": "Discover the New Collection!"
          },
          "subjectB": {
            "description": "Subject B of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value",
            "type": "string",
            "example": "Want to discover the New Collection?"
          },
          "splitRule": {
            "description": "Add the size of your test groups. Mandatory if abTesting = true & 'recipients' is passed. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else",
            "type": "integer",
            "format": "int64",
            "maximum": 50,
            "minimum": 1,
            "example": 50
          },
          "winnerCriteria": {
            "type": "string",
            "enum": [
              "open",
              "click"
            ],
            "description": "Choose the metrics that will determinate the winning version. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed",
            "example": "open"
          },
          "winnerDelay": {
            "description": "Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed",
            "type": "integer",
            "format": "int64",
            "maximum": 168,
            "minimum": 1,
            "example": 50
          },
          "ipWarmupEnable": {
            "description": "Available for dedicated ip clients. Set this to true if you wish to warm up your ip.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "initialQuota": {
            "description": "Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.",
            "type": "integer",
            "format": "int64",
            "example": 3000
          },
          "increaseRate": {
            "description": "Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 100,
            "example": 70
          }
        }
      },
      "updateEmailCampaign": {
        "type": "object",
        "properties": {
          "tag": {
            "description": "Tag of the campaign",
            "type": "string",
            "example": "Newsletter"
          },
          "sender": {
            "type": "object",
            "description": "Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`",
            "properties": {
              "name": {
                "description": "Sender Name from which the campaign emails are sent",
                "type": "string",
                "example": "Mary from MyShop"
              },
              "email": {
                "description": "Sender email from which the campaign emails are sent",
                "type": "string",
                "format": "email",
                "example": "newsletter@myshop.com"
              },
              "id": {
                "description": "Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).",
                "type": "integer",
                "format": "int64",
                "example": 3
              }
            }
          },
          "name": {
            "description": "Name of the campaign",
            "type": "string",
            "example": "Newsletter - May 2017"
          },
          "htmlContent": {
            "description": "Body of the message (HTML version). REQUIRED if htmlUrl is empty",
            "type": "string",
            "example": "Spring is here, discover my new collection"
          },
          "htmlUrl": {
            "description": "Url which contents the body of the email message. REQUIRED if htmlContent is empty",
            "type": "string",
            "format": "url",
            "example": "https://html.domain.com"
          },
          "scheduledAt": {
            "description": "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).",
            "type": "string",
            "format": "date-time",
            "example": "2017-06-01T12:30:00+02:00"
          },
          "subject": {
            "description": "Subject of the campaign",
            "type": "string",
            "example": "Discover the New Collection !"
          },
          "replyTo": {
            "description": "Email on which campaign recipients will be able to reply to",
            "type": "string",
            "format": "email",
            "example": "support@myshop.com"
          },
          "toField": {
            "description": "To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization",
            "type": "string",
            "example": "{FNAME} {LNAME}"
          },
          "recipients": {
            "type": "object",
            "description": "List ids to include/exclude from campaign",
            "properties": {
              "exclusionListIds": {
                "description": "List ids which have to be excluded from a campaign",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 8
                }
              },
              "listIds": {
                "description": "Lists Ids to send the campaign to. REQUIRED if already not present in campaign and scheduledAt is not empty",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 32
                }
              }
            }
          },
          "attachmentUrl": {
            "description": "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps",
            "type": "string",
            "format": "url",
            "example": "https://attachment.domain.com"
          },
          "inlineImageActivation": {
            "description": "Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "mirrorActive": {
            "description": "Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign",
            "type": "boolean",
            "example": true
          },
          "recurring": {
            "description": "FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "footer": {
            "description": "Footer of the email campaign",
            "type": "string",
            "example": "[DEFAULT_FOOTER]"
          },
          "header": {
            "description": "Header of the email campaign",
            "type": "string",
            "example": "[DEFAULT_HEADER]"
          },
          "utmCampaign": {
            "description": "Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed",
            "type": "string",
            "example": "NL_05_2017"
          },
          "params": {
            "type": "object",
            "description": "Pass the set of attributes to customize the type 'classic' campaign. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'",
            "example": {
              "FNAME": "Joe",
              "LNAME": "Doe"
            }
          },
          "sendAtBestTime": {
            "type": "boolean",
            "description": "Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.",
            "example": true
          },
          "abTesting": {
            "description": "Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "subjectA": {
            "description": "Subject A of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value",
            "type": "string",
            "example": "Discover the New Collection!"
          },
          "subjectB": {
            "description": "Subject B of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value",
            "type": "string",
            "example": "Want to discover the New Collection?"
          },
          "splitRule": {
            "description": "Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else",
            "type": "integer",
            "format": "int64",
            "maximum": 50,
            "minimum": 1,
            "example": 50
          },
          "winnerCriteria": {
            "type": "string",
            "enum": [
              "open",
              "click"
            ],
            "description": "Choose the metrics that will determinate the winning version. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record",
            "example": "open"
          },
          "winnerDelay": {
            "description": "Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record",
            "type": "integer",
            "format": "int64",
            "maximum": 168,
            "minimum": 1,
            "example": 50
          },
          "ipWarmupEnable": {
            "description": "Available for dedicated ip clients. Set this to true if you wish to warm up your ip.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "initialQuota": {
            "description": "Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.",
            "type": "integer",
            "format": "int64",
            "example": 3000
          },
          "increaseRate": {
            "description": "Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 100,
            "example": 70
          }
        }
      },
      "getSharedTemplateUrl": {
        "type": "object",
        "required": [
          "sharedUrl"
        ],
        "properties": {
          "sharedUrl": {
            "type": "string",
            "format": "url",
            "description": "A unique URL for the email campaign or transactional template. This URL can be shared with other Sendinblue users.",
            "example": "https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-"
          }
        }
      },
      "abTestCampaignResult": {
        "type": "object",
        "properties": {
          "winningVersion": {
            "type": "string",
            "description": "Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.",
            "enum": [
              "notAvailable",
              "pending",
              "tie",
              "A",
              "B"
            ],
            "example": "A"
          },
          "winningCriteria": {
            "type": "string",
            "description": "Criteria choosen for winning version (Open/Click)",
            "enum": [
              "Open",
              "Click"
            ],
            "example": "Open"
          },
          "winningSubjectLine": {
            "type": "string",
            "description": "Subject Line of current winning version",
            "example": "Subject Line A"
          },
          "openRate": {
            "type": "string",
            "description": "Open rate for current winning version",
            "example": "70%"
          },
          "clickRate": {
            "type": "string",
            "description": "Click rate for current winning version",
            "example": "70%"
          },
          "winningVersionRate": {
            "type": "string",
            "description": "Open/Click rate for the winner version",
            "example": "70%"
          },
          "statistics": {
            "type": "object",
            "required": [
              "openers",
              "clicks",
              "unsubscribed",
              "hardBounces",
              "softBounces",
              "complaints"
            ],
            "properties": {
              "openers": {
                "$ref": "#/components/schemas/abTestVersionStats"
              },
              "clicks": {
                "$ref": "#/components/schemas/abTestVersionStats"
              },
              "unsubscribed": {
                "$ref": "#/components/schemas/abTestVersionStats"
              },
              "hardBounces": {
                "$ref": "#/components/schemas/abTestVersionStats"
              },
              "softBounces": {
                "$ref": "#/components/schemas/abTestVersionStats"
              },
              "complaints": {
                "$ref": "#/components/schemas/abTestVersionStats"
              }
            }
          },
          "clickedLinks": {
            "type": "object",
            "required": [
              "Version A",
              "Version B"
            ],
            "properties": {
              "Version A": {
                "$ref": "#/components/schemas/abTestVersionClicks"
              },
              "Version B": {
                "$ref": "#/components/schemas/abTestVersionClicks"
              }
            }
          }
        }
      },
      "emailExportRecipients": {
        "type": "object",
        "required": [
          "recipientsType"
        ],
        "properties": {
          "notifyURL": {
            "description": "Webhook called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          },
          "recipientsType": {
            "description": "Type of recipients to export for a campaign",
            "enum": [
              "all",
              "nonClickers",
              "nonOpeners",
              "clickers",
              "openers",
              "softBounces",
              "hardBounces",
              "unsubscribed"
            ],
            "type": "string",
            "example": "openers"
          }
        }
      },
      "requestSmsRecipientExport": {
        "type": "object",
        "required": [
          "recipientsType"
        ],
        "properties": {
          "notifyURL": {
            "description": "URL that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          },
          "recipientsType": {
            "description": "Filter the recipients based on how they interacted with the campaign",
            "enum": [
              "all",
              "delivered",
              "answered",
              "softBounces",
              "hardBounces",
              "unsubscribed"
            ],
            "type": "string",
            "example": "answered"
          }
        }
      },
      "sendReport": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "language": {
            "description": "Language of email content for campaign report sending.",
            "enum": [
              "fr",
              "es",
              "pt",
              "it",
              "de",
              "en"
            ],
            "default": "fr",
            "type": "string",
            "example": "en"
          },
          "email": {
            "type": "object",
            "required": [
              "to",
              "body"
            ],
            "description": "Custom attributes for the report email.",
            "properties": {
              "to": {
                "description": "Email addresses of the recipients",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the recipient",
                  "example": "jim.suehan@example.com"
                }
              },
              "body": {
                "description": "Custom text message to be presented in the report email.",
                "type": "string",
                "example": "Please find attached the report of our last email campaign."
              }
            }
          }
        }
      },
      "uploadImageToGallery": {
        "type": "object",
        "required": [
          "imageUrl"
        ],
        "properties": {
          "imageUrl": {
            "description": "The absolute url of the image (no local file). Maximum allowed size for image is 2MB. Allowed extensions for images are - jpeg, jpg, png, bmp, gif.",
            "type": "string",
            "example": "https://somedomain.com/image1.jpg"
          },
          "name": {
            "description": "Name of the image.",
            "type": "string",
            "example": "nature.jpg"
          }
        }
      },
      "sendSmtpEmail": {
        "type": "object",
        "required": [
          "to"
        ],
        "properties": {
          "sender": {
            "description": "Mandatory if 'templateId' is not passed. Pass name (optional) and email of sender from which emails will be sent. For example, {\"name\":\"Mary from MyShop\", \"email\":\"no-reply@myshop.com\"}",
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "name": {
                "description": "Name of the sender from which the emails will be sent. Maximum allowed characters are 70.",
                "type": "string",
                "example": "Mary from MyShop"
              },
              "email": {
                "description": "Email of the sender from which the emails will be sent",
                "type": "string",
                "format": "email",
                "example": "no-reply@myshop.com"
              }
            }
          },
          "to": {
            "description": "List of email addresses and names (optional) of the recipients. For example, [{\"name\":\"Jimmy\", \"email\":\"jimmy98@example.com\"}, {\"name\":\"Joe\", \"email\":\"joe@example.com\"}]",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "description": "Email address of the recipient",
                  "type": "string",
                  "format": "email",
                  "example": "jimmy98@example.com"
                },
                "name": {
                  "description": "Name of the recipient. Maximum allowed characters are 70.",
                  "type": "string",
                  "example": "Jimmy"
                }
              }
            }
          },
          "bcc": {
            "description": "List of email addresses and names (optional) of the recipients in bcc",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "description": "Email address of the recipient in bcc",
                  "type": "string",
                  "format": "email",
                  "example": "helen9766@example.com"
                },
                "name": {
                  "description": "Name of the recipient in bcc. Maximum allowed characters are 70.",
                  "type": "string",
                  "example": "Helen"
                }
              }
            }
          },
          "cc": {
            "description": "List of email addresses and names (optional) of the recipients in cc",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "description": "Email address of the recipient in cc",
                  "type": "string",
                  "format": "email",
                  "example": "ann6533@example.com"
                },
                "name": {
                  "description": "Name of the recipient in cc. Maximum allowed characters are 70.",
                  "type": "string",
                  "example": "Ann"
                }
              }
            }
          },
          "htmlContent": {
            "description": "HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )",
            "type": "string",
            "example": "<!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please confirm your email address by clicking on the link below</p> </body> </html>"
          },
          "textContent": {
            "description": "Plain Text body of the message ( Ignored if 'templateId' is passed )",
            "type": "string",
            "example": "Please confirm your email address by clicking on the link https://text.domain.com"
          },
          "subject": {
            "description": "Subject of the message. Mandatory if 'templateId' is not passed",
            "type": "string",
            "example": "Login Email confirmation"
          },
          "replyTo": {
            "description": "Email (required), along with name (optional), on which transactional mail recipients will be able to reply back. For example, {\"email\":\"ann6533@example.com\", \"name\":\"Ann\"}.",
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "description": "Email address in reply to",
                "type": "string",
                "format": "email",
                "example": "ann6533@example.com"
              },
              "name": {
                "description": "Name in reply to. Maximum allowed characters are 70.",
                "type": "string",
                "example": "Ann"
              }
            }
          },
          "attachment": {
            "description": "Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{\"url\":\"https://attachment.domain.com/myAttachmentFromUrl.jpg\", \"name\":\"myAttachmentFromUrl.jpg\"}, {\"content\":\"base64 example content\", \"name\":\"myAttachmentFromBase64.jpg\"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "Absolute url of the attachment (no local file).",
                  "type": "string",
                  "format": "url",
                  "example": "https://attachment.domain.com/myAttachmentFromUrl.jpg"
                },
                "content": {
                  "description": "Base64 encoded chunk data of the attachment generated on the fly",
                  "type": "string",
                  "format": "byte",
                  "example": "b3JkZXIucGRm"
                },
                "name": {
                  "description": "Required if content is passed. Name of the attachment",
                  "type": "string",
                  "example": "myAttachment.png"
                }
              }
            }
          },
          "headers": {
            "type": "object",
            "description": "Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{\"sender.ip\":\"1.2.3.4\", \"X-Mailin-custom\":\"some_custom_header\", \"idempotencyKey\":\"abc-123\"}`.",
            "example": {
              "sender.ip": "1.2.3.4",
              "X-Mailin-custom": "some_custom_header",
              "idempotencyKey": "abc-123"
            }
          },
          "templateId": {
            "description": "Id of the template",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "params": {
            "type": "object",
            "description": "Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. It's considered only if template is in New Template Language format.",
            "example": {
              "FNAME": "Joe",
              "LNAME": "Doe"
            }
          },
          "tags": {
            "description": "Tag your emails to find them more easily",
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag1"
            }
          }
        }
      },
      "deleteHardbounces": {
        "type": "object",
        "properties": {
          "startDate": {
            "description": "Starting date (YYYY-MM-DD) of the time period for deletion. The hardbounces occurred after this date will be deleted. Must be less than or equal to the endDate",
            "type": "string",
            "example": "2016-12-31"
          },
          "endDate": {
            "description": "Ending date (YYYY-MM-DD) of the time period for deletion. The hardbounces until this date will be deleted. Must be greater than or equal to the startDate",
            "type": "string",
            "example": "2017-01-31"
          },
          "contactEmail": {
            "description": "Target a specific email address",
            "type": "string",
            "format": "email",
            "example": "alex76@example.com"
          }
        }
      },
      "createWebhook": {
        "type": "object",
        "required": [
          "url",
          "events"
        ],
        "properties": {
          "url": {
            "description": "URL of the webhook",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          },
          "description": {
            "description": "Description of the webhook",
            "type": "string",
            "example": "Webhook triggered on unsubscription"
          },
          "events": {
            "description": "Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "sent",
                "hardBounce",
                "softBounce",
                "blocked",
                "spam",
                "delivered",
                "request",
                "click",
                "invalid",
                "deferred",
                "opened",
                "uniqueOpened",
                "unsubscribed",
                "listAddition",
                "contactUpdated",
                "contactDeleted"
              ],
              "example": "unsubscribed"
            }
          },
          "type": {
            "description": "Type of the webhook",
            "enum": [
              "transactional",
              "marketing"
            ],
            "default": "transactional",
            "type": "string",
            "example": "marketing"
          }
        }
      },
      "updateWebhook": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL of the webhook",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          },
          "description": {
            "description": "Description of the webhook",
            "type": "string",
            "example": "Webhook triggered on contact hardbounce"
          },
          "events": {
            "description": "Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` and `delivered`",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "hardBounce",
                "softBounce",
                "blocked",
                "spam",
                "delivered",
                "request",
                "click",
                "invalid",
                "deferred",
                "opened",
                "uniqueOpened",
                "unsubscribed",
                "listAddition",
                "contactUpdated",
                "contactDeleted"
              ],
              "example": "hardBounce"
            }
          }
        }
      },
      "createDoiContact": {
        "type": "object",
        "required": [
          "email",
          "includeListIds",
          "templateId",
          "redirectionUrl"
        ],
        "properties": {
          "email": {
            "description": "Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.",
            "type": "string",
            "format": "email",
            "example": "elly@example.com"
          },
          "attributes": {
            "description": "Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {'FNAME':'Elly', 'LNAME':'Roger'}",
            "type": "object",
            "example": {
              "FNAME": "Elly",
              "LNAME": "Roger"
            }
          },
          "includeListIds": {
            "description": "Lists under user account where contact should be added",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Id of the list",
              "example": 36
            }
          },
          "excludeListIds": {
            "description": "Lists under user account where contact should not be added",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Id of the list",
              "example": 36
            }
          },
          "templateId": {
            "description": "Id of the Double opt-in (DOI) template",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "redirectionUrl": {
            "description": "URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          }
        }
      },
      "createContact": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email address of the user. Mandatory if \"SMS\" field is not passed in \"attributes\" parameter. Mobile Number in \"SMS\" field should be passed with proper country code. For example {\"SMS\":\"+91xxxxxxxxxx\"} or {\"SMS\":\"0091xxxxxxxxxx\"}",
            "type": "string",
            "format": "email",
            "example": "elly@example.com"
          },
          "attributes": {
            "description": "Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {\"FNAME\":\"Elly\", \"LNAME\":\"Roger\"}",
            "type": "object",
            "example": {
              "FNAME": "Elly",
              "LNAME": "Roger"
            }
          },
          "emailBlacklisted": {
            "description": "Set this field to blacklist the contact for emails (emailBlacklisted = true)",
            "type": "boolean",
            "example": false
          },
          "smsBlacklisted": {
            "description": "Set this field to blacklist the contact for SMS (smsBlacklisted = true)",
            "type": "boolean",
            "example": false
          },
          "listIds": {
            "description": "Ids of the lists to add the contact to",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Id of the list to add the contact to",
              "example": 36
            }
          },
          "updateEnabled": {
            "description": "Facilitate to update the existing contact in the same request (updateEnabled = true)",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "smtpBlacklistSender": {
            "description": "transactional email forbidden sender for contact. Use only for email Contact ( only available if updateEnabled = true )",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        }
      },
      "updateContact": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "description": "Pass the set of attributes to be updated. These attributes must be present in your account. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, `{ \"EMAIL\":\"newemail@domain.com\", \"FNAME\":\"Ellie\", \"LNAME\":\"Roger\"}`. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in \"SMS\" field should be passed with proper country code. For example {\"SMS\":\"+91xxxxxxxxxx\"} or {\"SMS\":\"0091xxxxxxxxxx\"}",
            "example": {
              "EMAIL": "newemail@domain.com",
              "FNAME": "Ellie",
              "LNAME": "Roger"
            }
          },
          "emailBlacklisted": {
            "description": "Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)",
            "type": "boolean",
            "example": false
          },
          "smsBlacklisted": {
            "description": "Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)",
            "type": "boolean",
            "example": true
          },
          "listIds": {
            "description": "Ids of the lists to add the contact to",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Id of the list to add the contact to",
              "example": 65
            }
          },
          "unlinkListIds": {
            "description": "Ids of the lists to remove the contact from",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Id of the list to remove the contact from",
              "example": 36
            }
          },
          "smtpBlacklistSender": {
            "description": "transactional email forbidden sender for contact. Use only for email Contact",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        }
      },
      "createAttribute": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Value of the attribute. Use only if the attribute's category is 'calculated' or 'global'",
            "type": "string",
            "example": "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
          },
          "enumeration": {
            "description": "List of values and labels that the attribute can take. Use only if the attribute's category is \"category\". For example, [{\"value\":1, \"label\":\"male\"}, {\"value\":2, \"label\":\"female\"}]",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "value",
                "label"
              ],
              "properties": {
                "value": {
                  "description": "Id of the value",
                  "type": "integer",
                  "example": 1
                },
                "label": {
                  "description": "Label of the value",
                  "type": "string",
                  "example": "Women"
                }
              }
            }
          },
          "type": {
            "description": "Type of the attribute. Use only if the attribute's category is 'normal', 'category' or 'transactional' ( type 'boolean' is only available if the category is 'normal' attribute, type 'id' is only available if the category is 'transactional' attribute & type 'category' is only available if the category is 'category' attribute )",
            "type": "string",
            "enum": [
              "text",
              "date",
              "float",
              "boolean",
              "id",
              "category"
            ],
            "example": "text"
          }
        }
      },
      "updateAttribute": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Value of the attribute to update. Use only if the attribute's category is 'calculated' or 'global'",
            "type": "string",
            "example": "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
          },
          "enumeration": {
            "description": "List of the values and labels that the attribute can take. Use only if the attribute's category is \"category\". For example, [{\"value\":1, \"label\":\"male\"}, {\"value\":2, \"label\":\"female\"}]",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "value",
                "label"
              ],
              "properties": {
                "value": {
                  "description": "Id of the value",
                  "type": "integer",
                  "example": 1
                },
                "label": {
                  "description": "Label of the value",
                  "type": "string",
                  "example": "Men"
                }
              }
            }
          }
        }
      },
      "createList": {
        "type": "object",
        "required": [
          "name",
          "folderId"
        ],
        "properties": {
          "name": {
            "description": "Name of the list",
            "type": "string",
            "example": "Magento Customer - ES"
          },
          "folderId": {
            "description": "Id of the parent folder in which this list is to be created",
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        }
      },
      "updateList": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the list. Either of the two parameters (name, folderId) can be updated at a time.",
            "type": "string",
            "example": "Magento Customer - ES"
          },
          "folderId": {
            "description": "Id of the folder in which the list is to be moved. Either of the two parameters (name, folderId) can be updated at a time.",
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        }
      },
      "requestContactExport": {
        "type": "object",
        "properties": {
          "exportAttributes": {
            "description": "List of all the attributes that you want to export. These attributes must be present in your contact database. For example, ['fname', 'lname', 'email'].",
            "type": "array",
            "items": {
              "type": "string",
              "example": "NAME"
            }
          },
          "contactFilter": {
            "description": "This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {\"blacklisted\":true} will export all the blacklisted contacts.\n",
            "type": "object",
            "example": {
              "blacklisted": true,
              "listid.id": 32
            }
          },
          "customContactFilter": {
            "description": "Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.",
            "type": "object",
            "properties": {
              "actionForContacts": {
                "description": "Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.\n",
                "type": "string",
                "enum": [
                  "allContacts",
                  "subscribed",
                  "unsubscribed",
                  "unsubscribedPerList"
                ]
              },
              "actionForEmailCampaigns": {
                "description": "Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).\n",
                "type": "string",
                "enum": [
                  "openers",
                  "nonOpeners",
                  "clickers",
                  "nonClickers",
                  "unsubscribed",
                  "hardBounces",
                  "softBounces"
                ]
              },
              "actionForSmsCampaigns": {
                "description": "Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.\n",
                "type": "string",
                "enum": [
                  "hardBounces",
                  "softBounces",
                  "unsubscribed"
                ]
              },
              "listId": {
                "description": "Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter.",
                "type": "integer",
                "format": "int64",
                "example": 2
              },
              "emailCampaignId": {
                "description": "Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.",
                "type": "integer",
                "format": "int64",
                "example": 12
              },
              "smsCampaignId": {
                "description": "Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.",
                "type": "integer",
                "format": "int64",
                "example": 12
              }
            }
          },
          "notifyUrl": {
            "description": "Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          }
        }
      },
      "requestContactImport": {
        "type": "object",
        "properties": {
          "fileUrl": {
            "description": "Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv",
            "type": "string",
            "format": "url",
            "example": "https://importfile.domain.com"
          },
          "fileBody": {
            "description": "Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.",
            "type": "string",
            "example": "NAME;SURNAME;EMAIL\\n\"Smith\";\"John\";\"john.smith@example.com\"\\n\"Roger\";\"Ellie\";\"ellie36@example.com"
          },
          "listIds": {
            "description": "Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "List Id in which the contacts shall be imported",
              "example": 76
            }
          },
          "notifyUrl": {
            "description": "URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          },
          "newList": {
            "type": "object",
            "description": "To create a new list and import the contacts into it, pass the listName and an optional folderId.",
            "properties": {
              "listName": {
                "description": "List with listName will be created first and users will be imported in it (Mandatory if listIds is empty).",
                "type": "string",
                "example": "ContactImport - 2017-05"
              },
              "folderId": {
                "description": "Id of the folder where this new list shall be created (Mandatory if listName is not empty).",
                "type": "integer",
                "format": "int64",
                "example": 2
              }
            }
          },
          "emailBlacklist": {
            "description": "To blacklist all the contacts for email",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "smsBlacklist": {
            "description": "To blacklist all the contacts for sms",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "updateExistingContacts": {
            "description": "To facilitate the choice to update the existing contacts",
            "type": "boolean",
            "default": true,
            "example": true
          },
          "emptyContactsAttributes": {
            "description": "To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true )",
            "type": "boolean",
            "default": false,
            "example": true
          }
        }
      },
      "createSmsCampaign": {
        "type": "object",
        "required": [
          "name",
          "sender",
          "content"
        ],
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "type": "string",
            "example": "Spring Promo Code"
          },
          "sender": {
            "description": "Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**",
            "type": "string",
            "maxLength": 15,
            "example": "MyShop"
          },
          "content": {
            "description": "Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS",
            "type": "string",
            "example": "Get a discount by visiting our NY store and saying : Happy Spring !"
          },
          "recipients": {
            "type": "object",
            "required": [
              "listIds"
            ],
            "properties": {
              "listIds": {
                "description": "Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "description": "List Id to send the campaign to",
                  "example": 54
                }
              },
              "exclusionListIds": {
                "description": "List ids which have to be excluded from a campaign",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "description": "List Id to exclude from the campaign",
                  "example": 15
                }
              }
            }
          },
          "scheduledAt": {
            "description": "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.",
            "type": "string",
            "format": "date-time",
            "example": "2017-05-05T12:30:00+02:00"
          }
        }
      },
      "updateSmsCampaign": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "type": "string",
            "example": "Spring Promo Code"
          },
          "sender": {
            "description": "Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**",
            "type": "string",
            "maxLength": 15,
            "example": "MyShop"
          },
          "content": {
            "description": "Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS",
            "type": "string",
            "example": "Get a discount by visiting our NY store and saying : Happy Spring!"
          },
          "recipients": {
            "type": "object",
            "required": [
              "listIds"
            ],
            "properties": {
              "listIds": {
                "description": "Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "description": "List Id to send the campaign to",
                  "example": 54
                }
              },
              "exclusionListIds": {
                "description": "List ids which have to be excluded from a campaign",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "description": "List Id to exclude from the campaign",
                  "example": 15
                }
              }
            }
          },
          "scheduledAt": {
            "description": "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.",
            "type": "string",
            "format": "date-time",
            "example": "2017-05-05T12:30:00+02:00"
          }
        }
      },
      "sendTransacSms": {
        "type": "object",
        "required": [
          "sender",
          "recipient",
          "content"
        ],
        "properties": {
          "sender": {
            "description": "Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**",
            "type": "string",
            "maxLength": 15,
            "example": "MyShop"
          },
          "recipient": {
            "description": "Mobile number to send SMS with the country code",
            "type": "string",
            "example": "33689965433"
          },
          "content": {
            "description": "Content of the message. If more than 160 characters long, will be sent as multiple text messages",
            "type": "string",
            "example": "Enter this code:CCJJG8 to validate your account"
          },
          "type": {
            "description": "Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.",
            "enum": [
              "transactional",
              "marketing"
            ],
            "default": "transactional",
            "type": "string",
            "example": "marketing"
          },
          "tag": {
            "description": "Tag of the message",
            "type": "string",
            "example": "accountValidation"
          },
          "webUrl": {
            "description": "Webhook to call for each event triggered by the message (delivered etc.)",
            "type": "string",
            "format": "url",
            "example": "http://requestb.in/173lyyx1"
          }
        }
      },
      "sendTestEmail": {
        "type": "object",
        "properties": {
          "emailTo": {
            "description": "List of the email addresses of the recipients whom you wish to send the test mail. If left empty, the test mail will be sent to your entire test list.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email addres of the recipient",
              "example": "helen.jurger@example.com"
            }
          }
        }
      },
      "sendTestSms": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "description": "Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted",
            "type": "string",
            "example": "33689965433"
          }
        }
      },
      "getTransacAggregatedSmsReport": {
        "type": "object",
        "required": [
          "range",
          "requests",
          "delivered",
          "softBounces",
          "hardBounces",
          "blocked",
          "unsubscribed",
          "replied",
          "accepted",
          "rejected"
        ],
        "properties": {
          "range": {
            "type": "string",
            "description": "Time frame of the report",
            "example": "2016-09-08|2017-04-06"
          },
          "requests": {
            "type": "integer",
            "format": "int64",
            "description": "Number of requests for the timeframe",
            "example": 263
          },
          "delivered": {
            "type": "integer",
            "format": "int64",
            "description": "Number of delivered SMS for the timeframe",
            "example": 249
          },
          "hardBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of hardbounces for the timeframe",
            "example": 1
          },
          "softBounces": {
            "type": "integer",
            "format": "int64",
            "description": "Number of softbounces for the timeframe",
            "example": 4
          },
          "blocked": {
            "type": "integer",
            "format": "int64",
            "description": "Number of blocked contact for the timeframe",
            "example": 2
          },
          "unsubscribed": {
            "type": "integer",
            "format": "int64",
            "description": "Number of unsubscription for the timeframe",
            "example": 6
          },
          "replied": {
            "type": "integer",
            "format": "int64",
            "description": "Number of answered SMS for the timeframe",
            "example": 12
          },
          "accepted": {
            "type": "integer",
            "format": "int64",
            "description": "Number of accepted for the timeframe",
            "example": 252
          },
          "rejected": {
            "type": "integer",
            "format": "int64",
            "description": "Number of rejected for the timeframe",
            "example": 8
          }
        }
      },
      "getTransacSmsReport": {
        "type": "object",
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "date",
                "requests",
                "delivered",
                "softBounces",
                "hardBounces",
                "blocked",
                "unsubscribed",
                "replied",
                "accepted",
                "rejected"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Date for which statistics are retrieved",
                  "example": "2017-03-17"
                },
                "requests": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of requests for the date",
                  "example": 87
                },
                "delivered": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of delivered SMS for the date",
                  "example": 85
                },
                "hardBounces": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of hardbounces for the date",
                  "example": 1
                },
                "softBounces": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of softbounces for the date",
                  "example": 1
                },
                "blocked": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of blocked contact for the date",
                  "example": 0
                },
                "unsubscribed": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of unsubscription for the date",
                  "example": 1
                },
                "replied": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of answered SMS for the date",
                  "example": 2
                },
                "accepted": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of accepted for the date",
                  "example": 85
                },
                "rejected": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of rejected for the date",
                  "example": 1
                }
              }
            }
          }
        }
      },
      "getIp": {
        "type": "object",
        "required": [
          "id",
          "ip",
          "active",
          "domain"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the dedicated IP",
            "example": 3
          },
          "ip": {
            "type": "string",
            "description": "Dedicated IP",
            "example": "123.65.8.22"
          },
          "active": {
            "type": "boolean",
            "description": "Status of the IP (true=active, false=inactive)",
            "example": true
          },
          "domain": {
            "type": "string",
            "description": "Domain associated to the IP",
            "example": "mailing.myshop.com"
          }
        }
      },
      "getIpsFromSender": {
        "type": "object",
        "required": [
          "ips"
        ],
        "properties": {
          "ips": {
            "description": "Dedicated IP(s) linked to a sender",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getIpFromSender"
            }
          }
        }
      },
      "getIps": {
        "type": "object",
        "required": [
          "ips"
        ],
        "properties": {
          "ips": {
            "type": "array",
            "description": "Dedicated IP(s) available on your account",
            "items": {
              "$ref": "#/components/schemas/getIp"
            }
          }
        }
      },
      "getIpFromSender": {
        "type": "object",
        "required": [
          "id",
          "ip",
          "domain",
          "weight"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the dedicated IP",
            "example": 3
          },
          "ip": {
            "type": "string",
            "description": "Dedicated IP",
            "example": "123.65.8.22"
          },
          "domain": {
            "type": "string",
            "description": "Domain associated to the IP",
            "example": "mailing.myshop.dom"
          },
          "weight": {
            "type": "integer",
            "format": "int64",
            "description": "Weight of the IP",
            "example": 75
          }
        }
      },
      "manageIp": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "Dedicated ID",
            "example": "123.65.8.22"
          }
        }
      },
      "sendEmail": {
        "type": "object",
        "required": [
          "emailTo"
        ],
        "properties": {
          "emailTo": {
            "description": "List of the email addresses of the recipients. For example, ['abc@example.com', 'asd@example.com'].",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email address of the recipient",
              "example": "john.smith@example.com"
            }
          },
          "emailBcc": {
            "description": "List of the email addresses of the recipients in bcc",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email address of the recipient in bcc",
              "example": "jeff87@example.com"
            }
          },
          "emailCc": {
            "description": "List of the email addresses of the recipients in cc",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "Email address of the recipient in cc",
              "example": "alex9877@example.com"
            }
          },
          "replyTo": {
            "description": "Email address which shall be used by campaign recipients to reply back",
            "type": "string",
            "format": "email",
            "example": "support@myshop.com"
          },
          "attachmentUrl": {
            "description": "Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps",
            "type": "string",
            "format": "url",
            "example": "https://attachment.domain.com"
          },
          "attachment": {
            "description": "Pass the list of content (base64 encoded) and name of the attachment. For example, [{\"content\":\"base64 encoded content 1\", \"name\":\"attcahment1\"}, {\"content\":\"base64 encoded content 2\", \"name\":\"attcahment2\"}].",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "content",
                "name"
              ],
              "properties": {
                "content": {
                  "description": "Base64 encoded chunk data of the attachment generated on the fly",
                  "type": "string",
                  "format": "byte",
                  "example": "b3JkZXIucGRm"
                },
                "name": {
                  "description": "Required for content. Name of the attachment",
                  "type": "string",
                  "example": "myAttachment.png"
                }
              }
            }
          },
          "headers": {
            "type": "object",
            "description": "Pass the set of headers that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {\"Content-Type\":\"text/html\", \"charset\":\"iso-8859-1\", \"sender.ip\":\"1.2.3.4\"}",
            "example": {
              "Content-Type": "text/html",
              "charset": "iso-8859-1",
              "sender.ip": "1.2.3.4"
            }
          },
          "attributes": {
            "type": "object",
            "description": "Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}",
            "example": {
              "FNAME": "Joe",
              "LNAME": "Doe"
            }
          },
          "tags": {
            "description": "Tag your emails to find them more easily",
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag1"
            }
          }
        }
      },
      "getTransacEmailContent": {
        "type": "object",
        "required": [
          "email",
          "subject",
          "date",
          "events",
          "body",
          "attachmentCount"
        ],
        "properties": {
          "email": {
            "description": "Email address to which transactional email has been sent",
            "type": "string",
            "format": "email",
            "example": "abc@example.com"
          },
          "subject": {
            "description": "Subject of the sent email",
            "type": "string",
            "example": "Summer Camp"
          },
          "templateId": {
            "description": "Id of the template",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "date": {
            "description": "Date on which transactional email was sent",
            "type": "string",
            "format": "date-time",
            "example": "2017-03-12T12:30:00Z"
          },
          "events": {
            "description": "Series of events which occurred on the transactional email",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "time"
              ],
              "properties": {
                "name": {
                  "description": "Name of the event that occurred on the sent email",
                  "type": "string",
                  "example": "delivered"
                },
                "time": {
                  "description": "Time at which the event occurred",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-03-12T12:30:00Z"
                }
              }
            }
          },
          "body": {
            "description": "Actual content of the transactional email that has been sent",
            "type": "string",
            "example": "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This is the actual html content sent</p> </body> </html>"
          },
          "attachmentCount": {
            "description": "Count of the attachments that were sent in the email",
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        }
      },
      "getTransacEmailsList": {
        "type": "object",
        "properties": {
          "transactionalEmails": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "email",
                "subject",
                "messageId",
                "uuid",
                "date"
              ],
              "properties": {
                "email": {
                  "description": "Email address to which transactional email has been sent",
                  "type": "string",
                  "format": "email",
                  "example": "john.smith@example.com"
                },
                "subject": {
                  "description": "Subject of the sent email",
                  "type": "string",
                  "example": "Summer Camp"
                },
                "templateId": {
                  "description": "Id of the template",
                  "type": "integer",
                  "format": "int64",
                  "example": 2
                },
                "messageId": {
                  "description": "Message Id of the sent email",
                  "type": "string",
                  "example": "<201798300811.5700093@relay.domain.com>"
                },
                "uuid": {
                  "description": "Unique id of the email sent to a particular contact",
                  "type": "string",
                  "example": "5a78c-209ok98262910-s99a341"
                },
                "date": {
                  "description": "Date on which transactional email was sent",
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-03-12T12:30:00Z"
                },
                "from": {
                  "description": "Email address of the sender from which the email was sent",
                  "type": "string",
                  "format": "email",
                  "example": "diana.doe@example.com"
                },
                "tags": {
                  "description": "Tags used for your email",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "tag1"
                  }
                }
              }
            }
          }
        }
      },
      "abTestVersionStats": {
        "description": "Percentage of a particular event for both versions",
        "type": "object",
        "required": [
          "Version A",
          "Version B"
        ],
        "properties": {
          "Version A": {
            "type": "string",
            "description": "percentage of an event for version A",
            "example": "50%"
          },
          "Version B": {
            "type": "string",
            "description": "percentage of an event for version B",
            "example": "50%"
          }
        }
      },
      "abTestVersionClicks": {
        "description": "Information on clicked links for a particular version",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "link",
            "clicksCount",
            "clickRate"
          ],
          "properties": {
            "link": {
              "type": "string",
              "description": "URL of the link",
              "example": "https://facbook.com/versionA"
            },
            "clicksCount": {
              "type": "number",
              "format": "int64",
              "description": "Number of times a link is clicked",
              "example": 3
            },
            "clickRate": {
              "type": "string",
              "description": "Percentage of clicks of link with respect to total clicks",
              "example": "40%"
            }
          }
        }
      },
      "blockDomain": {
        "type": "object",
        "required": [
          "domain"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "name of the domain to be blocked",
            "example": "example.com"
          }
        }
      },
      "getBlockedDomains": {
        "description": "list of blocked domains",
        "type": "object",
        "required": [
          "domains"
        ],
        "properties": {
          "domains": {
            "description": "List of all blocked domains",
            "type": "array",
            "items": {
              "type": "string",
              "description": "name of blocked domain",
              "example": "contact.com"
            }
          }
        }
      }
    }
  }
}