{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Checkout.com API Reference",
    "x-logo": {
      "url": "https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg",
      "altText": "Checkout.com API logo"
    },
    "contact": {
      "name": "Checkout.com Support",
      "url": "https://checkout.com",
      "email": "support@checkout.com"
    },
    "license": {
      "name": "Checkout.com",
      "url": "https://checkout.com/api/license/"
    },
    "termsOfService": "https://checkout.com/terms/",
    "description": "## Get started\nCheckout.com provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard <a href=\"https://www.checkout.com/docs/resources/codes/http-response-codes\">HTTP response codes</a>.\nYou can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href=\"https://www.checkout.com/docs/integrate/sdks\" target=\"_blank\">SDKs</a>.\nWe have a testing environment called sandbox, which you can <a href=\"https://www.checkout.com/get-test-account\">sign up for</a> to test API calls without affecting live data.\n### Base URLs\nUse the following base URLs when making requests to the APIs:\n\n  | Environment   |      Base URL                                        |\n  |---------------|------------------------------------------------------|\n  | Sandbox       |  https://api.sandbox.checkout.com/                   |\n  | Production    |  https://api.checkout.com/                           |\n\n### Looking for more guidance?\nDepending on what integration you need, we've provided <a href=\"https://www.checkout.com/docs/integrate/\">guides to get you set up</a>.\n### Not using APIs?\nWe've partnered with many popular <a href=\"https://www.checkout.com/docs/integrate/e-commerce-platforms\">e-commerce platforms</a> so you can get up and running quickly, processing online payments with one of our e-commerce plugins.\n# Authentication\nWhen you sign up for an account, you are given a secret and public API key pair. You authenticate with our API by providing the appropriate key in the request Authorization header.\nNever share your secret keys. Keep them guarded and secure.\n# Changelog\n\n  | Date       | Description of change                                                |\n  | ---------- | -------------------------------------------------------------------- |\n  | 2021/12/17 | Added `payment_type`, `payment_ip` and `billing_descriptor` to Hosted Payments and Payment Links Get endpoints. |\n  | 2021/11/19 | Added specification for \"Get Hosted Payments Page details\" endpoint. |\n  | 2021/11/11 | Added `3ds.challenge_indicator` to card payment requests.            |\n  | 2021/10/18 | Added `processing.purpose` to card payouts.                          |\n  | 2021/10/18 | Added `recommendation_code` to payment response.                     |\n"
  },
  "servers": [
    {
      "url": "https://api.checkout.com",
      "description": "Live API"
    },
    {
      "url": "https://api.sandbox.checkout.com",
      "description": "Sandbox API"
    }
  ],
  "tags": [
    {
      "name": "Payments",
      "description": "Process and manage payments from a variety of sources and to various destinations all within one integration."
    },
    {
      "name": "Payment Links",
      "description": "Create a Payment Link to accept and process payment details."
    },
    {
      "name": "Hosted Payments Page",
      "description": "Create a Hosted Payments Page to accept and process payment details."
    },
    {
      "name": "Sources",
      "description": "Create a payment source for a customer that you can use for one or more payments."
    },
    {
      "name": "Tokens",
      "description": "Create a token that represents a card's details (or their tokenized form in a digital wallet) that you can later use to request a payment, without you having to process or store any sensitive information."
    },
    {
      "name": "Instruments",
      "description": "Create a payment instrument that you can later use as the source or destination for one or more payments."
    },
    {
      "name": "Webhooks",
      "description": "Create and manage the webhook notifications you receive to keep up to date with the status of your transactions."
    },
    {
      "name": "Events",
      "description": "Use events to monitor and get insights into your transactions."
    },
    {
      "name": "Disputes",
      "description": "Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response."
    },
    {
      "name": "Reconciliation",
      "description": "Quickly find all fees associated with each of your payments, so you can concentrate on the important stuff while streamlining your financial reporting."
    },
    {
      "name": "Risk",
      "description": "Evaluate the risk of a transaction at the pre-authentication and pre-capture stages of the payment process."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Handle payments and payouts",
      "tags": [
        "Payments",
        "Payment Links",
        "Hosted Payments Page"
      ]
    },
    {
      "name": "Stored payment details",
      "tags": [
        "Tokens",
        "Sources",
        "Instruments",
        "Customers"
      ]
    },
    {
      "name": "Notifications",
      "tags": [
        "Events",
        "Webhooks"
      ]
    },
    {
      "name": "Disputes",
      "tags": [
        "Disputes"
      ]
    },
    {
      "name": "Risk management",
      "tags": [
        "Risk"
      ]
    },
    {
      "name": "Statements and reporting",
      "tags": [
        "Reconciliation"
      ]
    }
  ],
  "paths": {
    "/customers": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer",
        "operationId": "createCustomer",
        "description": "Create a customer which can be linked to one or more payment instruments, and can be passed as a source when making a payment, using the customer’s default instrument.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst customerResponse = await cko.customers.create({\n\t\temail: 'JohnTest@test.com',\n\t\tname: 'John Test',\n\t\tphone: {\n\t\t\tcountry_code: '+1',\n\t\t\tnumber: '4155552671',\n\t\t},\n\t\tmetadata: {\n\t\t\tcoupon_code: 'NY2018',\n\t\t\tpartner_id: 123989,\n\t\t},\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/customers/{identifier}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Get customer details",
        "operationId": "getCustomerDetails",
        "description": "Returns details of a customer and their instruments",
        "parameters": [
          {
            "in": "path",
            "name": "identifier",
            "required": true,
            "description": "The customer's ID or email",
            "schema": {
              "type": "string",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^(cus)_(\\w{26})$"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 255
                }
              },
              "additionalProperties": false,
              "oneOf": [
                {
                  "required": [
                    "id"
                  ]
                },
                {
                  "required": [
                    "email"
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGetResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "patch": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Update customer details",
        "operationId": "updateCustomerDetails",
        "description": "Update details of a customer",
        "parameters": [
          {
            "in": "path",
            "name": "identifier",
            "schema": {
              "type": "string",
              "pattern": "^(cus)_(\\w{26})$"
            },
            "required": true,
            "description": "The customer id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customer updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Customer not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Delete a customer",
        "operationId": "deleteCustomerDetails",
        "description": "Delete a customer and all of their linked payment instruments",
        "parameters": [
          {
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(cus)_(\\w{26})$"
            },
            "description": "The customer id"
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Customer not found or not associated with client"
          }
        }
      }
    },
    "/disputes": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Get disputes",
        "operationId": "getDisputes",
        "description": "Returns a list of all disputes against your business. The results will be returned in reverse chronological order, showing the last modified dispute (for example, where you've recently added a piece of evidence) first. You can use the optional parameters below to skip or limit results.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 250,
              "default": 50
            },
            "required": false,
            "description": "The numbers of results to return"
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "description": "The number of results to skip"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "required": false,
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "required": false,
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The unique identifier of the dispute"
          },
          {
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": "string",
              "example": "evidence_required,evidence_under_review"
            },
            "required": false,
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator"
          },
          {
            "in": "query",
            "name": "payment_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The unique identifier of the payment"
          },
          {
            "in": "query",
            "name": "payment_reference",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`"
          },
          {
            "in": "query",
            "name": "payment_arn",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank"
          },
          {
            "in": "query",
            "name": "this_channel_only",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business"
          }
        ],
        "responses": {
          "200": {
            "description": "Disputes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputePaged"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable paging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputesRequest = new GetDisputesRequest(limit: 5);\nvar getDisputesResponse = await api.Disputes.GetDisputesAsync(getDisputesRequest: getDisputesRequest);"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputes = await cko.disputes.get({\n\tlimit: 5,\n\tid: 'dsp_bc94ebda8d275i461229',\n});"
          }
        ]
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute details",
        "operationId": "getDisputeDetails",
        "description": "Returns all the details of a dispute using the dispute identifier.",
        "parameters": [
          {
            "in": "path",
            "name": "dispute_id",
            "schema": {
              "type": "string",
              "pattern": "^(dsp)_(\\w{26})$"
            },
            "required": true,
            "description": "The dispute identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputeResponse = await api.Disputes.GetDisputeAsync(id: \"dsp_bc94ebda8d275i461229\");"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputeDetails = await cko.disputes.getDetails('dsp_bc94ebda8d275i461229');"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/accept": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Accept dispute",
        "operationId": "acceptDispute",
        "description": "If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.",
        "parameters": [
          {
            "in": "path",
            "name": "dispute_id",
            "schema": {
              "type": "string",
              "pattern": "^(dsp)_(\\w{26})$"
            },
            "required": true,
            "description": "The dispute identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute accepted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Disputes.AcceptDisputeAsync(id: \"dsp_bc94ebda8d275i461229\");"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst accept = await cko.disputes.accept('dsp_bc94ebda8d275i461229');"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/evidence": {
      "put": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Provide dispute evidence",
        "operationId": "provideDisputeEvidence",
        "description": "Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by `file_`) which you can then use in your request.\nNote that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it.\n\n**You must provide at least one evidence type in the body of your request.**\n",
        "parameters": [
          {
            "in": "path",
            "name": "dispute_id",
            "schema": {
              "type": "string",
              "pattern": "^(dsp)_(\\w{26})$"
            },
            "required": true,
            "description": "The dispute identifier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvideEvidenceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Dispute evidence provided successfully"
          },
          "400": {
            "description": "Unprocessable"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar disputeEvidence = new DisputeEvidence()\n{\n    {\"additional_evidence_file\", \"file_jmbfgkjromvcrn9t4qu4\" },\n    {\"additional_evidence_text\", \"provide dispute evidence test\" }\n};\n\nawait api.Disputes.ProvideDisputeEvidenceAsync(\n                    id: \"dsp_bc94ebda8d275i461229\",\n                    disputeEvidence: disputeEvidence\n                );"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst evidence = await cko.disputes.provideEvidence('dsp_bc94ebda8d275i461229', {\n\tproof_of_delivery_or_service_text: 'http://checkout.com/document.pdf',\n});"
          }
        ]
      },
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute evidence",
        "operationId": "getDisputeEvidence",
        "description": "Retrieves a list of the evidence submitted in response to a specific dispute.\n",
        "parameters": [
          {
            "in": "path",
            "name": "dispute_id",
            "schema": {
              "type": "string",
              "pattern": "^(dsp)_(\\w{26})$"
            },
            "required": true,
            "description": "The dispute identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute evidence retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evidence"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputeEvidenceResponse = await api.Disputes.GetDisputeEvidenceAsync(id: \"dsp_bc94ebda8d275i461229\");"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getEvidence = await cko.disputes.getEvidence('dsp_bc94ebda8d275i461229');"
          }
        ]
      },
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Submit dispute evidence",
        "operationId": "submitDisputeEvidence",
        "description": "With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request. You will not be able to amend your evidence once you have submitted it.",
        "parameters": [
          {
            "in": "path",
            "name": "dispute_id",
            "schema": {
              "type": "string",
              "pattern": "^(dsp)_(\\w{26})$"
            },
            "required": true,
            "description": "The dispute identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute evidence submitted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Disputes.SubmitDisputeEvidenceAsync(id: \"dsp_bc94ebda8d275i461229\");"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst submitEvidence = await cko.disputes.submit('dsp_bc94ebda8d275i461229');"
          }
        ]
      }
    },
    "/event-types": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event types",
        "operationId": "retrieveEventTypes",
        "description": "Retrieve a list of event types grouped by their respective version that you can configure on your webhooks.",
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "The API version for which you want to retrieve the event types. Set this to `1.0` for the legacy API or `2.0` for the Unified Payments API. If no version is specified, event types for both versions will be returned.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Event types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypesObject"
                  }
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList<EventTypesResponse> allEventTypesResponses = api.eventsClient().retrieveAllEventTypes(null).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst events = await cko.events.retrieveEventTypes();"
          }
        ]
      }
    },
    "/events": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "operationId": "retrieveEvents",
        "description": "Retrieves events based on your query parameters.\n",
        "parameters": [
          {
            "in": "query",
            "name": "payment_id",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$",
              "description": "The identifier of a payment",
              "example": "pay_ok2ynq6ubn3ufmo6jsdfmdvy5q"
            }
          },
          {
            "in": "query",
            "name": "charge_id",
            "schema": {
              "type": "string",
              "pattern": "^(charge|charge_test)_(\\w{20})$",
              "description": "The identifier of a charge",
              "example": "charge_FC1919EE547L23CC6BE1"
            }
          },
          {
            "in": "query",
            "name": "track_id",
            "schema": {
              "type": "string",
              "description": "The tracking ID of a payment",
              "example": "TRK12345"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "schema": {
              "type": "string",
              "description": "The reference of a payment",
              "example": "ORD-5023-4E89"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer",
              "description": "Set how many events you want to skip",
              "example": 0
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "description": "Limit how many events your request returns",
              "example": 5
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Set the date and time from which you want to retrieve events",
              "example": "2020-11-07T04:00:00Z"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Set the date and time to which you want to retrieve events",
              "example": "2020-11-07T08:15:00Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Payment_Id"
                    },
                    {
                      "$ref": "#/components/schemas/Charge_Id"
                    }
                  ]
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entry",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentIdInvalidResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ChargeIdInvalidResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://api.checkout.com/broadcast/events?payment_id=pay_ok2ynq6ubn3ufmo6jsdfmdvy5q'\n  --header 'Authorization: secret_key_broadcast'"
          }
        ]
      }
    },
    "/events/{eventId}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event",
        "operationId": "retrieveEvent",
        "description": "Retrieves the event with the specified identifier string. The event `data` includes the full event details, the schema of which will vary based on the `type`.\n",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string",
              "pattern": "^(evt)_(\\w{26})$"
            },
            "required": true,
            "description": "The event identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventObject"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nEventResponse event = api.eventsClient().retrieveEvent(\"evt_c2qelfixai2u3es3ksovngkx3e\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst event = await cko.events.retrieveEvent('evt_c2qelfixai2u3es3ksovngkx3e');"
          }
        ]
      }
    },
    "/events/{eventId}/notifications/{notificationId}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event notification",
        "operationId": "retrieveEventNotification",
        "description": "Retrieves the attempts for a specific event notification",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string",
              "pattern": "^(evt)_(\\w{26})$"
            },
            "required": true,
            "description": "The event identifier"
          },
          {
            "in": "path",
            "name": "notificationId",
            "schema": {
              "type": "string",
              "pattern": "^(ntf)_(\\w{26})$"
            },
            "required": true,
            "description": "The notification identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or notification not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nEventNotificationResponse notification = api.eventsClient().retrieveEventNotification(\"evt_c2qelfixai2u3es3ksovngkx3e\", \"ntf_wqjkqpgjy33uxoywcej4fnw6qm\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst notification = await cko.events.retrieveEventNotification({\n\teventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n\tnotificationId: 'ntf_wqjkqpgjy33uxoywcej4fnw6qm',\n});"
          }
        ]
      }
    },
    "/events/{eventId}/webhooks/{webhookId}/retry": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retry webhook",
        "operationId": "retryWebhook",
        "description": "Retries a specific webhook notification for the given event",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string",
              "pattern": "^(evt)_(\\w{26})$"
            },
            "required": true,
            "description": "The event identifier"
          },
          {
            "in": "path",
            "name": "webhookId",
            "schema": {
              "type": "string",
              "pattern": "^(wh)_(\\w{32})$"
            },
            "required": true,
            "description": "The webhook identifier",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.eventsClient().retryWebhook(\"evt_c2qelfixai2u3es3ksovngkx3e\", \"wh_mpkyioafmajulnhjvwmrklenb4\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retry = await cko.events.retry({\n\teventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n\twebhookId: 'wh_mpkyioafmajulnhjvwmrklenb4',\n});"
          }
        ]
      }
    },
    "/events/{eventId}/webhooks/retry": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Retry all webhooks",
        "operationId": "retryAllWebhooks",
        "description": "Retries all webhook notifications configured for the specified event",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string",
              "pattern": "^(evt)_(\\w{26})$"
            },
            "required": true,
            "description": "The event identifier"
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.eventsClient().retryAllWebhooks(\"evt_c2qelfixai2u3es3ksovngkx3e\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retryAll = await cko.events.retryAll('evt_c2qelfixai2u3es3ksovngkx3e');"
          }
        ]
      }
    },
    "/files": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Upload file",
        "operationId": "uploadFile",
        "description": "Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar pathToFile = @\"test_file.png\";\n\nvar uploadFileResponse = await api.Files.UploadFileAsync(\n                                          pathToFile: pathToFile,\n                                          purpose: \"dispute_evidence\"\n                                        );"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst file = await cko.files.upload({\n\tpath: fs.createReadStream('./test/files/evidence.jpg'),\n\tpurpose: 'dispute_evidence',\n});"
          }
        ]
      }
    },
    "/files/{file_id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Disputes"
        ],
        "summary": "Get file information",
        "operationId": "getFileInformation",
        "description": "Retrieve information about a file that was previously uploaded.",
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The file identifier. It is always prefixed by `file_`."
          }
        ],
        "responses": {
          "200": {
            "description": "File information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResult"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          },
          "429": {
            "description": "Too many requests or duplicate request detected"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getFileResponse = await api.Files.GetFileAsync(id: \"file_zna32sccqbwevd3ldmejtplbhu\");"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getFile = await cko.files.getFile('file_zna32sccqbwevd3ldmejtplbhu');"
          }
        ]
      }
    },
    "/hosted-payments": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Hosted Payments Page"
        ],
        "summary": "Create a Hosted Payments Page session",
        "operationId": "createAHostedPaymentsSession",
        "description": "Create a Hosted Payments Page session and pass through all the payment information, like the amount, currency, country and reference.\n\nTo get started with our Hosted Payments Page, contact your Solutions Engineer or integration@checkout.com.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostedPaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Hosted Payments Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedPaymentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst hosted = await cko.hostedPayments.create({\n\t\tamount: 10,\n\t\tcurrency: 'USD',\n\t\tbilling: {\n\t\t\taddress: {\n\t\t\t\taddress_line1: 'Checkout.com',\n\t\t\t\taddress_line2: '90 Tottenham Court Road',\n\t\t\t\tcity: 'London',\n\t\t\t\tstate: 'London',\n\t\t\t\tzip: 'W1T 4TJ',\n\t\t\t\tcountry: 'GB',\n\t\t\t},\n\t\t},\n\t\tsuccess_url: 'https://example.com/success',\n\t\tcancel_url: 'https://example.com/cancel',\n\t\tfailure_url: 'https://example.com/failure',\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/hosted-payments/{id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Hosted Payments Page"
        ],
        "summary": "Get Hosted Payments Page details",
        "operationId": "getHostedPaymentsPageDetails",
        "description": "Retrieve details about a specific Hosted Payments Page using the ID returned when it was created. In the response, you will see the status of the Hosted Payments Page.<br><br>\nFor more information, see the <a target=\"_blank\" href=\"https://docs.checkout.com/integrate/hosted-payments-page\">Hosted Payments Page documentation</a>.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HostedPaymentId"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hosted Payments Page details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHostedPaymentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Hosted Payments Page not found"
          }
        }
      }
    },
    "/instruments": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Instruments"
        ],
        "summary": "Create an instrument",
        "operationId": "createAnInstrument",
        "description": "Exchange a single use Checkout.com token for a payment instrument reference, that can be used at any time to request one or more payments.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Instrument created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst instrument = await cko.instruments.create({\n\t\t// infered type \"token\",\n\t\ttoken: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/instruments/{id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument details",
        "operationId": "getInstrumentDetails",
        "description": "Returns details of an instrument",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(src)_(\\w{26})$"
            },
            "required": true,
            "description": "The instrument id"
          }
        ],
        "responses": {
          "200": {
            "description": "Instrument retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveInstrumentResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Instrument not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst instrument = await cko.instruments.get('src_udfsqsgpjykutgs26fiejgizau');\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      },
      "patch": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Instruments"
        ],
        "summary": "Update instrument details",
        "operationId": "updateInstrumentDetails",
        "description": "Update details of an instrument",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(src)_(\\w{26})$",
              "example": "src_ubfj2q76miwundwlk72vxt2i7q"
            },
            "required": true,
            "description": "The instrument ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instrument updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInstrumentResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Instrument not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst instrumentResponse = await cko.instruments.update('src_udfsqsgpjykutgs26fiejgizau', {\n\t\texpiry_year: 2030,\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      },
      "delete": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Instruments"
        ],
        "summary": "Delete an instrument",
        "operationId": "removeInstrument",
        "description": "Delete a payment instrument.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(src)_(\\w{26})$",
              "example": "src_ubfj2q76miwundwlk72vxt2i7q"
            },
            "required": true,
            "description": "The payment instrument to be deleted"
          }
        ],
        "responses": {
          "204": {
            "description": "Instrument deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Instrument not found or not associated with client"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst deleteOutcome = await cko.instruments.delete(instrument.id);\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/payment-links": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payment Links"
        ],
        "summary": "Create a Payment Link",
        "operationId": "createAPaymentLinkSession",
        "description": "Create a Payment Link and pass through all the payment information, like the amount, currency, country and reference.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentLinksRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create Payment Link Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst linksResponse = await cko.paymentLinks.create({\n\t\tamount: 10359,\n\t\tcurrency: 'EUR',\n\t\tbilling: {\n\t\t\taddress: {\n\t\t\t\tcountry: 'DE',\n\t\t\t},\n\t\t},\n\t\tproducts: [\n\t\t\t{\n\t\t\t\tname: 'Moonlight blue lightsaber',\n\t\t\t\tquantity: 2,\n\t\t\t\tprice: 3999,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Stainless steel watch strap',\n\t\t\t\tquantity: 1,\n\t\t\t\tprice: 2361,\n\t\t\t},\n\t\t],\n\t\treturn_url: 'https://pay.sandbox.checkout.com/link/examples/docs',\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/payment-links/{id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payment Links"
        ],
        "summary": "Get Payment Link details",
        "operationId": "getPaymentLinkDetails",
        "description": "Retrieve details about a specific Payment Link using its ID returned when the link was created. In the response, you will see the status of the Payment Link.<br><br>\nFor more information, see the <a target=\"_blank\" href=\"https://docs.checkout.com/integrate/payment-links\">Payment Links documentation</a>.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentLinkId"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Link details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentLinkResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment Link session not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.paymentLinks.get('pl_XXXX');"
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Request a payment or payout",
        "operationId": "requestAPaymentOrPayout",
        "description": "To accept payments from <a href=\"https://docs.checkout.com/payment-methods/cards\" target=\"blank\">cards</a>, <a href=\"https://docs.checkout.com/payment-methods/wallets\" target=\"blank\">digital wallets</a> and many <a href=\"https://docs.checkout.com/payment-methods/\" target=\"blank\">alternative payment methods</a>, specify the `source.type` field, along with the source-specific data.\n\nTo <a href=\"https://docs.checkout.com/payment-actions/card-payouts\" target=\"blank\">pay out to a card</a>, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.\n\nTo verify the success of the payment, check the `approved` field in the response.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ckoIdempotencyKey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentRequest"
                  },
                  {
                    "$ref": "#/components/schemas/Payout"
                  }
                ]
              },
              "example": {
                "source": {
                  "type": "token",
                  "token": "tok_4gzeau5o2uqubbk6fufs3m7p54"
                },
                "amount": 6540,
                "currency": "USD",
                "payment_type": "Recurring",
                "reference": "ORD-5023-4E89",
                "description": "Set of 3 masks",
                "capture": true,
                "capture_on": "2019-09-10T10:11:12Z",
                "customer": {
                  "id": "cus_udst2tfldj6upmye2reztkmm4i",
                  "email": "brucewayne@gmail.com",
                  "name": "Bruce Wayne"
                },
                "billing_descriptor": {
                  "name": "SUPERHEROES.COM",
                  "city": "GOTHAM"
                },
                "shipping": {
                  "address": {
                    "address_line1": "Checkout.com",
                    "address_line2": "90 Tottenham Court Road",
                    "city": "London",
                    "state": "London",
                    "zip": "W1T 4TJ",
                    "country": "GB"
                  },
                  "phone": {
                    "country_code": "+1",
                    "number": "415 555 2671"
                  }
                },
                "3ds": {
                  "enabled": true,
                  "attempt_n3d": true,
                  "eci": "05",
                  "cryptogram": "AgAAAAAAAIR8CQrXcIhbQAAAAAA=",
                  "xid": "MDAwMDAwMDAwMDAwMDAwMzIyNzY=",
                  "version": "2.0.1"
                },
                "previous_payment_id": "pay_fun26akvvjjerahhctaq2uzhu4",
                "risk": {
                  "enabled": false
                },
                "success_url": "http://example.com/payments/success",
                "failure_url": "http://example.com/payments/fail",
                "payment_ip": "90.197.169.245",
                "recipient": {
                  "dob": "1985-05-15",
                  "account_number": "5555554444",
                  "zip": "W1T",
                  "last_name": "Jones"
                },
                "metadata": {
                  "coupon_code": "NY2018",
                  "partner_id": 123989
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                },
                "example": {
                  "id": "pay_mbabizu24mvu3mela5njyhpit4",
                  "action_id": "act_mbabizu24mvu3mela5njyhpit4",
                  "amount": 6540,
                  "currency": "USD",
                  "approved": true,
                  "status": "Authorized",
                  "auth_code": "770687",
                  "response_code": "10000",
                  "response_summary": "Approved",
                  "3ds": {
                    "downgraded": true,
                    "enrolled": "N"
                  },
                  "risk": {
                    "flagged": true
                  },
                  "source": {
                    "type": "card",
                    "id": "src_nwd3m4in3hkuddfpjsaevunhdy",
                    "billing_address": {
                      "address_line1": "Checkout.com",
                      "address_line2": "90 Tottenham Court Road",
                      "city": "London",
                      "state": "London",
                      "zip": "W1T 4TJ",
                      "country": "GB"
                    },
                    "phone": {
                      "country_code": "+1",
                      "number": "415 555 2671"
                    },
                    "last4": "4242",
                    "fingerprint": "F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832",
                    "bin": "424242"
                  },
                  "customer": {
                    "id": "cus_udst2tfldj6upmye2reztkmm4i",
                    "email": "brucewayne@gmail.com",
                    "name": "Bruce Wayne"
                  },
                  "processed_on": "2019-09-10T10:11:12Z",
                  "reference": "ORD-5023-4E89",
                  "processing": {
                    "retrieval_reference_number": "909913440644",
                    "acquirer_transaction_id": "440644309099499894406",
                    "recommendation_code": "02"
                  },
                  "eci": "06",
                  "scheme_id": "489341065491658",
                  "_links": {
                    "self": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                    },
                    "action": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                    },
                    "void": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids"
                    },
                    "capture": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures"
                    }
                  }
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "202": {
            "description": "Payment asynchronous or further action required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAcceptedResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests or duplicate request detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n  Reference = \"ORD-090857\",\n  Capture = false,\n  ThreeDs = true\n};\n\ntry\n{\n  var response = await api.Payments.RequestAsync(paymentRequest);\n\n  if (response.IsPending && response.Pending.RequiresRedirect())\n  {\n    return Redirect(response.Pending.GetRedirectLink().Href);\n  }\n\n  if (response.Payment.Approved)\n    return PaymentSuccessful(response.Payment);\n\n  return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst payment = await cko.payments.request({\n\t\tsource: {\n\t\t\t// infered type: \"token\"\n\t\t\ttoken: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n\t\t\tbilling_address: {\n\t\t\t\taddress_line1: 'Wall Street',\n\t\t\t\taddress_line2: 'Dollar Avenue',\n\t\t\t\tcity: 'London',\n\t\t\t\tstate: 'London',\n\t\t\t\tzip: 'W1W W1W',\n\t\t\t\tcountry: 'GB',\n\t\t\t},\n\t\t\tphone: {\n\t\t\t\tcountry_code: '44',\n\t\t\t\tnumber: '7123456789',\n\t\t\t},\n\t\t},\n\t\tcurrency: 'USD',\n\t\tamount: 1000,\n\t\tpayment_type: 'Regular',\n\t\treference: 'ORDER 1234',\n\t\tdescription: 'Mint Tea',\n\t\tcustomer: {\n\t\t\temail: 'new_user@email.com',\n\t\t\tname: 'John Smith',\n\t\t},\n\t\tmetadata: {\n\t\t\tmyCustomProp: {\n\t\t\t\tvalue: 1,\n\t\t\t},\n\t\t},\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$customer = new Customer();\n$customer->email = 'john.smith@email.com';\n$customer->name = 'John Smith';\n\n$address = new Address();\n$address->address_line1 = '14-17 Wells Mews';\n$address->address_line2 = 'Fitzrovia';\n$address->city = 'London';\n$address->state = 'London';\n$address->zip = 'W1T 3HF';\n$address->country = 'UK';\n\n$phone = new Phone();\n$phone->country_code = '0044';\n$phone->number = '02073233888';\n\n$payment->customer = $customer;\n$payment->shipping = new Shipping($address, $phone);\n$payment->billing_descriptor = new BillingDescriptor('Dynamic desc charge', 'City charge');\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n$payment->risk = new Risk(true);\n$payment->setIdempotencyKey(createMyUniqueKeyForThis());\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.request(\n        source={\n            'token': 'tok_...',\n        },\n        amount=100,\n        currency=sdk.Currency.USD,\n        reference='pay_ref'\n    )\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Get payment details",
        "operationId": "getPaymentDetails",
        "description": "Returns the details of the payment with the specified identifier string.\n\nIf the payment method requires a redirection to a third party (e.g., 3D Secure),\nthe redirect URL back to your site will include a `cko-session-id` query parameter\ncontaining a payment session ID that can be used to obtain the details of the payment, for example:\n\nhttp://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(pay|sid)_(\\w{26})$"
            },
            "required": true,
            "description": "The payment or payment session identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.get('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n\t$details = $checkout->payments()->details($threeDsSessionId);\n\treturn $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n\treturn $ex->getErrors();\n}"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.get('pay_...')\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/actions": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Get payment actions",
        "operationId": "getPaymentActions",
        "description": "Returns all the actions associated with a payment ordered by processing date in descending order (latest first).\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$"
            },
            "required": true,
            "description": "The payment identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment actions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentActionsResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.getActions('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    actions = api.payments.get_actions('pay_...')\n    for action in actions:\n        print(action.id)\n        print(action.type)\n        print(action.response_code)\n        print(action.reference)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/captures": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Capture a payment",
        "operationId": "captureAPayment",
        "description": "Captures a payment if supported by the payment method.\n\nFor card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ckoIdempotencyKey"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$"
            },
            "required": true,
            "description": "The payment identifier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Capture accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureAcceptedResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Capture not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n  Reference = \"your reference\",\n  Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n\tamount: 1000,\n\treference: 'CAPTURE ORDER 1234',\n\tmetadata: {\n\t\tvalue: 'my value',\n\t},\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.capture('pay_...', amount=100, reference='CAPTURE')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/refunds": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Refund a payment",
        "operationId": "refundAPayment",
        "description": "Refunds a payment if supported by the payment method.\n\nFor card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ckoIdempotencyKey"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$"
            },
            "required": true,
            "description": "The payment identifier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Refund accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundAcceptedResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Refund not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n  Reference = \"your reference\",\n  Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.refund('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n\tamount: 1000,\n\treference: 'REFUND ORDER 1234',\n\tmetadata: {\n\t\tvalue: 'my value',\n\t},\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.refund('pay_...', amount=100, reference='REFUND')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/voids": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "summary": "Void a payment",
        "operationId": "voidAPayment",
        "description": "Voids a payment if supported by the payment method.\n\nFor card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ckoIdempotencyKey"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$"
            },
            "required": true,
            "description": "The payment identifier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Void accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidAcceptedResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Void not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.void('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n\tamount: 1000,\n\treference: 'VOID ORDER 1234',\n\tmetadata: {\n\t\tvalue: 'my value',\n\t},\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.void('pay_...', reference='VOID')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/reporting/payments": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON payments report",
        "operationId": "getJsonPaymentsReport",
        "description": "Returns a JSON report containing all payments within your specified parameters. You can reconcile the data from this report against your statements (which can be found in the <a href=\"https://hub.checkout.com/login\" target=\"_blank\">Hub</a>), the list of payments in the Hub (using the `Reference` field) or your own systems. *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time from which to search for payments"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time until which to search for payments"
          },
          {
            "in": "query",
            "name": "reference",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Reference of a specific payment to search for"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 500,
              "default": 200
            },
            "required": false,
            "description": "Sets a limit on the number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Payments report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsReportResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst reconciliation = await cko.reconciliation.getPayments({\n\t\tfrom: '2019-05-17T16:48:52Z',\n\t\tto: '2019-06-17T16:48:52Z',\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/reporting/payments/{paymentId}": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON single payment report",
        "operationId": "getJsonSinglePaymentReport",
        "description": "Returns a JSON payment report containing all of the data related to a specific payment, based on the payment's identifier. *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.",
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "schema": {
              "type": "string",
              "pattern": "^(pay)_(\\w{26})$"
            },
            "required": true,
            "description": "The unique payment identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment report returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsReportResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst reconciliation = await cko.reconciliation.getPayment('pay_nezg6bx2k22utmk4xm5s2ughxi');\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/reporting/payments/download": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get CSV payments report",
        "responses": {
          "200": {
            "description": "CSV downloaded successfully"
          }
        },
        "operationId": "getCsvPaymentsReport",
        "description": "In addition to the JSON format returned by the `reporting/payments` endpoint, you can also download a CSV report containing the same data. Learn more about <a href=\"https://docs.checkout.com/reporting-and-insights/reconciliation-api/payments-endpoint#Paymentsendpoint-HowtoreadtheCSVfile\" target=\"_blank\">how to read your CSV report</a>.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time from which to search for payments"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time until which to search for payments"
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst reconciliation = await cko.reconciliation.getPaymentsCsv({\n\t\tfrom: '2019-05-17T16:48:52Z',\n\t\tto: '2019-06-17T16:48:52Z',\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/reporting/statements": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON statements report",
        "operationId": "getJsonStatementsReport",
        "description": "Returns a JSON report containing all statements within your specified parameters. Please note that the timezone for the request will be UTC.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time from which to search for statements"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "description": "Date and time until which to search for statements"
          }
        ],
        "responses": {
          "200": {
            "description": "Statements report successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementsReportResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst statements = await cko.reconciliation.getStatements({\n\t\tfrom: '2019-05-17T16:48:52Z',\n\t\tto: '2019-06-17T16:48:52Z',\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/reporting/statements/{StatementId}/payments/download": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get CSV single statement report",
        "operationId": "GetCsvSingleStatementReport",
        "description": "Downloads a CSV statement report containing all of the data related to a specific statement, based on the statement's identifier.",
        "responses": {
          "200": {
            "description": "CSV downloaded successfully"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "StatementId",
            "example": "190110B107654",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The unique statement identifier"
          }
        ]
      }
    },
    "/reporting/statements/download": {
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ],
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Reconciliation"
        ],
        "responses": {
          "200": {
            "description": "CSV downloaded successfully"
          }
        },
        "summary": "Get CSV statements report",
        "operationId": "getCsvStatementsReport",
        "description": "In addition to the JSON format returned by the `reporting/statements` endpoint, you can also download a CSV report containing the same data.",
        "x-code-samples": [
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst statement = await cko.reconciliation.getStatementCsv('155613B100981');\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/risk/assessments/pre-authentication": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Risk"
        ],
        "summary": "Request a pre-authentication risk scan",
        "operationId": "preAuthenticationRiskAssessment",
        "description": "Perform a pre-authentication fraud assessment using your defined risk settings.\n#parameters:\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreAuthenticationAssessmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction assessed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreAuthenticationAssessmentResponse"
                }
              },
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/risk/assessments/pre-capture": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Risk"
        ],
        "summary": "Request a pre-capture risk scan",
        "operationId": "preCaptureRiskAssessment",
        "description": "Perform a pre-capture fraud assessment using your defined risk settings.<br><br> **Note**: If you’ve already requested a pre-authentication fraud assessment for the transaction, provide the `assessment_id` returned in that response in your request to carry over the data. If you do include the `assessment_id`, the other fields you provide in this request will only fill in any gaps in the data; they will not overwrite any data.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreCaptureAssessmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction already assessed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreCaptureAssessmentResponse"
                }
              },
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "201": {
            "description": "Transaction assessed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreCaptureAssessmentResponse"
                }
              },
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/sources": {
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Add a payment source",
        "operationId": "addAPaymentSource",
        "description": "Add a reusable payment source, like a <a href=\"https://docs.checkout.com/payment-methods/direct-debit/sepa-direct-debit\" target=\"blank\">SEPA Direct Debit</a>, that you can later use to make one or more payments.\nPayment sources are linked to a specific customer and cannot be shared between customers.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment source added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSourceResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar sourceRequest = new SourceRequest\n(\n  \"sepa\",\n  new Address()\n  {\n    AddressLine1 = \"Checkout.com\",\n    AddressLine2 = \"Shepherdess Walk\",\n    City = \"London\",\n    State = \"London\",\n    Zip = \"N1 7LH\",\n    Country = \"GB\"\n  }\n)\n{\n  Reference = \"X-080957-N34\",\n  Phone = new Phone()\n  {\n    CountryCode = \"+1\",\n    Number = \"415 555 2671\"\n  },\n  SourceData = new SourceData()\n  {\n    { \"first_name\", \"Marcus\" },\n    { \"last_name\", \"Barrilius Maximus\" },\n    { \"account_iban\", \"DE68100100101234567895\" },\n    { \"bic\", \"PBNKDEFFXXX\" },\n    { \"billing_descriptor\", \"Test\" },\n    { \"mandate_type\", \"single\" }\n  }\n};\n\ntry\n{\n  var sourceResponse = await api.Sources.RequestAsync(sourceRequest);\n  var source = sourceResponse.Source;\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Source request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nAddress billingAddress = new Address();\nbillingAddress.setAddressLine1(\"Checkout.com\");\nbillingAddress.setAddressLine2(\"90 Tottenham Court Road\");\nbillingAddress.setCity(\"London\");\nbillingAddress.setState(\"London\");\nbillingAddress.setZip(\"W1T 4TJ\");\nbillingAddress.setCountry(\"GB\");\n\nPhone phone = new Phone();\nphone.setCountryCode(\"+1\");\nphone.setNumber(\"415 555 2671\");\n\nSourceData sourceData = new SourceData();\nsourceData.put(\"first_name\", \"Marcus\");\nsourceData.put(\"last_name\", \"Barrilius Maximus\");\nsourceData.put(\"account_iban\", \"DE68100100101234567895\");\nsourceData.put(\"bic\", \"PBNKDEFFXXX\");\nsourceData.put(\"billing_descriptor\", \"Java SDK test\");\nsourceData.put(\"mandate_type\", \"single\");\n\nSourceRequest sourceRequest = new SourceRequest(\"sepa\", billingAddress);\nsourceRequest.setPhone(phone);\nsourceRequest.setReference(\"Java SDK test\");\nsourceRequest.setSourceData(sourceData);\nSourceResponse sourceResponse = api.sourcesClient().requestAsync(sourceRequest).get();\n\nSourceProcessed source = sourceResponse.getSource();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n\tconst payment = await cko.sources.add({\n\t\t// infered type: \"sepa\"\n\t\treference: 'X-080957-N34',\n\t\tsource_data: {\n\t\t\tfirst_name: 'Sophie',\n\t\t\tlast_name: 'Bonneville',\n\t\t\taccount_iban: 'DE25100100101234567893',\n\t\t\tbic: 'PBNKDEFFXXX',\n\t\t\tbilling_descriptor: 'Thanks for shopping',\n\t\t\tmandate_type: 'recurring',\n\t\t},\n\t\tbilling_address: {\n\t\t\taddress_line1: '101 Avenue de Gaulle',\n\t\t\tcity: 'Paris',\n\t\t\tzip: '75013',\n\t\t\tcountry: 'FR',\n\t\t},\n\t\tphone: {\n\t\t\tcountry_code: '+33',\n\t\t\tnumber: '6 78 91 01 11',\n\t\t},\n\t\tcustomer: {\n\t\t\temail: 'sophie.bonneville@ckomail.com',\n\t\t},\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/tokens": {
      "post": {
        "security": [
          {
            "ApiPublicKey": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "summary": "Request a token",
        "operationId": "requestAToken",
        "description": "Exchange a digital wallet payment token or card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes.\nTo create a token, please authenticate using your public key.\n\n**Please note:** You should only use the `card` type for testing purposes.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reference token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\", useSandbox: true, \"your public key\");\nvar tokenData = new Dictionary<string, object>\n{\n  { \"version\", \"EC_v1\" },\n  { \"data\", \"t7GeajLB9skXB6QSWfEpPA4WPhD...\" },\n  { \"signature\", \"MIAGCSqGSIb3DQEHAqCAMI...\" },\n  { \"header\", new Dictionary<string, string>\n    {\n      { \"ephemeralPublicKey\", \"MFkwEwYHK...\" },\n      { \"publicKeyHash\", \"tqYV+tmG9aMh+l...\" },\n      { \"transactionId\", \"3cee89679130a4...\" }\n    }\n  }\n};\nvar request = new WalletTokenRequest(WalletType.ApplePay, tokenData);\n\ntry\n{\n  var response = await api.Tokens.RequestAsync(request);\n  var token = response.Token;\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Token request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
          },
          {
            "lang": "Java",
            "source": "WalletTokenRequest walletTokenRequest = new WalletTokenRequest('applepay', tokenData);\n// infered type: \"applepay\"\ntry {\n    TokenResponse tokenRequest = api.tokensClient().requestAsync(walletTokenRequest).get();\n    String token  = tokenRequest.getToken();\n    return token;\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX', { pk: 'pk_YYYY' });\n\ntry {\n\tconst token = await cko.tokens.request({\n\t\t// infered type: \"applepay\"\n\t\ttoken_data: {\n\t\t\tversion: 'EC_v1',\n\t\t\tdata: 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...',\n\t\t\tsignature: 'MIAGCSqGbGUg...',\n\t\t\theader: {\n\t\t\t\tephemeralPublicKey: 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...',\n\t\t\t\tpublicKeyHash: 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6...',\n\t\t\t\ttransactionId: '3cee89679130a4b...',\n\t\t\t},\n\t\t},\n\t});\n} catch (err) {\n\tconsole.log(err.name);\n}"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhooks",
        "operationId": "retrieveWebhooks",
        "description": "Retrieves the webhooks configured for the channel identified by your API key\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Configured webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "204": {
            "description": "No webhooks configured"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhooksRetrievalResponse = await api.Webhooks.RetrieveWebhooksAsync();"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < WebhookResponse > response = api.webhooksClient().retrieveWebhooks().get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhooks = await cko.webhooks.retrieveWebhooks();"
          }
        ]
      },
      "post": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Register webhook",
        "operationId": "registerWebhook",
        "description": "Register a new webhook endpoint that Checkout.com will post all or selected events to\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "URL already registered for another webhook"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhook = new Webhook()\n{\n  Url = \"https://example.com/webhook\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\n\nvar webhookRegistrationResponse = await api.Webhooks.RegisterWebhookAsync(new RegisterWebhookRequest(webhook));"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < String > eventTypes = Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\");\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n  .url(\"https://example.com/webhook\")\n  .eventTypes(eventTypes)\n  .build();\nWebhookResponse webhookResponse = api.webhooksClient().registerWebhook(webhookRequest).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.registerWebhook({\n\turl: 'https://example.com/webhook',\n\tactive: true,\n\theaders: {\n\t\tauthorization: '1234',\n\t},\n\tcontent_type: 'json',\n\tevent_types: ['payment_approved', 'payment_captured'],\n});"
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhook",
        "operationId": "retrieveWebhook",
        "description": "Retrieves the webhook with the specified identifier string\n",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(wh)_(\\w{32})$"
            },
            "in": "path",
            "description": "The webhook identifier\n",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/WebhookRequest"
                    }
                  ],
                  "required": [
                    "url"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhookRetrievalResponse = await api.Webhooks.RetrieveWebhookAsync(\"wh_tdt72zlbe7cudogxdgit6nwk6i\");"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nWebhookResponse webhook = api.webhooksClient().retrieveWebhook(\"wh_tdt72zlbe7cudogxdgit6nwk6i\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.retrieveWebhook('wh_tdt72zlbe7cudogxdgit6nwk6i');"
          }
        ]
      },
      "put": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "operationId": "updateWebhook",
        "description": "Updates an existing webhook\n",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(wh)_(\\w{32})$"
            },
            "in": "path",
            "description": "The webhook identifier\n",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "URL already registered for another webhook"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nvar updatedWebhook = new Webhook()\n{\n  Url = \"https://example.com/webhooks/updated\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\n\nvar webhookUpdateResponse = await api.Webhooks.UpdateWebhookAsync(\n                                    \"wh_ahun3lg7bf4e3lohbhni65335u\",\n                                    new UpdateWebhookRequest(updatedWebhook)\n                                  );"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < String > eventTypes = Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\");\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n  .url(\"https://example.com/webhooks/updated\")\n  .eventTypes(eventTypes)\n  .build();\n\nWebhookResponse webhook = api.webhooksClient().updateWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\", webhookRequest).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.updateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n\turl: 'https://example.com/webhooks/updated',\n\tactive: true,\n\theaders: {\n\t\tauthorization: '1234',\n\t},\n\tcontent_type: 'json',\n\tevent_types: ['payment_approved', 'payment_captured'],\n});"
          }
        ]
      },
      "patch": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Partially update webhook",
        "operationId": "partiallyUpdateWebhook",
        "description": "Updates all or some of the registered webhook details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(wh)_(\\w{32})$"
            },
            "in": "path",
            "description": "The webhook identifier\n",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "URL already exists in another webhook configuration"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\n// Original webhook\nvar webhook = new Webhook()\n{\n  Url = \"https://example.com/webhooks\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\nvar webhookRegistrationResponse = await Api.Webhooks.RegisterWebhookAsync(new RegisterWebhookRequest(webhook));\n\n// Partially update\nwebhook.Url += \"/partially/updated\";\nwebhook.Headers = null;\nvar webhookPartialUpdateResponse = await Api.Webhooks.PartiallyUpdateWebhookAsync(\n                                                        webhookRegistrationResponse.Id,\n                                                        new PartialUpdateWebhookRequest(webhook)\n                                                      );"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nWebhookResponse oldWebhook = api.webhooksClient().retrieveWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\").get();\nWebhookRequest webhookRequest = oldWebhook.toRequest();\nwebhookRequest.setUrl(\"https://example.com/webhooks/updated\");\n\nWebhookResponse newWebhook = api.webhooksClient().updateWebhook(id, webhookRequest).get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.partiallyUpdateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n\turl: 'https://example.com/webhooks/updated',\n});"
          }
        ]
      },
      "delete": {
        "security": [
          {
            "ApiSecretKey": []
          }
        ],
        "tags": [
          "Webhooks"
        ],
        "summary": "Remove webhook",
        "operationId": "removeWebhook",
        "description": "Removes an existing webhook",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(wh)_(\\w{32})$"
            },
            "in": "path",
            "description": "The webhook identifier\n",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Webhooks.RemoveWebhookAsync(\"wh_ahun3lg7bf4e3lohbhni65335u\");"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.webhooksClient().removeWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\").get();"
          },
          {
            "lang": "Node",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.removeWebhook('wh_ahun3lg7bf4e3lohbhni65335u');"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "01_SepaAddress": {
        "type": "object",
        "required": [
          "address_line1",
          "city",
          "zip",
          "country"
        ],
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "Brandenburger Tor"
          },
          "address_line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Pariser Platz"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "Berlin"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "Berlin"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "example": 10117
          },
          "country": {
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">ISO country code</a> of the address",
            "example": "DE",
            "maxLength": 2,
            "minLength": 2
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The first line of the address",
            "maxLength": 200,
            "example": "Checkout.com"
          },
          "address_line2": {
            "type": "string",
            "description": "The second line of the address",
            "maxLength": 200,
            "example": "90 Tottenham Court Road"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "maxLength": 50,
            "example": "London"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "maxLength": 50,
            "example": "London"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "maxLength": 50,
            "example": "W1T 4TJ"
          },
          "country": {
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">ISO country code</a> of the address",
            "example": "GB",
            "maxLength": 2,
            "minLength": 2
          }
        }
      },
      "Batch": {
        "type": "object",
        "required": [
          "id",
          "status",
          "_links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Batch identifier",
            "pattern": "^bat_(\\w{26})$",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "Processing"
          },
          "_links": {
            "type": "object",
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "SubmitBatchRequest": {
        "type": "object",
        "description": "The batch request",
        "required": [
          "file_id",
          "action"
        ],
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^file_(\\w{26})$",
            "description": "The identifier of the batch file previously uploaded via the [Files API](#tag/Files)",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "action": {
            "type": "string",
            "description": "The action to be performed against the batch",
            "enum": [
              "payment"
            ],
            "example": "payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the batch. If provided, this will be validated against the batch file's header",
            "example": "payments-20180701"
          }
        }
      },
      "SubmitBatchResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "_links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Batch identifier",
            "pattern": "^bat_(\\w{26})$",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The batch status",
            "example": "Processing"
          },
          "_links": {
            "type": "object",
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "CustomerCreateRequest": {
        "type": "object",
        "description": "The customer details",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The customer's email address",
            "maxLength": 255,
            "example": "JohnTest@test.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "maxLength": 255,
            "example": "John Test"
          },
          "phone": {
            "type": "object",
            "description": "The customer's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a customer. You can include a maximum of 10 key-value pairs. Each key and value can be up to 100 characters long.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "CustomerCreateResponse": {
        "type": "object",
        "description": "Customer",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The customer's unique identifier",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          }
        }
      },
      "CustomerGetInstrumentResponse": {
        "type": "object",
        "required": [
          "id",
          "type",
          "fingerprint",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "properties": {
          "id": {
            "description": "The ID of the retrieved instrument",
            "type": "string",
            "example": "src_lmyvsjadlxxu7kqlgevt6ebkra"
          },
          "type": {
            "description": "The instrument type",
            "type": "string",
            "example": "card"
          },
          "fingerprint": {
            "type": "string",
            "description": "A token that can uniquely identify this card across all customers",
            "pattern": "^([a-z0-9]{26})$",
            "example": "vnsdrvikkvre3dtrjjvlm5du4q"
          },
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "The expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "name": {
            "description": "The name of the cardholder",
            "type": "string",
            "example": "John Test"
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996",
            "minLength": 4,
            "maxLength": 4
          },
          "bin": {
            "type": "string",
            "description": "The card issuer's bank identification number (BIN)",
            "example": "454347"
          },
          "card_type": {
            "type": "string",
            "description": "The card type",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge"
            ],
            "example": "Credit"
          },
          "card_category": {
            "type": "string",
            "description": "The card category",
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          },
          "account_holder": {
            "type": "object",
            "description": "The account holder details",
            "properties": {
              "billing_address": {
                "description": "The billing address of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Phone"
                  }
                ]
              }
            }
          }
        }
      },
      "CustomerGetResponse": {
        "type": "object",
        "description": "The customer details",
        "required": [
          "id",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The customer's unique identifier",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The customer's email address",
            "example": "JohnTest@test.com"
          },
          "default": {
            "description": "The ID for this customer's default instrument",
            "type": "string",
            "example": "src_imu3wifxfvlebpqqq5usjrze6y"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Test"
          },
          "phone": {
            "type": "object",
            "description": "The customer's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that is attached to a customer",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "instruments": {
            "type": "array",
            "title": "Instrument",
            "description": "The details of the instruments linked to this customer",
            "items": {
              "$ref": "#/components/schemas/CustomerGetInstrumentResponse"
            }
          }
        }
      },
      "UpdateCustomerRequest": {
        "type": "object",
        "description": "The customer attached to the instrument",
        "properties": {
          "email": {
            "description": "The email address of the customer",
            "type": "string",
            "example": "JohnTest@test.com"
          },
          "name": {
            "description": "The name of the customer",
            "type": "string",
            "example": "John Test"
          },
          "default": {
            "description": "The instrument ID for this customer’s default instrument",
            "type": "string",
            "example": "src_imu3wifxfvlebpqqq5usjrze6y"
          },
          "phone": {
            "type": "object",
            "description": "The customer's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a customer. You can include a maximum of 10 key-value pairs. Each key and value can be up to 100 characters long.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "Dispute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^(dsp)_(\\w{22})$",
            "description": "The dispute identifier. This is the same as the payment action ID",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "category": {
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)",
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "example": "fraudulent"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The processing currency",
            "example": "GBP"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code provided by the card scheme",
            "example": "10.4"
          },
          "status": {
            "type": "string",
            "description": "The current status of the dispute",
            "enum": [
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "won",
              "lost",
              "canceled",
              "expired",
              "accepted",
              "arbitration_under_review",
              "arbitration_won",
              "arbitration_lost"
            ],
            "example": "evidence_required"
          },
          "resolved_reason": {
            "type": "string",
            "description": "If the dispute is automatically resolved, `resolved_reason` will contain the reason why it was resolved",
            "enum": [
              "rapid_dispute_resolution",
              "negative_amount",
              "already_refunded"
            ],
            "example": "already_refunded"
          },
          "relevant_evidence": {
            "type": "array",
            "description": "<i>This list and the dispute categories will change over time. Your evidence logic should be informed by this field, not hard coded.</i>",
            "items": {
              "type": "string",
              "enum": [
                "proof_of_delivery_or_service",
                "invoice_or_receipt",
                "invoice_showing_distinct_transactions",
                "customer_communication",
                "refund_or_cancellation_policy",
                "recurring_transaction_agreement",
                "additional_evidence"
              ],
              "example": "proof_of_delivery_or_service"
            }
          },
          "evidence_required_by": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "example": "2018-08-21T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time at which the dispute was issued",
            "example": "2018-08-01T04:00:10Z"
          },
          "last_update": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time at which the dispute was last updated",
            "example": "2018-08-04T10:53:13Z"
          },
          "payment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment identifier",
                "example": "pay_88cb4e671m1da22e9bbbyx"
              },
              "amount": {
                "type": "number",
                "description": "The amount that is being disputed, in the processing currency",
                "example": 999
              },
              "currency": {
                "type": "string",
                "description": "The payment currency",
                "example": "GBP"
              },
              "method": {
                "type": "string",
                "description": "The payment method used",
                "example": "Visa"
              },
              "arn": {
                "type": "string",
                "description": "The acquirer reference number (ARN)",
                "example": "AA246873253573571073808"
              },
              "processed_on": {
                "type": "string",
                "format": "ISO-8601",
                "description": "The date and time at which the payment was requested",
                "example": "2018-08-01T08:18:10Z"
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The dispute retrieval endpoint",
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                }
              },
              "evidence": {
                "description": "The dispute evidence retrieval endopint",
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence"
                  }
                }
              }
            }
          }
        }
      },
      "DisputePaged": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The numbers of items to return",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The number of results to skip",
            "example": 10
          },
          "from": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field",
            "example": "2018-08-12T01:15:56Z"
          },
          "to": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field",
            "example": "2018-08-13T11:09:01Z"
          },
          "statuses": {
            "type": "string",
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator",
            "example": "evidence_required,evidence_under_review"
          },
          "id": {
            "type": "string",
            "pattern": "^(dsp)_(\\w{22})$",
            "description": "The unique identifier of the dispute",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "payment_id": {
            "type": "string",
            "pattern": "^(pay)_(\\w{26})$",
            "description": "The unique identifier of the payment",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "this_channel_only": {
            "type": "boolean",
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business",
            "example": true
          },
          "total_count": {
            "type": "integer",
            "description": "The total number of disputes retrieved (without taking into consideration skip and limit parameters)",
            "example": 1
          },
          "data": {
            "type": "array",
            "description": "The list of disputes",
            "items": {
              "$ref": "#/components/schemas/DisputeSummary"
            }
          }
        }
      },
      "DisputeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^(dsp)_(\\w{22})$",
            "description": "The dispute identifier. This is the same as the action ID in the reconciliation API or the charge ID in the Hub.",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "category": {
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/docs/disputes#section-dispute-reasons-and-recommended-evidence)",
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "example": "fraudulent"
          },
          "status": {
            "type": "string",
            "description": "The current status of the dispute",
            "enum": [
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "won",
              "lost",
              "canceled",
              "expired",
              "accepted",
              "arbitration_under_review",
              "arbitration_won",
              "arbitration_lost"
            ],
            "example": "evidence_required"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The currency the payment was made in",
            "example": "GBP"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code provided by the card scheme",
            "example": "12.4"
          },
          "payment_id": {
            "type": "string",
            "description": "The unique payment identifier",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) a merchant can use to later identify the charge. Previously known as TrackId",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number that can be used to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method/card scheme",
            "example": "VISA"
          },
          "evidence_required_by": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "example": "2018-08-22T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time at which the dispute was issued",
            "example": "2018-08-01T01:15:56Z"
          },
          "last_update": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time at which the dispute was last updated",
            "example": "2018-08-12T04:15:56Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The dispute retrieval endpoint",
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                }
              }
            }
          }
        }
      },
      "Evidence": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "The file ID of the file you uploaded as a proof of delivery or service",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Delivery slip signed by the customer"
          },
          "proof_of_delivery_or_service_date_text": {
            "type": "string",
            "description": "The date on which the item was delivered. You can also use this field to provide a link",
            "example": "Merchandise was delivered on 2018-12-30"
          }
        }
      },
      "File": {
        "type": "object",
        "required": [
          "file",
          "purpose"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "The path of the file to upload, and its type. <br><i>This must be a local path.</i>",
            "example": "file=@/path/receipt.png;type=image/png"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the file upload. You must set this to `dispute_evidence`",
            "example": "dispute_evidence"
          }
        }
      },
      "FilePurpose": {
        "type": "string",
        "description": "The list of file upload purposes. Currently this is only `dispute_evidence`",
        "example": "dispute_evidence",
        "enum": [
          "dispute_evidence"
        ]
      },
      "FileResult": {
        "type": "object",
        "description": "File was retrieved successfully",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "filename": {
            "type": "string",
            "description": "The filename, including its extension",
            "example": "receipt.jpg"
          },
          "purpose": {
            "$ref": "#/components/schemas/FilePurpose"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file upload object (in bytes)",
            "example": 1024
          },
          "uploaded_on": {
            "type": "string",
            "format": "ISO-8601",
            "description": "The date and time file was uploaded (in UTC)",
            "example": "2019-05-17T16:48:52Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The file information retrieval URL",
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                }
              },
              "download": {
                "description": "The temporary file download URL. This expires after 60 minutes",
                "properties": {
                  "href": {
                    "example": "https://file-bucket.s3.eu-west-1.amazonaws.com/ucdac/ucdac/6lbss42ezvoufcb2beo76rvwly?X-Amz-Expires=3600&x-amz-security-token=FQoDYXdzENL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEa"
                  }
                }
              }
            }
          }
        }
      },
      "FileUploadResponse": {
        "type": "object",
        "description": "File uploaded successfully",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The file information retrieval URL",
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                }
              }
            }
          }
        }
      },
      "ProvideEvidenceRequest": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "A file containing proof of delivery of goods or services",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "http://checkout.com/document.pdf"
          },
          "invoice_or_receipt_file": {
            "type": "string",
            "description": "A file containing an invoice/receipt",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_or_receipt_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the invoice"
          },
          "invoice_showing_distinct_transactions_file": {
            "type": "string",
            "description": "A file containing invoice showing two distinct transactions",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_showing_distinct_transactions_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of invoice #1244 showing two transactions"
          },
          "customer_communication_file": {
            "type": "string",
            "description": "A file containing customer cummunication",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "customer_communication_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of an email exchange with the cardholder"
          },
          "refund_or_cancellation_policy_file": {
            "type": "string",
            "description": "A file containing refund/cancellation policy",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "refund_or_cancellation_policy_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the refund policy"
          },
          "recurring_transaction_agreement_file": {
            "type": "string",
            "description": "A file containing the recurring transaction agreement",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "recurring_transaction_agreement_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the recurring transaction agreement"
          },
          "additional_evidence_file": {
            "type": "string",
            "description": "A file containing additional supporting documents",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "additional_evidence_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Scanned document"
          },
          "proof_of_delivery_or_service_date_file": {
            "type": "string",
            "description": "A file showing the delivery date of the provided service/merchandise",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_date_text": {
            "type": "string",
            "maximum": 500,
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the customer receipt showing the merchandise was delivered on 2018-12-20"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_malformed"
          }
        }
      },
      "BillingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "372 Weimann Lane"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "ew1 7zb"
          },
          "country": {
            "type": "string",
            "example": "SJ"
          },
          "city": {
            "type": "string",
            "example": "North Benedicthaven"
          },
          "state": {
            "type": "string",
            "example": "Georgia"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "cust_7508EA38E86A4569AF12E483519E332D"
          },
          "expiry_month": {
            "type": "string",
            "example": "06"
          },
          "expiry_year": {
            "type": "string",
            "example": 2018
          },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "id": {
            "type": "string",
            "example": "card_D44D7F4CCC6348698717CD80072808B0"
          },
          "last4": {
            "type": "string",
            "example": "424242******4242"
          },
          "payment_method": {
            "type": "string",
            "example": "VISA"
          },
          "fingerprint": {
            "type": "string",
            "example": "f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622"
          },
          "name": {
            "type": "string",
            "example": "Test Customer"
          },
          "cvv_check": {
            "type": "string",
            "example": "Y"
          },
          "avs_check": {
            "type": "string",
            "example": "S"
          }
        }
      },
      "Charge_Id": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of events returned",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "The limit you set on the number of events returned",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The number of events skipped",
            "example": 0
          },
          "from": {
            "type": "string",
            "description": "The date and time from which the events were retrieved",
            "example": "2021-06-11T10:36:32Z"
          },
          "to": {
            "type": "string",
            "description": "The date and time to which the events were retrieved",
            "example": "2021-06-25T10:36:17Z"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The event identifier",
                  "example": "evt_a4aqkopnq65udagtnlpqsqr7uy"
                },
                "type": {
                  "type": "string",
                  "description": "The type of event",
                  "example": "charge.succeeded"
                },
                "created_on": {
                  "type": "string",
                  "description": "The date and time the event was created",
                  "example": "2021-06-25T10:36:17Z"
                },
                "_links": {
                  "type": "object",
                  "description": "The links relating to the event",
                  "properties": {
                    "self": {
                      "type": "object",
                      "description": "The URI of the event",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The link URL",
                          "example": "https://api.checkout.com/events/evt_3nup2pts3emebenhtw6ky4frim"
                        }
                      }
                    },
                    "webhooks-retry": {
                      "type": "object",
                      "description": "A link to retry all of the webhooks configured for the event",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The link URL",
                          "example": "https://api.checkout.com/events/evt_3nup2pts3emebenhtw6ky4frim/webhooks/retry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ChargeIdInvalidResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "The identifier of the request",
            "example": "0HMA0CMCKVMI1:00000001"
          },
          "error_type": {
            "type": "string",
            "description": "The type of error",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "description": "Array containing error codes",
            "items": {
              "type": "string",
              "example": "charge_id_invalid"
            }
          }
        }
      },
      "CustomerPaymentPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer_plan_id": {
            "type": "string"
          },
          "card_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plan_track_id": {
            "type": "string"
          },
          "auto_cap_time": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "recurring_count": {
            "type": "integer"
          },
          "recurring_count_left": {
            "type": "integer"
          },
          "total_collected_value": {
            "type": "integer"
          },
          "total_collected_count": {
            "type": "integer"
          },
          "current_recurring_status": {
            "type": "integer"
          },
          "start_date": {
            "type": "string"
          },
          "previous_recurring_date": {
            "type": "string"
          },
          "next_recurring_date": {
            "type": "string"
          }
        }
      },
      "Data": {
        "type": "object",
        "description": "The event data",
        "properties": {
          "id": {
            "description": "The payment unique identifier",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ]
          },
          "action_id": {
            "description": "The unique identifier for the action performed against this payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The currency in which the payment was made (<a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">three-letter ISO code</a>)",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment request was approved",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "enum": [
              "Pending",
              "Authorized",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Canceled"
            ],
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code, if the payment was authorized.",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the payment was flagged by a risk check",
            "default": false,
            "example": true
          },
          "source": {
            "description": "The source of the payment",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "The customer to which this payment is linked",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ]
          },
          "processed_on": {
            "description": "The date/time the payment was processed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "EventId": {
        "type": "string",
        "description": "The unique event identifier",
        "maxLength": 30,
        "minLength": 30,
        "example": "evt_az5sblvku4ge3dwpztvyizgcau"
      },
      "EventLinks": {
        "type": "object",
        "description": "The links related to the event",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
            }
          },
          "webhooks-retry": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "A link to retry all of the webhooks configured for the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry"
            }
          }
        }
      },
      "EventObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventId"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "version": {
            "type": "string",
            "description": "Determines the version of the event sent",
            "example": "2.0"
          },
          "created_on": {
            "description": "The date/time the event occurred",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "notifications": {
            "type": "array",
            "description": "The notifications (e.g., webhooks) that have been sent for the event",
            "items": {
              "$ref": "#/components/schemas/NotificationSummary"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "example": 100,
            "description": "The total number of events"
          },
          "limit": {
            "type": "integer",
            "description": "The `limit` query parameter",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "example": 10,
            "description": "The `skip` query parameter"
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "description": "The `from` query parameter",
            "example": "2018-01-01T00:00:00Z"
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "example": "2018-01-15T12:00:00Z",
            "description": "The `to` query parameter"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSummary"
            }
          }
        }
      },
      "EventSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "description": "The event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "created_on": {
            "description": "The date/time the event occurred",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventTypesObject": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "2.0"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "card_verification_declined",
              "card_verified",
              "dispute_canceled",
              "dispute_evidence_required",
              "dispute_expired",
              "dispute_lost",
              "dispute_resolved",
              "dispute_won",
              "payment_approved",
              "payment_risk_matched",
              "payment_pending",
              "payment_declined",
              "payment_expired",
              "payment_canceled",
              "payment_voided",
              "payment_void_declined",
              "payment_captured",
              "payment_capture_declined",
              "payment_capture_pending",
              "payment_refunded",
              "payment_refund_declined",
              "payment_refund_pending",
              "payment_chargeback",
              "payment_retrieval"
            ]
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the data sent to the endpoint",
            "example": "json"
          },
          "attempts": {
            "type": "array",
            "description": "The notification events ordered by timestamp in descending order (latest first)",
            "items": {
              "$ref": "#/components/schemas/NotificationAttempt"
            }
          },
          "_links": {
            "type": "object",
            "description": "The links related to the notification",
            "properties": {
              "self": {
                "type": "object",
                "description": "The URI of the notification",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              },
              "retry": {
                "type": "object",
                "description": "A link to retry the notification to the configured webhook",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry"
                }
              }
            }
          }
        }
      },
      "NotificationAttempt": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The HTTP status code returned from the target server",
            "example": 400
          },
          "response_body": {
            "type": "string",
            "description": "The response body returned from the target server",
            "example": "Bad Request"
          },
          "send_mode": {
            "type": "string",
            "description": "Whether the notification was sent automatically or requested manually",
            "enum": [
              "Automatic",
              "Manual"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The date/time the attempt was made",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          }
        }
      },
      "NotificationId": {
        "type": "string",
        "description": "The unique notification identifier",
        "maxLength": 30,
        "minLength": 30,
        "example": "ntf_az5sblvku4ge3dwpztvyizgcau"
      },
      "NotificationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "_links": {
            "type": "object",
            "description": "The links related to the notification",
            "properties": {
              "self": {
                "type": "string",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              }
            }
          }
        }
      },
      "Payment_Id": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of events returned",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "The limit you set on the number of events returned",
            "example": 5
          },
          "skip": {
            "type": "integer",
            "description": "The number of events skipped",
            "example": 0
          },
          "from": {
            "type": "string",
            "description": "The date and time from which the events were retrieved",
            "example": "2021-06-11T09:41:21Z"
          },
          "to": {
            "type": "string",
            "description": "The date and time to which the events were retrieved",
            "example": "2021-06-25T09:40:12Z"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The event identifier",
                  "example": "evt_3nup2pts3emebenhtw6ky4frim"
                },
                "type": {
                  "type": "string",
                  "description": "The type of event",
                  "example": "payment_approved"
                },
                "created_on": {
                  "type": "string",
                  "description": "The date and time the event was created",
                  "example": "2021-06-25T09:40:12Z"
                },
                "_links": {
                  "type": "object",
                  "description": "The links relating to the event",
                  "properties": {
                    "self": {
                      "type": "object",
                      "description": "The URI of the event",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The link URL",
                          "example": "https://api.checkout.com/events/evt_3nup2pts3emebenhtw6ky4frim"
                        }
                      }
                    },
                    "webhooks-retry": {
                      "type": "object",
                      "description": "A link to retry all of the webhooks configured for the event",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The link URL",
                          "example": "https://api.checkout.com/events/evt_3nup2pts3emebenhtw6ky4frim/webhooks/retry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PaymentIdInvalidResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "The identifier of the request",
            "example": "0HMA0CMCKVMI1:00000001"
          },
          "error_type": {
            "type": "string",
            "description": "The type of error",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "description": "Array containing error codes",
            "items": {
              "type": "string",
              "example": "payment_id_invalid"
            }
          }
        }
      },
      "Phone": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The international <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">country calling code</a>",
            "example": "975"
          },
          "number": {
            "type": "string",
            "example": "174217187",
            "description": "The phone number"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tablet 1 gold limited"
          },
          "description": {
            "type": "string",
            "example": "Nokia Lumia"
          },
          "sku": {
            "type": "string",
            "example": "1aab2aa"
          },
          "price": {
            "type": "integer",
            "example": 100
          },
          "quantity": {
            "type": "integer",
            "example": 1
          },
          "image": {
            "type": "string",
            "example": "http://www.test_Jabari.com/"
          },
          "shipping_cost": {
            "type": "integer",
            "example": 10
          },
          "tracking_url": {
            "type": "string",
            "example": "https://www.tracker.com"
          }
        }
      },
      "ShippingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "333 Cormier Bypass"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "BR3 6TK"
          },
          "country": {
            "type": "string",
            "example": "GB"
          },
          "city": {
            "type": "string",
            "example": "Bromley"
          },
          "state": {
            "type": "string",
            "example": "Greater London"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "GetHostedPaymentsResponse": {
        "type": "object",
        "discriminator": {
          "propertyName": "status",
          "mapping": {
            "Payment Pending": "#/components/schemas/GetHostedPaymentsResponseStatusPaymentPending",
            "Payment Received": "#/components/schemas/GetHostedPaymentsResponseStatusPaymentReceived",
            "Expired": "#/components/schemas/GetHostedPaymentsResponseStatusExpired"
          }
        },
        "required": [
          "id",
          "status",
          "amount",
          "currency",
          "billing",
          "success_url",
          "cancel_url",
          "failure_url",
          "_links"
        ],
        "properties": {
          "id": {
            "example": "hpp_xGQBg0AXl3cM",
            "allOf": [
              {
                "$ref": "#/components/schemas/HostedPaymentId"
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Payment Pending",
              "Payment Received",
              "Expired"
            ],
            "description": "The status of the Hosted Payments Page:\n  - `Payment Pending`: The Hosted Payments Page can accept a payment from the customer. A payment may have been attempted by the customer but not completed successfully.\n  - `Payment Received`: A payment has been received successfully using this Hosted Payments Page.\n  - `Expired`: The Hosted Payments Page has expired and can no longer be accessed.\n",
            "example": "Payment Pending"
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for an in progress or completed payment for this Payment Link.",
            "example": null
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount.",
            "example": 100
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment.<br>",
            "example": "GBP"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment.",
            "example": "ORD-123A"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment.",
            "example": "Payment for Gold Necklace"
          },
          "customer": {
            "type": "object",
            "description": "The customer's details.",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "The email address for the customer.",
                "example": "brucewayne@email.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name.",
                "example": "Bruce Wayne"
              }
            }
          },
          "billing": {
            "type": "object",
            "additionalProperties": false,
            "description": "The billing details.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The billing address.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number.",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "products": {
            "type": "array",
            "description": "Details about the provided products.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "price"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Descriptive item name.",
                  "example": "Gold Necklace"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The item quantity",
                  "example": 1
                },
                "price": {
                  "type": "integer",
                  "description": "Minor units. Includes tax, excludes discounts.",
                  "example": 200
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Any additional information stored at the point of creation.",
            "additionalProperties": true
          },
          "success_url": {
            "type": "string",
            "format": "uri",
            "description": "The provided URL your customer will be redirected to upon a successful payment.",
            "example": "https://example.com/success"
          },
          "cancel_url": {
            "type": "string",
            "format": "uri",
            "description": "The provided URL your customer will be redirected to if the payment is cancelled.",
            "example": "https://example.com/cancel"
          },
          "failure_url": {
            "type": "string",
            "format": "uri",
            "description": "The provided URL your customer will be redirected to upon a failed payment.",
            "example": "https://example.com/failure"
          }
        }
      },
      "GetHostedPaymentsResponseLinks": {
        "type": "object",
        "description": "The links related to the Hosted Payments Page.",
        "minItems": 2,
        "required": [
          "self",
          "redirect"
        ],
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the Hosted Payments Page details."
          },
          "redirect": {
            "type": "object",
            "description": "The link to visit the Hosted Payments Page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          },
          "payment": {
            "type": "object",
            "description": "The URI of the in progress or completed payment for this Hosted Payments Page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          },
          "payment_actions": {
            "type": "object",
            "description": "The URI of the actions associated with the in progress or completed payment for this Hosted Payments Page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          }
        },
        "example": {
          "self": {
            "href": "https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM"
          },
          "redirect": {
            "href": "https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM"
          }
        }
      },
      "GetHostedPaymentsResponseStatusExpired": {
        "type": "object",
        "description": "An expired Hosted Payments Page.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetHostedPaymentsResponse"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetHostedPaymentsResponseLinks"
                  }
                ]
              }
            }
          }
        ]
      },
      "GetHostedPaymentsResponseStatusPaymentPending": {
        "type": "object",
        "description": "A Hosted Payments Page that can accept a payment from a customer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetHostedPaymentsResponse"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetHostedPaymentsResponseLinks"
                  }
                ]
              }
            }
          }
        ]
      },
      "GetHostedPaymentsResponseStatusPaymentReceived": {
        "type": "object",
        "description": "A Hosted Payments Page that has received a payment",
        "required": [
          "payment_id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GetHostedPaymentsResponse"
          },
          {
            "type": "object",
            "properties": {
              "payment_id": {
                "example": "pay_m3s3k65cfpl2hd2rv4by4vl4r4"
              },
              "_links": {
                "required": [
                  "payment",
                  "payment_actions"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetHostedPaymentsResponseLinks"
                  }
                ],
                "example": {
                  "self": {
                    "href": "https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM"
                  },
                  "redirect": {
                    "href": "https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM"
                  },
                  "payment": {
                    "href": "https://api.sandbox.checkout.com/payments/pay_m3s3k65cfpl2hd2rv4by4vl4r4"
                  },
                  "payment_actions": {
                    "href": "https://api.sandbox.checkout.com/payments/pay_m3s3k65cfpl2hd2rv4by4vl4r4/actions"
                  }
                }
              }
            }
          }
        ]
      },
      "HostedPaymentId": {
        "type": "string",
        "pattern": "^hpp_[A-Za-z0-9_-]{12}$",
        "description": "The unique identifier for a Hosted Payments Page.",
        "maxLength": 16,
        "minLength": 16
      },
      "HostedPaymentsRequest": {
        "type": "object",
        "required": [
          "currency",
          "billing",
          "success_url",
          "cancel_url",
          "failure_url"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The payment amount. The exact format <a href=\"https://docs.checkout.com/docs/calculating-the-value\" target=\"_blank\">depends on the currency</a>",
            "minimum": 1,
            "example": 1000
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "GBP",
            "minLength": 3,
            "maxLength": 3
          },
          "payment_type": {
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "enum": [
              "Regular",
              "Recurring"
            ],
            "default": "Regular"
          },
          "payment_ip": {
            "type": "string",
            "format": "ipv4",
            "maxLength": 45,
            "description": "The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses"
          },
          "billing_descriptor": {
            "type": "object",
            "description": "An optional description that is displayed on the customer's statement identifying a purchase",
            "required": [
              "name",
              "city"
            ],
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 25,
                "description": "A dynamic description of the change"
              },
              "city": {
                "type": "string",
                "minLength": 1,
                "maxLength": 13,
                "description": "The city from which the charge originated"
              }
            }
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "example": "ORD-123A",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Payment for Gold Necklace",
            "maxLength": 100
          },
          "customer": {
            "type": "object",
            "description": "The customer's details",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "An optional email address to associate with the customer",
                "example": "brucewayne@email.com",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for new customers",
                "example": "Bruce Wayne",
                "maxLength": 255
              }
            }
          },
          "shipping": {
            "type": "object",
            "description": "The address any products are being sent to.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The customer's address to ship to.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "billing": {
            "type": "object",
            "additionalProperties": false,
            "description": "The billing details",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The billing address",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number. This will override the phone number specified during tokenization",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "description": "Use the processing object to influence or override the data sent during card processing.",
            "properties": {
              "aft": {
                "type": "boolean",
                "description": "Indicates whether the payment is an [Account Funding Transaction](https://docs.checkout.com/payment-actions/account-funding-transactions)."
              }
            }
          },
          "products": {
            "type": "array",
            "description": "Details about the products in the order",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "quantity",
                "price"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Descriptive item name",
                  "example": "Gold Necklace"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The item quantity. Non-negative",
                  "minimum": 1,
                  "example": 1
                },
                "price": {
                  "type": "integer",
                  "description": "Minor units. Includes tax, excludes discounts. The exact format <a href=\"https://docs.checkout.com/docs/calculating-the-value\" target=\"_blank\">depends on the currency</a>",
                  "minimum": 0,
                  "maximum": 100000000,
                  "example": 1000
                }
              }
            }
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "example": "https://example.com/payments/success",
            "maxLength": 255
          },
          "cancel_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to which the customer should be directed if they cancel the payment",
            "example": "https://example.com/payments/cancel",
            "maxLength": 255
          },
          "failure_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "example": "https://example.com/payments/failure",
            "maxLength": 255
          },
          "metadata": {
            "type": "object",
            "title": "The Metadata Schema",
            "description": "Allows you to store additional information about the transaction. This object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.",
            "additionalProperties": true
          },
          "locale": {
            "type": "string",
            "description": "Creates a translated version of the page in the specified language",
            "enum": [
              "de-DE",
              "en-GB",
              "fr-FR",
              "it-IT",
              "nl-NL",
              "es-ES",
              "zh-HK",
              "zh-TW",
              "zh-CN",
              "ja-JP",
              "fil-PH",
              "id-ID",
              "ms-MY",
              "th-TH",
              "vi-VN",
              "hi-IN"
            ],
            "default": "en-GB"
          },
          "3ds": {
            "type": "object",
            "description": "Information required for 3D Secure payments",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to process this payment as a 3D Secure payment",
                "default": false,
                "example": false
              },
              "attempt_n3d": {
                "type": "boolean",
                "description": "Determines whether to attempt a 3D Secure payment as non-3D Secure should the card issuer not be enrolled",
                "default": false,
                "example": false
              }
            }
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable).",
            "example": true
          },
          "capture_on": {
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          }
        }
      },
      "HostedPaymentsResponse": {
        "type": "object",
        "required": [
          "id",
          "_links"
        ],
        "properties": {
          "id": {
            "example": "hpp_xGQBg0AXl3cM",
            "allOf": [
              {
                "$ref": "#/components/schemas/HostedPaymentId"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number.",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the hosted payment.",
            "readOnly": true,
            "minItems": 1,
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM"
                }
              }
            }
          }
        },
        "example": {
          "id": "hpp_xGQBg0AXl3cM",
          "reference": "ORD-123A",
          "_links": {
            "self": {
              "href": "https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM"
            },
            "redirect": {
              "href": "https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM"
            }
          }
        }
      },
      "InstrumentRequest": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The instrument type",
            "pattern": "token",
            "example": "token"
          },
          "token": {
            "type": "string",
            "description": "The Checkout.com token",
            "pattern": "^(tok)_(\\w{26})$ | ^(card_tok)_(\\w{12})$",
            "example": "tok_asoto22g2fsu7prwomy12sgfsa"
          },
          "account_holder": {
            "type": "object",
            "description": "The account holder details",
            "properties": {
              "billing_address": {
                "description": "The billing address of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Phone"
                  }
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "The customer's details",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The identifier of an existing customer"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "An optional email address to associate with the customer",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers.",
                "maxLength": 255
              },
              "phone": {
                "description": "The customer's phone number. This will only set the phone number for *new* customers.",
                "example": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Phone"
                    }
                  ]
                }
              },
              "default": {
                "type": "boolean",
                "description": "If true, this instrument will become the default for the customer. If a *new* customer is created as a result of this request, the instrument will automatically be the default."
              }
            },
            "example": {
              "email": "brucewayne@gmail.com",
              "name": "Bruce Wayne",
              "phone": {
                "country_code": "+1",
                "number": "4155552671"
              },
              "default": true
            }
          }
        }
      },
      "InstrumentResponse": {
        "type": "object",
        "required": [
          "id",
          "type",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin",
          "fingerprint"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the payment source or destination that can be used later for payments",
            "type": "string",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          },
          "type": {
            "description": "The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized)",
            "type": "string",
            "example": "card"
          },
          "fingerprint": {
            "type": "string",
            "description": "A token that can uniquely identify this instrument across all customers"
          },
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "The expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996",
            "minLength": 4,
            "maxLength": 4
          },
          "bin": {
            "type": "string",
            "description": "The card issuer's bank identification number (BIN)",
            "example": "454347"
          },
          "card_type": {
            "type": "string",
            "description": "The card type",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge",
              "Deferred Debit"
            ],
            "example": "Credit"
          },
          "card_category": {
            "type": "string",
            "description": "The card category",
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          },
          "customer": {
            "type": "object",
            "description": "The customer details",
            "properties": {
              "id": {
                "type": "string",
                "description": "The customer's unique identifier",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "The customer's email address",
                "example": "JohnTest@test.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Jack Test"
              }
            }
          }
        }
      },
      "AccountHolder": {
        "type": "object",
        "description": "The account holder details",
        "properties": {
          "type": {
            "description": "The type of account holder",
            "type": "string",
            "enum": [
              "individual",
              "corporate",
              "government"
            ],
            "example": "individual"
          },
          "first_name": {
            "description": "The account holder's first name\n",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "description": "The account holder's last name\n",
            "type": "string",
            "example": "Smith"
          },
          "company_name": {
            "description": "The legal name of a registered company that holds the account\n",
            "type": "string",
            "example": "Test company"
          },
          "tax_id": {
            "description": "The account holder's tax number/reference",
            "type": "string",
            "example": "123456"
          },
          "date_of_birth": {
            "description": "The account holder's date of birth in `YYYY-MM-DD` format",
            "type": "string",
            "format": "date",
            "example": "1986-01-01"
          },
          "country_of_birth": {
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the account holder's country of birth",
            "type": "string",
            "example": "GB"
          },
          "residential_status": {
            "description": "The account holder's residential status",
            "type": "string",
            "enum": [
              "resident",
              "non_resident"
            ],
            "example": "resident"
          },
          "billing_address": {
            "description": "The billing address of the account holder",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "description": "The phone number of the account holder",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "identification": {
            "$ref": "#/components/schemas/AccountHolderIdentification"
          },
          "email": {
            "description": "The account holder's email address",
            "type": "string",
            "format": "email",
            "example": "test.user@checkout.com"
          }
        }
      },
      "AccountHolderIdentification": {
        "type": "object",
        "description": "Bank account holder's proof of identification",
        "properties": {
          "type": {
            "description": "The type of identification used to identify the account holder",
            "type": "string",
            "enum": [
              "passport",
              "driving_licence",
              "national_id",
              "company_registration",
              "tax_id"
            ],
            "example": "passport"
          },
          "number": {
            "description": "The identification number",
            "type": "string",
            "example": "09876"
          },
          "issuing_country": {
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the country that issued the identification",
            "type": "string",
            "example": "US"
          }
        }
      },
      "BankDetails": {
        "type": "object",
        "description": "Details of the bank",
        "properties": {
          "name": {
            "description": "The bank's name",
            "type": "string",
            "example": "Lloyds TSB"
          },
          "branch": {
            "description": "The bank branch's name",
            "type": "string",
            "example": "Bournemouth"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The bank's contact address"
          }
        }
      },
      "UpdateCardAccountHolder": {
        "type": "object",
        "description": "The account holder details",
        "properties": {
          "first_name": {
            "description": "First name of the instrument owner\n",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "description": "Last name of the instrument owner.\n",
            "type": "string",
            "example": "Smith"
          },
          "billing_address": {
            "description": "The billing address of the account holder",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "description": "The phone number of the account holder",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          }
        }
      },
      "RetrieveInstrumentResponse": {
        "type": "object",
        "required": [
          "id",
          "type",
          "fingerprint",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "properties": {
          "id": {
            "description": "The instrument id for the retrieved instrument",
            "type": "string",
            "example": "src_lmyvsjadlxxu7kqlgevt6ebkra"
          },
          "type": {
            "description": "The instrument type",
            "type": "string",
            "example": "card"
          },
          "fingerprint": {
            "type": "string",
            "description": "A token that can uniquely identify this card across all customers",
            "pattern": "^([a-z0-9]{26})$",
            "example": "vnsdrvikkvre3dtrjjvlm5du4q"
          },
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "The expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "name": {
            "description": "The name of the cardholder",
            "type": "string",
            "example": "John Test"
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996",
            "minLength": 4,
            "maxLength": 4
          },
          "bin": {
            "type": "string",
            "description": "The card issuer's bank identification number (BIN)",
            "example": "454347"
          },
          "card_type": {
            "type": "string",
            "description": "The card type",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge",
              "Deferred Debit"
            ],
            "example": "Credit"
          },
          "card_category": {
            "type": "string",
            "description": "The card category",
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          },
          "account_holder": {
            "type": "object",
            "description": "The account holder details",
            "properties": {
              "billing_address": {
                "description": "The billing address of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Phone"
                  }
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "The customer attached to the instrument",
            "properties": {
              "id": {
                "description": "The identifier of an existing customer",
                "type": "string",
                "example": "cus_gajmdgunwwlehbctuj6a3sifpm"
              },
              "email": {
                "description": "The email address of the customer",
                "type": "string",
                "example": "JohnTest@test.com"
              },
              "name": {
                "description": "The name address of the customer",
                "type": "string",
                "example": "John Test"
              },
              "default": {
                "description": "True, if this instrument is set as the default for the customer",
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "UpdateInstrumentRequest": {
        "type": "object",
        "properties": {
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "The expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "name": {
            "description": "The name of the cardholder",
            "type": "string",
            "example": "John Test"
          },
          "account_holder": {
            "type": "object",
            "description": "The account holder details",
            "properties": {
              "billing_address": {
                "description": "The billing address of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the account holder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Phone"
                  }
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "The customer attached to the instrument",
            "properties": {
              "id": {
                "description": "The identifier of an existing customer",
                "type": "string",
                "example": "cus_gajmdgunwwlehbctuj6a3sifpm"
              },
              "default": {
                "description": "If true, sets this instrument as the default for the customer (if false, no changes are actioned)",
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "UpdateInstrumentResponse": {
        "type": "object",
        "required": [
          "type",
          "fingerprint"
        ],
        "properties": {
          "type": {
            "description": "The instrument type",
            "type": "string",
            "example": "card"
          },
          "fingerprint": {
            "type": "string",
            "description": "A token that can uniquely identify this card across all customers",
            "pattern": "^([a-z0-9]{26})$",
            "example": "vnsdrvikkvre3dtrjjvlm5du4q"
          }
        }
      },
      "InvalidError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "IPAddress": {
        "type": "string",
        "format": "ipv4",
        "maxLength": 45,
        "example": "90.197.169.245"
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "description": "The link URL",
            "type": "string"
          }
        },
        "required": [
          "href"
        ]
      },
      "SelfLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": [
              "self"
            ]
          }
        },
        "required": [
          "rel"
        ]
      },
      "PagingError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "paging_limit_invalid"
            }
          }
        }
      },
      "GetPaymentLinkResponse": {
        "type": "object",
        "discriminator": {
          "propertyName": "status",
          "mapping": {
            "Active": "#/components/schemas/PaymentLinkResponseStatusActive",
            "Payment Received": "#/components/schemas/PaymentLinkResponseStatusPaymentReceived",
            "Expired": "#/components/schemas/PaymentLinkResponseStatusExpired"
          }
        },
        "required": [
          "id",
          "status",
          "amount",
          "currency",
          "expires_on",
          "created_on",
          "billing",
          "_links"
        ],
        "properties": {
          "id": {
            "example": "pl_ELqQJXdXzabU",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkId"
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Payment Received",
              "Expired"
            ],
            "description": "The status of the Payment Link:\n  - `Active`: The Payment Link can accept a payment from the customer. A payment may have been attempted by the customer but not completed successfully.\n  - `Payment Received`: A payment has been received successfully using this Payment Link.\n  - `Expired`: The Payment Link has expired and can no longer be accessed.\n",
            "example": "Active"
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for an in progress or completed payment for this Payment Link.",
            "example": null
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount.",
            "example": 100
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment.<br>",
            "example": "GBP"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment.",
            "example": "ORD-123A"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment.",
            "example": "Payment for Gold Necklace"
          },
          "created_on": {
            "type": "string",
            "description": "The date and time when the Payment Link was created.",
            "format": "date-time",
            "example": "2021-08-19T20:25:28.725Z"
          },
          "expires_on": {
            "type": "string",
            "description": "The date and time when the Payment Link expires.",
            "format": "date-time",
            "example": "2021-08-20T20:25:28+08:00"
          },
          "customer": {
            "type": "object",
            "description": "The customer's details.",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "The email address for the customer.",
                "example": "brucewayne@email.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name.",
                "example": "Bruce Wayne"
              }
            }
          },
          "shipping": {
            "type": "object",
            "description": "The address any products are being sent to.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The customer's address to ship to.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              }
            }
          },
          "billing": {
            "type": "object",
            "additionalProperties": false,
            "description": "The billing details.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The billing address.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number.",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "products": {
            "type": "array",
            "description": "Details about the provided products.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "quantity",
                "price"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Descriptive item name.",
                  "example": "Gold Necklace"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The item quantity",
                  "example": 1
                },
                "price": {
                  "type": "integer",
                  "description": "Minor units. Includes tax, excludes discounts.",
                  "example": 200
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "title": "The Metadata Schema",
            "description": "Any additional information stored at the point of creation.",
            "additionalProperties": true
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "If provided, the success page will include a button that redirects your customer to the provided URL.",
            "example": "https://example.com/success",
            "maxLength": 255
          },
          "locale": {
            "type": "string",
            "description": "Creates a translated version of the page in the specified language",
            "enum": [
              "de-DE",
              "en-GB",
              "fr-FR",
              "it-IT",
              "nl-NL",
              "es-ES",
              "zh-HK",
              "zh-TW",
              "zh-CN",
              "ja-JP",
              "fil-PH",
              "id-ID",
              "ms-MY",
              "th-TH",
              "vi-VN",
              "hi-IN"
            ],
            "default": "en-GB"
          }
        }
      },
      "PaymentLinkId": {
        "type": "string",
        "pattern": "^pl_[A-Za-z0-9_-]{12}$",
        "description": "The unique identifier for a Payment Link.",
        "maxLength": 15,
        "minLength": 15
      },
      "PaymentLinkResponseLinks": {
        "type": "object",
        "description": "The links related to the Payment Link.",
        "minItems": 2,
        "required": [
          "self",
          "redirect"
        ],
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the Payment Link details."
          },
          "redirect": {
            "type": "object",
            "description": "The link to visit the Payment Link page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          },
          "payment": {
            "type": "object",
            "description": "The URI of the in progress or completed payment for this Payment Link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          },
          "payment_actions": {
            "type": "object",
            "description": "The URI of the actions associated with the in progress or completed payment for this Payment Link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ]
          }
        },
        "example": {
          "self": {
            "href": "https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU"
          },
          "redirect": {
            "href": "https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU"
          }
        }
      },
      "PaymentLinkResponseStatusActive": {
        "type": "object",
        "description": "A Payment Link that is active and can accept a payment from a customer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetPaymentLinkResponse"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentLinkResponseLinks"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentLinkResponseStatusExpired": {
        "type": "object",
        "description": "An expired Payment Link",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetPaymentLinkResponse"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentLinkResponseLinks"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentLinkResponseStatusPaymentReceived": {
        "type": "object",
        "description": "A Payment Link that has received a payment",
        "required": [
          "payment_id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GetPaymentLinkResponse"
          },
          {
            "type": "object",
            "properties": {
              "payment_id": {
                "example": "pay_mbabizu24mvu3mela5njyhpit4"
              },
              "_links": {
                "required": [
                  "payment",
                  "payment_actions"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentLinkResponseLinks"
                  }
                ],
                "example": {
                  "self": {
                    "href": "https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU"
                  },
                  "redirect": {
                    "href": "https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU"
                  },
                  "payment": {
                    "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                  },
                  "payment_actions": {
                    "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                  }
                }
              }
            }
          }
        ]
      },
      "PaymentLinksRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency",
          "billing"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The payment amount. The exact format <a href=\"https://docs.checkout.com/docs/calculating-the-value\" target=\"_blank\">depends on the currency</a>.",
            "minimum": 1,
            "example": 200
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment.<br><i>The `currency` and `billing.address.country` fields determine which payment methods are shown on the payment page</i>.",
            "example": "GBP",
            "minLength": 3,
            "maxLength": 3
          },
          "payment_type": {
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "enum": [
              "Regular",
              "Recurring"
            ],
            "default": "Regular"
          },
          "payment_ip": {
            "type": "string",
            "format": "ipv4",
            "maxLength": 45,
            "description": "The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses"
          },
          "billing_descriptor": {
            "type": "object",
            "description": "An optional description that is displayed on the customer's statement identifying a purchase",
            "required": [
              "name",
              "city"
            ],
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 25,
                "description": "A dynamic description of the change"
              },
              "city": {
                "type": "string",
                "minLength": 1,
                "maxLength": 13,
                "description": "The city from which the charge originated"
              }
            }
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number.<br><i>Required for PayPal payments<i>.",
            "example": "ORD-123A",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "A description of the payment.",
            "example": "Payment for Gold Necklace",
            "maxLength": 100
          },
          "expires_in": {
            "type": "integer",
            "description": "The time for which the link remains valid, in seconds.",
            "minimum": 1,
            "maximum": 1209600,
            "default": 86400,
            "example": 604800
          },
          "customer": {
            "type": "object",
            "description": "The customer's details.",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "An email address to associate with the customer.",
                "example": "brucewayne@email.com",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for new customers.",
                "example": "Bruce Wayne",
                "maxLength": 255
              }
            }
          },
          "shipping": {
            "type": "object",
            "description": "The address any products are being sent to.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The customer's address to ship to.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "billing": {
            "type": "object",
            "additionalProperties": false,
            "description": "The billing details.",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "object",
                "description": "The billing address.",
                "required": [
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "type": "object",
                "description": "The customer's phone number",
                "required": [
                  "number"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "description": "Use the processing object to influence or override the data sent during card processing",
            "properties": {
              "aft": {
                "type": "boolean",
                "description": "Indicates whether the payment is an [Account Funding Transaction](https://docs.checkout.com/payment-actions/account-funding-transactions)"
              }
            }
          },
          "products": {
            "type": "array",
            "description": "Details about the products in the order.",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name",
                "quantity",
                "price"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Descriptive item name.",
                  "example": "Gold Necklace"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The item quantity.",
                  "minimum": 1,
                  "example": 1
                },
                "price": {
                  "type": "integer",
                  "description": "Minor units. Includes tax, excludes discounts.",
                  "minimum": 0,
                  "maximum": 100000000,
                  "example": 200
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "title": "The Metadata Schema",
            "description": "Allows you to store additional information about the transaction. This object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.",
            "additionalProperties": true
          },
          "3ds": {
            "type": "object",
            "description": "Information required for 3D Secure payments.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to process this payment as a 3D Secure payment.",
                "default": false
              },
              "attempt_n3d": {
                "type": "boolean",
                "description": "Determines whether to attempt a 3D Secure payment as non-3D Secure should the card issuer not be enrolled.",
                "default": false
              }
            }
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "If provided, the success page will include a button that redirects your customer to the provided URL.",
            "example": "https://example.com/success",
            "maxLength": 255
          },
          "locale": {
            "type": "string",
            "description": "Creates a translated version of the page in the specified language",
            "enum": [
              "de-DE",
              "en-GB",
              "fr-FR",
              "it-IT",
              "nl-NL",
              "es-ES",
              "zh-HK",
              "zh-TW",
              "zh-CN",
              "ja-JP",
              "fil-PH",
              "id-ID",
              "ms-MY",
              "th-TH",
              "vi-VN",
              "hi-IN"
            ],
            "default": "en-GB"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable).",
            "example": true
          },
          "capture_on": {
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          }
        }
      },
      "PaymentLinksResponse": {
        "type": "object",
        "required": [
          "id",
          "_links"
        ],
        "properties": {
          "id": {
            "example": "pl_ELqQJXdXzabU",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkId"
              }
            ]
          },
          "expires_on": {
            "type": "string",
            "description": "The date and time when the Payment Link expires.",
            "format": "date-time",
            "example": "2020-08-20T20:25:28+08:00"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number.",
            "example": "ORD-123A"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the Payment Link session.",
            "readOnly": true,
            "minItems": 1,
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU"
                }
              }
            }
          }
        }
      },
      "3dsData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Inidicates whether this was a 3D Secure payment downgraded to non-3D Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          },
          "signature_valid": {
            "type": "string",
            "description": "Verification to ensure the integrity of the response",
            "example": "Y"
          },
          "authentication_response": {
            "type": "string",
            "description": "Indicates whether or not the cardholder was authenticated\n  * `Y` - Customer authenticated\n  * `N` - Customer not authenticated\n  * `A` - An authentication attempt occurred but could not be completed\n  * `U` - Unable to perform authentication\n",
            "example": "Y"
          },
          "cryptogram": {
            "type": "string",
            "description": "Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3D secure payment data",
            "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
          },
          "xid": {
            "type": "string",
            "description": "Unique identifier for the transaction assigned by the MPI",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication",
            "example": "2.1.0"
          },
          "exemption": {
            "type": "string",
            "description": "Specifies an exemption reason so that the payment is not processed using 3D Secure authentication",
            "example": "low_value"
          }
        }
      },
      "3dsEnrollmentData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Indicates whether this was a 3D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          }
        }
      },
      "3dsRequest": {
        "type": "object",
        "description": "Information required for 3D Secure payments",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether to process this payment as a 3D Secure payment",
            "default": false,
            "example": true
          },
          "attempt_n3d": {
            "type": "boolean",
            "description": "Determines whether to attempt a 3D Secure payment as non-3D Secure\nshould the card issuer not be enrolled\n",
            "default": false,
            "example": true
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator security level associated with the 3D Secure enrollment result. Required if using a third-party merchant plug-in (MPI)",
            "maxLength": 2,
            "example": "05"
          },
          "cryptogram": {
            "type": "string",
            "description": "A Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3D Secure). Required if using an external MPI",
            "maxLength": 50,
            "example": "AgAAAAAAAIR8CQrXcIhbQAAAAAA="
          },
          "xid": {
            "type": "string",
            "description": "The 3D Secure transaction identifier. Required if using an external MPI with 3D Secure 2.X.X and a Mastercard card, or with 3D Secure 1.X.X for any supported card scheme",
            "maxLength": 100,
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication. Defaults to 1.0.0 if not provided",
            "maxLength": 10,
            "example": "2.0.1"
          },
          "exemption": {
            "type": "string",
            "description": "Specifies an exemption reason so that the payment is not processed using 3D Secure authentication. Learn more about exemptions in our <a href=\"https://docs.checkout.com/risk-management/sca-compliance-guide#SCAcomplianceguide-PossibleSCAexemptionsexemptions\">SCA compliance guide</a>.",
            "enum": [
              "low_value",
              "secure_corporate_payment",
              "trusted_listing",
              "transaction_risk_assessment"
            ],
            "example": "low_value"
          },
          "challenge_indicator": {
            "type": "string",
            "description": "Indicates the preference for whether or not a 3DS challenge should be performed. The customer’s bank has the final say on whether or not the customer receives the challenge.",
            "enum": [
              "no_preference",
              "no_challenge_requested",
              "challenge_requested",
              "challenge_requested_mandate"
            ],
            "default": "no_preference"
          }
        }
      },
      "ActionId": {
        "type": "string",
        "pattern": "^(act)_(\\w{26})$",
        "description": "The action identifier",
        "maxLength": 30,
        "minLength": 30,
        "example": "act_y3oqhf46pyzuxjbcn2giaqnb44"
      },
      "BillingDescriptor": {
        "type": "object",
        "description": "An optional description that is displayed on the customer's statement identifying a purchase.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "A dynamic description of the charge",
            "example": "SUPERHEROES.COM",
            "maxLength": 25
          },
          "city": {
            "type": "string",
            "description": "The city from which the charge originated",
            "minimum": 1,
            "example": "GOTHAM",
            "maxLength": 13
          }
        },
        "required": [
          "name",
          "city"
        ]
      },
      "CaptureAcceptedResponse": {
        "type": "object",
        "description": "Capture response",
        "required": [
          "action_id"
        ],
        "properties": {
          "action_id": {
            "description": "The unique identifier for the capture action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the capture request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the capture",
            "readOnly": true,
            "minItems": 2,
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be captured. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "For some alternative payments, the URI that the customer should be redirected to to complete the capture",
                "example": {
                  "href": "https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "required": [
              "payment"
            ]
          }
        }
      },
      "CaptureRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to capture. If not specified, the full payment amount will be captured\n",
            "minimum": 0,
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this capture request",
            "maxLength": 50,
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the capture request. This can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "description": "The order line item or product that is being purchased",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock-keeping unit (SKU) identifier of the item",
            "example": "858818ac"
          },
          "name": {
            "type": "string",
            "description": "The name of the item or product",
            "example": "Kevlar batterang"
          },
          "description": {
            "type": "string",
            "description": "A description of the item or product",
            "example": "The fastest, hardest batterang known to man"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of an image of the item or product",
            "example": "http://example.com/batterang.jpg"
          },
          "price": {
            "type": "number",
            "description": "The unit price of the item or product in the minor currency unit",
            "example": 34.5
          },
          "quantity": {
            "type": "number",
            "description": "The number of the items purchased",
            "example": 2
          },
          "shipping_cost": {
            "type": "number",
            "description": "The shipping cost of the item",
            "example": 2.99
          },
          "shipping_tracking_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL to track the shipping status of the item",
            "example": "http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL"
          }
        }
      },
      "Payment": {
        "type": "object",
        "description": "Payment response",
        "required": [
          "id",
          "requested_on",
          "amount",
          "currency",
          "status",
          "approved",
          "_links"
        ],
        "properties": {
          "id": {
            "description": "Payment unique identifier",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ]
          },
          "requested_on": {
            "description": "The date/time the payment was requested",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "source": {
            "description": "The source of the payment",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ]
          },
          "destination": {
            "description": "The destination of the payment",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseDestination"
              }
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount",
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "payment_type": {
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment was successful",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "enum": [
              "Pending",
              "Authorized",
              "Card Verified",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Canceled",
              "Expired",
              "Paid"
            ],
            "example": "Authorized"
          },
          "3ds": {
            "type": "object",
            "description": "Provides information relating to the processing of 3D Secure payments",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsData"
              }
            ]
          },
          "risk": {
            "type": "object",
            "description": "Returns the payments risk assessment results",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "The customer to which this payment is linked",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address",
                "example": "brucewayne@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Bruce Wayne"
              }
            },
            "required": [
              "id"
            ]
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "description": "The payment shipping details",
            "properties": {
              "address": {
                "description": "The shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number associated with the shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "payment_ip": {
            "description": "The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ]
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. \nApplicable for 3D Secure, digital wallets, and network token payments\n",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": "488341541494658"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentActionSummary"
            },
            "description": "A summary of the payment's actions, \nreturned when a session ID is used to get the payment details\n"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the payment",
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "refund": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
              }
            }
          }
        }
      },
      "PaymentAcceptedResponse": {
        "type": "object",
        "description": "Payment response",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "description": "The payment's unique identifier",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "enum": [
              "Pending"
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment request",
            "example": "ORD-5023-4E89"
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the payment, if provided in the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ]
          },
          "3ds": {
            "type": "object",
            "description": "Provides 3D Secure enrollment status",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ]
          },
          "_links": {
            "type": "object",
            "description": "The links related to the payment",
            "readOnly": true,
            "minItems": 2,
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI that the customer should be redirected to in order to complete the payment",
                "example": {
                  "href": "https://api.checkout.com/3ds/pay_mbabizu24mvu3mela5njyhpit4"
                }
              }
            },
            "required": [
              "self"
            ]
          }
        }
      },
      "PaymentAction": {
        "type": "object",
        "required": [
          "id",
          "type",
          "amount",
          "response_code",
          "processed_on"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the payment action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of action",
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund",
              "Payout"
            ]
          },
          "processed_on": {
            "description": "The date/time the action was processed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The action amount",
            "example": 6540
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the action was successful",
            "example": true
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code for cards",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the action",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "description": "Returns information related to the processing of the payment",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_reference_number": {
                "type": "string",
                "description": "A unique identifier for the capture that is submitted to the card scheme during processing",
                "example": "24021219099007452440793"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to an action"
          }
        }
      },
      "PaymentActionsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentAction"
        },
        "minItems": 1,
        "description": "The payment actions\n",
        "example": [
          {
            "id": "act_fd3h6evhpn3uxdoqbuu3lqnqbm",
            "type": "Refund",
            "processed_on": "2018-01-20T10:30:48Z",
            "amount": 1000,
            "approved": true,
            "response_code": "10000",
            "response_summary": "Approved"
          },
          {
            "id": "act_gefycn3jcvuupboxfmqrhk2aym",
            "type": "Capture",
            "processed_on": "2018-01-17T10:30:48Z",
            "amount": 6540,
            "approved": true,
            "response_code": "10000",
            "response_summary": "Approved",
            "processing": {
              "acquirer_reference_number": "24021219099007452440793",
              "acquirer_transaction_id": "00745244079"
            },
            "metadata": {
              "shipping_ref": "MQIBN2"
            }
          },
          {
            "id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
            "type": "Authorization",
            "processed_on": "2018-01-17T09:30:48Z",
            "amount": 6540,
            "approved": true,
            "auth_code": "643381",
            "response_code": "10000",
            "response_summary": "Approved",
            "reference": "ORD-5023-4E89",
            "processing": {
              "retrieval_reference_number": "909913440644",
              "acquirer_transaction_id": "440644309099499894406"
            }
          }
        ]
      },
      "PaymentActionSummary": {
        "type": "object",
        "required": [
          "id",
          "type",
          "response_code"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the payment action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of action",
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund"
            ]
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          }
        }
      },
      "PaymentDestination": {
        "type": "object",
        "description": "A destination for OpenPay payments\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The OpenPay account identifier",
            "example": "vendor-123456"
          },
          "amount": {
            "type": "integer",
            "description": "The amount to be credited to the destination in the major currency unit",
            "example": 10.5
          }
        },
        "required": [
          "id",
          "amount"
        ]
      },
      "PaymentId": {
        "type": "string",
        "pattern": "^(pay)_(\\w{26})$",
        "description": "The payment identifier",
        "maxLength": 30,
        "minLength": 30,
        "example": "pay_mbabizu24mvu3mela5njyhpit4"
      },
      "PaymentRecipient": {
        "type": "object",
        "description": "Information about the recipient of the payment's funds. Relevant for [Account Funding Transactions](https://docs.checkout.com/payments/manage-payments/account-funding-transactions) and VISA or MasterCard [domestic UK transactions processed by Financial Institutions](https://docs.checkout.com/risk-management/requirements-for-financial-institutions).",
        "properties": {
          "dob": {
            "type": "string",
            "format": "date",
            "description": "The recipient's date of birth (yyyy-mm-dd)",
            "maxLength": 10,
            "example": "1985-05-15"
          },
          "account_number": {
            "type": "string",
            "description": "The first six digits and the last four digits of the primary recipient's card, without spaces, or up to ten digits of the primary recipient's account number",
            "minLength": 10,
            "maxLength": 10,
            "example": "5555554444"
          },
          "zip": {
            "type": "string",
            "description": "The first part of the UK postcode (e.g., W1T 4TJ would be W1T)",
            "maxLength": 6,
            "example": "W1T"
          },
          "first_name": {
            "type": "string",
            "description": "The recipient's first name",
            "maxLength": 50,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The recipient's last name",
            "maxLength": 50,
            "example": "Jones"
          },
          "country": {
            "type": "string",
            "description": "The country ([two-letter ISO country code](https://docs.checkout.com/resources/codes/country-codes)) of the recipient's address",
            "minLength": 2,
            "maxLength": 2,
            "example": "GB"
          }
        }
      },
      "PaymentRequest": {
        "type": "object",
        "required": [
          "currency"
        ],
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\nOmit the amount or provide a value of `0` to perform a card verification.\n",
            "minimum": 0,
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "payment_type": {
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "default": "Regular",
            "example": "Recurring"
          },
          "merchant_initiated": {
            "type": "boolean",
            "description": "Flags the payment as a merchant-initiated transaction (MIT). <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"_blank\">Must be set to `true` for all MITs</a>."
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number. Required when processing via dLocal or Bambora.",
            "maxLength": 50,
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "maxLength": 100,
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "The customer's details",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The identifier of an existing customer.\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "The customer's email address. Providing this will create a new customer, unless you have already stored a customer with the same email.",
                "maxLength": 255,
                "example": "brucewayne@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "maxLength": 255,
                "example": "Bruce Wayne"
              }
            }
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "description": "The shipping details",
            "properties": {
              "address": {
                "description": "The shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number associated with the shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "maxLength": 100,
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "maxLength": 255,
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "maxLength": 255,
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "description": "The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ]
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "description": "Use the processing object to influence or override the data sent during card processing",
            "properties": {
              "aft": {
                "type": "boolean",
                "description": "Indicates whether the payment is an [Account Funding Transaction](https://docs.checkout.com/payment-actions/account-funding-transactions)"
              },
              "dlocal": {
                "type": "object",
                "description": "Processing information required for <a href=\"https://docs.checkout.com/payment-methods/cards/dlocal\" target=\"_blank\">dLocal payments</a>.",
                "properties": {
                  "country": {
                    "type": "string",
                    "description": "The two-letter ISO code of the cardholder's country.",
                    "example": "MX"
                  },
                  "payer": {
                    "type": "object",
                    "description": "Details about the customer. These details may differ from those of the cardholder.",
                    "required": [
                      "document",
                      "name",
                      "email"
                    ],
                    "properties": {
                      "document": {
                        "type": "string",
                        "description": "The customer's personal identification number. The identification required is country-specific. See the <a href=\"https://docs.dlocal.com/api-documentation/payins-api-reference/country-reference#documents\" target=\"_blank\">dLocal documentation</a> for more information.",
                        "example": "5305305305"
                      },
                      "name": {
                        "type": "string",
                        "description": "The customer's full name.",
                        "example": "John Doe"
                      },
                      "email": {
                        "type": "string",
                        "description": "The customer's email address.",
                        "example": "john.doe@example.com"
                      }
                    }
                  },
                  "installments": {
                    "type": "object",
                    "description": "Details about the installments.",
                    "properties": {
                      "count": {
                        "type": "string",
                        "description": "The number of payments to be made in the installment plan.",
                        "example": "3"
                      }
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "PaymentRequestDestination": {
        "type": "object",
        "description": "The destination of the payout.<br><i>Use to pay out to a card</i>.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenDestination",
            "id": "#/components/schemas/02_PaymentRequestIdDestination",
            "card": "#/components/schemas/03_PaymentRequestCardDestination"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payout destination type",
            "example": "token"
          }
        }
      },
      "PaymentRequestSource": {
        "type": "object",
        "description": "The source of the payment.<br><i>Use to request a payment</i>.\n",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenSource",
            "id": "#/components/schemas/02_PaymentRequestIdSource",
            "card": "#/components/schemas/03_PaymentRequestCardSource",
            "customer": "#/components/schemas/04_PaymentRequestCustomerSource",
            "network_token": "#/components/schemas/05_PaymentRequestNetworkTokenSource",
            "alipay": "#/components/schemas/PaymentRequestAlipaySource",
            "benefitpay": "#/components/schemas/PaymentRequestBenefitPaySource",
            "baloto": "#/components/schemas/PaymentRequestBalotoSource",
            "boleto": "#/components/schemas/PaymentRequestBoletoSource",
            "eps": "#/components/schemas/PaymentRequestEpsSource",
            "giropay": "#/components/schemas/PaymentRequestGiropaySource",
            "ideal": "#/components/schemas/PaymentRequestIdealSource",
            "klarna": "#/components/schemas/PaymentRequestKlarnaSource",
            "knet": "#/components/schemas/PaymentRequestKnetSource",
            "oxxo": "#/components/schemas/PaymentRequestOXXOSource",
            "p24": "#/components/schemas/PaymentRequestP24Source",
            "pagofacil": "#/components/schemas/PaymentRequestPagoFacilSource",
            "paypal": "#/components/schemas/PaymentRequestPayPalSource",
            "poli": "#/components/schemas/PaymentRequestPoliSource",
            "rapipago": "#/components/schemas/PaymentRequestRapiPagoSource",
            "bancontact": "#/components/schemas/PaymentRequestBancontactSource",
            "fawry": "#/components/schemas/PaymentRequestFawrySource",
            "qpay": "#/components/schemas/PaymentRequestQPaySource",
            "multibanco": "#/components/schemas/PaymentRequestMultibancoSource",
            "dLocal": "#/components/schemas/06_PaymentRequestdLocalSource",
            "sofort": "#/components/schemas/PaymentRequestSofortSource"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type <br> *Note:* *To make a payment with full card details, you must be <a href=\"https://www.checkout.com/docs/risk-management/pci-compliance\" target=\"blank\">SAQ D PCI compliant</a>*<br> BenefitPay is **DEPRECATED**\n",
            "example": "card"
          }
        }
      },
      "PaymentResponse": {
        "type": "object",
        "description": "Payment Response",
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "approved",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "properties": {
          "id": {
            "description": "The payment's unique identifier",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ]
          },
          "action_id": {
            "description": "The unique identifier for the action performed against this payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "approved": {
            "type": "boolean",
            "description": "Whether or not the authorization or capture was successful",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "enum": [
              "Authorized",
              "Pending",
              "Card Verified",
              "Captured",
              "Declined",
              "Paid"
            ],
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was authorized",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "risk": {
            "type": "object",
            "description": "Returns the payment's risk assessment results",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether or not the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            }
          },
          "source": {
            "description": "The source of the payment",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the payment, if provided in the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ]
          },
          "processed_on": {
            "description": "The date/time the payment was processed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "description": "Returns information related to the processing of the payment",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              },
              "recommendation_code": {
                "type": "string",
                "description": "A <a href=\"https://docs.checkout.com/resources/codes/recommendation-codes\" target=\"blank\">code</a> that represents the next recommended action for the payment",
                "example": "02"
              }
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. Applicable for 3D Secure, digital wallet, and network token payments",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier",
            "example": "489341065491658"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the payment",
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "void": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
              },
              "capture": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
              }
            }
          }
        }
      },
      "PaymentResponseCustomer": {
        "type": "object",
        "description": "The customer to which this payment is linked",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^(cus)_(\\w{26})$",
            "description": "The customer's unique identifier. This can be passed as a source when making a payment",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "brucewayne@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Bruce Wayne"
          }
        }
      },
      "PaymentResponseDestination": {
        "type": "object",
        "description": "Payment destination",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardDestination"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment destination type.\n",
            "example": "card"
          },
          "id": {
            "type": "string",
            "description": "The payment source identifier that can be used for subsequent payments.\nFor new sources, this will only be returned if the payment was approved\n",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          },
          "billing_address": {
            "description": "The payment source owner's billing address",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "description": "The payment source owner's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          }
        }
      },
      "PaymentResponseSource": {
        "type": "object",
        "description": "Payment source",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardSource",
            "alipay": "#/components/schemas/PaymentResponseAlipaySource",
            "benefitpay": "#/components/schemas/PaymentResponseBenefitPaySource",
            "baloto": "#/components/schemas/PaymentResponseBalotoSource",
            "boleto": "#/components/schemas/PaymentResponseBoletoSource",
            "eps": "#/components/schemas/PaymentResponseEpsSource",
            "giropay": "#/components/schemas/PaymentResponseGiropaySource",
            "ideal": "#/components/schemas/PaymentResponseIdealSource",
            "klarna": "#/components/schemas/PaymentResponseKlarnaSource",
            "knet": "#/components/schemas/PaymentResponseKnetSource",
            "oxxo": "#/components/schemas/PaymentResponseOXXOSource",
            "p24": "#/components/schemas/PaymentResponseP24Source",
            "pagofacil": "#/components/schemas/PaymentResponsePagoFacilSource",
            "paypal": "#/components/schemas/PaymentResponsePayPalSource",
            "poli": "#/components/schemas/PaymentResponsePoliSource",
            "rapipago": "#/components/schemas/PaymentResponseRapiPagoSource",
            "bancontact": "#/components/schemas/PaymentResponseBancontactSource",
            "fawry": "#/components/schemas/PaymentResponseFawrySource",
            "qpay": "#/components/schemas/PaymentResponseQPaySource",
            "multibanco": "#/components/schemas/PaymentResponseMultibancoSource",
            "sofort": "#/components/schemas/PaymentResponseSofortSource"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),\nthis will be `card`; otherwise it will be the name of the alternative payment method<br> BenefitPay is **DEPRECATED**\n",
            "example": "card"
          },
          "id": {
            "type": "string",
            "description": "The payment source identifier that can be used for subsequent payments.\nFor new sources, this will only be returned if the payment was approved\n",
            "example": "src_nwd3m4in3hkuddfpjsaevunhdy"
          },
          "billing_address": {
            "description": "The payment source owner's billing address",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "description": "The payment source owner's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          }
        }
      },
      "Payout": {
        "type": "object",
        "required": [
          "destination",
          "amount",
          "currency"
        ],
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\nOmit the amount or provide a value of `0` to perform a card verification.\n",
            "minimum": 0,
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "payment_type": {
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "maxLength": 50,
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "maxLength": 100,
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "The customer's details",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The identifier of an existing customer. If neither customer `id` nor `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "An optional email address to associate with the customer",
                "maxLength": 255,
                "example": "brucewayne@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "maxLength": 255,
                "example": "Bruce Wayne"
              }
            }
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "description": "The shipping details",
            "properties": {
              "address": {
                "description": "The shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number associated with the shipping address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "maxLength": 255,
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "format": "uri",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "maxLength": 255,
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "description": "The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ]
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "description": "Use the processing object to influence or override the data sent during card processing",
            "properties": {
              "senderInformation": {
                "type": "object",
                "description": "Allows you to send additional data required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments. Only required when sending transactions on behalf of another person or business. <a href=\"https://docs.checkout.com/card-payouts/sender-data-for-card-payouts\" target=\"_blank\">See our documentation for specific requirements</a>.",
                "properties": {
                  "reference": {
                    "type": "string",
                    "description": "Merchant's unique customer ID.<br> <i>Alphanumeric characters only</i>.",
                    "maxLength": 16
                  },
                  "accountNumber": {
                    "type": "string",
                    "description": "The account number.",
                    "maxLength": 19
                  },
                  "firstName": {
                    "type": "string",
                    "description": "The first name.",
                    "maxLength": 15
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name.",
                    "maxLength": 15
                  },
                  "address": {
                    "type": "string",
                    "description": "The address.",
                    "maxLength": 35
                  },
                  "city": {
                    "type": "string",
                    "description": "The address city.",
                    "maxLength": 25
                  },
                  "state": {
                    "type": "string",
                    "description": "The state or province of the address country (<a href=\"https://en.wikipedia.org/wiki/ISO_3166-2\" target=\"_blank\">ISO 3166-2 code</a> of up to three alphanumeric characters).",
                    "maxLength": 3
                  },
                  "country": {
                    "type": "string",
                    "description": "The address country (two-letter <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"_blank\">ISO country code</a>).",
                    "maxLength": 2
                  },
                  "postalCode": {
                    "type": "string",
                    "description": "The post/zip code.<br><i>Only required for Mastercard transactions</i>.",
                    "maxLength": 10
                  },
                  "sourceOfFunds": {
                    "type": "string",
                    "description": "The source of the funds.",
                    "enum": [
                      "Credit",
                      "Debit",
                      "Prepaid",
                      "DepositAccount",
                      "MobileMoneyAccount",
                      "Cash"
                    ]
                  }
                }
              },
              "purpose": {
                "type": "string",
                "description": "Contains the purpose of the transaction. Required when the destination country is Argentina, Bangladesh, Egypt or India. Mandatory from 15th October 2021.",
                "enum": [
                  "donations",
                  "education",
                  "emergency_need",
                  "expatriation",
                  "family_support",
                  "financial_services",
                  "gifts",
                  "income",
                  "insurance",
                  "investment",
                  "it_services",
                  "leisure",
                  "loan_payment",
                  "medical_treatment",
                  "other",
                  "pension",
                  "royalties",
                  "savings",
                  "travel_and_tourism"
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "RefundAcceptedResponse": {
        "type": "object",
        "description": "Refund response",
        "required": [
          "action_id"
        ],
        "properties": {
          "action_id": {
            "description": "The unique identifier for the refund action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the refund request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the refund",
            "readOnly": true,
            "minItems": 2,
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be refunded. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "required": [
              "payment"
            ]
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to refund. If not specified, the full payment amount will be refunded\n",
            "minimum": 0,
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this refund request",
            "maxLength": 50,
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "01_PaymentRequestTokenDestination": {
        "type": "object",
        "description": "A token payment destination",
        "required": [
          "token",
          "first_name",
          "last_name"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "pattern": "^(tok)_(\\w{26})$",
                "description": "The Checkout.com token (e.g., a card, wallet or token)",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              },
              "billing_address": {
                "description": "The payout destination owner's billing address. This will override the billing address specified during tokenization",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The payout destination owner's phone number. This will override the phone number specified during tokenization",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "02_PaymentRequestIdDestination": {
        "type": "object",
        "description": "An existing payment source",
        "required": [
          "id",
          "first_name",
          "last_name"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment source identifier (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              }
            }
          }
        ]
      },
      "03_PaymentRequestCardDestination": {
        "type": "object",
        "description": "A card payment destination",
        "required": [
          "type",
          "number",
          "expiry_month",
          "expiry_year",
          "first_name",
          "last_name"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month of the card",
                "minimum": 1,
                "example": 6,
                "minLength": 1,
                "maxLength": 2
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025,
                "minLength": 4,
                "maxLength": 4
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "billing_address": {
                "description": "The payout destination owner's billing address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The payout destination owner's phone number",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "01_PaymentRequestTokenSource": {
        "type": "object",
        "description": "A token payment source",
        "required": [
          "token"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "pattern": "^(tok)_(\\w{26})$",
                "description": "The Checkout.com token (e.g., a card or digital wallet token)",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "billing_address": {
                "description": "The customer's billing address. This will override the billing address specified during tokenization",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The customer's phone number. This will override the phone number specified during tokenization",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "02_PaymentRequestIdSource": {
        "type": "object",
        "description": "An existing payment source",
        "required": [
          "id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(src)_(\\w{26})$",
                "description": "The payment source identifer (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "cvv": {
                "type": "string",
                "description": "The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)",
                "example": "956",
                "minLength": 3,
                "maxLength": 4
              }
            }
          }
        ]
      },
      "03_PaymentRequestCardSource": {
        "type": "object",
        "description": "A card payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number (without separators)",
                "maxLength": 19,
                "example": "4543474002249996"
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month of the card",
                "minimum": 1,
                "minLength": 1,
                "maxLength": 2,
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year of the card",
                "minLength": 4,
                "maxLength": 4,
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The name of the cardholder",
                "maxLength": 255,
                "example": "Bruce Wayne"
              },
              "cvv": {
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956",
                "minLength": 3,
                "maxLength": 4
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "billing_address": {
                "description": "The billing address of the cardholder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the cardholder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "04_PaymentRequestCustomerSource": {
        "type": "object",
        "description": "A customer source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The customer's identifier.",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        ]
      },
      "05_PaymentRequestNetworkTokenSource": {
        "type": "object",
        "description": "A network token payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "type",
              "token",
              "expiry_month",
              "expiry_year",
              "token_type",
              "cryptogram",
              "eci"
            ],
            "properties": {
              "token": {
                "type": "string",
                "description": "The network token PAN",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month of the token",
                "minimum": 1,
                "example": 6,
                "minLength": 1,
                "maxLength": 2
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year of the token",
                "example": 2025,
                "minLength": 4,
                "maxLength": 4
              },
              "token_type": {
                "type": "string",
                "description": "The type of token",
                "enum": [
                  "vts",
                  "mdes",
                  "applepay",
                  "googlepay"
                ]
              },
              "cryptogram": {
                "type": "string",
                "description": "The Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Optional if `previous_payment_id` is specified and `3ds.enabled` is false",
                "maxLength": 50,
                "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
              },
              "eci": {
                "type": "string",
                "description": "The Electronic Commerce Indicator (ECI) security level associated with the token. Optional if `previous_payment_id` is specified and `3ds.enabled` is false\n",
                "maxLength": 2,
                "example": "05"
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956",
                "minLength": 3,
                "maxLength": 4
              },
              "billing_address": {
                "description": "The customer's billing address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The customer's phone number",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "06_PaymentRequestdLocalSource": {
        "type": "object",
        "description": "A card payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "$ref": "#/components/schemas/03_PaymentRequestCardSource"
          },
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The LATAM local card scheme card number (without separators)",
                "example": "4543474002249996"
              }
            }
          }
        ]
      },
      "PaymentRequestAlipaySource": {
        "type": "object",
        "description": "Alipay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ]
      },
      "PaymentRequestBalotoSource": {
        "type": "object",
        "description": "Baloto Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "CO"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Colombia, namely, Cédula de Ciudadanía (CC).",
                    "example": "6845256661"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ]
      },
      "PaymentRequestBancontactSource": {
        "type": "object",
        "description": "Bancontact Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "payment_country",
              "account_holder_name"
            ],
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "BE"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              },
              "language": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "fr",
                  "nl",
                  "de",
                  "en"
                ],
                "type": "string",
                "description": "The 2-letter ISO language code that should be preferred when presenting payment pages to the consumer.",
                "default": "fr",
                "example": "nl"
              }
            }
          }
        ]
      },
      "PaymentRequestBenefitPaySource": {
        "type": "object",
        "description": "BenefitPay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "mobile"
                ],
                "type": "string",
                "description": "Payment method integration type (platform wise)  \n* mobile:  \n  Payment requested for a purchase via an iOS / Android app.  \n  In case of successful creation, the request will return a transaction reference number.  \n  The reference number should be used to request a transaction creation via the Android SDK  \n  or the iOS SDK of BenefitPay."
              }
            }
          }
        ]
      },
      "PaymentRequestBoletoSource": {
        "type": "object",
        "description": "Boleto Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "BR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Brazil, namely, Cadastro de Pessoas Físicas (CPF) or Cadastro Nacional da Pessoa Jurídica (CNPJ)."
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ]
      },
      "PaymentRequestEpsSource": {
        "type": "object",
        "description": "Eps Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "purpose"
            ],
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits)"
              }
            }
          }
        ]
      },
      "PaymentRequestFawrySource": {
        "type": "object",
        "description": "Fawry Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "description",
              "products",
              "customer_email",
              "customer_mobile"
            ],
            "properties": {
              "description": {
                "maxLength": 265,
                "type": "string",
                "description": "The payment description."
              },
              "customer_profile_id": {
                "type": "string",
                "description": "The customer's id within merchant's system."
              },
              "customer_email": {
                "type": "string",
                "description": "The customer's email address."
              },
              "customer_mobile": {
                "type": "string",
                "description": "The customer's mobile phone number."
              },
              "expires_on": {
                "type": "string",
                "description": "The date on which the payment expires.",
                "format": "date-time"
              },
              "products": {
                "type": "array",
                "items": {
                  "required": [
                    "product_id",
                    "quantity",
                    "price",
                    "description"
                  ],
                  "type": "object",
                  "properties": {
                    "product_id": {
                      "maxLength": 265,
                      "type": "string",
                      "description": "The id of the product."
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity of the product."
                    },
                    "price": {
                      "type": "integer",
                      "description": "The price of the item.  Expressed using Checkout.com's standard rules for calculating payment values."
                    },
                    "description": {
                      "maxLength": 265,
                      "type": "string",
                      "description": "The description of the product."
                    }
                  }
                },
                "description": "List of Products"
              }
            }
          }
        ]
      },
      "PaymentRequestGiropaySource": {
        "type": "object",
        "description": "Giropay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "purpose"
            ],
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits)"
              },
              "info_fields": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "maxLength": 30,
                      "type": "string",
                      "description": "Additional information field which is shown on the payment form (label)"
                    },
                    "text": {
                      "maxLength": 80,
                      "type": "string",
                      "description": "Additional information field which is shown on the payment form (text)"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ]
      },
      "PaymentRequestIdealSource": {
        "type": "object",
        "description": "Ideal Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "description",
              "bic"
            ],
            "properties": {
              "description": {
                "maxLength": 35,
                "type": "string",
                "description": "Description of the product(s) or services being paid for.  This field must not contain characters that can lead to problems (for example those occurring in HTML editing codes).  To prevent any possible errors most iDEAL systems will reject any description that contains HTML-tags and such other code.\n"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits). In iDEAL-lingo this is also called issuerID"
              },
              "language": {
                "maxLength": 2,
                "type": "string",
                "description": "This field enables the Issuer's site to select the Consumer's preferred language  (e.g. the language selected on the Merchant's site), if the Issuer's site supports this.  Code list in accordance with ISO 639-1. (Dutch = 'nl', English = 'en').  If a non-supported or non-existing language is entered the standard language of the Issuer is used. It is recommended to use 'nl' by default since not all Issuers support other languages.\n"
              }
            }
          }
        ]
      },
      "PaymentRequestKlarnaSource": {
        "type": "object",
        "description": "Klarna Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "authorization_token",
              "locale",
              "purchase_country",
              "billing_address",
              "tax_amount",
              "products"
            ],
            "properties": {
              "authorization_token": {
                "type": "string",
                "description": "Klarna authentication token, obtained by the merchant during client transaction authorization."
              },
              "locale": {
                "type": "string",
                "description": "RFC 1766 customer's locale. Optional, default taken from business settings.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__locale"
              },
              "purchase_country": {
                "type": "string",
                "description": "ISO 3166 alpha-2 purchase country. Optional, default taken from business settings.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__purchase_country"
              },
              "auto_capture": {
                "type": "boolean",
                "description": "Allow merchant to trigger auto capturing.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__auto_capture"
              },
              "billing_address": {
                "type": "object",
                "description": "Customer's billing address.  \nThis object is passed directly to Klarna as `billing_address`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__billing_address).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__billing_address",
                "x-cko-passthrough": true
              },
              "shipping_address": {
                "type": "object",
                "description": "Customer's shipping address.  \nThis object is passed directly to Klarna as `shipping_address`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__shipping_address).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__shipping_address",
                "x-cko-passthrough": true
              },
              "tax_amount": {
                "type": "integer",
                "description": "Total tax amount of the order.",
                "x-klarna-name": "order_tax_amount",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__order_tax_amount"
              },
              "products": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The applicable order lines.  \nThis object is passed directly to Klarna as `order_lines`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__order_lines).",
                "x-klarna-name": "order_lines",
                "x-cko-passthrough": true,
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__order_lines"
              },
              "customer": {
                "type": "object",
                "description": "Information about the liable customer of the order.  \nThis object is passed directly to Klarna as `customer`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__customer).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__customer",
                "x-cko-passthrough": true
              },
              "merchant_reference1": {
                "type": "string",
                "description": "Used for storing merchant's internal order number or other reference.  If set, will be shown on the confirmation page as \"order number\" (max 255 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_reference1"
              },
              "merchant_reference2": {
                "type": "string",
                "description": "Used for storing merchant's internal order number or other reference (max 255 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_reference2"
              },
              "merchant_data": {
                "type": "string",
                "description": "Pass through field (max 1024 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_data"
              },
              "attachment": {
                "type": "object",
                "description": "Additional purchase information required for some industries.  \nThis object is passed directly to Klarna as `attachment`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__attachment).",
                "x-cko-passthrough": true,
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__attachment"
              }
            }
          }
        ]
      },
      "PaymentRequestKnetSource": {
        "type": "object",
        "description": "KNet Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "language"
            ],
            "properties": {
              "language": {
                "maxLength": 2,
                "enum": [
                  "ar",
                  "en"
                ],
                "type": "string",
                "description": "This field enables the issuer's site to select the consumer's preferred language (e.g. the language selected on the merchant's site), if the issuer's site supports this. Code list in accordance with ISO 639-1. (Arabic = 'ar', English = 'en'). Note that 'ar' corresponds to 'ARA' and 'en' to 'USA' values accepted by KNet Gateway"
              },
              "user_defined_field1": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed"
              },
              "user_defined_field2": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed"
              },
              "user_defined_field3": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the `card_token` field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3"
              },
              "user_defined_field4": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field5": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5"
              },
              "card_token": {
                "type": "string",
                "pattern": "^[0-9]{8}$",
                "description": "This token allows re-use of card details for multiple payments. This 8-digit token should be generated by a merchant. When a subsequent payment is initialized with the same card token, a customer is presented with two options. The customer can choose to pay with KFast (doesn't need to enter card details again), or with KNet as usual. The payment flow stays the same i.e. a merchant should redirect a customer to the redirect URL which is provided in the payment creation response. Note that `user_defined_field3` must be omitted when the `card_token` field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3"
              },
              "ptlf": {
                "maxLength": 45,
                "type": "string",
                "description": "This is an ID for merchant PTLF functionality tracking. Only alphanumeric characters are allowed. Note that `user_defined_field5` must be omitted when the `ptlf` field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5"
              }
            }
          }
        ]
      },
      "PaymentRequestMultibancoSource": {
        "type": "object",
        "description": "Multibanco Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "payment_country",
              "account_holder_name"
            ],
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "PT"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              }
            }
          }
        ]
      },
      "PaymentRequestOXXOSource": {
        "type": "object",
        "description": "OXXO Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "MX"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Mexico, namely, Unique Population Registry Code (CURP)."
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ]
      },
      "PaymentRequestP24Source": {
        "type": "object",
        "description": "P24 Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "payment_country",
              "account_holder_name",
              "account_holder_email"
            ],
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "PL"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "account_holder_email": {
                "maxLength": 254,
                "type": "string",
                "description": "RFC compliant email address of the account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              }
            }
          }
        ]
      },
      "PaymentRequestPagoFacilSource": {
        "type": "object",
        "description": "PagoFacil Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "AR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Argentina, namely, Documento Nacional de Identidad (DNI) or Clave Única de Identificación Tributaria (CUIT).",
                    "example": "27332162"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ]
      },
      "PaymentRequestPayPalSource": {
        "type": "object",
        "required": [
          "invoice_number"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "invoice_number": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256,
                "description": "PayPal recommends using this field to associate transactions with your internal tracking IDs or invoice numbers;  populating the invoice ID field will help you pull transaction information at a later date using only your internal ID. <br><br><strong>Note:</strong> The invoice number must be a unique value.\n"
              },
              "recipient_name": {
                "maxLength": 128,
                "type": "string",
                "description": "Person's name associated with the shipping address.\n"
              },
              "logo_url": {
                "type": "string",
                "format": "uri",
                "description": "A URL to your logo. Use a graphics format, such as .gif, .jpg, or .png.  The logo appears at the top of the cart review area. Host the image on a secure (https) server. Character limit: 127 single-byte alphanumeric characters. Width: 190px Height: 60px\n"
              },
              "stc": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "These details are used by Paypal to perform a pre-transaction risk management evaluation. The property names should be the same one as agreed between the merchant and PayPal.\n",
                "example": {
                  "ota_type": "airline",
                  "ota_start_city": "SKG"
                }
              }
            }
          }
        ]
      },
      "PaymentRequestPoliSource": {
        "type": "object",
        "description": "POLi Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ]
      },
      "PaymentRequestQPaySource": {
        "type": "object",
        "description": "QPay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "description"
            ],
            "properties": {
              "quantity": {
                "minimum": 1,
                "type": "integer",
                "description": "A numeric value greater than zero represents the quantity of purchased Item. The value is used for display purposes only and does not affect the total amount of the payment. The minimum allowed value is 1."
              },
              "description": {
                "type": "string",
                "description": "Alphanumeric string containing a description of the payment order. Note: The maximum allowed length of this property is 255 characters after UTF-8 URL encoding."
              },
              "language": {
                "type": "string",
                "description": "Alphabetic value representing the language of the interface displayed to customer at merchant site, and used as language for the payment description parameter.  PG will use this value to display the interface supporting selected language to the customer during the payment process.  Supported values are: En, Ar. The default value is En."
              },
              "national_id": {
                "maxLength": 32,
                "type": "string",
                "description": "Alphanumeric value representing the national id of the customer performing the transaction. The maximum allowed length of this property is 32."
              }
            }
          }
        ]
      },
      "PaymentRequestRapiPagoSource": {
        "type": "object",
        "description": "RapiPago Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "properties": {
              "integration_type": {
                "enum": [
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment."
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "AR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Argentina, namely, Documento Nacional de Identidad (DNI) or Clave Única de Identificación Tributaria (CUIT).",
                    "example": "27332162"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ]
      },
      "PaymentRequestSofortSource": {
        "type": "object",
        "description": "Sofort Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "countryCode": {
                "type": "string",
                "description": "The ISO 3166-1 alpha-2 country code. For example DE, FR, IT."
              },
              "languageCode": {
                "type": "string",
                "description": "The ISO 639-1 language code. For example de, fr, it."
              }
            }
          }
        ]
      },
      "01_PaymentResponseCardDestination": {
        "type": "object",
        "description": "A card payment destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseDestination"
          },
          {
            "type": "object",
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "properties": {
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month",
                "example": 6,
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year",
                "example": 2025,
                "maxLength": 4,
                "minLength": 4
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996",
                "maxLength": 4,
                "minLength": 4
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347",
                "maxLength": 6
              },
              "card_type": {
                "type": "string",
                "description": "The card type",
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "example": "Credit"
              },
              "card_category": {
                "type": "string",
                "description": "The card category",
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "type": "string",
                "maxLength": 2,
                "minLength": 2,
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ]
      },
      "01_PaymentResponseCardSource": {
        "type": "object",
        "description": "A card payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "properties": {
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month",
                "minimum": 1,
                "minLength": 1,
                "maxLength": 2,
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year",
                "minLength": 4,
                "maxLength": 4,
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers.",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "maxLength": 6,
                "example": "454347"
              },
              "card_type": {
                "type": "string",
                "description": "The card type",
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge",
                  "Deferred Debit"
                ],
                "example": "Credit"
              },
              "card_category": {
                "type": "string",
                "description": "The card category",
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "type": "string",
                "maxLength": 2,
                "minLength": 2,
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              },
              "avs_check": {
                "type": "string",
                "description": "The Address Verification System check result",
                "example": "S"
              },
              "cvv_check": {
                "type": "string",
                "description": "The card verification value (CVV) check result",
                "example": "Y"
              },
              "payouts": {
                "type": "boolean",
                "description": "Whether the card supports payouts",
                "example": true
              },
              "fast_funds": {
                "type": "string",
                "description": "The fast funds eligibility of the card. [Read more](https://docs.checkout.com/payment-actions/pay-out-to-a-card)",
                "example": "d"
              },
              "payment_account_reference": {
                "type": "string",
                "description": "A unique reference to the underlying card for network tokens (e.g., Apple Pay, Google Pay)",
                "example": "EUNIX9AX7THOOJIEJ2AP6OOFAHGH4"
              }
            }
          }
        ]
      },
      "PaymentResponseAlipaySource": {
        "type": "object",
        "description": "An Alipay payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ]
      },
      "PaymentResponseBalotoSource": {
        "type": "object",
        "description": "Baloto Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object"
              }
            ]
          }
        ]
      },
      "PaymentResponseBancontactSource": {
        "type": "object",
        "description": "Bancontact Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "The IBAN of the Consumer Bank account used for payment (if applicable).\n"
              }
            }
          }
        ]
      },
      "PaymentResponseBenefitPaySource": {
        "type": "object",
        "description": "BenefitPay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "reference_number": {
                "type": "string",
                "description": "Unique transaction reference number from BenefitPay"
              },
              "qr_data": {
                "type": "string",
                "description": "String for generating the QR code to be scanned"
              },
              "failure_reason": {
                "type": "string",
                "description": "Reason for error with payment"
              },
              "error_code": {
                "type": "string",
                "description": "Error code returned from BenefitPay.  For further detail, the full code meaning has to be requested directly from BenefitPay,  as CKO does not have access to this.\n"
              },
              "error_description": {
                "type": "string",
                "description": "Error description returned from BenefitPay"
              }
            }
          }
        ]
      },
      "PaymentResponseBoletoSource": {
        "type": "object",
        "description": "Boleto Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  },
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ]
      },
      "PaymentResponseEpsSource": {
        "type": "object",
        "description": "Eps Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "Bank Identifier Code (BIC). It can be exactly 8 characters or 11 characters long."
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "International Bank Account Number (IBAN) without whitespaces."
              },
              "account_holder": {
                "type": "string",
                "description": "Account holder information."
              }
            }
          }
        ]
      },
      "PaymentResponseFawrySource": {
        "type": "object",
        "description": "Fawry Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "required": [
              "description"
            ],
            "properties": {
              "description": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment description"
              },
              "reference_number": {
                "type": "string",
                "description": "The customer pays using this number at Fawry's outlets"
              }
            }
          }
        ]
      },
      "PaymentResponseGiropaySource": {
        "type": "object",
        "description": "Giropay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "Bank Identifier Code (BIC). It can be exactly 8 characters or 11 characters long."
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "International Bank Account Number (IBAN) without whitespaces."
              },
              "account_holder": {
                "type": "string",
                "description": "Account holder information."
              }
            }
          }
        ]
      },
      "PaymentResponseIdealSource": {
        "type": "object",
        "description": "Ideal Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "required": [
              "description",
              "bic"
            ],
            "properties": {
              "description": {
                "maxLength": 27,
                "type": "string",
                "description": "description"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits) BIC of the bank where the Consumer account is held.  If governing law prevents Issuers outside the Netherlands from disclosing this information, field may be omitted.\n"
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "The IBAN of the Consumer Bank account used for payment.  If governing law prevents Issuers outside the Netherlands  from disclosing this information, field may be omitted.\n"
              },
              "account_holder": {
                "type": "string",
                "description": "Name of the Consumer according to the name of the account used for payment.  In the exceptional case that the consumerName cannot be retrieved by the Issuer,  this is filled with 'N/A'.  If governing law prevents Issuers outside the Netherlands from disclosing this information, field may be omitted.\n"
              }
            }
          }
        ]
      },
      "PaymentResponseKlarnaSource": {
        "type": "object",
        "description": "Klarna Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "description": "Klarna order identifier"
              }
            }
          }
        ]
      },
      "PaymentResponseKnetSource": {
        "type": "object",
        "description": "KNet Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "language": {
                "enum": [
                  "ar",
                  "en"
                ],
                "type": "string",
                "description": "This field enables the Issuer's site to select the Consumer's preferred language (e.g. the language selected on the Merchant's site), if the Issuer's site supports this. Code list in accordance with ISO 639-1. (Arabic = 'ar', English = 'en'). NOTE: 'ar' corresponds to 'ARA' and 'en' - to 'USA' values accepted by KNet Gateway."
              },
              "user_defined_field1": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field2": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field3": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the card_token field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3."
              },
              "user_defined_field4": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field5": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5."
              },
              "card_token": {
                "type": "string",
                "pattern": "^[0-9]{8}$",
                "description": "This token allows re-usage of card details for multiple payments. This 8-digit token should be generated by a merchant. When a subsequent payment is initialized with the same card token, a customer is presented with two options. The customer can choose to pay with KFast (doesn't need to enter card details again), or with KNet as usual. The payment flow stays the same i.e. a merchant should redirect a customer to the redirect URL which is provided in the payment creation response. Note that user_defined_field3 must be omitted when the card_token field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3."
              },
              "ptlf": {
                "type": "string",
                "maxLength": 45,
                "description": "This is an ID for merchant PTLF functionality tracking. Only alphanumeric characters are allowed. Note that user_defined_field5 must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5."
              },
              "knet_payment_id": {
                "type": "string",
                "description": "The payment identifier assigned by KNet Gateway."
              },
              "knet_result": {
                "type": "string",
                "description": "The state of the payment, returned by KNet Gateway after the customer is redirected from the payment page."
              },
              "inquiry_result": {
                "type": "string",
                "description": "The state of the payment, retunrned by KNet Gateway in the response from the payment inquiry. This field is populated in rare cases when the redirection from the payment page did not occur properly."
              },
              "bank_reference": {
                "type": "string",
                "example": 123456789012,
                "description": "The result transaction reference, given by some banks/institutions."
              },
              "knet_transaction_id": {
                "type": "string",
                "example": 1234567890123456,
                "description": "The transaction identifier assigned by KNet Gateway."
              },
              "auth_code": {
                "type": "string",
                "example": 999554,
                "description": "The resulting authorization code from the issuing bank."
              },
              "auth_response_code": {
                "type": "string",
                "example": 5,
                "description": "The auth response code / reason code relating to the issuing bank authorization code."
              },
              "post_date": {
                "type": "string",
                "example": 1127,
                "description": "The transaction date in the authorization system format, with the value defined by the issuing bank, so may not match the actual transaction date. The format is `MMDD`."
              },
              "avr": {
                "type": "string",
                "example": "A",
                "description": "The Address Verification Response returned from the address verification service."
              },
              "error": {
                "type": "string",
                "example": "IPAY0100044",
                "description": "The KNET error code for transaction processing."
              },
              "error_text": {
                "type": "string",
                "example": "IPAY0100044-Problem occured while loading payment page.",
                "description": "The KNET text detail for the error, including an error code."
              }
            }
          }
        ]
      },
      "PaymentResponseMultibancoSource": {
        "type": "object",
        "description": "Multibanco Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "payment_reference": {
                "type": "string",
                "description": "Multibanco payment reference"
              },
              "service_supplier_id": {
                "type": "string",
                "description": "The identifier of a supplier charging for its service or product"
              }
            }
          }
        ]
      },
      "PaymentResponseOXXOSource": {
        "type": "object",
        "description": "OXXO Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  },
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ]
      },
      "PaymentResponseP24Source": {
        "type": "object",
        "description": "P24 Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "p24_descriptor": {
                "type": "string",
                "description": "P24 generated payment descriptor, which will contain requested billing descriptor or merchant's default descriptor  (subject to truncation)."
              }
            }
          }
        ]
      },
      "PaymentResponsePagoFacilSource": {
        "type": "object",
        "description": "PagoFacil Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom",
                          "reference_code"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ]
      },
      "PaymentResponsePayPalSource": {
        "type": "object",
        "description": "PayPal payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ]
      },
      "PaymentResponsePoliSource": {
        "type": "object",
        "description": "A POLi payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ]
      },
      "PaymentResponseQPaySource": {
        "type": "object",
        "description": "QPay Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "required": [
              "description"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "Alphanumeric string containing a description of the payment order."
              },
              "qpay_status": {
                "type": "string",
                "description": "The status code returned from the QPay gateway on payment, if available."
              },
              "status_message": {
                "type": "string",
                "description": "A message giving further detail on the payment status, for failure/cancelled/success status payments."
              },
              "confirmation_id": {
                "type": "string",
                "description": "An identifier from the QPay gateway for a successful payment."
              }
            }
          }
        ]
      },
      "PaymentResponseRapiPagoSource": {
        "type": "object",
        "description": "RapiPago Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment."
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object"
              }
            ]
          }
        ]
      },
      "PaymentResponseSofortSource": {
        "type": "object",
        "description": "Sofort Source",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "iban": {
                "type": "string",
                "description": "IBAN of a payer, available when a payment is authorised."
              },
              "bic": {
                "type": "string",
                "description": "BIC of a payer, available when a payment is authorised."
              },
              "account_holder_name": {
                "type": "string",
                "description": "The name of a payer, available when a payment is authorised."
              }
            }
          }
        ]
      },
      "RiskRequest": {
        "type": "object",
        "description": "Configures the risk assessment performed during the processing of the payment",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether a risk assessment should be performed",
            "default": true,
            "example": false
          }
        }
      },
      "VoidAcceptedResponse": {
        "type": "object",
        "description": "Void response",
        "required": [
          "action_id"
        ],
        "properties": {
          "action_id": {
            "description": "The unique identifier for the void action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the void",
            "readOnly": true,
            "minItems": 2,
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "required": [
              "payment"
            ]
          }
        }
      },
      "VoidRequest": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this void request",
            "maxLength": 50,
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "VoidResponse": {
        "type": "object",
        "description": "Payment response",
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "properties": {
          "id": {
            "description": "The unique payment identifier",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ]
          },
          "action_id": {
            "description": "The unique identifier for the void action",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The void amount",
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "example": "Voided"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "processed_on": {
            "description": "The date/time the void was processed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the payment",
            "minItems": 1,
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "required": [
              "payment"
            ]
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "description": "A phone number",
        "properties": {
          "number": {
            "type": "string",
            "description": "The phone number.",
            "minLength": 6,
            "maxLength": 25,
            "example": "4155552671"
          },
          "country_code": {
            "type": "string",
            "description": "The international <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">country calling code</a>. Required for some risk checks.",
            "minLength": 1,
            "maxLength": 7,
            "example": "+1"
          }
        }
      },
      "PaymentsReportResponse": {
        "type": "object",
        "description": "Payments Report Response",
        "required": [
          "count",
          "data"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of payments included in the report",
            "example": 1
          },
          "data": {
            "type": "array",
            "description": "The data object",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique payment identifier. This was previously called `transaction_id`",
                  "example": "pay_nezg6bx2k22utmk4xm5s2ughxi"
                },
                "processing_currency": {
                  "type": "string",
                  "description": "The currency of the payment when processed by the cardholder",
                  "example": "USD"
                },
                "payout_currency": {
                  "type": "string",
                  "description": "The currency of the payment when paid out to you",
                  "example": "GBP"
                },
                "requested_on": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date on which the payment was initiated",
                  "example": "2019-03-08T10:29:51.922"
                },
                "channel_name": {
                  "type": "string",
                  "description": "The name of the channel from which the payment was initiated",
                  "example": "www.example.com"
                },
                "reference": {
                  "type": "string",
                  "description": "An optional identifier used for tracking payments. This was previously called `track_id`",
                  "example": "ORD-5023-4E89"
                },
                "payment_method": {
                  "type": "string",
                  "description": "The payment method",
                  "example": "VISA"
                },
                "card_type": {
                  "type": "string",
                  "description": "The card type",
                  "example": "CREDIT"
                },
                "card_category": {
                  "type": "string",
                  "description": "The card category",
                  "example": "Consumer"
                },
                "issuer_country": {
                  "type": "string",
                  "description": "The country of the issuing bank",
                  "example": "US"
                },
                "merchant_country": {
                  "type": "string",
                  "description": "The country of the merchant bank",
                  "example": "SI"
                },
                "mid": {
                  "type": "string",
                  "description": "An optional, user-defined identifier for the business",
                  "example": "123456"
                },
                "actions": {
                  "type": "array",
                  "description": "The actions object",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of action administered to a payment",
                        "example": "Authorization"
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier associated with an action (referred to as a charge ID in the Hub)",
                        "example": "act_nezg6bx2k22utmk4xm5s2ughxi"
                      },
                      "processed_on": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date on which the action occurred",
                        "example": "2019-03-08T10:29:51.922"
                      },
                      "response_code": {
                        "type": "integer",
                        "description": "The response code of the action (payment request)",
                        "example": "10000"
                      },
                      "response_description": {
                        "type": "string",
                        "description": "Further information about the response code",
                        "example": "Approved"
                      },
                      "breakdown": {
                        "type": "array",
                        "description": "The breakdown object",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Describes an amount or fee associated with an action. For example, a gateway fee, capture fee and capture amount would all be associated with the capture action",
                              "example": "Gateway Fee Tax ARE USD/GBP@0.7640412612"
                            },
                            "date": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Specifies an associated date with a specific amount (some external fees are returned after the associated action)",
                              "example": "2019-03-08T10:29:51.922"
                            },
                            "processing_currency_amount": {
                              "type": "string",
                              "description": "The associated amount in the processing currency (if applicable). Numerical values up to 8 decimal places are provided in the response",
                              "example": "-0.003"
                            },
                            "payout_currency_amount": {
                              "type": "string",
                              "description": "The associated amount in the payout currency. Numerical values up to 8 decimal places are provided in the response",
                              "example": "-0.00229212"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "_links": {
                  "type": "object",
                  "description": "The link object",
                  "properties": {
                    "payments": {
                      "type": "object",
                      "description": "The payments object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The direct link to the payment",
                          "example": "http://api.checkout.com/reporting/statements/190110B107654/payments"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "description": "The link object",
            "properties": {
              "next": {
                "type": "object",
                "description": "The next object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This link allows you to move to the next page of results in the response. Responses are paginated at the payout level",
                    "example": "http://api.checkout.com/reporting/payments?from=01%2F03%2F2019%2000%3A00%3A00&to=01%2F03%2F2019%2000%3A00%3A00&limit=1&after=11111111"
                  }
                }
              },
              "self": {
                "type": "object",
                "description": "The self object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This is a direct link to the response associated with the submitted request",
                    "example": "http://api.checkout.com/reporting/payments?from=01%2F03%2F2019%2000%3A00%3A00&to=01%2F03%2F2019%2000%3A00%3A00&limit=1"
                  }
                }
              }
            }
          }
        }
      },
      "StatementsReportResponse": {
        "type": "object",
        "description": "Statements Report Response",
        "required": [
          "count",
          "data",
          "id",
          "period_start",
          "period_end",
          "date",
          "payouts",
          "_links"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of statements included in the report",
            "example": 1
          },
          "data": {
            "type": "array",
            "description": "The data object",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the generated statement",
                  "example": "190110B107654"
                },
                "period_start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The start date of all transactions and amounts that are encompassed within the statement",
                  "example": "2019-01-09T00:00:00.000"
                },
                "period_end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The end date of all transactions and amounts that are encompassed within the statement",
                  "example": "2019-01-09T23:59:59.000"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date the statement was generated"
                },
                "payouts": {
                  "type": "array",
                  "description": "The summary is a breakdown of your statement, ordered by the payout currency and its associated payout ID",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "The currency of the payout",
                        "example": "GBP"
                      },
                      "carried_forward_amount": {
                        "type": "string",
                        "description": "The amount carried forward before the statement period",
                        "example": "0"
                      },
                      "current_period_amount": {
                        "type": "string",
                        "description": "The total amount of transactions during the statement period",
                        "example": "15005.24"
                      },
                      "net_amount": {
                        "type": "string",
                        "description": "The total amount paid out to your bank account",
                        "example": "15005.24"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date the payout was completed",
                        "example": "2019-01-10T00:00:00.000"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The period start date",
                        "example": "2019-01-09T00:00:00.000"
                      },
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The period end date",
                        "example": "2019-01-09T23:59:59.000"
                      },
                      "id": {
                        "type": "string",
                        "description": "Identifies the associated payment",
                        "example": "ABCDEFGH"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the payout",
                        "example": "Remitted"
                      },
                      "payout _fee": {
                        "type": "string",
                        "description": "The total fee charged for the payout",
                        "example": "-5"
                      },
                      "_links": {
                        "type": "object",
                        "description": "The link object",
                        "properties": {
                          "payments": {
                            "type": "object",
                            "description": "The payments object",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "The direct link to the payout",
                                "example": "http://api.checkout.com/reporting/statements/190110B107654/payments?payout_id=ABCDEFGH"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "_links": {
                  "type": "object",
                  "description": "The link object",
                  "properties": {
                    "payments": {
                      "type": "object",
                      "description": "The payments object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The direct link to the payment",
                          "example": "http://api.checkout.com/reporting/statements/190110B107654/payments"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "description": "The link object",
            "properties": {
              "next": {
                "type": "object",
                "description": "The next link object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This link allows you to move to the next page of results in the response. Responses are paginated at the payout level",
                    "example": "http://api.checkout.com/reporting/statements?from=01%2F01%2F2019%2000%3A00%3A00&to=01%2F11%2F2019%2000%3A00%3A00&limit=1&skip=1"
                  }
                }
              },
              "self": {
                "type": "object",
                "description": "The self link object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This is a direct link to the response associated with the submitted request",
                    "example": "http://api.checkout.com/reporting/statements?from=01%2F01%2F2019%2000%3A00%3A00&to=01%2F11%2F2019%2000%3A00%3A00&limit=1"
                  }
                }
              }
            }
          }
        }
      },
      "ResourceId": {
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "maxLength": 50,
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "AuthenticationResult": {
        "type": "object",
        "properties": {
          "attempted": {
            "type": "boolean",
            "description": "Authentication was initiated between the issuer and cardholder",
            "example": true
          },
          "challenged": {
            "type": "boolean",
            "description": "The customer was asked to enter a password or biometric authentication",
            "example": true
          },
          "succeeded": {
            "type": "boolean",
            "description": "Did the customer succeed authentication",
            "example": true
          },
          "liability_shifted": {
            "type": "boolean",
            "description": "Was liability shifted",
            "example": true
          },
          "method": {
            "type": "string",
            "description": "Authentication method",
            "example": "3ds"
          },
          "version": {
            "type": "string",
            "description": "The authentication method version",
            "example": "2.0"
          }
        }
      },
      "AuthorizationResult": {
        "type": "object",
        "properties": {
          "avs_code": {
            "type": "string",
            "example": "V"
          },
          "cvv_result": {
            "type": "string",
            "example": "N"
          }
        }
      },
      "Customer": {
        "type": "object",
        "description": "The customer making the payment",
        "properties": {
          "name": {
            "type": "string",
            "description": "The full name of the customer",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "john.doe@checkout.com"
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "ip": {
            "description": "The IP V4 address used to make the payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ]
          },
          "location": {
            "description": "The physical location of the request source",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "os": {
            "description": "The device's operating system",
            "type": "string",
            "example": "ISO"
          },
          "type": {
            "description": "The type of device",
            "type": "string",
            "example": "Phone"
          },
          "model": {
            "description": "The device model",
            "type": "string",
            "example": "iPhone X"
          },
          "date": {
            "description": "The device's date in UTC as an ISO 8601 timestamp.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "user_agent": {
            "description": "The device's user-agent",
            "type": "string",
            "example": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1"
          },
          "fingerprint": {
            "description": "The device fingerprint",
            "type": "string",
            "example": "34304a9e3fg09302"
          }
        }
      },
      "GetRiskAssessmentsResponse": {
        "type": "object",
        "properties": {
          "assessment_id": {
            "type": "string",
            "description": "The correlation id across scans for a given transaction",
            "example": "ras_c4oqhf46pyzuxjbcn2giaqnb44"
          },
          "pre_authentication": {
            "type": "object",
            "$ref": "#/components/schemas/PreAuthenticationDetails"
          },
          "pre_capture": {
            "type": "object",
            "$ref": "#/components/schemas/PreCaptureDetails"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "latitude": {
            "description": "The latitude of the device location",
            "type": "number",
            "example": 51.5107
          },
          "longitude": {
            "description": "The longitude of the device location",
            "type": "number",
            "example": 0.1313
          }
        }
      },
      "Metadata": {
        "type": "object",
        "description": "Allows you to attach additional information to the assessment in key-value pairs. You can reference these properties in your custom risk rules.",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "VoucherCode": "loyalty_10",
          "discountApplied": "10",
          "customer_id": "2190EF321"
        }
      },
      "PreAuthenticationAssessmentRequest": {
        "type": "object",
        "properties": {
          "date": {
            "description": "An ISO 8601 timestamp of the date of the original payment attempt",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "source": {
            "$ref": "#/components/schemas/RiskPaymentRequestSource"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "payment": {
            "$ref": "#/components/schemas/RiskPayment"
          },
          "shipping": {
            "description": "The shipping details",
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskShippingDetails"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this assessment, such as an order number.",
            "maxLength": 50,
            "example": "ORD-1011-87AH"
          },
          "description": {
            "type": "string",
            "description": "A description of the order",
            "maxLength": 100,
            "example": "Set of 3 masks"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\n",
            "minimum": 0,
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "GBP",
            "maxLength": 3,
            "minLength": 3
          },
          "device": {
            "description": "Device data",
            "allOf": [
              {
                "$ref": "#/components/schemas/Device"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "PreAuthenticationAssessmentResponse": {
        "type": "object",
        "description": "Pre-Authentication Response",
        "required": [
          "assessment_id",
          "result"
        ],
        "properties": {
          "assessment_id": {
            "type": "string",
            "description": "The correlation ID across scans for a given transaction",
            "example": "ras_c4oqhf46pyzuxjbcn2giaqnb44"
          },
          "score": {
            "type": "integer",
            "description": "The risk score calculated by Checkout. Absent if not enough data provided.",
            "example": 22,
            "minimum": 0,
            "maximum": 100
          },
          "result": {
            "description": "The scan result based on your defined pre-authentication risk settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreAuthenticationResult"
              }
            ]
          },
          "warning": {
            "description": "Present when our risk settings are more restrictive",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreAuthenticationWarning"
              }
            ]
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The URL of the assessment",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "The link URL",
                    "example": "https://api.checkout.com/risk/assessments/{assessment_id}"
                  }
                }
              },
              "pre-capture": {
                "description": "A link to perform a pre-capture assessment using the same context. Absent if no pre-capture risk settings configured",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "The link URL",
                    "example": "https://api.checkout.com/risk/assessments/{assessment_id}/pre-capture"
                  }
                }
              }
            }
          }
        }
      },
      "PreAuthenticationDetails": {
        "type": "object",
        "description": "Details of the pre-authentication response",
        "required": [
          "result"
        ],
        "properties": {
          "score": {
            "type": "integer",
            "description": "The risk score calculated by Checkout. Absent if not enough data provided.",
            "example": 22,
            "minimum": 0,
            "maximum": 100
          },
          "result": {
            "description": "The scan result based on your defined pre-authentication risk settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreAuthenticationResult"
              }
            ]
          },
          "warning": {
            "description": "Present when our risk settings are more restrictive",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreAuthenticationWarning"
              }
            ]
          }
        }
      },
      "PreAuthenticationResult": {
        "type": "object",
        "required": [
          "decision"
        ],
        "description": "The assessment result",
        "properties": {
          "decision": {
            "type": "string",
            "description": "The recommended action based on the assessment",
            "enum": [
              "try_exemptions",
              "try_frictionless",
              "no_preference",
              "force_challenge",
              "decline"
            ],
            "example": "try_frictionless"
          },
          "details": {
            "description": "The reasons for the decision",
            "type": "string",
            "example": "low_value_item_rule"
          }
        }
      },
      "PreAuthenticationWarning": {
        "type": "object",
        "required": [
          "decision",
          "reasons"
        ],
        "properties": {
          "decision": {
            "type": "string",
            "description": "The recommended action based on our more restrictive risk settings",
            "enum": [
              "try_exemptions",
              "try_frictionless",
              "no_preference",
              "force_challenge",
              "decline"
            ],
            "example": "decline"
          },
          "reasons": {
            "description": "The reasons for the decision",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "decline_list_email",
              "decline_list_shipping"
            ]
          }
        }
      },
      "PreCaptureAssessmentRequest": {
        "type": "object",
        "properties": {
          "assessment_id": {
            "type": "string",
            "pattern": "^(ras)_(\\w{26})$",
            "description": "The risk assessment identifier returned in the /pre-authentication response"
          },
          "date": {
            "description": "An ISO 8601 timestamp of the date of the original payment attempt",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "source": {
            "$ref": "#/components/schemas/RiskPaymentRequestSource"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\n",
            "minimum": 0,
            "example": 6540
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "GBP",
            "maxLength": 3,
            "minLength": 3
          },
          "payment": {
            "$ref": "#/components/schemas/RiskPayment"
          },
          "shipping": {
            "description": "The shipping details",
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskShippingDetails"
              }
            ]
          },
          "device": {
            "description": "Device data",
            "allOf": [
              {
                "$ref": "#/components/schemas/Device"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "authentication_result": {
            "$ref": "#/components/schemas/AuthenticationResult"
          },
          "authorization_result": {
            "$ref": "#/components/schemas/AuthorizationResult"
          }
        }
      },
      "PreCaptureAssessmentResponse": {
        "type": "object",
        "description": "Pre-Capture Response",
        "required": [
          "assessment_id",
          "result"
        ],
        "properties": {
          "assessment_id": {
            "type": "string",
            "description": "The correlation ID across scans for a given transaction",
            "example": "ras_c4oqhf46pyzuxjbcn2giaqnb44"
          },
          "score": {
            "type": "integer",
            "description": "The risk score calculated by Checkout. Absent if not enough data provided.",
            "example": 55,
            "minimum": 0,
            "maximum": 100
          },
          "result": {
            "description": "The scan result based on your pre-capture risk settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreCaptureResult"
              }
            ]
          },
          "warning": {
            "description": "Present when our risk settings are more restrictive",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreCaptureWarning"
              }
            ]
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "description": "The URL of the assessment",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "The link URL",
                    "example": "https://api.checkout.com/risk/assessments/{assessment_id}"
                  }
                }
              }
            }
          }
        }
      },
      "PreCaptureDetails": {
        "type": "object",
        "description": "Details of the pre-capture response",
        "required": [
          "result"
        ],
        "properties": {
          "score": {
            "type": "integer",
            "description": "The risk score calculated by Checkout. Absent if not enough data provided.",
            "example": 22,
            "minimum": 0,
            "maximum": 100
          },
          "result": {
            "description": "The scan result based on your defined pre-capture risk settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreCaptureResult"
              }
            ]
          },
          "warning": {
            "description": "Present when Checkout scan is more restrictive",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreCaptureWarning"
              }
            ]
          }
        }
      },
      "PreCaptureResult": {
        "type": "object",
        "required": [
          "decision"
        ],
        "description": "The assessment result",
        "properties": {
          "decision": {
            "type": "string",
            "description": "The recommended action based on the assessment",
            "enum": [
              "capture",
              "flag",
              "void"
            ],
            "example": "capture"
          },
          "details": {
            "description": "The reasons for the decision",
            "type": "string",
            "example": "risk_profile_1"
          }
        }
      },
      "PreCaptureWarning": {
        "type": "object",
        "required": [
          "decision",
          "reasons"
        ],
        "properties": {
          "decision": {
            "type": "string",
            "description": "The recommended action based on our more restrictive risk settings",
            "enum": [
              "capture",
              "void",
              "flag"
            ],
            "example": "capture"
          },
          "reasons": {
            "description": "The reasons for the decision",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "rule_low_risk_postal_address"
            ]
          }
        }
      },
      "CardSourcePrism": {
        "type": "object",
        "description": "A card payment source",
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskPaymentRequestSource"
          },
          {
            "type": "object",
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number (without separators)",
                "maxLength": 19,
                "example": "4543474002249996"
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month of the card",
                "minimum": 1,
                "minLength": 1,
                "maxLength": 2,
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year of the card",
                "minLength": 4,
                "maxLength": 4,
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The name of the cardholder",
                "maxLength": 255,
                "example": "Bruce Wayne"
              },
              "billing_address": {
                "description": "The billing address of the cardholder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The phone number of the cardholder",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "CustomerSourcePrism": {
        "type": "object",
        "description": "A customer source",
        "required": [
          "id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskPaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The customer's identifier.",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        ]
      },
      "IdSourcePrism": {
        "type": "object",
        "description": "An existing payment source",
        "required": [
          "id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskPaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(src)_(\\w{26})$",
                "description": "The payment source identifer (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "cvv": {
                "type": "string",
                "description": "The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)",
                "example": "956",
                "minLength": 3,
                "maxLength": 4
              }
            }
          }
        ]
      },
      "RiskCardInfo": {
        "type": "object",
        "required": [
          "type"
        ],
        "description": "The details of the card being used",
        "properties": {
          "cardholder_name": {
            "type": "string",
            "description": "The cardholder name provided",
            "example": "Mrs Jane Doe"
          },
          "bin": {
            "type": "string",
            "description": "The card issuer's Bank Identification Number (BIN)",
            "maxLength": 6,
            "example": "454540"
          },
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "The expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996",
            "minLength": 4,
            "maxLength": 4
          },
          "scheme": {
            "type": "string",
            "enum": [
              "Mastercard",
              "Visa"
            ],
            "description": "The card scheme",
            "example": "VISA"
          },
          "card_type": {
            "type": "string",
            "description": "The card type",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge"
            ],
            "example": "Credit"
          },
          "type": {
            "type": "string",
            "description": "The payment method type",
            "example": "card"
          }
        }
      },
      "RiskPayment": {
        "type": "object",
        "description": "The details of the payment being processed",
        "properties": {
          "psp": {
            "type": "string",
            "description": "The payment service provider processing this transaction",
            "example": "Checkout.com"
          },
          "id": {
            "type": "string",
            "description": "The PSP's transaction identifier. Can be back-filled at a later step, e.g /pre-capture",
            "example": "78453878",
            "maxLength": 32
          }
        }
      },
      "RiskPaymentRequestSource": {
        "type": "object",
        "description": "The source of the payment.<br>",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenSource",
            "id": "#/components/schemas/IdSourcePrism",
            "card": "#/components/schemas/CardSourcePrism",
            "customer": "#/components/schemas/CustomerSourcePrism"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "card"
          }
        }
      },
      "RiskShippingDetails": {
        "type": "object",
        "description": "The shipping details",
        "properties": {
          "address": {
            "description": "The shipping address",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          }
        }
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only UTC timestamp, automatically assigned by us",
        "format": "date-time",
        "readOnly": true
      },
      "01_SepaSource": {
        "type": "object",
        "description": "A SEPA payment source",
        "required": [
          "billing_address",
          "source_data"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "description": "The payment source owner's billing address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/01_SepaAddress"
                  }
                ]
              },
              "source_data": {
                "type": "object",
                "description": "Additional data required to create SEPA payment sources",
                "required": [
                  "first_name",
                  "last_name",
                  "account_iban",
                  "billing_descriptor",
                  "mandate_type"
                ],
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The account holder's first name",
                    "example": "Marcus"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The account holder's last name",
                    "example": "Barrilius Maximus"
                  },
                  "account_iban": {
                    "type": "string",
                    "description": "The account IBAN",
                    "example": "DE25100100101234567893"
                  },
                  "bic": {
                    "type": "string",
                    "description": "The account BIC",
                    "example": "PBNKDEFFXXX"
                  },
                  "billing_descriptor": {
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "mandate_type": {
                    "type": "string",
                    "description": "The type of mandate",
                    "enum": [
                      "single",
                      "recurring"
                    ],
                    "example": "recurring"
                  }
                }
              }
            }
          }
        ]
      },
      "01_SepaSourceResponse": {
        "type": "object",
        "description": "The SEPA mandate details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddSourceResponse"
          },
          {
            "type": "object",
            "properties": {
              "response_data": {
                "type": "object",
                "description": "SEPA Direct Debit details",
                "properties": {
                  "mandate_reference": {
                    "type": "string",
                    "description": "The Direct Debit mandate reference",
                    "example": "MANDXI9809809"
                  }
                }
              },
              "_links": {
                "type": "object",
                "description": "The links related to the SEPA payment source",
                "readOnly": true,
                "minItems": 1,
                "properties": {
                  "self": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "The URI of the payment source"
                  },
                  "cancel": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "A link to cancel the SEPA Direct Debit mandate"
                  }
                }
              }
            }
          }
        ]
      },
      "AddSourceResponse": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSourceResponse"
          }
        },
        "required": [
          "type",
          "response_code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be used later for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the payment source if provided in the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceResponseCustomer"
              }
            ]
          }
        }
      },
      "Source": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be later used for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "_links": {
            "type": "object",
            "description": "The links related to the payment source",
            "readOnly": true,
            "minItems": 1,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "example": {
              "self": {
                "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "sepa:mandate": {
                "href": "https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        }
      },
      "SourceRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSource"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify the source",
            "example": "X-080957-N34"
          },
          "phone": {
            "description": "The payment source owner's phone number",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Details of the customer to associate with the source",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^(cus)_(\\w{26})$",
                "description": "The identifier of an existing customer. If neither customer `id` or `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "An optional email address to associate with the customer",
                "example": "brucewayne@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Bruce Wayne"
              }
            }
          }
        }
      },
      "SourceResponseCustomer": {
        "type": "object",
        "description": "The customer to which the payment source is linked",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^(cus)_(\\w{26})$",
            "description": "The unique identifier of the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "brucewayne@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Bruce Wayne"
          }
        }
      },
      "Timestamp": {
        "type": "string",
        "description": "ISO 8601 timestamp",
        "format": "date-time"
      },
      "01_ApplePayTokenRequest": {
        "type": "object",
        "description": "Apple Pay Token Request",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "description": "The Apple Pay payment token",
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data"
                  },
                  "data": {
                    "type": "string",
                    "description": "Encrypted payment data. Base64 encoded as a string"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm"
                  },
                  "header": {
                    "type": "object",
                    "description": "Additional version-dependent information used to decrypt and verify the payment"
                  }
                },
                "example": {
                  "version": "EC_v1",
                  "data": "t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzvebKp3P0TekUslSQ8nkuacUgLdks2IKyCm7U3OL/PEYLXE7w60VkQ8WE6FXs/cqHkwtSW9vkzZNDxSLDg9slgLYxAH2/iztdipPpyIYKl0Kb6Rn9rboF+lwgRxM1B3n84miApwF5Pxl8ZOOXGY6F+3DsDo7sMCUTaJK74DUJJcjIXrigtINWKW6RFa/4qmPEC/Y+syg04x7B99mbLQQzWFm7z6HfRmynPM9/GA0kbsqd/Kn5Mkqssfhn/m6LuNKsqEmbKi85FF6kip+F17LRawG48bF/lT8wj/QEuDY0G7t/ryOnGLtKteXmAf0oJnwkelIyfyj2KI8GChBuTJonGlXKr5klPE89/ycmkgDl+T6Ms7PhiNZpuGEE2QE=",
                  "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID5jCCA4ugAwIBAgIIaGD2mdnMpw8wCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE2MDYwMzE4MTY0MFoXDTIxMDYwMjE4MTY0MFowYjEoMCYGA1UEAwwfZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtU0FOREJPWDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgjD9q8Oc914gLFDZm0US5jfiqQHdbLPgsc1LUmeY+M9OvegaJajCHkwz3c6OKpbC9q+hkwNFxOh6RCbOlRsSlaOCAhEwggINMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwHQYDVR0OBBYEFAIkMAua7u1GMZekplopnkJxghxFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0kAMEYCIQDaHGOui+X2T44R6GVpN7m2nEcr6T6sMjOhZ5NuSo1egwIhAL1a+/hp88DKJ0sv3eT3FxWcs71xmbLKD/QJ3mWagrJNMIIC7jCCAnWgAwIBAgIISW0vvzqY2pcwCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0NjMwWhcNMjkwNTA2MjM0NjMwWjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwFxGEGddkhdUaXiWBB3bogKLv3nuuTeCN/EuT4TNW1WZbNa4i0Jd2DSJOe7oI/XYXzojLdrtmcL7I6CmE/1RFo4H3MIH0MEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcwAYYqaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZXJvb3RjYWczMB0GA1UdDgQWBBQj8knET5Pk7yfmxPYobD+iu/0uSzAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFLuw3qFYM4iapIqZ3r6966/ayySrMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlcm9vdGNhZzMuY3JsMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIOBAIFADAKBggqhkjOPQQDAgNnADBkAjA6z3KDURaZsYb7NcNWymK/9Bft2Q91TaKOvvGcgV5Ct4n4mPebWZ+Y1UENj53pwv4CMDIt1UQhsKMFd2xd8zg7kGf9F3wsIW2WT8ZyaYISb1T4en0bmcubCYkhYQaZDwmSHQAAMYIBjTCCAYkCAQEwgYYwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTAghoYPaZ2cynDzANBglghkgBZQMEAgEFAKCBlTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA4MDIxNjA5NDZaMCoGCSqGSIb3DQEJNDEdMBswDQYJYIZIAWUDBAIBBQChCgYIKoZIzj0EAwIwLwYJKoZIhvcNAQkEMSIEIGEfVr+4x9RQXyfF8IYA0kraoK0pcZEaBlINo6EGrOReMAoGCCqGSM49BAMCBEgwRgIhAKunK47QEr/ZjxPlVl+etzVzbKA41xPLWtO01oUOlulmAiEAiaFH9F9LK6uqTFAUW/WIDkHWiFuSm5a3NVox7DlyIf0AAAAAAAA=",
                  "header": {
                    "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEX1ievoT8DRB8T5zGkhHZHeDr0oBmYEgsDSxyT0MD0IZ2Mpfjz2LdWq6LUwSH9EmxdPEzMunsZKWMyOr3K/zlsw==",
                    "publicKeyHash": "tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6Nl0=",
                    "transactionId": "3cee89679130a4b2617c76118a1c62fd400cd45b49dc0916d5b951b560cd17b4"
                  }
                }
              }
            }
          }
        ]
      },
      "01_ApplePayTokenResponse": {
        "type": "object",
        "description": "Apple Pay Token Response",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ]
      },
      "02_GooglePayTokenRequest": {
        "type": "object",
        "description": "Google Pay Token Request",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "description": "The Google Pay payment token",
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "Verifies the message came from Google. The signature is created using ECDSA"
                  },
                  "protocolVersion": {
                    "type": "string",
                    "description": "Identifies which encryption/signing scheme created this message. In this way, the protocol can evolve over time if needed. If it is not set, assume ECv0"
                  },
                  "signedMessage": {
                    "type": "string",
                    "description": "A serialized JSON string containing the encryptedMessage, ephemeralPublicKey, and tag. To simplify the signature verification process, this value is serialized"
                  }
                },
                "example": {
                  "protocolVersion": "ECv1",
                  "signature": "TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
                  "signedMessage": "{\"encryptedMessage\": \"ZW5jcnlwdGVkTWVzc2FnZQ==\", \"ephemeralPublicKey\": \"ZXBoZW1lcmFsUHVibGljS2V5\", \"tag\": \"c2lnbmF0dXJl\"}"
                }
              }
            }
          }
        ]
      },
      "02_GooglePayTokenResponse": {
        "type": "object",
        "description": "Google Pay Token Response",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ]
      },
      "03_CardTokenRequest": {
        "type": "object",
        "description": "Card Token Request",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "required": [
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month of the card",
                "minimum": 1,
                "example": 6,
                "minLength": 1,
                "maxLength": 2
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025,
                "minLength": 4,
                "maxLength": 4
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956",
                "minLength": 3,
                "maxLength": 4
              },
              "billing_address": {
                "description": "The payment source owner's billing address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The payment source owner's phone number",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              }
            }
          }
        ]
      },
      "03_CardTokenResponse": {
        "type": "object",
        "description": "Card Token Response",
        "required": [
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "description": "The payment source owner's billing address",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              },
              "phone": {
                "description": "The payment source owner's phone number",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ]
              },
              "expiry_month": {
                "type": "integer",
                "description": "The expiry month",
                "minimum": 1,
                "example": 6,
                "minLength": 1,
                "maxLength": 2
              },
              "expiry_year": {
                "type": "integer",
                "description": "The expiry year",
                "example": 2025,
                "minLength": 4,
                "maxLength": 4
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996",
                "minLength": 4,
                "maxLength": 4
              },
              "bin": {
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347",
                "maxLength": 6
              },
              "card_type": {
                "type": "string",
                "description": "The card type",
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "example": "Credit"
              },
              "card_category": {
                "type": "string",
                "description": "The card category",
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "type": "string",
                "maxLength": 2,
                "minLength": 2,
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ]
      },
      "TokenRequest": {
        "type": "object",
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "applepay": "#/components/schemas/01_ApplePayTokenRequest",
            "googlepay": "#/components/schemas/02_GooglePayTokenRequest",
            "card": "#/components/schemas/03_CardTokenRequest"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized"
          }
        },
        "example": {
          "type": "card",
          "number": "4543474002249996",
          "expiry_month": 6,
          "expiry_year": 2025,
          "name": "Bruce Wayne",
          "cvv": "956",
          "billing_address": {
            "address_line1": "Checkout.com",
            "address_line2": "90 Tottenham Court Road",
            "city": "London",
            "state": "London",
            "zip": "W1T 4TJ",
            "country": "GB"
          },
          "phone": {
            "number": "4155552671",
            "country_code": "+1"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "applepay": "#/components/schemas/01_ApplePayTokenResponse",
            "googlepay": "#/components/schemas/02_GooglePayTokenResponse",
            "card": "#/components/schemas/03_CardTokenResponse"
          }
        },
        "required": [
          "type",
          "token",
          "expires_on",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          },
          "token": {
            "type": "string",
            "description": "The reference token",
            "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
          },
          "expires_on": {
            "description": "The date/time the token will expire",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expiry_month": {
            "type": "integer",
            "description": "The expiry month",
            "minimum": 1,
            "example": 6,
            "minLength": 1,
            "maxLength": 2
          },
          "expiry_year": {
            "type": "integer",
            "description": "expiry year",
            "example": 2025,
            "minLength": 4,
            "maxLength": 4
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996"
          },
          "bin": {
            "type": "string",
            "description": "The card issuer BIN",
            "example": "454347"
          },
          "card_type": {
            "type": "string",
            "description": "The card type",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge",
              "Deferred Debit"
            ],
            "example": "Credit"
          },
          "card_category": {
            "type": "string",
            "description": "The card category",
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "description": "The card issuer country ISO-2 code",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "payment_source_required"
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "^(wh)_(\\w{32})$",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/webhooks"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": "1234"
            }
          },
          "content_type": {
            "type": "string",
            "enum": [
              "json",
              "xml"
            ],
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/webhooks/wh_387ac7a83a054e37ae140105429d76b5"
                }
              }
            }
          }
        }
      },
      "WebhookEvents": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "payment_approved",
          "payment_pending",
          "payment_declined",
          "payment_expired",
          "payment_canceled",
          "payment_voided",
          "payment_void_declined",
          "payment_captured",
          "payment_capture_declined",
          "payment_capture_pending",
          "payment_refunded",
          "payment_refund_declined",
          "payment_refund_pending"
        ]
      },
      "WebhookRequest": {
        "type": "object",
        "required": [
          "url",
          "event_types"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "Your webhook endpoint",
            "example": "https://example.com/webhooks",
            "format": "url"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active",
            "default": true,
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": "1234"
            }
          },
          "content_type": {
            "type": "string",
            "description": "The content type to be sent to the webhook endpoint",
            "enum": [
              "json",
              "xml"
            ],
            "default": "json",
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          }
        }
      }
    },
    "headers": {
      "Cko-Request-Id": {
        "description": "The unique identifier of the request",
        "schema": {
          "type": "string"
        }
      },
      "Cko-Version": {
        "description": "The version of the API",
        "schema": {
          "type": "string"
        }
      }
    },
    "parameters": {
      "ckoIdempotencyKey": {
        "in": "header",
        "name": "Cko-Idempotency-Key",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "An optional idempotency key for safely retrying payment requests"
      },
      "collectionCriteria": {
        "name": "criteria",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "The json criteria for collection"
      },
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1000
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "The partial search of the text fields."
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "style": "form",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
      },
      "hash": {
        "name": "hash",
        "in": "path",
        "description": "The token identifier string",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "mediaType": {
        "name": "Accept",
        "in": "header",
        "schema": {
          "type": "string",
          "enum": [
            "application/json"
          ],
          "default": "application/json"
        },
        "description": "The response media type"
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "rulesVersion": {
        "name": "version",
        "in": "path",
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "required": true,
        "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info."
      },
      "systemEventType": {
        "name": "eventType",
        "in": "path",
        "description": "The event type",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiPublicKey": {
        "description": "Unless explicitly stated, all endpoints require authentication using your secret key.  Public keys should only be used in JavaScript or native applications. \n### Where to find your keys?\nYou can find your API keys, and generate new ones, in your <a href=\"https://hub.checkout.com/login\" target=\"blank\">Hub account</a>.\n#### Format\n- Sandbox `pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n- Production `pk_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n",
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "x-cko-type": "publicKey"
      },
      "ApiSecretKey": {
        "description": "Unless explicitly stated, all endpoints require authentication using your secret key.  Public keys should only be used in JavaScript or native applications. \nYou can find your API keys, and generate new ones, in your <a href=\"https://hub.checkout.com/login\" target=\"blank\">Hub account</a>.\n#### Format\n- Sandbox `sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n- Production `sk_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n",
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "x-cko-type": "secretKey"
      }
    }
  }
}