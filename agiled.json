{
  "openapi": "3.0.0",
  "info": {
    "title": "Agiled API Documentation",
    "description": "This documentation applies to version 1.0.0 of Agiled Api. You will need API Token to carry out all operatons. Please visit Settings > API Settings  in your agiled account to get API Token. <br/> <br/><b>Current API Limits are 180 requests/hr </b> ",
    "contact": {
      "email": "support@agiled.app"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://my.agiled.app/api/v1",
      "description": "Agiled API Server"
    }
  ],
  "paths": {
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Admin Search",
        "description": "Admin Search",
        "operationId": "AdminSearch",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/companysettings": {
      "get": {
        "tags": [
          "Company Settings"
        ],
        "summary": "Get settings of company",
        "description": "Returns company settings",
        "operationId": "getCompanySettings",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSettingsResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Company Settings"
        ],
        "summary": "Update Company Settings",
        "description": "Update Company Settings",
        "operationId": "storeCompanySettings",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSettingsResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get list of invoices",
        "description": "Returns list of invoices",
        "operationId": "getInvoicesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Store new invoice",
        "description": "Stores a new Invoice",
        "operationId": "storeInvoice",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/invoices/{id}": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Update an existing invoice",
        "description": "Updates an existing Invoice",
        "operationId": "updateInvoice",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Invoice Id",
            "in": "path",
            "description": "Id of the invoice to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Delete an existing invoice",
        "description": "Deletes an existing invoice and returns no content",
        "operationId": "deleteInvoice",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Invoice Id",
            "in": "path",
            "description": "Id of the invoice to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/appointment-types": {
      "get": {
        "tags": [
          "Appointment Types"
        ],
        "summary": "Get list of appointment types",
        "description": "Returns list of appointment types",
        "operationId": "getAppointmentTypesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentTypeResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Appointment Types"
        ],
        "summary": "Store new appointment type",
        "description": "Stores a new appointment type",
        "operationId": "storeAppointmentType",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAppointmentTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/appointment-types/{id}": {
      "put": {
        "tags": [
          "Appointment Types"
        ],
        "summary": "Update an existing appointment type",
        "description": "Updates an existing appointment type",
        "operationId": "updateAppointmentType",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type Id",
            "in": "path",
            "description": "Id of the appointment type to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAppointmentTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment Types"
        ],
        "summary": "Delete an existing appointment type",
        "description": "Deletes an existing appointment type and returns no content",
        "operationId": "deleteAppointmentType",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type Id",
            "in": "path",
            "description": "Id of the appointment type to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Store new appointment",
        "description": "Stores a new appointment",
        "operationId": "storeAppointment",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAppointmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/appointments/{id}": {
      "put": {
        "tags": [
          "Appointments"
        ],
        "summary": "Update an existing appointment",
        "description": "Updates an existing appointment",
        "operationId": "updateAppointment",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Appointment Id",
            "in": "path",
            "description": "Id of the appointment to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAppointmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Appointments"
        ],
        "summary": "Delete an existing appointment",
        "description": "Deletes an existing appointment and returns no content",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Appointment Id",
            "in": "path",
            "description": "Id of the appointment to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm/meetings": {
      "post": {
        "tags": [
          "CRM Meetings"
        ],
        "summary": "Store new meeting",
        "description": "Stores a new meeting",
        "operationId": "storeMeeting",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreMeetingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/meetingupdate/{id}": {
      "put": {
        "tags": [
          "CRM Meetings"
        ],
        "summary": "Update an existing Meeting",
        "description": "Updates an existing Meeting",
        "operationId": "update",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Meeting Id",
            "in": "path",
            "description": "Id of the meeting to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreMeetingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/meetings/{account_id}": {
      "get": {
        "tags": [
          "CRM Meetings"
        ],
        "summary": "Get list of account meetings",
        "description": "Returns list of account meetings",
        "operationId": "get",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/meetingdelete/{ID}": {
      "delete": {
        "tags": [
          "CRM Meetings"
        ],
        "summary": "Delete an existing meeting",
        "description": "Deletes an existing meeting and returns no content",
        "operationId": "destroy",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Meeting Id",
            "in": "path",
            "description": "Id of the meeting to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm-accounts/createemail": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Send account email",
        "description": "Send account email",
        "operationId": "createEmail",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-accounts/logemail": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Log account email",
        "description": "Log account email",
        "operationId": "logEmail",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEmailRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/accounts/activities/{id}": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Get account activities",
        "description": "Returns account activities",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get list of accounts",
        "description": "Returns list of accounts",
        "operationId": "getAccountsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMAccountResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Store new account",
        "description": "Stores a new Account",
        "operationId": "storeCRMAccount",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCRMAccountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMAccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/accounts/{id}": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update an existing Account",
        "description": "Updates an existing Account",
        "operationId": "updateCRMAccount",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Account Id",
            "in": "path",
            "description": "Id of the account to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCRMAccountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMAccount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete an existing account",
        "description": "Deletes an existing account and returns no content",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Account Id",
            "in": "path",
            "description": "Id of the account to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm-contacts/createemail": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Send contact email",
        "description": "Send contact email",
        "operationId": "createEmail",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-contacts/logemail": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Log contact email",
        "description": "Log contact email",
        "operationId": "logEmail",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEmailRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of contacts",
        "description": "Returns list of contacts",
        "operationId": "getContactsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMContactResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Store new contact",
        "description": "Stores a new Contact",
        "operationId": "storeCRMContact",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCRMContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMContact"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/contacts/{id}": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update an existing Contact",
        "description": "Updates an existing Contact",
        "operationId": "updateCRMContact",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contact Id",
            "in": "path",
            "description": "Id of the contact to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCRMContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMContact"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete an existing contact",
        "description": "Deletes an existing contact and returns no content",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contact Id",
            "in": "path",
            "description": "Id of the contact to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm/pipeline-stages": {
      "get": {
        "tags": [
          "CRM Pipeline Stages"
        ],
        "summary": "Get list of crm pipeline stages",
        "description": "Returns list of crm pipeline stages",
        "operationId": "getCRMPipelineStages",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMStageResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "CRM Pipeline Stages"
        ],
        "summary": "Store new pipeline stage",
        "description": "Stores a new pipeline stage",
        "operationId": "storeStage",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePipelineStageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/pipeline-stages/{id}": {
      "put": {
        "tags": [
          "CRM Pipeline Stages"
        ],
        "summary": "Update an existing Pipeline Stage",
        "description": "Updates an existing Pipeline Stage",
        "operationId": "update",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Stage Id",
            "in": "path",
            "description": "Id of the pipeline stage to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePipelineStageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "CRM Pipeline Stages"
        ],
        "summary": "Delete an existing pipeline stage",
        "description": "Deletes an existing pipeline stage and returns no content",
        "operationId": "destroy",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Pipeline Stage Id",
            "in": "path",
            "description": "Id of the pipeline stage to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm-sources": {
      "get": {
        "tags": [
          "CRMSources"
        ],
        "summary": "Get list of crm sources",
        "description": "Returns list of crm sources",
        "operationId": "getCRMSources",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMSourceResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-stages": {
      "get": {
        "tags": [
          "CRMStages"
        ],
        "summary": "Get list of crm stages",
        "description": "Returns list of crm stages",
        "operationId": "getCRMStages",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMStageResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-statuses": {
      "get": {
        "tags": [
          "CRMStatuses"
        ],
        "summary": "Get list of crm statuses",
        "description": "Returns list of crm statuses",
        "operationId": "getCRMStatuses",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMStatusResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Get list of contracts",
        "description": "Returns list of contracts",
        "operationId": "getContractslist",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Store new contract",
        "description": "Stores a new Contract",
        "operationId": "storeContract",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreContractRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/contracts/{id}": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Update an existing contract",
        "description": "Updates an existing Contract",
        "operationId": "updateContract",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contract Id",
            "in": "path",
            "description": "Id of the contract to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Contracts"
        ],
        "summary": "Delete an existing contract",
        "description": "Deletes an existing contract and returns no content",
        "operationId": "deleteContract",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contract Id",
            "in": "path",
            "description": "Id of the contract to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/contract-types": {
      "get": {
        "tags": [
          "Contract Types"
        ],
        "summary": "Get list of contract types",
        "description": "Returns list of contract types",
        "operationId": "getContractTypeList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTypeResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Contract Types"
        ],
        "summary": "Store new contract type",
        "description": "Stores a new contract type",
        "operationId": "storeContractType",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreContractTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/contract-types/{id}": {
      "put": {
        "tags": [
          "Contract Types"
        ],
        "summary": "Update an existing contract type",
        "description": "Updates an existing contract type",
        "operationId": "updateContractType",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contract Type Id",
            "in": "path",
            "description": "Id of the contract type to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreContractTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractType"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Contract Types"
        ],
        "summary": "Delete an existing contract types",
        "description": "Deletes an existing contract types and returns no content",
        "operationId": "deleteContractTypes",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Contract Type Id",
            "in": "path",
            "description": "Id of the contract type to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/crm-accounts/files": {
      "post": {
        "tags": [
          "CRM Account Files"
        ],
        "summary": "Store new account file",
        "description": "Stores a new account file",
        "operationId": "storeAccountfile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Account File",
          "description": "Account Files Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "account_id": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-accounts/showFile/{id}": {
      "get": {
        "tags": [
          "CRM Account Files"
        ],
        "summary": "Show Account File",
        "description": "Show Account File",
        "operationId": "showAccountsFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-contacts/files": {
      "post": {
        "tags": [
          "CRM Contact Files"
        ],
        "summary": "Store new contact file",
        "description": "Stores a new contact file",
        "operationId": "storeContactfile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Contact File",
          "description": "Contact Files Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "contact_id": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm-contacts/showFile/{id}": {
      "get": {
        "tags": [
          "CRM Contact Files"
        ],
        "summary": "Show Contact File",
        "description": "Show Contact File",
        "operationId": "showContactsFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/pipeline-deals": {
      "get": {
        "tags": [
          "CRM Pipeline Deals"
        ],
        "summary": "Get list of crm pipeline deals",
        "description": "Returns list of crm pipeline deals",
        "operationId": "getCRMPipelineDeals",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRMPipelineDealResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "CRM Pipeline Deals"
        ],
        "summary": "Store new pipeline deal",
        "description": "Stores a new pipeline deal",
        "operationId": "storeDeal",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePipelineDealRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/crm/pipeline-deals/{id}": {
      "put": {
        "tags": [
          "CRM Pipeline Deals"
        ],
        "summary": "Update an existing Pipeline Deal",
        "description": "Updates an existing Pipeline Deal",
        "operationId": "update",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Deal Id",
            "in": "path",
            "description": "Id of the pipeline deal to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePipelineDealRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "CRM Pipeline Deals"
        ],
        "summary": "Delete an existing pipeline deal",
        "description": "Deletes an existing pipeline deal and returns no content",
        "operationId": "destroy",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Pipeline Deal Id",
            "in": "path",
            "description": "Id of the pipeline deal to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "tags": [
          "Currencies"
        ],
        "summary": "Get list of currencies",
        "description": "Returns list of currencies",
        "operationId": "getCurrenciesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/departments": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "Get list of departments",
        "description": "Returns list of departments",
        "operationId": "getDepartmentsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/designations": {
      "get": {
        "tags": [
          "Designations"
        ],
        "summary": "Get list of designations",
        "description": "Returns list of designations",
        "operationId": "getDesignationsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DesignationResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get list of employees",
        "description": "Returns list of employees",
        "operationId": "getEmployeesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Store new employee",
        "description": "Stores a new employee",
        "operationId": "storeEmployee",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreEmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/employees/{id}": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update an existing employee",
        "description": "Updates an existing employee",
        "operationId": "updateEmployee",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Employee Id",
            "in": "path",
            "description": "Id of the employee to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/employee/{id}": {
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete an existing employee",
        "description": "Deletes an existing employee and returns no content",
        "operationId": "deleteEmployee",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employee Id",
            "in": "path",
            "description": "Id of the employee to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/estimates": {
      "get": {
        "tags": [
          "Estimates"
        ],
        "summary": "Get list of estimates",
        "description": "Returns list of estimates",
        "operationId": "getEstimatesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "Store new estimate",
        "description": "Stores a new estimate",
        "operationId": "storeEstimate",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreEstimateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Estimate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/estimates/{id}": {
      "put": {
        "tags": [
          "Estimates"
        ],
        "summary": "Update an existing estimate",
        "description": "Updates an existing Estimate",
        "operationId": "updateEstimate",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Estimate Id",
            "in": "path",
            "description": "Id of the estimate to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEstimateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Estimate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Estimates"
        ],
        "summary": "Delete an existing estimate",
        "description": "Deletes an existing estimate and returns no content",
        "operationId": "deleteEstimate",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Estimate Id",
            "in": "path",
            "description": "Id of the estimate to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/expenses": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Get list of expenses",
        "description": "Returns list of expenses",
        "operationId": "getExpensesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Expenses"
        ],
        "summary": "Store new expense",
        "description": "Stores a new Expense",
        "operationId": "storeExpense",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreExpenseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/expenses/{id}": {
      "put": {
        "tags": [
          "Expenses"
        ],
        "summary": "Update an existing expense",
        "description": "Updates an existing Expense",
        "operationId": "updateExpense",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the expense to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Expenses"
        ],
        "summary": "Delete an existing expense",
        "description": "Deletes an existing expense and returns no content",
        "operationId": "deleteExpense",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Expense Id",
            "in": "path",
            "description": "Id of the expense to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/folder-files/store": {
      "post": {
        "tags": [
          "Folder Files"
        ],
        "summary": "Store new folder file",
        "description": "Stores a new folder file",
        "operationId": "storeFolderFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Folder File",
          "description": "Folder File Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "file_folder_id": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/folder-files/showFile/{id}": {
      "get": {
        "tags": [
          "Folder Files"
        ],
        "summary": "Show Folder File",
        "description": "Show Folder File",
        "operationId": "showFolderFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/folder-files/download/{id}": {
      "get": {
        "tags": [
          "Folder Files"
        ],
        "summary": "Download Folder File",
        "description": "Download Folder File",
        "operationId": "downloadFolderFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/leadagents": {
      "get": {
        "tags": [
          "LeadAgents"
        ],
        "summary": "Get list of lead agents",
        "description": "Returns list of lead agents",
        "operationId": "getLeadAgents",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadAgentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/leadsources": {
      "get": {
        "tags": [
          "LeadSources"
        ],
        "summary": "Get list of lead sources",
        "description": "Returns list of lead sources",
        "operationId": "getLeadSources",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadStatusResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/leadstatuses": {
      "get": {
        "tags": [
          "LeadStatuses"
        ],
        "summary": "Get list of lead statuses",
        "description": "Returns list of lead statuses",
        "operationId": "getLeadStatuses",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadStatusResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/timelogsettings": {
      "get": {
        "tags": [
          "Time Log Settings"
        ],
        "summary": "Get settings of timelogs",
        "description": "Returns timelog settings",
        "operationId": "getTimelogSettings",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeLogSettingResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Time Log Settings"
        ],
        "summary": "Update Time Log Settings",
        "description": "Update Time Log Settings",
        "operationId": "storeTimelogSettings",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTimeLogSettingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeLogSettingResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get list of payments",
        "description": "Returns list of payments",
        "operationId": "getPayments",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Store new payment",
        "description": "Stores a new payment",
        "operationId": "storePayments",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/payments/{id}": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update an existing Payment",
        "description": "Updates an existing Payment",
        "operationId": "updatePayment",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Payment Id",
            "in": "path",
            "description": "Id of the payment to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Delete an existing payment",
        "description": "Deletes an existing payment and returns no content",
        "operationId": "deletePayment",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Payment Id",
            "in": "path",
            "description": "Id of the payment to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/payment-gateway-credential": {
      "get": {
        "tags": [
          "Payment Gateways"
        ],
        "summary": "Get payment gateways credentials",
        "description": "Returns payment gateways credentials",
        "operationId": "getPaymentGatewaysCredentials",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentGatewayResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/payment-gateway-credential/{id}": {
      "put": {
        "tags": [
          "Payment Gateways"
        ],
        "summary": "Update payment gateways credentials",
        "description": "Updates payment gateways credentials",
        "operationId": "updatePaymentGateways",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Credentials Id",
            "in": "path",
            "description": "Id of the payment gateway credentials to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentGatewayRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get list of products",
        "description": "Returns list of products",
        "operationId": "getProductsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Store new product",
        "description": "Stores a new Product",
        "operationId": "storeProduct",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/products/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update an existing product",
        "description": "Updates an existing Product",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Product Id",
            "in": "path",
            "description": "Id of the product to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete an existing product",
        "description": "Deletes an existing product and returns no content",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Product Id",
            "in": "path",
            "description": "Id of the product to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/project-category": {
      "get": {
        "tags": [
          "Project Categories"
        ],
        "summary": "Get list of project categories",
        "description": "Returns list of project categories",
        "operationId": "getProjectCategoriesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategoryResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Project Categories"
        ],
        "summary": "Store new project category",
        "description": "Stores a new project category",
        "operationId": "storeProjectCategory",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProjectCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/project-category/{id}": {
      "delete": {
        "tags": [
          "Project Categories"
        ],
        "summary": "Delete an existing project category",
        "description": "Deletes an existing project category and returns no content",
        "operationId": "deleteProjectCategory",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Category Id",
            "in": "path",
            "description": "Id of the project category to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/project-files/store": {
      "post": {
        "tags": [
          "Project Files"
        ],
        "summary": "Store new project file",
        "description": "Stores a new project file",
        "operationId": "storeProjectFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Project File",
          "description": "Project File Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "project_id": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/project-files/download/{id}": {
      "get": {
        "tags": [
          "Project Files"
        ],
        "summary": "Download Project File",
        "description": "Download Project File",
        "operationId": "downloadProjectFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/project-files/showFile/{id}": {
      "get": {
        "tags": [
          "Project Files"
        ],
        "summary": "Show Project File",
        "description": "Show Project File",
        "operationId": "showProjectFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/projects/milestones": {
      "post": {
        "tags": [
          "Milestone"
        ],
        "summary": "Store new project milestone",
        "description": "Stores a new project milestone",
        "operationId": "storeMilestones",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreMilestoneRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/projects/milestonesupdate/{id}": {
      "put": {
        "tags": [
          "Milestone"
        ],
        "summary": "Update Milestone",
        "description": "Updates Milestone",
        "operationId": "updateMilestone",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Milestone Id",
            "in": "path",
            "description": "Id of the milestone to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreMilestoneRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/projects/milestonesstatusupdate/{id}": {
      "put": {
        "tags": [
          "Milestone"
        ],
        "summary": "Update status of Milestone",
        "description": "Updates status of Milestone",
        "operationId": "updateMilestoneStatus",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Milestone Id",
            "in": "path",
            "description": "Id of the milestone to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreMilestoneRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/projects/milestonesdestroy/{id}": {
      "delete": {
        "tags": [
          "Milestone"
        ],
        "summary": "Delete an existing project milestone",
        "description": "Deletes an existing project milestone and returns no content",
        "operationId": "deleteMilestone",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Milestone Id",
            "in": "path",
            "description": "Id of the milestone to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get list of projects",
        "description": "Returns list of projects",
        "operationId": "getProjectsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Store new project",
        "description": "Stores a new Project",
        "operationId": "storeProject",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update an existing project",
        "description": "Updates an existing {Project}",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Project Id",
            "in": "path",
            "description": "Id of the project to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete an existing project",
        "description": "Deletes an existing project and returns no content",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Project Id",
            "in": "path",
            "description": "Id of the project to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/sales-agents": {
      "get": {
        "tags": [
          "SalesAgents"
        ],
        "summary": "Get list of sales agents",
        "description": "Returns list of sales agents",
        "operationId": "getSalesAgents",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesAgentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/taskcategories": {
      "get": {
        "tags": [
          "Task Categories"
        ],
        "summary": "Get list of task categories",
        "description": "Returns list of task categories",
        "operationId": "getTaskCategoriesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Task Categories"
        ],
        "summary": "Store new task category",
        "description": "Stores a new task category",
        "operationId": "storeTaskCategories",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTaskCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/taskcategories/{id}": {
      "delete": {
        "tags": [
          "Task Categories"
        ],
        "summary": "Delete an existing task category",
        "description": "Deletes an existing task category and returns no content",
        "operationId": "deleteTaskCategory",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Category Id",
            "in": "path",
            "description": "Id of the task category to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/getTaskComments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get list of task comments",
        "description": "Returns list of task comments",
        "operationId": "getComments",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task Id",
            "in": "path",
            "description": "Id of the task for retrieving its comments. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/comments": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Store new comment",
        "description": "Stores a new comment",
        "operationId": "storeComments",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCommentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/task-files/store": {
      "post": {
        "tags": [
          "Task Files"
        ],
        "summary": "Store new task file",
        "description": "Stores a new task file",
        "operationId": "storeTaskfile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Task File",
          "description": "Task File Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "task_id": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/task-files/download/{id}": {
      "get": {
        "tags": [
          "Task Files"
        ],
        "summary": "Download Task File",
        "description": "Download Task File",
        "operationId": "downloadTaskFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/task-files/showFile/{id}": {
      "get": {
        "tags": [
          "Task Files"
        ],
        "summary": "Show Task File",
        "description": "Show Task File",
        "operationId": "showTaskFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get list of tasks",
        "description": "Returns list of tasks",
        "operationId": "getTasksList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Store new task",
        "description": "Stores a new task",
        "operationId": "storeTask",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tasks/remindForTask/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task reminder",
        "description": "Reminder for task",
        "operationId": "remindForTask",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Task Id",
            "in": "path",
            "description": "Id of the task to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tasks/markcomplete/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Mark task as complete",
        "description": "Mark task as complete",
        "operationId": "updateTaskStatus",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Task Id",
            "in": "path",
            "description": "Id of the task to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tasks/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update an existing task",
        "description": "Updates an existing Task",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Task Id",
            "in": "path",
            "description": "Id of the task to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete an existing task",
        "description": "Deletes an existing task and returns no content",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Task Id",
            "in": "path",
            "description": "Id of the task to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/taxes": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Get list of taxes",
        "description": "Returns list of taxes",
        "operationId": "getTaxesList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ticketagents": {
      "get": {
        "tags": [
          "Ticket Agents"
        ],
        "summary": "Get list of ticket agents",
        "description": "Returns list of ticket agents",
        "operationId": "getTicketAgents",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAgentResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket Agents"
        ],
        "summary": "Store new ticket agent",
        "description": "Stores a ticket agent",
        "operationId": "storeTicketAgents",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketAgentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ticketagents/{id}": {
      "put": {
        "tags": [
          "Ticket Agents"
        ],
        "summary": "Update an existing ticket agent",
        "description": "Updates an existing ticket agent",
        "operationId": "updateTicketAgents",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Agent Id",
            "in": "path",
            "description": "Id of the ticket agent to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketAgentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Ticket Agents"
        ],
        "summary": "Delete an existing ticket agent",
        "description": "Deletes an existing ticket agent and returns no content",
        "operationId": "deleteTicketAgent",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Agent Id",
            "in": "path",
            "description": "Id of the ticket agent to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/ticketchannels": {
      "get": {
        "tags": [
          "Ticket Channels"
        ],
        "summary": "Get list of ticket channels",
        "description": "Returns list of ticket channels",
        "operationId": "getticketchannels",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketChannelResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket Channels"
        ],
        "summary": "Store new ticket channel",
        "description": "Stores a ticket channel",
        "operationId": "storeticketchannels",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketChannelRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ticketchannels/{id}": {
      "put": {
        "tags": [
          "Ticket Channels"
        ],
        "summary": "Update an existing ticket channel",
        "description": "Updates an existing ticket channel",
        "operationId": "updateTicketChannels",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Channel Id",
            "in": "path",
            "description": "Id of the ticket channel to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketChannelRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Ticket Channels"
        ],
        "summary": "Delete an existing ticket channel",
        "description": "Deletes an existing ticket channel and returns no content",
        "operationId": "deleteticketchannels",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Channel Id",
            "in": "path",
            "description": "Id of the ticket channel to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/tickettypes": {
      "get": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Get list of ticket types",
        "description": "Returns list of ticket types",
        "operationId": "getTicketTypes",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTypeResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Store new ticket type",
        "description": "Stores a ticket type",
        "operationId": "storeTicketTypes",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tickettypes/{id}": {
      "put": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Update an existing ticket type",
        "description": "Updates an existing ticket type",
        "operationId": "updateTicketTypes",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type Id",
            "in": "path",
            "description": "Id of the ticket type to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Delete an existing ticket type",
        "description": "Deletes an existing ticket type and returns no content",
        "operationId": "deleteTicketTypes",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type Id",
            "in": "path",
            "description": "Id of the ticket type to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get list of tickets",
        "description": "Returns list of tickets",
        "operationId": "getTicketsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Store new ticket",
        "description": "Stores a new Ticket",
        "operationId": "storeTicket",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tickets/{id}": {
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update an existing ticket",
        "description": "Updates an existing Ticket",
        "operationId": "updateTicket",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ticket Id",
            "in": "path",
            "description": "Id of the ticket to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete an existing ticket",
        "description": "Deletes an existing ticket and returns no content",
        "operationId": "deleteTicket",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ticket Id",
            "in": "path",
            "description": "Id of the ticket to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/ticketsreply": {
      "post": {
        "tags": [
          "TicketsReply"
        ],
        "summary": "Store new ticket reply",
        "description": "Stores a new Ticket Reply",
        "operationId": "storeTicketReply",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketReplyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketReply"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ticketsreply/{id}": {
      "put": {
        "tags": [
          "TicketsReply"
        ],
        "summary": "Update an existing ticket reply",
        "description": "Updates an existing Ticket Reply",
        "operationId": "updateTicketReply",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ticket Reply Id",
            "in": "path",
            "description": "Id of the ticket reply to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTicketReplyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketReply"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "TicketsReply"
        ],
        "summary": "Delete an existing ticket reply",
        "description": "Deletes an existing ticket reply and returns no content",
        "operationId": "deleteTicketReply",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ticket Reply Id",
            "in": "path",
            "description": "Id of the ticket reply to be deleted. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          }
        }
      }
    },
    "/replyfileupload": {
      "post": {
        "tags": [
          "TicketsReply"
        ],
        "summary": "Store new reply file",
        "description": "Stores a new ticket reply file",
        "operationId": "storeReplyFile",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "request": "Ticket Reply File",
          "description": "Ticket Reply File Body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "schema": "FileRequest",
                "required": [
                  "files"
                ],
                "properties": {
                  "ticketReplyID": {
                    "type": "int",
                    "example": 1
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/timelogs": {
      "post": {
        "tags": [
          "Time Logs"
        ],
        "summary": "Store new timelog",
        "description": "Stores a new timelog",
        "operationId": "storeTimeLog",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTimeLogRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeLog"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/timelogs/{id}": {
      "get": {
        "tags": [
          "Time Logs"
        ],
        "summary": "Get list of timelogs",
        "description": "Returns list of timelogs",
        "operationId": "getTimeLogsList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Project Id",
            "in": "path",
            "description": "Id of the Project. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeLogResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Time Logs"
        ],
        "summary": "Update an existing Timelog",
        "description": "Updates an existing Timelog",
        "operationId": "updateTimeLog",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Log Id",
            "in": "path",
            "description": "Id of the Timelog to be updated. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTimeLogRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeLog"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/stoptimer": {
      "post": {
        "tags": [
          "Time Logs"
        ],
        "summary": "stop timelog",
        "description": "stops an existing timer",
        "operationId": "stopTimeLog",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopTimerRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/starttimer": {
      "post": {
        "tags": [
          "Time Logs"
        ],
        "summary": "start timelog",
        "description": "start a new timer",
        "operationId": "startTimeLog",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartTimerRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get list of users",
        "description": "Returns list of users",
        "operationId": "getUsersList",
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "description": "Api Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminSettingsRequest": {
        "title": "Store Admin setting request",
        "description": "Store Admin setting request body data",
        "required": [
          "company_name",
          "company_email",
          "company_phone",
          "address"
        ],
        "properties": {
          "currency_id": {
            "title": "Currency Id",
            "description": "Currency Id",
            "type": "integer",
            "example": 1
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "Asia/Kolkata"
          },
          "locale": {
            "title": "Locale",
            "description": "Locale",
            "type": "string",
            "example": "en"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Agiled"
          },
          "company_email": {
            "title": "Company Email",
            "description": "Company Email",
            "type": "string",
            "example": "example@email.com"
          },
          "company_phone": {
            "title": "Company Phone",
            "description": "Company Phone",
            "type": "string",
            "example": "1234567891"
          },
          "logo": {
            "title": "Company Logo",
            "description": "Company Logo",
            "type": "string",
            "example": "logo_path"
          },
          "login_background": {
            "title": "Login Background",
            "description": "Login Background",
            "type": "string",
            "example": "white"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "example address"
          },
          "website": {
            "title": "Website",
            "description": "Website",
            "type": "string",
            "example": "https://webaddress.com"
          },
          "last_updated_by": {
            "title": "Last update by",
            "description": "Last update by",
            "type": "integer",
            "example": 1
          },
          "google_map_key": {
            "title": "Google Map Key",
            "description": "Google Map Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "currency_convert_key": {
            "title": "Currency Convert Key",
            "description": "Currency Convert Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "google_recaptcha_key": {
            "title": "Google Recaptcha Key",
            "description": "Google Recaptcha Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "google_recaptcha_secret": {
            "title": "Google Recaptcha Secret",
            "description": "Google Recaptcha Secret",
            "type": "string",
            "example": "abc1234567891"
          },
          "purchase_code": {
            "title": "Purchase Code",
            "description": "Purchase Code",
            "type": "string",
            "example": "abc1234567891"
          },
          "support_until": {
            "title": "Support Until",
            "description": "Support Until",
            "example": "timestamp"
          },
          "hide_cron_message": {
            "title": "Hide Cron Message",
            "description": "Hide Cron Message",
            "example": 1
          },
          "week_start": {
            "title": "Week start",
            "description": "Week start",
            "type": "integer",
            "example": 1
          },
          "system_update": {
            "title": "System Update",
            "description": "System Update",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "CreateEmailRequest": {
        "title": "Create email request",
        "description": "Create email request body data",
        "required": [
          "subject",
          "email_to",
          "body",
          "email_from"
        ],
        "properties": {
          "subject": {
            "title": "Subject",
            "description": "Subject",
            "type": "string",
            "example": "abc"
          },
          "email_to": {
            "title": "Email to",
            "description": "Email to",
            "type": "string",
            "example": "johndoe@email.com"
          },
          "body": {
            "title": "Body",
            "description": "Body",
            "type": "string",
            "example": "abc"
          },
          "email_from": {
            "title": "Email From",
            "description": "Email From",
            "type": "string",
            "example": "johndoe@email.com"
          }
        },
        "type": "object"
      },
      "LogEmailRequest": {
        "title": "Log email request",
        "description": "Log email request body data",
        "required": [
          "subject",
          "email_to",
          "body"
        ],
        "properties": {
          "subject": {
            "title": "Subject",
            "description": "Subject",
            "type": "string",
            "example": "abc"
          },
          "email_to": {
            "title": "Email to",
            "description": "Email to",
            "type": "string",
            "example": "johndoe@email.com"
          },
          "body": {
            "title": "Body",
            "description": "Body",
            "type": "string",
            "example": "abc"
          }
        },
        "type": "object"
      },
      "Activity": {
        "title": "Activity",
        "description": "Activity model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "account_id": {
            "title": "Account ID",
            "description": "Account ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_id": {
            "title": "Contact ID",
            "description": "Contact ID",
            "type": "integer",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Type",
            "type": "string",
            "example": "abc"
          },
          "activity": {
            "title": "Activity",
            "description": "Activity",
            "type": "string",
            "example": "Contact Added"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Activity"
        }
      },
      "AdminSetting": {
        "title": "AdminSetting",
        "description": "AdminSetting model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "currency_id": {
            "title": "Currency Id",
            "description": "Currency Id",
            "type": "integer",
            "example": 1
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "Asia/Kolkata"
          },
          "locale": {
            "title": "Locale",
            "description": "Locale",
            "type": "string",
            "example": "en"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Agiled"
          },
          "company_email": {
            "title": "Company Email",
            "description": "Company Email",
            "type": "string",
            "example": "example@email.com"
          },
          "company_phone": {
            "title": "Company Phone",
            "description": "Company Phone",
            "type": "string",
            "example": "1234567891"
          },
          "logo": {
            "title": "Company Logo",
            "description": "Company Logo",
            "type": "string",
            "example": "logo_path"
          },
          "login_background": {
            "title": "Login Background",
            "description": "Login Background",
            "type": "string",
            "example": "white"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "example address"
          },
          "website": {
            "title": "Website",
            "description": "Website",
            "type": "string",
            "example": "https://webaddress.com"
          },
          "last_updated_by": {
            "title": "Last update by",
            "description": "Last update by",
            "type": "integer",
            "example": 1
          },
          "google_map_key": {
            "title": "Google Map Key",
            "description": "Google Map Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "currency_convert_key": {
            "title": "Currency Convert Key",
            "description": "Currency Convert Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "google_recaptcha_key": {
            "title": "Google Recaptcha Key",
            "description": "Google Recaptcha Key",
            "type": "string",
            "example": "abc1234567891"
          },
          "google_recaptcha_secret": {
            "title": "Google Recaptcha Secret",
            "description": "Google Recaptcha Secret",
            "type": "string",
            "example": "abc1234567891"
          },
          "purchase_code": {
            "title": "Purchase Code",
            "description": "Purchase Code",
            "type": "string",
            "example": "abc1234567891"
          },
          "support_until": {
            "title": "Support Until",
            "description": "Support Until",
            "example": "timestamp"
          },
          "hide_cron_message": {
            "title": "Hide Cron Message",
            "description": "Hide Cron Message",
            "example": 1
          },
          "week_start": {
            "title": "Week start",
            "description": "Week start",
            "type": "integer",
            "example": 1
          },
          "system_update": {
            "title": "System Update",
            "description": "System Update",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "AdminSetting"
        }
      },
      "Appointment": {
        "title": "Appointment",
        "description": "Appointment model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start": {
            "title": "Start time",
            "description": "End time",
            "format": "time",
            "example": "09:10:00"
          },
          "end": {
            "title": "End Time",
            "description": "End time",
            "example": "10:10:00"
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "example": "pending"
          },
          "appointment_date": {
            "title": "Appointment Date",
            "description": "Appointment Date",
            "type": "string",
            "format": "date",
            "example": "2021-04-13"
          },
          "client_id": {
            "title": "Client ID",
            "description": "Client ID",
            "type": "integer",
            "example": 1
          },
          "availability_id": {
            "title": "Availability ID",
            "description": "Availability ID",
            "type": "integer",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@email.com"
          },
          "created_by": {
            "title": "Created By",
            "description": "Created By",
            "type": "integer",
            "example": 1
          },
          "event_id": {
            "title": "Event ID",
            "description": "Event ID",
            "type": "integer",
            "example": 1
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "Timezone"
          },
          "appointment_end_date": {
            "title": "Appointment End Date",
            "description": "Appointment End Date",
            "type": "string",
            "format": "date",
            "example": "2020-01-27"
          }
        },
        "type": "object",
        "xml": {
          "name": "Appointment"
        }
      },
      "AppointmentType": {
        "title": "Appointment Type",
        "description": "Appointment Type model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "abcd"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "abcd"
          },
          "date_from": {
            "title": "Date From",
            "description": "Date From",
            "type": "string",
            "format": "date",
            "example": "2021-06-09"
          },
          "date_to": {
            "title": "Date To",
            "description": "Date To",
            "type": "string",
            "format": "date",
            "example": "2021-08-13"
          },
          "duration": {
            "title": "Duration",
            "description": "Duration",
            "type": "string",
            "example": "50"
          },
          "before_event": {
            "title": "Before Event",
            "description": "Before Event",
            "type": "string",
            "example": "20"
          },
          "after_event": {
            "title": "After Event",
            "description": "After Event",
            "type": "string",
            "example": "20"
          },
          "start_increment": {
            "title": "Start Increment",
            "description": "Start Increment",
            "type": "string",
            "example": "20"
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "New York/USA"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "AppointmentType"
        }
      },
      "CRMAccount": {
        "title": "CRMAccount",
        "description": "Account model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "Agiled"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Description ..."
          },
          "size": {
            "title": "Size",
            "description": "Size",
            "type": "integer",
            "example": "10"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "phone": {
            "title": "Phone",
            "description": "Phone",
            "type": "string",
            "example": "+10033323333"
          },
          "website": {
            "title": "Website",
            "description": "Website",
            "type": "string",
            "example": "https://example.com"
          },
          "facebook": {
            "title": "Facebook",
            "description": "Facebook",
            "type": "string",
            "example": "https://facebook.com/profile "
          },
          "linkedin": {
            "title": "Linkedin",
            "description": "LinkedIn",
            "type": "string",
            "example": "https://linkedin.com/profile "
          },
          "twitter": {
            "title": "Twitter",
            "description": "Twitter",
            "type": "string",
            "example": "https://twitter.com/profile "
          },
          "skype": {
            "title": "Skype",
            "description": "Skype",
            "type": "string",
            "example": "user123"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "tags": {
            "title": "Tags",
            "description": "Comma separated Tags",
            "type": "string",
            "example": "tag1, tag2"
          },
          "tax_no": {
            "title": "Tax No",
            "description": "Tax/VAT",
            "type": "string",
            "example": "332322"
          },
          "owner_id": {
            "title": "Sales Agent (Owner) Id",
            "description": "Sales Agent (Owner) Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "addresses": {
            "title": "Addresses",
            "description": "Array of addresses. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMAddress"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMAccount"
        }
      },
      "CRMAddress": {
        "title": "CRMAddress",
        "description": "Address model",
        "properties": {
          "type": {
            "title": "Type",
            "description": "Type of Address",
            "type": "string",
            "example": "Office Address"
          },
          "country": {
            "title": "Country",
            "description": "Country",
            "type": "string",
            "example": "United States"
          },
          "state": {
            "title": "State",
            "description": "State",
            "type": "string",
            "example": "Texas"
          },
          "city": {
            "title": "City",
            "description": "City",
            "type": "string",
            "example": "Houston"
          },
          "postal_code": {
            "title": "City",
            "description": "City",
            "type": "string",
            "example": "Houston"
          },
          "address1": {
            "title": "Address Line 1",
            "description": "Address Line 1",
            "type": "string",
            "example": "Address line 1"
          },
          "address2": {
            "title": "Address Line 2",
            "description": "Address Line 2",
            "type": "string",
            "example": "Address line 2"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMAddress"
        }
      },
      "CRMContact": {
        "title": "CRMContact",
        "description": "Contact model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "first_name": {
            "title": "First Name",
            "description": "First Name",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "title": "Last Name",
            "description": "Last Name",
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "phone": {
            "title": "Phone",
            "description": "Phone",
            "type": "string",
            "example": "+10033323333"
          },
          "job_title": {
            "title": "Job Title",
            "description": "Job Title",
            "type": "string",
            "example": "Manager"
          },
          "facebook": {
            "title": "Facebook",
            "description": "Facebook",
            "type": "string",
            "example": "https://facebook.com/profile "
          },
          "linkedin": {
            "title": "Linkedin",
            "description": "LinkedIn",
            "type": "string",
            "example": "https://linkedin.com/profile "
          },
          "twitter": {
            "title": "Twitter",
            "description": "Twitter",
            "type": "string",
            "example": "https://twitter.com/profile "
          },
          "skype": {
            "title": "Skype",
            "description": "Skype",
            "type": "string",
            "example": "user123"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "tags": {
            "title": "Tags",
            "description": "Comma separated Tags",
            "type": "string",
            "example": "tag1, tag2"
          },
          "account_id": {
            "title": "Account Id",
            "description": "Account Id",
            "type": "string",
            "example": "10"
          },
          "owner_id": {
            "title": "Sales Agent (Owner) Id",
            "description": "Sales Agent (Owner) Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_id": {
            "title": "Source Id",
            "description": "Source Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status_id": {
            "title": "Status Id",
            "description": "Status Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "next_follow_up": {
            "title": "Next Follow Up",
            "description": "Next Follow Up",
            "type": "string",
            "example": "yes or no"
          },
          "last_contacted": {
            "title": "Last Contacted",
            "description": "Last Contact",
            "type": "string",
            "example": "12/12/2020"
          },
          "tax_no": {
            "title": "tax_no",
            "description": "Tax/VAT",
            "type": "string",
            "example": "12121"
          },
          "addresses": {
            "title": "Addresses",
            "description": "Array of addresses. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMAddress"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMContact"
        }
      },
      "CRMPipelineDeal": {
        "title": "CRMPipelineDeal",
        "description": "CRMPipelineDeal model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pipeline_id": {
            "title": "Pipeline Id",
            "description": "Pipeline Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pipelinestage_id": {
            "title": "Pipeline Stage Id",
            "description": "Pipeline Stage Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_owner": {
            "title": "Deal Owner",
            "description": "Deal Owner",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_name": {
            "title": "Deal Name",
            "description": "Deal Name",
            "type": "string",
            "example": "test deal"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "string",
            "example": "10"
          },
          "deal_type": {
            "title": "Deal Type",
            "description": "Deal Type",
            "type": "string",
            "example": "New Business"
          },
          "close_date": {
            "title": "Close Date",
            "description": "Close Date",
            "type": "string",
            "example": "04/05/2021"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMPipelineDeal"
        }
      },
      "CRMPipelineStage": {
        "title": "CRMPipelineStage",
        "description": "CRMPipelineStage model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pipeline_id": {
            "title": "Pipeline Id",
            "description": "Pipeline Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pipelinestage_id": {
            "title": "Pipeline Stage Id",
            "description": "Pipeline Stage Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_owner": {
            "title": "Deal Owner",
            "description": "Deal Owner",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_name": {
            "title": "Deal Name",
            "description": "Deal Name",
            "type": "string",
            "example": "test deal"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "string",
            "example": "10"
          },
          "deal_type": {
            "title": "Deal Type",
            "description": "Deal Type",
            "type": "string",
            "example": "New Business"
          },
          "close_date": {
            "title": "Close Date",
            "description": "Close Date",
            "type": "string",
            "example": "04/05/2021"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMPipelineStage"
        }
      },
      "CRMSource": {
        "title": "CRMSource",
        "description": "CRMSource model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Source Type",
            "type": "integer",
            "example": "website"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMSource"
        }
      },
      "CRMStage": {
        "title": "CRMStage",
        "description": "CRMStage model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Source Type",
            "type": "integer",
            "example": "website"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMStage"
        }
      },
      "CRMStatus": {
        "title": "CRMStatus",
        "description": "CRMStatus model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Source Type",
            "type": "integer",
            "example": "website"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMStatus"
        }
      },
      "Client": {
        "title": "Client",
        "description": "Client model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "title": "User Id",
            "description": "Related User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "gst_number": {
            "title": "GST",
            "description": "GST",
            "type": "string",
            "example": "2342342"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "Client"
        }
      },
      "Comment": {
        "title": "Comment",
        "description": "Comment model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "task_id": {
            "title": "Task ID",
            "description": "Task ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "comment": {
            "title": "Comment",
            "description": "Comment",
            "type": "string",
            "example": "Example Comment"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Comment"
        }
      },
      "Contract": {
        "title": "Contract",
        "description": "Contract model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "subject": {
            "title": "Subject",
            "description": "Subject",
            "type": "string",
            "example": "Test Contract"
          },
          "contract_type_id": {
            "title": "Contract Type Id",
            "description": "Contract Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start_date": {
            "title": "Start Date",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "end_date": {
            "title": "End Date",
            "description": "End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_start_date": {
            "title": "Original Start Date",
            "description": "Original Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_end_date": {
            "title": "Original End Date",
            "description": "Original End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "This is a test contract"
          },
          "contract_detail": {
            "title": "Contract Detail",
            "description": "Contract Detail",
            "type": "string",
            "example": "This is some detail"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          },
          "original_amount": {
            "title": "Original Amount",
            "description": "Original Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Contract"
        }
      },
      "ContractType": {
        "title": "ContractType",
        "description": "ContractType model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "name",
            "description": "Contract Type Name",
            "type": "string",
            "example": "Web Development"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "ContractType"
        }
      },
      "Currency": {
        "title": "Currency",
        "description": "Currency model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "currency_name": {
            "title": "Currency Name",
            "description": "Currency Name",
            "type": "string",
            "example": "Dollar"
          },
          "currency_symbol": {
            "title": "Currency Symbol",
            "description": "Currency Symbol",
            "type": "string",
            "example": "$"
          },
          "currency_code": {
            "title": "Currency Code",
            "description": "Currency Code",
            "type": "string",
            "example": "USD"
          },
          "exchange_rate": {
            "title": "Exchange Rate",
            "description": "Rate w.r.t default currency",
            "type": "string",
            "example": "1"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Currency"
        }
      },
      "CustomField": {
        "title": "Custom Field",
        "description": "Custom Field model",
        "properties": {
          "key": {
            "title": "key",
            "description": "Please use labels of custom fields all in lower case with spaces replaced by underscore as keys. Like Birth Day will become birth_day",
            "type": "integer",
            "example": "birth_day"
          },
          "value": {
            "title": "value",
            "description": "value",
            "type": "integer",
            "example": "12/12/2000"
          }
        },
        "type": "object",
        "xml": {
          "name": "CustomField"
        }
      },
      "Department": {
        "title": "Department",
        "description": "Department model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "team_name": {
            "title": "Team Name",
            "description": "Team Name",
            "type": "string",
            "example": "Support"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Department"
        }
      },
      "Designation": {
        "title": "Designation",
        "description": "Designation model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Designation"
        }
      },
      "Employee": {
        "title": "Employee",
        "description": "Employee model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "title": "User Id",
            "description": "Related User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "employee_id": {
            "title": "Employee Id",
            "description": "Employee Id",
            "type": "string",
            "example": "Emp001"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .."
          },
          "hourly_rate": {
            "title": "Hourly Rate",
            "description": "Hourly Rate",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "slack_username": {
            "title": "Slack Username",
            "description": "Slack Username",
            "type": "string",
            "example": "johndoe"
          },
          "department_id": {
            "title": "Department Id",
            "description": "Department Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "designation_id": {
            "title": "Designation Id",
            "description": "Designation Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "joining_date": {
            "title": "Joining Date",
            "description": "Joining Data",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Employee"
        }
      },
      "Estimate": {
        "title": "Estimate",
        "description": "Estimate model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "ClientId",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "estimate_number": {
            "title": "EstimateNumber",
            "description": "Estimate Number includin Prefix",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "valid_till": {
            "title": "Valid Till",
            "description": "Valid Till",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "valid_date": {
            "title": "Valid Date",
            "description": "Valid Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "sub_total": {
            "title": "Subtotal",
            "description": "Subtotal",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount Type",
            "description": "Discount Type",
            "type": "string",
            "example": "fixed Or percent"
          },
          "total": {
            "title": "Total",
            "description": "Total",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "currency_id": {
            "title": "Currency Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "paid"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Invoice",
            "type": "string",
            "example": "This is a test invoice"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "items": {
            "title": "Invoice Item",
            "description": "Invoice Item. One or more items can be sent at a time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItem"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "Estimate"
        }
      },
      "EstimateItem": {
        "title": "Estimate Item",
        "description": "Estimate model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "estimate_id": {
            "title": "Estimate Id",
            "description": "Related Estimate Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "item_name": {
            "title": "Item Name",
            "description": "Item Name",
            "type": "string",
            "example": "Test Item"
          },
          "item_summary": {
            "title": "Item Summary",
            "description": "Item Summary",
            "type": "string",
            "example": "This is a test item"
          },
          "item_type": {
            "title": "Item Type",
            "description": "Item Type",
            "type": "string",
            "example": "item"
          },
          "quantity": {
            "title": "Quantity",
            "description": "Quantity",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "unit_price": {
            "title": "Unit Price",
            "description": "Unit Price",
            "type": "double",
            "example": 100
          },
          "amount": {
            "title": "Amount",
            "description": "Unit Price x Quantity",
            "type": "double",
            "example": 100
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          }
        },
        "type": "object",
        "xml": {
          "name": "Estimate"
        }
      },
      "Expense": {
        "title": "Expense",
        "description": "Expense model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "title": "User Id",
            "description": "Related User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "item_name": {
            "title": "Item Name",
            "description": "Item Name",
            "type": "string",
            "example": "Printer"
          },
          "purchased_date": {
            "title": "Purchased Date",
            "description": "Purchased Date",
            "type": "string",
            "format": "date",
            "example": "2020-01-27"
          },
          "purchased_from": {
            "title": "Purchased From",
            "description": "Purchased From",
            "type": "string",
            "example": "Test Vendor"
          },
          "price": {
            "title": "Price",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "10000"
          },
          "currency_id": {
            "title": "Currency Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "Approved"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Expense"
        }
      },
      "Invoice": {
        "title": "Invoice",
        "description": "Invoice model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "ProjectId",
            "description": "ProjectId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "ClientId",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "invoice_number": {
            "title": "InvoiceNumber",
            "description": "Invoice Numbe with Prefix",
            "type": "string",
            "example": "INV#004"
          },
          "issue_date": {
            "title": "Issue Date",
            "description": "Issue Data",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "due_date": {
            "title": "Due Date",
            "description": "Due Data",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "sub_total": {
            "title": "Subtotal",
            "description": "Subtotal",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount Type",
            "description": "Discount Type",
            "type": "string",
            "example": "fixed Or percent"
          },
          "total": {
            "title": "Total",
            "description": "Total",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "currency_id": {
            "title": "Currency Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "paid"
          },
          "recurring": {
            "title": "Reccuring",
            "description": "Is it a recurring profile or not",
            "type": "string",
            "example": "yes or no"
          },
          "billing_frequency": {
            "title": "Billing Frequency",
            "description": "Specifies billing frequency. Either day, week, month or year.",
            "type": "string",
            "example": "day, week, month or year"
          },
          "billing_interval": {
            "title": "Billing Interval",
            "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)",
            "type": "string",
            "example": "1 year, 12 months, or 52 weeks"
          },
          "billing_cycle": {
            "title": "Billing Cycle",
            "description": "How many times you want to bill?",
            "type": "string",
            "example": "1"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Invoice",
            "type": "string",
            "example": "This is a test invoice"
          },
          "credit_note": {
            "title": "Credit Note",
            "description": "Credited Amount or refunded amount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "estimate_id": {
            "title": "Estimate Id",
            "description": "Related Estimate Id (If Any)",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_amount": {
            "title": "Total Amount",
            "description": "Total Amount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "items": {
            "title": "Invoice Item",
            "description": "Invoice Item. One or more items can be sent at a time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "Invoice"
        }
      },
      "InvoiceItem": {
        "title": "Invoice Item",
        "description": "Invoice model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "invoice_id": {
            "title": "Invoice Id",
            "description": "Related Invoice Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "item_name": {
            "title": "Item Name",
            "description": "Item Name",
            "type": "string",
            "example": "Test Item"
          },
          "item_summary": {
            "title": "Item Summary",
            "description": "Item Summary",
            "type": "string",
            "example": "This is a test item"
          },
          "item_type": {
            "title": "Item Type",
            "description": "Item Type",
            "type": "string",
            "example": "item"
          },
          "quantity": {
            "title": "Quantity",
            "description": "Quantity",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "unit_price": {
            "title": "Unit Price",
            "description": "Unit Price",
            "type": "double",
            "example": 100
          },
          "amount": {
            "title": "Amount",
            "description": "Unit Price x Quantity",
            "type": "double",
            "example": 100
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          }
        },
        "type": "object",
        "xml": {
          "name": "Invoice"
        }
      },
      "Lead": {
        "title": "Lead",
        "description": "Lead model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_id": {
            "title": "Source Id",
            "description": "Source Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status_id": {
            "title": "Status Id",
            "description": "Status Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_name": {
            "title": "Client Name",
            "description": "Client Name",
            "type": "string",
            "example": "John Doe"
          },
          "client_email": {
            "title": "Client Email",
            "description": "Client Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "next_follow_up": {
            "title": "Next Follow Up",
            "description": "Next Follow Up",
            "type": "string",
            "example": "yes or no"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Lead"
        }
      },
      "LeadAgent": {
        "title": "LeadAgent",
        "description": "LeadAgent model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadAgent"
        }
      },
      "LeadSource": {
        "title": "LeadSource",
        "description": "LeadSource model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Source Type",
            "type": "integer",
            "example": "website"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadSource"
        }
      },
      "LeadStatus": {
        "title": "LeadStatus",
        "description": "LeadStatus model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "type",
            "description": "status type",
            "type": "integer",
            "example": "pending"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadStatus"
        }
      },
      "Meeting": {
        "title": "Meeting",
        "description": "Meeting model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "account_id": {
            "title": "Account ID",
            "description": "Account ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_id": {
            "title": "Contact IDs",
            "description": "Contact IDs",
            "type": "array",
            "items": {
              "properties": {
                "contact_id": {
                  "title": "Contact ID",
                  "description": "Contact ID",
                  "type": "int",
                  "example": 1
                }
              },
              "type": "object"
            }
          },
          "label_color": {
            "title": "Label Color",
            "description": "Label Color",
            "type": "string",
            "example": "bg-info"
          },
          "where": {
            "title": "Where",
            "description": "Where",
            "type": "string",
            "example": "Example Address"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Example Description"
          },
          "start_date_time": {
            "title": "Start date and time",
            "description": "Meeting start at date time",
            "type": "string",
            "format": "date-time",
            "example": "2021-05-19 19:17:47"
          },
          "end_date_time": {
            "title": "End date and time",
            "description": "Meeting ended at date time",
            "type": "string",
            "format": "date-time",
            "example": "2021-05-19 21:17:47"
          },
          "repeat": {
            "title": "Repeat",
            "description": "Repeat",
            "type": "string",
            "example": "yes"
          },
          "repeat_every": {
            "title": "Repeat Every",
            "description": "Repeat Interval",
            "type": "integer",
            "example": 1
          },
          "repeat_cycles": {
            "title": "Repeat Cycles",
            "description": "Repeat Cycles",
            "type": "integer",
            "example": 1
          },
          "repeat_type": {
            "title": "Repeat Type",
            "description": "Repeat Type",
            "example": "day"
          },
          "all_contacts": {
            "title": "All Contacts",
            "description": "All Contacts",
            "type": "boolean",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Meeting"
        }
      },
      "Milestone": {
        "title": "Milestone",
        "description": "Milestone model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project ID",
            "description": "Project ID",
            "type": "integer",
            "example": 1
          },
          "milestone_title": {
            "title": "Milestone Title",
            "description": "Milestone Title",
            "type": "string",
            "example": "Example Title"
          },
          "currency_id": {
            "title": "Currency ID",
            "description": "Currency ID",
            "type": "integer",
            "format": "int",
            "example": 1
          },
          "company_id": {
            "title": "Company ID",
            "description": "Company ID",
            "type": "integer",
            "example": 1
          },
          "summary": {
            "title": "Summary",
            "description": "Summary",
            "type": "string",
            "example": "Example Summary"
          },
          "cost": {
            "title": "Cost",
            "description": "Milestone cost",
            "type": "number",
            "format": "float",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Milestone Status",
            "example": "complete"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "invoice_created": {
            "title": "Invoice Created",
            "description": "Invoice Created",
            "type": "boolean",
            "example": 1
          }
        },
        "type": "object",
        "xml": {
          "name": "Milestone"
        }
      },
      "Note": {
        "title": "Note",
        "description": "Note model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "account_id": {
            "title": "Account ID",
            "description": "Account ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_id": {
            "title": "Contact ID",
            "description": "Contact ID",
            "type": "integer",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Type",
            "type": "string",
            "example": "Note Type"
          },
          "note": {
            "title": "Note",
            "description": "Note",
            "type": "string",
            "example": "Example Note"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Note"
        }
      },
      "Payment": {
        "title": "Payment",
        "description": "Payment model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company ID",
            "description": "Company ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project ID",
            "description": "Project ID",
            "type": "integer",
            "example": 1
          },
          "invoice_id": {
            "title": "Invoice ID",
            "description": "Invoice ID",
            "type": "integer",
            "example": 1
          },
          "subscription_id": {
            "title": "Subscription ID",
            "description": "Subscription ID",
            "type": "integer",
            "example": 1
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "number",
            "format": "float",
            "example": 1
          },
          "gateway": {
            "title": "Gateway",
            "description": "Gateway",
            "type": "string",
            "example": "offline"
          },
          "transaction_id": {
            "title": "Transaction ID",
            "description": "Transaction ID",
            "type": "string",
            "example": "12345"
          },
          "currency_id": {
            "title": "Currency ID",
            "description": "Currency ID",
            "type": "integer",
            "example": 123
          },
          "plan_id": {
            "title": "Plan ID",
            "description": "Plan ID",
            "type": "string",
            "example": "12345"
          },
          "customer_id": {
            "title": "Customer ID",
            "description": "Customer ID",
            "type": "string",
            "example": "12345"
          },
          "event_id": {
            "title": "Event ID",
            "description": "Event ID",
            "type": "string",
            "example": "12345"
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "example": "complete"
          },
          "paid_on": {
            "title": "Paid On",
            "description": "Paid On",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "remarks": {
            "title": "Remarks",
            "description": "Remarks",
            "type": "string",
            "example": "Example Remarks"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "offline_method_id": {
            "title": "Offline Method ID",
            "description": "Offline Method ID",
            "type": "integer",
            "example": "12345"
          },
          "meta": {
            "title": "Meta",
            "description": "Meta",
            "type": "string",
            "example": "Example Meta"
          }
        },
        "type": "object",
        "xml": {
          "name": "Payment"
        }
      },
      "PaymentGateway": {
        "title": "Payment Gateway",
        "description": "Payment Gateway model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "paypal_client_id": {
            "title": "Paypal Client ID",
            "description": "Paypal Client ID",
            "type": "string",
            "example": "123456789abcdef"
          },
          "paypal_secret": {
            "title": "Paypal Secret",
            "description": "Paypal Secret",
            "type": "string",
            "example": "123456789abcdef"
          },
          "paypal_status": {
            "title": "Paypal Status",
            "description": "Paypal Status",
            "type": "string",
            "example": "Active"
          },
          "stripe_client_id": {
            "title": "Stripe Client ID",
            "description": "Stripe Client ID",
            "type": "string",
            "example": "123456789abc"
          },
          "stripe_secret": {
            "title": "Stripe Secret",
            "description": "Stripe Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "stripe_webhook_secret": {
            "title": "Stripe Webhook Secret",
            "description": "Stripe Webhook Secret",
            "type": "string",
            "example": "abcdef1234"
          },
          "stripe_status": {
            "title": "Stripe Status",
            "description": "Stripe Status",
            "type": "string",
            "example": "Active"
          },
          "razorpay_key": {
            "title": "RazorPay key",
            "description": "RazorPay key",
            "type": "string",
            "example": "123456789abcdef"
          },
          "razorpay_secret": {
            "title": "RazorPay Secret",
            "description": "RazorPay Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "razorpay_webhook_secret": {
            "title": "RazorPay Webhook Secret",
            "description": "RazorPay Webhook Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "razorpay_status": {
            "title": "RazorPay Status",
            "description": "RazorPay Status",
            "type": "string",
            "example": "Active"
          },
          "paypal_mode": {
            "title": "Paypal Mode",
            "description": "Paypal Mode",
            "type": "string",
            "example": "sandbox"
          },
          "mollie_api_key": {
            "title": "Mollie Api Key",
            "description": "Mollie Api Key",
            "type": "string",
            "example": "123456789abc"
          },
          "mollie_status": {
            "title": "Mollie Status",
            "description": "Mollie Status",
            "type": "string",
            "example": "Active"
          },
          "authorize_login_id": {
            "title": "Authorize Login ID",
            "description": "Authorize Login ID",
            "type": "string",
            "example": "123"
          },
          "authorize_transaction_key": {
            "title": "Authorize Transaction Key",
            "description": "Authorize Transaction Key",
            "type": "string",
            "example": "123"
          },
          "authorize_environment": {
            "title": "Authorize Environment",
            "description": "Authorize Environment",
            "type": "string",
            "example": "abc"
          },
          "authorize_status": {
            "title": "Authorize Status",
            "description": "Authorize Status",
            "type": "string",
            "example": "Active"
          }
        },
        "type": "object",
        "xml": {
          "name": "Payment Gateway"
        }
      },
      "Product": {
        "title": "Product",
        "description": "Product model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "price": {
            "title": "Price",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "100"
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          },
          "allow_purchase": {
            "title": "Allow Purchase",
            "description": "Allow Purchase",
            "type": "integer",
            "example": "1 or 0"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Product"
        }
      },
      "Project": {
        "title": "Project",
        "description": "Project model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_name": {
            "title": "Project Name",
            "description": "Project Name",
            "type": "string",
            "example": "Test Project"
          },
          "project_summary": {
            "title": "Project Summary",
            "description": "Project Summary",
            "type": "string",
            "example": "This is a test summary"
          },
          "start_date": {
            "title": "Start Date",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "deadline": {
            "title": "Deadline",
            "description": "Deadline",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "notes": {
            "title": "Notes",
            "description": "Notes",
            "type": "string",
            "example": "This is a test note"
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "feedback": {
            "title": "Feedback",
            "description": "Feedback",
            "type": "string",
            "example": "This is a test feedback"
          },
          "manual_time_log": {
            "title": "Manual Time Log",
            "description": "If manual time log is enabled?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "client_view_task": {
            "title": "Client View Task",
            "description": "If client can view tasks?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "allow_client_notification": {
            "title": "Allow Client Notification",
            "description": "If client should receive notifications?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "completion_percent": {
            "title": "Completion Percent",
            "description": "Completion Percent",
            "type": "integer",
            "format": "int64",
            "example": 55
          },
          "project_budget": {
            "title": "Project Budget",
            "description": "Project Budget",
            "type": "number",
            "format": "double",
            "example": 10000
          },
          "currency_id": {
            "title": "Curreny Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "hours_allocated": {
            "title": "Hours Allocated",
            "description": "Hours Allocated",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "In Progresss"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Project"
        }
      },
      "ProjectCategory": {
        "title": "Project Category",
        "description": "Project Category model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "category_name": {
            "title": "Category Name",
            "description": "Category Name",
            "type": "string",
            "example": "Java"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Project Category"
        }
      },
      "SalesAgent": {
        "title": "SalesAgent",
        "description": "SalesAgent model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "SalesAgent"
        }
      },
      "Search": {
        "title": "Search",
        "description": "Search model",
        "properties": {
          "searchable_id": {
            "title": "Searchable ID",
            "description": "Searchable ID",
            "type": "integer",
            "example": 1
          },
          "module_type": {
            "title": "Module Type",
            "description": "Module Type",
            "example": "project"
          },
          "title": {
            "title": "Title",
            "description": "Title",
            "type": "string",
            "example": "abc"
          },
          "route_name": {
            "title": "Route Name",
            "description": "Route Name",
            "type": "string",
            "example": "admin.projects.show"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "date-time",
            "example": "2020-02-27 05:40:41"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "date-time",
            "example": "2020-02-27 05:40:41"
          }
        },
        "type": "object",
        "xml": {
          "name": "Search"
        }
      },
      "Task": {
        "title": "Task",
        "description": "Task model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "heading": {
            "title": "Heading",
            "description": "Heading",
            "type": "string",
            "example": "This is a test heading"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Description"
          },
          "start_date": {
            "title": "Start Date",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "due_date": {
            "title": "Due Date",
            "description": "Due Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "user_id": {
            "title": "User Id",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority",
            "description": "Priority",
            "type": "string",
            "example": "medium"
          },
          "completed_on": {
            "title": "Complete On",
            "description": "Completed On",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "milestone_id": {
            "title": "Milestone Id",
            "description": "Milestone Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "billable": {
            "title": "Billable?",
            "description": "Billable?",
            "type": "integer",
            "format": "int64",
            "example": "just 1 or 0"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Task"
        }
      },
      "TaskCategory": {
        "title": "Task Category",
        "description": "Task Category model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "category_name": {
            "title": "Category Name",
            "description": "Category Name",
            "type": "string",
            "example": "Java"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Task Category"
        }
      },
      "Tax": {
        "title": "Tax",
        "description": "Tax model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "tax_name": {
            "title": "Tax Name",
            "description": "Text Name",
            "type": "string",
            "example": "Sales Tax"
          },
          "rate_percent": {
            "title": "Rate Percent",
            "description": "Rate Percent",
            "type": "integer",
            "format": "int64",
            "example": 17
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Tax"
        }
      },
      "Ticket": {
        "title": "Ticket",
        "description": "Ticket model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "subject": {
            "title": "Subject",
            "description": "Subject",
            "type": "string",
            "example": "This is a test subject"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "This is a test description"
          },
          "status": {
            "title": "status",
            "description": "status",
            "type": "string",
            "example": "status"
          },
          "user_id": {
            "title": "User Id",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "channel_id": {
            "title": "Channel Id",
            "description": "Channel Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type_id": {
            "title": "Type Id",
            "description": "Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority",
            "description": "Priority",
            "type": "string",
            "example": "medium,high or low"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Ticket"
        }
      },
      "TicketAgent": {
        "title": "TicketAgent",
        "description": "TicketAgent model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketAgent"
        }
      },
      "TicketChannel": {
        "title": "TicketAgent",
        "description": "TicketAgent model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "channel_name": {
            "title": "Channel Name",
            "description": "Channel Name",
            "type": "string",
            "example": "Twitter"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketAgent"
        }
      },
      "TicketReply": {
        "title": "Ticket Reply",
        "description": "Ticket Reply model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "ticket_id": {
            "title": "Ticket Id",
            "description": "Ticket Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "message": {
            "title": "Message",
            "description": "Message",
            "type": "string",
            "example": "This is a reply message"
          },
          "user_id": {
            "title": "User Id",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "Ticket Reply"
        }
      },
      "TicketType": {
        "title": "TicketType",
        "description": "TicketType model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "title": "Type",
            "description": "Type",
            "type": "string",
            "example": "Question"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketType"
        }
      },
      "TimeLog": {
        "title": "TimeLog",
        "description": "TimeLog model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "CompanyId",
            "description": "CompanyId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "ProjectId",
            "description": "ProjectId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "task_id": {
            "title": "TaskId",
            "description": "TaskId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start_date": {
            "title": "StartDate",
            "description": "Start Date",
            "type": "string",
            "example": "12/13/2020"
          },
          "end_date": {
            "title": "EndDate",
            "description": "End Date",
            "type": "string",
            "example": "12/13/2020"
          },
          "start_time": {
            "title": "Start Time",
            "description": "Start Time",
            "type": "string",
            "example": "13:10"
          },
          "end_time": {
            "title": "End Time",
            "description": "End Time",
            "type": "string",
            "example": "13:10"
          },
          "memo": {
            "title": "Memo",
            "description": "work memo",
            "type": "string",
            "example": "This is a test memo"
          },
          "user_id": {
            "title": "User Id",
            "description": "User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "TimeLog"
        }
      },
      "TimeLogSetting": {
        "title": "TimeLogSetting",
        "description": "TimeLogSetting model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "log_time_for": {
            "title": "Log Time For",
            "description": "Log Time For",
            "example": "project"
          },
          "auto_timer_stop": {
            "title": "Auto Timer Stop",
            "description": "Auto Timer Stop",
            "example": "yes"
          },
          "manual_time_log": {
            "title": "Manual Time Log",
            "description": "Manual Time Log",
            "example": 1
          },
          "": {
            "title": "Approval Required",
            "description": "Approval Required",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "TimeLogSetting"
        }
      },
      "User": {
        "title": "User",
        "description": "User model",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_id": {
            "title": "Company Id",
            "description": "Company Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "api_token": {
            "title": "Api Token",
            "description": "Api Token",
            "type": "string",
            "example": "********"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "deleted_at": {
            "title": "Deleted at",
            "description": "Deleted at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object",
        "xml": {
          "name": "User"
        }
      },
      "ActivityResource": {
        "title": "ActivityResource",
        "description": "ActivityResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ActivityResource"
        }
      },
      "AdminSettingsResource": {
        "title": "AdminSettingsResource",
        "description": "Admin Settings Resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "ref": null
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "AdminSettingsResource"
        }
      },
      "AppointmentResource": {
        "title": "AppointmentResource",
        "description": "AppointmentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "AppointmentResource"
        }
      },
      "AppointmentTypeResource": {
        "title": "AppointmentTypeResource",
        "description": "AppointmentTypeResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentType"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "AppointmentTypeResource"
        }
      },
      "CRMAccountResource": {
        "title": "CRMAccountResource",
        "description": "CRMAccountResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMAccount"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMAccountResource"
        }
      },
      "CRMContactResource": {
        "title": "CRMContactResource",
        "description": "CRMContactResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMContact"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMContactResource"
        }
      },
      "CRMPipelineDealResource": {
        "title": "CRMPipelineDealResource",
        "description": "CRMPipelineDealResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMPipelineDeal"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMPipelineDealResource"
        }
      },
      "CRMPipelineStageResource": {
        "title": "CRMPipelineStageResource",
        "description": "CRMPipelineStageResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMPipelineStage"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMPipelineStageResource"
        }
      },
      "CRMSourceResource": {
        "title": "CRMSourceResource",
        "description": "CRMSourceResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMSource"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMSourceResource"
        }
      },
      "CRMStageResource": {
        "title": "CRMStageResource",
        "description": "CRMStageResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMStage"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMStageResource"
        }
      },
      "CRMStatusResource": {
        "title": "CRMStatusResource",
        "description": "CRMStatusResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRMStatus"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CRMStatusResource"
        }
      },
      "ClientResource": {
        "title": "ClientResource",
        "description": "ClientResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ClientResource"
        }
      },
      "CommentResource": {
        "title": "CommentResource",
        "description": "CommentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CommentResource"
        }
      },
      "ContractResource": {
        "title": "ContractResource",
        "description": "ContractResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ContractResource"
        }
      },
      "ContractTypeResource": {
        "title": "ContractTypeResource",
        "description": "ContractTypeResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractType"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ContractTypeResource"
        }
      },
      "CurrencyResource": {
        "title": "CurrencyResource",
        "description": "CurrencyResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "CurrencyResource"
        }
      },
      "DepartmentResource": {
        "title": "DepartmentResource",
        "description": "DepartmentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "DepartmentResource"
        }
      },
      "DesignationResource": {
        "title": "DesignationResource",
        "description": "DesignationResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Designation"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "DesignationResource"
        }
      },
      "EmployeeResource": {
        "title": "EmployeeResource",
        "description": "EmployeeResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "EmployeeResource"
        }
      },
      "EstimateResource": {
        "title": "EstimateResource",
        "description": "Estimate resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Estimate"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "EstimateResource"
        }
      },
      "ExpenseResource": {
        "title": "ExpenseResource",
        "description": "Expense resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Expense"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ExpenseResource"
        }
      },
      "InvoiceResource": {
        "title": "InvoiceResource",
        "description": "Invoice resource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "InvoiceResource"
        }
      },
      "LeadAgentResource": {
        "title": "LeadAgentResource",
        "description": "LeadAgentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeadAgent"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadAgentResource"
        }
      },
      "LeadResource": {
        "title": "LeadResource",
        "description": "LeadResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Lead"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadResource"
        }
      },
      "LeadSourceResource": {
        "title": "LeadSourceResource",
        "description": "LeadSourceResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeadSource"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadSourceResource"
        }
      },
      "LeadStatusResource": {
        "title": "LeadStatusResource",
        "description": "LeadStatusResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeadStatus"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "LeadStatusResource"
        }
      },
      "MeetingResource": {
        "title": "MeetingResource",
        "description": "MeetingResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meeting"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "MeetingResource"
        }
      },
      "MilestoneResource": {
        "title": "MilestoneResource",
        "description": "MilestoneResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Milestone"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "MilestoneResource"
        }
      },
      "NoteResource": {
        "title": "NoteResource",
        "description": "NoteResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "NoteResource"
        }
      },
      "PaymentGatewayResource": {
        "title": "PaymentGatewayResource",
        "description": "PaymentGatewayResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentGateway"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "PaymentGatewayResource"
        }
      },
      "PaymentResource": {
        "title": "PaymentResource",
        "description": "PaymentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "PaymentResource"
        }
      },
      "ProductResource": {
        "title": "ProductResource",
        "description": "ProductResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ProductResource"
        }
      },
      "ProjectCategoryResource": {
        "title": "ProjectCategoryResource",
        "description": "ProjectCategoryResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCategory"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ProjectCategoryResource"
        }
      },
      "ProjectResource": {
        "title": "ProjectResource",
        "description": "ProjectResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "ProjectResource"
        }
      },
      "SalesAgentResource": {
        "title": "SalesAgentResource",
        "description": "SalesAgentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesAgent"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "SalesAgentResource"
        }
      },
      "SearchResource": {
        "title": "SearchResource",
        "description": "SearchResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Search"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "SearchResource"
        }
      },
      "TaskCategoryResource": {
        "title": "TaskCategoryResource",
        "description": "TaskCategoryResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskCategory"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TaskCategoryResource"
        }
      },
      "TaskResource": {
        "title": "TaskResource",
        "description": "TaskResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TaskResource"
        }
      },
      "TaxResource": {
        "title": "TaxResource",
        "description": "TaxResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TaxResource"
        }
      },
      "TicketAgentResource": {
        "title": "TicketAgentResource",
        "description": "TicketAgentResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketAgent"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketAgentResource"
        }
      },
      "TicketChannelResource": {
        "title": "TicketChannelResource",
        "description": "TicketChannelResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketChannel"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketChannelResource"
        }
      },
      "TicketReplyResource": {
        "title": "TicketReplyResource",
        "description": "TicketReplyResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketReply"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketReplyResource"
        }
      },
      "TicketResource": {
        "title": "TicketResource",
        "description": "TicketResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketResource"
        }
      },
      "TicketTypeResource": {
        "title": "TicketTypeResource",
        "description": "TicketTypeResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketType"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TicketTypeResource"
        }
      },
      "TimeLogResource": {
        "title": "TimeLogResource",
        "description": "TimeLogResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeLog"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TimeLogResource"
        }
      },
      "TimeLogSettingResource": {
        "title": "TimeLogSettingResource",
        "description": "TimeLogSettingResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeLogSetting"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "TimeLogSettingResource"
        }
      },
      "UserResource": {
        "title": "UserResource",
        "description": "UserResource",
        "properties": {
          "data": {
            "title": "Data",
            "description": "Data wrapper",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "UserResource"
        }
      },
      "SearchRequest": {
        "title": "Admin search request",
        "description": "Admin search request body data",
        "required": [
          "search_key"
        ],
        "properties": {
          "search_key": {
            "title": "Search key",
            "description": "Search Key",
            "type": "string",
            "example": "abc"
          }
        },
        "type": "object"
      },
      "StartTimerRequest": {
        "title": "Start timer request",
        "description": "Start timer request body data",
        "required": [
          "memo"
        ],
        "properties": {
          "memo": {
            "title": "Memo (Required)",
            "description": "Memo",
            "type": "string",
            "example": "abc"
          },
          "project_id": {
            "title": "Project ID",
            "description": "Project ID",
            "type": "integer",
            "example": 1
          },
          "task_id": {
            "title": "Task ID",
            "description": "Task ID",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object"
      },
      "StopTimerRequest": {
        "title": "Stop timer request",
        "description": "Stop timer request body data",
        "required": [
          "timeId"
        ],
        "properties": {
          "timeId": {
            "title": "Time ID (Required)",
            "description": "Time ID",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object"
      },
      "StoreAppointmentRequest": {
        "title": "Store Appointment request",
        "description": "Store Appointment request body data",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "start": {
            "title": "Start time",
            "description": "End time",
            "format": "time",
            "example": "09:10:00"
          },
          "end": {
            "title": "End Time",
            "description": "End time",
            "example": "10:10:00"
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "example": "pending"
          },
          "appointment_date": {
            "title": "Appointment Date",
            "description": "Appointment Date",
            "type": "string",
            "format": "date",
            "example": "2021-04-13"
          },
          "client_id": {
            "title": "Client ID",
            "description": "Client ID",
            "type": "integer",
            "example": 1
          },
          "availability_id": {
            "title": "Availability ID",
            "description": "Availability ID",
            "type": "integer",
            "example": 1
          },
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@email.com"
          },
          "created_by": {
            "title": "Created By",
            "description": "Created By",
            "type": "integer",
            "example": 1
          },
          "event_id": {
            "title": "Event ID",
            "description": "Event ID",
            "type": "integer",
            "example": 1
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "Timezone"
          },
          "appointment_end_date": {
            "title": "Appointment End Date",
            "description": "Appointment End Date",
            "type": "string",
            "format": "date",
            "example": "2020-01-27"
          }
        },
        "type": "object"
      },
      "StoreAppointmentTypeRequest": {
        "title": "Store Appointment Type request",
        "description": "Store Appointment Type request body data",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "abcd"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "abcd"
          },
          "date_from": {
            "title": "Date From",
            "description": "Date From",
            "type": "string",
            "format": "date",
            "example": "2021-06-09"
          },
          "date_to": {
            "title": "Date To",
            "description": "Date To",
            "type": "string",
            "format": "date",
            "example": "2021-08-13"
          },
          "duration": {
            "title": "Duration",
            "description": "Duration",
            "type": "string",
            "example": "50"
          },
          "before_event": {
            "title": "Before Event",
            "description": "Before Event",
            "type": "string",
            "example": "20"
          },
          "after_event": {
            "title": "After Event",
            "description": "After Event",
            "type": "string",
            "example": "20"
          },
          "start_increment": {
            "title": "Start Increment",
            "description": "Start Increment",
            "type": "string",
            "example": "20"
          },
          "timezone": {
            "title": "Timezone",
            "description": "Timezone",
            "type": "string",
            "example": "New York/USA"
          }
        },
        "type": "object"
      },
      "StoreCRMAccountRequest": {
        "title": "Store CRM Account request",
        "description": "Store CRM Account request body data",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Name",
            "type": "string",
            "example": "Agiled"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Description ..."
          },
          "size": {
            "title": "Size",
            "description": "Size",
            "type": "integer",
            "example": "10"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "phone": {
            "title": "Phone",
            "description": "Phone",
            "type": "string",
            "example": "+10033323333"
          },
          "website": {
            "title": "Website",
            "description": "Website",
            "type": "string",
            "example": "https://example.com"
          },
          "facebook": {
            "title": "Facebook",
            "description": "Facebook",
            "type": "string",
            "example": "https://facebook.com/profile "
          },
          "linkedin": {
            "title": "Linkedin",
            "description": "LinkedIn",
            "type": "string",
            "example": "https://linkedin.com/profile "
          },
          "twitter": {
            "title": "Twitter",
            "description": "Twitter",
            "type": "string",
            "example": "https://twitter.com/profile "
          },
          "skype": {
            "title": "Skype",
            "description": "Skype",
            "type": "string",
            "example": "user123"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "tags": {
            "title": "Tags",
            "description": "Comma separated Tags",
            "type": "string",
            "example": "tag1, tag2"
          },
          "tax_no": {
            "title": "Tax No",
            "description": "Tax/VAT",
            "type": "string",
            "example": "332322"
          },
          "owner_id": {
            "title": "Sales Agent (Owner) Id",
            "description": "Sales Agent (Owner) Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "addresses": {
            "title": "Address",
            "description": "Address Object. One or more addresses can be sent at a time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreCRMAddressRequest"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreCRMAddressRequest": {
        "title": "Store CRM Address",
        "description": "CRM Address",
        "properties": {
          "type": {
            "title": "Type",
            "description": "Type of Address",
            "type": "string",
            "example": "Office Address"
          },
          "country": {
            "title": "Country",
            "description": "Country",
            "type": "string",
            "example": "United States"
          },
          "state": {
            "title": "State",
            "description": "State",
            "type": "string",
            "example": "Texas"
          },
          "city": {
            "title": "City",
            "description": "City",
            "type": "string",
            "example": "Houston"
          },
          "postal_code": {
            "title": "City",
            "description": "City",
            "type": "string",
            "example": "Houston"
          },
          "address1": {
            "title": "Address Line 1",
            "description": "Address Line 1",
            "type": "string",
            "example": "Address line 1"
          },
          "address2": {
            "title": "Address Line 2",
            "description": "Address Line 2",
            "type": "string",
            "example": "Address line 2"
          }
        },
        "type": "object",
        "xml": {
          "name": "CRM Address                                                                                                                                               "
        }
      },
      "StoreCRMContactRequest": {
        "title": "Store CRM Contact request",
        "description": "Store CRM Contact request body data",
        "required": [
          "first_name"
        ],
        "properties": {
          "first_name": {
            "title": "First Name",
            "description": "First Name",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "title": "Last Name",
            "description": "Last Name",
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "title": "Email",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "phone": {
            "title": "Phone",
            "description": "Phone",
            "type": "string",
            "example": "+10033323333"
          },
          "job_title": {
            "title": "Job Title",
            "description": "Job Title",
            "type": "string",
            "example": "Manager"
          },
          "facebook": {
            "title": "Facebook",
            "description": "Facebook",
            "type": "string",
            "example": "https://facebook.com/profile "
          },
          "linkedin": {
            "title": "Linkedin",
            "description": "LinkedIn",
            "type": "string",
            "example": "https://linkedin.com/profile "
          },
          "twitter": {
            "title": "Twitter",
            "description": "Twitter",
            "type": "string",
            "example": "https://twitter.com/profile "
          },
          "skype": {
            "title": "Skype",
            "description": "Skype",
            "type": "string",
            "example": "user123"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "tags": {
            "title": "Tags",
            "description": "Comma separated Tags",
            "type": "string",
            "example": "tag1, tag2"
          },
          "account_id": {
            "title": "Account Id",
            "description": "Account Id",
            "type": "string",
            "example": "10"
          },
          "owner_id": {
            "title": "Sales Agent (Owner) Id",
            "description": "Sales Agent (Owner) Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_id": {
            "title": "Source Id",
            "description": "Source Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status_id": {
            "title": "Status Id",
            "description": "Status Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "next_follow_up": {
            "title": "Next Follow Up",
            "description": "Next Follow Up",
            "type": "string",
            "example": "yes or no"
          },
          "last_contacted": {
            "title": "Last Contacted",
            "description": "Last Contact",
            "type": "string",
            "example": "12/12/2020"
          },
          "addresses": {
            "title": "Address",
            "description": "Address Object. One or more addresses can be sent at a time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreCRMAddressRequest"
            }
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreClientRequest": {
        "title": "Store Client request",
        "description": "Store Client request body data",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "title": "Name (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email (Required)",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "gst_number": {
            "title": "GST",
            "description": "GST",
            "type": "string",
            "example": "2342342"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreCommentRequest": {
        "title": "Store Comment request",
        "description": "Store Comment request body data",
        "required": [
          "comment"
        ],
        "properties": {
          "comment": {
            "title": "Comment (Required)",
            "description": "Comment",
            "type": "string",
            "example": "Example Comment"
          },
          "task_id": {
            "title": "Task ID",
            "description": "Task ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "StoreContractRequest": {
        "title": "Store Contract request",
        "description": "Store Contract request body data",
        "required": [
          "client_id",
          "subject",
          "amount",
          "start_date",
          "end_date",
          "contract_type_id"
        ],
        "properties": {
          "client_id": {
            "title": "Client Id (Required)",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "subject": {
            "title": "Subject  (Required)",
            "description": "Subject",
            "type": "string",
            "example": "Test Contract"
          },
          "contract_type_id": {
            "title": "Contract Type Id  (Required)",
            "description": "Contract Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start_date": {
            "title": "Start Date  (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "end_date": {
            "title": "End Date  (Required)",
            "description": "End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_start_date": {
            "title": "Original Start Date",
            "description": "Original Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_end_date": {
            "title": "Original End Date",
            "description": "Original End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "This is a test contract"
          },
          "contract_detail": {
            "title": "Contract Detail",
            "description": "Contract Detail",
            "type": "string",
            "example": "This is some detail"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          },
          "original_amount": {
            "title": "Original Amount",
            "description": "Original Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          }
        },
        "type": "object"
      },
      "StoreContractTypeRequest": {
        "title": "Store Contract Type request",
        "description": "Store Contract Type request body data",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "name",
            "description": "Contract Type Name",
            "type": "string",
            "example": "Web Development"
          }
        },
        "type": "object"
      },
      "StoreEmployeeRequest": {
        "title": "Store Employee request",
        "description": "Store Employee request body data",
        "required": [
          "employee_id",
          "name",
          "email",
          "password",
          "designation_id",
          "department_id",
          "joining_date"
        ],
        "properties": {
          "employee_id": {
            "title": "Employee Id (Required)",
            "description": "Employee Id",
            "type": "string",
            "example": "Emp-001"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .."
          },
          "hourly_rate": {
            "title": "Hourly Rate",
            "description": "Hourly Rate",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "slack_username": {
            "title": "Slack Username",
            "description": "Slack Username",
            "type": "string",
            "example": "johndoe"
          },
          "department_id": {
            "title": "Department Id  (Required)",
            "description": "Department Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "designation_id": {
            "title": "Designation Id  (Required)",
            "description": "Designation Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "joining_date": {
            "title": "Joining Date  (Required)",
            "description": "Joining Data",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "name": {
            "title": "Name  (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email  (Required)",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "password": {
            "title": "Password  (Required)",
            "description": "Password",
            "type": "string",
            "example": "*****"
          }
        },
        "type": "object"
      },
      "StoreEstimateItemRequest": {
        "title": "Store Estimate Item",
        "description": "Estimate Item model",
        "properties": {
          "item_name": {
            "title": "Item Name",
            "description": "Item Name",
            "type": "string",
            "example": "Test Item"
          },
          "item_summary": {
            "title": "Item Summary",
            "description": "Item Summary",
            "type": "string",
            "example": "This is a test item"
          },
          "item_type": {
            "title": "Item Type",
            "description": "Item Type",
            "type": "string",
            "example": "item"
          },
          "quantity": {
            "title": "Quantity",
            "description": "Quantity",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "unit_price": {
            "title": "Unit Price",
            "description": "Unit Price",
            "type": "double",
            "example": 100
          },
          "amount": {
            "title": "Amount",
            "description": "Unit Price x Quantity",
            "type": "double",
            "example": 100
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          }
        },
        "type": "object",
        "xml": {
          "name": "Estimate"
        }
      },
      "StoreEstimateRequest": {
        "title": "Store Estimate request",
        "description": "Store estimate request body data",
        "required": [
          "estimate_number",
          "client_id",
          "valid_till",
          "sub_total",
          "total",
          "currency_id"
        ],
        "properties": {
          "client_id": {
            "title": "ClientId (Required)",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "estimate_number": {
            "title": "EstimateNumber (Required)",
            "description": "Estimate Number in integer form. Don't include prefix. It must be '10' for example and never 'EST#10'",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "valid_till": {
            "title": "Valid Till (Required)",
            "description": "Valid Till",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "sub_total": {
            "title": "Subtotal (Required)",
            "description": "Subtotal",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount Type",
            "description": "Discount Type",
            "type": "string",
            "example": "fixed Or percent"
          },
          "total": {
            "title": "Total",
            "description": "Total",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "paid"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Estimate",
            "type": "string",
            "example": "This is a test Estimate"
          },
          "items": {
            "$ref": "#/components/schemas/StoreEstimateItemRequest"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreExpenseRequest": {
        "title": "Store Expense request",
        "description": "Store Expense request body data",
        "required": [
          "item_name",
          "purchase_date",
          "price",
          "currency_id",
          "user_id"
        ],
        "properties": {
          "user_id": {
            "title": "User Id (Required)",
            "description": "Related User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "item_name": {
            "title": "Item Name (Required)",
            "description": "Item Name",
            "type": "string",
            "example": "Printer"
          },
          "purchase_date": {
            "title": "Purchase Date (Required)",
            "description": "Purchase Date",
            "type": "string",
            "format": "date",
            "example": "2020-01-27"
          },
          "purchased_from": {
            "title": "Purchased From",
            "description": "Purchased From",
            "type": "string",
            "example": "Test Vendor"
          },
          "price": {
            "title": "Price (Required)",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "10000"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "Approved"
          }
        },
        "type": "object"
      },
      "StoreInvoiceItemRequest": {
        "title": "Store Invoice Item",
        "description": "Invoice model",
        "properties": {
          "item_name": {
            "title": "Item Name",
            "description": "Item Name",
            "type": "string",
            "example": "Test Item"
          },
          "item_summary": {
            "title": "Item Summary",
            "description": "Item Summary",
            "type": "string",
            "example": "This is a test item"
          },
          "item_type": {
            "title": "Item Type",
            "description": "Item Type",
            "type": "string",
            "example": "item"
          },
          "quantity": {
            "title": "Quantity",
            "description": "Quantity",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "unit_price": {
            "title": "Unit Price",
            "description": "Unit Price",
            "type": "double",
            "example": 100
          },
          "amount": {
            "title": "Amount",
            "description": "Unit Price x Quantity",
            "type": "double",
            "example": 100
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          }
        },
        "type": "object",
        "xml": {
          "name": "Invoice"
        }
      },
      "StoreInvoiceRequest": {
        "title": "Store Invoice request",
        "description": "Store Invoice request body data",
        "required": [
          "invoice_number",
          "issue_date",
          "due_date",
          "total",
          "sub_total",
          "currency_id"
        ],
        "properties": {
          "invoice_number": {
            "title": "Invoice Number (Required)",
            "description": "Invoice Number in integer form. Don't include prefix. It must be '10' for example and never 'INV#10'",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "client_id": {
            "title": "Client Id",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "issue_date": {
            "title": "Issue Date (Required)",
            "description": "Issue Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "due_date": {
            "title": "Due Date (Required)",
            "description": "Due Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "sub_total": {
            "title": "Sub Total (Required)",
            "description": "SubTotal",
            "type": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount",
            "description": "Discount",
            "type": "string",
            "example": "fixed or percent"
          },
          "total": {
            "title": "Total (Required)",
            "description": "Total",
            "type": "double",
            "example": "120"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "recurring_payment": {
            "title": "Recurring Payment",
            "description": "If its a recurring profile or not",
            "type": "string",
            "example": "yes or no"
          },
          "billing_frequency": {
            "title": "Billing Frequency",
            "description": "Specifies billing frequency. Either day, week, month or year.",
            "type": "string",
            "example": "day, week, month or year"
          },
          "billing_interval": {
            "title": "Billing Interval",
            "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)",
            "type": "string",
            "example": "1 year, 12 months, or 52 weeks"
          },
          "billing_cycle": {
            "title": "Billing Cycle",
            "description": "How many times you want to bill?",
            "type": "string",
            "example": "1"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Invoice",
            "type": "string",
            "example": "This is a test invoice"
          },
          "estimate_id": {
            "title": "Estimate Id",
            "description": "Related Estimate Id (If Any)",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "items": {
            "$ref": "#/components/schemas/StoreInvoiceItemRequest"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreLeadRequest": {
        "title": "Store Lead request",
        "description": "Store Lead request body data",
        "required": [
          "company_name",
          "client_email",
          "client_name"
        ],
        "properties": {
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_id": {
            "title": "Source Id",
            "description": "Source Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status_id": {
            "title": "Status Id",
            "description": "Status Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_name": {
            "title": "Client Name (Required)",
            "description": "Client Name",
            "type": "string",
            "example": "John Doe"
          },
          "client_email": {
            "title": "Client Email (Required)",
            "description": "Client Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name (Required)",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "next_follow_up": {
            "title": "Next Follow Up",
            "description": "Next Follow Up",
            "type": "string",
            "example": "yes or no"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "StoreMeetingRequest": {
        "title": "Store Meeting request",
        "description": "Store Meeting request body data",
        "required": [
          "meeting_name",
          "where",
          "description"
        ],
        "properties": {
          "meeting_name": {
            "title": "Name (Required)",
            "description": "Name",
            "type": "string",
            "example": "Example Name"
          },
          "where": {
            "title": "Where (Required)",
            "description": "Where",
            "type": "string",
            "example": "Example Location"
          },
          "description": {
            "title": "Description (Required)",
            "description": "Description",
            "type": "string",
            "example": "Abc"
          },
          "account_id": {
            "title": "Account ID",
            "description": "Account ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_id": {
            "title": "Contact IDs",
            "description": "Contact IDs",
            "type": "array",
            "items": {
              "properties": {
                "contact_id": {
                  "title": "Contact ID",
                  "description": "Contact ID",
                  "type": "int",
                  "example": 1
                }
              },
              "type": "object"
            }
          },
          "label_color": {
            "title": "Label Color",
            "description": "Label Color",
            "type": "string",
            "example": "bg-info"
          },
          "start_date_time": {
            "title": "Start date and time",
            "description": "Meeting start at date time",
            "type": "string",
            "format": "date-time",
            "example": "2021-05-19 19:17:47"
          },
          "end_date_time": {
            "title": "End date and time",
            "description": "Meeting ended at date time",
            "type": "string",
            "format": "date-time",
            "example": "2021-05-19 21:17:47"
          },
          "repeat": {
            "title": "Repeat",
            "description": "Repeat",
            "type": "string",
            "example": "yes"
          },
          "repeat_every": {
            "title": "Repeat Every",
            "description": "Repeat Interval",
            "type": "integer",
            "example": 1
          },
          "repeat_cycles": {
            "title": "Repeat Cycles",
            "description": "Repeat Cycles",
            "type": "integer",
            "example": 1
          },
          "repeat_type": {
            "title": "Repeat Type",
            "description": "Repeat Type",
            "example": "day"
          },
          "all_contacts": {
            "title": "All Contacts",
            "description": "All Contacts",
            "type": "boolean",
            "example": 0
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "StoreMilestoneRequest": {
        "title": "Store Milestone request",
        "description": "Store Milestone request body data",
        "required": [
          "project_id",
          "milestone_title"
        ],
        "properties": {
          "project_id": {
            "title": "Project ID (Required)",
            "description": "Project ID",
            "type": "integer",
            "example": 1
          },
          "milestone_title": {
            "title": "Milestone Title (Required)",
            "description": "Milestone Title",
            "type": "string",
            "example": "Example Title"
          },
          "currency_id": {
            "title": "Currency ID",
            "description": "Currency ID",
            "type": "integer",
            "format": "int",
            "example": 1
          },
          "company_id": {
            "title": "Company ID",
            "description": "Company ID",
            "type": "integer",
            "example": 1
          },
          "summary": {
            "title": "Summary",
            "description": "Summary",
            "type": "string",
            "example": "Example Summary"
          },
          "cost": {
            "title": "Cost",
            "description": "Milestone cost",
            "type": "number",
            "format": "float",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Milestone Status",
            "example": "complete"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "invoice_created": {
            "title": "Invoice Created",
            "description": "Invoice Created",
            "type": "boolean",
            "example": 1
          }
        },
        "type": "object"
      },
      "StoreNoteRequest": {
        "title": "Store Note request",
        "description": "Store Note request body data",
        "required": [
          "type",
          "note"
        ],
        "properties": {
          "type": {
            "title": "Type (Required)",
            "description": "Type",
            "type": "string",
            "example": "Note Type"
          },
          "note": {
            "title": "Note (Required)",
            "description": "Note",
            "type": "string",
            "example": "Example Note"
          },
          "account_id": {
            "title": "Account ID",
            "description": "Account ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_id": {
            "title": "Contact ID",
            "description": "Contact ID",
            "type": "integer",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "StorePaymentRequest": {
        "title": "Store Payment request",
        "description": "Store Payment request body data",
        "required": [
          "amount",
          "transaction_id",
          "paid_on"
        ],
        "properties": {
          "amount": {
            "title": "Amount (Required)",
            "description": "Amount (Required)",
            "type": "number",
            "format": "double",
            "example": 1
          },
          "transaction_id": {
            "title": "Transaction ID (Required)",
            "description": "Transaction ID (Required)",
            "type": "string",
            "example": "12345"
          },
          "paid_on": {
            "title": "Paid On (Required)",
            "description": "Paid On (Required)",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "invoice_id": {
            "title": "Invoice ID (Required)",
            "description": "Invoice ID (Required)",
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "title": "Company ID",
            "description": "Company ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project ID",
            "description": "Project ID",
            "type": "integer",
            "example": 1
          },
          "subscription_id": {
            "title": "Subscription ID",
            "description": "Subscription ID",
            "type": "integer",
            "example": 1
          },
          "gateway": {
            "title": "Gateway",
            "description": "Gateway",
            "type": "string",
            "example": "offline"
          },
          "currency_id": {
            "title": "Currency ID",
            "description": "Currency ID",
            "type": "integer",
            "example": 123
          },
          "plan_id": {
            "title": "Plan ID",
            "description": "Plan ID",
            "type": "string",
            "example": "12345"
          },
          "customer_id": {
            "title": "Customer ID",
            "description": "Customer ID",
            "type": "string",
            "example": "12345"
          },
          "event_id": {
            "title": "Event ID",
            "description": "Event ID",
            "type": "string",
            "example": "12345"
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "example": "complete"
          },
          "remarks": {
            "title": "Remarks",
            "description": "Remarks",
            "type": "string",
            "example": "Example Remarks"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "offline_method_id": {
            "title": "Offline Method ID",
            "description": "Offline Method ID",
            "type": "integer",
            "example": "12345"
          },
          "meta": {
            "title": "Meta",
            "description": "Meta",
            "type": "string",
            "example": "Example Meta"
          }
        },
        "type": "object"
      },
      "StorePipelineDealRequest": {
        "title": "Store Pipeline deal request",
        "description": "Store Pipeline deal request body data",
        "properties": {
          "pipeline_id": {
            "title": "Pipeline Id",
            "description": "Pipeline Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pipelinestage_id": {
            "title": "Pipeline Stage Id",
            "description": "Pipeline Stage Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_owner": {
            "title": "Deal Owner",
            "description": "Deal Owner",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "deal_name": {
            "title": "Deal Name",
            "description": "Deal Name",
            "type": "string",
            "example": "test deal"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "string",
            "example": "10"
          },
          "deal_type": {
            "title": "Deal Type",
            "description": "Deal Type",
            "type": "string",
            "example": "New Business"
          },
          "close_date": {
            "title": "Close Date",
            "description": "Close Date",
            "type": "string",
            "example": "04/05/2021"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "StorePipelineStageRequest": {
        "title": "Store Pipeline stage request",
        "description": "Store Pipeline stage request body data",
        "properties": {
          "pipeline_id": {
            "title": "Pipeline Id",
            "description": "Pipeline Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "stage_name": {
            "title": "Stage Name",
            "description": "Stage Name",
            "type": "integer",
            "example": "abc"
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "StoreProductRequest": {
        "title": "Store Product request",
        "description": "Store Product request body data",
        "required": [
          "name",
          "price"
        ],
        "properties": {
          "name": {
            "title": "Name (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "price": {
            "title": "Price (Required)",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "100"
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          },
          "allow_purchase": {
            "title": "Allow Purchase",
            "description": "Allow Purchase",
            "type": "integer",
            "example": "1 or 0"
          }
        },
        "type": "object"
      },
      "StoreProjectCategoryRequest": {
        "title": "Store Project Category request",
        "description": "Store Project Category request body data",
        "required": [
          "category_name"
        ],
        "properties": {
          "category_name": {
            "title": "Category Name",
            "description": "Category Name",
            "type": "string",
            "example": "Java"
          }
        },
        "type": "object"
      },
      "StoreProjectRequest": {
        "title": "Store Project request",
        "description": "Store Project request body data",
        "required": [
          "project_name",
          "start_date"
        ],
        "properties": {
          "project_name": {
            "title": "Project Name (Required)",
            "description": "Project Name",
            "type": "string",
            "example": "Test Project"
          },
          "project_summary": {
            "title": "Project Summary",
            "description": "Project Summary",
            "type": "string",
            "example": "This is a test summary"
          },
          "start_date": {
            "title": "Start Date  (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "deadline": {
            "title": "Deadline",
            "description": "Deadline",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "notes": {
            "title": "Notes",
            "description": "Notes",
            "type": "string",
            "example": "This is a test note"
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "feedback": {
            "title": "Feedback",
            "description": "Feedback",
            "type": "string",
            "example": "This is a test feedback"
          },
          "manual_time_log": {
            "title": "Manual Time Log",
            "description": "If manual time log is enabled?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "client_view_task": {
            "title": "Client View Task",
            "description": "If client can view tasks?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "allow_client_notification": {
            "title": "Allow Client Notification",
            "description": "If client should receive notifications?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "completion_percent": {
            "title": "Completion Percent",
            "description": "Completion Percent",
            "type": "integer",
            "format": "int64",
            "example": 55
          },
          "project_budget": {
            "title": "Project Budget",
            "description": "Project Budget",
            "type": "number",
            "format": "float",
            "example": 10000
          },
          "currency_id": {
            "title": "Curreny Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "hours_allocated": {
            "title": "Hours Allocated",
            "description": "Hours Allocated",
            "type": "integer",
            "format": "int64",
            "example": 1000
          }
        },
        "type": "object"
      },
      "StoreTaskCategoryRequest": {
        "title": "Store Task Category request",
        "description": "Store Task Category request body data",
        "required": [
          "category_name"
        ],
        "properties": {
          "category_name": {
            "title": "Category Name",
            "description": "Category Name",
            "type": "string",
            "example": "Java"
          }
        },
        "type": "object"
      },
      "StoreTaskRequest": {
        "title": "Store Task request",
        "description": "Store Task request body data",
        "required": [
          "heading",
          "start_date",
          "due_date",
          "priority",
          "user_id"
        ],
        "properties": {
          "heading": {
            "title": "Heading (Required)",
            "description": "Heading",
            "type": "string",
            "example": "This is a test heading"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Description"
          },
          "start_date": {
            "title": "Start Date (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "due_date": {
            "title": "Due Date (Required)",
            "description": "Due Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "user_id": {
            "title": "User Id (Required)",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority (Required)",
            "description": "Priority",
            "type": "string",
            "example": "medium"
          },
          "completed_on": {
            "title": "Complete On",
            "description": "Completed On",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "milestone_id": {
            "title": "Milestone Id",
            "description": "Milestone Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "billable": {
            "title": "Billable?",
            "description": "Billable?",
            "type": "integer",
            "format": "int64",
            "example": "just 1 or 0"
          }
        },
        "type": "object"
      },
      "StoreTicketAgentRequest": {
        "title": "Store Ticket Agent request",
        "description": "Store Ticket Agent request body data",
        "required": [
          "client_id",
          "subject",
          "amount",
          "start_date",
          "end_date",
          "contract_type_id"
        ],
        "properties": {
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "group_id": {
            "title": "Group Id",
            "description": "Group Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "enabled"
          }
        },
        "type": "object"
      },
      "StoreTicketChannelRequest": {
        "title": "Store Ticket channel request",
        "description": "Store Ticket channel request body data",
        "required": [
          "channel_name"
        ],
        "properties": {
          "channel_name": {
            "title": "Channel Name",
            "description": "Channel Name",
            "type": "string",
            "example": "Email"
          }
        },
        "type": "object"
      },
      "StoreTicketReplyRequest": {
        "title": "Store Ticket reply request",
        "description": "Store Ticket reply request body data",
        "required": [
          "message",
          "user_id",
          "ticket_id"
        ],
        "properties": {
          "message": {
            "title": "Message (Required)",
            "description": "Message",
            "type": "string",
            "example": "This is a test message"
          },
          "ticket_id": {
            "title": "Ticket ID (Required)",
            "description": "Ticket ID",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "title": "User Id (Required)",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "type": "object"
      },
      "StoreTicketRequest": {
        "title": "Store Ticket request",
        "description": "Store Ticket request body data",
        "required": [
          "subject",
          "description",
          "priority",
          "user_id"
        ],
        "properties": {
          "subject": {
            "title": "Subject (Required)",
            "description": "Subject",
            "type": "string",
            "example": "This is a test subject"
          },
          "description": {
            "title": "Description (Required)",
            "description": "Description",
            "type": "string",
            "example": "This is a test description"
          },
          "user_id": {
            "title": "User Id (Required)",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "channel_id": {
            "title": "Channel Id",
            "description": "Channel Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type_id": {
            "title": "Type Id",
            "description": "Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority (Required)",
            "description": "Priority",
            "type": "string",
            "example": "medium,high or low"
          }
        },
        "type": "object"
      },
      "StoreTicketTypeRequest": {
        "title": "Update Ticket Type request",
        "description": "Update Ticket Type request body data",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "title": "Type",
            "description": "Type",
            "type": "string",
            "example": "Question"
          }
        },
        "type": "object"
      },
      "StoreTimeLogRequest": {
        "title": "Store Timelog request",
        "description": "Store timelog request body data",
        "required": [
          "user_id",
          "memo",
          "project_id",
          "task_id",
          "start_date",
          "end_date",
          "start_time",
          "end_time"
        ],
        "properties": {
          "project_id": {
            "title": "ProjectId",
            "description": "ProjectId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "task_id": {
            "title": "TaskId",
            "description": "TaskId",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start_date": {
            "title": "StartDate",
            "description": "Start Date",
            "type": "string",
            "example": "12/13/2020 (mm/dd/yyyy)"
          },
          "end_date": {
            "title": "EndDate",
            "description": "End Date",
            "type": "string",
            "example": "12/13/2020  (mm/dd/yyyy)"
          },
          "start_time": {
            "title": "Start Time",
            "description": "Start Time (24-hr format)",
            "type": "string",
            "example": "13:10"
          },
          "end_time": {
            "title": "End Time",
            "description": "End Time (24-hr format)",
            "type": "string",
            "example": "13:10"
          },
          "memo": {
            "title": "Memo",
            "description": "work memo",
            "type": "string",
            "example": "This is a test memo"
          },
          "user_id": {
            "title": "User Id",
            "description": "User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "type": "object"
      },
      "StoreTimeLogSettingRequest": {
        "title": "Store Timelog setting request",
        "description": "Store timelog setting request body data",
        "properties": {
          "log_time_for": {
            "title": "Log Time For",
            "description": "Log Time For",
            "example": "project"
          },
          "auto_timer_stop": {
            "title": "Auto Timer Stop",
            "description": "Auto Timer Stop",
            "example": "yes"
          },
          "manual_time_log": {
            "title": "Manual Time Log",
            "description": "Manual Time Log",
            "example": 1
          },
          "": {
            "title": "Approval Required",
            "description": "Approval Required",
            "example": 1
          },
          "created_at": {
            "title": "Created at",
            "description": "Created at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "updated_at": {
            "title": "Updated at",
            "description": "Updated at",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          }
        },
        "type": "object"
      },
      "UpdateClientRequest": {
        "title": "Update Client request",
        "description": "Update Client request body data",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "title": "Name (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email (Required)",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "gst_number": {
            "title": "GST",
            "description": "GST",
            "type": "string",
            "example": "2342342"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "UpdateContractRequest": {
        "title": "Update Contract request",
        "description": "Update Contract request body data",
        "required": [
          "client_id",
          "subject",
          "amount",
          "start_date",
          "end_date",
          "contract_type_id"
        ],
        "properties": {
          "client_id": {
            "title": "Client Id (Required)",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "subject": {
            "title": "Subject  (Required)",
            "description": "Subject",
            "type": "string",
            "example": "Test Contract"
          },
          "contract_type_id": {
            "title": "Contract Type Id  (Required)",
            "description": "Contract Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "start_date": {
            "title": "Start Date  (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "end_date": {
            "title": "End Date  (Required)",
            "description": "End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_start_date": {
            "title": "Original Start Date",
            "description": "Original Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "original_end_date": {
            "title": "Original End Date",
            "description": "Original End Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "This is a test contract"
          },
          "contract_detail": {
            "title": "Contract Detail",
            "description": "Contract Detail",
            "type": "string",
            "example": "This is some detail"
          },
          "amount": {
            "title": "Amount",
            "description": "Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          },
          "original_amount": {
            "title": "Original Amount",
            "description": "Original Amount",
            "type": "number",
            "format": "float",
            "example": "1000"
          }
        },
        "type": "object"
      },
      "UpdateEmployeeRequest": {
        "title": "Update Employee request",
        "description": "Update Employee request body data",
        "required": [
          "employee_id",
          "name",
          "email",
          "designation_id",
          "department_id",
          "joining_date"
        ],
        "properties": {
          "employee_id": {
            "title": "Employee Id (Required)",
            "description": "Employee Id",
            "type": "string",
            "example": "Emp-001"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .."
          },
          "hourly_rate": {
            "title": "Hourly Rate",
            "description": "Hourly Rate",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "slack_username": {
            "title": "Slack Username",
            "description": "Slack Username",
            "type": "string",
            "example": "johndoe"
          },
          "department_id": {
            "title": "Department Id  (Required)",
            "description": "Department Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "designation_id": {
            "title": "Designation Id  (Required)",
            "description": "Designation Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "joining_date": {
            "title": "Joining Date  (Required)",
            "description": "Joining Data",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "name": {
            "title": "Name  (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "title": "Email  (Required)",
            "description": "Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "password": {
            "title": "Password",
            "description": "Password",
            "type": "string",
            "example": "*****"
          }
        },
        "type": "object"
      },
      "UpdateEstimateRequest": {
        "title": "Update Estimate request",
        "description": "Update Estimate request body data",
        "required": [
          "estimate_number",
          "client_id",
          "valid_till",
          "sub_total",
          "total",
          "currency_id"
        ],
        "properties": {
          "client_id": {
            "title": "ClientId (Required)",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "estimate_number": {
            "title": "EstimateNumber (Required)",
            "description": "Estimate Number in integer form. Don't include prefix. It must be '10' for example and never 'EST#10'",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "valid_till": {
            "title": "Valid Till (Required)",
            "description": "Valid Till",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27 17:50:45"
          },
          "sub_total": {
            "title": "Subtotal (Required)",
            "description": "Subtotal",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount Type",
            "description": "Discount Type",
            "type": "string",
            "example": "fixed Or percent"
          },
          "total": {
            "title": "Total",
            "description": "Total",
            "type": "double",
            "format": "double",
            "example": "100"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "paid"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Estimate",
            "type": "string",
            "example": "This is a test Estimate"
          },
          "items": {
            "$ref": "#/components/schemas/StoreEstimateItemRequest"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "UpdateExpenseRequest": {
        "title": "Update Expense request",
        "description": "Update Expense request body data",
        "required": [
          "item_name",
          "purchase_date",
          "price",
          "currency_id",
          "user_id"
        ],
        "properties": {
          "user_id": {
            "title": "User Id (Required)",
            "description": "Related User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "item_name": {
            "title": "Item Name (Required)",
            "description": "Item Name",
            "type": "string",
            "example": "Printer"
          },
          "purchase_date": {
            "title": "Purchase Date (Required)",
            "description": "Purchase Date",
            "type": "string",
            "format": "date",
            "example": "2020-01-27"
          },
          "purchased_from": {
            "title": "Purchased From",
            "description": "Purchased From",
            "type": "string",
            "example": "Test Vendor"
          },
          "price": {
            "title": "Price (Required)",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "10000"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "title": "Status",
            "description": "Status",
            "type": "string",
            "example": "Approved"
          }
        },
        "type": "object"
      },
      "UpdateInvoiceRequest": {
        "title": "Update Invoice request",
        "description": "Update Invoice request body data",
        "required": [
          "invoice_number",
          "issue_date",
          "due_date",
          "total",
          "sub_total",
          "currency_id"
        ],
        "properties": {
          "invoice_number": {
            "title": "Invoice Number (Required)",
            "description": "Invoice Number in integer form. Don't include prefix. It must be '10' for example and never 'INV#10'",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "client_id": {
            "title": "Client Id",
            "description": "Client Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "issue_date": {
            "title": "Issue Date (Required)",
            "description": "Issue Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "due_date": {
            "title": "Due Date (Required)",
            "description": "Due Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "sub_total": {
            "title": "Sub Total (Required)",
            "description": "SubTotal",
            "type": "double",
            "example": "100"
          },
          "discount": {
            "title": "Discount",
            "description": "Discount",
            "type": "double",
            "example": "100"
          },
          "discount_type": {
            "title": "Discount",
            "description": "Discount",
            "type": "string",
            "example": "fixed or percent"
          },
          "total": {
            "title": "Total (Required)",
            "description": "Total",
            "type": "double",
            "example": "120"
          },
          "currency_id": {
            "title": "Currency Id (Required)",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "recurring_payment": {
            "title": "Recurring Payment",
            "description": "If its a recurring profile or not",
            "type": "string",
            "example": "yes or no"
          },
          "billing_frequency": {
            "title": "Billing Frequency",
            "description": "Specifies billing frequency. Either day, week, month or year.",
            "type": "string",
            "example": "day, week, month or year"
          },
          "billing_interval": {
            "title": "Billing Interval",
            "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)",
            "type": "string",
            "example": "1 year, 12 months, or 52 weeks"
          },
          "billing_cycle": {
            "title": "Billing Cycle",
            "description": "How many times you want to bill?",
            "type": "string",
            "example": "1"
          },
          "note": {
            "title": "Note",
            "description": "Notes in Invoice",
            "type": "string",
            "example": "This is a test invoice"
          },
          "estimate_id": {
            "title": "Estimate Id",
            "description": "Related Estimate Id (If Any)",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "items": {
            "$ref": "#/components/schemas/StoreInvoiceItemRequest"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "UpdateLeadRequest": {
        "title": "Update Lead request",
        "description": "Update Lead request body data",
        "required": [
          "company_name",
          "client_email",
          "client_name"
        ],
        "properties": {
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_id": {
            "title": "Source Id",
            "description": "Source Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status_id": {
            "title": "Status Id",
            "description": "Status Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_name": {
            "title": "Client Name (Required)",
            "description": "Client Name",
            "type": "string",
            "example": "John Doe"
          },
          "client_email": {
            "title": "Client Email (Required)",
            "description": "Client Email",
            "type": "string",
            "example": "johndoe@gmail.com"
          },
          "mobile": {
            "title": "Mobile",
            "description": "Mobile",
            "type": "string",
            "example": "+10033323333"
          },
          "company_name": {
            "title": "Company Name (Required)",
            "description": "Company Name",
            "type": "string",
            "example": "Google"
          },
          "address": {
            "title": "Address",
            "description": "Address",
            "type": "string",
            "example": "Street 001 .. "
          },
          "website": {
            "title": "website",
            "description": "website",
            "type": "string",
            "example": "https://example.com"
          },
          "note": {
            "title": "note",
            "description": "note",
            "type": "string",
            "example": "this is a test note"
          },
          "next_follow_up": {
            "title": "Next Follow Up",
            "description": "Next Follow Up",
            "type": "string",
            "example": "yes or no"
          },
          "custom_fields": {
            "title": "Custom Fields",
            "description": "Array of custom fields in the form of json with key and value pairs. ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        },
        "type": "object"
      },
      "UpdatePaymentGatewayRequest": {
        "title": "Store Payment Gateway request",
        "description": "Store Payment Gateway request body data",
        "properties": {
          "paypal_client_id": {
            "title": "Paypal Client ID",
            "description": "Paypal Client ID",
            "type": "string",
            "example": "123456789abcdef"
          },
          "paypal_secret": {
            "title": "Paypal Secret",
            "description": "Paypal Secret",
            "type": "string",
            "example": "123456789abcdef"
          },
          "paypal_status": {
            "title": "Paypal Status",
            "description": "Paypal Status",
            "type": "string",
            "example": "Active"
          },
          "stripe_client_id": {
            "title": "Stripe Client ID",
            "description": "Stripe Client ID",
            "type": "string",
            "example": "123456789abc"
          },
          "stripe_secret": {
            "title": "Stripe Secret",
            "description": "Stripe Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "stripe_webhook_secret": {
            "title": "Stripe Webhook Secret",
            "description": "Stripe Webhook Secret",
            "type": "string",
            "example": "abcdef1234"
          },
          "stripe_status": {
            "title": "Stripe Status",
            "description": "Stripe Status",
            "type": "string",
            "example": "Active"
          },
          "razorpay_key": {
            "title": "RazorPay key",
            "description": "RazorPay key",
            "type": "string",
            "example": "123456789abcdef"
          },
          "razorpay_secret": {
            "title": "RazorPay Secret",
            "description": "RazorPay Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "razorpay_webhook_secret": {
            "title": "RazorPay Webhook Secret",
            "description": "RazorPay Webhook Secret",
            "type": "string",
            "example": "123456789abc"
          },
          "razorpay_status": {
            "title": "RazorPay Status",
            "description": "RazorPay Status",
            "type": "string",
            "example": "Active"
          },
          "paypal_mode": {
            "title": "Paypal Mode",
            "description": "Paypal Mode",
            "type": "string",
            "example": "sandbox"
          },
          "mollie_api_key": {
            "title": "Mollie Api Key",
            "description": "Mollie Api Key",
            "type": "string",
            "example": "123456789abc"
          },
          "mollie_status": {
            "title": "Mollie Status",
            "description": "Mollie Status",
            "type": "string",
            "example": "Active"
          },
          "authorize_login_id": {
            "title": "Authorize Login ID",
            "description": "Authorize Login ID",
            "type": "string",
            "example": "123"
          },
          "authorize_transaction_key": {
            "title": "Authorize Transaction Key",
            "description": "Authorize Transaction Key",
            "type": "string",
            "example": "123"
          },
          "authorize_environment": {
            "title": "Authorize Environment",
            "description": "Authorize Environment",
            "type": "string",
            "example": "abc"
          },
          "authorize_status": {
            "title": "Authorize Status",
            "description": "Authorize Status",
            "type": "string",
            "example": "Active"
          }
        },
        "type": "object"
      },
      "UpdateProductRequest": {
        "title": "Update Product request",
        "description": "Update Product request body data",
        "required": [
          "name",
          "price"
        ],
        "properties": {
          "name": {
            "title": "Name (Required)",
            "description": "Name",
            "type": "string",
            "example": "John Doe"
          },
          "price": {
            "title": "Price (Required)",
            "description": "Price",
            "type": "number",
            "format": "float",
            "example": "100"
          },
          "taxes": {
            "title": "Taxes",
            "description": "Ids of Taxes",
            "type": "array",
            "items": {
              "properties": {
                "taxes": {
                  "title": "Tax Id",
                  "description": "Tax Id",
                  "format": "int64",
                  "example": 1
                }
              },
              "type": "object"
            },
            "example": "[1,2,3]"
          },
          "allow_purchase": {
            "title": "Allow Purchase",
            "description": "Allow Purchase",
            "type": "integer",
            "example": "1 or 0"
          }
        },
        "type": "object"
      },
      "UpdateProjectRequest": {
        "title": "Update Project request",
        "description": "Update Project request body data",
        "required": [
          "project_name",
          "start_date"
        ],
        "properties": {
          "project_name": {
            "title": "Project Name  (Required)",
            "description": "Project Name",
            "type": "string",
            "example": "Test Project"
          },
          "project_summary": {
            "title": "Project Summary",
            "description": "Project Summary",
            "type": "string",
            "example": "This is a test summary"
          },
          "start_date": {
            "title": "Start Date  (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "deadline": {
            "title": "Deadline",
            "description": "Deadline",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "notes": {
            "title": "Notes",
            "description": "Notes",
            "type": "string",
            "example": "This is a test note"
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "feedback": {
            "title": "Feedback",
            "description": "Feedback",
            "type": "string",
            "example": "This is a test feedback"
          },
          "manual_time_log": {
            "title": "Manual Time Log",
            "description": "If manual time log is enabled?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "client_view_task": {
            "title": "Client View Task",
            "description": "If client can view tasks?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "allow_client_notification": {
            "title": "Allow Client Notification",
            "description": "If client should receive notifications?",
            "type": "integer",
            "format": "int64",
            "example": "1 or 0"
          },
          "completion_percent": {
            "title": "Completion Percent",
            "description": "Completion Percent",
            "type": "integer",
            "format": "int64",
            "example": 55
          },
          "project_budget": {
            "title": "Project Budget",
            "description": "Project Budget",
            "type": "number",
            "format": "float",
            "example": 10000
          },
          "currency_id": {
            "title": "Curreny Id",
            "description": "Currency Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "client_id": {
            "title": "Client Id",
            "description": "Related Client Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "hours_allocated": {
            "title": "Hours Allocated",
            "description": "Hours Allocated",
            "type": "integer",
            "format": "int64",
            "example": 1000
          }
        },
        "type": "object"
      },
      "UpdateTaskRequest": {
        "title": "Update Task request",
        "description": "Update Task request body data",
        "required": [
          "heading",
          "start_date",
          "due_date",
          "priority",
          "user_id"
        ],
        "properties": {
          "heading": {
            "title": "Heading (Required)",
            "description": "Heading",
            "type": "string",
            "example": "This is a test heading"
          },
          "description": {
            "title": "Description",
            "description": "Description",
            "type": "string",
            "example": "Description"
          },
          "start_date": {
            "title": "Start Date (Required)",
            "description": "Start Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "due_date": {
            "title": "Due Date (Required)",
            "description": "Due Date",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "user_id": {
            "title": "User Id (Required)",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "category_id": {
            "title": "Category Id",
            "description": "Category Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority (Required)",
            "description": "Priority",
            "type": "string",
            "example": "medium"
          },
          "completed_on": {
            "title": "Complete On",
            "description": "Completed On",
            "type": "string",
            "format": "datetime",
            "example": "2020-01-27"
          },
          "milestone_id": {
            "title": "Milestone Id",
            "description": "Milestone Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "billable": {
            "title": "Billable?",
            "description": "Billable?",
            "type": "integer",
            "format": "int64",
            "example": "just 1 or 0"
          }
        },
        "type": "object"
      },
      "UpdateTicketRequest": {
        "title": "Update Ticket request",
        "description": "Update Ticket request body data",
        "required": [
          "subject",
          "description",
          "priority",
          "user_id"
        ],
        "properties": {
          "subject": {
            "title": "Subject (Required)",
            "description": "Subject",
            "type": "string",
            "example": "This is a test subject"
          },
          "description": {
            "title": "Description (Required)",
            "description": "Description",
            "type": "string",
            "example": "This is a test description"
          },
          "user_id": {
            "title": "User Id (Required)",
            "description": "Assigned User Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "agent_id": {
            "title": "Agent Id",
            "description": "Agent Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "channel_id": {
            "title": "Channel Id",
            "description": "Channel Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type_id": {
            "title": "Type Id",
            "description": "Type Id",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "priority": {
            "title": "Priority (Required)",
            "description": "Priority",
            "type": "string",
            "example": "medium,high or low"
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "name": "Invoices",
      "description": "API Endpoint for Invoices"
    },
    {
      "name": "Estimates",
      "description": "API Endpoint for Estimates"
    },
    {
      "name": "Users",
      "description": "API Endpoint for Users."
    },
    {
      "name": "Taxes",
      "description": "API Endpoint for Taxes."
    },
    {
      "name": "Departments",
      "description": "API Endpoint for Departments."
    },
    {
      "name": "Designations",
      "description": "API Endpoint for Designations."
    },
    {
      "name": "Products",
      "description": "API Endpoint for Products."
    },
    {
      "name": "Projects",
      "description": "API Endpoint for Projects."
    },
    {
      "name": "Tasks",
      "description": "API Endpoint for Tasks."
    },
    {
      "name": "Tickets",
      "description": "API Endpoint for Tickets."
    },
    {
      "name": "Contracts",
      "description": "API Endpoint for Contracts."
    },
    {
      "name": "Employees",
      "description": "API Endpoint for Employees."
    },
    {
      "name": "Expenses",
      "description": "API Endpoint for Expenses."
    },
    {
      "name": "Contacts",
      "description": "API Endpoint for Contacts."
    },
    {
      "name": "Accounts",
      "description": "API Endpoint for Accounts."
    }
  ],
  "security": [
    []
  ]
}