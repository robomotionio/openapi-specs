{
  "openapi": "3.1.0",
  "info": {
    "description": "Welcome to Ringover's Public API Documentation. Ringover's REST API allows you to easily retrieve your phone information, access your contacts, users and groups and their properties. Our API is designed to answer your requests made via HTTP commands and to receive data with standard HTTP response codes.",
    "version": "2.0.3",
    "title": "Ringover Public API",
    "x-logo": {
      "url": "https://webcdn.ringover.com/app/img/misc/logo_app_redoc.png",
      "backgroundColor": "#FAFAFA",
      "altText": "Ringover Logo"
    },
    "termsOfService": "http://ringover.com/terms/",
    "contact": {
      "email": "support@ringover.com"
    }
  },
  "tags": [
    {
      "name": "teams",
      "description": "The team object is a modelization of your Ringover's team. It contains a list of related objects:\n- `numbers` and related information such as their type, country and prefix according to the country,\n- `users` and related information such as their user ID, team ID as well as personal data such as their first name, last name and email, \n- `ivrs` and related information such as their ID and the `numbers` objects associated, \n- `conferences` and related information such as their ID, name and tags (optional).\"\n"
    },
    {
      "name": "groups",
      "description": "The group object is a modelization of a group on Ringover. It contains basic data about the group like its name, color, number of users. It also indicates if people can join and leave freely."
    },
    {
      "name": "users",
      "description": "The `user` object with our different routes allows you to retrieve data from one or all of your users, create new users or delete them. It contains basic data such as the user's first name, last name and email as well as all phone `numbers` attributed to the user."
    },
    {
      "name": "numbers",
      "description": "The `number` object is a modelization of a phone number. Our different routes will allow you to retrieve data for all of your numbers or for one number specifically."
    },
    {
      "name": "ivrs",
      "description": "The `ivr` (interactive voice response) object is a modelization of a Ringover ivr. It contains a list of objects like `numbers` and `scenario`. Our different API routes will allow you to retrieve all of this information."
    },
    {
      "name": "tags",
      "description": "The `tags` object used on Ringover contains basic data like the tag id, its name, its color, a description and its creation date."
    },
    {
      "name": "conferences",
      "description": "The `conference` object is a modelization of a conference that you created on Ringover. It contains an ID, a name and a list of `numbers` objects, which are the numbers used to join the conference."
    },
    {
      "name": "calls",
      "description": "The call object is a modelization of your calls with Ringover. The API permits data retrieval for all of your current or past calls. Some routes are available with the HTTP GET and POST methods, the latter allowing you to use more parameters to refine the query."
    },
    {
      "name": "channels",
      "description": "A `channel` is an audio stream during a call with Ringover."
    },
    {
      "name": "contacts",
      "description": "The `contacts` object contains essential data as well as a list of all phone `numbers` attributed to the contact."
    },
    {
      "name": "conversations",
      "description": "The `conversation` object is a modelization of a messaging conversation on Ringover. Regarding messages, only the last one is present in the structure of the object."
    },
    {
      "name": "messages",
      "description": "The `messages` object refers to operations regarding messages such as listing the messages of a conversation or archiving/unarchiving a message."
    },
    {
      "name": "push",
      "description": "The `push` object refers to operations regarding push SMS: a push SMS can be sent to a specific phone number."
    },
    {
      "name": "profiles",
      "description": "The `profiles` object is a modelization of a user's profile created on Ringover. It contains two attributes : <em>id</em> (unique identifier of the profile) and <em>name</em>."
    },
    {
      "name": "presences",
      "description": "The `presences` object retrieves information about a user like their planning, snooze status, connected device. It also allows you to know if they are in a call."
    },
    {
      "name": "blacklist",
      "description": "The `blacklist` object contains information about your blacklisted phone numbers on Ringover."
    },
    {
      "name": "webhook",
      "description": "Ringover uses webhooks to notify you any time that an event associated with your team occurs (ex: a new voicemail, the reception of a new message, a missed call...). A webhook is a URL that we call with a parameter that contains all the data about the event. It will allow you to create a <b>webhook handler</b> on your server in order to trigger specific actions in response to the event. You can configure your <b>webhooks</b> in the developer section of your Ringover's dashboard."
    },
    {
      "name": "callbacks",
      "description": "The `callbacks` object refers to Telecoms' operations: it allows you to manage a call between a user and a recipient."
    },
    {
      "name": "surveys",
      "description": "The `surveys` object allows you to retrieve the number of answered surveys and their contents."
    },
    {
      "name": "snoozes",
      "description": "The `snoozes` object allows you to retrieve the list of snoozes status."
    }
  ],
  "servers": [
    {
      "url": "https://public-api.ringover.com/v2",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "Authorization": []
    }
  ],
  "paths": {
    "/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get full team object",
        "description": "This request allows you to get a complete `team` object that contains a list of `numbers`, `users`, `ivrs`, `conferences`, `tags` and `groups`.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team"
                }
              }
            }
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get all groups from your team",
        "description": "This request allows you to retrieve the 100 first groups from your team.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group_list"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a specified group from your team",
        "description": "This request allows you to retrieve data about a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The identifier of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group_full"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/groups/{groupId}/isjumper/toggle": {
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Toggle free access to the group",
        "description": "Toggle the `is_jumper` parameter of a specific group. It allows users to leave and join the group freely. This corresponds to the `Free access` switch of the group in the dashboard.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The identifier of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/groups/{groupId}/users": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Add a user to a group",
        "description": "This request allows you to add a user to a group. Make sure that it is possible to join the group freely (Free access switch).",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The identifier of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_user_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a user from a group",
        "description": "This request allows you to delete a user from a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The identifier of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_user_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/groups/{groupId}/users/{userId}/ring_duration/{ringDuration}": {
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Patch the ring duration",
        "description": "This request allows you to patch the ring duration.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The identifier of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "ringDuration",
            "description": "The ring duration",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users from a team",
        "description": "This request allows you to retrieve all the users on your team, and a list of their numbers for each. The size of the list is set on the attribute `list_count`.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_list"
                }
              }
            }
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user",
        "description": "This request allows you to create a new user with or without commitment from their email address and phone number (E.164 format).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid body supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a specified user",
        "description": "This request allows you to retrieve basic data about a user and all phone numbers assigned to them.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_full"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "description": "This request allows you to delete permanently a user from their unique identifier.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/users/{userId}/profile/{profileId}": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update profile ID",
        "description": "This request allows you to update the user's profile by replacing it with the one corresponding to the id set in parameter.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Profile ID to set",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/users/{userId}/plannings": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's plannings",
        "description": "This request allows you to retrieve a user's planning information.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_plannings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Set user's planning",
        "description": "This request allows you to replace a user's entire planning with a new one.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/time_ranges"
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "406": {
            "description": "Not acceptable"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/plannings/{day}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Set user's planning of specific day",
        "description": "This request allows you to replace a user's day schedules with new ones.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/time_ranges"
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "day",
            "in": "path",
            "description": "The day of planning",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "406": {
            "description": "Not acceptable"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/presences": {
      "get": {
        "tags": [
          "presences",
          "users"
        ],
        "summary": "Get user's presences",
        "description": "This request allows you to retrieve a user's presences information.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_presences"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/snooze/log": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user snooze log",
        "description": "This request allows you to get a user's snooze log",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit_count",
            "in": "query",
            "description": "Restrict the number of returned rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "example": 100
            }
          },
          {
            "name": "limit_offset",
            "in": "query",
            "description": "The amount of conversations ignored, not returned",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snooze_log_list"
                }
              }
            }
          },
          "204": {
            "description": "Contact list empty"
          },
          "400": {
            "description": "Invalid param supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/snooze": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Set user's snooze status",
        "description": "This request allows you to set a user's snooze status",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "meeting"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration of snooze in seconds",
                    "example": 3600
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "406": {
            "description": "Not acceptable"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/numbers": {
      "get": {
        "tags": [
          "numbers"
        ],
        "summary": "Get all numbers",
        "description": "This request allows you to retrieve the `numbers` list for your whole team. The size of the list is set in the variable <em>list_count</em>. You must have the admin's rights in order to use parameters.",
        "parameters": [
          {
            "name": "is_user",
            "in": "query",
            "description": "Retrieves numbers belonging to a user",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "is_ivr",
            "in": "query",
            "description": "Retrieves numbers used for an ivr",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "is_fax",
            "in": "query",
            "description": "Retrieves the fax numbers",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "is_conference",
            "in": "query",
            "description": "Retrieve the conferences numbers",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "is_available",
            "in": "query",
            "description": "Retrieve availables numbers",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/number_list"
                }
              }
            }
          },
          "204": {
            "description": "Number list empty"
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/numbers/{number}": {
      "get": {
        "tags": [
          "numbers"
        ],
        "summary": "Get number",
        "description": "This request allows you to retrieve information about an existing number. You simply have to set the phone numbers in the route (E.164 format).",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The identifier of the number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/number"
                }
              }
            }
          },
          "400": {
            "description": "Invalid number supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Number not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/ivrs": {
      "get": {
        "tags": [
          "ivrs"
        ],
        "summary": "Get all ivrs from team",
        "description": "This request allows you to retrieve all your ivrs. The size of the list is set in the variable <em>list_count</em>.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ivr_list"
                }
              }
            }
          },
          "204": {
            "description": "Ivrs list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/ivrs/{ivrId}": {
      "get": {
        "tags": [
          "ivrs"
        ],
        "summary": "Get an ivr",
        "description": "This request allows you to retrieve the ivr corresponding to the identifier indicated in the route.",
        "parameters": [
          {
            "name": "ivrId",
            "in": "path",
            "description": "The ivr identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ivr"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "ivr not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/ivrs/{ivrId}/scenarios": {
      "get": {
        "tags": [
          "ivrs"
        ],
        "summary": "Get all scenarios from a specific ivr",
        "description": "This request allows you to retrieve all the scenarios attached to the ivr indicated in the route. The size of the list is set in the variable <em>list_count</em>.",
        "parameters": [
          {
            "name": "ivrId",
            "in": "path",
            "description": "The ivr identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scenario_list"
                }
              }
            }
          },
          "204": {
            "description": "Scenario list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/ivrs/{ivrId}/scenarios/{scenarioId}": {
      "get": {
        "tags": [
          "ivrs"
        ],
        "summary": "Get a scenario by id from a specific ivr",
        "description": "This request allows you to retrieve a scenario's information by indicating in the route its identifier and that of its ivr.",
        "parameters": [
          {
            "name": "ivrId",
            "in": "path",
            "description": "The ivr identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "The scenario identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scenario"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Scenario not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get all tags",
        "description": "This request allows you to retrieve all your tags. The size of the list is set in the variable <em>list_count</em>.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag_list"
                }
              }
            }
          },
          "204": {
            "description": "Tag list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create a tags",
        "description": "This request allows you to create a tag.",
        "requestBody": {
          "description": "a tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get a specific tag",
        "description": "This request allows you to retrieve the tag corresponding to the provided identifier.",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the tag",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Tag not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conferences": {
      "get": {
        "tags": [
          "conferences"
        ],
        "summary": "Get all conferences from team",
        "description": "This request allows you to retrieve all the conferences you've set up. The size of the list is indicated in the variable list_count.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conference_list"
                }
              }
            }
          },
          "204": {
            "description": "Tag list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conferences/{conferenceId}": {
      "get": {
        "tags": [
          "conferences"
        ],
        "summary": "Get a conference",
        "description": "This request allows you to retrieve a conference.",
        "parameters": [
          {
            "name": "conferenceId",
            "in": "path",
            "description": "The identifier of the conference",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conference"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Conference not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conferences/{conferenceId}/pincode/{pincodeId}": {
      "patch": {
        "tags": [
          "conferences"
        ],
        "summary": "Update pincode for specific conference",
        "description": "This request allows you to update the <em>pincode</em> of the conference indicated in the parameter. You have to set parameters directly in the URL.",
        "parameters": [
          {
            "name": "conferenceId",
            "in": "path",
            "description": "The identifier of the conference",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "description": "The identifier of the pincode",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Pincode not changed"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Conference not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/calls": {
      "get": {
        "tags": [
          "calls"
        ],
        "summary": "Get all calls",
        "description": "This request allows you to retrieve your terminated calls. All the parameters are optional. For a more refined search, please refer to the POST method.",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Used to create a time cursor. Must be used with end_date",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-06-27T00:00:00.53Z"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Used to create a time cursor. Must be used with start_date",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-07-27T00:00:00.53Z"
            }
          },
          {
            "name": "limit_count",
            "in": "query",
            "description": "Restrict the number of returned rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000
            }
          },
          {
            "name": "last_id_returned",
            "in": "query",
            "description": "The request will return <b>cdr_id</b> (call logs) prior to this one",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          },
          {
            "name": "call_type",
            "in": "query",
            "description": "Used to filter certain types of call. 'ANSWERED' filters answered calls. 'MISSED' filters missed calls. 'OUT' filters outgoing calls. 'VOICEMAIL' filters calls ending on voicemail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calls_list"
                }
              }
            }
          },
          "204": {
            "description": "Call list empty"
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "calls"
        ],
        "summary": "Get all calls",
        "description": "Here in <em>POST</em> method, this request is used to retrieves detailed data of your terminated calls. The object <em>current_calls_filter</em> must be set.",
        "requestBody": {
          "description": "calls_filter object must be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calls_filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calls_list"
                }
              }
            }
          },
          "204": {
            "description": "Call list empty"
          },
          "400": {
            "description": "Invalid Json supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/calls/{callId}": {
      "get": {
        "tags": [
          "calls"
        ],
        "summary": "Get call by id",
        "description": "This request allows you to retrieve data about the terminated call set in the route parameter. The array <em>list</em> contains all the logs generated by the call, (for example in the case of call forwarding).",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "The identifier of the call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calls_list"
                }
              }
            }
          },
          "204": {
            "description": "Call list empty"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Call not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "calls"
        ],
        "summary": "Archive call",
        "description": "This request allows you to archive a call (Rights monitoring enable = Dashboard effect | Rights monitoring disable = MyRingover effect).",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "The identifier of the call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Call not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/calls/{callId}/channels/{channelId}": {
      "delete": {
        "tags": [
          "calls"
        ],
        "summary": "Archive call with channelID",
        "description": "This request allows you to archive a call with channelID (Rights monitoring enable = Dashboard effect | Rights monitoring disable = MyRingover effect).",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "The identifier of the call",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Call not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/calls/{callId}/surveys": {
      "get": {
        "tags": [
          "calls",
          "surveys"
        ],
        "summary": "Get all survey answers for the callId indicated in the route",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "The identifier of the call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/surveys_list"
                }
              }
            }
          },
          "204": {
            "description": "No surveys available"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Call not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/calls/current": {
      "post": {
        "tags": [
          "calls"
        ],
        "summary": "Get all current calls",
        "description": "This request allows you to retrieve all currents calls. This route is only available with the <em>POST</em> method. The current_calls_filter object must be sent.",
        "requestBody": {
          "description": "current_calls_filter object must be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/current_calls_filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/current_calls_list"
                }
              }
            }
          },
          "204": {
            "description": "Current call list empty"
          },
          "400": {
            "description": "Invalid Json supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/channels/{channelId}/events/mute/toggle": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to enable/disable mute for specific channel",
        "description": "Event to enable/disable mute for specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/channels/{channelId}/events/hold/toggle": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to enable/disable hold for specific channel",
        "description": "Event to enable/disable hold for specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/channels/{channelId}/events/record/toggle": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to enable/disable record for specific channel",
        "description": "Event to enable/disable record for specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/channels/{channelId}/events/hangup": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to hangup a specific channel",
        "description": "Event to hangup a specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/channels/{channelId}/events/transfer": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to transfer a specific channel",
        "description": "Event to transfer a specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "event_transfer object must be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/event_transfer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid body or id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/channels/{channelId}/events/dtmf": {
      "post": {
        "tags": [
          "channels"
        ],
        "summary": "Event to send a DTMF for specific channel",
        "description": "Event to send a DTMF for specific channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The identifier of the channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "event_dtmf object must be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/event_dtmf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully processed and the event is applied"
          },
          "400": {
            "description": "Invalid body or id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Get contacts",
        "description": "Retrieves your list of contacts. The maximum of rows returned is set in the parameter <em>limit_count</em> (limited to 1000 rows). All the parameters are optional.",
        "parameters": [
          {
            "name": "pagination",
            "in": "query",
            "description": "The character sequence assigned to pages in address book. Possible values are: 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#' for any digit and '.' for any other characters. An empty value disables pagination.",
            "schema": {
              "type": "string",
              "example": "a"
            }
          },
          {
            "name": "alphabetical_order",
            "in": "query",
            "description": "Alphabetical order impacts on the pagination value. Possible values are : FirstnameLastnameCompanyDESC, FirstnameLastnameCompanyASC, LastnameFirstnameCompanyDESC, LastnameFirstnameCompanyASC, CompanyFirstnameLastnameDESC, CompanyFirstnameLastnameASC ,CompanyLastnameFirstnameDESC, CompanyLastnameFirstnameASC.",
            "schema": {
              "type": "string",
              "example": "CompanyFirstnameLastnameASC"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The keyword is used to search a specific contact. Index is based on firstname, lastname, company and phone number(s)",
            "schema": {
              "type": "string",
              "example": "Pierre 3362323"
            }
          },
          {
            "name": "limit_count",
            "in": "query",
            "description": "Restrict the number of returned rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "example": 100
            }
          },
          {
            "name": "limit_offset",
            "in": "query",
            "description": "The amount of conversations ignored, not returned",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact_list"
                }
              }
            }
          },
          "204": {
            "description": "Contact list empty"
          },
          "400": {
            "description": "Invalid param supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "Get or Create contacts",
        "description": "The function depends on the parameter that you sent, the JSON <b>contact_filter</b> to get all the contacts or <b>contact_creation</b> in order to create a new one. Only one parameter must be sent. In the case of creation, you can add multiple contacts at the same time, limited to 50 contacts in a row. In the other case, the maximum of contacts returned is set in the variable <em>limit_count</em> (limited to 1000 contacts).",
        "requestBody": {
          "description": "contact_filter for filter OR contact_create for creation",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/contact_filter"
                  },
                  {
                    "$ref": "#/components/schemas/new_contact_request"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact_list"
                }
              }
            }
          },
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/new_contact_response"
                }
              }
            }
          },
          "204": {
            "description": "Contact list empty"
          },
          "400": {
            "description": "Invalid body supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Get specific contact",
        "description": "Retrieve data as well as all `numbers` to a specific `contact` by their identifier",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact_full"
                }
              }
            }
          },
          "304": {
            "description": "Contact not changed"
          },
          "400": {
            "description": "Invalid body supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "contacts"
        ],
        "summary": "Update specific contact",
        "description": "Update the contact from their id. All fields are mandatory, except the array of <em>numbers</em>. If the array of <em>numbers</em> is set, then the numbers will be purged and replaced by those present in the parameter, otherwise no action will be taken for them.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/new_contact"
                }
              }
            }
          },
          "304": {
            "description": "Contact number not deleted"
          },
          "400": {
            "description": "Invalid body supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "Delete contact",
        "description": "Delete the contact by their id",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/shared/toggle": {
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "Update is_shared status for specific contact",
        "description": "Toggle the attribute is_shared of the contact indicated in the parameter",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact not changed"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/firstname/{firstname}": {
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "Update firstname for specific contact",
        "description": "Update the attributed <em>firstname</em> of the contact indicated in the parameter. You have to set the parameter directly in the URL.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "firstname",
            "in": "path",
            "description": "The firstname of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Julien"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact not changed"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/lastname/{lastname}": {
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "Update lastname for specific contact",
        "description": "Update the attributed <em>lastname</em> of the contact indicated in the parameter. You have to set the parameter directly in the URL.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "lastname",
            "in": "path",
            "description": "The lastname of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Dupont"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact not changed"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/company/{company}": {
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "Update company for specific contact",
        "description": "Update the attributed company of the contact indicated in the parameter. You have to set the parameter directly in the URL.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "company",
            "in": "path",
            "description": "The company of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ringover"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact not changed"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/numbers": {
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "Add new number(s) for specific contact",
        "description": "Allow to add one or more numbers to the contact set in parameter. Phone numbers must be in international format.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/number_contact_list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid body or id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "Delete numbers for specific contact",
        "description": "Delete permanently all phone numbers of the contact set in the route",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contacts/{contactId}/numbers/{number}": {
      "put": {
        "tags": [
          "contacts"
        ],
        "summary": "Update a number for specific contact",
        "description": "Update a phone number from the id and the phone number of the contact. The number in the API route is the old number, while the new number is in the json parameter. Phone numbers must be in E.164 format.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/number_light"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact number not modified"
          },
          "400": {
            "description": "Invalid body or id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "Delete number for specific contact",
        "description": "Delete the phone number of the contact set in parameter",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The identifier of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Contact number not deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Lists conversations filtered by some parameters.",
        "description": "This will show the first 100 available conversations by default. When you provide a 'limit_offset' X with a 'limit_count' Y, the first X conversations will be ignored, and the following Y conversations will be returned.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Type of conversation",
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "example": [
                "ALL"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "ALL",
                  "INTERNAL",
                  "EXTERNAL",
                  "COLLABORATIVE"
                ],
                "example": "ALL"
              }
            }
          },
          {
            "name": "limit_count",
            "in": "query",
            "description": "Restrict the number of returned rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "example": 100
            }
          },
          {
            "name": "limit_offset",
            "in": "query",
            "description": "Offset of the result",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the list is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation_list"
                }
              }
            }
          },
          "204": {
            "description": "Successfully processed and the list is empty"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Gets information about specific conversation",
        "description": "This will get information about specific conversation in which you have the right to read. For messages, only the last is retrieved. To access all messages.",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation information is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation_light"
                }
              }
            }
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/archive": {
      "post": {
        "tags": [
          "conversations"
        ],
        "operationId": "conversationPostArchive",
        "summary": "Archive a specific conversation in level 1",
        "description": "This will archive in level 1 a specific conversation in which you have the right to write",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation is archived"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "conversations"
        ],
        "operationId": "conversationDeleteArchive",
        "summary": "Archive a specific conversations in level 2.",
        "description": "This will archive a specific conversation in level 2 on which you have the\nright to write.",
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation is archived"
          },
          "400": {
            "description": "The request contains some mistake(s)"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          }
        },
        "parameters": [
          {
            "name": "convID",
            "in": "path",
            "description": "The conversation ID",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/conversations/{convId}/unarchive": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Unarchive a specific conversation",
        "description": "This will unarchive a specific conversation in which you have the right to write",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation is unarchived"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/rename/{newName}": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Renames a specific conversation",
        "description": "This will update the name of a specific conversation on which you have the right to read",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "newName",
            "in": "path",
            "description": "New name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "new_name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation is renamed"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/purpose": {
      "post": {
        "tags": [
          "conversations"
        ],
        "operationId": "conversationSetPurpose",
        "summary": "Updates the purpose of specific conversation",
        "description": "This will update the purpose of a specific conversation on which you have the right to read",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "requestBody": {
          "description": "Purpose object that needs to be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_purpose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully processed and the conversation purpose is set"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/members": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Lists members of specific conversation",
        "description": "This will show all members in a specific conversation on which you have the right to read",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifer of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the list of conversation members is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member_list"
                }
              }
            }
          },
          "204": {
            "description": "Successfully processed and the list is empty"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Lists messages from a specific conversation in which you have the right to read",
        "description": "This will show the first 100 available messages in a specific conversation. When you provide a 'limit_offset' X with a 'limit_count' Y, the first X conversations will be ignored, and the following Y conversations will be returned.",
        "parameters": [
          {
            "name": "limit_count",
            "in": "query",
            "description": "Restrict the number of returned rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 1000,
              "example": 100
            }
          },
          {
            "name": "last_id_returned",
            "in": "query",
            "description": "Last id returned (To avoid duplicates we use it instead of limit_offset)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          },
          {
            "name": "display_archived",
            "in": "query",
            "description": "A boolean to enable the archive display",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "name": "convId",
            "in": "path",
            "description": "The conversation ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the list of messages is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation_message_list"
                }
              }
            }
          },
          "204": {
            "description": "Successfully processed and the list is empty"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/conversations/{convId}/messages/{messageId}/archive": {
      "post": {
        "tags": [
          "messages"
        ],
        "operationId": "conversationPostMessageArchive",
        "summary": "Archive a specific message in level 1.",
        "description": "This will archive in level 1 a message in a specific conversation in which you have the right to write",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The identifier of the message",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the message is archived"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation or message is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "operationId": "conversationDeleteMessageArchive",
        "summary": "Archive a specific conversations in level 2.",
        "description": "This will archive in level 2 a message in a specific conversation on which you have the right to write. ",
        "responses": {
          "200": {
            "description": "Successfully processed and the message is archived"
          },
          "400": {
            "description": "The request contains some mistake(s)"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation or message is not found"
          }
        },
        "parameters": [
          {
            "name": "convID",
            "in": "path",
            "description": "The conversation ID",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "MessageID",
            "in": "path",
            "description": "The message ID",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/conversations/{convId}/messages/{messageId}/unarchive": {
      "post": {
        "tags": [
          "messages"
        ],
        "operationId": "conversationMessageUnarchive",
        "summary": "Unarchive a specific message.",
        "description": "This will unarchive a message in a specific conversation in which you have the right to write",
        "parameters": [
          {
            "name": "convId",
            "in": "path",
            "description": "The identifier of the conversation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The identifier of the message",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed and the message is unarchived"
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "404": {
            "description": "Successfully processed but the conversation or message is not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/push/sms": {
      "post": {
        "tags": [
          "push"
        ],
        "summary": "Sends a message",
        "description": "This will send an SMS. If you worry about your consumption, we invite you to read the following article \"<a href='https://www.ringover.com/en/support/sms/sms-understand-and-control-your-consumption'>SMS: understand and control your consumption</a>\". Phone numbers must be in E.164 format.",
        "requestBody": {
          "description": "Purpose object that needs to be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_push_sms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successfully processed and the SMS is sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response_push_sms"
                }
              }
            }
          },
          "400": {
            "description": "The request contains errors"
          },
          "401": {
            "description": "You are unauthorized to process this request"
          },
          "402": {
            "description": "Payment required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Get all profiles",
        "description": "Retrieve all your team's profiles",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile_list"
                }
              }
            }
          },
          "204": {
            "description": "Profile list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/profiles/{profileId}": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Get profile",
        "description": "Retrieve the profile associated with the <em>profile_id</em> in the route",
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "The identifier of the profile",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/presences": {
      "get": {
        "tags": [
          "presences"
        ],
        "summary": "Get all presences",
        "description": "Retrieve presences information about all your users",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users_presences"
                }
              }
            }
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blacklists/numbers": {
      "get": {
        "tags": [
          "blacklist"
        ],
        "summary": "Get team's blacklist",
        "description": "Retrieve the phone numbers blacklisted by your team",
        "parameters": [
          {
            "name": "limit_count",
            "in": "query",
            "description": "The number of results (default: 100).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit_offset",
            "in": "query",
            "description": "The offset (default: 0).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blacklist_list"
                }
              }
            }
          },
          "204": {
            "description": "Blacklist list empty"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "blacklist"
        ],
        "summary": "Add a number to your team's blacklist",
        "description": "Add a number to your team's blacklist, with or without comment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_new_blacklist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blacklists/numbers/{phoneNumber}": {
      "get": {
        "tags": [
          "blacklist"
        ],
        "summary": "Check if a number is blacklisted",
        "description": "Check if a number is blacklisted, a 200 HTTP Code response mean the number is blacklisted, a 404 HTTP response mean that the number isn't in the blacklist.",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blacklist"
                }
              }
            }
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Phone number not blacklisted"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "blacklist"
        ],
        "summary": "Remove a team blacklisted number",
        "description": "Remove a number from your team's blacklist.",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blacklists/numbers/{phoneNumber}/comment/{newComment}": {
      "patch": {
        "tags": [
          "blacklist"
        ],
        "summary": "Update the comment of a team's blacklisted number",
        "description": "Update the comment of a team's blacklisted number",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          },
          {
            "name": "newComment",
            "in": "path",
            "description": "New comment",
            "required": true,
            "schema": {
              "type": "string",
              "example": "new_comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Phone number not blacklisted."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/blacklists/numbers": {
      "get": {
        "tags": [
          "blacklist"
        ],
        "summary": "Get user's blacklist",
        "description": "Retrieve the phone numbers blacklisted by the user in parameter.",
        "parameters": [
          {
            "name": "limit_count",
            "in": "query",
            "description": "The number of results (default: 100).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit_offset",
            "in": "query",
            "description": "The offset (default: 0).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blacklist_list"
                }
              }
            }
          },
          "204": {
            "description": "Blacklist list empty"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "blacklist"
        ],
        "summary": "Add a number to a user's blacklist",
        "description": "Add a number to a user's blacklist, with or without comment.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_new_blacklist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/blacklists/numbers/{phoneNumber}": {
      "get": {
        "tags": [
          "blacklist"
        ],
        "summary": "Check if a specific phone number is present in the blacklist of a specific user.",
        "description": "Check if a number is blacklisted, a 200 HTTP Code response mean the number is blacklisted, a 404 HTTP response mean that the number isn't in the user's blacklist.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blacklist"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Phone number blacklisted"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "blacklist"
        ],
        "summary": "Remove a user blacklisted number",
        "description": "Remove a number from your user's blacklist.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/blacklists/numbers/{phoneNumber}/comment/{newComment}": {
      "patch": {
        "tags": [
          "blacklist"
        ],
        "summary": "Update the comment of a user's blacklisted number",
        "description": "Update the comment of a user's blacklisted number",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123456
            }
          },
          {
            "name": "phoneNumber",
            "in": "path",
            "description": "The phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 33612345678
            }
          },
          {
            "name": "newComment",
            "in": "path",
            "description": "The new comment",
            "required": true,
            "schema": {
              "type": "string",
              "example": "new_comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Phone number blacklisted"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/callback": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "summary": "Callback",
        "description": "Only included in the Power pack. This API route is used to trigger a call between one of your users and a recipient. The <em>from_number</em> attributed is the phone number of your user while <em>to_number</em> is the number called by the user. Here is the call workflow: \n 1. Your user (<em>from_number</em>) receives a call from the recipient's number (<em>to_number</em>).\n 2. Your user picks up the phone \n > A call is automatically made to the recipient (<em>to_number</em>).",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_callback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/ivrs/{ivrId}/callback": {
      "post": {
        "tags": [
          "callbacks",
          "ivrs"
        ],
        "summary": "IVR Callback",
        "description": "Only included in the Power pack. This API route is used to trigger a call in specific IVR queue",
        "parameters": [
          {
            "name": "ivrId",
            "in": "path",
            "description": "The ivr identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_ivr_callback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Token unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/snoozes": {
      "get": {
        "tags": [
          "snoozes"
        ],
        "summary": "Get all snooze labels",
        "description": "This request allows you to get the list of snooze labels in several languages if applicable.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snooze_label"
                }
              }
            }
          },
          "401": {
            "description": "Token unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "x-webhooks": {
    "ivr_response_code": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "IVR response event",
        "operationId": "webhookIVR",
        "description": "This event is triggered when a customer answers a response code from an IVR scenario: \n1. Ringover sends you information about an event.\n2. You send an HTTP code according to this information (for instance, 200 if it is a successful operation).\n3. An IVR with an \"Ask for a code\" scenario can be created with various HTTP codes and according to the code you return, an event is triggered (recording, redirection, etc.).\n\n> Warning: Announcements must be set in the IVR in order for this webhook to be operational.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_ivr_response_code"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "message": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Message event",
        "operationId": "webhookMessage",
        "description": "This event is triggered when a message is sent and/or received (according to your settings on the myringover dashboard). The data object contained in the sent object will give you information such as the sending number, the receiving number, the content of the message, the time it was sent etc...",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "smart_routing": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Smart routing event",
        "operationID": "SmartRouting",
        "description": "The Smart routing webhook event is a little more tricky because the webhook requires a response from you within two seconds. When the webhook lands on your <em>endpoint</em>, your endpoint must communicate the response object below.  We advise you to consult the description of each attribute, which are all mandatory. This event can apply to an IVR.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_smart_routing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_response_smart_routing"
                }
              }
            }
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "contact": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Contact event",
        "description": "Webhook sent on each call (incoming and outgoing), it will allow you to transmit notes to the agent. The notes are located next to the contact's photo, in the information bubble of the call window. You can set custom information in the data object (refer to the object below).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_response_contact"
                }
              }
            }
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "contact_search": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Contact Search event",
        "operationId": "contactSearchEvent",
        "description": "The webhook is triggered during a search on myringover (in the smartdialer, on contacts tabs, ...). In order to get from your API the contact's informations and numbers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_contactsearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_response_contactsearch"
                }
              }
            }
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_ringing": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Call ringing event",
        "description": "Incoming call webhook, triggered when you receive a call. You will retrieve all the call's information and if it's to a voice server, you'll also have the information related to it in the object <em>ivr_data</em>.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_ringing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_answered": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Call answered event",
        "description": "Incoming call webhook, triggered when you answer a call",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_answered"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_hangup": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Call hangup event",
        "description": "Terminated call webhook, when you hang up a call",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_hangup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_missed": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Call missed event",
        "description": "This webhook is triggered when an incoming call is missed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_missed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_voicemail": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Call voicemail event",
        "description": "This webhook is triggered when you get a new voicemail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_voicemail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_comments_updated": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Comment updated event",
        "description": "This webhook is triggered when a comment is updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_comments_updated"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_tags_updated": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Tag updated event",
        "description": "This webhook is triggered when a tag is updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_tags_updated"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_record_available": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Record available event",
        "description": "This webhook is triggered when a record is available",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_record_available"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    },
    "call_voicemail_available": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Voicemail available event",
        "description": "This webhook is triggered when a voicemail is available",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_request_call_voicemail_available"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "default": {
            "description": "Other response code are ignored"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "description": "We use API keys for authentication to authorize API requests. First, you need to create a public access token (API key) and select the appropriate rights for each user. To do so:\n  1. Open the Ringover Dashboard.\n  2. Go to the **Developer** section.\n  3. Click the **Create an API key** button.\n  4. Select a user in the drop-down menu and enter a label for the key and click the **Create** button.\n  5. Click the **Edit** button corresponding to the API key and select the appropriate rights.\n\nOnce you've created a public access token, you can use it in the 'Authorization' header to authenticate your HTTP request.\n",
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "team": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the object",
            "example": 123456
          },
          "name": {
            "type": "string",
            "description": "The name of your team",
            "example": "My Company"
          },
          "total_numbers_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of numbers array",
            "example": 1
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number"
            }
          },
          "total_users_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of users array",
            "example": 1
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_full"
            }
          },
          "total_ivrs_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of ivrs array",
            "example": 1
          },
          "ivrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ivr"
            }
          },
          "total_conferences_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of conferences array",
            "example": 1
          },
          "conferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/conference"
            }
          },
          "total_tags_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of tags array",
            "example": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            }
          },
          "total_groups_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of groups array",
            "example": 1
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group_light"
            }
          }
        }
      },
      "number": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The phone number",
            "example": "33184800000"
          },
          "label": {
            "type": "string",
            "description": "The label of the number",
            "example": "myfavoritenumber"
          },
          "type": {
            "type": "string",
            "enumeration": [
              "FAX",
              "PHONE",
              "STANDARD",
              "MOBILE",
              "SVA",
              "CONFERENCE"
            ],
            "description": "The type of the number",
            "example": "PHONE"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user identifier",
            "example": 60907
          },
          "ivr_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ivr identifier",
            "example": 60908
          },
          "conference_id": {
            "type": "integer",
            "format": "int64",
            "description": "The conference identifier",
            "example": 60908
          },
          "is_sms": {
            "type": "boolean",
            "example": false
          },
          "is_sms_write": {
            "type": "boolean",
            "example": false
          },
          "is_callable": {
            "type": "boolean",
            "example": false
          },
          "format": {
            "$ref": "#/components/schemas/format_number"
          }
        }
      },
      "user_light": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user identifier",
            "example": 123456
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "The team identifier of the user",
            "example": 123456
          },
          "initial": {
            "type": "string",
            "description": "The initials of the user",
            "example": "PM"
          },
          "color": {
            "type": "string",
            "example": "3CC8C8"
          },
          "firstname": {
            "type": "string",
            "description": "The firstname of the user",
            "example": "Pauline"
          },
          "lastname": {
            "type": "string",
            "description": "The lastname of the user",
            "example": "Martin"
          },
          "company": {
            "type": "string",
            "description": "The company of the user",
            "example": "Ringover"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "pauline.martin@ringover.com"
          },
          "picture": {
            "type": "string",
            "description": "The picture of the user",
            "example": "https://cdn77.ringover.com/img/users/default.jpg"
          },
          "concat_name": {
            "type": "string",
            "example": "Pauline Martin"
          }
        }
      },
      "user_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user_light"
          },
          {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/number"
                },
                "description": "The numbers of the user"
              }
            }
          }
        ]
      },
      "webhook_ivr_v2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ivr",
            "example": "StandardFacile"
          },
          "number": {
            "type": "string",
            "description": "The number of the ivr",
            "example": 33677887788
          },
          "scenario": {
            "type": "object",
            "properties": {
              "scenario_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "ivr_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "name": {
                "type": "string",
                "example": "MonSuperScenario"
              },
              "scenario_type": {
                "type": "string",
                "example": "voicemail"
              }
            }
          }
        }
      },
      "ivr": {
        "type": "object",
        "properties": {
          "ivr_id": {
            "type": "string",
            "description": "The identifier of the ivr",
            "example": 123456
          },
          "name": {
            "type": "string",
            "description": "The name of the ivr",
            "example": "StandardFacile"
          },
          "color": {
            "type": "string",
            "enum": [
              "ff6b6b",
              "F06292",
              "BA68C8",
              "9575CD",
              "7986CB",
              "64B5F6",
              "4FC3F7",
              "4DD0E1",
              "4DB6AC",
              "81C784",
              "AED581",
              "DCE775",
              "FFD54F",
              "FFB74D",
              "FF8A65",
              "A1887F",
              "E0E0E0",
              "90A4AE"
            ],
            "example": "ff6b6b"
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number"
            },
            "description": "The numbers of the ivr"
          },
          "scenario": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scenario",
              "description": "The scenatios of the ivr"
            }
          }
        }
      },
      "ivr_without_scenario": {
        "type": "object",
        "properties": {
          "ivr_id": {
            "type": "string",
            "description": "The identifier if the ivr",
            "example": 123456
          },
          "color": {
            "type": "string",
            "enum": [
              "ff6b6b",
              "F06292",
              "BA68C8",
              "9575CD",
              "7986CB",
              "64B5F6",
              "4FC3F7",
              "4DD0E1",
              "4DB6AC",
              "81C784",
              "AED581",
              "DCE775",
              "FFD54F",
              "FFB74D",
              "FF8A65",
              "A1887F",
              "E0E0E0",
              "90A4AE"
            ],
            "example": "ff6b6b"
          },
          "name": {
            "type": "string",
            "description": "The name of the ivr",
            "example": "StandardFacile"
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number"
            },
            "description": "The numbers of the ivr"
          }
        }
      },
      "ivr_light": {
        "type": "object",
        "properties": {
          "ivr_id": {
            "type": "string",
            "description": "The identifier if the ivr",
            "example": 123456
          },
          "name": {
            "type": "string",
            "description": "The name of the ivr",
            "example": "StandardFacile"
          }
        }
      },
      "conference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier of the conference",
            "example": 123456
          },
          "name": {
            "type": "string",
            "description": "The name of the conference",
            "example": "SoConference"
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number"
            },
            "description": "The numbers of the conference"
          }
        }
      },
      "tag": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the tag",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "The name of the tag",
            "example": "mytag"
          },
          "color": {
            "type": "string",
            "enum": [
              "ff6b6b",
              "F06292",
              "BA68C8",
              "9575CD",
              "7986CB",
              "64B5F6",
              "4FC3F7",
              "4DD0E1",
              "4DB6AC",
              "81C784",
              "AED581",
              "DCE775",
              "FFD54F",
              "FFB74D",
              "FF8A65",
              "A1887F",
              "E0E0E0",
              "90A4AE"
            ],
            "example": "ff6b6b"
          },
          "description": {
            "type": "string",
            "description": "The description of the tag",
            "example": "my tag description"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          }
        }
      },
      "group_user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user_light"
          },
          {
            "type": "object",
            "properties": {
              "ring_duration": {
                "type": "integer",
                "format": "int64",
                "description": "Ring duration when an IVR incoming call append",
                "example": 0
              },
              "order": {
                "type": "integer",
                "format": "int64",
                "description": "The order in the ivr queue",
                "example": 0
              }
            }
          }
        ]
      },
      "group_light": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the group",
            "example": 999999
          },
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "myIVR"
          },
          "total_users_count": {
            "type": "integer",
            "format": "int64",
            "description": "The number of users in the group",
            "example": 0
          },
          "color": {
            "type": "string",
            "example": "FFD54F"
          },
          "is_jumper": {
            "type": "boolean",
            "description": "Allow users to jump into",
            "example": false
          }
        }
      },
      "group_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/group_light"
          },
          {
            "type": "object",
            "properties": {
              "users": {
                "nullable": true,
                "type": "array",
                "description": "The list of campaign sms",
                "items": {
                  "$ref": "#/components/schemas/group_user"
                }
              }
            }
          }
        ]
      },
      "format_number": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "integer",
            "format": "int64",
            "example": 184800000
          },
          "country_code": {
            "type": "string",
            "example": "33"
          },
          "country": {
            "type": "string",
            "example": "FR"
          },
          "e164": {
            "type": "string",
            "example": "+33184800000"
          },
          "international": {
            "type": "string",
            "example": "+33 1 84 80 00 00"
          },
          "international_alt": {
            "type": "string",
            "example": "33184800000"
          },
          "national": {
            "type": "string",
            "example": "01 84 80 00 00"
          },
          "national_alt": {
            "type": "string",
            "example": "0184800000"
          },
          "rfc3966": {
            "type": "string",
            "example": "tel:+33-1-84-80-00-00"
          }
        }
      },
      "scenario": {
        "type": "object",
        "properties": {
          "scenario_id": {
            "type": "integer",
            "format": "int64",
            "description": "The scenario identifier",
            "example": 123456
          },
          "ivr_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ivr identifier",
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "The name of the scenario",
            "example": "myscenario"
          },
          "color": {
            "type": "string",
            "example": "123456"
          },
          "scenario_type": {
            "type": "string",
            "enum": [
              "menu",
              "announce",
              "queue",
              "sms",
              "webhook",
              "input"
            ],
            "description": "The type of the scenario",
            "example": "menu"
          },
          "is_default": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "group_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group_light"
            }
          }
        }
      },
      "add_user_group": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the user"
          }
        }
      },
      "user_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_full"
            }
          }
        }
      },
      "new_user": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "myemail@domain.com"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "Phone number (E.164 format)",
            "example": 33179750000
          },
          "commitment": {
            "description": "with or without commitment",
            "type": "boolean",
            "example": false
          }
        }
      },
      "user_plannings": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user's team id",
            "example": 123456
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user's id",
            "example": 123456
          },
          "tz_identifier": {
            "type": "string",
            "description": "The user's timezone",
            "example": "Europe/Paris"
          },
          "tz_now": {
            "type": "string",
            "description": "Current timestamp of the user's timezone",
            "example": "2020-04-08T10:34:28+02:00"
          },
          "planning_enable": {
            "type": "boolean",
            "description": "True if the user have the planning option activated on myringover",
            "example": true
          },
          "is_planning": {
            "type": "boolean",
            "description": "True if the user is currently in his planning schedule",
            "example": true
          },
          "is_snooze": {
            "type": "boolean",
            "description": "True if the user is currently in snooze",
            "example": false
          },
          "time_ranges": {
            "type": "array",
            "description": "Array of all the user's schedules. time_ranges is null if planning_enable is equal to false",
            "items": {
              "$ref": "#/components/schemas/time_ranges"
            }
          }
        }
      },
      "time_ranges": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "format": "int64",
            "description": "Day of the week (0 => Monday, 6 => Sunday)",
            "example": 0
          },
          "start": {
            "type": "integer",
            "format": "int64",
            "description": "Start time in minutes (0 => 0:00)",
            "example": 0
          },
          "end": {
            "type": "integer",
            "format": "int64",
            "description": "End time in minutes (1440 => 24:00)",
            "example": 1440
          }
        }
      },
      "user_presences": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user's team id",
            "example": 123456
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The user's id",
            "example": 123456
          },
          "in_call": {
            "type": "integer",
            "format": "int64",
            "description": "Number of current calls (it can be more than 1)",
            "example": 1
          },
          "connected_devices": {
            "type": "integer",
            "format": "int64",
            "description": "Number of devices connected to myringover",
            "example": 3
          },
          "planning_enable": {
            "type": "boolean",
            "description": "True if the user have the planning option activated on myringover",
            "example": true
          },
          "is_planning": {
            "type": "boolean",
            "description": "True if the user is currently in his planning schedule",
            "example": true
          },
          "is_planned_snooze": {
            "type": "boolean",
            "description": "False if the user is currently in his planning schedule",
            "example": false
          },
          "is_snooze": {
            "type": "boolean",
            "description": "True if the user is currently in snooze",
            "example": true
          },
          "snooze_type": {
            "type": "string",
            "description": "The type of snooze currently used. Null if is_snooze is false",
            "example": "meeting"
          }
        }
      },
      "number_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number"
            }
          }
        }
      },
      "ivr_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ivr_without_scenario"
            }
          }
        }
      },
      "surveys_list": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of survey answers retrieved",
            "format": "int64",
            "example": 1
          },
          "survey_list": {
            "type": "array",
            "description": "Array containing the different survey answers for the given call",
            "items": {
              "$ref": "#/components/schemas/survey"
            }
          }
        }
      },
      "survey": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "name": {
            "type": "string",
            "example": "toto"
          },
          "value": {
            "type": "string",
            "example": "yes"
          }
        }
      },
      "scenario_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scenario"
            }
          }
        }
      },
      "tag_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            }
          }
        }
      },
      "conference_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the list",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/conference"
            }
          }
        }
      },
      "calls_list": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the user",
            "example": 123456
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the team",
            "example": 654321
          },
          "limit_count_setted": {
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "maximum": 1000,
            "example": 100
          },
          "limit_offset_setted": {
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "last_id_offset_setted": {
            "description": "The request will return <b>cdr_id</b> (call logs) prior to this one",
            "type": "integer",
            "format": "int64",
            "example": 19479170
          },
          "ascending_order": {
            "description": "The order of call logs",
            "type": "boolean"
          },
          "filter": {
            "description": "The used filter",
            "type": "string"
          },
          "call_list_count": {
            "type": "integer",
            "description": "The size of the array <em>list</em>, corresponds to the number of logs retrieved",
            "format": "int64",
            "example": 1
          },
          "call_list": {
            "type": "array",
            "description": "Array containing the different logs generated by the call (for example in case of transfer)",
            "items": {
              "$ref": "#/components/schemas/call"
            }
          },
          "total_call_count": {
            "type": "integer",
            "description": "The total number of calls",
            "format": "int64",
            "example": 1337
          }
        }
      },
      "call": {
        "type": "object",
        "properties": {
          "cdr_id": {
            "type": "integer",
            "format": "int64",
            "example": 19479175
          },
          "call_id": {
            "type": "string",
            "example": "9058220947198957713"
          },
          "type": {
            "type": "string",
            "example": "PHONE"
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "example": "in"
          },
          "last_state": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "ANSWERED",
              "MISSED",
              "FAILED",
              "QUEUE_TIMEOUT",
              "BLIND_TRANSFERED",
              "VOICEMAIL",
              "PERMANENT_TRANSFERED",
              "NOANSWER_TRANSFERED",
              "FAX_RECEIVED",
              "FAX_FAILED",
              "FAX_OUT_SENT",
              "INCORRECT_PINCODE",
              "FAX_OUT_NOT_SENT",
              "ANNOUNCE"
            ],
            "example": "VOICEMAIL",
            "description": "The enum regroups some samples"
          },
          "start_time": {
            "type": "string",
            "example": "2017-04-13T15:27:36+02:00"
          },
          "answered_time": {
            "type": "string",
            "example": "2017-04-13T15:27:46+02:00"
          },
          "end_time": {
            "type": "string",
            "example": "2017-04-13T15:27:56+02:00"
          },
          "incall_duration": {
            "type": "string",
            "example": "10"
          },
          "total_duration": {
            "type": "string",
            "example": "20"
          },
          "from_number": {
            "type": "string",
            "example": "33600000000"
          },
          "to_number": {
            "type": "string",
            "example": "33184800000"
          },
          "note": {
            "type": "string",
            "example": "Potential client"
          },
          "star": {
            "type": "integer",
            "format": "uint8",
            "example": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            }
          },
          "voicemail": {
            "type": "string"
          },
          "record": {
            "type": "string",
            "example": "https://cdn.ringover.com/records/0-0/35537d8679f3e2-13-04-19-15h27-33600000000-33180800000.mp3"
          },
          "fax": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/user_light"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "conference": {
            "$ref": "#/components/schemas/conference"
          },
          "ivr": {
            "$ref": "#/components/schemas/ivr_light"
          }
        }
      },
      "contact": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64",
            "example": 184800000
          },
          "contact_id": {
            "type": "integer",
            "format": "int64",
            "example": 654321
          },
          "initial": {
            "type": "string",
            "example": "JD"
          },
          "color": {
            "type": "string",
            "example": "3CC8C8"
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Do"
          },
          "company": {
            "type": "string",
            "example": "DoeCompany"
          },
          "concat_name": {
            "type": "string",
            "example": "John Doe"
          },
          "social_service": {
            "type": "string",
            "example": null
          },
          "social_service_url": {
            "type": "string",
            "example": null
          }
        }
      },
      "calls_filter": {
        "type": "object",
        "properties": {
          "filter": {
            "nullable": true,
            "type": "string",
            "description": "'ALL' filter displays all calls. 'DIRECT' filter does not display any IVR calls. 'IVR' filter displays all IVR calls. 'ADVANCED' filter allows you to define advanced filters.",
            "enum": [
              "ALL",
              "DIRECT",
              "IVR",
              "ADVANCED"
            ],
            "example": "ADVANCED"
          },
          "start_date": {
            "nullable": true,
            "description": "Used to create a time cursor. Must be used with end_date.",
            "type": "string",
            "format": "date",
            "example": "2020-06-27T00:00:00.53Z"
          },
          "end_date": {
            "nullable": true,
            "description": "Used to create a time cursor. Must be used with start_date.",
            "type": "string",
            "format": "date",
            "example": "2020-06-27T00:00:00.53Z"
          },
          "call_type": {
            "nullable": true,
            "description": "Used to filter certain types of calls. 'ANSWERED' filters answered calls. 'MISSED' filters missed calls. 'OUT' filters outgoing calls. 'VOICEMAIL' filters calls ending on voicemail.",
            "type": "array",
            "example": [
              "OUT"
            ],
            "items": {
              "type": "string",
              "enum": [
                "ANSWERED",
                "MISSED",
                "OUT",
                "VOICEMAIL"
              ]
            }
          },
          "advanced": {
            "nullable": true,
            "description": "Only used with advanced filter. Offer the possibility of filtering for specific IVR(s) or Group(s)/User(s).",
            "type": "object",
            "properties": {
              "ivrs": {
                "nullable": true,
                "description": "Cannot be combined with group/user filters. Used to filter calls for specific IVR(s).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ivr_filter"
                }
              },
              "groups": {
                "description": "Cannot be combined with ivr filters. Used to filter calls for specific Group(s).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": [
                    123456
                  ]
                }
              },
              "users": {
                "description": "Cannot be combined with ivr filters. Used to filter calls for specific User(s).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": [
                    123456
                  ]
                }
              },
              "ext_numbers": {
                "description": "Used to filter external numbers (E164 without \\'+\\' format).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": [
                    33122334455,
                    33122334466
                  ]
                }
              },
              "int_numbers": {
                "description": "Used to filter internal numbers (E164 without \\'+\\' format).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": [
                    33122114455,
                    33122114466
                  ]
                }
              }
            }
          },
          "stars": {
            "description": "Used to filter stars ID",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "example": [
                123456
              ]
            }
          },
          "contacts": {
            "description": "Used to filter contacts ID",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "example": [
                123456
              ]
            }
          },
          "tags": {
            "description": "Used to filter tags ID",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "example": [
                123456
              ]
            }
          },
          "intra": {
            "description": "Show OR exclude intra-Ringover calls only",
            "nullable": true,
            "type": "boolean"
          },
          "out_planning": {
            "description": "Show OR exclude calls received outside of working hours",
            "nullable": true,
            "type": "boolean"
          },
          "no_digit": {
            "description": "Show OR exclude calls where no digit was pressed",
            "nullable": true,
            "type": "boolean"
          },
          "ringing": {
            "description": "Show OR exclude calls that did not ring to any user",
            "nullable": true,
            "type": "boolean"
          },
          "note": {
            "description": "Show OR exclude calls with note",
            "nullable": true,
            "type": "boolean"
          },
          "tag": {
            "description": "Show OR exclude calls with tag(s)",
            "nullable": true,
            "type": "boolean"
          },
          "short": {
            "description": "Required: 'exclude_short_value'. Show OR exclude the 'exclude_short_value' filter.",
            "nullable": true,
            "type": "boolean"
          },
          "long": {
            "description": "Required: 'exclude_long_value'. Show OR exclude the 'exclude_long_value' filter.",
            "nullable": true,
            "type": "boolean"
          },
          "amd": {
            "description": "Show OR exclude calls answered by a 'machine'",
            "nullable": true,
            "type": "boolean"
          },
          "exclude_short_value": {
            "description": "Used to filter calls lasting under X seconds",
            "nullable": true,
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "exclude_long_value": {
            "description": "Used to filter calls lasting over X seconds",
            "nullable": true,
            "type": "integer",
            "format": "int64",
            "example": 500
          },
          "limit_count": {
            "nullable": true,
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "maximum": 1000,
            "example": 100
          },
          "limit_offset": {
            "nullable": true,
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "last_id_returned": {
            "nullable": true,
            "description": "The request will return <b>cdr_id</b> (call logs) prior to this one",
            "type": "integer",
            "format": "int64",
            "example": 19479170
          }
        }
      },
      "ivr_filter": {
        "type": "object",
        "properties": {
          "ivr_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the ivr",
            "example": 19479175
          },
          "numbers": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "example": [
                331797500010
              ]
            }
          },
          "scenarios": {
            "nullable": true,
            "type": "array",
            "description": "The identifier of the scenario",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              19479175,
              19479176
            ]
          }
        }
      },
      "current_calls_filter": {
        "type": "object",
        "properties": {
          "call_status": {
            "nullable": true,
            "type": "array",
            "example": [
              "ANSWERED",
              "RINGING"
            ],
            "items": {
              "type": "string",
              "enum": [
                "ANSWERED",
                "RINGING"
              ]
            }
          },
          "interface": {
            "nullable": true,
            "type": "array",
            "example": [
              "SIP",
              "MOBILE"
            ],
            "items": {
              "type": "string",
              "enum": [
                "WEBRTC",
                "SIP",
                "MOBILE",
                "APP"
              ]
            }
          },
          "direction": {
            "nullable": true,
            "type": "string",
            "enum": [
              "IN",
              "OUT"
            ]
          },
          "advanced": {
            "nullable": true,
            "description": "Only used with advanced filter. Offer the possibility of filtering for specific IVR(s) or Group(s)/User(s).",
            "type": "object",
            "properties": {
              "ivrs": {
                "nullable": true,
                "description": "Cannot be combined with groups/user filters. Used to filter calls for specific IVR(s).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ivr_filter"
                }
              },
              "groups": {
                "description": "Cannot be combined with ivr filters. Used to filter calls for specific Group(s).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": null
              },
              "users": {
                "description": "Cannot be combined with ivrs filters. Used to filter calls for specific User(s).",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": null
              }
            }
          },
          "limit_count": {
            "nullable": true,
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "maximum": 1000,
            "example": 1
          },
          "limit_offset": {
            "nullable": true,
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        }
      },
      "current_calls_list": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the user",
            "example": 123456
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the team",
            "example": 654321
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 19479170
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_current_calls_count": {
            "type": "integer",
            "format": "int64",
            "example": 54783
          },
          "current_calls_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "current_calls_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/current_call"
            }
          }
        }
      },
      "current_call": {
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string",
            "description": "The identifier of the call",
            "example": 9058220947198958000
          },
          "type": {
            "type": "string",
            "description": "The type of the call",
            "example": "USER_CALL"
          },
          "direction": {
            "type": "string",
            "enum": [
              "IN",
              "OUT"
            ],
            "example": "IN"
          },
          "user_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The identifier of the user",
            "example": 123456
          },
          "ivr_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The identifier of the ivr",
            "example": 234567
          },
          "from_number": {
            "type": "string",
            "description": "Unknown displays when someone uses a masked number.",
            "example": "Unknown"
          },
          "to_number": {
            "type": "string",
            "example": "33123456789"
          },
          "interface": {
            "nullable": true,
            "type": "string",
            "enum": [
              "WEBRTC",
              "SIP",
              "MOBILE",
              "APP"
            ],
            "example": "APP"
          },
          "status": {
            "nullable": true,
            "type": "string",
            "enum": [
              "ANSWERED",
              "RINGING"
            ],
            "example": "ANSWERED"
          },
          "recording": {
            "type": "boolean",
            "example": false
          },
          "mute": {
            "type": "boolean",
            "example": false
          },
          "hold": {
            "type": "boolean",
            "example": false
          },
          "channel_id": {
            "type": "string",
            "description": "UUID",
            "example": "d24da4f1-b267-4bb7-aea8-7f92296abe09"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          }
        }
      },
      "event_transfer": {
        "type": "object",
        "properties": {
          "phone_number": {
            "nullable": false,
            "type": "integer",
            "format": "int64",
            "example": 33123456789
          }
        }
      },
      "event_dtmf": {
        "type": "object",
        "properties": {
          "dtmf": {
            "nullable": false,
            "description": "possible value [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \\#, *]",
            "type": "string",
            "example": "0"
          }
        }
      },
      "number_light": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "example": 33184800000
          },
          "type": {
            "type": "string",
            "example": "PHONE"
          }
        }
      },
      "contact_filter": {
        "type": "object",
        "properties": {
          "pagination": {
            "nullable": true,
            "description": "The character sequence assigned to pages in address book. Possible values are: 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#' for any digit and '.' for any other characters. An empty value disables pagination.",
            "type": "string",
            "example": "a"
          },
          "alphabetical_order": {
            "description": "Alphabetical order impacts the pagination value. Possible values are : FirstnameLastnameCompanyDESC, FirstnameLastnameCompanyASC, LastnameFirstnameCompanyDESC, LastnameFirstnameCompanyASC, CompanyFirstnameLastnameDESC, CompanyFirstnameLastnameASC ,CompanyLastnameFirstnameDESC, CompanyLastnameFirstnameASC",
            "nullable": true,
            "type": "string",
            "example": "LastnameFirstnameCompanyASC"
          },
          "search": {
            "nullable": true,
            "description": "The keyword is used to search a specific contact. Index is based on firstname, lastname, company and phone number(s).",
            "type": "string",
            "example": "Pierre De Test"
          },
          "limit_count": {
            "nullable": true,
            "description": "Used to create a pagination cursor",
            "type": "integer",
            "format": "int64",
            "maximum": 1000,
            "example": 10
          },
          "limit_offset": {
            "nullable": true,
            "description": "The request will not return <b>user_id</b> (call logs) prior to this one",
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        }
      },
      "new_contact_request": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/new_contact"
            },
            "maxItems": 50
          }
        }
      },
      "new_contact": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "company": {
            "type": "string",
            "example": "DoeCompany"
          },
          "is_shared": {
            "type": "boolean",
            "example": false
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/new_number_contact"
            }
          }
        }
      },
      "new_number_contact": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "Phone number (E.164 format)",
            "example": 33184800000
          },
          "type": {
            "type": "string",
            "enum": [
              "home",
              "office",
              "mobile",
              "fax",
              "other"
            ],
            "example": "mobile"
          }
        }
      },
      "new_contact_response": {
        "type": "array",
        "example": [
          123456
        ],
        "items": {
          "type": "integer",
          "format": "int64"
        }
      },
      "number_contact_list": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/new_number_contact"
        }
      },
      "contact_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 123456
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "total_contact_count": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "contact_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contact_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/contact_full"
            }
          }
        }
      },
      "contact_full": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer",
            "format": "int64",
            "example": 654321
          },
          "is_shared": {
            "type": "boolean",
            "example": true
          },
          "im_owner": {
            "type": "boolean",
            "example": true
          },
          "social_service": {
            "nullable": true,
            "type": "string",
            "example": null
          },
          "social_service_url": {
            "nullable": true,
            "type": "string",
            "example": null
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "company": {
            "type": "string",
            "example": "DoeCompany"
          },
          "concat_name": {
            "type": "string",
            "example": "John Doe"
          },
          "color": {
            "type": "string",
            "example": "3CC8C8"
          },
          "initial": {
            "type": "string",
            "example": "JD"
          },
          "profile_picture": {
            "type": "string",
            "example": "default.jpg"
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/number_light_with_format"
            }
          }
        }
      },
      "number_light_with_format": {
        "allOf": [
          {
            "$ref": "#/components/schemas/number_light"
          },
          {
            "type": "object",
            "properties": {
              "format": {
                "$ref": "#/components/schemas/format_number"
              }
            }
          }
        ]
      },
      "conversation_list": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123456
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 654321
          },
          "filter": {
            "type": "string",
            "enum": [
              "ALL",
              "INTERNAL",
              "EXTERNAL",
              "COLLABORATIVE"
            ],
            "example": "ALL"
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_conversation_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "conversation_list": {
            "nullable": true,
            "type": "array",
            "description": "The list of conversations",
            "items": {
              "$ref": "#/components/schemas/conversation_light"
            }
          },
          "conversation_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "conversation_light": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "integer",
            "format": "int64",
            "example": 222111
          },
          "is_sms_write": {
            "type": "boolean",
            "example": false,
            "description": "Allows to send SMS"
          },
          "type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "COLLABORATIVE"
            ],
            "example": "INTERNAL"
          },
          "name": {
            "type": "string",
            "example": "My favorite conversation"
          },
          "purpose": {
            "type": "string",
            "example": "Description of my favorite conversation"
          },
          "sources": {
            "nullable": true,
            "type": "array",
            "description": "Legacy field in future release",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "targets": {
            "nullable": true,
            "type": "array",
            "description": "Legacy field in future release",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "internal": {
            "nullable": true,
            "type": "array",
            "description": "Store internal conversation members",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "external": {
            "nullable": true,
            "type": "array",
            "description": "Store external conversation members",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "unread_messages_count": {
            "type": "integer",
            "format": "int64"
          },
          "last_message": {
            "$ref": "#/components/schemas/message"
          },
          "total_messages_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "is_archived": {
            "type": "boolean",
            "example": false,
            "description": "Achive flag"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-06-12T23:23:40.99Z"
          },
          "update_date": {
            "type": "string",
            "format": "date",
            "example": "2019-02-12T12:20:50.52Z"
          }
        }
      },
      "member": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/member_ringover"
          },
          "ivr": {
            "$ref": "#/components/schemas/member_ivr"
          },
          "group": {
            "$ref": "#/components/schemas/group_light"
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123456
          },
          "alphanumeric": {
            "nullable": true,
            "type": "string",
            "example": null
          },
          "number": {
            "$ref": "#/components/schemas/format_number"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "picture": {
            "nullable": true,
            "type": "string",
            "example": "https://my.image.com/default.jpg"
          }
        }
      },
      "member_ringover": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 654321
          },
          "initial": {
            "type": "string",
            "example": "JD"
          },
          "color": {
            "type": "string",
            "example": "3CC8C8"
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "company": {
            "type": "string",
            "example": "MyCompany"
          },
          "concat_name": {
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "member_ivr": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 657657
          },
          "name": {
            "type": "string",
            "example": "MyIVR"
          },
          "scenario_id": {
            "type": "integer",
            "format": "int64",
            "example": 777777
          },
          "color": {
            "type": "string",
            "example": "FFD54F"
          }
        }
      },
      "message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 11223344
          },
          "user": {
            "$ref": "#/components/schemas/user_light"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "buffer": {
            "type": "string",
            "example": "Hello World"
          },
          "is_failed": {
            "type": "boolean",
            "example": false
          },
          "direction": {
            "nullable": true,
            "type": "string",
            "enum": [
              "IN",
              "OUT"
            ],
            "example": null
          },
          "is_archived": {
            "type": "boolean",
            "example": false
          },
          "archive_date": {
            "type": "string",
            "format": "date",
            "example": "2019-03-11T12:20:50.52Z"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-12-21T12:20:50.52Z"
          }
        }
      },
      "body_purpose": {
        "type": "object",
        "properties": {
          "purpose": {
            "type": "string",
            "example": "Description of my favorite conversation"
          }
        }
      },
      "member_list": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "integer",
            "format": "int64",
            "example": 222111
          },
          "list_member": {
            "nullable": true,
            "type": "array",
            "description": "This field is used when the flag marged is turn on",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "list_member_count": {
            "nullable": true,
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "list_internal_member": {
            "nullable": true,
            "type": "array",
            "description": "This field is used when the flag marged is turn off",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "list_internal_member_count": {
            "nullable": true,
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "list_external_member": {
            "nullable": true,
            "type": "array",
            "description": "This field is used when the flag marged is turn off",
            "items": {
              "$ref": "#/components/schemas/member"
            }
          },
          "list_external_member_count": {
            "nullable": true,
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "is_empty": {
            "type": "boolean",
            "example": false,
            "description": "Empty flag"
          }
        }
      },
      "conversation_message_list": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "integer",
            "format": "int64",
            "example": 222111
          },
          "is_sms_write": {
            "type": "boolean",
            "example": false,
            "description": "Allows to send SMS"
          },
          "type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "COLLABORATIVE"
            ],
            "example": "INTERNAL"
          },
          "name": {
            "type": "string",
            "example": "My favorite conversation"
          },
          "purpose": {
            "type": "string",
            "example": "Description of my favorite conversation"
          },
          "unread_messages_count": {
            "type": "integer",
            "format": "int64"
          },
          "last_id_returned_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_messages_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "message_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 54
          },
          "message_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/message"
            }
          },
          "is_archived": {
            "type": "boolean",
            "example": false,
            "description": "Achive flag"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-06-12T23:23:40.99Z"
          },
          "update_date": {
            "type": "string",
            "format": "date",
            "example": "2019-02-12T12:20:50.52Z"
          }
        }
      },
      "body_push_sms": {
        "type": "object",
        "properties": {
          "archived_auto": {
            "nullable": true,
            "type": "boolean",
            "example": false
          },
          "from_number": {
            "type": "string",
            "description": "International number format (E.164)",
            "example": "+33744332211"
          },
          "to_number": {
            "type": "string",
            "description": "International number format (E.164)",
            "example": "+33611223344"
          },
          "content": {
            "type": "string",
            "example": "Hello World!"
          }
        }
      },
      "response_push_sms": {
        "type": "object",
        "properties": {
          "message_id": {
            "type": "integer",
            "format": "int64",
            "example": 1234567
          },
          "conv_id": {
            "type": "integer",
            "format": "int64",
            "example": 23456
          }
        }
      },
      "profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "name": {
            "type": "string",
            "example": "MyProfile"
          }
        }
      },
      "profile_list": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the array <em>list</em>, corresponds to the number of profiles retrieved",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile"
            }
          }
        }
      },
      "users_presences": {
        "type": "object",
        "properties": {
          "list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the array <em>list</em>, corresponds to the number of presences retrieved",
            "example": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_presences"
            }
          }
        }
      },
      "blacklist_list": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Your user identifier",
            "example": 123456
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "Your team identifier",
            "example": 123456
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "description": "The offset setted (default: 0).",
            "example": 1
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "description": "The number of results (default: 100).",
            "example": 10
          },
          "total_blacklist_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of blacklisted phone numbers",
            "example": 37
          },
          "blacklist_list_count": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the array <em>blacklist_list</em>, corresponds to the number of blacklisted phone numbers retrieved.",
            "example": 1
          },
          "blacklist_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/blacklist"
            }
          }
        }
      },
      "blacklist": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "description": "Your team identifier",
            "example": 123456
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "A blacklisted number",
            "example": 33184800000
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "The comment about this blacklisted number, can be null.",
            "example": "Unfriendly"
          }
        }
      },
      "request_new_blacklist": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "Phone number (E.164 format) (mandatory)",
            "example": 33184800000
          },
          "comment": {
            "type": "string",
            "description": "A comment about this blacklisted number",
            "example": null
          }
        }
      },
      "webhook_request_message": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "sent",
              "received"
            ]
          },
          "resource": {
            "type": "string",
            "example": "sms"
          },
          "timestamp": {
            "type": "number",
            "format": "double64"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "1234567-234567"
              },
              "message_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567
              },
              "conversation_id": {
                "type": "integer",
                "format": "uint64",
                "example": 234567
              },
              "time": {
                "type": "number",
                "format": "double64"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": 33601020304
              },
              "to_number": {
                "type": "string",
                "example": 33101020304
              },
              "body": {
                "type": "string",
                "example": "My SMS content..."
              },
              "is_internal": {
                "type": "boolean",
                "example": false
              },
              "is_collaborative": {
                "type": "boolean",
                "example": false
              },
              "user_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_request_smart_routing": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "routing"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": 33601020304
              },
              "to_number": {
                "type": "string",
                "example": 33101020304
              }
            }
          }
        }
      },
      "webhook_response_smart_routing": {
        "type": "object",
        "required": [
          "name",
          "dispatch",
          "start_delay",
          "is_stay_not_connected",
          "is_stay_in_call",
          "is_stay_planned_snoozed",
          "is_stay_snoozed",
          "max_attempts",
          "ring_overlap",
          "agents"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "redirections"
          },
          "dispatch": {
            "type": "string",
            "description": "The method of dispatch used.",
            "enum": [
              "random",
              "topdown",
              "ringall",
              "history"
            ],
            "example": "ringall"
          },
          "max_attempts": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times the agent loop will be executed.",
            "example": 1,
            "minimum": 0,
            "maximum": 10
          },
          "start_delay": {
            "type": "integer",
            "format": "int32",
            "description": "The delay before the first ring.",
            "example": 0,
            "minimum": 0,
            "maximum": 120
          },
          "is_stay_not_connected": {
            "type": "boolean",
            "description": "If the agent is disconnected:<br /> 0: Skip that agent and move on to the next one.<br /> 1: Wait for the agent to log on and send them the call.",
            "example": 1
          },
          "is_stay_in_call": {
            "type": "boolean",
            "description": "If the agent already has a call in progress:<br /> 0: Skip that agent and move on to the next one.<br /> 1: Wait for the agent to finish and send them the call.",
            "example": 0
          },
          "is_stay_planned_snoozed": {
            "type": "boolean",
            "description": "If outside of the agent’s scheduled hours:<br /> 0: Skip that agent and move on to the next one.<br /> 1: Puts the caller on hold until the agent enters their scheduled hours then calls them.",
            "example": 1
          },
          "is_stay_snoozed": {
            "description": "If the agent is in snooze:<br /> 0: Skip that agent and move on to the next one.<br /> 1: Puts the caller on hold until the agent's snooze period ends, then calls them.",
            "type": "boolean",
            "example": 0
          },
          "ring_overlap": {
            "type": "integer",
            "description": "When the <em>ring_delay</em> of an agent ends and the next one is called, should we keep ringing the first one?<br /> 0: No<br /> 1: Yes",
            "format": "int32",
            "example": 0
          },
          "agents": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/agent_external"
                },
                {
                  "$ref": "#/components/schemas/agent_internal_identified_by_number"
                },
                {
                  "$ref": "#/components/schemas/agent_internal_identified_by_userid"
                },
                {
                  "$ref": "#/components/schemas/agent_internal_identified_by_email"
                }
              ],
              "discriminator": {
                "propertyName": "agent_type"
              }
            }
          }
        }
      },
      "Agent": {
        "type": "object",
        "properties": {
          "agent_type": {
            "description": "Agent type and identification means.<br /> ⚠️ This field is used to explain how to use this object, BUT not need to put it.",
            "type": "string",
            "example": "agent_external"
          },
          "ring_duration": {
            "type": "integer",
            "format": "int32",
            "description": "Ringing duration (in seconds).",
            "example": 25,
            "minimum": 0,
            "maximum": 500
          },
          "ring_delay": {
            "type": "integer",
            "format": "int32",
            "description": "Waiting time before ringing (in seconds).",
            "example": 0,
            "minimum": 0,
            "maximum": 500
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "Position in the queue of agents.",
            "example": 1,
            "minimum": 0
          }
        },
        "discriminator": {
          "propertyName": "agent_type"
        }
      },
      "agent_internal_identified_by_number": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "required": [
              "number"
            ],
            "properties": {
              "number": {
                "type": "integer",
                "format": "uint64",
                "description": "Agent's phone number, in international format.",
                "example": 33123456789
              }
            }
          }
        ]
      },
      "agent_internal_identified_by_email": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "type": "string",
                "description": "Agent's email.",
                "example": "john.doe@ringover.com"
              }
            }
          }
        ]
      },
      "agent_internal_identified_by_userid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "required": [
              "user_id"
            ],
            "properties": {
              "user_id": {
                "type": "integer",
                "format": "int32",
                "description": "Agent's unique identifier.",
                "example": 31142
              }
            }
          }
        ]
      },
      "agent_external": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "required": [
              "number"
            ],
            "properties": {
              "number": {
                "type": "integer",
                "format": "uint64",
                "description": "Agent's phone number (international format).",
                "example": 33123456789
              },
              "is_pre_answer": {
                "type": "boolean",
                "description": "",
                "example": 1
              },
              "is_caller_id": {
                "type": "boolean",
                "description": "Which number should we display to the agent ?<br /> 0: The IVR's number.<br /> 1: The caller's number.",
                "example": 1
              },
              "is_head_line": {
                "type": "boolean",
                "description": "What should we do if this external agent is already in call?<br /> 0: Wait for his call to end.<br /> 1: Force the call (he will receive a dual call).",
                "example": 0
              }
            }
          }
        ]
      },
      "webhook_request_contact": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "contact"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              }
            }
          }
        }
      },
      "webhook_response_contact": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "example": "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
          },
          "firstname": {
            "type": "string",
            "example": "Jean-Pierre"
          },
          "lastname": {
            "type": "string",
            "example": "De La Court"
          },
          "company": {
            "type": "string",
            "example": "Ringover"
          },
          "picture": {
            "type": "string",
            "example": "https://cdn.ringover.com/img/pic.png"
          },
          "url": {
            "type": "string",
            "example": "https://mycrm.com/client/18192233"
          },
          "data": {
            "type": "object",
            "description": "Object for your personalized data.",
            "properties": {
              "key1": {
                "type": "string",
                "example": "value1"
              },
              "key2": {
                "type": "string",
                "example": "value2"
              },
              "keyN": {
                "type": "string",
                "example": "valueN"
              }
            }
          },
          "is_shared": {
            "type": "boolean",
            "example": 1
          }
        }
      },
      "webhook_request_contactsearch": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "contact"
          },
          "ressource": {
            "type": "string",
            "example": "search"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "query_search": {
                "type": "string",
                "example": "Jean"
              },
              "user_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456
              }
            }
          }
        }
      },
      "webhook_response_contactsearch": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/webhook_response_contactsearch_object"
        }
      },
      "webhook_response_contactsearch_object": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "Jean-Pierre"
          },
          "lastname": {
            "type": "string",
            "example": "De La Court"
          },
          "company": {
            "type": "string",
            "example": "Ringover"
          },
          "picture": {
            "type": "string",
            "example": "https://cdn.ringover.com/img/pic.png"
          },
          "url": {
            "type": "string",
            "example": "https://mycrm.com/client/18192233"
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_number_contact"
            }
          }
        }
      },
      "search_number_contact": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "Phone number (E.164 format)",
            "example": 33184800000
          },
          "type": {
            "type": "string",
            "enum": [
              "home",
              "office",
              "mobile",
              "fax",
              "other"
            ],
            "example": "mobile"
          }
        }
      },
      "webhook_request_call_ringing": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "ringing"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "57622f20-a020-4f9e-814c-62a6123412fa"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "channel_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "start_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823493.762305
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 12854321
              },
              "is_internal": {
                "type": "boolean",
                "description": "The call is coming from an internal number.",
                "example": 1
              },
              "is_anonymous": {
                "type": "boolean",
                "example": 0
              },
              "is_ivr": {
                "type": "boolean",
                "description": "The call is coming from an IVR.",
                "example": 1
              },
              "ivr_data": {
                "$ref": "#/components/schemas/webhook_ivr"
              },
              "user": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "format": "uint64",
                    "example": 123456789
                  },
                  "firstname": {
                    "type": "string",
                    "example": "Jean"
                  },
                  "lastname": {
                    "type": "string",
                    "example": "Dupont"
                  },
                  "email": {
                    "type": "string",
                    "example": "jean.dupont@ringover.com"
                  },
                  "photo": {
                    "type": "string",
                    "example": "https://cdn.ringover.com/img/users/default.jpg"
                  }
                }
              },
              "status": {
                "type": "string",
                "example": "ringing"
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_ivr": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "example": "33101020304"
          },
          "scenario_name": {
            "type": "string",
            "example": "Opened"
          },
          "ivr_name": {
            "type": "string",
            "example": "myIVR"
          }
        }
      },
      "webhook_request_call_answered": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "answered"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "57622f20-a020-4f9e-814c-62a6123412fa"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "channel_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "status": {
                "type": "string",
                "example": "answered"
              },
              "start_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823400.762305
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 12854321
              },
              "is_internal": {
                "type": "boolean",
                "example": 1
              },
              "is_anonymous": {
                "type": "boolean",
                "example": 0
              },
              "is_ivr": {
                "type": "boolean",
                "example": 1
              },
              "ivr_data": {
                "$ref": "#/components/schemas/webhook_ivr"
              },
              "user": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "format": "uint64",
                    "example": 123456789
                  },
                  "firstname": {
                    "type": "string",
                    "example": "Jean"
                  },
                  "lastname": {
                    "type": "string",
                    "example": "Dupont"
                  },
                  "email": {
                    "type": "string",
                    "example": "jean.dupont@ringover.com"
                  },
                  "photo": {
                    "type": "string",
                    "example": "https://cdn.ringover.com/img/users/default.jpg"
                  }
                }
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_request_call_hangup": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "hangup"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "57622f20-a020-4f9e-814c-62a6123412fa"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "channel_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "start_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823400.762305
              },
              "hangup_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823442.762305
              },
              "duration_in_seconds": {
                "type": "integer",
                "format": "int32",
                "example": 32
              },
              "record": {
                "description": "Set only when the feature was activated",
                "type": "string",
                "example": "http://cdr.ringover.com/record/myrecord.mp3"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 12854321
              },
              "is_internal": {
                "type": "boolean",
                "example": 1
              },
              "is_anonymous": {
                "type": "boolean",
                "example": 0
              },
              "is_ivr": {
                "type": "boolean",
                "example": 1
              },
              "ivr_data": {
                "$ref": "#/components/schemas/webhook_ivr"
              },
              "user": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "format": "uint64",
                    "example": 123456789
                  },
                  "firstname": {
                    "type": "string",
                    "example": "Jean"
                  },
                  "lastname": {
                    "type": "string",
                    "example": "Dupont"
                  },
                  "email": {
                    "type": "string",
                    "example": "jean.dupont@ringover.com"
                  },
                  "photo": {
                    "type": "string",
                    "example": "https://cdn.ringover.com/img/users/default.jpg"
                  }
                }
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_request_call_missed": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "missed"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "57622f20-a020-4f9e-814c-62a6123412fa"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "start_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823400.762305
              },
              "hangup_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823442.762305
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 12854321
              },
              "is_internal": {
                "type": "boolean",
                "example": 1
              },
              "is_anonymous": {
                "type": "boolean",
                "example": 0
              },
              "is_ivr": {
                "type": "boolean",
                "example": 1
              },
              "ivr_data": {
                "$ref": "#/components/schemas/webhook_ivr"
              },
              "ivr": {
                "$ref": "#/components/schemas/webhook_ivr_v2"
              },
              "status": {
                "type": "string",
                "example": "missed"
              },
              "reason": {
                "type": "string",
                "example": "OUT_PLANNING"
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_request_call_voicemail": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "voicemail"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "57622f20-a020-4f9e-814c-62a6123412fa"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "start_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823400.762305
              },
              "answered_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823412.762305
              },
              "hangup_time": {
                "type": "number",
                "format": "double64",
                "example": 1554823442.762305
              },
              "duration_in_seconds": {
                "type": "integer",
                "format": "int32",
                "example": 32
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 12854321
              },
              "is_internal": {
                "type": "boolean",
                "example": 1
              },
              "is_anonymous": {
                "type": "boolean",
                "example": 0
              },
              "is_ivr": {
                "type": "boolean",
                "example": 1
              },
              "ivr_data": {
                "$ref": "#/components/schemas/webhook_ivr"
              }
            }
          }
        }
      },
      "webhook_request_call_comments_updated": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "comments_updated"
          },
          "resource": {
            "type": "string",
            "example": "aftercall"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "channel_id": {
                "type": "integer",
                "format": "uint64",
                "example": 123456789
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "tag1",
                  "tag2"
                ]
              },
              "comments": {
                "type": "string",
                "description": "New comment"
              }
            }
          },
          "attempt": {
            "type": "integer",
            "format": "uint64",
            "example": 2
          }
        }
      },
      "webhook_request_call_tags_updated": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "tags_updated"
          },
          "resource": {
            "type": "string",
            "example": "aftercall"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "tags": {
                "type": "string",
                "description": "New tag"
              }
            }
          }
        }
      },
      "webhook_request_call_record_available": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "record_available"
          },
          "resource": {
            "type": "string",
            "example": "aftercall"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "record_link": {
                "type": "string",
                "description": "Link to record"
              },
              "record_duration": {
                "type": "string",
                "description": "Duration"
              }
            }
          }
        }
      },
      "webhook_request_call_voicemail_available": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "voicemail_available"
          },
          "resource": {
            "type": "string",
            "example": "aftercall"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              },
              "voicemail_link": {
                "type": "string",
                "description": "Link to voicemail"
              },
              "voicemail_duration": {
                "type": "string",
                "description": "Duration"
              }
            }
          }
        }
      },
      "webhook_request_ivr_response_code": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "example": "ivr_response_code"
          },
          "resource": {
            "type": "string",
            "example": "call"
          },
          "timestamp": {
            "type": "number",
            "format": "double64",
            "example": 1554823493.762305
          },
          "data": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "uint64",
                "example": 1234
              },
              "from_number": {
                "type": "string",
                "example": "33601020304"
              },
              "to_number": {
                "type": "string",
                "example": "33101020304"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "example": "inbound"
              },
              "call_id": {
                "type": "integer",
                "format": "uint64",
                "example": 1234567890987654400
              }
            }
          }
        }
      },
      "request_ivr_callback": {
        "type": "object",
        "properties": {
          "from_number": {
            "description": "The IVR Number to display",
            "type": "integer",
            "format": "int64",
            "example": 33744332211
          },
          "clir": {
            "type": "boolean",
            "description": "Calling line identification restriction: The CLIR service blocks calling party address information from being presented to the called user.",
            "example": false
          },
          "to_number": {
            "type": "integer",
            "format": "int64",
            "example": 33611223344
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 20,
            "maximum": 300,
            "description": "Number of seconds before the call is aborted if the communication isn't etablished.",
            "example": 45
          }
        }
      },
      "request_callback": {
        "type": "object",
        "properties": {
          "from_number": {
            "nullable": true,
            "description": "If null then unidentified caller",
            "type": "integer",
            "format": "int64",
            "example": 33744332211
          },
          "to_number": {
            "type": "integer",
            "format": "int64",
            "example": 33611223344
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 20,
            "maximum": 300,
            "description": "Number of seconds before abort the call if the communication isn't etablished.",
            "example": 45
          },
          "device": {
            "type": "string",
            "enum": [
              "ALL",
              "APP",
              "WEB",
              "SIP",
              "MOB",
              "EXT"
            ],
            "example": "ALL"
          }
        }
      },
      "snooze_label": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "name"
          },
          "label": {
            "type": "string",
            "example": "label"
          },
          "color": {
            "type": "string",
            "example": "CDCDCD"
          }
        }
      },
      "snooze_log_list": {
        "type": "object",
        "properties": {
          "snooze_log_list_count": {
            "type": "integer",
            "description": "The size of the array <em>list</em>, corresponds to the number of logs retrieved",
            "format": "int64",
            "example": 1
          },
          "snooze_log_list": {
            "type": "array",
            "description": "Array containing the snooze logs",
            "items": {
              "$ref": "#/components/schemas/snooze_log"
            }
          },
          "total_snooze_log_count": {
            "type": "integer",
            "description": "The total number of snooze logs",
            "format": "int64",
            "example": 1337
          }
        }
      },
      "snooze_log": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "example": "state"
          },
          "name": {
            "type": "string",
            "example": "name"
          },
          "label": {
            "type": "string",
            "example": "label"
          },
          "comment": {
            "type": "string",
            "example": "a comment"
          },
          "creation_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          }
        }
      },
      "campaign_calllist_basic": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the campaign CALL List",
            "example": "My campaign CALL List"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the campaign CALL List",
            "example": "My campaign CALL List is sent to people to improve my business"
          },
          "max_retry": {
            "type": "integer",
            "description": "The max retry attempts for numbers in the campaign CALL List",
            "example": 3
          }
        }
      },
      "campaign_calllist_light": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "campaign_calllist_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the object",
                "example": "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
              },
              "team_id": {
                "type": "integer",
                "format": "int64",
                "description": "Unique identifier for the object",
                "example": 123123
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "description": "Unique identifier for the object",
                "example": 234234
              }
            }
          },
          {
            "$ref": "#/components/schemas/campaign_calllist_basic"
          },
          {
            "type": "object",
            "properties": {
              "update_date": {
                "type": "string",
                "format": "date",
                "example": "2018-08-12T12:12:40.53Z"
              },
              "creation_date": {
                "type": "string",
                "format": "date",
                "example": "2018-08-12T12:12:40.53Z"
              },
              "is_started": {
                "type": "boolean",
                "description": "Allow users to jump into",
                "example": false
              },
              "is_archived": {
                "type": "boolean",
                "description": "Allow users to jump into",
                "example": false
              },
              "campaign_count_numbers": {
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "campaign_count_active_numbers": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "campaign_count_users": {
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "campaign_count_groups": {
                "type": "integer",
                "format": "int64",
                "example": 7
              },
              "stop_reason": {
                "type": "string",
                "example": "stopped_by_user"
              }
            }
          }
        ]
      },
      "campaign_calllist_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/campaign_calllist_light"
          },
          {
            "type": "object",
            "properties": {
              "total_numbers_list_count": {
                "type": "integer",
                "format": "int64",
                "example": 8
              },
              "total_archive_logs": {
                "type": "integer",
                "format": "int64",
                "description": "The size of archive log array",
                "example": 1
              },
              "archive_logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/campaign_calllist_archive_logs"
                }
              },
              "total_start_logs": {
                "type": "integer",
                "format": "int64",
                "description": "The size of start log array",
                "example": 1
              },
              "start_logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/campaign_calllist_start_logs"
                }
              }
            }
          }
        ]
      },
      "campaign_calllist_archive_logs": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "archived_by_user_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "unarchived_by_user_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "archived_start_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          },
          "unarchived_start_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-14T11:13:41.53Z"
          }
        }
      },
      "campaign_calllist_start_logs": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "started_by_user_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "stopped_by_user_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-12T12:12:40.53Z"
          },
          "stop_date": {
            "type": "string",
            "format": "date",
            "example": "2018-08-14T11:13:41.53Z"
          }
        }
      },
      "campaign_calllist_list": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_campaign_calllist_count": {
            "type": "integer",
            "format": "int64",
            "description": "The count of all active campaigns calllist (NOT including archived and NOT stopped by user)",
            "example": 8
          },
          "campaign_calllist_list": {
            "nullable": true,
            "type": "array",
            "description": "The list of all campaigns calllist (including archived and stopped)",
            "items": {
              "$ref": "#/components/schemas/campaign_calllist_light"
            }
          },
          "campaign_calllist_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "The count of all campaigns calllist (including archived and stopped)"
          }
        }
      },
      "campaign_calllist_numbers": {
        "type": "object",
        "properties": {
          "to_numbers": {
            "description": "The list of mobile phone numbers",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "e164",
              "example": 33612345678
            },
            "$ref": "#/components/schemas/format_number"
          }
        }
      },
      "campaign_calllist_numbers_list": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_numbers_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "numbers_list": {
            "nullable": true,
            "type": "array",
            "description": "The list of campaign calllist numbers",
            "items": {
              "$ref": "#/components/schemas/campaign_calllist_numbers"
            }
          },
          "numbers_list_len": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "campaign_calllist_groups_list": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_groups_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "groups_list": {
            "nullable": true,
            "type": "array",
            "description": "The list of campaign calllist",
            "items": {
              "$ref": "#/components/schemas/campaign_calllist_groups_list"
            }
          },
          "groups_list_len": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "campaign_calllist_groups": {
        "type": "object",
        "properties": {
          "campaign_calllist_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the object",
            "example": "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "example": 2342344
          }
        }
      },
      "campaign_calllist_users_list": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          },
          "limit_offset_setted": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "limit_count_setted": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "total_users_list_count": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "users_list": {
            "nullable": true,
            "type": "array",
            "description": "The list of campaign calllist",
            "items": {
              "$ref": "#/components/schemas/campaign_calllist_users_list"
            }
          },
          "users_list_len": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "campaign_calllist_users": {
        "type": "object",
        "properties": {
          "campaign_calllist_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the object",
            "example": "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
          },
          "team_id": {
            "type": "integer",
            "format": "int64",
            "example": 123123
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 234234
          }
        }
      }
    }
  }
}