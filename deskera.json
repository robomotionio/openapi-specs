{
  "openapi": "3.0.0",
  "info": {
    "description": "All [Deskera](https://www.deskera.com) endpoints are secured and can only be reached after a successful authentication.  [Deskera](https://www.deskera.com) APIs requires a valid token to communicate. This token should be passed as `x-access-token` in the request header while interacting [Deskera](https://www.deskera.com) APIs.  To generate a valid token, theÂ user can trade of username and password with [Authentication API](https://deskera.docs.apiary.io/#reference/authentication-api). [Authentication API](https://deskera.docs.apiary.io/#reference/authentication-api) will return `accessToken` in the response body which can be used to communicate with Deskera APIs.",
    "version": "v1",
    "title": "Deskera Public APIs",
    "contact": {
      "name": "Deskera",
      "url": "https://www.deskera.com/",
      "email": "support@deskera.com"
    },
    "license": {
      "name": "License"
    }
  },
  "tags": [
    {
      "name": "contact-controller",
      "description": "Contact APIs"
    }
  ],
  "paths": {
    "/v1/iam/auth/sign-in/web/sign-in": {
      "post": {
        "tags": [
          "Authentication API"
        ],
        "summary": "Web Signin API to authenticate with username and password",
        "description": "Web Signin API to authenticate with username and password",
        "operationId": "signInWithCredentialsUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebSignInRequest"
              }
            }
          },
          "description": "webSignInRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Signin has been successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResultTypeDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Failed to authenticate user credentials."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Failed to authenticate user credentials."
          }
        },
        "deprecated": false
      }
    },
    "/v1/account": {
      "get": {
        "tags": [
          "Account APIs"
        ],
        "summary": "Get accounts by filter criteria",
        "description": "API to fetch accounts by filter criteria",
        "operationId": "getAccountsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdOn"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account APIs"
        ],
        "summary": "Create a new account",
        "description": "API to create a new account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequestDto"
              }
            }
          },
          "description": "accountRequestDto",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRequestDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/account/{id}": {
      "get": {
        "tags": [
          "Account APIs"
        ],
        "summary": "Get account by id",
        "description": "API to fetch account by id",
        "operationId": "getByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Account APIs"
        ],
        "summary": "Update account information",
        "description": "API to update a account information",
        "operationId": "updateAccountUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequestDto"
              }
            }
          },
          "description": "account",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account information has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRequestDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Account with same name already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Account does not exist."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/account/group": {
      "get": {
        "tags": [
          "Account APIs"
        ],
        "summary": "Get account groups by filter criteria",
        "description": "API to fetch account groups by filter criteria",
        "operationId": "getAccountGroupsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdOn"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/taxes": {
      "get": {
        "tags": [
          "Tax APIs"
        ],
        "summary": "Get taxes by filter criteria",
        "description": "API to fetch taxes by filter criteria",
        "operationId": "getTaxesUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Taxes have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tax APIs"
        ],
        "summary": "Create a new Tax",
        "description": "API to create a new tax",
        "operationId": "saveUsingPOST",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDto"
              }
            }
          },
          "description": "taxDto",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/taxes/{id}": {
      "get": {
        "tags": [
          "Tax APIs"
        ],
        "summary": "Get tax by id",
        "description": "API to fetch tax by id",
        "operationId": "getTaxByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/contacts": {
      "get": {
        "tags": [
          "Contact APIs"
        ],
        "summary": "Get contacts by filter criteria",
        "description": "API to fetch contacts by filter criteria",
        "operationId": "getContactUsingGET",
        "parameters": [
          {
            "name": "includeOpeningAmounts",
            "in": "query",
            "description": "includeOpeningAmounts",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeOweAmounts",
            "in": "query",
            "description": "includeOweAmounts",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact's information have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contact APIs"
        ],
        "summary": "Create a new Contact",
        "description": "API to create a new contact",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContactDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "201": {
            "description": "Contact has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "400": {
            "description": "Contact creation failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/contacts/{id}": {
      "get": {
        "tags": [
          "Contact APIs"
        ],
        "summary": "Get contact by id",
        "description": "API to fetch existing contact by it's id",
        "operationId": "getContactByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact's information have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contact with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Contact APIs"
        ],
        "summary": "Update contact information",
        "description": "API to update existing contact",
        "operationId": "updateContactUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContactDto"
        },
        "responses": {
          "200": {
            "description": "Contact has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contact with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/contacts/code/{code}": {
      "get": {
        "tags": [
          "Contact APIs"
        ],
        "summary": "Get contact by code",
        "description": "API to fetch existing contact by code",
        "operationId": "getByCodeUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact's information have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contact with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products APIs"
        ],
        "summary": "Get products by filter criteria",
        "description": "API to fetch products by filter criteria",
        "operationId": "searchUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseIndia"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Products APIs"
        ],
        "summary": "Create a new product",
        "description": "API to create a new product",
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "201": {
            "description": "Product has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Product creation failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/products/{id}": {
      "put": {
        "tags": [
          "Products APIs"
        ],
        "summary": "Update product information",
        "description": "API to update product information",
        "operationId": "updateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductRequest"
        },
        "responses": {
          "200": {
            "description": "Product has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseIndia"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/orders/purchase": {
      "get": {
        "tags": [
          "Order APIs"
        ],
        "summary": "Get orders by filter criteria",
        "description": "API to fetch orders by filter criteria",
        "operationId": "searchUsingGET_1",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase orders have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Order APIs"
        ],
        "summary": "Create a new order",
        "description": "API to create a new order",
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseOrderRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponse"
                }
              }
            }
          },
          "201": {
            "description": "Purchase order has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Purchase order could not be created due to insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/orders/purchase/{id}": {
      "put": {
        "tags": [
          "Order APIs"
        ],
        "summary": "Update order information",
        "description": "API to update order information",
        "operationId": "updateOrderUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseOrderRequest"
        },
        "responses": {
          "200": {
            "description": "Purchase Order has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Purchase order draft status cannot be changed after saving"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Purchase Order with given id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/orders/purchase/{code}": {
      "get": {
        "tags": [
          "Order APIs"
        ],
        "summary": "Get order by code",
        "description": "API to fetch order details by it's code",
        "operationId": "getByOrderCodeUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase order information has been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Purchase order not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/purchase": {
      "get": {
        "tags": [
          "Bill APIs"
        ],
        "summary": "Get bills by filter criteria",
        "description": "API to fetch bills by filter criteria",
        "operationId": "searchBillsUsingGET_1",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdDate"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase invoices have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Bill APIs"
        ],
        "summary": "Create a new bill",
        "description": "API to create a new bill",
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseInvoiceRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceResponse"
                }
              }
            }
          },
          "201": {
            "description": "Purchase invoice has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Purchase invoice could not be created due to insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/purchase/{id}": {
      "put": {
        "tags": [
          "Bill APIs"
        ],
        "summary": "Update bill information",
        "description": "API to update bill information",
        "operationId": "updateBillUsingPUT_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PurchaseInvoiceRequest"
        },
        "responses": {
          "200": {
            "description": "Purchase Invoice has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Purchase invoice draft status cannot be changed after saving"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Purchase Invoice with given id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/purchase/{code}": {
      "get": {
        "tags": [
          "Bill APIs"
        ],
        "summary": "Get bill by code",
        "description": "API to fetch bill details by it's code",
        "operationId": "getBillByCodeUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase invoice information has been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Purchase invoice not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/quotations": {
      "get": {
        "tags": [
          "Quotation APIs"
        ],
        "summary": "Get quotations by filter criteria",
        "description": "API to fetch quotations by filter criteria",
        "operationId": "getQuotationsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quotation's have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Quotation APIs"
        ],
        "summary": "Create/Draft a new quotation",
        "description": "API to create/draft a new quotation",
        "operationId": "saveQuotationUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/QuotationDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationDto"
                }
              }
            }
          },
          "201": {
            "description": "Quotation has been created/drafted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationDto"
                }
              }
            }
          },
          "400": {
            "description": "Quotation creation/draft failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/quotations/{id}": {
      "put": {
        "tags": [
          "Quotation APIs"
        ],
        "summary": "Update quotation information",
        "description": "API to update quotation information",
        "operationId": "updateQuotationUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuotationDto"
        },
        "responses": {
          "200": {
            "description": "Quotation has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Quotation with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/quotations/code/{code}": {
      "get": {
        "tags": [
          "Quotation APIs"
        ],
        "summary": "Get quotation by code",
        "description": "API to get quotation document information by code",
        "operationId": "getQuotationDetailsByCodeUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quotations documents have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesDocument"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/sales": {
      "get": {
        "tags": [
          "Invoice APIs"
        ],
        "summary": "Get invoices by filter criteria",
        "description": "API to fetch invoices by filter criteria",
        "operationId": "searchInvocieUsingGET_7",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdDate"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales invoices have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Invoice APIs"
        ],
        "summary": "Create a new invoice",
        "description": "API to create a new invoice",
        "requestBody": {
          "$ref": "#/components/requestBodies/SalesInvoiceRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceResponse"
                }
              }
            }
          },
          "201": {
            "description": "Sales invoice has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Sales invoice could not be created due to insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/sales/{id}": {
      "put": {
        "tags": [
          "Invoice APIs"
        ],
        "summary": "Update invoice information",
        "description": "API to update invoice information",
        "operationId": "updateInvoiceUsingPUT_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SalesInvoiceRequest"
        },
        "responses": {
          "200": {
            "description": "Sales Invoice has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Sales invoice draft status cannot be changed after saving"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Sales Invoice with given id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/invoices/sales/{code}": {
      "get": {
        "tags": [
          "Invoice APIs"
        ],
        "summary": "Get invoice by code",
        "description": "API to fetch invoice details by it's code",
        "operationId": "getInvoiceByCodeUsingGET_6",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales invoice information has been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Sales invoice not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/make": {
      "get": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Get make payments by filter criteria",
        "description": "API to fetch make payments by filter criteria",
        "operationId": "getUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Make Payment's have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Make a new payment",
        "description": "API to make a new payment",
        "operationId": "makePaymentUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/MakePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Payment has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/make/{id}": {
      "put": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Update payment information",
        "description": "API to update payment information",
        "operationId": "updateMakePaymentUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MakePaymentDto"
        },
        "responses": {
          "200": {
            "description": "Payment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Payment with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/make/expense": {
      "post": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Make expense entry",
        "description": "API to make expense entry.",
        "operationId": "saveExpenseUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/MakePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Payment has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/make/expenses": {
      "get": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Fetch Expenses",
        "description": "API to fetch existing expenses.",
        "operationId": "getExpensesUsingGET",
        "parameters": [
          {
            "name": "docType",
            "in": "query",
            "description": "docType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expenses have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/make/expensetaxgroup": {
      "post": {
        "tags": [
          "Make Payments APIs"
        ],
        "summary": "Make tax group expense entry",
        "description": "API to make tax group expense entry.",
        "operationId": "saveTaxGroupExpenseUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/MakePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Payment has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive": {
      "get": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Get receive payments by filter criteria",
        "description": "API to fetch receive payments by filter criteria",
        "operationId": "getUsingGET_4",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Receive Payment's have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Receive a new payment",
        "description": "API to receive a new payment",
        "operationId": "receivePaymentUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ReceivePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Payment has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive/{id}": {
      "put": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Update payment information",
        "description": "API to update payment information",
        "operationId": "updatePaymentUsingPUT_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReceivePaymentDto"
        },
        "responses": {
          "200": {
            "description": "Payment has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Payment with id not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive/deposit": {
      "post": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Make deposit entry",
        "description": "API to make deposit entry.",
        "operationId": "saveDepositUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ReceivePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Deposit has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Deposit failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive/deposit/code/{code}/details": {
      "get": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Get Deposit details by code.",
        "description": "API to get Deposit details by code.",
        "operationId": "getDepositDetailsByCodeUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit details fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Deposit not found."
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive/deposits": {
      "get": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Fetch Deposits",
        "description": "API to fetch existing deposits.",
        "operationId": "getDepositsUsingGET",
        "parameters": [
          {
            "name": "customfield",
            "in": "query",
            "description": "customfield",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "docType",
            "in": "query",
            "description": "docType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUndepositedFunds",
            "in": "query",
            "description": "includeUndepositedFunds",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposits have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/payments/receive/taxgroupdeposit": {
      "post": {
        "tags": [
          "Receive Payments APIs"
        ],
        "summary": "Make Tax Group deposit entry",
        "description": "API to make Tax Group deposit entry.",
        "operationId": "saveTaxGroupDepositUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ReceivePaymentDto"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "201": {
            "description": "Deposit has been done successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Deposit failed because of insufficient data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/dimension": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Fetch Custom Fields",
        "description": "API to fetch existing Custom Fields",
        "operationId": "getDimensionUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "sortDir",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dimension information have been fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DimensionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/dimension/code": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Get Custom Field by code",
        "description": "Api to get custom field by code",
        "operationId": "getByCustomFieldUsingGET",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched dimension by code successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DimensionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/v1/dimension/supported-modules": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Get All Custom Fields of Supported modules",
        "description": "Api to get all Custom Fields of Supported modules",
        "operationId": "supportedModulesUsingGET",
        "parameters": [
          {
            "name": "appName",
            "in": "query",
            "description": "appName",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ERP",
                "CRM",
                "PEOPLE",
                "ALL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched all supported modules successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Authorization": [
              "global"
            ]
          }
        ],
        "deprecated": false
      }
    }
  },
  "servers": [
    {
      "url": "https://bifrost.deskera.com"
    }
  ],
  "components": {
    "requestBodies": {
      "MakePaymentDto": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MakePaymentDto"
            }
          }
        },
        "description": "makePaymentDto",
        "required": true
      },
      "ProductRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProductRequest"
            }
          }
        },
        "description": "productRequest",
        "required": true
      },
      "PurchaseOrderRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderRequest"
            }
          }
        },
        "description": "purchaseOrderRequest",
        "required": true
      },
      "ContactDto": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactDto"
            }
          }
        },
        "description": "contactDto",
        "required": true
      },
      "PurchaseInvoiceRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PurchaseInvoiceRequest"
            }
          }
        },
        "description": "purchaseInvoiceRequest",
        "required": true
      },
      "QuotationDto": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QuotationDto"
            }
          }
        },
        "description": "quotationDto",
        "required": true
      },
      "SalesInvoiceRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SalesInvoiceRequest"
            }
          }
        },
        "description": "salesInvoiceRequest",
        "required": true
      },
      "ReceivePaymentDto": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReceivePaymentDto"
            }
          }
        },
        "description": "receivePaymentDto",
        "required": true
      }
    },
    "schemas": {
      "AttributeDto": {
        "type": "object",
        "properties": {
          "defaultOption": {
            "type": "boolean",
            "example": false,
            "description": "Is this the default option"
          },
          "status": {
            "type": "string",
            "example": "ACTIVE",
            "description": "Visibility status of attribute",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "value": {
            "type": "string",
            "example": "value",
            "description": "Attribute Value"
          }
        },
        "title": "AttributeDto"
      },
      "DimensionDto": {
        "type": "object",
        "required": [
          "description",
          "label"
        ],
        "properties": {
          "appName": {
            "type": "string",
            "example": "ERP",
            "description": "Application name ERP/CRM.",
            "enum": [
              "ERP",
              "CRM",
              "PEOPLE",
              "ALL"
            ]
          },
          "attributes": {
            "type": "array",
            "description": "Set of possible attributes",
            "items": {
              "$ref": "#/components/schemas/AttributeDto"
            }
          },
          "decimalPrecision": {
            "type": "integer",
            "format": "int32",
            "example": 2,
            "description": "Decimal precision Value for fields of Number type"
          },
          "defaultValue": {
            "type": "string",
            "example": "XYZ",
            "description": "Dimension Default Value"
          },
          "description": {
            "type": "string",
            "example": "Custom field for Brand",
            "description": "Dimension description"
          },
          "fieldType": {
            "type": "string",
            "example": "TEXT",
            "description": "Dimension Type",
            "enum": [
              "NUMBER",
              "TEXT",
              "DATE",
              "DROPDOWN",
              "MULTI_SELECT",
              "BOOLEAN",
              "CURRENCY",
              "COUNTRY"
            ]
          },
          "label": {
            "type": "string",
            "example": "Label",
            "description": "Dimension Label"
          },
          "mandatory": {
            "type": "boolean",
            "example": false,
            "description": "Dimension Mandatory"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "example": 25,
            "description": "Maximum length of value"
          },
          "modules": {
            "type": "array",
            "description": "Supported Modules",
            "items": {
              "type": "string",
              "enum": [
                "CONTACT",
                "PRODUCT",
                "INVOICE",
                "QUOTATION",
                "ACCOUNT",
                "JOURNAL",
                "ORDER",
                "BILL",
                "DEAL",
                "EXPENSE",
                "DEPOSIT",
                "DEBITNOTE",
                "CREDITNOTE"
              ]
            }
          },
          "staticLookupValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "example": "ACTIVE",
            "description": "Dimension Status",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "title": "DimensionDto"
      },
      "EnumDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "EnumDto"
      },
      "ContactDto": {
        "type": "object",
        "properties": {
          "attentionTo": {
            "type": "string",
            "example": "Peter Parker",
            "description": "the contact name in the company"
          },
          "billingAddress": {
            "type": "array",
            "description": "List of Billing Address.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "businessUnit": {
            "type": "string",
            "example": "CAA01 - Cvl Avtn Authrty of Singapore",
            "description": "indicates the contact is govt agency"
          },
          "currencyCode": {
            "type": "string",
            "example": "SGD",
            "description": "Currency code",
            "enum": [
              "AFN",
              "ALL",
              "DZD",
              "AOA",
              "ARS",
              "AMD",
              "AWG",
              "AZN",
              "BSD",
              "BHD",
              "BDT",
              "BBD",
              "BYN",
              "BZD",
              "BMD",
              "BTN",
              "BOB",
              "BAM",
              "BRL",
              "BND",
              "BGN",
              "BIF",
              "KHR",
              "CAD",
              "CVE",
              "KYD",
              "CLP",
              "CNY",
              "COP",
              "KMF",
              "CDF",
              "CRC",
              "HRK",
              "CUC",
              "DJF",
              "DOP",
              "EGP",
              "ERN",
              "ETB",
              "FKP",
              "FJD",
              "XAF",
              "GMD",
              "GEL",
              "GHS",
              "GIP",
              "DKK",
              "GTQ",
              "GNF",
              "GYD",
              "HTG",
              "HNL",
              "HKD",
              "HUF",
              "ISK",
              "INR",
              "IDR",
              "IRR",
              "IQD",
              "JMD",
              "JPY",
              "JOD",
              "KZT",
              "KES",
              "KWD",
              "KGS",
              "LAK",
              "LBP",
              "LSL",
              "LRD",
              "LYD",
              "MOP",
              "MKD",
              "MGA",
              "MWK",
              "MYR",
              "MVR",
              "MRO",
              "MUR",
              "MXN",
              "MDL",
              "MNT",
              "MZN",
              "MMK",
              "NAD",
              "NPR",
              "NIO",
              "NGN",
              "KPW",
              "OMR",
              "PKR",
              "ILS",
              "PAB",
              "PGK",
              "PYG",
              "PEN",
              "PHP",
              "PLN",
              "QAR",
              "RON",
              "RUB",
              "RWF",
              "SHP",
              "XCD",
              "WST",
              "STD",
              "SAR",
              "RSD",
              "SCR",
              "SLL",
              "SGD",
              "ANG",
              "SBD",
              "SOS",
              "ZAR",
              "KRW",
              "SSP",
              "EUR",
              "LKR",
              "SDG",
              "SRD",
              "NOK",
              "SZL",
              "SEK",
              "CHF",
              "SYP",
              "TWD",
              "TJS",
              "TZS",
              "THB",
              "XOF",
              "NZD",
              "TOP",
              "TTD",
              "TND",
              "TRY",
              "TMT",
              "AUD",
              "UGX",
              "UAH",
              "AED",
              "GBP",
              "USD",
              "UYU",
              "VUV",
              "VEF",
              "VND",
              "XPF",
              "MAD",
              "YER",
              "ZMW",
              "BWP",
              "CNH"
            ]
          },
          "customField": {
            "type": "array",
            "example": {
              "field1": "value1",
              "field2": "value2"
            },
            "description": "JSON object for custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "C-0000001",
            "description": "Contact Sequence code"
          },
          "emailId": {
            "type": "string",
            "example": "myinfo@domain.com",
            "description": "contact email address"
          },
          "name": {
            "type": "string",
            "example": "Sam",
            "description": "Contact name"
          },
          "payableAccountCode": {
            "type": "string",
            "example": "AC002",
            "description": "Payable account code"
          },
          "paymentTermCode": {
            "type": "string",
            "example": "Net 0",
            "description": "Payment term code"
          },
          "peppolId": {
            "type": "string",
            "example": "u000:11::11293",
            "description": "Peppol ID"
          },
          "receivableAccountCode": {
            "type": "string",
            "example": "AC001",
            "description": "Receivable account code"
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format"
          },
          "shippingAddress": {
            "type": "array",
            "description": "List of Shipping Address.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "singaporeGovt": {
            "type": "boolean",
            "example": true,
            "description": "indicates the contact is govt agency"
          },
          "taxExempted": {
            "type": "boolean",
            "example": true,
            "description": "Denotes if customer is tax exempted"
          },
          "taxExemptionNo": {
            "type": "string",
            "example": "234s-few3-2422",
            "description": "Generated tax exemption number"
          },
          "taxExemptionReason": {
            "type": "string",
            "example": "Resale, Federal Agency",
            "description": "Tax exemption reason"
          },
          "taxNumber": {
            "type": "string",
            "example": 123456,
            "description": "Tax number"
          },
          "uen": {
            "type": "string",
            "example": "DHJEUK",
            "description": "Contact UEN"
          }
        },
        "title": "ContactDto"
      },
      "Address": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "example": "218, Robinson Road",
            "description": "Address line 1"
          },
          "address2": {
            "type": "string",
            "example": "Downtown",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "example": "C001",
            "description": "City"
          },
          "country": {
            "type": "string",
            "example": "C001",
            "description": "Country"
          },
          "postalCode": {
            "type": "string",
            "example": 123456,
            "description": "Postal Code"
          },
          "preferred": {
            "type": "boolean",
            "example": true,
            "description": "Is this a default address?"
          },
          "state": {
            "type": "string",
            "example": "CS001",
            "description": "State"
          }
        },
        "title": "Address"
      },
      "ProductRequest": {
        "type": "object",
        "required": [
          "name",
          "purchaseAccountCode",
          "purchasePrice",
          "salesAccountCode",
          "salesPrice",
          "stockUom",
          "type"
        ],
        "properties": {
          "barcode": {
            "type": "string",
            "example": 2365234
          },
          "categoryCode": {
            "type": "string",
            "example": "AB0001",
            "description": "Category code"
          },
          "categoryDesc": {
            "type": "string",
            "example": "Medical Equipment",
            "description": "Category description"
          },
          "customField": {
            "type": "array",
            "example": {
              "field1": "value1",
              "field2": "value2"
            },
            "description": "JSON object for custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "description": {
            "type": "string",
            "example": "Description",
            "description": "Product description"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Sequence code"
          },
          "images": {
            "type": "array",
            "description": "Product image url's",
            "items": {
              "type": "string"
            }
          },
          "manufacturingCostAccountCode": {
            "type": "string",
            "example": "AC-0000012",
            "description": "Manufacturing Cost Account Code"
          },
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Product Name"
          },
          "purchaseAccountCode": {
            "type": "string",
            "example": "A-0012",
            "description": "Purchase account code"
          },
          "purchasePrice": {
            "type": "number",
            "format": "double",
            "example": 123.33,
            "description": "Purchase price"
          },
          "purchasePriceTaxInclusive": {
            "type": "boolean",
            "example": true,
            "description": "Is purchase price tax inclusive?"
          },
          "purchaseReturnAccountCode": {
            "type": "string",
            "example": "A-0014",
            "description": "Purchase return account code"
          },
          "purchaseTaxCode": {
            "type": "string",
            "example": "T-001",
            "description": "Purchase tax code"
          },
          "reorderEnabled": {
            "type": "boolean",
            "example": true,
            "description": "Flag to enable reorder level"
          },
          "reorderLevel": {
            "type": "integer",
            "format": "int64",
            "example": 100,
            "description": "Reorder level of the Products."
          },
          "salesAccountCode": {
            "type": "string",
            "example": "A-0013",
            "description": "Sales account code"
          },
          "salesPrice": {
            "type": "number",
            "format": "double",
            "example": 120,
            "description": "Sales price"
          },
          "salesPriceTaxInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Is sales price tax inclusive?"
          },
          "salesReturnAccountCode": {
            "type": "string",
            "example": "A-0015",
            "description": "Sales return account code"
          },
          "salesTaxCode": {
            "type": "string",
            "example": "T-002",
            "description": "Sales tax code"
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format"
          },
          "stockUom": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "Stock UOM"
          },
          "taxable": {
            "type": "boolean",
            "example": true,
            "description": "Is taxable?"
          },
          "type": {
            "type": "string",
            "example": "TRACKED",
            "description": "Product type",
            "enum": [
              "TRACKED",
              "NONTRACKED",
              "BILL_OF_MATERIALS"
            ]
          }
        },
        "title": "ProductRequest"
      },
      "ProductResponse": {
        "type": "object",
        "required": [
          "name",
          "purchaseAccountCode",
          "purchasePrice",
          "salesAccountCode",
          "salesPrice",
          "stockUom",
          "type"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Product status"
          },
          "barcode": {
            "type": "string",
            "example": 2365234,
            "description": "Product barcode"
          },
          "categoryCode": {
            "type": "string",
            "example": "AB0001",
            "description": "Category code"
          },
          "categoryDesc": {
            "type": "string",
            "example": "Medical Equipment",
            "description": "Category description"
          },
          "customField": {
            "type": "object",
            "example": {
              "field1": "value1",
              "field2": "value2"
            },
            "description": "JSON object for custom fields"
          },
          "deleted": {
            "type": "boolean",
            "example": true,
            "description": "Product delete status"
          },
          "description": {
            "type": "string",
            "example": "Description",
            "description": "Product description"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Sequence code"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "Product ID"
          },
          "images": {
            "type": "array",
            "description": "Product image url's",
            "items": {
              "type": "string"
            }
          },
          "manufacturingCostAccountCode": {
            "type": "string",
            "example": "AC-0000012",
            "description": "Manufacturing Cost Account Code"
          },
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Product Name"
          },
          "productId": {
            "type": "string",
            "example": "P000011",
            "description": "Product ID"
          },
          "purchaseAccountCode": {
            "type": "string",
            "example": "A-0012",
            "description": "Purchase account code"
          },
          "purchasePrice": {
            "type": "number",
            "format": "double",
            "example": 123.33,
            "description": "Purchase price"
          },
          "purchasePriceTaxInclusive": {
            "type": "boolean",
            "example": true,
            "description": "Is purchase price tax inclusive?"
          },
          "purchaseReturnAccountCode": {
            "type": "string",
            "example": "A-0014",
            "description": "Purchase return account code"
          },
          "purchaseTaxCode": {
            "type": "string",
            "example": "T-001",
            "description": "Purchase tax code"
          },
          "reorderEnabled": {
            "type": "boolean",
            "example": true,
            "description": "Flag to enable reorder level"
          },
          "reorderLevel": {
            "type": "integer",
            "format": "int64",
            "example": 100,
            "description": "Reorder level of the Products."
          },
          "salesAccountCode": {
            "type": "string",
            "example": "A-0013",
            "description": "Sales account code"
          },
          "salesPrice": {
            "type": "number",
            "format": "double",
            "example": 120,
            "description": "Sales price"
          },
          "salesPriceTaxInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Is sales price tax inclusive?"
          },
          "salesReturnAccountCode": {
            "type": "string",
            "example": "A-0015",
            "description": "Sales return account code"
          },
          "salesTaxCode": {
            "type": "string",
            "example": "T-002",
            "description": "Sales tax code"
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format"
          },
          "stockUom": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "Stock UOM"
          },
          "taxable": {
            "type": "boolean",
            "example": true,
            "description": "Is taxable?"
          },
          "type": {
            "type": "string",
            "example": "TRACKED",
            "description": "Product type",
            "enum": [
              "TRACKED",
              "NONTRACKED",
              "BILL_OF_MATERIALS"
            ]
          }
        },
        "title": "ProductResponse"
      },
      "AccountRequestDto": {
        "type": "object",
        "properties": {
          "accountCode": {
            "type": "string",
            "example": "SA",
            "description": "Account code"
          },
          "accountGroupId": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Account Group Id"
          },
          "accountGroupName": {
            "type": "string",
            "example": "Sample Account Group",
            "description": "Account Group Name"
          },
          "balance": {
            "type": "number",
            "example": 999.99,
            "description": "Balance Amount"
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Singapore Dollars"
          },
          "customField": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "description": {
            "type": "string",
            "example": "Savings account description",
            "description": "Account Description"
          },
          "name": {
            "type": "string",
            "example": "Savings account",
            "description": "Account Name"
          },
          "openingBalance": {
            "type": "number",
            "example": 999.99,
            "description": "Opening Balance Amount"
          },
          "openingBalanceCdType": {
            "type": "string",
            "example": "DEBIT",
            "description": "Opening balance Credit/Debit Type",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "taxCode": {
            "type": "string",
            "example": "Tax Code",
            "description": "Account Tax"
          },
          "totalBalance": {
            "type": "number",
            "example": 999.99,
            "description": "Summation of Opening Balance and Balance"
          }
        },
        "title": "AccountRequestDto"
      },
      "PurchaseOrderRequest": {
        "type": "object",
        "required": [
          "contact",
          "currencyCode",
          "documentDate",
          "dueDate",
          "totalAmount",
          "vendorCode",
          "warehouseCode"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "description": "list of attachment id's for this order",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if purchase order is backorder"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "currencyCode": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "deliveryDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Delivery date"
          },
          "documentDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Purchase Order Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "True if want to save as draft."
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase order is created for drop ship"
          },
          "dueDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingOrder": {
            "type": "boolean"
          },
          "orderType": {
            "type": "string",
            "example": "Inventory",
            "description": "Order Type",
            "enum": [
              "INVENTORY",
              "EXPENSE"
            ]
          },
          "purchaseOrderItems": {
            "type": "array",
            "description": "Purchase order item details",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItemDetails"
            }
          },
          "receiptStatus": {
            "type": "string",
            "example": "FULLY_RECEIVED",
            "description": "Received status for the Goods",
            "enum": [
              "UNRECEIVED",
              "PARTIAL_RECEIVED",
              "FULLY_RECEIVED"
            ]
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format Id"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Order status",
            "enum": [
              "DRAFT",
              "OPEN",
              "CLOSED",
              "ARCHIVED",
              "PROCESSED"
            ]
          },
          "totalAmount": {
            "type": "number",
            "example": 123.33,
            "description": "Total amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "vendorCode": {
            "type": "string",
            "example": "V001",
            "description": "Vendor"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "PurchaseOrderRequest"
      },
      "ContactInfo": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string",
            "example": "Raffles Place 1",
            "description": "Address"
          },
          "name": {
            "type": "string",
            "example": "ABC Pte Ltd",
            "description": "Contact name"
          }
        },
        "title": "ContactInfo"
      },
      "PurchaseOrderItemDetails": {
        "type": "object",
        "required": [
          "totalAmount"
        ],
        "properties": {
          "accountCode": {
            "type": "string",
            "example": "AC001",
            "description": "Account"
          },
          "discount": {
            "type": "number",
            "example": 2,
            "description": "Discount"
          },
          "discountInPercent": {
            "type": "boolean",
            "example": true,
            "description": "Discount in percentage"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "ID"
          },
          "productCode": {
            "type": "string",
            "example": "P002",
            "description": "Product"
          },
          "productDescription": {
            "type": "string",
            "example": "Description",
            "description": "Description"
          },
          "productOrder": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Product view order"
          },
          "productQuantity": {
            "type": "number",
            "example": 2,
            "description": "Product quantity"
          },
          "purchaseOrderItemCode": {
            "type": "string",
            "example": "POI-00001",
            "description": "Purchase Item Code"
          },
          "taxAmount": {
            "type": "number",
            "example": 0.5,
            "description": "Tax amount"
          },
          "taxCode": {
            "type": "string",
            "example": "GST7",
            "description": "Tax code"
          },
          "totalAmount": {
            "type": "number",
            "example": 2.3,
            "description": "Total amount"
          },
          "unitPrice": {
            "type": "number",
            "example": 2,
            "description": "Unit price / Amount"
          }
        },
        "title": "PurchaseOrderItemDetails"
      },
      "PurchaseOrderResponse": {
        "type": "object",
        "required": [
          "contact",
          "currencyCode",
          "documentDate",
          "dueDate",
          "totalAmount",
          "vendorCode",
          "warehouseCode"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "description": "list of attachment id's for this order",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if purchase order is backorder"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "billed": {
            "type": "boolean",
            "example": false,
            "description": "Purchase order billed"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "currencyCode": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "deliveryDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Delivery date"
          },
          "documentDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Purchase Order Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "Purchase order drafted"
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase order is created for drop ship"
          },
          "dueDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Purchase order id"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingOrder": {
            "type": "boolean"
          },
          "orderType": {
            "type": "string",
            "example": "Inventory",
            "description": "Order Type",
            "enum": [
              "INVENTORY",
              "EXPENSE"
            ]
          },
          "pendingReceipt": {
            "type": "boolean",
            "example": false,
            "description": "Purchase order pending receipt"
          },
          "poCode": {
            "type": "string",
            "example": "PO0001",
            "description": "Purchase order code"
          },
          "purchaseOrderItems": {
            "type": "array",
            "description": "Purchase order item details",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItemDetails"
            }
          },
          "receiptStatus": {
            "type": "string",
            "example": "FULLY_RECEIVED",
            "description": "Received status for the Goods",
            "enum": [
              "UNRECEIVED",
              "PARTIAL_RECEIVED",
              "FULLY_RECEIVED"
            ]
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Order status",
            "enum": [
              "DRAFT",
              "OPEN",
              "CLOSED",
              "ARCHIVED",
              "PROCESSED"
            ]
          },
          "totalAmount": {
            "type": "number",
            "example": 123.33,
            "description": "Total amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "vendorCode": {
            "type": "string",
            "example": "V001",
            "description": "Vendor"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "PurchaseOrderResponse"
      },
      "SalesOrderRequest": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "currencyCode",
          "documentDate",
          "fulfillmentDate",
          "totalAmount"
        ],
        "properties": {
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C002",
            "description": "Contact code"
          },
          "currencyCode": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customerPoRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Customer PO reference number"
          },
          "documentDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "True if want to save as draft."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "fulfillmentDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Fulfillment date"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingOrder": {
            "type": "boolean"
          },
          "salesOrderItems": {
            "type": "array",
            "description": "Sales order item details",
            "items": {
              "$ref": "#/components/schemas/SalesOrderItemDetails"
            }
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          }
        },
        "title": "SalesOrderRequest"
      },
      "SalesOrderItemDetails": {
        "type": "object",
        "required": [
          "productCode",
          "productQuantity",
          "totalAmount",
          "unitPrice"
        ],
        "properties": {
          "discount": {
            "type": "number",
            "example": 2,
            "description": "Discount"
          },
          "discountInPercent": {
            "type": "boolean",
            "example": true,
            "description": "Discount in percentage"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "ID"
          },
          "productCode": {
            "type": "string",
            "example": "P001",
            "description": "Product code"
          },
          "productDescription": {
            "type": "string",
            "example": "Apple watch",
            "description": "Product description"
          },
          "productOrder": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Product view order"
          },
          "productQuantity": {
            "type": "number",
            "example": 2,
            "description": "Product quantity"
          },
          "taxAmount": {
            "type": "number",
            "example": 0.5,
            "description": "Tax amount"
          },
          "taxCode": {
            "type": "string",
            "example": "GST7",
            "description": "Tax code"
          },
          "totalAmount": {
            "type": "number",
            "example": 2.3,
            "description": "Total amount"
          },
          "unitPrice": {
            "type": "number",
            "example": 0.7,
            "description": "Product unit price"
          }
        },
        "title": "SalesOrderItemDetails"
      },
      "SalesOrderResponse": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "currencyCode",
          "documentDate",
          "fulfillmentDate",
          "totalAmount"
        ],
        "properties": {
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "billed": {
            "type": "boolean",
            "example": false,
            "description": "Sales order billed"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C002",
            "description": "Contact code"
          },
          "currencyCode": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customerPoRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Customer PO reference number"
          },
          "documentDate": {
            "type": "string",
            "example": "01-10-2019",
            "description": "Document date"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "Sales order drafted"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "fulfilled": {
            "type": "boolean",
            "example": false,
            "description": "Sales order fulfilled"
          },
          "fulfillmentDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Fulfillment date"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Sales order id"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingOrder": {
            "type": "boolean"
          },
          "salesOrderItems": {
            "type": "array",
            "description": "Sales order item details",
            "items": {
              "$ref": "#/components/schemas/SalesOrderItemDetails"
            }
          },
          "soCode": {
            "type": "string",
            "example": "SO001",
            "description": "Sales order code"
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          }
        },
        "title": "SalesOrderResponse"
      },
      "PurchaseInvoiceRequest": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "currency",
          "purchaseInvoiceDate",
          "purchaseInvoiceDueDate",
          "purchaseInvoiceType"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if purchase invoice is backorder"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C0001",
            "description": "Contact Code"
          },
          "currency": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Bill Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "True if want to save as draft."
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase invoice is created for drop ship"
          },
          "dueAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Amount Due"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "journalEntryCode": {
            "type": "string",
            "example": "JE0001",
            "description": "Journal Entry Code"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingDocumentNumber": {
            "type": "string",
            "example": "DC-0001",
            "description": "Customer opening document number"
          },
          "openingInvoice": {
            "type": "boolean",
            "example": false,
            "description": "True if opening invoice"
          },
          "payableAccountCode": {
            "type": "string",
            "example": "AC-000001",
            "description": "Code of Account"
          },
          "purchaseInvoiceDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Purchase Invoice date"
          },
          "purchaseInvoiceDueDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Purchase Invoice due date"
          },
          "purchaseInvoiceType": {
            "type": "string",
            "example": "INVENTORY",
            "description": "Purchase invoice type.",
            "enum": [
              "INVENTORY",
              "EXPENSE"
            ]
          },
          "purchaseOrderRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Contact PO reference number"
          },
          "receiveGoodsStatus": {
            "type": "string",
            "example": "FULLY_RECEIVED",
            "description": "receipt goods status",
            "enum": [
              "UNRECEIVED",
              "PARTIAL_RECEIVED",
              "FULLY_RECEIVED"
            ]
          },
          "receivedComplete": {
            "type": "boolean",
            "example": false,
            "description": "True if auto received is required."
          },
          "recurring": {
            "type": "boolean",
            "example": true,
            "description": "True if Invoice is recurring."
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "True if Invoice recurrence is active."
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format Id"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Invoice status",
            "enum": [
              "OPEN",
              "DRAFT",
              "CLOSED"
            ]
          },
          "supplierInvoiceNo": {
            "type": "string"
          },
          "taxAmount": {
            "type": "number",
            "example": 2.322,
            "description": "Tax amount"
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount in base currency"
          },
          "totalTdsAmount": {
            "type": "number",
            "example": 12.32,
            "description": "Total Tds Amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "PurchaseInvoiceRequest"
      },
      "PurchaseInvoiceResponse": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "contactDto",
          "currency",
          "purchaseInvoiceDate",
          "purchaseInvoiceDueDate",
          "purchaseInvoiceType"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if purchase invoice is backorder"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C0001",
            "description": "Contact Code"
          },
          "contactDto": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "currency": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Purchase invoice Sequence Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "Purchase invoice drafted"
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase invoice is created for drop ship"
          },
          "dueAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Amount Due"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Purchase invoice id"
          },
          "journalEntryCode": {
            "type": "string",
            "example": "JE0001",
            "description": "Journal Entry Code"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingDocumentNumber": {
            "type": "string",
            "example": "DC-0001",
            "description": "Customer opening document number"
          },
          "openingInvoice": {
            "type": "boolean",
            "example": false,
            "description": "True if opening invoice"
          },
          "payableAccountCode": {
            "type": "string",
            "example": "AC-000001",
            "description": "Code of Account"
          },
          "paymentStatus": {
            "type": "string",
            "example": "PENDING",
            "description": "Purchase invoice payment status",
            "enum": [
              "PENDING",
              "PARTIAL",
              "RECEIVED"
            ]
          },
          "purchaseInvoiceCode": {
            "type": "string",
            "example": "SI001",
            "description": "Purchase invoice code"
          },
          "purchaseInvoiceDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Purchase Invoice date"
          },
          "purchaseInvoiceDueDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Purchase Invoice due date"
          },
          "purchaseInvoiceType": {
            "type": "string",
            "example": "INVENTORY",
            "description": "Purchase invoice type.",
            "enum": [
              "INVENTORY",
              "EXPENSE"
            ]
          },
          "purchaseOrderRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Contact PO reference number"
          },
          "receiveGoodsStatus": {
            "type": "string",
            "example": "UNRECEIVED",
            "description": "Purchase invoice receipt status",
            "enum": [
              "UNRECEIVED",
              "PARTIAL_RECEIVED",
              "FULLY_RECEIVED"
            ]
          },
          "recurring": {
            "type": "boolean",
            "example": true,
            "description": "True if Invoice is recurring."
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "True if Invoice recurrence is active."
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Invoice status",
            "enum": [
              "OPEN",
              "DRAFT",
              "CLOSED"
            ]
          },
          "supplierInvoiceNo": {
            "type": "string"
          },
          "taxAmount": {
            "type": "number",
            "example": 2.322,
            "description": "Tax amount"
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount in base currency"
          },
          "totalTdsAmount": {
            "type": "number",
            "example": 12.32,
            "description": "Total Tds Amount"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "PurchaseInvoiceResponse"
      },
      "SalesInvoiceRequest": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "currency",
          "salesInvoiceDate",
          "salesInvoiceDueDate"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if purchase invoice is backorder"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C0001",
            "description": "Contact Code"
          },
          "currency": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Sales Invoice Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "True if want to save as draft."
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase invoice is created for drop ship"
          },
          "dueAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Amount Due"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "fulfillmentComplete": {
            "type": "boolean",
            "example": false,
            "description": "True if auto fulfilled is required."
          },
          "fulfillmentStatus": {
            "type": "string",
            "example": "PARTIAL_FULFILLED",
            "description": "fulfillment status",
            "enum": [
              "UNFULFILLED",
              "PARTIAL_FULFILLED",
              "FULLY_FULFILLED"
            ]
          },
          "fulfillmentType": {
            "type": "string",
            "example": "PICK_PACK_SHIP",
            "description": "Fulfillment type: NONE, DEFAULT, PICK_PACK_SHIP, DROP_SHIP",
            "enum": [
              "NONE",
              "DEFAULT",
              "PICK_PACK_SHIP",
              "DROP_SHIP"
            ]
          },
          "journalEntryCode": {
            "type": "string",
            "example": "JE0001",
            "description": "Journal Entry Code"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingDocumentNumber": {
            "type": "string",
            "example": "DC-0001",
            "description": "Customer opening document number"
          },
          "openingInvoice": {
            "type": "boolean",
            "example": false,
            "description": "True if opening invoice"
          },
          "purchaseOrderRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Contact PO reference number"
          },
          "recurring": {
            "type": "boolean",
            "example": true,
            "description": "True if Invoice is recurring."
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "True if Invoice recurrence is active."
          },
          "salesInvoiceDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Sales Invoice date"
          },
          "salesInvoiceDueDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Sales Invoice due date"
          },
          "salesInvoiceItems": {
            "type": "array",
            "description": "Sales invoice item details",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceItemDetails"
            }
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format Id"
          },
          "shipByDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Ship by date"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Invoice status",
            "enum": [
              "OPEN",
              "DRAFT",
              "CLOSED"
            ]
          },
          "taxAmount": {
            "type": "number",
            "example": 2.322,
            "description": "Tax amount"
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount in base currency"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "SalesInvoiceRequest"
      },
      "SalesInvoiceItemDetails": {
        "type": "object",
        "required": [
          "documentSequenceCode",
          "productCode",
          "productQuantity",
          "totalAmount",
          "type",
          "unitPrice"
        ],
        "properties": {
          "availableQuantity": {
            "type": "number",
            "example": 3,
            "description": "Total available quantity"
          },
          "discount": {
            "type": "number",
            "example": 2,
            "description": "Discount"
          },
          "discountInPercent": {
            "type": "boolean",
            "example": true,
            "description": "Discount in percentage"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Document Sequence Code"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "ID"
          },
          "invoiceLineNumber": {
            "type": "string",
            "example": "ABSCDDSD1212",
            "description": "Invoice Line Number"
          },
          "productCode": {
            "type": "string",
            "example": "P00001",
            "description": "Product code"
          },
          "productDescription": {
            "type": "string",
            "example": "Apple watch",
            "description": "Product description"
          },
          "productOrder": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Product view order"
          },
          "productQuantity": {
            "type": "number",
            "example": 2,
            "description": "Product quantity"
          },
          "salesInvoiceItemCode": {
            "type": "string",
            "example": "SII-000001",
            "description": "Sales Invoice Item Code"
          },
          "taxAmount": {
            "type": "number",
            "example": 0.5,
            "description": "Tax amount"
          },
          "taxCode": {
            "type": "string",
            "example": "GST7",
            "description": "Tax code"
          },
          "totalAmount": {
            "type": "number",
            "example": 2.3,
            "description": "Total amount"
          },
          "type": {
            "type": "string",
            "example": "TRACKED",
            "description": "Product type",
            "enum": [
              "TRACKED",
              "NONTRACKED"
            ]
          },
          "unitPrice": {
            "type": "number",
            "example": 0.7,
            "description": "Product unit price"
          }
        },
        "title": "SalesInvoiceItemDetails"
      },
      "SalesInvoiceResponse": {
        "type": "object",
        "required": [
          "contact",
          "contactCode",
          "contactDto",
          "currency",
          "salesInvoiceDate",
          "salesInvoiceDueDate"
        ],
        "properties": {
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if backorder created"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C0001",
            "description": "Contact Code"
          },
          "contactDto": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "currency": {
            "type": "string",
            "example": "C001",
            "description": "Currency"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Sales invoice Sequence Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "Sales invoice drafted"
          },
          "dropShip": {
            "type": "boolean",
            "example": true,
            "description": "Drop Ship flag to indicate if purchase invoice is created for drop ship"
          },
          "dueAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Amount Due"
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.456345,
            "description": "Exchange rate"
          },
          "fulfillmentStatus": {
            "type": "string",
            "example": "UNFULFILLED",
            "description": "Sales invoice fulfillment status",
            "enum": [
              "UNFULFILLED",
              "PARTIAL_FULFILLED",
              "FULLY_FULFILLED"
            ]
          },
          "fulfillmentType": {
            "type": "string",
            "example": "PICK_PACK_SHIP",
            "description": "Fulfillment type: NONE, DEFAULT, PICK_PACK_SHIP, DROP_SHIP",
            "enum": [
              "NONE",
              "DEFAULT",
              "PICK_PACK_SHIP",
              "DROP_SHIP"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Sales invoice id"
          },
          "journalEntryCode": {
            "type": "string",
            "example": "JE0001",
            "description": "Journal Entry Code"
          },
          "memo": {
            "type": "string",
            "example": "Memo details",
            "description": "Memo"
          },
          "openingDocumentNumber": {
            "type": "string",
            "example": "DC-0001",
            "description": "Customer opening document number"
          },
          "openingInvoice": {
            "type": "boolean",
            "example": false,
            "description": "True if opening invoice"
          },
          "paymentStatus": {
            "type": "string",
            "example": "PENDING",
            "description": "Sales invoice payment status",
            "enum": [
              "PENDING",
              "PARTIAL",
              "RECEIVED"
            ]
          },
          "purchaseOrderRefNo": {
            "type": "string",
            "example": "CPO001",
            "description": "Contact PO reference number"
          },
          "recurring": {
            "type": "boolean",
            "example": true,
            "description": "True if Invoice is recurring."
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "True if Invoice recurrence is active."
          },
          "salesInvoiceCode": {
            "type": "string",
            "example": "SI001",
            "description": "Sales invoice code"
          },
          "salesInvoiceDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Sales Invoice date"
          },
          "salesInvoiceDueDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Sales Invoice due date"
          },
          "salesInvoiceItems": {
            "type": "array",
            "description": "Sales invoice item details",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceItemDetails"
            }
          },
          "shipByDate": {
            "type": "string",
            "example": "25-10-2019",
            "description": "Ship by date"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Invoice status",
            "enum": [
              "OPEN",
              "DRAFT",
              "CLOSED"
            ]
          },
          "taxAmount": {
            "type": "number",
            "example": 2.322,
            "description": "Tax amount"
          },
          "totalAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount"
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "example": 12.322,
            "description": "Total amount in base currency"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Unit price is GST inclusive"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          },
          "withheldAmount": {
            "type": "number",
            "example": 12.322,
            "description": "Withheld Amount"
          }
        },
        "title": "SalesInvoiceResponse"
      },
      "MakePaymentDto": {
        "type": "object",
        "properties": {
          "accountCodePayFrom": {
            "type": "string",
            "example": "AC-001",
            "description": "Account code."
          },
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "amount": {
            "type": "number",
            "example": 10,
            "description": "Payment amount."
          },
          "contactCode": {
            "type": "string",
            "example": 19425,
            "description": "Contact code."
          },
          "contactName": {
            "type": "string",
            "example": "ABC PTE LTD",
            "description": "Contact name."
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Currency code.",
            "enum": [
              "AFN",
              "ALL",
              "DZD",
              "AOA",
              "ARS",
              "AMD",
              "AWG",
              "AZN",
              "BSD",
              "BHD",
              "BDT",
              "BBD",
              "BYN",
              "BZD",
              "BMD",
              "BTN",
              "BOB",
              "BAM",
              "BRL",
              "BND",
              "BGN",
              "BIF",
              "KHR",
              "CAD",
              "CVE",
              "KYD",
              "CLP",
              "CNY",
              "COP",
              "KMF",
              "CDF",
              "CRC",
              "HRK",
              "CUC",
              "DJF",
              "DOP",
              "EGP",
              "ERN",
              "ETB",
              "FKP",
              "FJD",
              "XAF",
              "GMD",
              "GEL",
              "GHS",
              "GIP",
              "DKK",
              "GTQ",
              "GNF",
              "GYD",
              "HTG",
              "HNL",
              "HKD",
              "HUF",
              "ISK",
              "INR",
              "IDR",
              "IRR",
              "IQD",
              "JMD",
              "JPY",
              "JOD",
              "KZT",
              "KES",
              "KWD",
              "KGS",
              "LAK",
              "LBP",
              "LSL",
              "LRD",
              "LYD",
              "MOP",
              "MKD",
              "MGA",
              "MWK",
              "MYR",
              "MVR",
              "MRO",
              "MUR",
              "MXN",
              "MDL",
              "MNT",
              "MZN",
              "MMK",
              "NAD",
              "NPR",
              "NIO",
              "NGN",
              "KPW",
              "OMR",
              "PKR",
              "ILS",
              "PAB",
              "PGK",
              "PYG",
              "PEN",
              "PHP",
              "PLN",
              "QAR",
              "RON",
              "RUB",
              "RWF",
              "SHP",
              "XCD",
              "WST",
              "STD",
              "SAR",
              "RSD",
              "SCR",
              "SLL",
              "SGD",
              "ANG",
              "SBD",
              "SOS",
              "ZAR",
              "KRW",
              "SSP",
              "EUR",
              "LKR",
              "SDG",
              "SRD",
              "NOK",
              "SZL",
              "SEK",
              "CHF",
              "SYP",
              "TWD",
              "TJS",
              "TZS",
              "THB",
              "XOF",
              "NZD",
              "TOP",
              "TTD",
              "TND",
              "TRY",
              "TMT",
              "AUD",
              "UGX",
              "UAH",
              "AED",
              "GBP",
              "USD",
              "UYU",
              "VUV",
              "VEF",
              "VND",
              "XPF",
              "MAD",
              "YER",
              "ZMW",
              "BWP",
              "CNH"
            ]
          },
          "documentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Document date."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "makePaymentItemDtoList": {
            "type": "array",
            "description": "Make payment items information.",
            "items": {
              "$ref": "#/components/schemas/MakePaymentItemDto"
            }
          },
          "memo": {
            "type": "string",
            "example": "Sales quotation",
            "description": "Memo text."
          },
          "nextPaymentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Next payment date."
          },
          "paymentType": {
            "type": "string",
            "example": "BANK_TRANSFER",
            "description": "Type of payment.",
            "enum": [
              "CHEQUE",
              "CASH",
              "BANK_TRANSFER"
            ]
          },
          "purchaseInvoice": {
            "$ref": "#/components/schemas/PurchaseInvoiceResponse"
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "Recurring payment activated for payment."
          },
          "recurringPayment": {
            "type": "boolean",
            "example": false,
            "description": "Recurring payment enable/disable for payment."
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Date of Bank Transfer/cheque."
          },
          "referenceNumber": {
            "type": "string",
            "example": "CH001",
            "description": "Reference number of Bank Transfer/cheque."
          }
        },
        "title": "MakePaymentDto"
      },
      "MakePaymentItemDto": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "description": {
            "type": "string",
            "example": "General ledger for account.",
            "description": "Description of document."
          },
          "documentCode": {
            "type": "string",
            "example": "AC-001",
            "description": "Document code."
          },
          "documentType": {
            "type": "string",
            "example": "General Ledger",
            "description": "Document type."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "paymentAmount": {
            "type": "number",
            "example": 10.5,
            "description": "Payment amount."
          },
          "taxAmount": {
            "type": "number",
            "example": 0.7,
            "description": "Tax amount."
          },
          "taxCode": {
            "type": "string",
            "example": "GST@7",
            "description": "Tax code."
          },
          "taxList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxMappingDto"
            }
          }
        },
        "title": "MakePaymentItemDto"
      },
      "TaxDto": {
        "type": "object",
        "properties": {
          "accountCode": {
            "type": "string",
            "example": "AC-001",
            "description": "Account code"
          },
          "code": {
            "type": "string",
            "example": "TC-001",
            "description": "Tax code"
          },
          "deleted": {
            "type": "boolean",
            "example": false,
            "description": "Tax deleted"
          },
          "description": {
            "type": "string",
            "example": "sales Tax for SG",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "example": "SGST",
            "description": "Tax Name"
          },
          "percent": {
            "type": "number",
            "example": 7,
            "description": "Tax percentage "
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Tax status"
          },
          "taxCode": {
            "type": "string",
            "example": "TC-001",
            "description": "Tax code"
          },
          "type": {
            "type": "string",
            "example": "SALES",
            "description": "SALES",
            "enum": [
              "SALES",
              "PURCHASE",
              "BOTH"
            ]
          }
        },
        "title": "TaxDto"
      },
      "TaxMappingDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "taxAmount": {
            "type": "number"
          },
          "taxCode": {
            "type": "string"
          },
          "taxRate": {
            "type": "number"
          },
          "taxSeqCode": {
            "type": "string"
          },
          "taxType": {
            "type": "string"
          },
          "taxableAmount": {
            "type": "number"
          }
        },
        "title": "TaxMappingDto"
      },
      "ProductResponseIndia": {
        "type": "object",
        "required": [
          "name",
          "purchaseAccountCode",
          "purchasePrice",
          "salesAccountCode",
          "salesPrice",
          "stockUom",
          "type"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Product status"
          },
          "barcode": {
            "type": "string",
            "example": 2365234,
            "description": "Product barcode"
          },
          "bomAddCostConfiguration": {
            "type": "array",
            "description": "Bom additional cost information",
            "items": {
              "$ref": "#/components/schemas/BomAdditionalCostDto"
            }
          },
          "bomProductsConfiguration": {
            "type": "array",
            "description": "Bom Products information",
            "items": {
              "$ref": "#/components/schemas/BomMetaDto"
            }
          },
          "categoryCode": {
            "type": "string",
            "example": "AB0001",
            "description": "Category code"
          },
          "categoryDesc": {
            "type": "string",
            "example": "Medical Equipment",
            "description": "Category description"
          },
          "cessRule": {
            "type": "string",
            "example": "Math.max(21*amount/100,4170*quantity/1000)",
            "description": "Cess rule expression"
          },
          "cessRuleDescription": {
            "type": "string",
            "example": "21% or Rs. 4170 per thousand, whichever is higher",
            "description": "Cess rule description"
          },
          "customField": {
            "type": "array",
            "example": {
              "field1": "value1",
              "field2": "value2"
            },
            "description": "JSON object for custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "deleted": {
            "type": "boolean",
            "example": true,
            "description": "Product delete status"
          },
          "description": {
            "type": "string",
            "example": "Description",
            "description": "Product description"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Sequence code"
          },
          "glAccountCode": {
            "type": "string",
            "example": "A-0017",
            "description": "GL account code"
          },
          "hsnOrSacCode": {
            "type": "string",
            "example": 1234,
            "description": "HSN or SAC code of product"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "Product ID"
          },
          "images": {
            "type": "array",
            "description": "Product image url's",
            "items": {
              "type": "string"
            }
          },
          "inventory": {
            "$ref": "#/components/schemas/InventoryDto"
          },
          "itcAdjustment": {
            "type": "string",
            "example": "ITC_IS_BLOCKED",
            "description": "ITC adjustment",
            "enum": [
              "ITC_IS_BLOCKED",
              "ITC_IS_REVERSED"
            ]
          },
          "manufacturingCostAccountCode": {
            "type": "string",
            "example": "AC-0000012",
            "description": "Manufacturing Cost Account Code"
          },
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Product Name"
          },
          "offeringType": {
            "type": "string",
            "example": "GOODS",
            "description": "Offering type",
            "enum": [
              "GOODS",
              "SERVICES"
            ]
          },
          "productId": {
            "type": "string",
            "example": "P000011",
            "description": "Product ID"
          },
          "purchaseAccountCode": {
            "type": "string",
            "example": "A-0012",
            "description": "Purchase account code"
          },
          "purchasePrice": {
            "type": "number",
            "format": "double",
            "example": 123.33,
            "description": "Purchase price"
          },
          "purchasePriceTaxInclusive": {
            "type": "boolean",
            "example": true,
            "description": "Is purchase price tax inclusive?"
          },
          "purchaseReturnAccountCode": {
            "type": "string",
            "example": "A-0014",
            "description": "Purchase return account code"
          },
          "purchaseTaxCode": {
            "type": "string",
            "example": "T-001",
            "description": "Purchase tax code"
          },
          "reorderEnabled": {
            "type": "boolean",
            "example": true,
            "description": "Flag to enable reorder level"
          },
          "reorderLevel": {
            "type": "integer",
            "format": "int64",
            "example": 100,
            "description": "Reorder level of the Products."
          },
          "salesAccountCode": {
            "type": "string",
            "example": "A-0013",
            "description": "Sales account code"
          },
          "salesPrice": {
            "type": "number",
            "format": "double",
            "example": 120,
            "description": "Sales price"
          },
          "salesPriceTaxInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Is sales price tax inclusive?"
          },
          "salesReturnAccountCode": {
            "type": "string",
            "example": "A-0015",
            "description": "Sales return account code"
          },
          "salesTaxCode": {
            "type": "string",
            "example": "T-002",
            "description": "Sales tax code"
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format"
          },
          "stockUom": {
            "type": "integer",
            "format": "int64",
            "example": 2,
            "description": "Stock UOM"
          },
          "taxExemptionReason": {
            "type": "string",
            "example": "EXEMPTED",
            "description": "Tax Exempted reason to be filled, if taxPreference is true",
            "enum": [
              "EXEMPTED",
              "NON_GST"
            ]
          },
          "taxPreference": {
            "type": "boolean",
            "example": true,
            "description": "Whether Product is Tax Exempted"
          },
          "taxable": {
            "type": "boolean",
            "example": true,
            "description": "Is taxable?"
          },
          "type": {
            "type": "string",
            "example": "TRACKED",
            "description": "Product type",
            "enum": [
              "TRACKED",
              "NONTRACKED",
              "BILL_OF_MATERIALS"
            ]
          }
        },
        "title": "ProductResponseIndia"
      },
      "BomAdditionalCostDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "example": "Labour charges",
            "description": "Name of manufacturing service"
          },
          "price": {
            "type": "number",
            "example": 10.5,
            "description": "Quantity of product in bom"
          }
        },
        "title": "BomAdditionalCostDto"
      },
      "BomMetaDto": {
        "type": "object",
        "required": [
          "itemName"
        ],
        "properties": {
          "itemId": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "id of item in bom"
          },
          "itemName": {
            "type": "string",
            "example": "Apple",
            "description": "Product Name"
          },
          "quantity": {
            "type": "number",
            "example": 10.5,
            "description": "Quantity of product in bom"
          }
        },
        "title": "BomMetaDto"
      },
      "CustomFieldItem": {
        "type": "object",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "type": "string",
            "example": "Label",
            "description": "Custom Field Name"
          },
          "module": {
            "type": "string",
            "description": "Supported Modules"
          },
          "value": {
            "type": "object",
            "example": "XYZ",
            "description": "Dimension Value"
          }
        },
        "title": "CustomFieldItem"
      },
      "InventoryDto": {
        "type": "object",
        "required": [
          "costOfGoodsSoldAccountCode",
          "inventoryAccountCode",
          "inventoryAccountName",
          "stockAdjustmentAccountCode",
          "warehouseCode"
        ],
        "properties": {
          "availableQuantity": {
            "type": "number",
            "format": "double",
            "example": 100,
            "description": "Available quantity"
          },
          "costOfGoodsSoldAccountCode": {
            "type": "string",
            "example": "A-10231",
            "description": "Cost of goods sold account code"
          },
          "inventoryAccountCode": {
            "type": "string",
            "example": "A-10232",
            "description": "Inventory account code"
          },
          "inventoryAccountName": {
            "type": "string",
            "example": "Inventory Account",
            "description": "Inventory account name"
          },
          "openingQuantity": {
            "type": "number",
            "format": "double",
            "example": 10,
            "description": "Opening quantity"
          },
          "openingValuation": {
            "type": "number",
            "format": "double",
            "example": 100.4,
            "description": "Opening valuation"
          },
          "stockAdjustmentAccountCode": {
            "type": "string",
            "example": "A-10234",
            "description": "Stock adjustment account code"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-00001",
            "description": "Warehouse code"
          }
        },
        "title": "InventoryDto"
      },
      "AccountDto": {
        "type": "object",
        "properties": {
          "accountCode": {
            "type": "string",
            "example": "SA",
            "description": "Account code"
          },
          "accountGroup": {
            "type": "string",
            "description": "Account group"
          },
          "accountGroupId": {
            "type": "string",
            "description": "Account group"
          },
          "accountNature": {
            "type": "string",
            "example": "ASSET",
            "description": "Account Nature"
          },
          "balance": {
            "type": "number",
            "example": 999.99,
            "description": "Balance Amount"
          },
          "balanceInAccountCurrency": {
            "type": "number",
            "example": 999.99,
            "description": "Balance Amount in Account Currency"
          },
          "code": {
            "type": "string",
            "description": "Account code"
          },
          "currency": {
            "type": "string",
            "description": "Account Currency"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "description": {
            "type": "string",
            "example": "Savings account",
            "description": "Account Description"
          },
          "exchangeRate": {
            "type": "number",
            "example": 1,
            "description": "Base to Foreign Exchange Rate"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Account ID."
          },
          "name": {
            "type": "string",
            "example": "Savings account",
            "description": "Account Name"
          },
          "openingBalance": {
            "type": "number",
            "example": 999.99,
            "description": "Opening Balance Amount in Base currency"
          },
          "openingBalanceCdType": {
            "type": "string",
            "example": "DEBIT",
            "description": "Opening balance Credit/Debit Type"
          },
          "openingBalanceInAccountCurrency": {
            "type": "number",
            "example": 999.99,
            "description": "Opening Balance Amount in Account currency"
          },
          "status": {
            "type": "string",
            "example": "ACTIVE",
            "description": "Account Status"
          },
          "taxCode": {
            "type": "string",
            "description": "Account Tax"
          },
          "totalBalance": {
            "type": "number",
            "example": 999.99,
            "description": "Summation of Opening Balance and Balance"
          },
          "totalBalanceInAccountCurrency": {
            "type": "number",
            "example": 999.99,
            "description": "Summation of Opening Balance and Balance in Account Currency"
          },
          "totalCOABalance": {
            "type": "number",
            "example": 999.99,
            "description": "Summation of Opening Balance and Balance with Nature"
          },
          "totalCOABalanceInAccountCurrency": {
            "type": "number",
            "example": 999.99,
            "description": "Summation of Opening Balance and Balance with Nature in Account Currency"
          }
        },
        "title": "AccountDto"
      },
      "ReceivePaymentDto": {
        "type": "object",
        "properties": {
          "accountCodePayTo": {
            "type": "string",
            "example": "AC-001",
            "description": "Account code."
          },
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "amount": {
            "type": "number",
            "example": 10,
            "description": "Payment amount."
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contactCode": {
            "type": "string",
            "example": 19425,
            "description": "Contact code."
          },
          "contactName": {
            "type": "string",
            "example": "ABC PTE LTD",
            "description": "Contact name."
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Currency code.",
            "enum": [
              "AFN",
              "ALL",
              "DZD",
              "AOA",
              "ARS",
              "AMD",
              "AWG",
              "AZN",
              "BSD",
              "BHD",
              "BDT",
              "BBD",
              "BYN",
              "BZD",
              "BMD",
              "BTN",
              "BOB",
              "BAM",
              "BRL",
              "BND",
              "BGN",
              "BIF",
              "KHR",
              "CAD",
              "CVE",
              "KYD",
              "CLP",
              "CNY",
              "COP",
              "KMF",
              "CDF",
              "CRC",
              "HRK",
              "CUC",
              "DJF",
              "DOP",
              "EGP",
              "ERN",
              "ETB",
              "FKP",
              "FJD",
              "XAF",
              "GMD",
              "GEL",
              "GHS",
              "GIP",
              "DKK",
              "GTQ",
              "GNF",
              "GYD",
              "HTG",
              "HNL",
              "HKD",
              "HUF",
              "ISK",
              "INR",
              "IDR",
              "IRR",
              "IQD",
              "JMD",
              "JPY",
              "JOD",
              "KZT",
              "KES",
              "KWD",
              "KGS",
              "LAK",
              "LBP",
              "LSL",
              "LRD",
              "LYD",
              "MOP",
              "MKD",
              "MGA",
              "MWK",
              "MYR",
              "MVR",
              "MRO",
              "MUR",
              "MXN",
              "MDL",
              "MNT",
              "MZN",
              "MMK",
              "NAD",
              "NPR",
              "NIO",
              "NGN",
              "KPW",
              "OMR",
              "PKR",
              "ILS",
              "PAB",
              "PGK",
              "PYG",
              "PEN",
              "PHP",
              "PLN",
              "QAR",
              "RON",
              "RUB",
              "RWF",
              "SHP",
              "XCD",
              "WST",
              "STD",
              "SAR",
              "RSD",
              "SCR",
              "SLL",
              "SGD",
              "ANG",
              "SBD",
              "SOS",
              "ZAR",
              "KRW",
              "SSP",
              "EUR",
              "LKR",
              "SDG",
              "SRD",
              "NOK",
              "SZL",
              "SEK",
              "CHF",
              "SYP",
              "TWD",
              "TJS",
              "TZS",
              "THB",
              "XOF",
              "NZD",
              "TOP",
              "TTD",
              "TND",
              "TRY",
              "TMT",
              "AUD",
              "UGX",
              "UAH",
              "AED",
              "GBP",
              "USD",
              "UYU",
              "VUV",
              "VEF",
              "VND",
              "XPF",
              "MAD",
              "YER",
              "ZMW",
              "BWP",
              "CNH"
            ]
          },
          "documentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Document date."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "memo": {
            "type": "string",
            "example": "Sales quotation",
            "description": "Memo text."
          },
          "paymentType": {
            "type": "string",
            "example": "BANK_TRANSFER",
            "description": "Type of payment.",
            "enum": [
              "CHEQUE",
              "CASH",
              "BANK_TRANSFER"
            ]
          },
          "receivePaymentFeeDtoList": {
            "type": "array",
            "description": "Transaction fee pertaining to the received payment",
            "items": {
              "$ref": "#/components/schemas/ReceivePaymentFeeDto"
            }
          },
          "receivePaymentItemDtoList": {
            "type": "array",
            "description": "Receive payment items information.",
            "items": {
              "$ref": "#/components/schemas/ReceivePaymentItemDto"
            }
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Date of Bank Transfer/cheque."
          },
          "referenceNumber": {
            "type": "string",
            "example": "CH001",
            "description": "Reference number of Bank Transfer/cheque."
          },
          "salesInvoice": {
            "$ref": "#/components/schemas/SalesInvoiceResponse"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "title": "ReceivePaymentDto"
      },
      "ReceivePaymentFeeDto": {
        "type": "object",
        "title": "ReceivePaymentFeeDto"
      },
      "ReceivePaymentItemDto": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "description": {
            "type": "string",
            "example": "General ledger for account.",
            "description": "Description of document."
          },
          "documentCode": {
            "type": "string",
            "example": "AC-001",
            "description": "Document code."
          },
          "documentType": {
            "type": "string",
            "example": "General Ledger",
            "description": "Document type."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "paymentAmount": {
            "type": "number",
            "example": 10.5,
            "description": "Payment amount."
          },
          "taxAmount": {
            "type": "number",
            "example": 0.7,
            "description": "Tax amount."
          },
          "taxCode": {
            "type": "string",
            "example": "GST@7",
            "description": "Tax code."
          },
          "taxList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxMappingDto"
            }
          }
        },
        "title": "ReceivePaymentItemDto"
      },
      "QuotationDto": {
        "type": "object",
        "required": [
          "contactCode",
          "contactDto"
        ],
        "properties": {
          "attachments": {
            "type": "array",
            "description": "Attachments url's",
            "items": {
              "type": "string"
            }
          },
          "backOrder": {
            "type": "boolean",
            "example": true,
            "description": "Backorder flag to indicate if backorder created"
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "contactCode": {
            "type": "string",
            "example": "C-0001",
            "description": "Contact code"
          },
          "contactDto": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Currency code"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "deleted": {
            "type": "boolean",
            "example": false,
            "description": "Quotation deleted"
          },
          "documentDate": {
            "type": "string",
            "format": "date-time",
            "example": "27-10-2019",
            "description": "Document date"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Quotation Code"
          },
          "draft": {
            "type": "boolean",
            "example": false,
            "description": "True if want to save as draft."
          },
          "exchangeRate": {
            "type": "number",
            "format": "double",
            "example": 0.01891562,
            "description": "Exchange rate"
          },
          "fulfillmentDate": {
            "type": "string",
            "format": "date-time",
            "example": "28-10-2019",
            "description": "Fulfillment date"
          },
          "fulfillmentOn": {
            "type": "string",
            "format": "date-time",
            "example": "28-10-2019",
            "description": "Fulfillment On"
          },
          "fulfillmentStatus": {
            "type": "string",
            "example": "UNFULFILLED",
            "description": "Fulfillment status",
            "enum": [
              "UNFULFILLED",
              "PARTIAL_FULFILLED",
              "FULLY_FULFILLED"
            ]
          },
          "fulfillmentType": {
            "type": "string",
            "example": "PICK_PACK_SHIP",
            "description": "Fulfillment type: NONE, DEFAULT, PICK_PACK_SHIP, DROP_SHIP",
            "enum": [
              "NONE",
              "DEFAULT",
              "PICK_PACK_SHIP",
              "DROP_SHIP"
            ]
          },
          "linkedDocuments": {
            "type": "array",
            "description": "Linked document information.",
            "items": {
              "$ref": "#/components/schemas/DocumentInfo"
            }
          },
          "memo": {
            "type": "string",
            "example": "Sales quotation",
            "description": "Memo text"
          },
          "quotationItemDtoList": {
            "type": "array",
            "description": "Quotation items information",
            "items": {
              "$ref": "#/components/schemas/QuotationItemDto"
            }
          },
          "sequenceFormat": {
            "type": "string",
            "example": 1,
            "description": "Sequence Format Id"
          },
          "shipByDate": {
            "type": "string",
            "format": "date-time",
            "example": "25-10-2019",
            "description": "Ship by date"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "description": "Quotation status",
            "enum": [
              "DRAFT",
              "OPEN",
              "CLOSED",
              "ARCHIVED",
              "PROCESSED"
            ]
          },
          "tenantId": {
            "type": "integer",
            "format": "int64",
            "example": 123,
            "description": "Tenant id"
          },
          "unitPriceGstInclusive": {
            "type": "boolean",
            "example": true,
            "description": "Unit Price is GST inclusive"
          },
          "validTillDate": {
            "type": "string",
            "format": "date-time",
            "example": "29-10-2019",
            "description": "Valid till date"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-000001",
            "description": "Warehouse Code"
          }
        },
        "title": "QuotationDto"
      },
      "DocumentInfo": {
        "type": "object",
        "properties": {
          "documentCode": {
            "type": "string",
            "example": "QO-0000001",
            "description": "Document Code."
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Purchase Order Code"
          },
          "documentType": {
            "type": "string",
            "example": "QUOTATION",
            "description": "Type of document.",
            "enum": [
              "QUOTATION",
              "PURCHASE_ORDER",
              "SALES_ORDER",
              "PURCHASE_INVOICE",
              "SALES_INVOICE",
              "MAKE_PAYMENT",
              "RECEIVE_PAYMENT",
              "JOURNAL_ENTRY",
              "CREDIT_NOTE",
              "DEBIT_NOTE",
              "EXPENSE",
              "EXPENSE_PREPAYMENT",
              "DEPOSIT",
              "DEPOSIT_ADVPAYMENT"
            ]
          }
        },
        "title": "DocumentInfo"
      },
      "QuotationItemDto": {
        "type": "object",
        "required": [
          "documentSequenceCode",
          "productCode",
          "productQuantity",
          "type"
        ],
        "properties": {
          "availableQuantity": {
            "type": "number",
            "example": 3,
            "description": "Total available quantity"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "discount": {
            "type": "number",
            "example": 2,
            "description": "Product discount"
          },
          "discountInPercent": {
            "type": "boolean",
            "example": true,
            "description": "Discount in percentage"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Document Sequence Code"
          },
          "product": {
            "$ref": "#/components/schemas/ProductResponse"
          },
          "productCode": {
            "type": "string",
            "example": "PC-001",
            "description": "Product code"
          },
          "productDescription": {
            "type": "string",
            "example": "Red pen",
            "description": "Product description"
          },
          "productName": {
            "type": "string",
            "example": "Ball pen",
            "description": "Product name"
          },
          "productOrder": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Product order"
          },
          "productQuantity": {
            "type": "number",
            "example": 2.5,
            "description": "Product quantity"
          },
          "tax": {
            "$ref": "#/components/schemas/TaxDto"
          },
          "taxAmount": {
            "type": "number",
            "example": 0.3,
            "description": "Tax amount"
          },
          "taxCode": {
            "type": "string",
            "example": "TX-003",
            "description": "Tax code"
          },
          "taxName": {
            "type": "string",
            "example": "GST(7%)",
            "description": "Tax name"
          },
          "type": {
            "type": "string",
            "example": "TRACKED",
            "description": "Product type",
            "enum": [
              "TRACKED",
              "NONTRACKED"
            ]
          },
          "unitPrice": {
            "type": "number",
            "example": 10,
            "description": "Product price"
          }
        },
        "title": "QuotationItemDto"
      },
      "SalesDocument": {
        "type": "object",
        "required": [
          "contactDto"
        ],
        "properties": {
          "contactCode": {
            "type": "string",
            "example": "000012",
            "description": "Contact code"
          },
          "contactDto": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "documentCode": {
            "type": "string",
            "example": "QO-0000001",
            "description": "Document Code."
          },
          "documentDate": {
            "type": "string",
            "format": "date-time",
            "example": "25-10-2019",
            "description": "Document date"
          },
          "documentItemDetails": {
            "type": "array",
            "description": "Document item details.",
            "items": {
              "$ref": "#/components/schemas/DocumentItemDetails"
            }
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Document Sequence Code."
          },
          "documentType": {
            "type": "string",
            "example": "QUOTATION",
            "description": "Type of document.",
            "enum": [
              "QUOTATION",
              "PURCHASE_ORDER",
              "SALES_ORDER",
              "PURCHASE_INVOICE",
              "SALES_INVOICE",
              "MAKE_PAYMENT",
              "RECEIVE_PAYMENT",
              "JOURNAL_ENTRY",
              "CREDIT_NOTE",
              "DEBIT_NOTE",
              "EXPENSE",
              "EXPENSE_PREPAYMENT",
              "DEPOSIT",
              "DEPOSIT_ADVPAYMENT"
            ]
          },
          "exchangeRate": {
            "type": "number",
            "format": "double"
          },
          "linkedDocuments": {
            "type": "array",
            "description": "Linked Documents",
            "items": {
              "$ref": "#/components/schemas/DocumentInfo"
            }
          },
          "shipByDate": {
            "type": "string",
            "format": "date-time",
            "example": "25-10-2019",
            "description": "Ship by date"
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "warehouseCode": {
            "type": "string",
            "example": "WH-0000001",
            "description": "Warehouse Code"
          }
        },
        "title": "SalesDocument"
      },
      "DocumentItemDetails": {
        "type": "object",
        "required": [
          "documentSequenceCode",
          "productCode",
          "productQuantity",
          "unitPrice"
        ],
        "properties": {
          "documentSequenceCode": {
            "type": "string",
            "example": "P-0000001",
            "description": "Product Document Sequence code"
          },
          "product": {
            "$ref": "#/components/schemas/ProductResponse"
          },
          "productCode": {
            "type": "string",
            "example": "P00001",
            "description": "Product code"
          },
          "productDescription": {
            "type": "string",
            "example": "Apple watch",
            "description": "Product description"
          },
          "productName": {
            "type": "string",
            "example": "iPhone",
            "description": "Product Name"
          },
          "productQuantity": {
            "type": "number",
            "example": 2,
            "description": "Product quantity"
          },
          "tax": {
            "$ref": "#/components/schemas/TaxDto"
          },
          "taxCode": {
            "type": "string",
            "example": "tax code",
            "description": "Tax code"
          },
          "unitPrice": {
            "type": "number",
            "example": 0.7,
            "description": "Product unit price"
          }
        },
        "title": "DocumentItemDetails"
      },
      "WebSignInRequest": {
        "type": "object",
        "required": [
          "password",
          "userName"
        ],
        "properties": {
          "password": {
            "type": "string",
            "example": "abcd@123",
            "description": "User password"
          },
          "userName": {
            "type": "string",
            "example": "+65-1234-5678",
            "description": "Username"
          }
        },
        "title": "WebSignInRequest"
      },
      "AuthenticationResultTypeDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJraWQi...",
            "description": " The access token"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int32",
            "example": 3600,
            "description": "The expiration period of the authentication result in seconds."
          },
          "idToken": {
            "type": "string",
            "example": "eyJhbGci...",
            "description": " The id token"
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJjdHki...",
            "description": " The refresh token"
          },
          "tokenType": {
            "type": "string",
            "example": "Bearer",
            "description": "The token type."
          }
        },
        "title": "AuthenticationResultTypeDto"
      },
      "AccountGroupDto": {
        "type": "object",
        "properties": {
          "accountMaster": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Account Master"
          },
          "accountNatureId": {
            "type": "integer",
            "format": "int64",
            "example": 3,
            "description": "Account Nature Id"
          },
          "code": {
            "type": "string",
            "example": "AG-0000001",
            "description": "Account Status"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "AccountGroup ID."
          },
          "isDeleted": {
            "type": "boolean",
            "example": false,
            "description": "AccountGroup is deleted"
          },
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "AccountGroup Name"
          },
          "parentId": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "AccountGroup Parent id"
          },
          "parentName": {
            "type": "string",
            "example": "Apple",
            "description": "AccountGroup Parent name"
          }
        },
        "title": "AccountGroupDto"
      },
      "DepositInformation": {
        "type": "object",
        "properties": {
          "accountCodePayTo": {
            "type": "string",
            "example": "AC-001",
            "description": "Account code."
          },
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "amount": {
            "type": "number",
            "example": 10,
            "description": "Payment amount."
          },
          "amountDue": {
            "type": "number",
            "example": 10,
            "description": "Payment amount Due."
          },
          "billTo": {
            "$ref": "#/components/schemas/Address"
          },
          "contactCode": {
            "type": "string",
            "example": 19425,
            "description": "Contact code."
          },
          "contactDto": {
            "$ref": "#/components/schemas/ContactDto"
          },
          "contactName": {
            "type": "string",
            "example": "ABC PTE LTD",
            "description": "Contact name."
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Currency code.",
            "enum": [
              "AFN",
              "ALL",
              "DZD",
              "AOA",
              "ARS",
              "AMD",
              "AWG",
              "AZN",
              "BSD",
              "BHD",
              "BDT",
              "BBD",
              "BYN",
              "BZD",
              "BMD",
              "BTN",
              "BOB",
              "BAM",
              "BRL",
              "BND",
              "BGN",
              "BIF",
              "KHR",
              "CAD",
              "CVE",
              "KYD",
              "CLP",
              "CNY",
              "COP",
              "KMF",
              "CDF",
              "CRC",
              "CZK",
              "HRK",
              "CUC",
              "DJF",
              "DOP",
              "EGP",
              "ERN",
              "ETB",
              "FKP",
              "FJD",
              "XAF",
              "GMD",
              "GEL",
              "GHS",
              "GIP",
              "DKK",
              "GTQ",
              "GNF",
              "GYD",
              "HTG",
              "HNL",
              "HKD",
              "HUF",
              "ISK",
              "INR",
              "IDR",
              "IRR",
              "IQD",
              "JMD",
              "JPY",
              "JOD",
              "KZT",
              "KES",
              "KWD",
              "KGS",
              "LAK",
              "LBP",
              "LSL",
              "LRD",
              "LYD",
              "MOP",
              "MKD",
              "MGA",
              "MWK",
              "MYR",
              "MVR",
              "MRO",
              "MUR",
              "MXN",
              "MDL",
              "MNT",
              "MZN",
              "MMK",
              "NAD",
              "NPR",
              "NIO",
              "NGN",
              "KPW",
              "OMR",
              "PKR",
              "ILS",
              "PAB",
              "PGK",
              "PYG",
              "PEN",
              "PHP",
              "PLN",
              "QAR",
              "RON",
              "RUB",
              "RWF",
              "SHP",
              "XCD",
              "WST",
              "STD",
              "SAR",
              "RSD",
              "SCR",
              "SLL",
              "SGD",
              "ANG",
              "SBD",
              "SOS",
              "ZAR",
              "KRW",
              "SSP",
              "EUR",
              "LKR",
              "SDG",
              "SRD",
              "NOK",
              "SZL",
              "SEK",
              "CHF",
              "SYP",
              "TWD",
              "TJS",
              "TZS",
              "THB",
              "XOF",
              "NZD",
              "TOP",
              "TTD",
              "TND",
              "TRY",
              "TMT",
              "AUD",
              "UGX",
              "UAH",
              "AED",
              "GBP",
              "USD",
              "UYU",
              "UZS",
              "VUV",
              "VEF",
              "VND",
              "XPF",
              "MAD",
              "YER",
              "ZMW",
              "BWP",
              "CNH"
            ]
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "documentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Document date."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "gstExchangeRate": {
            "type": "number",
            "example": 1,
            "description": "GST Exchange rate if tax residency currency is different than base currency"
          },
          "isUnDepositedPayment": {
            "type": "boolean",
            "description": "Whether the current payment is un-deposited or not."
          },
          "journalEntryBankTransferRequestDto": {
            "$ref": "#/components/schemas/JournalEntryBankTransferRequestDto"
          },
          "knockoffInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KnockOffInfo"
            }
          },
          "memo": {
            "type": "string",
            "example": "Sales quotation",
            "description": "Memo text."
          },
          "paymentType": {
            "type": "string",
            "example": "BANK_TRANSFER",
            "description": "Type of payment.",
            "enum": [
              "CHEQUE",
              "CASH",
              "BANK_TRANSFER",
              "CARD"
            ]
          },
          "receivePaymentFeeDtoList": {
            "type": "array",
            "description": "Transaction fee pertaining to the received payment",
            "items": {
              "$ref": "#/components/schemas/ReceivePaymentFeeDto"
            }
          },
          "receivePaymentItemDtoList": {
            "type": "array",
            "description": "Receive payment items information.",
            "items": {
              "$ref": "#/components/schemas/DepositItemInformation"
            }
          },
          "reconciled": {
            "type": "boolean",
            "description": "Whether the current payment is reconciled or not."
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-27",
            "description": "Date of Bank Transfer/cheque."
          },
          "referenceNumber": {
            "type": "string",
            "example": "CH001",
            "description": "Reference number of Bank Transfer/cheque."
          },
          "shipFrom": {
            "$ref": "#/components/schemas/Address"
          },
          "shipTo": {
            "$ref": "#/components/schemas/Address"
          },
          "tdsAccountCode": {
            "type": "string",
            "example": "AC-007",
            "description": "TDS account code"
          },
          "tdsAmount": {
            "type": "number",
            "example": 10,
            "description": "TDS amount"
          },
          "unDepositedEntriesReconciled": {
            "type": "array",
            "description": "Reconciled un-deposited entries",
            "items": {
              "$ref": "#/components/schemas/UnDepositedEntriesReconciled"
            }
          },
          "whtApplicable": {
            "type": "boolean",
            "example": true,
            "description": "WHT Applicable for Receipt"
          }
        },
        "title": "DepositInformation"
      },
      "DepositItemInformation": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "example": "Bank",
            "description": "Account name."
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "description": {
            "type": "string",
            "example": "General ledger for account.",
            "description": "Description of document."
          },
          "documentCode": {
            "type": "string",
            "example": "AC-001",
            "description": "Document code."
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "AC-001",
            "description": "Document Sequence code."
          },
          "documentType": {
            "type": "string",
            "example": "General Ledger",
            "description": "Document type."
          },
          "exchangeRate": {
            "type": "number",
            "example": 0.01891562,
            "description": "Exchange rate."
          },
          "paymentAmount": {
            "type": "number",
            "example": 10.5,
            "description": "Payment amount."
          },
          "taxAmount": {
            "type": "number",
            "example": 0.7,
            "description": "Tax amount."
          },
          "taxCode": {
            "type": "string",
            "example": "GST@7",
            "description": "Tax code."
          },
          "taxDto": {
            "$ref": "#/components/schemas/TaxDto"
          },
          "taxList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxMappingDto"
            }
          }
        },
        "title": "DepositItemInformation"
      },
      "JELineItemMetaData": {
        "type": "object",
        "properties": {
          "baseAmount": {
            "type": "number",
            "example": 200,
            "description": "Base amount for tax calculation"
          },
          "contactName": {
            "type": "string",
            "example": "Abacus Limited",
            "description": "Contact Name"
          },
          "taxCode": {
            "type": "string",
            "example": "TX-0000001",
            "description": "Tax Code"
          },
          "taxName": {
            "type": "string",
            "example": "GST(BL)@7.00%",
            "description": "Tax Name"
          },
          "taxPercent": {
            "type": "number",
            "example": 7,
            "description": "Tax Percent"
          },
          "taxSequence": {
            "type": "string",
            "example": "GST(BL)@7.00%",
            "description": "Tax Sequence"
          }
        },
        "title": "JELineItemMetaData"
      },
      "JournalEntryBankTransferRequestDto": {
        "type": "object",
        "required": [
          "currency",
          "jeDate",
          "lineItems",
          "nextJEDate",
          "transferDate"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "example": 1,
            "description": "amount"
          },
          "bankToBaseExchangeRate": {
            "type": "number",
            "example": 1,
            "description": "If From bank is in foreign currency and To bank in another or same foreign currency"
          },
          "chequeDate": {
            "type": "string",
            "format": "date-time",
            "description": "date pattern dd-MM-yyyy"
          },
          "chequePrinted": {
            "type": "boolean",
            "example": false,
            "description": "cheque printed"
          },
          "contactCode": {
            "type": "string",
            "example": 1,
            "description": "JE Contact Id"
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "currency ID"
          },
          "currencyExchangeRate": {
            "type": "number",
            "example": 1,
            "description": "JE Currency Exchange Rate"
          },
          "customField": {
            "type": "array",
            "description": "List of custom fields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldItem"
            }
          },
          "documentCode": {
            "type": "string",
            "example": "PI0001",
            "description": "JE Document Number"
          },
          "documentSequenceCode": {
            "type": "string",
            "example": "0000001",
            "description": "Purchase Order Code"
          },
          "fromAccount": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "from account"
          },
          "generateCNDN": {
            "type": "boolean",
            "example": false,
            "description": "Generate CN DN for JE"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Journal Entry ID"
          },
          "includeGSTReport": {
            "type": "boolean",
            "example": true,
            "description": "Include JE in GST Report"
          },
          "jeCode": {
            "type": "string",
            "example": "JE-0000001",
            "description": "JE Number"
          },
          "jeDate": {
            "type": "string",
            "format": "date-time",
            "example": "06-11-2019",
            "description": "date pattern dd-MM-yyyy"
          },
          "journalEntryRecurringDto": {
            "$ref": "#/components/schemas/JournalEntryRecurringDto"
          },
          "lineItems": {
            "type": "array",
            "description": "Journal Entry Line Items",
            "items": {
              "$ref": "#/components/schemas/JournalEntryLineItemsDto"
            }
          },
          "memo": {
            "type": "string",
            "example": "memo",
            "description": "JE Memo"
          },
          "nextJEDate": {
            "type": "string",
            "format": "date-time",
            "example": "16-11-2019",
            "description": "date pattern dd-MM-yyyy"
          },
          "opening": {
            "type": "boolean",
            "example": false,
            "description": "Opening"
          },
          "parentJeId": {
            "type": "integer",
            "format": "int64",
            "description": "Parent JE ID"
          },
          "paymentMethod": {
            "type": "string",
            "example": 1,
            "description": "payment method"
          },
          "recurringActivated": {
            "type": "boolean",
            "example": false,
            "description": "Recurring JE Status"
          },
          "recurringJE": {
            "type": "boolean",
            "example": false,
            "description": "Recurring JE"
          },
          "toAccount": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "to account"
          },
          "transferDate": {
            "type": "string",
            "format": "date-time",
            "description": "date pattern dd-MM-yyyy"
          },
          "transferNumber": {
            "type": "string",
            "example": 1,
            "description": "transfer number"
          },
          "transferType": {
            "type": "string",
            "description": "BANK_TRANSFER"
          },
          "type": {
            "type": "string",
            "example": "NORMAL_JE",
            "description": "JE Type"
          }
        },
        "title": "JournalEntryBankTransferRequestDto"
      },
      "JournalEntryLineItemsDto": {
        "type": "object",
        "properties": {
          "accountCode": {
            "type": "string",
            "example": 1,
            "description": "Account Id"
          },
          "accountName": {
            "type": "string",
            "example": "Deskera",
            "description": "Account Name"
          },
          "amount": {
            "type": "number",
            "example": 0,
            "description": "amount"
          },
          "amountInDocumentCurrency": {
            "type": "number",
            "example": 0,
            "description": "amount in document currency"
          },
          "cdType": {
            "type": "string",
            "example": "DEBIT",
            "description": "Credit Debit Type"
          },
          "description": {
            "type": "string",
            "example": "credit description",
            "description": "JE Line Items Description"
          },
          "gstTypeIndia": {
            "type": "string",
            "example": "IGST",
            "description": "GST type",
            "enum": [
              "CGST",
              "SGST",
              "IGST",
              "CESS"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Journal Entry Line Items ID"
          },
          "jeLineItemMetaData": {
            "$ref": "#/components/schemas/JELineItemMetaData"
          }
        },
        "title": "JournalEntryLineItemsDto"
      },
      "JournalEntryRecurringDto": {
        "type": "object",
        "required": [
          "recurrenceEndDate"
        ],
        "properties": {
          "jeRecurringCount": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Journal Entry Recurring Count"
          },
          "journalEntryID": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Journal Entry Id"
          },
          "memo": {
            "type": "array",
            "description": "Journal entry memo",
            "items": {
              "$ref": "#/components/schemas/RecurringJournalEntryMemo"
            }
          },
          "recurrenceEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "recurrenceFrequency": {
            "type": "string",
            "example": "WEEK",
            "description": "Journal Entry Recurrence Frequency"
          },
          "recurrenceType": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "Journal Entry Recurrence"
          }
        },
        "title": "JournalEntryRecurringDto"
      },
      "RecurringJournalEntryMemo": {
        "type": "object",
        "properties": {
          "jeDate": {
            "type": "string"
          },
          "memo": {
            "type": "string"
          }
        },
        "title": "RecurringJournalEntryMemo"
      },
      "KnockOffInfo": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "contraDocumentCode": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "documentCode": {
            "type": "string"
          },
          "documentDate": {
            "type": "string",
            "format": "date-time"
          },
          "documentOrder": {
            "type": "integer",
            "format": "int32"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "QUOTATION",
              "PURCHASE_ORDER",
              "SALES_ORDER",
              "PURCHASE_INVOICE",
              "SALES_INVOICE",
              "MAKE_PAYMENT",
              "RECEIVE_PAYMENT",
              "JOURNAL_ENTRY",
              "BANK_TRANSFER",
              "CREDIT_NOTE",
              "DEBIT_NOTE",
              "EXPENSE",
              "EXPENSE_PREPAYMENT",
              "DEPOSIT",
              "DEPOSIT_ADVPAYMENT",
              "CONTRA_ADJUSTMENT"
            ]
          },
          "exchangeRate": {
            "type": "number"
          },
          "linkedDocumentSequence": {
            "type": "string"
          },
          "whtAmount": {
            "type": "number"
          }
        },
        "title": "KnockOffInfo"
      },
      "KnockOffRequest": {
        "type": "object",
        "required": [
          "currency",
          "knockOffDate"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "example": 100,
            "description": "Amount"
          },
          "currency": {
            "type": "string",
            "example": "SGD",
            "description": "Currency Code",
            "enum": [
              "AFN",
              "ALL",
              "DZD",
              "AOA",
              "ARS",
              "AMD",
              "AWG",
              "AZN",
              "BSD",
              "BHD",
              "BDT",
              "BBD",
              "BYN",
              "BZD",
              "BMD",
              "BTN",
              "BOB",
              "BAM",
              "BRL",
              "BND",
              "BGN",
              "BIF",
              "KHR",
              "CAD",
              "CVE",
              "KYD",
              "CLP",
              "CNY",
              "COP",
              "KMF",
              "CDF",
              "CRC",
              "CZK",
              "HRK",
              "CUC",
              "DJF",
              "DOP",
              "EGP",
              "ERN",
              "ETB",
              "FKP",
              "FJD",
              "XAF",
              "GMD",
              "GEL",
              "GHS",
              "GIP",
              "DKK",
              "GTQ",
              "GNF",
              "GYD",
              "HTG",
              "HNL",
              "HKD",
              "HUF",
              "ISK",
              "INR",
              "IDR",
              "IRR",
              "IQD",
              "JMD",
              "JPY",
              "JOD",
              "KZT",
              "KES",
              "KWD",
              "KGS",
              "LAK",
              "LBP",
              "LSL",
              "LRD",
              "LYD",
              "MOP",
              "MKD",
              "MGA",
              "MWK",
              "MYR",
              "MVR",
              "MRO",
              "MUR",
              "MXN",
              "MDL",
              "MNT",
              "MZN",
              "MMK",
              "NAD",
              "NPR",
              "NIO",
              "NGN",
              "KPW",
              "OMR",
              "PKR",
              "ILS",
              "PAB",
              "PGK",
              "PYG",
              "PEN",
              "PHP",
              "PLN",
              "QAR",
              "RON",
              "RUB",
              "RWF",
              "SHP",
              "XCD",
              "WST",
              "STD",
              "SAR",
              "RSD",
              "SCR",
              "SLL",
              "SGD",
              "ANG",
              "SBD",
              "SOS",
              "ZAR",
              "KRW",
              "SSP",
              "EUR",
              "LKR",
              "SDG",
              "SRD",
              "NOK",
              "SZL",
              "SEK",
              "CHF",
              "SYP",
              "TWD",
              "TJS",
              "TZS",
              "THB",
              "XOF",
              "NZD",
              "TOP",
              "TTD",
              "TND",
              "TRY",
              "TMT",
              "AUD",
              "UGX",
              "UAH",
              "AED",
              "GBP",
              "USD",
              "UYU",
              "UZS",
              "VUV",
              "VEF",
              "VND",
              "XPF",
              "MAD",
              "YER",
              "ZMW",
              "BWP",
              "CNH"
            ]
          },
          "documentCode": {
            "type": "string",
            "example": "SI-0000001",
            "description": "Unique system generated document code"
          },
          "documentType": {
            "type": "string",
            "example": "SALES_INVOICE",
            "description": "Type of document.",
            "enum": [
              "QUOTATION",
              "PURCHASE_ORDER",
              "SALES_ORDER",
              "PURCHASE_INVOICE",
              "SALES_INVOICE",
              "MAKE_PAYMENT",
              "RECEIVE_PAYMENT",
              "JOURNAL_ENTRY",
              "BANK_TRANSFER",
              "CREDIT_NOTE",
              "DEBIT_NOTE",
              "EXPENSE",
              "EXPENSE_PREPAYMENT",
              "DEPOSIT",
              "DEPOSIT_ADVPAYMENT",
              "CONTRA_ADJUSTMENT"
            ]
          },
          "exchangeRate": {
            "type": "number",
            "example": 1,
            "description": "Currency Exchange Rate"
          },
          "knockOffDate": {
            "type": "string",
            "format": "date-time",
            "example": "06-11-2019",
            "description": "Knock off Date with pattern dd-mm-yyyy"
          },
          "paymentCode": {
            "type": "string",
            "example": "MP-0000001",
            "description": "Unique system generated payment/receipt code"
          }
        },
        "title": "KnockOffRequest"
      },
      "UnDepositedEntriesReconciled": {
        "type": "object",
        "properties": {
          "unDepositedPaymentId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "title": "UnDepositedEntriesReconciled"
      }
    }
  }
}