{
  "openapi": "3.0.0",
  "info": {
    "title": "FestDays API",
    "version": "1.0.0",
    "description": "Holiday Data API\n\n\n\nOur API is very simple and well documented based on the [OpenAPI](https://swagger.io/resources/open-api/) [version 2](https://swagger.io/specification/v2/) & [version 3](https://swagger.io/specification/) enterprise-grade open standard.\n\n\n\n\n\n**OpenAPI specifications in JSON format**\n\n\n\n- OpenAPI v2: [api.festdays.dev/v1/openapi](https://api.festdays.dev/openapi)\n\n- OpenAPI v3: [api.festdays.dev/v1/openapi3](https://api.festdays.dev/openapi3)\n\n\n\n\n\n**How to use the API**\n\n\n\nWe provide ready to use code examples in 16+ programming languages and CLI HTTP clients.\n\n\n\nYou do not have to use a compatible OpenAPI HTTP client. The API works with any raw HTTP client out of the box.\n\n\n\nIn case you want to take advantage of OpenAPI, you can use the community-based easy to use OpenAPI client generator in more than 50+ langauges:\n\n\n\n- [OpenAPI Generator](https://openapi-generator.tech): list of supported languages [code generators here](https://openapi-generator.tech/docs/generators).\n\n",
    "x-logo": {
      "url": "https://festdays.dev/images/logo.svg"
    },
    "termsOfService": "https://festdays.dev/terms",
    "x-traitTag": true
  },
  "externalDocs": {
    "description": "Website",
    "url": "https://festdays.dev"
  },
  "tags": [
    {
      "description": "Get holiday data, optionally filtered by country, year, category, region or premium filters such as city, user IP address, geo coordinates or currency (Enterprise plan required).",
      "name": "Holidays"
    },
    {
      "name": "Languages"
    },
    {
      "name": "Countries"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Account"
    }
  ],
  "x-express-openapi-additional-middleware": [],
  "paths": {
    "/languages": {
      "parameters": [],
      "get": {
        "summary": "Languages",
        "description": "Get supported languages.",
        "operationId": "getLanguages",
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Languages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Return only active languages in the current subscription plan settings",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported languages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of supported languages",
                  "items": {
                    "$ref": "#/components/schemas/language"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Examples requires you to have installed curl package\n// Installation instructions here: https://curl.haxx.se/download.html\n\n\n# Get supported languages\n\ncurl --request GET \\\n  --url 'https://api.festdays.dev/v1/languages?size=100&page=0' \\\n  --header 'token: <api token goes here>'"
          },
          {
            "lang": "HTTPie",
            "source": "// Examples requires you to have installed httpie package, an powerful alternative to curl and wget\n// Installation instructions here: https://httpie.org/docs#installation\n\n\n# Get supported languages\n\nhttp GET 'https://api.festdays.dev/v1/languages?size=100&page=0' \\\n  token:'<api token goes here>'"
          },
          {
            "lang": "C#",
            "source": "// Get supported languages\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/languages?size=100&page=0\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "// Get supported languages\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/languages?size=100&page=0\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();"
          },
          {
            "lang": "JavaScript",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get supported languages\n\nfetch(\"https://api.festdays.dev/v1/languages?size=100&page=0\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});"
          },
          {
            "lang": "jQuery",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get supported languages\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/languages?size=100&page=0\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Node",
            "source": "// Examples requires you to have installed request Node.js package.\n// Install it by running: npm install --save request or yarn add request\n\n\n// Get supported languages\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/languages',\n  qs: {size: '100', page: '0'},\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node (unirest)",
            "source": "// Get supported languages\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/languages?size=100&page=0\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "PHP",
            "source": "// Examples requires to have installed pecl_http package, a simple and elegant HTTP client for PHP.\n// Install it by running: pecl install pecl_http\n// More information: https://pecl.php.net/package/pecl_http/3.2.0\n\n\n// Get supported languages\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/languages');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'size' => '100',\n  'page' => '0'\n)));\n\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "PHP (curl)",
            "source": "// Get supported languages\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/languages?size=100&page=0\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "# Examples requires to have installed requests Python package.\n# Install it by running: pip install requests\n\n\n# Get supported languages\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/languages\"\n\nquerystring = {\"size\":\"100\",\"page\":\"0\"}\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "# Get supported languages\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/languages?size=100&page=0\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go",
            "source": "// Get supported languages\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/languages?size=100&page=0\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C",
            "source": "// Get supported languages\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/languages?size=100&page=0\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Powershell",
            "source": "# Get supported languages\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/languages?size=100&page=0' -Method GET -Headers $headers"
          },
          {
            "lang": "ObjC",
            "source": "// Get supported languages\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/languages?size=100&page=0\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Swift",
            "source": "// Get supported languages\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/languages?size=100&page=0\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "OCaml",
            "source": "(* Get supported languages *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/languages?size=100&page=0\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          }
        ]
      }
    },
    "/holidays": {
      "parameters": [],
      "get": {
        "summary": "Search holidays",
        "description": "Get holidays entries, optionally filtered by custom search params.",
        "operationId": "getHolidays",
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Holidays"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "description": "Optional query search param.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "year",
            "description": "Get holidays per year. Defaults to current calendar year. Depending on your subscription plan, only certain years will be available. If you query an unsupported year, the API will return a Bad Request 400 error response.",
            "schema": {
              "type": "number",
              "enum": [
                2000,
                2001,
                2002,
                2003,
                2004,
                2005,
                2006,
                2007,
                2008,
                2009,
                2010,
                2011,
                2012,
                2013,
                2014,
                2015,
                2016,
                2017,
                2018,
                2019,
                2020,
                2021,
                2022,
                2023,
                2024,
                2025,
                2026,
                2027,
                2028,
                2029,
                2030,
                2031,
                2032,
                2033,
                2034,
                2035,
                2036,
                2037,
                2038,
                2039,
                2040,
                2041,
                2042,
                2043,
                2044,
                2045,
                2046,
                2047,
                2048,
                2049
              ],
              "default": 2021
            }
          },
          {
            "in": "query",
            "description": "Get holidays per country. Defaults to current plan countries. Depending on your subscription plan, only certain countries would be available. If you query an unsupported country, the API will return a Bad Request 400 error response.",
            "name": "country",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AF",
                  "AL",
                  "DZ",
                  "AS",
                  "AD",
                  "AO",
                  "AI",
                  "AG",
                  "AR",
                  "AM",
                  "AW",
                  "AU",
                  "AT",
                  "AZ",
                  "BH",
                  "BD",
                  "BB",
                  "BY",
                  "BE",
                  "BZ",
                  "BJ",
                  "BM",
                  "BT",
                  "BO",
                  "BA",
                  "BW",
                  "BR",
                  "BN",
                  "BG",
                  "BF",
                  "BI",
                  "KH",
                  "CM",
                  "CA",
                  "CV",
                  "KY",
                  "CF",
                  "TD",
                  "CL",
                  "CN",
                  "CO",
                  "KM",
                  "CG",
                  "CD",
                  "CK",
                  "CR",
                  "CI",
                  "HR",
                  "CU",
                  "CW",
                  "CY",
                  "CZ",
                  "DK",
                  "DJ",
                  "DM",
                  "DO",
                  "EC",
                  "EG",
                  "SV",
                  "GQ",
                  "ER",
                  "EE",
                  "ET",
                  "FK",
                  "FO",
                  "FJ",
                  "FI",
                  "FR",
                  "GF",
                  "PF",
                  "GA",
                  "GM",
                  "GE",
                  "DE",
                  "GH",
                  "GI",
                  "GR",
                  "GL",
                  "GD",
                  "GP",
                  "GU",
                  "GT",
                  "GG",
                  "GN",
                  "GW",
                  "GY",
                  "HT",
                  "VA",
                  "HN",
                  "HK",
                  "HU",
                  "IS",
                  "IN",
                  "ID",
                  "IR",
                  "IQ",
                  "IE",
                  "IM",
                  "IL",
                  "IT",
                  "JM",
                  "JP",
                  "JE",
                  "JO",
                  "KZ",
                  "KE",
                  "KI",
                  "KP",
                  "KR",
                  "XK",
                  "KW",
                  "KG",
                  "LA",
                  "LV",
                  "LB",
                  "LS",
                  "LR",
                  "LY",
                  "LI",
                  "LT",
                  "LU",
                  "MO",
                  "MK",
                  "MG",
                  "MW",
                  "MY",
                  "MV",
                  "ML",
                  "MT",
                  "MH",
                  "MQ",
                  "MR",
                  "MU",
                  "YT",
                  "MX",
                  "FM",
                  "MD",
                  "MC",
                  "MN",
                  "ME",
                  "MS",
                  "MA",
                  "MZ",
                  "MM",
                  "NA",
                  "NR",
                  "NP",
                  "NL",
                  "AN",
                  "NC",
                  "NZ",
                  "NI",
                  "NE",
                  "NG",
                  "MP",
                  "NO",
                  "OM",
                  "PK",
                  "PW",
                  "PA",
                  "PG",
                  "PY",
                  "PE",
                  "PH",
                  "PL",
                  "PT",
                  "PR",
                  "QA",
                  "RO",
                  "RU",
                  "RW",
                  "RE",
                  "BL",
                  "SH",
                  "KN",
                  "LC",
                  "MF",
                  "PM",
                  "VC",
                  "WS",
                  "SM",
                  "ST",
                  "SA",
                  "SN",
                  "RS",
                  "SC",
                  "SL",
                  "SG",
                  "SK",
                  "SI",
                  "SX",
                  "SB",
                  "SO",
                  "ZA",
                  "SS",
                  "ES",
                  "LK",
                  "SD",
                  "SR",
                  "SZ",
                  "SE",
                  "CH",
                  "SY",
                  "TW",
                  "TJ",
                  "TZ",
                  "TH",
                  "TL",
                  "TG",
                  "TO",
                  "TT",
                  "TN",
                  "TR",
                  "TM",
                  "TC",
                  "TV",
                  "UG",
                  "UA",
                  "AE",
                  "GB",
                  "US",
                  "UY",
                  "UZ",
                  "VU",
                  "VE",
                  "VN",
                  "VI",
                  "WF",
                  "YE",
                  "ZM",
                  "ZW"
                ]
              }
            }
          },
          {
            "name": "weekday",
            "description": "Filter by week day(s) in ISO week date format from 1 (Monday) to 7 (Sunday). Multiple week days allowed separated by comma.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1,
                "maximum": 7,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7
                ]
              },
              "minLength": 1,
              "maxLength": 7
            }
          },
          {
            "name": "month",
            "description": "Month or months number to search for holidays, from `1` to `12`. Multiple months allowed separated by comma.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "maximum": 1,
                "minimum": 12,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12
                ]
              },
              "minLength": 1,
              "maxLength": 12
            }
          },
          {
            "name": "longweekend",
            "description": "Return long weekend holidays based on traditional non-working days Saturday and Sunday that are preceded or followed by a non-working holiday.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "lang",
            "description": "Return holiday data a specific language. If a language translation is not available, the API will return a 400 error.",
            "in": "query",
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "enum": [
                "ar",
                "az",
                "be",
                "bg",
                "bn",
                "bs",
                "ca",
                "cs",
                "da",
                "de",
                "el",
                "en",
                "es",
                "et",
                "fi",
                "fr",
                "haw",
                "iw",
                "hi",
                "hmn",
                "hr",
                "hu",
                "hy",
                "id",
                "ig",
                "is",
                "it",
                "ja",
                "ka",
                "ko",
                "lt",
                "lv",
                "mg",
                "nl",
                "no",
                "pl",
                "pt",
                "ro",
                "ru",
                "si",
                "sk",
                "sl",
                "sq",
                "sr",
                "st",
                "sv",
                "sw",
                "th",
                "tr",
                "uk",
                "vi",
                "zh"
              ],
              "default": "en"
            }
          },
          {
            "name": "type",
            "description": "Get holidays by category type. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "local-holiday",
                  "local-bank-holiday",
                  "bank-holiday",
                  "local-observance",
                  "observance",
                  "government-public-holiday",
                  "public-sector-holiday",
                  "state-holiday",
                  "clock-change",
                  "christian-festivity",
                  "Jewish-festivity",
                  "jewish-festivity",
                  "muslim-festivity",
                  "hindu-festivity",
                  "season-change",
                  "national-day",
                  "regional-day",
                  "part-day-holiday",
                  "restricted-trading-day",
                  "half-day-restricted-trading-day",
                  "other-holiday",
                  "religious"
                ]
              },
              "maxItems": 100
            }
          },
          {
            "name": "region",
            "description": "Get holidays by region name or ISO region code. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 30
              },
              "maxItems": 100
            }
          },
          {
            "name": "city",
            "description": "Get holidays by city name or ISO city code. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 30
              },
              "maxItems": 100
            }
          },
          {
            "name": "ip",
            "description": "Get holidays by georeverse IP country. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 45
              },
              "minLength": 1,
              "maxLength": 10,
              "maxItems": 100
            }
          },
          {
            "name": "currency",
            "description": "Get holidays by local currency. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 3,
                "maxLength": 4,
                "enum": [
                  "all",
                  "AED",
                  "AFN",
                  "ALL",
                  "AMD",
                  "ANG",
                  "AOA",
                  "ARS",
                  "AUD",
                  "AWG",
                  "AZN",
                  "BAM",
                  "BBD",
                  "BDT",
                  "BGN",
                  "BHD",
                  "BIF",
                  "BMD",
                  "BND",
                  "BOB",
                  "BOV",
                  "BRL",
                  "BSD",
                  "BTN",
                  "BWP",
                  "BYR",
                  "BZD",
                  "CAD",
                  "CDF",
                  "CHE",
                  "CHF",
                  "CHW",
                  "CLF",
                  "CLP",
                  "CNY",
                  "COP",
                  "COU",
                  "CRC",
                  "CUC",
                  "CUP",
                  "CVE",
                  "CZK",
                  "DJF",
                  "DKK",
                  "DOP",
                  "DZD",
                  "EGP",
                  "ERN",
                  "ETB",
                  "EUR",
                  "FJD",
                  "FKP",
                  "GBP",
                  "GEL",
                  "GHS",
                  "GIP",
                  "GMD",
                  "GNF",
                  "GTQ",
                  "GYD",
                  "HKD",
                  "HNL",
                  "HRK",
                  "HTG",
                  "HUF",
                  "IDR",
                  "ILS",
                  "INR",
                  "IQD",
                  "IRR",
                  "ISK",
                  "JMD",
                  "JOD",
                  "JPY",
                  "KES",
                  "KGS",
                  "KHR",
                  "KMF",
                  "KPW",
                  "KRW",
                  "KWD",
                  "KYD",
                  "KZT",
                  "LAK",
                  "LBP",
                  "LKR",
                  "LRD",
                  "LSL",
                  "LTL",
                  "LVL",
                  "LYD",
                  "MAD",
                  "MDL",
                  "MGA",
                  "MKD",
                  "MMK",
                  "MNT",
                  "MOP",
                  "MRO",
                  "MUR",
                  "MVR",
                  "MWK",
                  "MXN",
                  "MXV",
                  "MYR",
                  "MZN",
                  "NAD",
                  "NGN",
                  "NIO",
                  "NOK",
                  "NPR",
                  "NZD",
                  "OMR",
                  "PAB",
                  "PEN",
                  "PGK",
                  "PHP",
                  "PKR",
                  "PLN",
                  "PYG",
                  "QAR",
                  "RON",
                  "RSD",
                  "RUB",
                  "RWF",
                  "SAR",
                  "SBD",
                  "SCR",
                  "SDG",
                  "SEK",
                  "SGD",
                  "SHP",
                  "SLL",
                  "SOS",
                  "SRD",
                  "SSP",
                  "STD",
                  "SYP",
                  "SZL",
                  "THB",
                  "TJS",
                  "TMT",
                  "TND",
                  "TOP",
                  "TRY",
                  "TTD",
                  "TWD",
                  "TZS",
                  "UAH",
                  "UGX",
                  "USD",
                  "USN",
                  "USS",
                  "UYI",
                  "UYU",
                  "UZS",
                  "VEF",
                  "VND",
                  "VUV",
                  "WST",
                  "XAF",
                  "XAG",
                  "XAU",
                  "XBA",
                  "XBB",
                  "XBC",
                  "XBD",
                  "XCD",
                  "XDR",
                  "XFU",
                  "XOF",
                  "XPD",
                  "XPF",
                  "XPT",
                  "XTS",
                  "XXX",
                  "YER",
                  "ZAR",
                  "ZMW"
                ]
              },
              "minLength": 1,
              "maxLength": 10,
              "maxItems": 100
            }
          },
          {
            "name": "phoneprefix",
            "description": "Get holidays by country phone prefix. Multiple values allowed separated by commas.",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 5
              },
              "minLength": 1,
              "maxLength": 10,
              "maxItems": 100
            }
          },
          {
            "name": "lat",
            "description": "Get holidays searching by latitude/longitude geographical coordinates. Note that both \"lat\" and \"lon\" must be present in the URL search query.",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": -90,
              "maximum": 90
            }
          },
          {
            "name": "lon",
            "description": "Get holidays searching by latitude/longitude geographical coordinates. Note that both \"lat\" and \"lon\" must be present in the URL search query.",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": -180,
              "maximum": 180
            }
          },
          {
            "name": "after",
            "description": "Get holidays before the give date in ISO date format. Example: 2020-12-31",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "before",
            "description": "Get holidays before the give date in ISO date format. Example: 2020-10-01",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "pretty",
            "description": "Returns human-readable pretty-printed results in JSON or XML.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "format",
            "description": "Results format to return: JSON, XML or CSV. Defaults to JSON.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "xml",
                "csv"
              ],
              "default": "json"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Results page number for data entries pagination. Starts at `0`.",
            "schema": {
              "type": "number",
              "format": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "Results page maximum size to return.",
            "schema": {
              "type": "number",
              "format": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Holidays results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/holiday"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search query params or not allowed search filters in the active plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized due to invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Examples requires you to have installed curl package\n// Installation instructions here: https://curl.haxx.se/download.html\n\n\n# Get holidays\n\ncurl --request GET \\\n  --url 'https://api.festdays.dev/v1/holidays?year=2021' \\\n  --header 'token: <api token goes here>'\n\n\n# Get holidays by countries\n\ncurl --request GET \\\n  --url 'https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR' \\\n  --header 'token: <api token goes here>'\n\n\n# Get holidays per category\n\ncurl --request GET \\\n  --url 'https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday' \\\n  --header 'token: <api token goes here>'"
          },
          {
            "lang": "HTTPie",
            "source": "// Examples requires you to have installed httpie package, an powerful alternative to curl and wget\n// Installation instructions here: https://httpie.org/docs#installation\n\n\n# Get holidays\n\nhttp GET 'https://api.festdays.dev/v1/holidays?year=2021' \\\n  token:'<api token goes here>'\n\n\n# Get holidays by countries\n\nhttp GET 'https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR' \\\n  token:'<api token goes here>'\n\n\n# Get holidays per category\n\nhttp GET 'https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday' \\\n  token:'<api token goes here>'"
          },
          {
            "lang": "C#",
            "source": "// Get holidays\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/holidays?year=2021\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);\n\n\n// Get holidays by countries\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);\n\n\n// Get holidays per category\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "// Get holidays\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/holidays?year=2021\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();\n\n\n// Get holidays by countries\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();\n\n\n// Get holidays per category\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();"
          },
          {
            "lang": "JavaScript",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get holidays\n\nfetch(\"https://api.festdays.dev/v1/holidays?year=2021\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});\n\n\n// Get holidays by countries\n\nfetch(\"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});\n\n\n// Get holidays per category\n\nfetch(\"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});"
          },
          {
            "lang": "jQuery",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get holidays\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/holidays?year=2021\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n\n\n// Get holidays by countries\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n\n\n// Get holidays per category\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Node",
            "source": "// Examples requires you to have installed request Node.js package.\n// Install it by running: npm install --save request or yarn add request\n\n\n// Get holidays\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/holidays',\n  qs: {year: '2021'},\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n\n\n\n// Get holidays by countries\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/holidays',\n  qs: {country: 'GB,DE,FR'},\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n\n\n\n// Get holidays per category\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/holidays',\n  qs: {type: 'bank_holiday,local_holiday'},\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node (unirest)",
            "source": "// Get holidays\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/holidays?year=2021\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n\n\n// Get holidays by countries\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/holidays?country=GB%2CDE%2CFR\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n\n\n// Get holidays per category\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/holidays?type=bank_holiday%2Clocal_holiday\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "PHP",
            "source": "// Examples requires to have installed pecl_http package, a simple and elegant HTTP client for PHP.\n// Install it by running: pecl install pecl_http\n// More information: https://pecl.php.net/package/pecl_http/3.2.0\n\n\n// Get holidays\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/holidays');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'year' => '2021'\n)));\n\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();\n\n\n// Get holidays by countries\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/holidays');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'country' => 'GB,DE,FR'\n)));\n\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();\n\n\n// Get holidays per category\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/holidays');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'type' => 'bank_holiday,local_holiday'\n)));\n\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "PHP (curl)",
            "source": "// Get holidays\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/holidays?year=2021\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n\n\n// Get holidays by countries\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n\n\n// Get holidays per category\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "# Examples requires to have installed requests Python package.\n# Install it by running: pip install requests\n\n\n# Get holidays\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/holidays\"\n\nquerystring = {\"year\":\"2021\"}\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)\n\n\n# Get holidays by countries\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/holidays\"\n\nquerystring = {\"country\":\"GB,DE,FR\"}\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)\n\n\n# Get holidays per category\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/holidays\"\n\nquerystring = {\"type\":\"bank_holiday,local_holiday\"}\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "# Get holidays\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/holidays?year=2021\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body\n\n\n# Get holidays by countries\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body\n\n\n# Get holidays per category\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go",
            "source": "// Get holidays\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/holidays?year=2021\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n\n\n// Get holidays by countries\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n\n\n// Get holidays per category\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C",
            "source": "// Get holidays\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/holidays?year=2021\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);\n\n\n// Get holidays by countries\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);\n\n\n// Get holidays per category\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Powershell",
            "source": "# Get holidays\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/holidays?year=2021' -Method GET -Headers $headers\n\n\n# Get holidays by countries\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR' -Method GET -Headers $headers\n\n\n# Get holidays per category\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday' -Method GET -Headers $headers"
          },
          {
            "lang": "ObjC",
            "source": "// Get holidays\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/holidays?year=2021\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n\n\n// Get holidays by countries\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n\n\n// Get holidays per category\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Swift",
            "source": "// Get holidays\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/holidays?year=2021\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n\n\n// Get holidays by countries\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n\n\n// Get holidays per category\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "OCaml",
            "source": "(* Get holidays *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/holidays?year=2021\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)\n\n\n(* Get holidays by countries *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/holidays?country=GB%2CDE%2CFR\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)\n\n\n(* Get holidays per category *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/holidays?type=bank_holiday%2Clocal_holiday\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          }
        ]
      }
    },
    "/countries": {
      "parameters": [],
      "get": {
        "summary": "Countries",
        "description": "Get supported countries, optionally filtered by search params.",
        "operationId": "getCountries",
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Countries"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Return only active countries in the current subscription plan settings",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of supported countries",
                  "items": {
                    "$ref": "#/components/schemas/country"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Examples requires you to have installed curl package\n// Installation instructions here: https://curl.haxx.se/download.html\n\n\n# Returns a list of supported countries for API data\n\ncurl --request GET \\\n  --url https://api.festdays.dev/v1/countries \\\n  --header 'token: <api token goes here>'\n\n\n# Returns only countries supported in the current subscription plan\n\ncurl --request GET \\\n  --url 'https://api.festdays.dev/v1/countries?available=true' \\\n  --header 'token: <api token goes here>'"
          },
          {
            "lang": "HTTPie",
            "source": "// Examples requires you to have installed httpie package, an powerful alternative to curl and wget\n// Installation instructions here: https://httpie.org/docs#installation\n\n\n# Returns a list of supported countries for API data\n\nhttp GET https://api.festdays.dev/v1/countries \\\n  token:'<api token goes here>'\n\n\n# Returns only countries supported in the current subscription plan\n\nhttp GET 'https://api.festdays.dev/v1/countries?available=true' \\\n  token:'<api token goes here>'"
          },
          {
            "lang": "C#",
            "source": "// Returns a list of supported countries for API data\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/countries\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);\n\n\n// Returns only countries supported in the current subscription plan\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/countries?available=true\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "// Returns a list of supported countries for API data\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/countries\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();\n\n\n// Returns only countries supported in the current subscription plan\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/countries?available=true\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();"
          },
          {
            "lang": "JavaScript",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Returns a list of supported countries for API data\n\nfetch(\"https://api.festdays.dev/v1/countries\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});\n\n\n// Returns only countries supported in the current subscription plan\n\nfetch(\"https://api.festdays.dev/v1/countries?available=true\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});"
          },
          {
            "lang": "jQuery",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Returns a list of supported countries for API data\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/countries\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n\n\n// Returns only countries supported in the current subscription plan\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/countries?available=true\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Node",
            "source": "// Examples requires you to have installed request Node.js package.\n// Install it by running: npm install --save request or yarn add request\n\n\n// Returns a list of supported countries for API data\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/countries',\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n\n\n\n// Returns only countries supported in the current subscription plan\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/countries',\n  qs: {available: 'true'},\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node (unirest)",
            "source": "// Returns a list of supported countries for API data\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/countries\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n\n\n// Returns only countries supported in the current subscription plan\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/countries?available=true\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "PHP",
            "source": "// Examples requires to have installed pecl_http package, a simple and elegant HTTP client for PHP.\n// Install it by running: pecl install pecl_http\n// More information: https://pecl.php.net/package/pecl_http/3.2.0\n\n\n// Returns a list of supported countries for API data\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/countries');\n$request->setRequestMethod('GET');\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();\n\n\n// Returns only countries supported in the current subscription plan\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/countries');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'available' => 'true'\n)));\n\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "PHP (curl)",
            "source": "// Returns a list of supported countries for API data\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/countries\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n\n\n// Returns only countries supported in the current subscription plan\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/countries?available=true\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "# Examples requires to have installed requests Python package.\n# Install it by running: pip install requests\n\n\n# Returns a list of supported countries for API data\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/countries\"\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)\n\n\n# Returns only countries supported in the current subscription plan\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/countries\"\n\nquerystring = {\"available\":\"true\"}\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "# Returns a list of supported countries for API data\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/countries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body\n\n\n# Returns only countries supported in the current subscription plan\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/countries?available=true\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go",
            "source": "// Returns a list of supported countries for API data\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/countries\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n\n\n// Returns only countries supported in the current subscription plan\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/countries?available=true\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C",
            "source": "// Returns a list of supported countries for API data\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/countries\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);\n\n\n// Returns only countries supported in the current subscription plan\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/countries?available=true\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Powershell",
            "source": "# Returns a list of supported countries for API data\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/countries' -Method GET -Headers $headers\n\n\n# Returns only countries supported in the current subscription plan\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/countries?available=true' -Method GET -Headers $headers"
          },
          {
            "lang": "ObjC",
            "source": "// Returns a list of supported countries for API data\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/countries\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n\n\n// Returns only countries supported in the current subscription plan\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/countries?available=true\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Swift",
            "source": "// Returns a list of supported countries for API data\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/countries\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n\n\n// Returns only countries supported in the current subscription plan\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/countries?available=true\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "OCaml",
            "source": "(* Returns a list of supported countries for API data *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/countries\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)\n\n\n(* Returns only countries supported in the current subscription plan *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/countries?available=true\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          }
        ]
      }
    },
    "/categories": {
      "parameters": [],
      "get": {
        "summary": "Get holiday categories",
        "description": "Get all supported holiday types categorization.",
        "operationId": "getCategories",
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Categories"
        ],
        "responses": {
          "200": {
            "description": "List of supported holiday types categorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of available holiday types categorization",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Examples requires you to have installed curl package\n// Installation instructions here: https://curl.haxx.se/download.html\n\n\n# Get holiday categories\n\ncurl --request GET \\\n  --url https://api.festdays.dev/v1/categories \\\n  --header 'token: <api token goes here>'"
          },
          {
            "lang": "HTTPie",
            "source": "// Examples requires you to have installed httpie package, an powerful alternative to curl and wget\n// Installation instructions here: https://httpie.org/docs#installation\n\n\n# Get holiday categories\n\nhttp GET https://api.festdays.dev/v1/categories \\\n  token:'<api token goes here>'"
          },
          {
            "lang": "C#",
            "source": "// Get holiday categories\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/categories\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "// Get holiday categories\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/categories\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();"
          },
          {
            "lang": "JavaScript",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get holiday categories\n\nfetch(\"https://api.festdays.dev/v1/categories\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});"
          },
          {
            "lang": "jQuery",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get holiday categories\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/categories\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Node",
            "source": "// Examples requires you to have installed request Node.js package.\n// Install it by running: npm install --save request or yarn add request\n\n\n// Get holiday categories\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/categories',\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node (unirest)",
            "source": "// Get holiday categories\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/categories\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "PHP",
            "source": "// Examples requires to have installed pecl_http package, a simple and elegant HTTP client for PHP.\n// Install it by running: pecl install pecl_http\n// More information: https://pecl.php.net/package/pecl_http/3.2.0\n\n\n// Get holiday categories\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/categories');\n$request->setRequestMethod('GET');\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "PHP (curl)",
            "source": "// Get holiday categories\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/categories\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "# Examples requires to have installed requests Python package.\n# Install it by running: pip install requests\n\n\n# Get holiday categories\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/categories\"\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "# Get holiday categories\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/categories\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go",
            "source": "// Get holiday categories\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/categories\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C",
            "source": "// Get holiday categories\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/categories\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Powershell",
            "source": "# Get holiday categories\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/categories' -Method GET -Headers $headers"
          },
          {
            "lang": "ObjC",
            "source": "// Get holiday categories\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/categories\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Swift",
            "source": "// Get holiday categories\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/categories\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "OCaml",
            "source": "(* Get holiday categories *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/categories\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          }
        ]
      }
    },
    "/account": {
      "parameters": [],
      "get": {
        "summary": "Account",
        "description": "Get account subscription and API data available features",
        "operationId": "getAccount",
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "description": "Search holidays",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 40
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account & subscription information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Examples requires you to have installed curl package\n// Installation instructions here: https://curl.haxx.se/download.html\n\n\n# Get account details\n\ncurl --request GET \\\n  --url https://api.festdays.dev/v1/account \\\n  --header 'token: <api token goes here>'"
          },
          {
            "lang": "HTTPie",
            "source": "// Examples requires you to have installed httpie package, an powerful alternative to curl and wget\n// Installation instructions here: https://httpie.org/docs#installation\n\n\n# Get account details\n\nhttp GET https://api.festdays.dev/v1/account \\\n  token:'<api token goes here>'"
          },
          {
            "lang": "C#",
            "source": "// Get account details\n\nvar client = new RestClient(\"https://api.festdays.dev/v1/account\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"token\", \"<api token goes here>\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "// Get account details\n\nHttpResponse<String> response = Unirest.get(\"https://api.festdays.dev/v1/account\")\n  .header(\"token\", \"<api token goes here>\")\n  .asString();"
          },
          {
            "lang": "JavaScript",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get account details\n\nfetch(\"https://api.festdays.dev/v1/account\", {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n})\n.then(response => {\n  console.log(response);\n})\n.catch(err => {\n  console.error(err);\n});"
          },
          {
            "lang": "jQuery",
            "source": "// IMPORTANT NOTICE:\n// Performing HTTPS requests to the API from a JavaScript in a web browser is\n// forbidden by default due to cross-origin security policies (CORS).\n// More information here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n//\n// Communicating directly in JavaScript from a web browser with the API\n// is considered security bad practice and completely discouraged\n// as this will expose your API secret key, enabling a third-party user\n//  to easily steal your key and have full privilege access of your account via API.\n//\n// We strongly recommend to do not expose the API key in the web browser JavaScript code.\n// Always use your server to communicate with the API without exposing the API key.\n\n\n// Get account details\n\nvar settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.festdays.dev/v1/account\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Node",
            "source": "// Examples requires you to have installed request Node.js package.\n// Install it by running: npm install --save request or yarn add request\n\n\n// Get account details\n\nvar request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.festdays.dev/v1/account',\n  headers: {token: '<api token goes here>'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node (unirest)",
            "source": "// Get account details\n\nvar http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.festdays.dev\",\n  \"port\": null,\n  \"path\": \"/v1/account\",\n  \"headers\": {\n    \"token\": \"<api token goes here>\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "PHP",
            "source": "// Examples requires to have installed pecl_http package, a simple and elegant HTTP client for PHP.\n// Install it by running: pecl install pecl_http\n// More information: https://pecl.php.net/package/pecl_http/3.2.0\n\n\n// Get account details\n\n<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.festdays.dev/v1/account');\n$request->setRequestMethod('GET');\n$request->setHeaders(array(\n  'token' => '<api token goes here>'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "PHP (curl)",
            "source": "// Get account details\n\n<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.festdays.dev/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"token: <api token goes here>\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "# Examples requires to have installed requests Python package.\n# Install it by running: pip install requests\n\n\n# Get account details\n\nimport requests\n\nurl = \"https://api.festdays.dev/v1/account\"\n\nheaders = {'token': '<api token goes here>'}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "# Get account details\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.festdays.dev/v1/account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"token\"] = '<api token goes here>'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go",
            "source": "// Get account details\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.festdays.dev/v1/account\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"token\", \"<api token goes here>\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C",
            "source": "// Get account details\n\nCURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.festdays.dev/v1/account\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"token: <api token goes here>\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Powershell",
            "source": "# Get account details\n\n$headers=@{}\n$headers.Add(\"token\", \"<api token goes here>\")\n$response = Invoke-WebRequest -Uri 'https://api.festdays.dev/v1/account' -Method GET -Headers $headers"
          },
          {
            "lang": "ObjC",
            "source": "// Get account details\n\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"token\": @\"<api token goes here>\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.festdays.dev/v1/account\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Swift",
            "source": "// Get account details\n\nimport Foundation\n\nlet headers = [\"token\": \"<api token goes here>\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.festdays.dev/v1/account\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "OCaml",
            "source": "(* Get account details *)\n\nopen Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://api.festdays.dev/v1/account\" in\nlet headers = Header.add (Header.init ()) \"token\" \"<api token goes here>\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.festdays.dev/v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "default": 400,
            "description": "HTTP status code of the error. Same as HTTP protocol response status",
            "enum": [
              400,
              401,
              402,
              403,
              404,
              405,
              409,
              410,
              413,
              415,
              429,
              451,
              500,
              501,
              502,
              503,
              504,
              505
            ]
          },
          "message": {
            "type": "string",
            "description": "Error human friendly description"
          },
          "errorCode": {
            "type": "string",
            "description": "Application specific error code. Not always present."
          },
          "errors": {
            "type": "array",
            "description": "Additional data validation errors, if present",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Optional code description"
                },
                "reason": {
                  "type": "string",
                  "description": "Reason of the validation error"
                },
                "message": {
                  "type": "string",
                  "description": "Error detailed description"
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "description": "Optional error metadata key-value pairs. Typically not present."
          }
        }
      },
      "account": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Account email"
              }
            }
          },
          "subscription": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "startedAt": {
                "type": "string",
                "format": "datetime"
              },
              "canceledAt": {
                "type": "string",
                "format": "datetime"
              }
            }
          },
          "years": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "holiday": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object",
            "description": "Results pagination metadata",
            "properties": {
              "page": {
                "type": "number",
                "description": "Current results page number"
              },
              "prevPage": {
                "type": "number",
                "description": "Previous page number value. This field will be `null` if no previous page is available"
              },
              "nextPage": {
                "type": "number",
                "description": "Next page number value. This field will be `null` if no next page is available"
              },
              "totalPages": {
                "type": "number",
                "description": "Total pages of found results with the specified page size"
              },
              "size": {
                "type": "number",
                "description": "Size of returned results for the current page"
              },
              "total": {
                "type": "number",
                "description": "Total number of found results with the specified query"
              }
            }
          },
          "results": {
            "type": "array",
            "description": "Holiday data results matching the given query",
            "items": {
              "type": "object",
              "description": "Holiday data entry",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Holiday common name in the specified language, defaults to English"
                },
                "nameAlt": {
                  "type": "string",
                  "description": "Holiday alternative name, if available"
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Holiday date in ISO 8601 date format. Example: `2020-08-15`"
                },
                "day": {
                  "type": "number",
                  "description": "Day of the month",
                  "minimum": 1,
                  "maximum": 31
                },
                "month": {
                  "type": "number",
                  "description": "Month number, from 1 (January) to 12 (December)",
                  "minimum": 1,
                  "maximum": 12
                },
                "year": {
                  "type": "number",
                  "description": "Holiday year",
                  "minimum": 2000,
                  "maximum": 2049
                },
                "weekday": {
                  "type": "number",
                  "description": "Day of the week from 1 (Monday) to 7 (Sunday)",
                  "minimum": 1,
                  "maximum": 7
                },
                "country": {
                  "type": "string",
                  "description": "Country code in ISO format. Example: `US`, `DE`"
                },
                "countryName": {
                  "type": "string",
                  "description": "Country name. Example: `United States`, `Germany`"
                },
                "types": {
                  "type": "array",
                  "description": "Holiday type categorization. A holiday entry may have multiple types. Example: local holiday, season change, religious holiday",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Category type human-friendly name",
                        "enum": [
                          "Local holiday",
                          "Local bank holiday",
                          "Bank holiday",
                          "Local observance",
                          "Observance",
                          "Government public holiday",
                          "Public sector holiday",
                          "State holiday",
                          "Clock change",
                          "Christian festivity",
                          "Jewish festivity",
                          "Muslim festivity",
                          "Hindu festivity",
                          "Season change",
                          "National day",
                          "Regional day",
                          "Part Day Holiday",
                          "Restricted Trading Day",
                          "Half Day Restricted Trading Day",
                          "Other holiday",
                          "Religious"
                        ]
                      },
                      "code": {
                        "type": "string",
                        "description": "Category type unique code. Useful for filtering holiday entries by type",
                        "enum": [
                          "local-holiday",
                          "local-bank-holiday",
                          "bank-holiday",
                          "local-observance",
                          "observance",
                          "government-public-holiday",
                          "public-sector-holiday",
                          "state-holiday",
                          "clock-change",
                          "christian-festivity",
                          "Jewish-festivity",
                          "jewish-festivity",
                          "muslim-festivity",
                          "hindu-festivity",
                          "season-change",
                          "national-day",
                          "regional-day",
                          "part-day-holiday",
                          "restricted-trading-day",
                          "half-day-restricted-trading-day",
                          "other-holiday",
                          "religious"
                        ]
                      },
                      "isObservance": {
                        "type": "boolean",
                        "description": "Field value will be `true` if holiday type is observance"
                      },
                      "isSeasonChange": {
                        "type": "boolean",
                        "description": "Field value will be `true` if holiday type is season change"
                      },
                      "isReligious": {
                        "type": "boolean",
                        "description": "Field value will be `true` if holiday type is a religious festivity"
                      },
                      "isClockChange": {
                        "type": "boolean",
                        "description": "Field value will be `true` if holiday type is time clock change"
                      },
                      "isLocal": {
                        "type": "boolean",
                        "description": "Field value will be `true` if holiday type is local only (city, country, province, region)"
                      }
                    }
                  }
                },
                "regions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "Region ID per specific country. For country level holida special value `0` will be used"
                      },
                      "abbrev": {
                        "type": "string",
                        "description": "Region, state, county or city code abbreviation. For country level holiday special character `*` will be used"
                      },
                      "name": {
                        "type": "string",
                        "description": "Region, state, county or city common name in English. For country level holiday special value `All` will be used"
                      },
                      "exception": {
                        "type": "string",
                        "description": "Notes about any exceptions that may apply"
                      },
                      "iso": {
                        "type": "string",
                        "description": "Region standard ISO code for the region, state, county or city, if available"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "country": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Country name in English"
          },
          "flag": {
            "type": "string",
            "description": "Country flag icon"
          },
          "code": {
            "type": "string",
            "description": "Country ISO code. Examples: `US`, `DE`"
          },
          "years": {
            "type": "array",
            "description": "Holiday data available years for the country. Please note that access to different years depends on your active plan",
            "items": {
              "type": "number",
              "description": "Year",
              "minimum": 2000,
              "maximum": 2049
            }
          }
        }
      },
      "language": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Country name in English"
          },
          "flag": {
            "type": "string",
            "description": "Country flag icon"
          },
          "code": {
            "type": "string",
            "description": "Country ISO code. Examples: `US`, `DE`"
          },
          "years": {
            "type": "array",
            "description": "Holiday data available years for the country. Please note that access to different years depends on your active plan",
            "items": {
              "type": "number",
              "description": "Year",
              "minimum": 2000,
              "maximum": 2049
            }
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category type human-friendly name",
            "enum": [
              "Local holiday",
              "Local bank holiday",
              "Bank holiday",
              "Local observance",
              "Observance",
              "Government public holiday",
              "Public sector holiday",
              "State holiday",
              "Clock change",
              "Christian festivity",
              "Jewish festivity",
              "Muslim festivity",
              "Hindu festivity",
              "Season change",
              "National day",
              "Regional day",
              "Part Day Holiday",
              "Restricted Trading Day",
              "Half Day Restricted Trading Day",
              "Other holiday",
              "Religious"
            ]
          },
          "code": {
            "type": "string",
            "description": "Category type unique code. Useful for filtering holiday entries by type",
            "enum": [
              "local-holiday",
              "local-bank-holiday",
              "bank-holiday",
              "local-observance",
              "observance",
              "government-public-holiday",
              "public-sector-holiday",
              "state-holiday",
              "clock-change",
              "christian-festivity",
              "Jewish-festivity",
              "jewish-festivity",
              "muslim-festivity",
              "hindu-festivity",
              "season-change",
              "national-day",
              "regional-day",
              "part-day-holiday",
              "restricted-trading-day",
              "half-day-restricted-trading-day",
              "other-holiday",
              "religious"
            ]
          },
          "isObservance": {
            "type": "boolean",
            "description": "Field value will be `true` if holiday type is observance"
          },
          "isSeasonChange": {
            "type": "boolean",
            "description": "Field value will be `true` if holiday type is season change"
          },
          "isReligious": {
            "type": "boolean",
            "description": "Field value will be `true` if holiday type is a religious festivity"
          },
          "isClockChange": {
            "type": "boolean",
            "description": "Field value will be `true` if holiday type is time clock change"
          },
          "isLocal": {
            "type": "boolean",
            "description": "Field value will be `true` if holiday type is local only (city, country, province, region)"
          }
        }
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}